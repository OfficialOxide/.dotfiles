2021-08-14 14:28:23	→	oxide has joined #haskell
2021-08-14 14:28:23	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-14 14:28:23	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-14 14:28:23	ℹ	Channel #haskell: 712 nicks (1 op, 0 voices, 711 normals)
2021-08-14 14:28:23	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-14 14:29:13	→	jakalx has joined #haskell
2021-08-14 14:31:21	←	sander has quit (Ping timeout: 248 seconds)
2021-08-14 14:31:59	→	sander has joined #haskell
2021-08-14 14:32:37	ℹ	irc: disconnected from server
2021-08-19 13:11:02	→	oxide has joined #haskell
2021-08-19 13:11:02	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-19 13:11:02	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-19 13:11:02	ℹ	Channel #haskell: 723 nicks (1 op, 0 voices, 722 normals)
2021-08-19 13:11:02	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-19 13:11:12	→	michalz has joined #haskell
2021-08-19 13:11:23	←	hnOsmium0001 has quit (Quit: Connection closed for inactivity)
2021-08-19 13:16:54	→	mc47 has joined #haskell
2021-08-19 13:17:06	→	kuribas has joined #haskell
2021-08-19 13:18:01	←	loonycyborg has quit (Remote host closed the connection)
2021-08-19 13:18:02	→	acidjnk_new has joined #haskell
2021-08-19 13:18:28	→	dschrempf has joined #haskell
2021-08-19 13:20:11	→	epolanski has joined #haskell
2021-08-19 13:22:16	←	eggplantade has quit (Remote host closed the connection)
2021-08-19 13:25:20	←	Sgeo has quit (Read error: Connection reset by peer)
2021-08-19 13:25:29	←	econo has quit (Quit: Connection closed for inactivity)
2021-08-19 13:27:30	→	loonycyborg has joined #haskell
2021-08-19 13:32:11	→	chomwitt has joined #haskell
2021-08-19 13:33:45	ℹ	irc: disconnected from server
2021-08-20 15:19:49	→	oxide has joined #haskell
2021-08-20 15:19:49	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-20 15:19:49	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-20 15:19:49	ℹ	Channel #haskell: 726 nicks (1 op, 0 voices, 725 normals)
2021-08-20 15:19:50	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-20 15:21:58	←	kstuart has quit (Ping timeout: 250 seconds)
2021-08-20 15:23:15	←	shriekingnoise has quit (Quit: Quit)
2021-08-20 15:24:40	←	jespada has quit (Ping timeout: 240 seconds)
2021-08-20 15:26:15	→	kilolympus has joined #haskell
2021-08-20 15:26:16	→	jespada has joined #haskell
2021-08-20 15:26:49	ℹ	irc: disconnected from server
2021-08-20 15:28:19	→	oxide has joined #haskell
2021-08-20 15:28:19	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-20 15:28:19	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-20 15:28:19	ℹ	Channel #haskell: 725 nicks (1 op, 0 voices, 724 normals)
2021-08-20 15:28:20	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-20 15:28:35	→	tengu1 has joined #haskell
2021-08-20 15:31:01	ℹ	irc: disconnected from server
2021-08-20 15:31:35	→	oxide has joined #haskell
2021-08-20 15:31:35	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-20 15:31:35	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-20 15:31:35	ℹ	Channel #haskell: 726 nicks (1 op, 0 voices, 725 normals)
2021-08-20 15:31:35	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-20 15:35:02	ℹ	irc: disconnected from server
2021-08-20 15:36:00	→	oxide has joined #haskell
2021-08-20 15:36:00	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-20 15:36:00	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-20 15:36:00	ℹ	Channel #haskell: 726 nicks (1 op, 0 voices, 725 normals)
2021-08-20 15:36:00	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-20 15:40:25	←	burnsidesLlama has quit (Remote host closed the connection)
2021-08-20 15:40:27	←	random-jellyfish has quit (Ping timeout: 246 seconds)
2021-08-20 15:40:51	→	burnsidesLlama has joined #haskell
2021-08-20 15:51:37	←	burnsidesLlama has quit (Remote host closed the connection)
2021-08-20 15:52:04	→	burnsidesLlama has joined #haskell
2021-08-20 15:56:10	←	burnsidesLlama has quit (Ping timeout: 240 seconds)
2021-08-20 15:58:54	→	o1lo01ol1o has joined #haskell
2021-08-20 15:59:31	←	o1lo01ol1o has quit (Remote host closed the connection)
2021-08-20 15:59:43	→	o1lo01ol1o has joined #haskell
2021-08-20 16:01:59	ℹ	irc: disconnected from server
2021-08-20 16:11:00	→	oxide has joined #haskell
2021-08-20 16:11:00	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-20 16:11:00	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-20 16:11:00	ℹ	Channel #haskell: 724 nicks (1 op, 0 voices, 723 normals)
2021-08-20 16:11:01	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-20 16:24:49	→	burnsidesLlama has joined #haskell
2021-08-20 16:26:44	mastarija	Can someone remind me what's it called when we can have a valid e.g. "Monad" instance if only we could put a constraint on the "inner" type?
2021-08-20 16:26:56	mastarija	Constrained instances, bound instances...?
2021-08-20 16:27:34	Rembane_	Is it a scoped instance? 
2021-08-20 16:27:38	dminuoso	mastarija: I dont understand the question entirely.
2021-08-20 16:27:41	dminuoso	Can you give a concrete example?
2021-08-20 16:28:02	mastarija	Hm... let's say I could make an Applicative instance
2021-08-20 16:28:34	mastarija	But only if the target e.g. instance Monoid n => Applicative (MyType n) where
2021-08-20 16:29:02	mastarija	And MyType : * -> *
2021-08-20 16:29:12	mastarija	not * -> * -> *
2021-08-20 16:29:57	mastarija	Basically, I could make an Applicative instance if only I can constrain the argument of MyType
2021-08-20 16:30:00	→	merijn has joined #haskell
2021-08-20 16:30:02	←	burnsidesLlama has quit (Remote host closed the connection)
2021-08-20 16:30:29	dminuoso	mastarija: From a type checker point of view you have an `Applicative` instance for all n of `MyType n`
2021-08-20 16:30:44	dminuoso	It just defers the `Monoid n` constraint to somewhere else
2021-08-20 16:31:02	→	alx741 has joined #haskell
2021-08-20 16:31:11	mastarija	I mean, it's not possible to do what I want with standard type classes
2021-08-20 16:31:43	mastarija	There's a library with constrained type classes for that purpose, but my brain can't recall what it is called
2021-08-20 16:33:14	dminuoso	mastarija: You can observe this fact since it would match that instance for `Applicative (MyType Int)`, even if there's no `Monoid Int`
2021-08-20 16:33:40	dminuoso	So the constraint does not constrain the instance itself
2021-08-20 16:34:07	mastarija	I want to use e.g. "mempty" within my implementation of "Applicative" instance
2021-08-20 16:34:41	dminuoso	 Maybe my wording slightly off.
2021-08-20 16:34:42	mastarija	And I want to have "Applicative" instance for all "MyType n"
2021-08-20 16:35:01	→	drsocks has joined #haskell
2021-08-20 16:35:17	mastarija	dminuoso, Maybe it's me, didn't get enough sleep today :D
2021-08-20 16:35:37	→	random-jellyfish has joined #haskell
2021-08-20 16:35:46	←	drsocks has quit (Client Quit)
2021-08-20 16:36:11	alp	mastarija, constrained is the right term I think. see e.g https://hackage.haskell.org/package/constrained-monads
2021-08-20 16:36:57	mastarija	alp, ah yes..
2021-08-20 16:37:00	mastarija	that's it
2021-08-20 16:37:22	alp	i.e your MyType is a monad or applicative or something only if the type parameters it will get satisfy some constraint
2021-08-20 16:37:31	mastarija	Yes
2021-08-20 16:37:47	dminuoso	alp: Mmm, so this would allow us to have Monad for Set?
2021-08-20 16:37:50	alp	eg what one would want for Set to be a functor/applicative/monad, because of the Ord
2021-08-20 16:37:56	dminuoso	Neat!
2021-08-20 16:38:12	dminuoso	I thought we needed quantified constraints for that
2021-08-20 16:38:18	dminuoso	Maybe I misremembered
2021-08-20 16:38:21	alp	dminuoso, indeed: https://hackage.haskell.org/package/constrained-monads-0.5.0.0/docs/src/Control-Monad-Constrained.html#line-892
2021-08-20 16:40:30	←	vpan has quit (Quit: Leaving.)
2021-08-20 16:40:37	alp	dminuoso, I don't think that'd be enough. because the fmap you'd have to implement (with the standard Functor class) would still be required to have type  forall a b. (a -> b) -> Set a -> Set b, no Ord in sight
2021-08-20 16:41:46	→	acidjnk_new has joined #haskell
2021-08-20 16:41:56	alp	whereas this whole constrained line of thinking lets you specify a suitable constraint that's "made available to you" when you implement the method
2021-08-20 16:42:31	mastarija	Hm... is it possible to implement the Unconstrained version of e.g. Functor using the constrained version?
2021-08-20 16:42:37	dminuoso	Presumably it just reifies the dict with `constraints` and gives it to you
2021-08-20 16:44:50	mastarija	It seems like it would be possible to do it as long as we do e.g. "instance Constrained.Functor f => UnConstrainde.Functor f where {use constrained methods to implement uncinstrained methods}"
2021-08-20 16:44:51	←	acidjnk_new3 has quit (Ping timeout: 258 seconds)
2021-08-20 16:44:51	arahael	Hmph, it seems I can't use hip in haskell 8.10.
2021-08-20 16:46:32	alp	mastarija, calling the constrained methods will bring up e.g the Ord constraints for Set, that you'll never have available when implementing the unconstrained variant. fmap :: forall a b. (a -> b) -> Set a -> Set b   is the type your unconstrained implementation needs to have, which (kinda purposefully) prevents you from assuming anything about 'a' and 'b'.
2021-08-20 16:46:32	←	xsarnik has quit (Remote host closed the connection)
2021-08-20 16:47:39	mastarija	Ah.. yes. Now that I think about it
2021-08-20 16:48:31	alp	you can play some tricks by "decorating" the Set type instead of changing the classes to allow for constraints though, e.g https://hackage.haskell.org/package/set-monad
2021-08-20 16:49:09	←	smichel17[m] has quit (Quit: Reconnecting)
2021-08-20 16:49:12	alp	you essentially make constructors to represent the operations of the classes you want to implement: https://hackage.haskell.org/package/set-monad-0.3.0.0/docs/src/Data.Set.Monad.html#Set
2021-08-20 16:49:23	→	smichel17[m] has joined #haskell
2021-08-20 16:50:05	alp	and when you actually need to grab the results, you "collapse" those operations, which is the role of that 'run' function there
2021-08-20 16:50:15	←	smichel17[m] has quit (Client Quit)
2021-08-20 16:50:31	→	smichel17[m] has joined #haskell
2021-08-20 16:50:39	←	Lycurgus has quit (Quit: Exeunt)
2021-08-20 16:51:54	alp	this particular Set monad example is well covered in http://okmij.org/ftp/Haskell/set-monad.html - gives you a decent overview of the various techniques one can use in such situations
2021-08-20 16:58:53	→	dschrempf has joined #haskell
2021-08-20 17:00:36	ℹ	irc: disconnected from server
2021-08-20 22:17:19	→	oxide_ has joined #haskell
2021-08-20 22:17:19	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-20 22:17:19	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-20 22:17:20	ℹ	Channel #haskell: 728 nicks (1 op, 0 voices, 727 normals)
2021-08-20 22:17:20	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-20 22:17:48	←	merijn has quit (Ping timeout: 252 seconds)
2021-08-20 22:18:04	monochrom	When "let" and "where" are both legal, I am inclined to "where" because more people do this and it is easier to lay out.  But there is an exception: when for educational purpose, in a few cases, the presentation goes better if the ingredients are presented before the composition punch line.
2021-08-20 22:20:03	dsal	I argued from the other direction.  I want to know the most important parts and then decide whether I need to look up something later.
2021-08-20 22:20:52	→	pavonia has joined #haskell
2021-08-20 22:20:54	dsal	The example introduced two magic numbers and a function with a really obvious name with `let` as if knowing the details of these things helped me understand what was happening.
2021-08-20 22:21:30	←	zaquest has quit (Quit: Leaving)
2021-08-20 22:22:44	→	zaquest has joined #haskell
2021-08-20 22:22:52	→	ubert1 has joined #haskell
2021-08-20 22:23:05	sm	wheres are easier to extract to a function since they can't depend on things above
2021-08-20 22:23:34	→	burnsidesLlama has joined #haskell
2021-08-20 22:23:36	ℹ	irc: disconnected from server
2021-08-20 22:47:31	→	oxide_ has joined #haskell
2021-08-20 22:47:31	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-20 22:47:31	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-20 22:47:31	ℹ	Channel #haskell: 731 nicks (1 op, 0 voices, 730 normals)
2021-08-20 22:47:32	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-20 22:48:14	→	derelict has joined #haskell
2021-08-20 22:48:36	←	drd has quit (Ping timeout: 252 seconds)
2021-08-20 22:49:47	←	smitop has quit (Quit: Ping timeout (120 seconds))
2021-08-20 22:50:34	→	smitop has joined #haskell
2021-08-20 22:50:43	←	jakalx has left #haskell (Error from remote client)
2021-08-20 22:51:50	→	Erutuon has joined #haskell
2021-08-20 22:55:52	←	notzmv has quit (Ping timeout: 248 seconds)
2021-08-20 22:58:15	←	azeem has quit (Ping timeout: 250 seconds)
2021-08-20 22:58:21	←	dajoer has quit (Quit: leaving)
2021-08-20 22:58:48	→	azeem has joined #haskell
2021-08-20 22:59:38	←	o1lo01ol1o has quit (Remote host closed the connection)
2021-08-20 23:00:38	→	Maya50 has joined #haskell
2021-08-20 23:04:04	←	ananthakumaran has quit (Quit: leaving)
2021-08-20 23:05:21	←	eggplantade has quit (Remote host closed the connection)
2021-08-20 23:06:18	→	o1lo01ol1o has joined #haskell
2021-08-20 23:07:23	←	azeem has quit (Read error: Connection reset by peer)
2021-08-20 23:07:38	→	azeem has joined #haskell
2021-08-20 23:11:22	←	o1lo01ol1o has quit (Remote host closed the connection)
2021-08-20 23:13:45	→	o1lo01ol1o has joined #haskell
2021-08-20 23:15:20	→	retroid_ has joined #haskell
2021-08-20 23:18:27	←	o1lo01ol1o has quit (Remote host closed the connection)
2021-08-20 23:21:09	←	merijn has quit (Ping timeout: 240 seconds)
2021-08-20 23:25:05	←	Matthias1 has quit (Read error: Connection reset by peer)
2021-08-20 23:26:21	→	wallymathieu has joined #haskell
2021-08-20 23:32:27	←	fef has quit (Remote host closed the connection)
2021-08-20 23:32:54	→	o1lo01ol1o has joined #haskell
2021-08-20 23:36:00	→	lavaman has joined #haskell
2021-08-20 23:37:33	←	o1lo01ol1o has quit (Ping timeout: 252 seconds)
2021-08-20 23:39:12	←	keutoi has quit (Ping timeout: 252 seconds)
2021-08-20 23:39:46	→	notzmv has joined #haskell
2021-08-20 23:40:18	←	lavaman has quit (Ping timeout: 252 seconds)
2021-08-20 23:41:13	→	keutoi has joined #haskell
2021-08-20 23:43:44	→	jakalx has joined #haskell
2021-08-20 23:48:58	→	lavaman has joined #haskell
2021-08-20 23:53:18	←	Xnuk has quit (Quit: ZNC - https://znc.in)
2021-08-20 23:54:01	→	Xnuk has joined #haskell
2021-08-20 23:59:25	→	fresheyeball has joined #haskell
2021-08-21 00:01:43	_bin	What is the idiomatic way to run a loop until SIGTERM, forking a new thread with the same function every n minutes?
2021-08-21 00:04:45	→	o1lo01ol1o has joined #haskell
2021-08-21 00:05:06	dsal	forever + threadDelay + async, I suppose.
2021-08-21 00:06:09	→	eggplantade has joined #haskell
2021-08-21 00:06:38	→	Guest38 has joined #haskell
2021-08-21 00:06:48	Rembane_	_bin: What's a thread in this case?
2021-08-21 00:08:32	←	eggplantade has quit (Remote host closed the connection)
2021-08-21 00:08:48	→	eggplantade has joined #haskell
2021-08-21 00:10:45	→	dschrempf has joined #haskell
2021-08-21 00:12:12	←	notzmv has quit (Ping timeout: 252 seconds)
2021-08-21 00:12:24	←	keutoi has quit (Quit: leaving)
2021-08-21 00:12:26	←	Guest38 has quit (Quit: Client closed)
2021-08-21 00:13:20	_bin	Rembane_: forkIO, I guess
2021-08-21 00:15:12	Rembane_	_bin: Cool, dsal's idea should work for that too. :)
2021-08-21 00:18:19	←	lavaman has quit (Ping timeout: 258 seconds)
2021-08-21 00:18:58	→	Guest60 has joined #haskell
2021-08-21 00:21:18	←	o1lo01ol1o has quit (Remote host closed the connection)
2021-08-21 00:22:30	Guest60	I'm writting wrappers for a bunch of different things (a database and a bunch of HTTP APIs), I'm not sure how to handle errors
2021-08-21 00:22:35	Guest60	should I just define custom Error sum types in each module, make them instances of Exception and throw in IO ? I mostly want everything to compose nicely
2021-08-21 00:23:12	←	dschrempf has quit (Ping timeout: 252 seconds)
2021-08-21 00:24:24	_bin	dsal, Remobane_: Thanks.
2021-08-21 00:30:21	←	wroathe has quit (Ping timeout: 252 seconds)
2021-08-21 00:30:21	←	benin036932 has quit (Ping timeout: 252 seconds)
2021-08-21 00:31:07	←	Maya50 has quit (Quit: Client closed)
2021-08-21 00:37:43	→	benin036932 has joined #haskell
2021-08-21 00:41:05	_bin	Any recommendation on logging frameworks?  co-log and katip appear to be two common ones, but I'm not sure as to why one or the other is better.
2021-08-21 00:47:28	←	xff0x has quit (Ping timeout: 250 seconds)
2021-08-21 00:52:41	→	venue has joined #haskell
2021-08-21 00:53:34	←	Obo has quit (Quit: WeeChat 2.8)
2021-08-21 00:56:14	lechner	Hi, many friendly souls here told me to prefer 'putStrLn' over 'print', and especially 'printf', but 'hlint' recommends the former!    https://paste.debian.net/1208376/
2021-08-21 00:57:34	monochrom	Are you ignoring the context that ". show" is also present?
2021-08-21 00:58:23	monochrom	But I would delete hlint altogether.
2021-08-21 00:58:46	monochrom	If you prefer "putStrLn  . show", if this is your coding style, then this is your coding style.
2021-08-21 00:58:58	→	o1lo01ol1o has joined #haskell
2021-08-21 00:59:24	Rembane_	I just do what hlint tells me, it makes my life more interesting and increases the chance that monochrom becomes my arch enemy.
2021-08-21 00:59:25	monochrom	Along the way, I would also delete any memory of hearing an unconditional, one-size-fits-all "prefer putStrLn over print".
2021-08-21 00:59:43	monochrom	Do people really say things like "prefer apple to orange" in their style guides?
2021-08-21 00:59:56	monochrom	haha
2021-08-21 01:00:23	lechner	does 'print' need a   <> "\n" ?
2021-08-21 01:00:28	nitrix	print is literally putStrLn . show, so I don't see how it could be a problem semantically, nor syntactically (way simpler than the composition).
2021-08-21 01:00:29	monochrom	No.
2021-08-21 01:01:40	lechner	How about "newtype instead of data"?     https://paste.debian.net/1208378/
2021-08-21 01:02:16	monochrom	Did you see the line "Note: decreases laziness"?
2021-08-21 01:02:54	monochrom	BTW I think you should also wear pink instead of blue tomorrow.
2021-08-21 01:03:09	←	o1lo01ol1o has quit (Ping timeout: 240 seconds)
2021-08-21 01:03:16	monochrom	And for tonight's dinner you should prefer fish over veggies.
2021-08-21 01:03:32	→	wroathe has joined #haskell
2021-08-21 01:03:37	nitrix	I smell more a symptom of someone that developed the bad habit of memorizing strict rules and applying them systematically, without really understanding what they're doing or why they're doing it in the first place. Props for being suspicious and asking though.
2021-08-21 01:03:39	lechner	yeah, i use that type to parse JSON, and do not understand it. does it imply "!" on the constituents ?
2021-08-21 01:04:08	monochrom	OK, I have two points.
2021-08-21 01:04:08	lechner	nitrix: i am a noobie
2021-08-21 01:04:31	monochrom	1. Learn newtype. Then you can decide whether it fits your purpose.
2021-08-21 01:04:45	monochrom	2. It probably doesn't matter for now and for the next few months either.
2021-08-21 01:05:11	ℹ	irc: disconnected from server
2021-08-21 03:09:27	→	oxide_ has joined #haskell
2021-08-21 03:09:27	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-21 03:09:27	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-21 03:09:27	ℹ	Channel #haskell: 723 nicks (1 op, 0 voices, 722 normals)
2021-08-21 03:09:28	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-21 03:09:51	hpc	in that case go with Proxy
2021-08-21 03:10:09	←	wroathe has quit (Ping timeout: 240 seconds)
2021-08-21 03:11:31	ixlun	Cool, then I guess the type signature would be: sectionId :: Proxy k?
2021-08-21 03:11:37	←	o1lo01ol1o has quit (Remote host closed the connection)
2021-08-21 03:11:49	→	o1lo01ol1o has joined #haskell
2021-08-21 03:12:07	ixlun	sorry: sectionId :: Proxy k -> Word16
2021-08-21 03:12:18	hpc	yep
2021-08-21 03:12:30	c_wraith	that works, though you might do better with sectionId :: proxy k -> Word16
2021-08-21 03:12:42	c_wraith	making that p lowercase does some nice things
2021-08-21 03:13:04	hpc	sectionId Proxy @Foo
2021-08-21 03:13:23	c_wraith	In particular, it lets you pass values of other types that you might already have lying around in
2021-08-21 03:13:48	c_wraith	And parametricity guarantees you can't try to *use* the value
2021-08-21 03:14:28	hpc	not that you can do much with a Proxy value in the first place ;)
2021-08-21 03:14:52	c_wraith	can't do much, but you can at least pattern match on it
2021-08-21 03:15:01	c_wraith	Which can cause things to happen
2021-08-21 03:15:12	[exa]	o wow lowercase proxy
2021-08-21 03:15:16	[exa]	gooooooooood
2021-08-21 03:15:24	[exa]	(thanks!)
2021-08-21 03:15:50	←	takuan has quit (Remote host closed the connection)
2021-08-21 03:16:13	monochrom	This is why I would write "p k -> Word16" instead.
2021-08-21 03:17:49	←	oxide has quit (Ping timeout: 250 seconds)
2021-08-21 03:18:06	←	norias has quit (Ping timeout: 252 seconds)
2021-08-21 03:19:13	hpc	just be careful, this is the gateway drug to f s t a b :D
2021-08-21 03:22:37	→	wroathe has joined #haskell
2021-08-21 03:23:08	ixlun	Hmm okay.  I gave it ago, and I'm getting an error.  Here is the full code: https://termbin.com/r6qo
2021-08-21 03:24:44	hpc	might need scoped type variables?
2021-08-21 03:24:51	monochrom	Yeah, that.
2021-08-21 03:25:04	←	doyougnu has quit (Remote host closed the connection)
2021-08-21 03:26:34	ixlun	Here is the error https://termbin.com/7klc
2021-08-21 03:26:43	monochrom	local "foo :: Bar a" means "foo :: forall a. Bar a" i.e. "foo :: Bar nothing_to_do_with_other_types"
2021-08-21 03:27:44	ixlun	Issue still persists with scoped type variables
2021-08-21 03:28:16	monochrom	You do have to write more than turning on the extension.
2021-08-21 03:28:47	monochrom	you have to now say "parseSection :: forall a m. (ParsableSection a, MonadError String m) => CodePlug -> ..."
2021-08-21 03:29:17	ixlun	Ahh, so when I say 'p = Proxy :: Proxy a'.  the 'a' is a different type variable and doesn 't refer to the ParsableSection 'a'?
2021-08-21 03:30:15	→	oldsk00l_ has joined #haskell
2021-08-21 03:30:22	ixlun	Ahhhh, so that's what forall means?  it means that if 'a' or 'm' is used in the below code, it refers to the 'a' or 'm' in the type signature of the function?
2021-08-21 03:30:45	←	oldsk00l has quit (Ping timeout: 252 seconds)
2021-08-21 03:30:56	monochrom	"forall" is a reserved word that also has meanings under other extensions.
2021-08-21 03:31:28	monochrom	So the inventor of this extension decides to hitchhike this reserved word.
2021-08-21 03:31:45	monochrom	and it works beatifully, there is no conflict.
2021-08-21 03:32:00	←	kenran has quit (Quit: WeeChat info:version)
2021-08-21 03:32:01	ixlun	So it's using forall in the context of scopedtypevariables?
2021-08-21 03:32:06	monochrom	The need to add some syntax is because backward compatibility.
2021-08-21 03:32:11	hpc	one could even say forall has only one meaning, and multiple applications of that meaning
2021-08-21 03:32:21	hpc	since it's really just bringing a new type variable into scope
2021-08-21 03:34:12	ixlun	Nice.  Always wondered why I saw forall peppered on bits of haskell code.
2021-08-21 03:34:38	hpc	if you want to go down a fun mathematical rabbit hole, https://en.wikipedia.org/wiki/Universal_quantification
2021-08-21 03:38:08	ixlun	Thanks for the link.  That's defiantly one to look at!  Anyway code is working great now.  Thanks for the help all!
2021-08-21 03:42:39	←	eggplantade has quit (Remote host closed the connection)
2021-08-21 03:46:39	ℹ	irc: disconnected from server
2021-08-21 18:39:05	→	oxide has joined #haskell
2021-08-21 18:39:05	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-21 18:39:05	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-21 18:39:05	ℹ	Channel #haskell: 710 nicks (1 op, 0 voices, 709 normals)
2021-08-21 18:39:06	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-21 18:40:37	→	jtomas has joined #haskell
2021-08-21 18:42:52	←	shapr has quit (Ping timeout: 268 seconds)
2021-08-21 18:44:56	→	burnside_ has joined #haskell
2021-08-21 18:44:56	←	burnsidesLlama has quit (Read error: Connection reset by peer)
2021-08-21 18:48:07	→	burnsidesLlama has joined #haskell
2021-08-21 18:48:07	←	burnside_ has quit (Read error: Connection reset by peer)
2021-08-21 18:48:17	→	raehik has joined #haskell
2021-08-21 18:48:56	←	merijn has quit (Ping timeout: 248 seconds)
2021-08-21 18:52:03	←	nschoe has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-08-21 19:00:16	→	nate1 has joined #haskell
2021-08-21 19:02:24	→	goepsilongo has joined #haskell
2021-08-21 19:02:51	←	burnsidesLlama has quit (Remote host closed the connection)
2021-08-21 19:05:12	←	nate1 has quit (Ping timeout: 252 seconds)
2021-08-21 19:06:10	←	alphabeta has quit (Quit: Quitting IRC :()
2021-08-21 19:06:23	→	alphabeta has joined #haskell
2021-08-21 19:06:25	←	alphabeta has quit (Client Quit)
2021-08-21 19:06:43	→	kilolympus has joined #haskell
2021-08-21 19:06:48	←	tubogram has quit (Quit: See ya later!)
2021-08-21 19:08:46	→	tubogram has joined #haskell
2021-08-21 19:09:14	Lycurgus	leitz, probably doesn't make sense since there are strongly contrasting notions of what constitutes FP
2021-08-21 19:09:43	leitz	tomsmeding, I'll ask over in offtopic, more a general thoughts thing.
2021-08-21 19:09:54	Lycurgus	from langs like haskell to commonlisp both of which have channels of those names
2021-08-21 19:10:13	Lycurgus	representing the ends of the spectrum
2021-08-21 19:10:53	Lycurgus	lisp is the old FP
2021-08-21 19:11:06	Lycurgus	the old notion
2021-08-21 19:11:14	hsek[m]	Where was the `cabal` proposal for Stackage intregration? Can't seem to find it
2021-08-21 19:12:27	←	raehik has quit (Ping timeout: 250 seconds)
2021-08-21 19:12:28	←	keutoi has quit (Ping timeout: 268 seconds)
2021-08-21 19:12:53	hsek[m]	Ah I found it. https://github.com/haskell/cabal/issues/7556
2021-08-21 19:12:58	leitz	Lycurgus, I'm studying "Grokking Simplicity" and it's giving me a lot of good ideas about how to code better using a functional programming mindset.
2021-08-21 19:13:09	Lycurgus	notions, partisans, and no unity
2021-08-21 19:14:01	Lycurgus	leitz, ah
2021-08-21 19:14:01	→	keutoi has joined #haskell
2021-08-21 19:14:03	→	burnsidesLlama has joined #haskell
2021-08-21 19:14:48	Lycurgus	there is #lisp corresponding the old ##lisp at freenode, a distant match but prolly closest
2021-08-21 19:18:31	←	burnsidesLlama has quit (Ping timeout: 250 seconds)
2021-08-21 19:18:53	→	machinedgod has joined #haskell
2021-08-21 19:20:45	→	waleee has joined #haskell
2021-08-21 19:22:51	→	jess has joined #haskell
2021-08-21 19:25:39	←	tubogram has quit (Quit: See ya later!)
2021-08-21 19:26:04	←	mcglk has quit (Read error: Connection timed out)
2021-08-21 19:26:56	→	mcglk has joined #haskell
2021-08-21 19:27:56	→	tubogram has joined #haskell
2021-08-21 19:28:49	→	o1lo01ol1o has joined #haskell
2021-08-21 19:30:30	←	Lycurgus has quit (Quit: Exeunt)
2021-08-21 19:31:08	←	tubogram has quit (Client Quit)
2021-08-21 19:35:09	→	shapr has joined #haskell
2021-08-21 19:37:22	→	tubogram has joined #haskell
2021-08-21 19:38:46	←	jtomas has quit (Quit: Leaving)
2021-08-21 19:39:05	→	jtomas has joined #haskell
2021-08-21 19:39:51	←	shriekingnoise has quit (Ping timeout: 252 seconds)
2021-08-21 19:44:19	←	pretty_dumm_guy has quit (Quit: WeeChat 3.2)
2021-08-21 19:44:38	←	jtomas has quit (Remote host closed the connection)
2021-08-21 19:44:59	→	burnsidesLlama has joined #haskell
2021-08-21 19:45:50	→	mastarija has joined #haskell
2021-08-21 19:47:33	→	Guest96 has joined #haskell
2021-08-21 19:48:13	←	Guest96 has quit (Quit: Client closed)
2021-08-21 19:49:18	←	burnsidesLlama has quit (Ping timeout: 250 seconds)
2021-08-21 19:49:45	→	jtomas has joined #haskell
2021-08-21 19:50:18	←	keutoi has quit (Ping timeout: 252 seconds)
2021-08-21 19:50:44	→	burnsidesLlama has joined #haskell
2021-08-21 19:57:27	←	jtomas has quit (Remote host closed the connection)
2021-08-21 19:57:30	←	MoC has quit (Quit: Konversation terminated!)
2021-08-21 19:59:30	→	wallymathieu has joined #haskell
2021-08-21 20:00:20	←	o1lo01ol1o has quit (Remote host closed the connection)
2021-08-21 20:01:17	→	jtomas has joined #haskell
2021-08-21 20:01:59	→	keutoi has joined #haskell
2021-08-21 20:03:45	→	burnside_ has joined #haskell
2021-08-21 20:03:46	←	burnsidesLlama has quit (Read error: Connection reset by peer)
2021-08-21 20:06:01	←	bitdex has quit (Ping timeout: 244 seconds)
2021-08-21 20:06:15	←	notzmv has quit (Ping timeout: 252 seconds)
2021-08-21 20:13:09	_bin	Does anyone know what the `(..)` syntax in an import means?  Specifically, `import Colog.Core (LogAction (..), (<&), logStringStdout)`.
2021-08-21 20:13:36	Clint	_bin: yes
2021-08-21 20:14:12	Clint	it means to import everything "within" LogAction
2021-08-21 20:14:21	Clint	i'm sure there's a better word for that
2021-08-21 20:14:55	tomsmeding	if LogAction is a class, that imports LogAction as well as the methods of the class; if it's a datatype, it imporst the datatype as well as the constructors of that datatype
2021-08-21 20:15:07	tomsmeding	importing just 'LogAction' would only import that one name
2021-08-21 20:15:27	_bin	Clint, tomsmeding: Thanks, that helps.
2021-08-21 20:17:10	→	neo has joined #haskell
2021-08-21 20:17:14	→	bitdex has joined #haskell
2021-08-21 20:17:16	←	fresheyeball has quit (Quit: WeeChat 2.9)
2021-08-21 20:18:47	→	drd has joined #haskell
2021-08-21 20:18:56	←	jtomas has quit (Remote host closed the connection)
2021-08-21 20:19:13	→	wroathe has joined #haskell
2021-08-21 20:20:45	←	Lord_of_Life has quit (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
2021-08-21 20:22:57	→	burnsidesLlama has joined #haskell
2021-08-21 20:22:57	←	burnside_ has quit (Read error: Connection reset by peer)
2021-08-21 20:23:00	→	nuncanada has joined #haskell
2021-08-21 20:23:36	←	nuncanada has quit (Remote host closed the connection)
2021-08-21 20:23:42	←	tomsmeding has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-08-21 20:24:08	←	Skyfire has quit (Remote host closed the connection)
2021-08-21 20:24:16	→	jtomas has joined #haskell
2021-08-21 20:24:26	→	Skyfire has joined #haskell
2021-08-21 20:26:37	→	burnside_ has joined #haskell
2021-08-21 20:26:41	←	burnside_ has quit (Remote host closed the connection)
2021-08-21 20:27:53	→	Gurkenglas has joined #haskell
2021-08-21 20:29:21	←	burnsidesLlama has quit (Ping timeout: 252 seconds)
2021-08-21 20:32:36	→	tomsmeding has joined #haskell
2021-08-21 20:35:03	←	jtomas has quit (Remote host closed the connection)
2021-08-21 20:38:49	→	o1lo01ol1o has joined #haskell
2021-08-21 20:40:36	→	Lord_of_Life has joined #haskell
2021-08-21 20:42:27	→	jtomas has joined #haskell
2021-08-21 20:43:01	←	o1lo01ol1o has quit (Ping timeout: 250 seconds)
2021-08-21 20:45:13	→	merijn has joined #haskell
2021-08-21 20:45:18	←	mastarija has quit (Ping timeout: 252 seconds)
2021-08-21 20:47:19	←	jtomas has quit (Remote host closed the connection)
2021-08-21 20:53:48	←	Guest9404 has quit (Remote host closed the connection)
2021-08-21 20:54:34	→	chris has joined #haskell
2021-08-21 20:54:37	ℹ	chris is now known as Guest1299
2021-08-21 20:56:34	→	jtomas has joined #haskell
2021-08-21 20:59:03	←	Guest1299 has quit (Ping timeout: 252 seconds)
2021-08-21 21:00:09	←	Lord_of_Life has quit (Ping timeout: 252 seconds)
2021-08-21 21:01:08	←	dajoer has quit (Quit: leaving)
2021-08-21 21:02:31	←	reumeth has quit (Ping timeout: 250 seconds)
2021-08-21 21:03:31	←	ystael has quit (Quit: Lost terminal)
2021-08-21 21:05:45	→	ystael has joined #haskell
2021-08-21 21:06:00	←	drd has quit (Ping timeout: 248 seconds)
2021-08-21 21:07:29	←	stiell has quit (Ping timeout: 244 seconds)
2021-08-21 21:08:39	→	Jack has joined #haskell
2021-08-21 21:11:29	→	bitmapper has joined #haskell
2021-08-21 21:16:57	→	burnsidesLlama has joined #haskell
2021-08-21 21:18:21	→	lavaman has joined #haskell
2021-08-21 21:19:25	←	merijn has quit (Ping timeout: 250 seconds)
2021-08-21 21:21:28	←	burnsidesLlama has quit (Ping timeout: 248 seconds)
2021-08-21 21:22:53	←	lavaman has quit (Ping timeout: 250 seconds)
2021-08-21 21:24:52	→	burnsidesLlama has joined #haskell
2021-08-21 21:26:54	←	machinedgod has quit (Ping timeout: 268 seconds)
2021-08-21 21:28:03	→	Guest|60 has joined #haskell
2021-08-21 21:28:06	←	burnsidesLlama has quit (Remote host closed the connection)
2021-08-21 21:28:18	←	Guest|60 has quit (Client Quit)
2021-08-21 21:28:39	→	econo has joined #haskell
2021-08-21 21:35:20	←	jtomas has quit (Remote host closed the connection)
2021-08-21 21:35:22	→	tzh has joined #haskell
2021-08-21 21:36:22	→	jtomas has joined #haskell
2021-08-21 21:38:20	→	lavaman has joined #haskell
2021-08-21 21:39:58	→	eggplantade has joined #haskell
2021-08-21 21:40:00	→	mastarija has joined #haskell
2021-08-21 21:41:11	←	jtomas has quit (Remote host closed the connection)
2021-08-21 21:41:31	←	lavaman has quit (Remote host closed the connection)
2021-08-21 21:41:33	→	hololeap has joined #haskell
2021-08-21 21:44:09	→	jtomas has joined #haskell
2021-08-21 21:44:52	→	nate1 has joined #haskell
2021-08-21 21:49:20	←	jtomas has quit (Remote host closed the connection)
2021-08-21 21:50:11	←	azeem has quit (Ping timeout: 250 seconds)
2021-08-21 21:50:59	→	azeem has joined #haskell
2021-08-21 21:52:57	←	keutoi has quit (Ping timeout: 252 seconds)
2021-08-21 21:53:30	←	aman has quit (Ping timeout: 252 seconds)
2021-08-21 21:54:39	←	benin036932 has quit (Ping timeout: 268 seconds)
2021-08-21 21:55:00	→	keutoi has joined #haskell
2021-08-21 21:55:19	→	aman has joined #haskell
2021-08-21 22:07:55	→	Lord_of_Life has joined #haskell
2021-08-21 22:08:18	←	azeem has quit (Read error: Connection reset by peer)
2021-08-21 22:08:44	→	azeem has joined #haskell
2021-08-21 22:12:31	→	lavaman has joined #haskell
2021-08-21 22:17:09	←	lavaman has quit (Ping timeout: 252 seconds)
2021-08-21 22:20:47	→	burnsidesLlama has joined #haskell
2021-08-21 22:22:18	→	vpan has joined #haskell
2021-08-21 22:25:28	←	burnsidesLlama has quit (Ping timeout: 268 seconds)
2021-08-21 22:26:56	→	__monty__ has joined #haskell
2021-08-21 22:29:23	→	goepsilongo_ has joined #haskell
2021-08-21 22:30:39	←	goepsilongo has quit (Ping timeout: 240 seconds)
2021-08-21 22:35:18	←	mastarija has quit (Ping timeout: 252 seconds)
2021-08-21 22:36:30	→	mdunnio has joined #haskell
2021-08-21 22:39:55	Athas	What is the simplest Haskell library for writing a very simple TUI, with a few input fields and such?
2021-08-21 22:40:06	Athas	I know of Brick, which can be used for anything, but is there something simpler?
2021-08-21 22:40:34	→	mestre has joined #haskell
2021-08-21 22:40:43	→	stiell has joined #haskell
2021-08-21 22:41:13	←	HarveyPwca has quit (Quit: Leaving)
2021-08-21 22:41:15	sm	Athas: there's wizards
2021-08-21 22:41:16	→	hnOsmium0001 has joined #haskell
2021-08-21 22:42:01	→	Guest2172 has joined #haskell
2021-08-21 22:42:34	Guest2172	Could somebody help me regarding my haskell homework?
2021-08-21 22:43:12	sm	if you want positioned input fields, it's brick or make your own with vty or ansi-terminal I think
2021-08-21 22:44:00	sm	@where paste, Guest2172
2021-08-21 22:44:00	lambdabot	I know nothing about paste,.
2021-08-21 22:44:16	sm	@where paste
2021-08-21 22:44:16	lambdabot	Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
2021-08-21 22:44:26	Guest2172	Ah. Gimme a sec
2021-08-21 22:44:54	→	son0p has joined #haskell
2021-08-21 22:45:08	Athas	sm: that looks interesting!
2021-08-21 22:45:18	Athas	I have no opinion on positioning.
2021-08-21 22:45:33	Guest2172	https://paste.tomsmeding.com/ctfNt47T this good?
2021-08-21 22:45:41	sm	i use wizards for hledger add, it's great
2021-08-21 22:46:13	sm	that's good Guest2172, what are you stuck on ?
2021-08-21 22:46:54	Guest2172	Basically where to start. My mind can't think Haskell at all
2021-08-21 22:47:16	sm	is there a simpler problem you could tackle first ?
2021-08-21 22:47:39	Guest2172	There are a few, yea. Was just thinking that one would end up being easy 
2021-08-21 22:48:00	Guest2172	There's a multi-part one that I started, give me a second
2021-08-21 22:48:24	sm	or maybe the first couple at project euler or exercism.io would get you warmed up
2021-08-21 22:49:04	Guest2172	I am warmed up a bit, have been trying to work through these the entire day
2021-08-21 22:49:11	←	mestre has quit (Quit: leaving)
2021-08-21 22:49:27	→	mestre has joined #haskell
2021-08-21 22:49:28	Guest2172	https://paste.tomsmeding.com/e8D0Jsqv
2021-08-21 22:50:42	Guest2172	I don't really get how I'm supposed to get StockL out of the definition at the top
2021-08-21 22:52:06	→	jtomas has joined #haskell
2021-08-21 22:52:26	__monty__	Do you understand why your solution for countF works?
2021-08-21 22:53:43	Guest2172	Partially. 
2021-08-21 22:54:22	sm	good answer :)
2021-08-21 22:54:44	maerwald	can someone explain to me how Data.Char.isLower is implemented? It ends up like an boscure ffi call it seems to https://gitlab.haskell.org/ghc/ghc/-/blob/master/libraries/base/cbits/WCsubst.c which I don't understand
2021-08-21 22:54:48	Guest2172	I am assuming that the Item datatype is acting like a lookup table when Single_Apple is mentioned
2021-08-21 22:55:03	sm	it looks like you know how to get the list of items, now you need a way to look up one item in that list
2021-08-21 22:56:21	sm	hint: there's a function in Prelude called lookup
2021-08-21 22:56:39	←	jtomas has quit (Remote host closed the connection)
2021-08-21 22:58:17	monochrom	or you could write your own recursion. it's a good exercise anyway, even if you throw it away afterwards
2021-08-21 22:58:42	monochrom	unless you have no idea how to work with a list
2021-08-21 22:58:54	monochrom	in which case more needs for more fingering exercises
2021-08-21 22:59:32	Guest2172	I do know how to work a list, dw
2021-08-21 22:59:41	←	jakalx has left #haskell (Error from remote client)
2021-08-21 22:59:55	monochrom	It takes zero understanding to say "StockL is some kind of database".  Every random person on the street knows that much.
2021-08-21 23:00:38	Guest2172	Yea, I'm just dumb when it comes to Haskell
2021-08-21 23:01:01	Guest2172	Give me Python, c or c++ and I'll do just fine. Give me Haskell and I literally can't think
2021-08-21 23:01:22	sm	it takes time to rewire the brain for it
2021-08-21 23:01:34	sm	soon it'll be easy
2021-08-21 23:02:17	Clint	maerwald: looks like it's just checking an autogenerated lookup table for a flag
2021-08-21 23:02:34	maerwald	yeah, I'm screwed
2021-08-21 23:02:36	sm	Have you read a lot of (simple) haskell code ? this can help a lot I think
2021-08-21 23:04:02	__monty__	Guest2172: Could you say in a sentence or two how countF works? I think it'll help with a misunderstanding in your commented out countL.
2021-08-21 23:04:33	→	pbrisbin has joined #haskell
2021-08-21 23:04:59	→	pavonia has joined #haskell
2021-08-21 23:07:46	→	shriekingnoise has joined #haskell
2021-08-21 23:08:01	→	mastarija has joined #haskell
2021-08-21 23:08:49	Guest2172	countF takes in a variable of type StockF, and parses that to getStockF, which acts as a lookup for those items.
2021-08-21 23:11:13	Guest2172	Is that correct?
2021-08-21 23:11:46	Guest2172	__monty__
2021-08-21 23:12:51	pavonia	maerwald: What are you trying to do?
2021-08-21 23:13:17	maerwald	pavonia: toUpper for Word16, similar to the word8 package
2021-08-21 23:13:32	←	neo has quit (Quit: Leaving)
2021-08-21 23:13:52	→	neo has joined #haskell
2021-08-21 23:16:08	→	merijn has joined #haskell
2021-08-21 23:19:59	←	wallymathieu has quit (Quit: Textual IRC Client: www.textualapp.com)
2021-08-21 23:20:33	tomsmeding	maerwald: https://hackage.haskell.org/package/base-4.15.0.0/docs/src/GHC-Unicode.html says that the implementation uses libunicode if that's available
2021-08-21 23:20:45	←	geekosaur has quit (Ping timeout: 250 seconds)
2021-08-21 23:21:28	dsal	Guest2172: I don't think I'd phrase it that way.
2021-08-21 23:21:35	→	geekosaur has joined #haskell
2021-08-21 23:21:43	Guest2172	I just can't think haskell
2021-08-21 23:22:11	__monty__	Guest2172: Not quite. You're saying `getStockF` is the function that takes an item and returns a count?
2021-08-21 23:22:24	__monty__	What is `x`?
2021-08-21 23:23:01	→	Erutuon has joined #haskell
2021-08-21 23:23:18	Guest2172	`x` is StockF f
2021-08-21 23:24:05	__monty__	Yes, and StockF f is a record, with one field called `getStockF`.
2021-08-21 23:24:33	__monty__	This field is also a function that extracts the value of the field from such a record.
2021-08-21 23:25:05	tomsmeding	maerwald: oh but a comment later on claims that the WCsubst.c functions are used unconditionally?
2021-08-21 23:25:51	__monty__	So `getStockF x` is just the value of the similarly named field.
2021-08-21 23:26:26	maerwald	yeah, I think there's no way I can have toLower on Word16 reasonably without converting to Char
2021-08-21 23:26:43	maerwald	for Word8 it's straight forward
2021-08-21 23:26:50	Guest2172	So if I were to write them down exactly the same, getStockL x would give me the list, right?
2021-08-21 23:26:58	__monty__	Guest2172: It's clearer if you make it less pointfree. `countF x i = (getStockF x) i`, you see? So what's wrong with your proposed countL?
2021-08-21 23:27:01	__monty__	Yes, exactly.
2021-08-21 23:27:15	__monty__	So passing a list to `getStockL` wouldn't work.
2021-08-21 23:27:39	__monty__	Now that you know how to get the list you should be able to implement countL.
2021-08-21 23:28:24	→	severen has joined #haskell
2021-08-21 23:28:45	pavonia	maerwald: You could also filter the Unicode database files yourself and create a static mapping. The format is quite simple
2021-08-21 23:29:25	←	geekosaur has quit (Ping timeout: 250 seconds)
2021-08-21 23:30:40	→	geekosaur has joined #haskell
2021-08-21 23:30:57	Guest2172	I am confused how I should apply both getStockL and lookup though. getStockL x gives me the list, and somehow I'm supposed to use lookup to get the second element in that list
2021-08-21 23:31:12	←	bitmapper has quit (Quit: Connection closed for inactivity)
2021-08-21 23:31:27	→	jtomas has joined #haskell
2021-08-21 23:31:55	→	jakalx has joined #haskell
2021-08-21 23:32:51	maerwald	my property tests say that `toUpper = charToWord16 . C.toUpper . word16ToChar` is safe, because Data.Char.toUpper never goes beyond Word16 maxBound :p
2021-08-21 23:32:55	maerwald	that's luck
2021-08-21 23:34:15	tomsmeding	maerwald: what it ends up doing is a binary search in the allchars[] list starting on line 303; the entries are {starting codepoint, number of points in block, rule of this block}. The rules are defined directly above the allchars table, where the first item in the {} is the category, which is a bitwise OR of some of the GENCAT_?? defines, which are all distinct, single bits
2021-08-21 23:34:36	maerwald	yeah, pretty sure I don't wanna understand it :p
2021-08-21 23:34:44	tomsmeding	and it tests if the category has the GENCAT_LL bit set :)
2021-08-21 23:35:03	←	nate1 has quit (Ping timeout: 250 seconds)
2021-08-21 23:36:04	tomsmeding	it divides up the codepoints 0 to 65535 in 2719 blocks of the same category
2021-08-21 23:36:39	tomsmeding	this would be very easy to convert to whatever format you want it in, but at that point you can also generate it from the official UnicodeData.txt file :p
2021-08-21 23:36:44	__monty__	Guest2172: You can just apply a function to the value `f (getStockL x)`.
2021-08-21 23:36:56	←	pbrisbin has quit (Ping timeout: 248 seconds)
2021-08-21 23:37:18	__monty__	Guest2172: I'd try implementing the recursion though, it's good practice.
2021-08-21 23:37:47	tomsmeding	maerwald: pretty sure that toUpper-closedness is not luck; 0000-FFFF is the so-called Basic Multilingual Plane and is a closed set of stuff
2021-08-21 23:37:56	maerwald	oh
2021-08-21 23:38:16	tomsmeding	maerwald: https://en.wikipedia.org/wiki/Unicode#Code_planes_and_blocks (I'm not recalling this from memory or something :p)
2021-08-21 23:39:04	maerwald	yeah, it def performs worse than the hand-written 'toLower' of Word8
2021-08-21 23:39:25	tomsmeding	heh you can compress that table in WCsubst.c quite a bit if you allow for a slightly more complicated lookup function
2021-08-21 23:39:36	maerwald	41.10 μs vs 7.613 μs
2021-08-21 23:40:10	tomsmeding	lots of alternating rule22 and rule23, which is just the same but then uppercase/lowercase
2021-08-21 23:40:27	←	mestre has quit (Quit: leaving)
2021-08-21 23:40:36	maerwald	well, good enough
2021-08-21 23:40:40	←	keutoi has quit (Quit: leaving)
2021-08-21 23:40:42	→	mestre has joined #haskell
2021-08-21 23:40:55	tomsmeding	and that binary search is also inefficient in general, because of the use of the bsearch C library function, which is fine but not inlined (because C) so the comparison function is an indirect function call
2021-08-21 23:42:00	tomsmeding	in other words, if you want a really efficient implementation of isLower for Word16, you can do a bit better than ghc's current impl :)
2021-08-21 23:42:23	←	zaquest has quit (Quit: Leaving)
2021-08-21 23:43:10	←	geekosaur has quit (Ping timeout: 268 seconds)
2021-08-21 23:43:47	→	geekosaur has joined #haskell
2021-08-21 23:44:33	tomsmeding	wait, that isLower calls u_iswlower which is an _unsafe_ FFI call
2021-08-21 23:44:35	←	azeem has quit (Ping timeout: 250 seconds)
2021-08-21 23:45:49	→	markpythonicbtc has joined #haskell
2021-08-21 23:46:47	→	azeem has joined #haskell
2021-08-21 23:47:15	maerwald	hmm... if you want to deal with UTF-16LE ShortByteString on a BE platform, then `pack :: [Word16] -> ShortByteString` will give you a surprise
2021-08-21 23:47:44	tomsmeding	endianness yay
2021-08-21 23:48:00	maerwald	Word16 appears to be BE interpreted by the primitives like writeWord16Array#
2021-08-21 23:48:10	maerwald	and so it performs alignment based on platform
2021-08-21 23:48:49	←	markpythonicbtc has quit (Client Quit)
2021-08-21 23:48:50	→	zaquest has joined #haskell
2021-08-21 23:49:06	tomsmeding	probably the most efficient implementation
2021-08-21 23:50:13	←	geekosaur has quit (Ping timeout: 250 seconds)
2021-08-21 23:50:13	←	merijn has quit (Ping timeout: 250 seconds)
2021-08-21 23:51:08	→	geekosaur has joined #haskell
2021-08-21 23:55:14	kuribas	I am trying vscode again after a few months "the haskell server crashed 5 times in the last 3 minutes".
2021-08-21 23:55:25	kuribas	Is this really what I should recommend to my team?
2021-08-21 23:55:39	←	aman has quit (Ping timeout: 240 seconds)
2021-08-21 23:56:06	janus	kuribas: who said you should recommend it to anyone?
2021-08-21 23:56:12	→	markpythonicbtc has joined #haskell
2021-08-21 23:56:23	kuribas	janus: many people recommend the LSP.
2021-08-21 23:56:35	monochrom	I think you can try for yourself again.
2021-08-21 23:57:03	kuribas	It's nice when it works.  But it never works (for me).
2021-08-21 23:57:43	→	aman has joined #haskell
2021-08-21 23:57:50	janus	doesn't work for me either when you have hundreds of modules. i thought it was just because of that
2021-08-21 23:58:12	janus	what kinda problem are you having? memory usage? if so, it's probably just because it was developed and tested on small projects
2021-08-21 23:58:25	←	azeem has quit (Read error: Connection reset by peer)
2021-08-21 23:58:29	←	meinside_ has quit (Quit: Connection closed for inactivity)
2021-08-21 23:59:06	janus	high latency, high memory usage, leaking memory, those are the problems i had with v1.1
2021-08-21 23:59:42	→	azeem has joined #haskell
2021-08-21 23:59:52	kuribas	janus: idk
2021-08-22 00:00:20	kuribas	I just cannot say to the team, haskell is great, but you have to debug the tooling...
2021-08-22 00:00:35	janus	how can you not know what kinda problem you're having? how do you even know you're having a problem if you don't know how to describe it?
2021-08-22 00:00:57	kuribas	janus: the problem I have is "the haskell server crashed 5 times in the last 3 minutes"
2021-08-22 00:00:58	←	t0zy has quit (Remote host closed the connection)
2021-08-22 00:00:59	monochrom	I think "crashed" was already said.
2021-08-22 00:01:11	janus	right, it probably crashed because of the OOM killer
2021-08-22 00:01:14	→	t0zy has joined #haskell
2021-08-22 00:01:56	janus	but it's just my guess of course, based on the problems i had
2021-08-22 00:02:01	kuribas	Perhaps, I have a module which is using TH to compile a large amount of code.
2021-08-22 00:02:09	kuribas	but it works fine in emacs.
2021-08-22 00:02:11	kuribas	(without LSP)
2021-08-22 00:03:15	kuribas	anything else that might work?  maybe intellij?
2021-08-22 00:04:14	monochrom	My students seem to be fine with vscode, but it's probably because of 2 factors.  1. My course doesn't have TH, or lots of code.  2. I think most of them are still not using HLS or LSP.
2021-08-22 00:04:43	monochrom	Does intellij even know of Haskell?
2021-08-22 00:04:58	kuribas	monochrom: well, isn't it then nothing more than a glorified text editor with syntax highlighing?
2021-08-22 00:05:04	janus	you can get far just with Telescope (a Ctrl-P like for Neovim). it allows you to quickly jump to another module. and you can use ripgrep from neovim also, allowing you to quickly search for the word under the cursor
2021-08-22 00:05:10	kuribas	monochrom: or do they use another plugin?
2021-08-22 00:05:24	janus	you can also use CoCSearch to do a global replace with context, that is pretty cool
2021-08-22 00:05:29	monochrom	I think my students don't insist on anything more.
2021-08-22 00:05:29	kuribas	monochrom: yes, there are intellij plugins for haskell.
2021-08-22 00:06:00	janus	kuribas: check out this screenshot : https://github.com/neoclide/coc.nvim/issues/1080
2021-08-22 00:06:21	janus	you see the context of the searched term across all files, and then you can replace it accordingly
2021-08-22 00:06:49	janus	if you do a global replace in the CoC buffer/window (dunno terminology) , it automatically applies it in each file
2021-08-22 00:07:04	janus	kinda like a perl pie++ http://technosophos.com/2009/05/21/perl-pie-if-you-only-learn-how-do-one-thing-perl-it.html
2021-08-22 00:07:16	kuribas	janus: what I want at least is to visualise type errors.
2021-08-22 00:07:46	janus	ah, ok, i don't have that, never seemed like a big problem to jump to the line number from the error message
2021-08-22 00:08:26	←	Guest2172 has quit (Quit: Client closed)
2021-08-22 00:08:35	janus	the line number is in the error message, then it is two chars to open Telescope, couple of chars to type parts of the file name (fuzzy search), couple of chars to jump to the line
2021-08-22 00:09:18	monochrom	Why is that not called Microscope? :)
2021-08-22 00:09:22	←	wroathe has quit (Quit: Lost terminal)
2021-08-22 00:10:03	janus	what i do is i have a terminal running in neovim on the right, which contains the compilation loop or ghcid. so you won't need to switch windows
2021-08-22 00:10:21	tomsmeding	kuribas: that "using TH to compile a large amount of code" sounds heavily suspect; HLS had lots of trouble with TH in the past, and it's for sure not completely resolved yet
2021-08-22 00:11:15	tomsmeding	but in a project I work on, which has ~130 modules, it works fine and it doesn't crash on me -- though I don't actually work on the modules that define or use TH, it's just elsewhere in the project
2021-08-22 00:11:53	tomsmeding	also: having C code in the project makes things finicky; it can work fine, but you have to first compile the project fully first, and only then start up HLS
2021-08-22 00:12:06	←	mastarija has quit (Ping timeout: 252 seconds)
2021-08-22 00:13:03	kuribas	tomsmeding: what do you use?
2021-08-22 00:13:24	tomsmeding	HLS in neovim, since a few days with the new neovim 0.5 built-in LSP support, but before that using ALE
2021-08-22 00:13:35	kuribas	ALE?
2021-08-22 00:13:56	tomsmeding	vim plugin that, among other things, has a bare-bones (but solid) LSP implementation
2021-08-22 00:14:49	→	gentauro_ has joined #haskell
2021-08-22 00:16:23	maerwald	tomsmeding: TH, big modules, hsc files, ...
2021-08-22 00:17:34	Drew[m]	ghcup-hs's source currently crashes my HLS server when I try to open up the contents of the /app folder. There is TH and CPP in those modules and I've chalked it up to those
2021-08-22 00:18:53	Drew[m]	maerwald: does that happen for you too?
2021-08-22 00:19:08	maerwald	yeah
2021-08-22 00:19:15	hololeap	isn't there another library that does the same thing as this? https://github.com/hdgarrood/qq-literals
2021-08-22 00:19:17	maerwald	especially the Main module
2021-08-22 00:19:22	maerwald	it's big and has quasiquotes
2021-08-22 00:20:01	hololeap	I want to parse literals and throw compile errors if they are incorrect
2021-08-22 00:20:53	hololeap	someone recommended a library for this once, but I can't remember the name of it
2021-08-22 00:21:50	monochrom	Would it be https://hackage.haskell.org/package/string-qq ? https://hackage.haskell.org/package/string-quote ?
2021-08-22 00:22:07	→	mastarija has joined #haskell
2021-08-22 00:22:42	monochrom	I don't know the difference, or why the author made both.
2021-08-22 00:23:41	janus	from looking at the docs, it seems the difference is "that the leading newline is trimmed and carriage returns stripped."
2021-08-22 00:23:44	hololeap	no, it wasn't either of those. it had a much more fleshed-out interface and it gave an example in the readme for checking for odd numbers
2021-08-22 00:23:50	hololeap	(or something like that)
2021-08-22 00:25:27	←	jamestmartin has quit (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
2021-08-22 00:26:06	janus	would it be possible to find it via hoogle? i am not too familiar, but it sounds like it should be "(String -> a) -> QQ a" or something?
2021-08-22 00:28:00	→	jamestmartin has joined #haskell
2021-08-22 00:29:50	hololeap	I remember it had a typeclass that handled conversion to QQ
2021-08-22 00:30:54	←	kuribas has quit (Quit: ERC (IRC client for Emacs 26.3))
2021-08-22 00:31:46	tomsmeding	maerwald: Drew[m]: working HLS for me in app/ghcup/Main.hs https://tomsmeding.com/ss/get/tomsmeding/JOKELd
2021-08-22 00:31:57	tomsmeding	ghc 8.10.6 with my self-compiled HLS
2021-08-22 00:32:33	Drew[m]	hmm
2021-08-22 00:32:42	Drew[m]	I'll give that a go at some point
2021-08-22 00:33:52	tomsmeding	hololeap: https://hackage.haskell.org/package/validated-literals
2021-08-22 00:33:54	hololeap	sweet, I found it by searching through my IRC logs: https://hackage.haskell.org/package/validated-literals
2021-08-22 00:33:59	hololeap	lol
2021-08-22 00:34:01	⚡	tomsmeding high-fives hololeap
2021-08-22 00:34:04	tomsmeding	that timing was perfect
2021-08-22 00:34:14	hololeap	yes it was :)
2021-08-22 00:34:56	←	Lord_of_Life has quit (Remote host closed the connection)
2021-08-22 00:35:08	→	Guest2130 has joined #haskell
2021-08-22 00:35:21	Guest2130	Got a question in terms of record fields
2021-08-22 00:35:23	tomsmeding	(I just searched for 'literal' on hackage and went through the not-even-all-that-long list of 85 packages)
2021-08-22 00:35:36	tomsmeding	also written by a #haskell regular :)
2021-08-22 00:36:06	maerwald	tomsmeding: see those sweet quasi quotes in the code? :d
2021-08-22 00:36:25	maerwald	nice is when your quasi quotes starts with # on the second line
2021-08-22 00:36:48	maerwald	most tools will think it's CPP and then mess up
2021-08-22 00:36:58	tomsmeding	not my vim :p
2021-08-22 00:37:09	maerwald	well, I think even hlint fails here
2021-08-22 00:37:15	→	Lord_of_Life has joined #haskell
2021-08-22 00:37:17	Guest2130	https://paste.tomsmeding.com/oKfOX56s
2021-08-22 00:37:42	Guest2130	Can anyone look at this and tell me how I might be able to do this better? 
2021-08-22 00:38:08	Guest2130	It can't match expected type CSStudent, with DBTreeO CSStudent
2021-08-22 00:38:26	Guest2130	I know I'm on the verge of the solution, just not sure what the last part is
2021-08-22 00:38:44	tomsmeding	Guest2130: what line is that error on?
2021-08-22 00:38:56	tomsmeding	ah I see it
2021-08-22 00:39:27	Guest2130	Yea, it's the last line
2021-08-22 00:39:31	tomsmeding	I'd expect the error to be pretty clear in this case (allowing for the general situation where it takes some time before you get used to ghc's errors)
2021-08-22 00:39:42	tomsmeding	last line?
2021-08-22 00:39:50	tomsmeding	oh right yes
2021-08-22 00:39:52	Guest2130	Did I send the wrong snippet?
2021-08-22 00:40:08	tomsmeding	no you didn't
2021-08-22 00:40:24	monochrom	I am unsympathetic. This doesn't look like you are even aware that you have to code up an elaborate search algorithm.
2021-08-22 00:40:49	Guest2130	I don't have to make anything elaborate, is the thing
2021-08-22 00:40:56	__monty__	Guest2130: Look at the types of `students` and `sid`.
2021-08-22 00:42:11	←	vpan has quit (Quit: Leaving.)
2021-08-22 00:42:12	monochrom	The DBTreeO type is a pretty elaborate tree.  I would think that looking for a node that has the thing you want is not going to be just a 1-liner, much less a 5-worder.
2021-08-22 00:44:12	Drew[m]	<Drew[m]> "I'll give that a go at some poin" <- Just got to compile a small handful of dependencies first...
2021-08-22 00:44:12	Drew[m]	https://paste.tomsmeding.com/zzR5f9id
2021-08-22 00:44:47	tomsmeding	Drew[m]: get a better PC, you surely didn't think you could be productive in haskell without a 20-core machine
2021-08-22 00:45:47	tomsmeding	Drew[m]: do you already have a HLS for 8.10.6? note that that particular ghc version doesn't have a released HLS yet as far as I know
2021-08-22 00:46:41	Drew[m]	I don't have HLS for 8.10.6 but I'm willing to compile it from source if it'll fix this one thing
2021-08-22 00:47:01	→	lavaman has joined #haskell
2021-08-22 00:47:31	→	burnsidesLlama has joined #haskell
2021-08-22 00:47:41	Drew[m]	But that's just me recompiling ghcup
2021-08-22 00:48:02	tomsmeding	well HLS also has a bunch of dependencies, that's why I asked :p
2021-08-22 00:48:21	maerwald	Drew[m]: why are you compiling ghcup from source anyway?
2021-08-22 00:50:21	→	jacks2 has joined #haskell
2021-08-22 00:50:26	←	jacks2 has left #haskell
2021-08-22 00:51:09	←	lavaman has quit (Ping timeout: 240 seconds)
2021-08-22 00:53:08	tomsmeding	oh hey, I tried again using ghc 9.0.1 and a downloaded HLS binary, and suddenly I see my friend again that I hadn't seen for almost a year at this point
2021-08-22 00:53:16	tomsmeding	that friend being "allocatestack.c:384: advise_stack_range: Assertion `freesize < size' failed."
2021-08-22 00:53:46	tomsmeding	previously the fix for that seemed to be a build on my own machine
2021-08-22 00:53:53	⚡	tomsmeding compiles HLS
2021-08-22 00:54:10	Drew[m]	<maerwald> "Drew: why are you compiling..." <- I'm poking and prodding that large Main.hs file you mentioned
2021-08-22 00:54:21	ℹ	irc: disconnected from server
2021-08-22 20:36:48	→	oxide has joined #haskell
2021-08-22 20:36:48	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-22 20:36:48	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-22 20:36:48	ℹ	Channel #haskell: 714 nicks (1 op, 0 voices, 713 normals)
2021-08-22 20:36:49	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-22 20:39:00	→	lavaman has joined #haskell
2021-08-22 20:40:23	←	burnsidesLlama has quit (Ping timeout: 250 seconds)
2021-08-22 20:43:33	←	lavaman has quit (Ping timeout: 252 seconds)
2021-08-22 20:44:51	→	wroathe has joined #haskell
2021-08-22 20:44:52	←	wroathe has quit (Changing host)
2021-08-22 20:44:52	→	wroathe has joined #haskell
2021-08-22 20:44:56	→	adamflott has joined #haskell
2021-08-22 20:47:58	←	mastarija has quit (Quit: Leaving)
2021-08-22 20:48:48	→	turlando has joined #haskell
2021-08-22 20:48:48	←	turlando has quit (Changing host)
2021-08-22 20:48:48	→	turlando has joined #haskell
2021-08-22 20:55:38	←	xff0x has quit (Quit: xff0x)
2021-08-22 20:56:10	ℹ	tremon is now known as tremon_
2021-08-22 20:57:41	dsal	kuribas: that would've been nice, though less applicable.  I've written that bug more than once, though.
2021-08-22 20:58:34	kuribas	dsal: isn't it differently applicable though?
2021-08-22 20:59:30	kuribas	these instances don't overlap.
2021-08-22 21:01:35	→	zebrag has joined #haskell
2021-08-22 21:02:05	kuribas	for Monoids I think about "combining", not "throwing away", though of course they both follow the Monoid laws.
2021-08-22 21:05:09	dsal	If both existed, they'd overlap, wouldn't they?
2021-08-22 21:05:33	kuribas	with different behaviour
2021-08-22 21:06:05	dsal	But yeah, I had the same intuition.  I've also got code with maps nested like, five deep with piles of `unionWith (<>)`
2021-08-22 21:08:16	nshepperd	(Ord k, Semigroup v) => Monoid (Map k v) even
2021-08-22 21:08:33	kuribas	ah indeed
2021-08-22 21:09:42	nshepperd	it would nicely subsume the existing instance if you (fmap First) 
2021-08-22 21:10:06	nshepperd	or maybe Last. see, i can't even remember which way it's biased
2021-08-22 21:10:18	dsal	Yeah.  There's a bit of ship-has-sailed, though.  `union` exists today and is correct behavior for some apps.  I suppose it wouldn't break anything silently, though.
2021-08-22 21:10:30	←	keutoi has quit (Ping timeout: 252 seconds)
2021-08-22 21:10:43	kuribas	maybe being explicit is better in this case.
2021-08-22 21:10:47	dsal	Right, that's half the problem.  I've written *that* bug several times, too.
2021-08-22 21:11:03	←	Igfoo has quit (Quit: BIAB)
2021-08-22 21:11:14	dsal	"The expression (union t1 t2) takes the left-biased union of t1 and t2. It prefers t1 when duplicate keys are encountered, i.e. (union == unionWith const)."
2021-08-22 21:11:41	dsal	`(<>)    = union`
2021-08-22 21:12:32	→	keutoi has joined #haskell
2021-08-22 21:12:35	→	hnOsmium0001 has joined #haskell
2021-08-22 21:12:38	dsal	It'd be nice to be able to confidently combine maps without read the docs each time.
2021-08-22 21:15:31	dsal	https://github.com/haskell/containers/issues/539
2021-08-22 21:19:57	→	nate1 has joined #haskell
2021-08-22 21:22:37	→	benin036932 has joined #haskell
2021-08-22 21:24:37	→	Igloo has joined #haskell
2021-08-22 21:25:03	→	averell has joined #haskell
2021-08-22 21:25:08	←	Igloo has quit (Client Quit)
2021-08-22 21:25:17	→	Igloo has joined #haskell
2021-08-22 21:29:57	→	alicebudda has joined #haskell
2021-08-22 21:31:54	→	Lycurgus has joined #haskell
2021-08-22 21:31:58	adamflott	I have a strange error I'm not sure where to start debugging. I have a fairly simple stack based app that runs fine on NixOS, but fails with "app: user-error" on Ubuntu and OSX. They all use stack, ghc-8.10.4, and polysemy
2021-08-22 21:32:49	←	acidjnk has quit (Ping timeout: 250 seconds)
2021-08-22 21:33:06	adamflott	I know it at least enters main as my argument parser is run, but after that I have no context/idea where it could be failing
2021-08-22 21:33:06	Lycurgus	does anyone use NixOS in production?
2021-08-22 21:33:20	Lycurgus	i used it about a decade ago
2021-08-22 21:33:28	Lycurgus	not in prod ofc
2021-08-22 21:33:40	maerwald	I rip it out of production whenever I can :p
2021-08-22 21:34:30	dminuoso	Lycurgus: Yes.
2021-08-22 21:34:31	→	shapr has joined #haskell
2021-08-22 21:35:02	dminuoso	Lycurgus: We're starting to switch our complex infrastructure pieces, and depending on how this goes perhaps largely switch everything over.
2021-08-22 21:35:10	maerwald	oh dear
2021-08-22 21:35:29	Lycurgus	dminuoso, interesting to see how that turns out
2021-08-22 21:35:36	dminuoso	Right now this entails our zoo of mail related servers, and in the near future our customer authentication infrastructure
2021-08-22 21:35:41	maerwald	Lycurgus: with a low bus factor :p
2021-08-22 21:35:47	Lycurgus	in fairness I haven't looked at nix/nixos in a few years
2021-08-22 21:36:09	maerwald	it hasn't changed... still all constantly moving underdocumented stuff with bad bus factor
2021-08-22 21:36:33	maerwald	now there's a new haskell pkg infrastructure
2021-08-22 21:36:46	dminuoso	maerwald: We're reducing this. Im aiming for 3 senior nix engineers for the rest of the team to ask in depth questions. :)
2021-08-22 21:36:52	Lycurgus	sfaik the originating utrecht dept is the only place it's used outside enthusiasts
2021-08-22 21:36:53	dminuoso	Which for our size is good enough
2021-08-22 21:37:07	maerwald	yeah, I'd rather not hire nix engineers to begin with :p
2021-08-22 21:37:08	Lycurgus	utrecht or wherever
2021-08-22 21:37:09	dminuoso	And yes, the bus factor is definitely a valid concern, but one that is addressable through organizational means
2021-08-22 21:37:21	dminuoso	maerwald: We're going to do the training with existing engineers.
2021-08-22 21:37:36	Lycurgus	lol, will 3 be enuf?
2021-08-22 21:37:37	maerwald	I usually make clear in interviews that I'm not willing to learn nix :p
2021-08-22 21:37:44	dminuoso	Lycurgus: We're a relatively small shop, so yes.
2021-08-22 21:37:59	dminuoso	We arent using nix for development, so this is more about devops of servers.
2021-08-22 21:38:12	dminuoso	maerwald: That's completely fair.
2021-08-22 21:38:32	Lycurgus	it's pretty easy to learn, or was
2021-08-22 21:38:40	dminuoso	I think the important part of nix is to be open and honest about the issues it has.
2021-08-22 21:38:43	maerwald	If someone else maintains it... sure. But I already had a case of nix engineer leaving the startup and then everyone got cold feet.
2021-08-22 21:38:59	→	machinedgod has joined #haskell
2021-08-22 21:39:08	dminuoso	I think to some extend, the critcism of nix is just more open and honest, the sheer amount of headaches Ive had with things like ansible.. it's all a trade off.
2021-08-22 21:39:23	dminuoso	Except ansible fanboys have a low tendency to agree that there's deep issues with their approach
2021-08-22 21:39:30	dminuoso	Lack of reflection
2021-08-22 21:39:46	maerwald	ansible is just bash
2021-08-22 21:39:51	dminuoso	heh
2021-08-22 21:39:52	Lycurgus	you could make a much better case for it when it started 15 ya or so
2021-08-22 21:40:00	dminuoso	lexically written in yaml
2021-08-22 21:40:04	Lycurgus	since then LSB distro have vastly improved
2021-08-22 21:40:27	dminuoso	I think the only reasonable alternative for our problem domain would have been k8s
2021-08-22 21:40:33	Lycurgus	fight the next war, not the last one
2021-08-22 21:40:53	Lycurgus	*distros
2021-08-22 21:41:08	maerwald	all distros suck
2021-08-22 21:41:40	Lycurgus	well you want NixOS then
2021-08-22 21:41:48	Hecate	or no computers 
2021-08-22 21:41:56	Hecate	which would be optimal :p
2021-08-22 21:42:10	dminuoso	18:11:09         maerwald | all distros suck
2021-08-22 21:42:14	dminuoso	Just like all programming languages suck
2021-08-22 21:42:25	maerwald	dminuoso: yeah, I also say that in interviews: programming sucks
2021-08-22 21:43:26	dminuoso	Right now, its just that nixos is in my comfort zone, and it gives me the right mix of proper declarative description with atomic updates, and yet results in a mostly plain linux system that non-nixos users can interact with.
2021-08-22 21:43:47	→	Guest|58 has joined #haskell
2021-08-22 21:43:50	dminuoso	So our old admins can still log in and look around for problems like they're used to. With k8s that approach doesnt work anymore
2021-08-22 21:44:10	→	Erutuon has joined #haskell
2021-08-22 21:44:32	maerwald	calling nixos *declarative* is a far stretch, that may merely rely on technical definitions rather than reality
2021-08-22 21:45:04	maerwald	once you got your messy stuff written out, it does roughly the same thing (except in different environments/kernels/...)
2021-08-22 21:45:54	→	stef204 has joined #haskell
2021-08-22 21:46:10	dminuoso	I dont know about that, with nixos its much easier to say "this is an accurate description of our systems". If I remove `services.postfix.enable = true;`, then I have very good reason to trust that the systemd unit will no longer appear.
2021-08-22 21:46:49	dminuoso	Of course this is still based on contracts. If people violate it through various means (say a user is running a postfix from a shell in a tmux session), that cant be helped. 
2021-08-22 21:47:21	←	nate1 has quit (Ping timeout: 252 seconds)
2021-08-22 21:47:25	maerwald	can't something later in your expression re-enable the postfix service?
2021-08-22 21:47:42	←	Guest|58 has quit (Client Quit)
2021-08-22 21:47:55	dminuoso	Sure. And if I really wanted to assert its off, I can just set `services.postfix.enable = lib.mkForce false`
2021-08-22 21:47:57	maerwald	my point being: if it's declarative, there'd be only *one* possible place
2021-08-22 21:48:07	dminuoso	well
2021-08-22 21:48:10	dminuoso	there is one possible place
2021-08-22 21:48:13	dminuoso	its that exact option.
2021-08-22 21:49:14	dminuoso	And nixos doesnt have easy escape hatches here - but since the server description resides on a git repository, you cant trivially violate it
2021-08-22 21:49:17	←	wroathe has quit (Ping timeout: 250 seconds)
2021-08-22 21:50:03	maerwald	sure, puppet, propellor, etc etc
2021-08-22 21:50:53	dminuoso	i.e. you cant log into the server and break that promise without the next deployment undoing your change completely
2021-08-22 21:51:03	maerwald	nothing new
2021-08-22 21:51:34	dminuoso	sure
2021-08-22 21:52:02	dminuoso	puppet achieves similar things, propellor Im not familiar with
2021-08-22 21:52:15	dminuoso	But with puppet it's rather a piece of software that tries to control some existing plain linux
2021-08-22 21:52:15	maerwald	that's good, because it gives me more options to choose from different ecosystems
2021-08-22 21:52:15	dminuoso	With nixos, /etc/systemd/system is a symlink to a store path, which is on a readonly mount
2021-08-22 21:52:15	dminuoso	You cant trivially screw around with that while logged in to the server
2021-08-22 21:52:15	dminuoso	maerwald: absolutely!
2021-08-22 21:52:15	dminuoso	if that's your requirement, then nixos is definitely not for you
2021-08-22 21:52:15	maerwald	since I don't consider NixOS security focussed at all, I wouldn't really use it for deployment in the first place
2021-08-22 21:52:15	dminuoso	for us, we want the opposite: we want to assert that the git repository is the true and complete description of the server.
2021-08-22 21:52:39	dminuoso	And yeah, nixos doesnt get us there all the way - at the end you cant if you want to have any local state. Say, a server has local logs, and the system declaration is obviously not covering that
2021-08-22 21:52:56	dminuoso	Or you might have a database, or maybe the fail2ban database
2021-08-22 21:53:32	←	stef204 has quit (Quit: WeeChat 3.2)
2021-08-22 21:54:01	dminuoso	maerwald: yeah, the security perspective isnt ideal - but honestly, with most distributions it relies on active maintainers that just donate their free time to rapidly push updates.
2021-08-22 21:55:30	→	stef204 has joined #haskell
2021-08-22 21:55:43	maerwald	yeah, caring about security in devops isn't a nice job
2021-08-22 21:56:27	←	stef204 has quit (Client Quit)
2021-08-22 21:56:37	dminuoso	Honestly, if you care about security, you have to subscribe to CVE updates yourself, and then take the flag yourself.
2021-08-22 21:56:45	maerwald	that's why I'm also not convinced of stackage as a concept and much rather have rolling freeze files
2021-08-22 21:57:06	maerwald	I used to bump our freeze file every 2 weeks
2021-08-22 21:57:09	dminuoso	maerwald: at least nixos has that for you.
2021-08-22 21:57:33	maerwald	nixpkgs uses stackage
2021-08-22 21:57:38	dminuoso	for haskell, yeah
2021-08-22 21:57:58	dminuoso	I was thinking about regular packages and libraries
2021-08-22 21:58:18	maerwald	yeah, that was a docker container and the binary was built with a max 2 old freeze file
2021-08-22 21:58:19	dminuoso	For haskell, Im thinking if we go down that way, we'll end up using haskell.nix
2021-08-22 21:58:24	maerwald	*weeks
2021-08-22 21:58:43	dminuoso	That way we'd have plain old cabal hackage semantics again, with respect to updates
2021-08-22 21:58:52	dminuoso	As long as we regularly bump nixpkgs, which I guess we should want anyway
2021-08-22 22:01:06	→	merijn has joined #haskell
2021-08-22 22:01:08	dsal	Lycurgus: I'm using nixos on all my "production" linux machines.  It's the easiest thing to build and replace at the moment, with no leftover junk I have to compete with.
2021-08-22 22:01:18	maerwald	I much prefer to build static binaries and put them in minimal containers that are heavily syscall restricted, are read-only filesystem etc
2021-08-22 22:02:14	Lycurgus	dsal, i note ur scare quotes
2021-08-22 22:02:19	dminuoso	maerwald: One last thing that I really love about nixos:
2021-08-22 22:02:44	dsal	Lycurgus: Yeah, I just mean for my personal production systems, not my work systems.  Work is k8s stuff right now.
2021-08-22 22:02:48	dminuoso	It's how Im generally not afraid of system updates. If something breaks, I know I can completely rollback and not have stuff leaked from the update.
2021-08-22 22:03:15	dminuoso	The only other solution that has this type of "rollback" is if you're fleeting containers
2021-08-22 22:03:20	maerwald	dminuoso: cardanos daedalus (frontend, wallet backend and node) are started via nix expressions btw. I've thought how that'd look like with docker locally, but I believe that would suck. So that might be an interesting use case for nix indeed.
2021-08-22 22:03:22	Lycurgus	the toughest things for humans are simple things it seems once they get on a jag with this or that concept
2021-08-22 22:03:29	maerwald	Because starting docker stuff on a users machine is not good practice
2021-08-22 22:04:00	dminuoso	maerwald: My experience with docker has been pretty poor. The way it screws with the local firewall to implement its networking is absolutely scaring to me.
2021-08-22 22:04:05	dminuoso	And it's very error prone
2021-08-22 22:04:09	maerwald	yes, its broken 
2021-08-22 22:04:36	←	jakalx has left #haskell (Error from remote client)
2021-08-22 22:04:46	maerwald	it's like windows CI... restart it a couple times until it succeeds
2021-08-22 22:05:10	maerwald	but the point is: containers are cattle. If they misbehave, shoot them and respawn.
2021-08-22 22:05:24	maerwald	don't pet them
2021-08-22 22:05:31	dminuoso	We're currently running on centos, and on about 1/3 of the machines we run docker containers on, we've had to spend days to debug and make horrible hotfixes in iptables
2021-08-22 22:05:56	dminuoso	Maybe nobody else runs centos + docker? I dont know, but Im surprised that apparently nobody else has these extreme problems
2021-08-22 22:06:13	dminuoso	Because everything Ive seen suggests that it's properly broken
2021-08-22 22:08:56	←	pretty_dumm_guy has quit (Quit: WeeChat 3.2)
2021-08-22 22:09:34	sm	Gurkenglas: when a project is too much, stack scripts can work well
2021-08-22 22:17:48	→	tzh has joined #haskell
2021-08-22 22:19:58	→	Lorra has joined #haskell
2021-08-22 22:22:11	←	Lorra has quit (Client Quit)
2021-08-22 22:23:27	←	gehmehgeh has quit (Quit: Leaving)
2021-08-22 22:26:40	→	mnrmnaugh has joined #haskell
2021-08-22 22:26:45	←	mnrmnaugh has quit (Remote host closed the connection)
2021-08-22 22:28:46	←	alicebudda has quit (Quit: Client closed)
2021-08-22 22:33:09	←	favonia has quit (Ping timeout: 240 seconds)
2021-08-22 22:33:25	←	Vq has quit (Ping timeout: 268 seconds)
2021-08-22 22:34:06	←	merijn has quit (Ping timeout: 252 seconds)
2021-08-22 22:35:47	→	xff0x has joined #haskell
2021-08-22 22:38:42	→	jakalx has joined #haskell
2021-08-22 22:41:23	←	markpythonicbtc has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-08-22 22:43:09	←	haskl has quit (Changing host)
2021-08-22 22:43:09	→	haskl has joined #haskell
2021-08-22 22:44:41	→	Vq has joined #haskell
2021-08-22 22:45:55	→	favonia has joined #haskell
2021-08-22 22:47:21	←	xff0x has quit (Ping timeout: 250 seconds)
2021-08-22 22:48:06	→	xff0x has joined #haskell
2021-08-22 22:49:30	←	ggvgc has quit (Quit: WeeChat 3.1)
2021-08-22 22:49:50	→	econo has joined #haskell
2021-08-22 22:57:34	←	keutoi has quit (Quit: leaving)
2021-08-22 22:57:55	→	eggplantade has joined #haskell
2021-08-22 23:03:26	→	ggVGc has joined #haskell
2021-08-22 23:09:17	ℹ	irc: disconnected from server
2021-08-22 23:49:58	→	oxide has joined #haskell
2021-08-22 23:49:58	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-22 23:49:58	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-22 23:49:58	ℹ	Channel #haskell: 727 nicks (1 op, 0 voices, 726 normals)
2021-08-22 23:49:59	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-22 23:54:39	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-22 23:55:16	→	azeem has joined #haskell
2021-08-22 23:59:43	←	azeem has quit (Ping timeout: 250 seconds)
2021-08-23 00:00:58	→	fresheyeball has joined #haskell
2021-08-23 00:01:28	fresheyeball	I am trying to impliment an instance of Show for an existenial type
2021-08-23 00:01:32	fresheyeball	I feel lost
2021-08-23 00:02:22	c_wraith	You probably can't.
2021-08-23 00:02:40	fresheyeball	I got Eq and Ord already
2021-08-23 00:02:43	fresheyeball	why not Show?
2021-08-23 00:02:48	→	azeem has joined #haskell
2021-08-23 00:03:12	c_wraith	what's the type?
2021-08-23 00:03:32	fresheyeball	data Page = PEcho | PLogin
2021-08-23 00:03:58	c_wraith	that's not existential
2021-08-23 00:04:09	fresheyeball	data PageView = forall (p :: Page). (Eq (PageModel p), Typeable p, DemotePage p) => PageView (Proxy p) (PageModel p)
2021-08-23 00:05:06	fresheyeball	I figured it out 
2021-08-23 00:05:15	fresheyeball	I didn't know I could just make show, and not showsPrec
2021-08-23 00:05:21	fresheyeball	showsPrec is hard
2021-08-23 00:05:25	fresheyeball	I thought I had to make showsPrec
2021-08-23 00:05:36	c_wraith	showsPrec isn't any harder than show...
2021-08-23 00:05:38	→	Pickchea has joined #haskell
2021-08-23 00:05:51	fresheyeball	It is to me
2021-08-23 00:05:55	sm	tis
2021-08-23 00:05:57	fresheyeball	I don't understand it
2021-08-23 00:06:05	fresheyeball	ShowS? Int for precidence?
2021-08-23 00:06:12	c_wraith	I mean...  ok, you need to write more code. But it's identical complexity at the type level.
2021-08-23 00:06:24	fresheyeball	sure ok
2021-08-23 00:06:30	fresheyeball	that makes sense
2021-08-23 00:06:37	fresheyeball	ok, now I need to do Generic
2021-08-23 00:06:39	fresheyeball	FEAR
2021-08-23 00:06:47	sm	I'll tell that one to new users from now on
2021-08-23 00:07:11	c_wraith	I've written showsPrec by hand.  It really isn't hard.  It breaks down into a few common patterns
2021-08-23 00:07:19	sm	to my wife, in fact
2021-08-23 00:07:32	c_wraith	the docs are nice enough to illustrate all those patterns for you, in fact.
2021-08-23 00:08:43	c_wraith	and Prelude even exports a bunch of weird functions that are useless most of the time, but really convenient for writing showsPrec instances
2021-08-23 00:09:31	c_wraith	:t showParen -- like this
2021-08-23 00:09:33	lambdabot	Bool -> ShowS -> ShowS
2021-08-23 00:09:41	←	raehik has quit (Ping timeout: 250 seconds)
2021-08-23 00:09:44	→	hexfive has joined #haskell
2021-08-23 00:09:50	⚡	sm . o O "what do you mean you don't understand ? it's identical complexity at the type level !" "Oh, of course! How silly of me, thanks for making everything clear"
2021-08-23 00:10:31	c_wraith	hey, when the complaint is "I can't figure out how to do X with an existential, but I can figure out Y", pointing out that the existential is irrelevant for the difference matters.
2021-08-23 00:10:57	→	raehik has joined #haskell
2021-08-23 00:11:01	fresheyeball	c_wraith: fair enough, it was a bad question
2021-08-23 00:11:18	fresheyeball	any examples of hand written Generic instances?
2021-08-23 00:11:36	c_wraith	I don't know if anyone has ever hand-written a Generic instance.
2021-08-23 00:11:55	fresheyeball	is there a way to get a Generic instances for my data type?
2021-08-23 00:12:15	c_wraith	... ok, that's certainly an exaggeration.  I'm sure it was done by hand for comparison during the development of the DeriveGeneric extension.
2021-08-23 00:12:21	sm	c_wraith: no criticism implied, I'm just joking around (and backing up fresheyeball's perception, in human terms showsPrec is way harder than show)
2021-08-23 00:12:42	fresheyeball	right, the existential part was really not part of the question though
2021-08-23 00:12:49	fresheyeball	it was more why I can't derive it
2021-08-23 00:13:38	←	hexfive has quit (Client Quit)
2021-08-23 00:13:44	fresheyeball	And why I can't derive Generic either
2021-08-23 00:15:25	c_wraith	my general experience is that when something is hard to get to work in Haskell, it's also hard to use.
2021-08-23 00:15:50	fresheyeball	c_wraith: maybe so, but I really want the safety and ergonimics this will provide to the code
2021-08-23 00:15:53	c_wraith	the type system issues don't go away
2021-08-23 00:16:09	c_wraith	I question the ergonomics.
2021-08-23 00:16:25	c_wraith	I expect it will be as hard to use everywhere as it is to implement
2021-08-23 00:16:27	fresheyeball	If I can get his, I have dependantly typed routes, which will let me write code in terms of the actual model without a ton of hand mapping between run time ADTs
2021-08-23 00:16:47	←	xff0x has quit (Ping timeout: 258 seconds)
2021-08-23 00:17:26	→	dschrempf has joined #haskell
2021-08-23 00:17:41	→	xff0x has joined #haskell
2021-08-23 00:17:55	←	pbrisbin has quit (Ping timeout: 250 seconds)
2021-08-23 00:18:06	glguy	fresheyeball, There's some research what it means to extend GHC.Generics to handle existential quantification, but the stuff you need isn't in base
2021-08-23 00:18:25	fresheyeball	glguy: that's fine
2021-08-23 00:18:29	fresheyeball	I just need to figure this out
2021-08-23 00:18:34	glguy	and everything that works with generics would need to be updated to use the new stuff
2021-08-23 00:18:41	fresheyeball	all the types that are existentialized in are Generic
2021-08-23 00:18:48	fresheyeball	and the only other thing in this type is a Proxy
2021-08-23 00:18:51	fresheyeball	so it should be possible
2021-08-23 00:19:06	glguy	it's not something Generics currently supports
2021-08-23 00:19:23	fresheyeball	glguy: are you saying it's currently impossible while logically possible?
2021-08-23 00:19:44	glguy	someone could perhaps make a thing that wasn't GHC.Generics but was similar and then it might work
2021-08-23 00:19:48	glguy	but it doesn't work in GHC.Generics
2021-08-23 00:20:00	fresheyeball	so... yes?
2021-08-23 00:20:10	glguy	so no you can't make a Generic instance
2021-08-23 00:20:13	→	segfaultfizzbuzz has joined #haskell
2021-08-23 00:20:16	glguy	but you could invent a whole new generics system
2021-08-23 00:20:19	fresheyeball	ok
2021-08-23 00:20:34	fresheyeball	so that makes sense because type Rep would need the existenail variable
2021-08-23 00:21:15	fresheyeball	well lame
2021-08-23 00:21:29	fresheyeball	hmm, I can get around this
2021-08-23 00:21:38	fresheyeball	because I think I am only using Generic for Aeson
2021-08-23 00:21:42	→	timCF has joined #haskell
2021-08-23 00:22:06	glguy	You could perhaps use Generics on your underlying PageModel type and then use a not-generics thing to wrap that up for PageView
2021-08-23 00:22:29	fresheyeball	glguy: I don't understand that
2021-08-23 00:22:43	←	segfaultfizzbuzz has left #haskell (Leaving)
2021-08-23 00:22:44	fresheyeball	you mean get ToJSON from the underly Generic?
2021-08-23 00:22:57	fresheyeball	and then use that instance in my hand written instance?
2021-08-23 00:23:05	glguy	There's no reason to store a Proxy in the datatype, anyway
2021-08-23 00:23:28	glguy	the whole datatype really is just the PageModel
2021-08-23 00:23:31	→	abrantesasf has joined #haskell
2021-08-23 00:23:32	fresheyeball	I don't see how to get even Eq without it
2021-08-23 00:24:00	glguy	Storing the proxy in the datatype, that first field with type (Proxy p), doesn't help implement Eq
2021-08-23 00:24:03	fresheyeball	http://ix.io/3wGy
2021-08-23 00:24:09	fresheyeball	if you want to see what I have in full
2021-08-23 00:24:22	fresheyeball	I am using it with typeable to get Eq
2021-08-23 00:25:24	timCF	Hello! I'm looking for a some soft of "standard" function `Int -> Rational -> Text` which takes amount of symbols to render aftrer dot as first argument. Ideally I want this function to work without convertions to Float/Double and corresponding rounding errors. I came up with this, but not sure it's optimal solution 
2021-08-23 00:25:29	timCF	https://github.com/tkachuk-labs/rentier/blob/8089b849d431b8eaa6aa793894c624d473bd4b04/src/Rentier/Rational.hs#L18-L31
2021-08-23 00:25:46	fresheyeball	timCF: convert to Fixed first
2021-08-23 00:25:48	glguy	fresheyeball, You can always just make a new "Proxy" value when you need it; storing it on the constructor doesn't do anything extra
2021-08-23 00:25:56	fresheyeball	then just use Show
2021-08-23 00:26:52	fresheyeball	glguy: I don't see how to do it
2021-08-23 00:27:09	fresheyeball	how do I bring p into scope without to Proxy?
2021-08-23 00:27:15	timCF	fresheyeball: thanks!
2021-08-23 00:27:46	glguy	fresheyeball, one moment, your file was missing all the language extensions
2021-08-23 00:27:59	fresheyeball	glguy: yeah it's in the cabal file
2021-08-23 00:28:08	glguy	yeah, this is why that's not as good as putting them in the file
2021-08-23 00:28:22	fresheyeball	glguy: I get really sick of adding them 
2021-08-23 00:28:43	glguy	fortunately making new files isn't the most common part of making things
2021-08-23 00:29:13	fresheyeball	glguy: I understand the critique, but I am doing it this way and I am not changing it
2021-08-23 00:29:28	glguy	that fine, it just means your file doesn't load. I'll stop
2021-08-23 00:30:57	fresheyeball	glguy: I got it
2021-08-23 00:31:07	fresheyeball	I can do (x :: PageModel p) and avoid the Proxy
2021-08-23 00:31:20	shachaf	-fglasgow-exts for life
2021-08-23 00:31:25	→	merijn has joined #haskell
2021-08-23 00:31:43	shachaf	I heard they were adding something like glasgow-exts back to GHC?
2021-08-23 00:32:23	fresheyeball	Oop nope
2021-08-23 00:32:27	fresheyeball	I do need the Proxy
2021-08-23 00:32:33	fresheyeball	otherwise I can't get instances into scope
2021-08-23 00:35:43	glguy	no, pattern matching on the PageView constructor brings instances into scope, not the Proxy
2021-08-23 00:36:34	janus	shachaf: is it GHC2021 that is like glasgow-exts?
2021-08-23 00:36:50	glguy	If you ever need a proxy you can recover it like:  toProxy :: f p -> Proxy p; toProxy _ = Proxy
2021-08-23 00:36:53	shachaf	Oh, that sounds right.
2021-08-23 00:39:59	janus	GHC2021+GADTs+OverloadedStrings+DerivingStrategies 4 lyfe :P
2021-08-23 00:41:14	←	Guest5329 has quit (Remote host closed the connection)
2021-08-23 00:41:42	←	azeem has quit (Ping timeout: 258 seconds)
2021-08-23 00:41:45	←	dschrempf has quit (Ping timeout: 250 seconds)
2021-08-23 00:41:56	janus	hmm what if they had done multiple levels og GHC2021? :P hahaha you could have GHC2021SevenVotes, GHC2021SixVotes :P then, if like me, you think ghc2021 is a bit too conserative, you'd have the option
2021-08-23 00:41:57	shachaf	Glaswegian Algebraic Data Types isn't part of GHC2021?
2021-08-23 00:42:22	janus	shachaf: they are not ;) the one i mentioned are at 7 votes, they'd need 8 votes to be included
2021-08-23 00:43:16	janus	in effect, i guess it would be like a two-staged voting system
2021-08-23 00:43:22	→	azeem has joined #haskell
2021-08-23 00:43:33	janus	then, you could probe haskell and see which level of ghc2021 people would commonly choose
2021-08-23 00:43:43	janus	i think GHC2021SevenVotes would be more popular than GHC2021EightVotes
2021-08-23 00:44:06	janus	s/haskell/hackage/ (sorry)
2021-08-23 00:44:23	→	burnsidesLlama has joined #haskell
2021-08-23 00:45:27	←	hendursa1 has quit (Quit: hendursa1)
2021-08-23 00:45:38	→	Sgeo has joined #haskell
2021-08-23 00:45:54	→	hendursaga has joined #haskell
2021-08-23 00:47:57	←	burnsidesLlama has quit (Remote host closed the connection)
2021-08-23 00:48:41	→	burnsidesLlama has joined #haskell
2021-08-23 00:49:57	←	azeem has quit (Ping timeout: 252 seconds)
2021-08-23 00:51:52	←	burnsidesLlama has quit (Remote host closed the connection)
2021-08-23 00:52:29	fresheyeball	ok so ToJSON was easy
2021-08-23 00:52:33	fresheyeball	but FromJSON is hard
2021-08-23 00:53:19	→	neo has joined #haskell
2021-08-23 00:54:33	c_wraith	I'd expect FromJSON to actually be impossible
2021-08-23 00:54:47	fresheyeball	c_wraith: I did this before with singletons
2021-08-23 00:54:56	fresheyeball	but I don't want to pull in singletons just for this
2021-08-23 00:55:05	fresheyeball	basically I demote Page and encode that into the json
2021-08-23 00:55:18	fresheyeball	then I decode Page, and need to convert it to a Proxy of itself
2021-08-23 00:55:36	→	pretty_dumm_guy has joined #haskell
2021-08-23 00:56:06	janus	hmmm i wonder if it even makes sense to have a discussion around GHC2021SevenVotes or if is it just plain politically infeasible
2021-08-23 00:56:09	c_wraith	your options are all various forms of "a table".  The only question is whether you manage that table yourself or try to throw it into instances of some class to make the compiler do it
2021-08-23 13:42:13	ℹ	irc: disconnected from server
2021-08-23 13:42:32	→	oxide has joined #haskell
2021-08-23 13:42:32	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-23 13:42:32	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-23 13:42:32	ℹ	Channel #haskell: 722 nicks (1 op, 0 voices, 721 normals)
2021-08-23 13:42:33	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-23 13:44:02	→	burnsidesLlama has joined #haskell
2021-08-23 13:47:37	←	geekosaur has quit (Killed (NickServ (GHOST command used by allbery_b)))
2021-08-23 13:47:38	→	allbery_b has joined #haskell
2021-08-23 13:47:40	ℹ	allbery_b is now known as geekosaur
2021-08-23 13:48:56	←	jakalx has left #haskell
2021-08-23 13:51:53	→	jakalx has joined #haskell
2021-08-23 13:54:15	ℹ	irc: disconnected from server
2021-08-24 22:23:58	→	oxide has joined #haskell
2021-08-24 22:23:58	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-24 22:23:58	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-24 22:23:58	ℹ	Channel #haskell: 728 nicks (1 op, 0 voices, 727 normals)
2021-08-24 22:23:59	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-24 22:24:40	→	arjun has joined #haskell
2021-08-24 22:24:43	←	arjun has quit (Remote host closed the connection)
2021-08-24 22:25:56	ℹ	irc: disconnected from server
2021-08-25 00:18:03	→	oxide has joined #haskell
2021-08-25 00:18:03	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-25 00:18:03	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-25 00:18:03	ℹ	Channel #haskell: 726 nicks (1 op, 0 voices, 725 normals)
2021-08-25 00:18:04	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-25 00:18:25	←	_crazygirl has quit (Killed (ozone (No Spam)))
2021-08-25 00:22:44	←	remedan has quit (Quit: Bye!)
2021-08-25 00:24:31	→	ec_ has joined #haskell
2021-08-25 00:27:28	→	Sinbad has joined #haskell
2021-08-25 00:27:41	→	jakalx has joined #haskell
2021-08-25 00:31:30	→	remedan has joined #haskell
2021-08-25 00:34:16	←	doyougnu has quit (Remote host closed the connection)
2021-08-25 00:35:19	←	mei has quit (Ping timeout: 250 seconds)
2021-08-25 00:35:46	←	Lycurgus has quit (Quit: Exeunt)
2021-08-25 00:37:10	→	jumper149 has joined #haskell
2021-08-25 00:37:50	→	buggymcbugfix has joined #haskell
2021-08-25 00:38:06	→	raehik has joined #haskell
2021-08-25 00:41:31	←	cuz has quit (Ping timeout: 252 seconds)
2021-08-25 00:42:28	←	buggymcbugfix has quit (Ping timeout: 240 seconds)
2021-08-25 00:44:45	←	mc47 has quit (Remote host closed the connection)
2021-08-25 00:47:58	→	d0ku has joined #haskell
2021-08-25 00:48:47	←	merijn has quit (Ping timeout: 240 seconds)
2021-08-25 00:52:27	←	eggplantade has quit (Remote host closed the connection)
2021-08-25 00:53:25	→	wroathe has joined #haskell
2021-08-25 00:53:25	←	wroathe has quit (Changing host)
2021-08-25 00:53:25	→	wroathe has joined #haskell
2021-08-25 00:54:02	ℹ	mniip_ is now known as mniip
2021-08-25 00:56:27	→	cuz has joined #haskell
2021-08-25 00:59:16	→	Erutuon has joined #haskell
2021-08-25 00:59:41	→	maroloccio has joined #haskell
2021-08-25 01:00:53	←	ec_ has quit (Ping timeout: 244 seconds)
2021-08-25 01:00:54	←	lavaman has quit (Read error: Connection reset by peer)
2021-08-25 01:01:04	→	lavaman has joined #haskell
2021-08-25 01:01:19	←	neo has quit (Ping timeout: 252 seconds)
2021-08-25 01:02:30	→	Pickchea has joined #haskell
2021-08-25 01:03:42	→	hseg has joined #haskell
2021-08-25 01:04:23	zzz	Data.Graph from containers or fgl?
2021-08-25 01:04:54	Rembane_	zzz: You could also use Data.Map.
2021-08-25 01:05:13	zzz	Rembane_: how so?
2021-08-25 01:05:41	→	doyougnu has joined #haskell
2021-08-25 01:08:12	→	ec_ has joined #haskell
2021-08-25 01:09:14	←	qbt has quit (Remote host closed the connection)
2021-08-25 01:09:51	monochrom	Also [] and [[]]
2021-08-25 01:11:27	Rembane_	zzz: A graph has many representations, a mapping between nodes is one of them. OTOH fgl is fun! 
2021-08-25 01:13:00	monochrom	The fgl paper would be fun to read. I don't find fgl fun to use. Unless "fun" means many type parameters and many classes.
2021-08-25 01:18:13	←	alx741 has quit (Ping timeout: 250 seconds)
2021-08-25 01:19:28	←	lavaman has quit (Ping timeout: 252 seconds)
2021-08-25 01:21:47	←	jtomas has quit (Ping timeout: 240 seconds)
2021-08-25 01:23:23	zzz	this seems fun: https://hackage.haskell.org/package/algebraic-graphs
2021-08-25 01:27:09	←	maroloccio has quit (Quit: WeeChat 3.0)
2021-08-25 01:28:57	←	azeem has quit (Ping timeout: 250 seconds)
2021-08-25 01:29:45	→	azeem has joined #haskell
2021-08-25 01:30:30	←	slack1256 has quit (Remote host closed the connection)
2021-08-25 01:31:13	→	alx741 has joined #haskell
2021-08-25 01:33:43	→	jtomas has joined #haskell
2021-08-25 01:35:27	←	juhp has quit (Ping timeout: 250 seconds)
2021-08-25 01:35:34	←	_ht has quit (Remote host closed the connection)
2021-08-25 01:35:53	ℹ	irc: disconnected from server
2021-08-25 17:56:01	→	oxide has joined #haskell
2021-08-25 17:56:01	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-25 17:56:01	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-25 17:56:01	ℹ	Channel #haskell: 729 nicks (1 op, 0 voices, 728 normals)
2021-08-25 17:56:01	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-25 18:01:49	mastarija	jumper149, "Could not deduce (Applicative f0) from the context: (Applicative f, Eq (f b))"
2021-08-25 18:02:03	mastarija	But leave it, I think ambiguous types are necessary here
2021-08-25 18:02:23	mastarija	GHC docs pretty much say that.
2021-08-25 18:02:35	jumper149	mastarija: Yeah, after re-reading the GHC docs, it seems to be the case here.
2021-08-25 18:02:46	mastarija	Unless I've interpreted something incorrectly :D
2021-08-25 18:03:48	←	markpythonicbtc has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-08-25 18:05:00	←	jakalx has left #haskell (Error from remote client)
2021-08-25 18:06:10	hseg	mastarija: an alternative to AAT is to have some parameter force the tyvar to unify with the desired type
2021-08-25 18:06:41	mastarija	hseg, Yes, something like Proxy you mean :D
2021-08-25 18:07:13	hseg	or something like #. from Data.Functor.Utils
2021-08-25 18:07:30	hseg	https://hackage.haskell.org/package/base-4.14.1.0/docs/src/Data.Functor.Utils.html#%23.
2021-08-25 18:09:06	→	famubu has joined #haskell
2021-08-25 18:11:12	→	bontaq has joined #haskell
2021-08-25 18:11:26	maerwald	who knew about this: https://hackage.haskell.org/package/bustle
2021-08-25 18:17:13	ℹ	irc: disconnected from server
2021-08-25 18:17:34	→	oxide has joined #haskell
2021-08-25 18:17:34	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-25 18:17:34	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-25 18:17:34	ℹ	Channel #haskell: 731 nicks (1 op, 0 voices, 730 normals)
2021-08-25 18:17:35	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-25 18:17:51	←	ubert has quit (Ping timeout: 250 seconds)
2021-08-25 18:19:13	←	bitdex has quit (Quit: = "")
2021-08-25 18:20:25	→	favonia has joined #haskell
2021-08-25 18:23:58	←	burnsidesLlama has quit (Remote host closed the connection)
2021-08-25 18:24:42	←	mikoto-c1 has quit (Quit: mikoto-c1)
2021-08-25 18:27:39	→	jakalx has joined #haskell
2021-08-25 18:31:09	→	mikoto-c1 has joined #haskell
2021-08-25 18:31:58	hseg	til type families look through type synonyms. in particular, eg given type Throwing a e = Either e a, evaluating a type family with an equation such as Map n (f a) = f (n a) at (f a) ~ Throwing a e will result in the type Throwing (n a) e, not Throwing a (n e)
2021-08-25 18:33:00	→	markpythonicbtc has joined #haskell
2021-08-25 18:33:29	←	mastarija has quit (Ping timeout: 248 seconds)
2021-08-25 18:34:15	Hecate	type synonyms were a mistake of God
2021-08-25 18:34:16	hseg	which means my elaborate system of type synonyms doesn't work well once it reaches type-level manipulations
2021-08-25 18:37:32	hseg	hrmph. ok, that last bit of hope I had for my experimental refactor has died
2021-08-25 18:37:59	hseg	seems constructing the type of the function I want is too heavy
2021-08-25 18:38:02	←	hendursa1 has quit (Quit: hendursa1)
2021-08-25 18:38:07	Boomerang	It would be nice if GHC could report all type synonyms encountered along the way in error messages
2021-08-25 18:38:15	Boomerang	> map (+1) "Hello"
2021-08-25 18:38:17	lambdabot	 error:
2021-08-25 18:38:17	lambdabot	     • No instance for (Num Char) arising from a use of ‘+’
2021-08-25 18:38:17	lambdabot	     • In the first argument of ‘map’, namely ‘(+ 1)’
2021-08-25 18:38:43	→	hendursaga has joined #haskell
2021-08-25 18:38:45	Boomerang	Here, it would be great if it could mention `String` somewhere in the error
2021-08-25 18:39:05	Boomerang	Maybe not the best example
2021-08-25 18:41:45	Boomerang	> "hello" + 1
2021-08-25 18:41:47	lambdabot	 error:
2021-08-25 18:41:47	lambdabot	     • No instance for (Num [Char]) arising from a use of ‘+’
2021-08-25 18:41:47	lambdabot	     • In the expression: "hello" + 1
2021-08-25 18:42:26	jumper149	When using servant it would be really cool, if GHC told me why exactly it can't unify `ServerT API m` and my the type of my handler. But instead it just uses the type synonym `ServerT ...`.
2021-08-25 18:46:19	→	Lycurgus has joined #haskell
2021-08-25 18:46:58	lortabac	hseg: you have to use newtypes to invert parameters properly
2021-08-25 18:46:59	dminuoso	maerwald: Haha!
2021-08-25 18:47:11	dminuoso	Didn't we just talk about "dynamically linking ssl to allow for prompt updates"?
2021-08-25 18:47:13	dminuoso	https://www.openssl.org/news/secadv/20210824.txt
2021-08-25 18:47:30	dminuoso	Or did you read that yesterday already?
2021-08-25 18:47:46	hseg	lortabac: yeah, except newtypes have the ergonomics issue of needing wrapping/unwrapping
2021-08-25 18:48:31	hseg	dminuoso: don't see the relevance to dynamic linking?
2021-08-25 18:50:08	dminuoso	hseg: maerwald's argument was that, if someone statically links openssl into each binary that you use, then you have to wait for *every* maintainer to provide a patched version.
2021-08-25 18:50:22	dminuoso	Assuming there even is a maintainer..
2021-08-25 18:50:29	→	doyougnu has joined #haskell
2021-08-25 18:50:54	dminuoso	And `openssl` is one of those things that, if a security vulnerability is found, you likely want it patched as soon as possible.
2021-08-25 18:51:15	maerwald	patched via your package manager with working gpg signatures
2021-08-25 18:51:21	maerwald	because your network is compromised now
2021-08-25 18:52:04	→	hendursa1 has joined #haskell
2021-08-25 18:52:05	dminuoso	So yeah. We have a buffer overflow with high criticality in openssl again. The advisory is from yesterday.
2021-08-25 18:52:22	maerwald	well, but haskell-tls isn't affected, right? :D
2021-08-25 18:52:26	dminuoso	hahaha
2021-08-25 18:52:48	hseg	ah, so it was the coincidence of openssl being cited as an example, and then having this kind of advisory right after?
2021-08-25 18:52:56	→	wroathe has joined #haskell
2021-08-25 18:52:56	←	wroathe has quit (Changing host)
2021-08-25 18:52:56	→	wroathe has joined #haskell
2021-08-25 18:52:58	←	hendursaga has quit (Ping timeout: 244 seconds)
2021-08-25 18:53:26	dminuoso	maerwald: A long while ago, I was doing some research on "API security gateway appliances" that you put in front of your API, and they essentially just do MITM, run a bunch of regex, and then break your application in funny ways.
2021-08-25 18:53:49	←	Jonno_FTW has quit (Ping timeout: 252 seconds)
2021-08-25 18:54:03	dminuoso	And one of the vendors even *advertized* their "inhouse developed TLS library that is not vulnerable to OpenSSL vulerabilities. Our device was never vulnerable to Heartbleed"
2021-08-25 18:54:07	←	dunj3 has quit (Quit: Leaving)
2021-08-25 18:54:18	dminuoso	Realy bragged about it.
2021-08-25 18:54:38	dminuoso	hseg: yes
2021-08-25 18:55:15	→	Jonno_FTW has joined #haskell
2021-08-25 18:56:33	←	jakalx has left #haskell (Error from remote client)
2021-08-25 19:00:03	→	raehik has joined #haskell
2021-08-25 19:02:08	→	burnsidesLlama has joined #haskell
2021-08-25 19:06:46	←	aman has quit (Quit: aman)
2021-08-25 19:07:34	←	burnsidesLlama has quit (Ping timeout: 252 seconds)
2021-08-25 19:08:07	←	keutoi has quit (Ping timeout: 252 seconds)
2021-08-25 19:09:46	→	keutoi has joined #haskell
2021-08-25 19:11:06	→	neo has joined #haskell
2021-08-25 19:12:05	→	Sgeo has joined #haskell
2021-08-25 19:12:06	→	euandreh has joined #haskell
2021-08-25 19:12:59	←	hendursa1 has quit (Quit: hendursa1)
2021-08-25 19:16:25	←	jespada has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-08-25 19:17:14	→	jespada has joined #haskell
2021-08-25 19:20:41	←	shapr has quit (Ping timeout: 250 seconds)
2021-08-25 19:24:07	←	amahl has quit (Ping timeout: 240 seconds)
2021-08-25 19:26:33	→	fendor_ has joined #haskell
2021-08-25 19:28:29	←	famubu has quit (Ping timeout: 250 seconds)
2021-08-25 19:28:55	←	fendor has quit (Ping timeout: 250 seconds)
2021-08-25 19:32:31	→	waleee has joined #haskell
2021-08-25 19:34:15	→	elf_fortrez has joined #haskell
2021-08-25 19:35:28	→	zebrag has joined #haskell
2021-08-25 19:36:27	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-08-25 19:36:46	→	jakalx has joined #haskell
2021-08-25 19:37:10	→	aman has joined #haskell
2021-08-25 19:37:20	→	MQ-17J has joined #haskell
2021-08-25 19:37:35	→	drd has joined #haskell
2021-08-25 19:37:46	→	hendursaga has joined #haskell
2021-08-25 19:37:57	→	slack1256 has joined #haskell
2021-08-25 19:39:37	→	ubert has joined #haskell
2021-08-25 19:41:03	→	famubu has joined #haskell
2021-08-25 19:46:07	←	famubu has quit (Ping timeout: 240 seconds)
2021-08-25 19:48:16	→	famubu has joined #haskell
2021-08-25 19:50:00	←	vysn has quit (Remote host closed the connection)
2021-08-25 19:53:11	←	azeem has quit (Ping timeout: 250 seconds)
2021-08-25 19:54:18	→	azeem has joined #haskell
2021-08-25 19:54:27	←	keutoi has quit (Ping timeout: 240 seconds)
2021-08-25 19:54:57	←	azeem has quit (Read error: Connection reset by peer)
2021-08-25 19:55:36	→	azeem has joined #haskell
2021-08-25 19:55:47	←	drd has quit (Ping timeout: 240 seconds)
2021-08-25 19:55:52	→	rond_ has joined #haskell
2021-08-25 19:57:17	←	adanwan has quit (Remote host closed the connection)
2021-08-25 19:57:36	→	adanwan has joined #haskell
2021-08-25 20:00:36	→	jippiedoe has joined #haskell
2021-08-25 20:01:25	←	reumeth has quit (Ping timeout: 250 seconds)
2021-08-25 20:01:31	←	jumper149 has quit (Quit: WeeChat 3.2)
2021-08-25 20:01:46	→	keutoi has joined #haskell
2021-08-25 20:02:36	←	hseg has quit (Ping timeout: 250 seconds)
2021-08-25 20:04:37	→	hseg has joined #haskell
2021-08-25 20:04:41	←	hseg has quit (Client Quit)
2021-08-25 20:05:52	←	famubu has quit (Ping timeout: 252 seconds)
2021-08-25 20:15:10	←	geekosaur has quit (Killed (NickServ (GHOST command used by allbery_b)))
2021-08-25 20:15:10	→	allbery_b has joined #haskell
2021-08-25 20:15:14	ℹ	allbery_b is now known as geekosaur
2021-08-25 20:15:41	→	jumper149 has joined #haskell
2021-08-25 20:18:19	←	Boomerang has quit (Ping timeout: 250 seconds)
2021-08-25 20:18:19	←	jumper149 has quit (Client Quit)
2021-08-25 20:20:40	←	hueso has quit (Ping timeout: 240 seconds)
2021-08-25 20:21:31	←	gehmehgeh has quit (Quit: Leaving)
2021-08-25 20:22:10	←	cheater has quit (Quit: BitchX: the Cadillac of all clients)
2021-08-25 20:23:07	←	elf_fortrez has quit (Ping timeout: 246 seconds)
2021-08-25 20:24:41	→	eggplantade has joined #haskell
2021-08-25 20:27:22	←	cfricke has quit (Quit: WeeChat 3.2)
2021-08-25 20:27:37	→	drd has joined #haskell
2021-08-25 20:28:44	→	cheater has joined #haskell
2021-08-25 20:29:10	←	eggplantade has quit (Ping timeout: 240 seconds)
2021-08-25 20:29:28	→	hnOsmium0001 has joined #haskell
2021-08-25 20:29:55	→	hueso has joined #haskell
2021-08-25 20:33:21	←	jippiedoe has quit (Quit: Leaving)
2021-08-25 20:39:40	←	hueso has quit (Quit: hueso)
2021-08-25 20:44:34	→	mastarija has joined #haskell
2021-08-25 20:49:54	←	aman has quit (Quit: aman)
2021-08-25 20:51:38	→	lavaman has joined #haskell
2021-08-25 20:55:47	←	lavaman has quit (Ping timeout: 240 seconds)
2021-08-25 20:56:21	→	chris has joined #haskell
2021-08-25 20:56:24	ℹ	chris is now known as Guest8405
2021-08-25 20:57:04	←	Lycurgus has quit (Quit: Exeunt)
2021-08-25 20:57:07	←	kenran has quit (Ping timeout: 240 seconds)
2021-08-25 20:58:15	→	PinealGlandOptic has joined #haskell
2021-08-25 20:59:52	→	reumeth has joined #haskell
2021-08-25 21:08:28	←	lortabac has quit (Quit: WeeChat 2.8)
2021-08-25 21:10:21	→	monadfritz[m] has joined #haskell
2021-08-25 21:11:07	→	eggplantade has joined #haskell
2021-08-25 21:13:10	→	aman has joined #haskell
2021-08-25 21:13:24	monadfritz[m]	hi ther
2021-08-25 21:13:34	monadfritz[m]	is gi-gtk-declarative deprecated ?
2021-08-25 21:14:06	←	merijn has quit (Ping timeout: 250 seconds)
2021-08-25 21:14:07	monadfritz[m]	as haskell gi base now at 0.25 and the gi-gtk-declarative still requires it to be <0.25?
2021-08-25 21:15:30	monadfritz[m]	and if I downgrade haskell gi base to <0.25 all other libs like gi-pango gi-harfbuzz yell at me that it must 0.25
2021-08-25 21:18:01	←	mc47 has quit (Remote host closed the connection)
2021-08-25 21:18:30	Drew[m]	I wouldn't call a library deprecated for not using the latest dependency versions.
2021-08-25 21:18:59	monadfritz[m]	so how do one manage to solve this?
2021-08-25 21:19:22	monadfritz[m]	what do u usually do Mr Drew?
2021-08-25 21:19:39	Drew[m]	The last change to the main branch was april this year, so there may be a good chance that the maintainer is still around to maintain it
2021-08-25 21:20:03	Drew[m]	What I'd do is try to build it with  the latest dependency versions with `--allow-newer`
2021-08-25 21:20:15	monadfritz[m]	so it'll be good to call it a day and look for other lib?
2021-08-25 21:20:18	Drew[m]	If it works I'd open an issue on the package's repo saying it works
2021-08-25 21:20:22	monadfritz[m]	ah how to do that with stack?
2021-08-25 21:20:34	monadfritz[m]	just pass that --allow-newer as flags?
2021-08-25 21:21:02	monadfritz[m]	 * just pass that --allow-newer as flags? nope, not this one.
2021-08-25 21:21:43	→	nate1 has joined #haskell
2021-08-25 21:22:47	Drew[m]	With stack `--allow-newer` just disables all dependency bounds but
2021-08-25 21:22:47	Drew[m]	it's up to you to supply the exact off-snapshot library versions you want to use by specifying the exact version in `extra-deps` field in `stack.yaml`
2021-08-25 21:24:21	Drew[m]	monadfritz[m]: what happens when you try that?
2021-08-25 21:24:25	Drew[m]	I haven't used Stack in a while
2021-08-25 21:24:32	monadfritz[m]	there's no such thing as --allow-newer 
2021-08-25 21:24:40	monadfritz[m]	I do stack build --allow-newer
2021-08-25 21:24:42	Drew[m]	huh, I'm sure there was
2021-08-25 21:24:48	monadfritz[m]	where's to put this --allow-newer
2021-08-25 21:25:09	monadfritz[m]	I'm using stack version 2.7.3
2021-08-25 21:25:11	monadfritz[m]	from ghcup
2021-08-25 21:25:48	Drew[m]	Maybe it's only a config file field for stack
2021-08-25 21:25:55	Drew[m]	https://docs.haskellstack.org/en/stable/yaml_configuration/
2021-08-25 21:26:14	Drew[m]	it's in there
2021-08-25 21:26:25	maerwald	do you need to use stack?
2021-08-25 21:28:04	monadfritz[m]	I think if I'm not using stack, deps error will get worse, as the other gui training repo I made only use cabal but I can't cabal build now, same error, deps.
2021-08-25 21:28:07	→	jgeerds has joined #haskell
2021-08-25 21:28:33	←	jgeerds has quit (Remote host closed the connection)
2021-08-25 21:29:49	→	lbseale has joined #haskell
2021-08-25 21:29:54	Drew[m]	In my experience the experience of trying to use out-of-bounds dependency versions is easier on cabal than stack, since cabal has the resolver.
2021-08-25 21:30:27	maerwald	yeah, if stack doesn't work ootb, the experience degrades exponentially
2021-08-25 21:30:30	→	econo has joined #haskell
2021-08-25 21:32:33	Drew[m]	If cabal is giving you dependency errors then that actually means there's still options: new things to try `--allow-newer` on.
2021-08-25 21:32:33	Drew[m]	It's when you get compilation errors that you basically know you can't proceed until the maintainer fixes something.
2021-08-25 21:32:44	→	elf_fortrez has joined #haskell
2021-08-25 21:33:56	←	eggplantade has quit (Remote host closed the connection)
2021-08-25 21:35:03	monadfritz[m]	I force to ignore boundary and yeah it gives me compilation error
2021-08-25 21:35:11	monadfritz[m]	seems like the behavior changes?
2021-08-25 21:36:15	monadfritz[m]	the gi-cairo and gi-glib
2021-08-25 21:37:34	monadfritz[m]	if I may ask, what do you use haskell currently for? Mr Maerwald and Mr Drew
2021-08-25 21:38:15	monadfritz[m]	 * seems like the types & function changes?
2021-08-25 21:38:58	Drew[m]	I use it for the odd open source library contribution and for personal projects.
2021-08-25 21:39:03	←	dajoer has quit (Quit: leaving)
2021-08-25 21:39:55	←	Guest8405 has quit (Ping timeout: 252 seconds)
2021-08-25 21:40:16	←	dfg has quit (Remote host closed the connection)
2021-08-25 21:40:51	→	dfg has joined #haskell
2021-08-25 21:40:51	←	dfg has quit (Changing host)
2021-08-25 21:40:51	→	dfg has joined #haskell
2021-08-25 21:41:49	Drew[m]	For solving your gi-gtk-declarative issue, the "good citizen" solution is to basically do as much as you can to make it easy for the maintainer to fix the issue, and open an issue/pull request so the maintainer can fix it...
2021-08-25 21:41:49	Drew[m]	But that doesn't help you in the short term, and it's involved, and I've got to go soon so I can't show you how it's done. The quick solution might be to try changing your Stack resolver version
2021-08-25 21:42:06	→	merijn has joined #haskell
2021-08-25 21:42:23	Drew[m]	A previous LTS snapshot might be more compatible with some version of gi-gtk-declarative
2021-08-25 21:47:54	←	merijn has quit (Ping timeout: 250 seconds)
2021-08-25 21:48:35	ℹ	fendor_ is now known as fendor
2021-08-25 21:48:53	←	nate1 has quit (Ping timeout: 250 seconds)
2021-08-25 21:52:24	←	wroathe has quit (Ping timeout: 248 seconds)
2021-08-25 21:55:52	←	rond_ has quit (Quit: Client closed)
2021-08-25 21:57:54	→	_ht has joined #haskell
2021-08-25 21:58:23	→	slowButPresent has joined #haskell
2021-08-25 22:02:07	←	hyiltiz has quit (Ping timeout: 240 seconds)
2021-08-25 22:02:22	→	hyiltiz has joined #haskell
2021-08-25 22:03:45	→	hueso has joined #haskell
2021-08-25 22:04:23	→	adanwan_ has joined #haskell
2021-08-25 22:05:10	←	adanwan has quit (Ping timeout: 244 seconds)
2021-08-25 22:06:09	→	ec_ has joined #haskell
2021-08-25 22:08:58	→	wroathe has joined #haskell
2021-08-25 22:08:58	←	wroathe has quit (Changing host)
2021-08-25 22:08:58	→	wroathe has joined #haskell
2021-08-25 22:14:01	←	wroathe has quit (Ping timeout: 250 seconds)
2021-08-25 22:14:27	←	hannessteffenhag has quit (Ping timeout: 240 seconds)
2021-08-25 22:14:59	←	fendor has quit (Remote host closed the connection)
2021-08-25 22:15:07	←	mikoto-c1 has quit (Ping timeout: 252 seconds)
2021-08-25 22:15:41	→	merijn has joined #haskell
2021-08-25 22:17:03	→	shapr has joined #haskell
2021-08-25 22:18:19	→	fendor has joined #haskell
2021-08-25 22:19:50	←	mikoto-chan has quit (Quit: mikoto-chan)
2021-08-25 22:20:09	←	jdcain has quit (Quit: WeeChat 3.2)
2021-08-25 22:24:25	←	aman has quit (Quit: aman)
2021-08-25 22:25:23	→	chris has joined #haskell
2021-08-25 22:25:27	ℹ	chris is now known as Guest6187
2021-08-25 22:26:09	←	elf_fortrez has quit (Quit: Client closed)
2021-08-25 22:26:44	→	burnsidesLlama has joined #haskell
2021-08-25 22:27:46	→	wroathe has joined #haskell
2021-08-25 22:27:46	←	wroathe has quit (Changing host)
2021-08-25 22:27:46	→	wroathe has joined #haskell
2021-08-25 22:29:29	→	pavonia has joined #haskell
2021-08-25 22:30:42	←	fvr has quit (Quit: Connection closed for inactivity)
2021-08-25 22:30:47	←	Guest6187 has quit (Read error: Connection reset by peer)
2021-08-25 22:31:31	→	nate1 has joined #haskell
2021-08-25 22:31:47	←	burnsidesLlama has quit (Ping timeout: 240 seconds)
2021-08-25 22:32:40	←	wroathe has quit (Ping timeout: 240 seconds)
2021-08-25 22:33:04	←	ec_ has quit (Ping timeout: 244 seconds)
2021-08-25 22:34:27	→	eggplantade has joined #haskell
2021-08-25 22:34:48	→	Erutuon has joined #haskell
2021-08-25 22:36:28	←	nate1 has quit (Ping timeout: 240 seconds)
2021-08-25 22:39:02	←	eggplantade has quit (Ping timeout: 250 seconds)
2021-08-25 22:43:24	→	chris has joined #haskell
2021-08-25 22:43:25	→	__monty__ has joined #haskell
2021-08-25 22:43:28	ℹ	chris is now known as Guest7836
2021-08-25 22:44:26	→	eggplantade has joined #haskell
2021-08-25 22:49:27	←	merijn has quit (Ping timeout: 240 seconds)
2021-08-25 22:52:47	←	euandreh has quit (Quit: WeeChat 3.2)
2021-08-25 22:54:28	→	ec_ has joined #haskell
2021-08-25 23:00:24	→	mikoto-chan has joined #haskell
2021-08-25 23:01:23	←	bontaq has quit (Read error: Connection reset by peer)
2021-08-25 23:01:40	→	bontaq has joined #haskell
2021-08-25 23:04:54	→	nate1 has joined #haskell
2021-08-25 23:04:57	←	keutoi has quit (Ping timeout: 248 seconds)
2021-08-25 23:05:43	←	azeem has quit (Ping timeout: 252 seconds)
2021-08-25 23:06:46	→	azeem has joined #haskell
2021-08-25 23:06:58	→	keutoi has joined #haskell
2021-08-25 23:09:27	←	nate1 has quit (Ping timeout: 240 seconds)
2021-08-25 23:11:02	→	benin0369329 has joined #haskell
2021-08-25 23:12:10	←	drd has quit (Ping timeout: 240 seconds)
2021-08-25 23:13:23	←	benin036932 has quit (Ping timeout: 250 seconds)
2021-08-25 23:13:23	ℹ	benin0369329 is now known as benin036932
2021-08-25 23:16:59	←	ec_ has quit (Ping timeout: 244 seconds)
2021-08-25 23:17:36	←	azeem has quit (Read error: Connection reset by peer)
2021-08-25 23:18:42	→	vysn has joined #haskell
2021-08-25 23:18:43	→	azeem has joined #haskell
2021-08-25 23:19:27	→	mc47 has joined #haskell
2021-08-25 23:22:14	→	drd has joined #haskell
2021-08-25 23:22:41	→	ec_ has joined #haskell
2021-08-25 23:27:06	←	acid has quit (Remote host closed the connection)
2021-08-25 23:28:00	→	wroathe has joined #haskell
2021-08-25 23:28:00	←	wroathe has quit (Changing host)
2021-08-25 23:28:00	→	wroathe has joined #haskell
2021-08-25 23:29:29	→	aegon has joined #haskell
2021-08-25 23:31:35	←	zer0bitz has quit (Ping timeout: 250 seconds)
2021-08-25 23:33:46	←	keutoi has quit (Ping timeout: 252 seconds)
2021-08-25 23:35:12	←	phma has quit (Read error: Connection reset by peer)
2021-08-25 23:35:55	→	phma has joined #haskell
2021-08-25 23:37:46	haskl	I'm trying to build my program. Not sure what the issue is here/not sure what libHSparsec is or what I need to install to get it working with ghc. I'm using ghcup and trying to install with cabal. https://paste.mozilla.org/jvFcCYCb
2021-08-25 23:38:42	maerwald	haskl: distro?
2021-08-25 23:39:00	←	Guest7836 has quit (Remote host closed the connection)
2021-08-25 23:39:03	haskl	maerwald, Debian 11.
2021-08-25 23:39:21	maerwald	haskl: which GHC is used? 
2021-08-25 23:39:26	maerwald	the path
2021-08-25 23:40:17	←	eggplantade has quit (Remote host closed the connection)
2021-08-25 23:42:46	haskl	test
2021-08-25 23:43:15	haskl	oh sorry! i was using ghcup it's using /home/tilde/.ghcup/bin/ghc
2021-08-25 23:44:19	→	eggplantade has joined #haskell
2021-08-25 23:44:28	maerwald	not sure if the store is busted
2021-08-25 23:44:35	haskl	i can build in 8.10.5 though, but I get this issue when i try to run `cabal run cabal test`: https://paste.mozilla.org/fh6t5kEC
2021-08-25 23:45:20	haskl	i remember being able to run doctests a while back but now that i' mtrying to run them i'm gettin gtrouble. i remember there was a weird problem with doctests in a specific version of ghc so that's why i was version hopping
2021-08-25 23:45:35	maerwald	haskl: use cabal-docspec for doctests
2021-08-25 23:46:04	maerwald	https://github.com/phadej/cabal-extras/tree/master/cabal-docspec
2021-08-25 23:46:17	maerwald	here are static binaries https://downloads.haskell.org/~ghcup/unofficial-bindists/cabal-docspec/
2021-08-25 23:48:31	haskl	hm i'll have to read about how to make use of this thanks
2021-08-25 23:49:22	maerwald	https://github.com/phadej/cabal-extras/blob/master/cabal-docspec/MANUAL.md
2021-08-25 23:49:25	←	drd has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-08-25 23:49:45	→	drd has joined #haskell
2021-08-25 23:49:46	maerwald	1. you build your project, 2. you run `cabal-docspec`
2021-08-25 23:49:53	maerwald	you don't need a Main for it
2021-08-25 23:50:00	maerwald	no test suite in .cabal
2021-08-25 23:50:23	Kabouik	Thank you for all your help today maerwald. Sorry that the maintainer was a little bit hostile to your remarks (I remember him being very nice and patient so that's probably just a tone thing today)
2021-08-25 23:50:37	haskl	thanks maerwald 
2021-08-25 23:50:41	maerwald	Kabouik: I don't think he was hostile :p
2021-08-25 23:50:46	maerwald	just grumpy
2021-08-25 23:51:03	maerwald	because he maintains 200 haskell packages alone
2021-08-25 23:51:04	Kabouik	Yeah, better wording. A bit hostile to the changes you suggested though
2021-08-25 23:51:15	Kabouik	But he *is* nice
2021-08-25 23:51:15	maerwald	I don't understand why distros keep doing it
2021-08-25 23:51:20	ℹ	pavonia is now known as `\pavonia^{}
2021-08-25 23:51:21	→	amahl has joined #haskell
2021-08-25 23:51:29	←	liskin has quit (Ping timeout: 252 seconds)
2021-08-25 23:51:34	→	tzh has joined #haskell
2021-08-25 23:51:43	maerwald	Yeah, I'm not sure if solus support is gonna move forward if they don't fix libtinfo
2021-08-25 23:52:06	maerwald	it's really just a compat symlink
2021-08-25 23:52:08	Kabouik	I have no understanding of what is being done to comment, I just grasped that he takes security seriously and don't want to give any attack exposure that could be avoided with some dedication from the maintainer
2021-08-25 23:52:21	maerwald	that was all offtopic :p
2021-08-25 23:53:03	Kabouik	Yeah I could see you two couldn't find a common ground, basically not agreeing on the issues or mechanisms themselves, so not easy to talk
2021-08-25 23:53:10	maerwald	https://gitlab.haskell.org/ghc/ghc/-/issues/17878 would solve most of our problems
2021-08-25 23:53:16	ℹ	`\pavonia^{} is now known as pavonia
2021-08-25 23:54:01	Kabouik	So I was reading you two exchanging, and every tine someone was saying something, I was like "Oh that's true, one point for him"
2021-08-25 23:54:07	Kabouik	And then same with the other. :>
2021-08-25 23:54:16	Kabouik	Just too candid and believing everyone is right.
2021-08-25 23:54:34	maerwald	I've spent too much time on distro packaging, so yeah
2021-08-25 23:54:46	Rembane_	I love the "the rest should be piece of cake?"-part
2021-08-25 23:54:48	maerwald	and seeing how they self-inflict pain doesn't make it better
2021-08-25 23:54:52	←	reumeth has quit (Ping timeout: 250 seconds)
2021-08-25 23:55:00	Kabouik	Just when he said it's not his experience that users have trouble compiling stuff with cabal due to the Solus choices, I almost just waved timidly in the discussion because I did have trouble.
2021-08-25 23:56:25	maerwald	man, do static binary for pandoc and remove all the haskell-dev packages
2021-08-25 23:56:32	maerwald	it's too much work for no real gain
2021-08-25 23:56:53	maerwald	dynamic haskell libs... tzz
2021-08-25 23:57:13	maerwald	our dynamic libraries aren't great
2021-08-25 23:57:37	Kabouik	From what I understood, they consider there's a gain and it's worth it. I'm not able or skilled to judge though, and I know you disagree
2021-08-25 23:57:42	maerwald	no one packages go libs either, so what's the point
2021-08-25 23:58:24	maerwald	otherwise it will end up like arch linux, which just causes pain for their haskell users
2021-08-26 00:01:56	←	ec_ has quit (Ping timeout: 244 seconds)
2021-08-26 00:02:27	←	hendursaga has quit (Ping timeout: 244 seconds)
2021-08-26 00:03:55	→	ec_ has joined #haskell
2021-08-26 00:04:49	→	hendursaga has joined #haskell
2021-08-26 00:04:54	←	dyeplexer has quit (Remote host closed the connection)
2021-08-26 00:13:06	←	phma has quit (Read error: Connection reset by peer)
2021-08-26 00:15:38	←	kuribas has quit (Quit: ERC (IRC client for Emacs 26.3))
2021-08-26 00:16:06	←	azeem has quit (Ping timeout: 250 seconds)
2021-08-26 00:16:28	→	azeem has joined #haskell
2021-08-26 00:18:42	→	phma has joined #haskell
2021-08-26 00:20:33	←	MQ-17J has quit (Ping timeout: 250 seconds)
2021-08-26 00:25:28	←	azeem has quit (Ping timeout: 252 seconds)
2021-08-26 00:25:56	→	kimjetwav has joined #haskell
2021-08-26 00:26:12	→	azeem has joined #haskell
2021-08-26 00:26:37	←	drd has quit (Ping timeout: 250 seconds)
2021-08-26 00:30:05	←	mei has quit (Ping timeout: 250 seconds)
2021-08-26 00:30:58	→	Pickchea has joined #haskell
2021-08-26 00:33:22	←	econo has quit (Quit: Connection closed for inactivity)
2021-08-26 00:36:09	←	remedan has quit (Quit: Bye!)
2021-08-26 00:37:02	→	remedan has joined #haskell
2021-08-26 00:37:19	←	markpythonicbtc has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-08-26 00:40:32	←	remedan has quit (Client Quit)
2021-08-26 00:43:33	←	jess has quit
2021-08-26 00:46:18	→	merijn has joined #haskell
2021-08-26 00:46:22	←	ec_ has quit (Ping timeout: 244 seconds)
2021-08-26 00:49:27	←	cheater has quit (Ping timeout: 240 seconds)
2021-08-26 00:49:55	→	remedan has joined #haskell
2021-08-26 00:49:58	→	cheater has joined #haskell
2021-08-26 00:51:33	←	dhouthoo has quit (Quit: WeeChat 3.2)
2021-08-26 00:53:22	→	lavaman has joined #haskell
2021-08-26 00:53:31	→	chris has joined #haskell
2021-08-26 00:53:34	ℹ	chris is now known as Guest6628
2021-08-26 00:57:42	←	lavaman has quit (Ping timeout: 250 seconds)
2021-08-26 00:57:46	←	azeem has quit (Read error: Connection reset by peer)
2021-08-26 00:57:51	→	ec_ has joined #haskell
2021-08-26 00:58:38	→	azeem has joined #haskell
2021-08-26 01:07:37	←	eggplantade has quit (Remote host closed the connection)
2021-08-26 01:11:17	←	jakalx has left #haskell
2021-08-26 01:11:31	→	liskin has joined #haskell
2021-08-26 01:12:35	←	liskin has quit (Remote host closed the connection)
2021-08-26 01:13:45	→	liskin has joined #haskell
2021-08-26 01:17:16	←	liskin has quit (Read error: Connection reset by peer)
2021-08-26 01:18:17	→	jtomas_ has joined #haskell
2021-08-26 01:18:30	←	jtomas has quit (Ping timeout: 250 seconds)
2021-08-26 01:19:39	←	teo has quit
2021-08-26 01:20:28	←	merijn has quit (Ping timeout: 252 seconds)
2021-08-26 01:22:01	→	liskin has joined #haskell
2021-08-26 01:26:50	→	fendor_ has joined #haskell
2021-08-26 01:29:40	←	fendor has quit (Ping timeout: 240 seconds)
2021-08-26 01:30:48	←	ec_ has quit (Ping timeout: 244 seconds)
2021-08-26 01:34:47	←	juhp has quit (Ping timeout: 240 seconds)
2021-08-26 01:35:15	→	neurocyte830 has joined #haskell
2021-08-26 01:35:50	←	dispater has quit (Quit: ZNC 1.8.1 - https://znc.in)
2021-08-26 01:36:41	→	elf_fortrez has joined #haskell
2021-08-26 01:36:56	←	mastarija has quit (Ping timeout: 248 seconds)
2021-08-26 01:37:10	→	dispater has joined #haskell
2021-08-26 01:37:10	←	dispater has quit (Remote host closed the connection)
2021-08-26 01:38:02	→	juhp has joined #haskell
2021-08-26 01:38:31	→	dispater has joined #haskell
2021-08-26 01:39:02	→	orcus has joined #haskell
2021-08-26 01:39:54	←	Guest6628 has quit (Remote host closed the connection)
2021-08-26 01:40:31	→	chris has joined #haskell
2021-08-26 01:40:35	ℹ	chris is now known as Guest9305
2021-08-26 01:40:45	←	orcus has quit (Client Quit)
2021-08-26 01:41:16	→	mastarija has joined #haskell
2021-08-26 01:41:38	→	ec_ has joined #haskell
2021-08-26 01:42:45	→	jakalx has joined #haskell
2021-08-26 01:42:56	→	acidjnk has joined #haskell
2021-08-26 01:42:57	→	orcus has joined #haskell
2021-08-26 01:43:27	←	xff0x has quit (Ping timeout: 240 seconds)
2021-08-26 01:44:33	→	xff0x has joined #haskell
2021-08-26 01:44:56	←	Guest9305 has quit (Ping timeout: 250 seconds)
2021-08-26 01:47:03	←	orcus has quit (Client Quit)
2021-08-26 01:47:03	←	dispater has quit (Quit: ZNC 1.8.1 - https://znc.in)
2021-08-26 01:49:03	→	dispater has joined #haskell
2021-08-26 01:49:36	→	orcus has joined #haskell
2021-08-26 01:50:38	ℹ	irc: disconnected from server
2021-08-26 02:03:51	→	oxide has joined #haskell
2021-08-26 02:03:51	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-26 02:03:51	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-26 02:03:51	ℹ	Channel #haskell: 729 nicks (1 op, 0 voices, 728 normals)
2021-08-26 02:03:51	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-26 02:03:58	ℹ	irc: disconnected from server
2021-08-26 22:57:08	→	oxide has joined #haskell
2021-08-26 22:57:08	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-26 22:57:08	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-26 22:57:08	ℹ	Channel #haskell: 722 nicks (1 op, 0 voices, 721 normals)
2021-08-26 22:57:08	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-26 22:57:09	→	burnsidesLlama has joined #haskell
2021-08-26 22:58:47	←	merijn has quit (Ping timeout: 240 seconds)
2021-08-26 22:59:03	←	hyiltiz has quit (Ping timeout: 250 seconds)
2021-08-26 22:59:04	monochrom	Oh haha Monday Morning Haskell opens the old wounds of "is this a quicksort?" controversy again!
2021-08-26 22:59:32	→	troydm has joined #haskell
2021-08-26 22:59:49	→	merijn has joined #haskell
2021-08-26 23:01:28	→	hannessteffenhag has joined #haskell
2021-08-26 23:01:46	←	burnsidesLlama has quit (Ping timeout: 252 seconds)
2021-08-26 23:02:03	→	hyiltiz has joined #haskell
2021-08-26 23:05:59	←	hannessteffenhag has quit (Ping timeout: 250 seconds)
2021-08-26 23:07:27	←	hyiltiz has quit (Ping timeout: 240 seconds)
2021-08-26 23:09:22	→	hyiltiz has joined #haskell
2021-08-26 23:09:27	←	merijn has quit (Ping timeout: 250 seconds)
2021-08-26 23:10:54	→	merijn has joined #haskell
2021-08-26 23:13:12	→	obs\ has joined #haskell
2021-08-26 23:16:16	←	merijn has quit (Ping timeout: 250 seconds)
2021-08-26 23:16:56	→	merijn has joined #haskell
2021-08-26 23:17:32	→	burnsidesLlama has joined #haskell
2021-08-26 23:20:17	→	andinus has joined #haskell
2021-08-26 23:22:10	←	merijn has quit (Ping timeout: 240 seconds)
2021-08-26 23:22:20	→	merijn has joined #haskell
2021-08-26 23:24:19	←	jakalx has left #haskell
2021-08-26 23:25:48	→	jakalx has joined #haskell
2021-08-26 23:27:27	←	merijn has quit (Ping timeout: 240 seconds)
2021-08-26 23:27:57	→	hannessteffenhag has joined #haskell
2021-08-26 23:28:09	→	merijn has joined #haskell
2021-08-26 23:32:09	←	hannessteffenhag has quit (Ping timeout: 248 seconds)
2021-08-26 23:33:17	←	merijn has quit (Ping timeout: 250 seconds)
2021-08-26 23:33:33	→	merijn has joined #haskell
2021-08-26 23:35:21	←	tzh has quit (Read error: Connection reset by peer)
2021-08-26 23:35:31	←	markpythonicbtc has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-08-26 23:35:38	→	tzh has joined #haskell
2021-08-26 23:38:55	←	merijn has quit (Ping timeout: 250 seconds)
2021-08-26 23:39:04	→	wroathe has joined #haskell
2021-08-26 23:39:04	←	wroathe has quit (Changing host)
2021-08-26 23:39:04	→	wroathe has joined #haskell
2021-08-26 23:39:21	→	merijn has joined #haskell
2021-08-26 23:42:35	→	zer0bitz has joined #haskell
2021-08-26 23:44:11	→	Erutuon has joined #haskell
2021-08-26 23:44:27	←	merijn has quit (Ping timeout: 240 seconds)
2021-08-26 23:44:57	→	merijn has joined #haskell
2021-08-26 23:46:27	→	hannessteffenhag has joined #haskell
2021-08-26 23:50:10	←	merijn has quit (Ping timeout: 240 seconds)
2021-08-26 23:50:29	←	burnsidesLlama has quit (Remote host closed the connection)
2021-08-26 23:50:33	→	merijn has joined #haskell
2021-08-26 23:50:34	←	gentauro has quit (Read error: Connection reset by peer)
2021-08-26 23:50:43	←	hannessteffenhag has quit (Ping timeout: 252 seconds)
2021-08-26 23:51:01	→	burnsidesLlama has joined #haskell
2021-08-26 23:55:40	←	burnsidesLlama has quit (Ping timeout: 252 seconds)
2021-08-26 23:55:43	←	merijn has quit (Ping timeout: 250 seconds)
2021-08-26 23:56:09	→	merijn has joined #haskell
2021-08-26 23:56:44	→	gentauro has joined #haskell
2021-08-26 23:57:24	lbseale	monochrom: thanks again for your help yesterday, I got a shell function working just right
2021-08-27 00:01:18	←	fef has quit (Quit: Leaving)
2021-08-27 00:01:20	←	merijn has quit (Ping timeout: 250 seconds)
2021-08-27 00:01:33	→	merijn has joined #haskell
2021-08-27 00:02:43	→	d0ku has joined #haskell
2021-08-27 00:06:49	→	Guest27 has joined #haskell
2021-08-27 00:06:58	←	merijn has quit (Ping timeout: 250 seconds)
2021-08-27 00:07:24	→	merijn has joined #haskell
2021-08-27 00:07:44	←	dyeplexer has quit (Remote host closed the connection)
2021-08-27 00:09:05	←	Guest27 has quit (Client Quit)
2021-08-27 00:12:43	←	merijn has quit (Ping timeout: 252 seconds)
2021-08-27 00:12:59	→	merijn has joined #haskell
2021-08-27 00:18:01	←	merijn has quit (Ping timeout: 248 seconds)
2021-08-27 00:18:23	→	merijn has joined #haskell
2021-08-27 00:18:27	→	pavonia has joined #haskell
2021-08-27 00:22:26	→	burnsidesLlama has joined #haskell
2021-08-27 00:23:33	←	merijn has quit (Ping timeout: 250 seconds)
2021-08-27 00:23:59	→	merijn has joined #haskell
2021-08-27 00:24:11	→	jtomas has joined #haskell
2021-08-27 00:24:49	←	haykam has quit (Remote host closed the connection)
2021-08-27 00:25:02	→	haykam has joined #haskell
2021-08-27 00:26:40	←	burnsidesLlama has quit (Ping timeout: 240 seconds)
2021-08-27 00:28:48	←	phma has quit (Read error: Connection reset by peer)
2021-08-27 00:29:10	←	merijn has quit (Ping timeout: 240 seconds)
2021-08-27 00:29:10	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-27 00:29:13	←	benin036932 has quit (Ping timeout: 248 seconds)
2021-08-27 00:29:31	→	azeem has joined #haskell
2021-08-27 00:29:37	→	merijn has joined #haskell
2021-08-27 00:30:13	→	phma has joined #haskell
2021-08-27 00:30:23	←	azeem has quit (Read error: Connection reset by peer)
2021-08-27 00:30:42	←	mizu_no_oto has quit (Quit: Client closed)
2021-08-27 00:31:15	→	markpythonicbtc has joined #haskell
2021-08-27 00:31:19	→	azeem has joined #haskell
2021-08-27 00:31:39	→	_xor has joined #haskell
2021-08-27 00:33:42	→	mjs2600 has joined #haskell
2021-08-27 00:34:43	←	merijn has quit (Ping timeout: 252 seconds)
2021-08-27 00:35:20	→	merijn has joined #haskell
2021-08-27 00:35:40	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-27 00:35:41	←	mjs2600 has quit (Read error: Connection reset by peer)
2021-08-27 00:35:45	→	mjs2600_ has joined #haskell
2021-08-27 00:36:47	→	lavaman has joined #haskell
2021-08-27 00:38:20	→	azeem has joined #haskell
2021-08-27 00:40:57	←	lavaman has quit (Ping timeout: 248 seconds)
2021-08-27 00:42:05	→	hannessteffenhag has joined #haskell
2021-08-27 00:45:06	←	merijn has quit (Ping timeout: 250 seconds)
2021-08-27 00:46:34	→	merijn has joined #haskell
2021-08-27 00:46:57	←	azeem has quit (Ping timeout: 250 seconds)
2021-08-27 00:48:55	→	azeem has joined #haskell
2021-08-27 00:50:04	←	machinedgod has quit (Read error: Connection reset by peer)
2021-08-27 00:50:10	→	machined1od has joined #haskell
2021-08-27 00:51:27	←	merijn has quit (Ping timeout: 240 seconds)
2021-08-27 00:51:27	←	hannessteffenhag has quit (Ping timeout: 240 seconds)
2021-08-27 00:52:06	←	machined1od has quit (Client Quit)
2021-08-27 00:52:11	→	merijn has joined #haskell
2021-08-27 00:53:11	→	machinedgod has joined #haskell
2021-08-27 00:57:05	→	sszark1 has joined #haskell
2021-08-27 00:57:10	←	merijn has quit (Ping timeout: 240 seconds)
2021-08-27 00:57:48	→	merijn has joined #haskell
2021-08-27 00:58:22	←	machinedgod has quit (Remote host closed the connection)
2021-08-27 01:00:09	←	sszark has quit (Ping timeout: 248 seconds)
2021-08-27 01:00:38	→	machinedgod has joined #haskell
2021-08-27 01:01:27	→	dschrempf has joined #haskell
2021-08-27 01:02:21	jakefromstatefar	<Axman6> "jakefromstatefarm(the1&only): is..." <- I tried it out for some random project, then realized that the project was way above my head, and promptly switched to another language (that I was capable in).
2021-08-27 01:02:26	jakefromstatefar	However, I cannot seem to uninstall it
2021-08-27 01:02:34	jakefromstatefar	as it doesn't appear in the installed list anymore
2021-08-27 01:02:36	jakefromstatefar	I'm confused
2021-08-27 01:02:57	→	haritz has joined #haskell
2021-08-27 01:02:57	←	haritz has quit (Changing host)
2021-08-27 01:02:57	→	haritz has joined #haskell
2021-08-27 01:03:51	→	hannessteffenhag has joined #haskell
2021-08-27 01:04:23	←	haykam has quit (Remote host closed the connection)
2021-08-27 01:04:36	→	haykam has joined #haskell
2021-08-27 01:05:16	→	peterhil has joined #haskell
2021-08-27 01:06:20	ℹ	neurocyte830 is now known as neurocyte
2021-08-27 01:08:10	←	hannessteffenhag has quit (Ping timeout: 240 seconds)
2021-08-27 01:10:24	←	machinedgod has quit (Quit: Lost terminal)
2021-08-27 01:11:01	←	merijn has quit (Ping timeout: 252 seconds)
2021-08-27 01:11:28	→	machinedgod has joined #haskell
2021-08-27 01:11:41	←	machinedgod has quit (Client Quit)
2021-08-27 01:12:06	→	machinedgod has joined #haskell
2021-08-27 01:14:41	←	machinedgod has quit (Remote host closed the connection)
2021-08-27 01:14:46	←	Cajun has quit (Quit: Client closed)
2021-08-27 01:15:55	→	machinedgod has joined #haskell
2021-08-27 01:16:10	←	geekosaur has quit (Ping timeout: 240 seconds)
2021-08-27 01:16:26	→	geekosaur has joined #haskell
2021-08-27 01:20:19	sm	jakefromstatefarm: there are usually multiple package dbs on your system, make sure you're working with the right one
2021-08-27 01:24:49	→	stef204 has joined #haskell
2021-08-27 01:29:57	→	Pickchea has joined #haskell
2021-08-27 01:30:32	←	machinedgod has quit (Remote host closed the connection)
2021-08-27 01:31:29	←	eggplantade has quit (Remote host closed the connection)
2021-08-27 01:34:19	→	BosonCollider has joined #haskell
2021-08-27 01:34:36	←	ec_ has quit (Ping timeout: 276 seconds)
2021-08-27 01:35:07	←	juhp has quit (Ping timeout: 240 seconds)
2021-08-27 01:38:13	→	juhp has joined #haskell
2021-08-27 01:39:14	→	hannessteffenhag has joined #haskell
2021-08-27 01:40:02	→	ec_ has joined #haskell
2021-08-27 01:40:03	→	dsrt^ has joined #haskell
2021-08-27 01:43:43	←	hannessteffenhag has quit (Ping timeout: 250 seconds)
2021-08-27 01:45:24	→	skykanin has joined #haskell
2021-08-27 01:45:32	←	skykanin has quit (Client Quit)
2021-08-27 01:45:38	→	machinedgod has joined #haskell
2021-08-27 01:46:25	→	merijn has joined #haskell
2021-08-27 01:46:46	→	reumeth has joined #haskell
2021-08-27 01:47:08	←	qbt has quit (Remote host closed the connection)
2021-08-27 01:48:25	←	azeem has quit (Ping timeout: 252 seconds)
2021-08-27 01:51:40	←	merijn has quit (Ping timeout: 240 seconds)
2021-08-27 01:52:03	←	_ht has quit (Remote host closed the connection)
2021-08-27 01:54:24	→	Codaraxis has joined #haskell
2021-08-27 01:55:40	→	azeem has joined #haskell
2021-08-27 02:02:07	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-27 02:02:10	←	hyiltiz has quit (Ping timeout: 252 seconds)
2021-08-27 02:02:13	→	__monty__ has joined #haskell
2021-08-27 02:02:15	←	geekosaur has quit (Remote host closed the connection)
2021-08-27 02:02:38	→	geekosaur has joined #haskell
2021-08-27 02:03:07	→	azeem has joined #haskell
2021-08-27 02:03:17	→	skykanin has joined #haskell
2021-08-27 02:03:32	←	BosonCollider has quit (Remote host closed the connection)
2021-08-27 02:03:51	→	BosonCollider has joined #haskell
2021-08-27 02:04:01	→	hyiltiz has joined #haskell
2021-08-27 02:05:13	→	bitdex has joined #haskell
2021-08-27 02:09:29	←	mikoto-chan has quit (Ping timeout: 248 seconds)
2021-08-27 02:10:07	←	mikoto-c1 has quit (Ping timeout: 240 seconds)
2021-08-27 02:10:35	←	amahl has quit (Ping timeout: 250 seconds)
2021-08-27 02:13:30	←	peterhil has quit (Ping timeout: 250 seconds)
2021-08-27 02:18:30	→	mikoto-c1 has joined #haskell
2021-08-27 02:18:47	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-27 02:19:36	→	aplainze1akind has joined #haskell
2021-08-27 02:20:10	←	aplainzetakind has quit (Ping timeout: 240 seconds)
2021-08-27 02:20:31	→	acidjnk has joined #haskell
2021-08-27 02:20:36	→	azeem has joined #haskell
2021-08-27 02:22:03	←	ChaiTRex has quit (Ping timeout: 276 seconds)
2021-08-27 02:23:06	→	ChaiTRex has joined #haskell
2021-08-27 02:25:13	→	eggplantade has joined #haskell
2021-08-27 02:27:59	→	tfeb has joined #haskell
2021-08-27 02:28:00	→	poljar has joined #haskell
2021-08-27 02:28:30	→	eL_Bart0- has joined #haskell
2021-08-27 02:29:00	→	skn2 has joined #haskell
2021-08-27 02:29:03	→	Athas_ has joined #haskell
2021-08-27 02:29:41	→	wagle_ has joined #haskell
2021-08-27 02:30:46	→	ehamberg_ has joined #haskell
2021-08-27 02:30:54	→	quintasan has joined #haskell
2021-08-27 02:31:11	→	PHO`__ has joined #haskell
2021-08-27 02:31:17	→	RohitGoswami[m]1 has joined #haskell
2021-08-27 02:31:20	→	lavaman has joined #haskell
2021-08-27 02:31:27	→	eco_ has joined #haskell
2021-08-27 02:31:30	→	nitrix_ has joined #haskell
2021-08-27 02:31:43	←	eL_Bart0 has quit (Quit: Restarting)
2021-08-27 02:31:43	←	jesser[m] has quit (Ping timeout: 276 seconds)
2021-08-27 02:31:43	←	nitrix has quit (Ping timeout: 276 seconds)
2021-08-27 02:31:43	←	PHO`_ has quit (Ping timeout: 276 seconds)
2021-08-27 02:31:43	←	Athas has quit (Read error: Connection reset by peer)
2021-08-27 02:31:43	←	RohitGoswami[m] has quit (Ping timeout: 276 seconds)
2021-08-27 02:31:43	←	ehamberg has quit (Ping timeout: 276 seconds)
2021-08-27 02:31:43	←	wagle has quit (Read error: Connection reset by peer)
2021-08-27 02:31:43	←	quintasan_ has quit (Quit: No Ping reply in 180 seconds.)
2021-08-27 02:31:44	←	swistak has quit (Ping timeout: 276 seconds)
2021-08-27 02:31:44	←	Boarders has quit (Ping timeout: 276 seconds)
2021-08-27 02:31:44	→	jesser[m] has joined #haskell
2021-08-27 02:31:44	←	alp has quit (Quit: ZNC 1.8.1 - https://znc.in)
2021-08-27 02:31:44	←	eco has quit (Remote host closed the connection)
2021-08-27 02:31:44	←	hsek[m] has quit (Ping timeout: 276 seconds)
2021-08-27 02:31:44	←	davean has quit (Ping timeout: 276 seconds)
2021-08-27 02:31:44	←	amir has quit (Ping timeout: 276 seconds)
2021-08-27 02:31:44	ℹ	ehamberg_ is now known as ehamberg
2021-08-27 02:31:53	→	amir has joined #haskell
2021-08-27 02:32:06	→	davean has joined #haskell
2021-08-27 02:32:06	←	poljar1 has quit (Ping timeout: 276 seconds)
2021-08-27 02:32:06	←	sudden has quit (Ping timeout: 276 seconds)
2021-08-27 02:32:12	→	hsek[m] has joined #haskell
2021-08-27 02:32:34	→	Boarders has joined #haskell
2021-08-27 02:32:38	→	sudden has joined #haskell
2021-08-27 02:32:45	←	skn has quit (Ping timeout: 276 seconds)
2021-08-27 02:33:00	←	martin02 has quit (Ping timeout: 250 seconds)
2021-08-27 02:33:09	→	swistak has joined #haskell
2021-08-27 02:33:42	ℹ	Athas_ is now known as Athas
2021-08-27 02:34:45	←	takuan has quit (Remote host closed the connection)
2021-08-27 02:35:40	←	nitrix_ has quit (Changing host)
2021-08-27 02:35:40	→	nitrix_ has joined #haskell
2021-08-27 02:35:43	ℹ	nitrix_ is now known as nitrix
2021-08-27 02:36:58	←	doyougnu has quit (Read error: Connection reset by peer)
2021-08-27 02:37:17	→	alp has joined #haskell
2021-08-27 02:37:21	←	d0ku has quit (Ping timeout: 250 seconds)
2021-08-27 02:37:23	←	son0p has quit (Remote host closed the connection)
2021-08-27 02:37:50	aegon	well, fooey, the haskell symposium payment link doesn't work for me, does anyone know if any of it is going to be broadcast online?
2021-08-27 02:38:10	←	jtomas has quit (Ping timeout: 240 seconds)
2021-08-27 02:38:45	geekosaur	https://www.youtube.com/watch?v=sVrlaF7sCU4 I think?
2021-08-27 02:40:37	aegon	ooh, it stopped looping refresh on my browser. its wired, this isn't a odd browser (firefox)
2021-08-27 02:41:10	←	tfeb has quit (Quit: died)
2021-08-27 02:41:14	→	jtomas has joined #haskell
2021-08-27 02:41:22	aegon	 The faster,
2021-08-27 02:46:43	←	azeem has quit (Ping timeout: 252 seconds)
2021-08-27 02:46:55	→	peterhil has joined #haskell
2021-08-27 02:46:55	→	azeem has joined #haskell
2021-08-27 02:50:33	←	AWizzArd has quit (Ping timeout: 248 seconds)
2021-08-27 02:51:19	→	AWizzArd has joined #haskell
2021-08-27 02:54:13	←	eggplantade has quit (Remote host closed the connection)
2021-08-27 02:54:25	←	Erutuon has quit (Ping timeout: 252 seconds)
2021-08-27 02:54:26	→	gehmehgeh has joined #haskell
2021-08-27 02:58:40	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-27 02:59:13	→	azeem has joined #haskell
2021-08-27 02:59:47	→	[itchyjunk] has joined #haskell
2021-08-27 03:00:41	←	mikoto-c1 has quit (Ping timeout: 248 seconds)
2021-08-27 03:04:15	aegon	geekosaur: thanks, for whatever reason the payment site keeps directing me to a scetch looking site that continually refreshes and loops :? Sub'd to teh icpf channel and will catch them there. I'm interested in the linear type talks and seeing some applications of it. I'll have to catch it earlier next year
2021-08-27 03:05:31	←	fendor has quit (Remote host closed the connection)
2021-08-27 03:12:34	←	zer0bitz has quit (Ping timeout: 252 seconds)
2021-08-27 03:12:47	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-27 03:13:29	→	azeem has joined #haskell
2021-08-27 03:14:10	←	aplainze1akind has quit (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
2021-08-27 03:17:31	→	chisui has joined #haskell
2021-08-27 03:17:50	→	eggplantade has joined #haskell
2021-08-27 03:19:48	←	xff0x has quit (Ping timeout: 250 seconds)
2021-08-27 03:20:40	→	xff0x has joined #haskell
2021-08-27 03:21:50	→	Papa has joined #haskell
2021-08-27 03:22:44	←	__monty__ has quit (Quit: leaving)
2021-08-27 03:23:55	←	dhouthoo has quit (Quit: WeeChat 3.2)
2021-08-27 03:24:31	→	aplainzetakind has joined #haskell
2021-08-27 03:24:58	←	enoq has quit (Quit: enoq)
2021-08-27 03:25:09	←	aplainzetakind has quit (Client Quit)
2021-08-27 03:25:13	→	mikoto-c1 has joined #haskell
2021-08-27 03:25:35	←	Pickchea has quit (Quit: Leaving)
2021-08-27 03:28:33	←	azeem has quit (Read error: Connection reset by peer)
2021-08-27 03:28:52	→	azeem has joined #haskell
2021-08-27 03:33:28	→	aplainzetakind has joined #haskell
2021-08-27 03:33:45	←	lavaman has quit (Ping timeout: 248 seconds)
2021-08-27 03:34:31	←	dschrempf has quit (Quit: WeeChat 3.2)
2021-08-27 03:40:02	ℹ	wagle_ is now known as wagle
2021-08-27 03:41:19	←	vysn has quit (Remote host closed the connection)
2021-08-27 03:47:19	→	pavonia_ has joined #haskell
2021-08-27 03:47:40	→	merijn has joined #haskell
2021-08-27 03:48:12	←	pavonia has quit (Read error: Connection reset by peer)
2021-08-27 03:48:36	ℹ	pavonia_ is now known as pavonia
2021-08-27 03:49:02	monochrom	Oh w00t 8.10.7
2021-08-27 03:51:30	←	skykanin has quit (Quit: WeeChat 3.2)
2021-08-27 03:53:17	←	reumeth has quit (Ping timeout: 250 seconds)
2021-08-27 03:54:30	←	Athas has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-08-27 03:55:22	→	Athas has joined #haskell
2021-08-27 03:56:08	→	lavaman has joined #haskell
2021-08-27 03:57:01	←	raehik has quit (Quit: WeeChat 3.2)
2021-08-27 03:57:30	←	gehmehgeh has quit (Quit: Leaving)
2021-08-27 03:57:42	→	hannessteffenhag has joined #haskell
2021-08-27 03:58:55	→	raehik has joined #haskell
2021-08-27 04:02:58	ℹ	irc: disconnected from server
2021-08-27 14:54:23	→	oxide has joined #haskell
2021-08-27 14:54:23	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-27 14:54:23	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-27 14:54:23	ℹ	Channel #haskell: 726 nicks (1 op, 0 voices, 725 normals)
2021-08-27 14:54:24	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-27 14:56:00	→	gehmehgeh has joined #haskell
2021-08-27 15:03:06	←	Erutuon has quit (Ping timeout: 240 seconds)
2021-08-27 15:04:24	←	azeem has quit (Ping timeout: 248 seconds)
2021-08-27 15:05:12	→	azeem has joined #haskell
2021-08-27 15:05:46	→	Katarushisu has joined #haskell
2021-08-27 15:11:26	←	lortabac has quit (Read error: Connection reset by peer)
2021-08-27 15:12:01	→	lortabac has joined #haskell
2021-08-27 15:12:18	←	nilof has quit (Ping timeout: 250 seconds)
2021-08-27 15:15:57	→	nilof has joined #haskell
2021-08-27 15:20:56	←	hannessteffenhag has quit (Ping timeout: 248 seconds)
2021-08-27 15:22:40	→	merijn has joined #haskell
2021-08-27 15:25:22	Guest55	I have a function `next:: (Int, Hashtable s k v) -> ST s (Int, Hashtable s k v)` I want to do something like `(!! 10) $ iterate (>>= next)  (1,mybook)` where `mybook :: Hashtable s k v` (this is inside a `do` block). But this gives me an error saying `type variable s would escape its scope`. Why is this happening?
2021-08-27 15:27:15	←	burnside_ has quit (Remote host closed the connection)
2021-08-27 15:28:47	Guest55	Umm I made an error in the question. Ignore the question, sorry 
2021-08-27 15:36:09	←	azeem has quit (Ping timeout: 252 seconds)
2021-08-27 15:36:44	→	hannessteffenhag has joined #haskell
2021-08-27 15:37:09	←	Kaiepi has quit (Ping timeout: 240 seconds)
2021-08-27 15:37:23	→	azeem has joined #haskell
2021-08-27 15:41:06	←	hannessteffenhag has quit (Ping timeout: 252 seconds)
2021-08-27 15:42:41	→	pfurla has joined #haskell
2021-08-27 15:43:53	→	zer0bitz has joined #haskell
2021-08-27 15:45:24	←	hendursa1 has quit (Remote host closed the connection)
2021-08-27 15:45:30	←	pfurla_ has quit (Ping timeout: 252 seconds)
2021-08-27 15:45:47	→	hendursa1 has joined #haskell
2021-08-27 15:48:50	siers	Ollie[m], I didn't get to the :~: part yet, but it's a very nice paper in other regards as well, thanks!
2021-08-27 15:49:02	Gurkenglas	absurd (error "asd") prints asd, but hasnt absurd no pattern match?
2021-08-27 15:49:21	←	kayprish has quit (Remote host closed the connection)
2021-08-27 15:50:05	Gurkenglas	(I tried to ghci debug, but :set -fbreak-on-exception into :trace absurd (error "asd") into :back into :list just recommends the same rerun o.o
2021-08-27 15:50:41	Guest55	I have an inf list `[ST s (Int, Int)]` I want to extract the first element of this list that satisfies a condition. I initially tried using `sequence` and then `head . dropWhile` but sequence does not work with infinite lists I guess. What are the alternatives?
2021-08-27 15:50:56	Ollie[m]	siers: Good stuff! All Richard's papers are worth a read, probably!
2021-08-27 15:54:00	→	hannessteffenhag has joined #haskell
2021-08-27 15:56:26	←	merijn has quit (Ping timeout: 240 seconds)
2021-08-27 15:58:09	←	hannessteffenhag has quit (Ping timeout: 240 seconds)
2021-08-27 16:00:20	→	__monty__ has joined #haskell
2021-08-27 16:02:13	→	burnsidesLlama has joined #haskell
2021-08-27 16:02:33	→	Kaiepi has joined #haskell
2021-08-27 16:06:26	←	burnsidesLlama has quit (Ping timeout: 240 seconds)
2021-08-27 16:07:57	ℹ	irc: disconnected from server
2021-08-27 17:27:08	→	oxide has joined #haskell
2021-08-27 17:27:08	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-27 17:27:08	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-27 17:27:08	ℹ	Channel #haskell: 733 nicks (1 op, 0 voices, 732 normals)
2021-08-27 17:27:08	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-27 17:28:39	←	markpythonicbtc has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-08-27 17:32:57	→	Codaraxis_ has joined #haskell
2021-08-27 17:33:08	←	xff0x has quit (Ping timeout: 250 seconds)
2021-08-27 17:34:13	→	xff0x has joined #haskell
2021-08-27 17:36:40	←	Codaraxis__ has quit (Ping timeout: 240 seconds)
2021-08-27 17:39:13	Drew[m]	dminuoso: There's no reason to accumulate a log, from what I can tell. You can consume it piecewise so it is garbage collected as you go
2021-08-27 17:41:00	Drew[m]	I wrote a little demo to convince myself the log was still produced lazily
2021-08-27 17:41:10	→	acidjnk_new has joined #haskell
2021-08-27 17:41:26	Drew[m]	https://paste.tomsmeding.com/gOFJYdLg
2021-08-27 17:42:03	dminuoso	Drew[m]: And you need MonadBaseControl for unlifting. What about log entries produced in `catch`?
2021-08-27 17:42:36	dminuoso	Drew[m]: And that doesnt prove something.
2021-08-27 17:42:59	→	dschrempf has joined #haskell
2021-08-27 17:43:01	dminuoso	lazily producing is something different from streaming
2021-08-27 17:43:14	←	geekosaur has quit (Killed (NickServ (GHOST command used by allbery_b)))
2021-08-27 17:43:16	Gurkenglas	They say you can't have ((a -> Void) -> Void) -> a. But you can do ((a -> Void) -> Void) -> IO a by catch . ($throw). Does this unlock great powers? :)
2021-08-27 17:43:17	→	allbery_b has joined #haskell
2021-08-27 17:43:20	ℹ	allbery_b is now known as geekosaur
2021-08-27 17:43:29	dminuoso	Using lazyness to stream logs, while perhaps it can work, it's just not worth the headaches you get in debugging when it doesnt work
2021-08-27 17:44:01	dminuoso	With LoggingT you *know* you have no space leaks, and that logging happens *exactly* when you want it.
2021-08-27 17:44:07	dminuoso	With WriterT you have no clue when logging actually happens.
2021-08-27 17:44:24	←	acidjnk has quit (Ping timeout: 250 seconds)
2021-08-27 17:44:37	dminuoso	It happens separate, later.
2021-08-27 17:44:48	dminuoso	WriterT is just not a good fit for logs for so many reasons.
2021-08-27 17:45:21	ℹ	Ananta-shesha is now known as ArcticVaultETMar
2021-08-27 17:45:38	ℹ	ArcticVaultETMar is now known as ArcticVauETMarsH
2021-08-27 17:45:38	dminuoso	Consider something like:
2021-08-27 17:45:48	ℹ	ArcticVauETMarsH is now known as ArcticVauMarsHel
2021-08-27 17:45:51	ℹ	ArcticVauMarsHel is now known as ArcticVauMarsHPJ
2021-08-27 17:46:03	ℹ	ArcticVauMarsHPJ is now known as ArctVaultMarsHMP
2021-08-27 17:46:33	ℹ	ArctVaultMarsHMP is now known as ArctVaulMarsHMPJ
2021-08-27 17:46:48	dminuoso	`tell "Deleting file" >> deleteFile "someFile"` 
2021-08-27 17:47:03	←	raehik has quit (Ping timeout: 252 seconds)
2021-08-27 17:47:22	dminuoso	When will the outside consumer of this log pop that entry? You dont know and cant control it.
2021-08-27 17:48:52	→	raehik has joined #haskell
2021-08-27 17:53:18	→	merijn has joined #haskell
2021-08-27 17:53:37	→	slowButPresent has joined #haskell
2021-08-27 17:57:25	→	chisui has joined #haskell
2021-08-27 17:58:48	←	hyiltiz has quit (Ping timeout: 248 seconds)
2021-08-27 17:58:53	→	markpythonicbtc has joined #haskell
2021-08-27 18:00:10	←	raehik has quit (Ping timeout: 240 seconds)
2021-08-27 18:01:26	→	neo1 has joined #haskell
2021-08-27 18:01:40	←	mastarija has quit (Ping timeout: 240 seconds)
2021-08-27 18:02:25	→	hyiltiz has joined #haskell
2021-08-27 18:08:34	→	raehik has joined #haskell
2021-08-27 18:08:48	→	favonia has joined #haskell
2021-08-27 18:08:56	Drew[m]	fair 
2021-08-27 18:14:44	←	raehik has quit (Ping timeout: 250 seconds)
2021-08-27 18:15:51	←	azeem has quit (Ping timeout: 245 seconds)
2021-08-27 18:16:42	→	renzhi has joined #haskell
2021-08-27 18:17:47	→	azeem has joined #haskell
2021-08-27 18:19:52	→	shriekingnoise has joined #haskell
2021-08-27 18:27:38	←	merijn has quit (Ping timeout: 250 seconds)
2021-08-27 18:29:07	←	aman has quit (Ping timeout: 240 seconds)
2021-08-27 18:29:27	←	cheater has quit (Ping timeout: 240 seconds)
2021-08-27 18:33:57	←	derelict has quit (Quit: WeeChat 3.2)
2021-08-27 18:35:45	←	Codaraxis_ has quit (Remote host closed the connection)
2021-08-27 18:36:10	→	Codaraxis_ has joined #haskell
2021-08-27 18:38:08	←	burnside_ has quit (Remote host closed the connection)
2021-08-27 18:39:16	→	cheater has joined #haskell
2021-08-27 18:39:52	→	burnsidesLlama has joined #haskell
2021-08-27 18:40:09	←	nschoe has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-08-27 18:42:01	←	burnsidesLlama has quit (Remote host closed the connection)
2021-08-27 18:45:32	→	eggplantade has joined #haskell
2021-08-27 18:46:13	←	lua has quit (Quit: WeeChat 2.8)
2021-08-27 18:49:40	←	eggplantade has quit (Ping timeout: 240 seconds)
2021-08-27 18:51:31	←	Guest55 has quit (Quit: Client closed)
2021-08-27 18:52:08	→	burnsidesLlama has joined #haskell
2021-08-27 18:52:30	←	burnsidesLlama has quit (Remote host closed the connection)
2021-08-27 18:52:57	→	burnsidesLlama has joined #haskell
2021-08-27 18:57:02	←	FragByte has quit (Quit: Quit)
2021-08-27 18:57:10	←	burnsidesLlama has quit (Ping timeout: 240 seconds)
2021-08-27 18:58:52	→	FragByte has joined #haskell
2021-08-27 18:59:07	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-27 18:59:53	→	azeem has joined #haskell
2021-08-27 19:00:22	→	[itchyjunk] has joined #haskell
2021-08-27 19:02:39	←	t3hyoshi has quit (Quit: Konversation terminated!)
2021-08-27 19:03:34	→	Sgeo has joined #haskell
2021-08-27 19:04:22	→	hololeap has joined #haskell
2021-08-27 19:07:50	→	Neuromancer has joined #haskell
2021-08-27 19:08:21	←	haykam has quit (Remote host closed the connection)
2021-08-27 19:08:35	→	haykam has joined #haskell
2021-08-27 19:14:00	←	qbt has quit (Ping timeout: 248 seconds)
2021-08-27 19:15:50	kuribas	When do you use a list comprehension, instead of list monad?
2021-08-27 19:16:06	kuribas	maybe to avoid the extra "pure"?
2021-08-27 19:16:24	Hecate	kuribas: list comprehensions are implemented with list monad
2021-08-27 19:17:01	dminuoso	kuribas: Mmm, hard to say.
2021-08-27 19:17:12	dminuoso	I tend to prefer do-notation actually
2021-08-27 19:17:31	kuribas	then it's mostly redundant syntactic sugar?
2021-08-27 19:19:01	[exa]	kuribas: list comprehension removes `guard`, do-syntax is better if there's more conditions or complicated return that's best "explained" at the end instead of at the beginning
2021-08-27 19:19:18	dminuoso	[exa]: they dont remove guard.
2021-08-27 19:19:26	→	Guest48 has joined #haskell
2021-08-27 19:19:30	→	dhouthoo has joined #haskell
2021-08-27 19:19:43	[exa]	well you don't need to type `guard` in there right?
2021-08-27 19:19:52	dminuoso	% [ x | x <- [1,2,3], x > 2 ]
2021-08-27 19:19:53	yahb	dminuoso: [3]
2021-08-27 19:19:58	dminuoso	@undo [ x | x <- [1,2,3], x > 2 ]
2021-08-27 19:19:58	lambdabot	concatMap (\ x -> if x > 2 then [x] else []) [1, 2, 3]
2021-08-27 19:20:00	Hecate	kuribas: is it redundant if it improves readability? ;)
2021-08-27 19:20:08	dminuoso	Mmm, well.
2021-08-27 19:20:10	dminuoso	This is just guard.
2021-08-27 19:20:13	[exa]	dminuoso: yeah
2021-08-27 19:20:18	kuribas	Hecate: no, but it's debatable...
2021-08-27 19:20:45	←	Guest48 has quit (Quit: Client closed)
2021-08-27 19:20:47	[exa]	kuribas: one difference is that with `do` syntax you might get a Monad constraint with polymorphic type, which in cases might not be the way you want
2021-08-27 19:21:05	[exa]	ie when relying on memoization
2021-08-27 19:21:31	[exa]	(s/ie/eg/  whoops)
2021-08-27 19:22:13	←	ArctVaulMarsHMPJ has quit (Quit: EXIT)
2021-08-27 19:22:13	kuribas	[exa]: how so?
2021-08-27 19:22:48	[exa]	if you don't explicitly bind a list, the monad type may stay undecided
2021-08-27 19:23:13	kuribas	hmm, right
2021-08-27 19:23:44	kuribas	perhaps do notation came after comprehensions?
2021-08-27 19:24:32	Drew[m]	Comprehensions predate the whole language IIRC
2021-08-27 19:24:48	[exa]	not sure but likely, given the original haskell had lazy lists for IO
2021-08-27 19:25:06	kuribas	if you think of set notation as comprehensions...
2021-08-27 19:25:07	dminuoso	at the end, list comprehensions are just an adaption of set builder syntax in math
2021-08-27 19:25:30	dminuoso	If you squint a bit, <- even looks similar to ∈
2021-08-27 19:25:44	[exa]	kuribas: also check out MonadComprehensions
2021-08-27 19:26:07	←	arjun has quit (Ping timeout: 240 seconds)
2021-08-27 19:26:17	[exa]	isn't there any SQL package that would build SQL queries from this?
2021-08-27 19:26:41	→	fendor_ has joined #haskell
2021-08-27 19:26:51	Rembane_	Sounds a bit like Selda. 
2021-08-27 19:27:33	[exa]	we actually used selda, but never reached that far
2021-08-27 19:27:38	kuribas	[exa]: my query builder is a monad, so it would work with monad comprehensions :)
2021-08-27 19:28:16	[exa]	good, good, more set notation!    (*laughs in godel numerals*)
2021-08-27 19:28:20	Hecate	https://github.com/tchoutri/pg-entity <- my query builder is a bit simpler 
2021-08-27 19:29:10	←	fendor has quit (Ping timeout: 240 seconds)
2021-08-27 19:29:39	Drew[m]	kuribas: You don't even need to go back to set builder notation. Miranda had list comprehensions, and Haskell was heavily inspired by that.
2021-08-27 19:30:34	kuribas	[exa]: I cannot see much reason motivate using monad comprehensions.
2021-08-27 19:30:39	→	mastarija has joined #haskell
2021-08-27 19:30:44	kuribas	Hecate: you query builder is just SQL :)
2021-08-27 19:30:56	kuribas	Hecate: but then, does it compose?
2021-08-27 19:31:29	kuribas	Hecate: "It is my personal belief, firmly rooted in experience, that we should not aim to produce statically-checked SQL and have it "verified" by the compiler. "
2021-08-27 19:31:33	kuribas	Hecate: I very much agree :)
2021-08-27 19:31:43	Hecate	:)
2021-08-27 19:32:34	Hecate	you can't arbitrarily compose it, because it's made for capturing wider patterns, rather than spewing SQL from an eDSL
2021-08-27 19:32:37	Hecate	:D
2021-08-27 19:32:46	Hecate	(which makes it simpler to develop and test)
2021-08-27 19:32:51	[exa]	kuribas: what about: [(userID x, tweet x) | x <- tweets, y <- friendsOf user, userId x `in` userId y]
2021-08-27 19:33:12	kuribas	Hecate: I find being able to type check the types of columns and table very useful though.
2021-08-27 19:34:34	kuribas	[exa]: do x <- tweets; y <- friendsOf user; guard $ userId x `in` userId y; pure (userID x, tweet x)
2021-08-27 19:35:13	[exa]	kuribas: yeah ofcourse, but reads less like SELECT ... FROM ... WHERE ...
2021-08-27 19:35:25	kuribas	ah right...
2021-08-27 19:35:31	[exa]	not that it would be wrong tho
2021-08-27 19:37:06	kuribas	doesn't f# has this kind of syntax?
2021-08-27 19:37:11	kuribas	or C# even...
2021-08-27 19:38:05	kuribas	ah f# has query expressions, C# linq
2021-08-27 19:39:23	kuribas	https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/query-expressions
2021-08-27 19:43:28	←	zaquest has quit (Remote host closed the connection)
2021-08-27 19:43:39	←	azeem has quit (Ping timeout: 252 seconds)
2021-08-27 19:46:29	→	zaquest has joined #haskell
2021-08-27 19:46:57	←	vpan has quit (Ping timeout: 252 seconds)
2021-08-27 19:48:26	hololeap	shouldn't this short-circuit when i==6 ? foldMap (\i -> if i > 5 then Just (First i) else Nothing) [0..]
2021-08-27 19:48:34	→	burnsidesLlama has joined #haskell
2021-08-27 19:50:09	→	wroathe has joined #haskell
2021-08-27 19:50:10	←	wroathe has quit (Changing host)
2021-08-27 19:50:10	→	wroathe has joined #haskell
2021-08-27 19:50:23	janus	> foldMap (\i -> if i > 5 then Just (First i) else Nothing) [0..]
2021-08-27 19:50:25	lambdabot	 error:
2021-08-27 19:50:25	lambdabot	     Ambiguous occurrence ‘First’
2021-08-27 19:50:25	lambdabot	     It could refer to
2021-08-27 19:50:30	[exa]	hololeap: you seem to imply that all numbers that come after 5 are larger than 5
2021-08-27 19:50:35	[exa]	:]
2021-08-27 19:51:11	int-e	> First 1
2021-08-27 19:51:12	hololeap	[exa]: it's more that I expected First to short-circuit it somehow when it hits its first `Just (First Int)` result
2021-08-27 19:51:13	lambdabot	 error:
2021-08-27 19:51:13	lambdabot	     • No instance for (Num (Maybe ())) arising from a use of ‘e_11’
2021-08-27 19:51:13	lambdabot	     • In the expression: e_11
2021-08-27 19:51:14	janus	aaah
2021-08-27 19:51:19	janus	so you'd need to map first in first ?
2021-08-27 19:51:21	int-e	> First (Just 1)
2021-08-27 19:51:23	lambdabot	 First {getFirst = Just 1}
2021-08-27 19:51:26	←	MQ-17J has quit (Ping timeout: 240 seconds)
2021-08-27 19:51:34	hololeap	(this is Data.Semigroup.First, btw)
2021-08-27 19:51:36	[exa]	hololeap: ah so I see that now
2021-08-27 19:51:39	janus	then foldMap wouldn't need to know about monotonic properties of the sequence
2021-08-27 19:51:41	kuribas	:t First
2021-08-27 19:51:42	lambdabot	Maybe a -> First a
2021-08-27 19:52:04	kuribas	> foldMap (\i -> if i > 5 then Just (First i) else Nothing) [0::Int..]
2021-08-27 19:52:06	lambdabot	 <hint>:1:63: error: Operator applied to too few arguments: Int..
2021-08-27 19:52:13	→	martin02 has joined #haskell
2021-08-27 19:52:28	kuribas	Looks like a type error...
2021-08-27 19:52:34	hololeap	% f = foldMap (\i -> if i > 5 then Just (Data.Semigroup.First i) else Nothing)
2021-08-27 19:52:35	yahb	hololeap: 
2021-08-27 19:52:40	hololeap	% :t f
2021-08-27 19:52:41	yahb	hololeap: (Foldable t, Ord a, Num a) => t a -> Maybe (Data.Semigroup.First a)
2021-08-27 19:52:48	hololeap	% f [0..]
2021-08-27 19:52:51	yahb	hololeap: *** Exception: heap overflow
2021-08-27 19:53:06	←	burnsidesLlama has quit (Ping timeout: 250 seconds)
2021-08-27 19:53:12	janus	% f [0..10]
2021-08-27 19:53:14	yahb	janus: Just (First {getFirst = 6})
2021-08-27 19:53:47	geekosaur	beware of that, "Int.." is parsed as operator (.) in module Int
2021-08-27 19:54:07	kuribas	> foldMap (\i -> if i > 5 then Just (Data.Semigroup.First i) else Nothing) [0::Expr .. 6]
2021-08-27 19:54:09	lambdabot	 error:
2021-08-27 19:54:10	lambdabot	     Not in scope: data constructor ‘Data.Semigroup.First’
2021-08-27 19:54:10	lambdabot	     No module named ‘Data.Semigroup’ is imported.
2021-08-27 19:54:27	←	hannessteffenhag has quit (Ping timeout: 240 seconds)
2021-08-27 19:54:36	janus	bummer that yahb doesn't have Expr
2021-08-27 19:54:47	←	nilof has quit (Ping timeout: 240 seconds)
2021-08-27 19:54:48	[exa]	hololeap: don't you need foldMap' ?
2021-08-27 19:55:18	→	MQ-17J has joined #haskell
2021-08-27 19:55:22	[exa]	foldMap doc says it's left-associative, so it looks to me that it can't short-circuit
2021-08-27 19:56:03	[exa]	oh no I'm reading the wrong docs :D
2021-08-27 19:56:25	hololeap	% f' = foldMap' (\i -> if i > 5 then Just (Data.Semigroup.First i) else Nothing)
2021-08-27 19:56:26	yahb	hololeap: 
2021-08-27 19:56:32	hololeap	% f' [0..]
2021-08-27 19:56:35	yahb	hololeap: *** Exception: heap overflow
2021-08-27 19:57:19	←	mikoto-c1 has quit (Quit: mikoto-c1)
2021-08-27 19:57:39	→	mikoto-chan has joined #haskell
2021-08-27 19:58:45	int-e	hololeap: Just (First 0) <> undefined  doesn't short-cut, at which point you've lost already. The reason being, the Monoid instance for Maybe doesn't know that the inner monoid has short-cutting capabilities.
2021-08-27 19:59:17	int-e	> Just [1] <> Nothing <> Just [2] -- you can't stop at Nothing
2021-08-27 19:59:18	lambdabot	 Just [1,2]
2021-08-27 19:59:52	Taneb	> First 0 <> undefined
2021-08-27 19:59:54	lambdabot	 error:
2021-08-27 19:59:54	lambdabot	     • No instance for (Num (Maybe ())) arising from a use of ‘e_10’
2021-08-27 19:59:54	lambdabot	     • In the expression: e_10
2021-08-27 20:00:00	hololeap	% Data.Monoid.First (Just 4) <> undefined
2021-08-27 20:00:02	yahb	hololeap: *** Exception: heap overflow
2021-08-27 20:00:26	hololeap	% 4
2021-08-27 20:00:27	yahb	hololeap: 4
2021-08-27 20:00:35	int-e	@let import qualified Data.Semigroup
2021-08-27 20:00:36	lambdabot	 Defined.
2021-08-27 20:00:39	int-e	> Data.Semigroup.First 1 <> undefined
2021-08-27 20:00:41	lambdabot	 First {getFirst = 1}
2021-08-27 20:01:12	janus	> foldMap (\i -> if i > 5 then Just (Data.Semigroup.First i) else Nothing) [0::Expr .. 6]
2021-08-27 20:01:14	lambdabot	 Just (First {getFirst = 6})
2021-08-27 20:01:15	←	dschrempf has quit (Ping timeout: 252 seconds)
2021-08-27 20:01:39	hololeap	well, it looks like First from Data.Monoid is what I want, then
2021-08-27 20:01:47	int-e	Oh I misread the test (i > 5), my bad.
2021-08-27 20:01:50	jippiedoe	Ah, I think I know! The Monoid instance for Maybe forces the right element
2021-08-27 20:02:19	jippiedoe	..and while I checked that int-e already said so too :)
2021-08-27 20:02:27	[exa]	sneaky how First is supposed to contain the Maybe inside.
2021-08-27 20:02:52	hololeap	int-e: thanks for pointing that out. Data.Monoid.First doesn't have this behavior, this returns First (Just 4): Data.Maybe.First (Just 4) <> undefined
2021-08-27 20:03:12	janus	so if one used a naive Maybe and made a First for that, it would work?
2021-08-27 20:03:27	int-e	[exa]: yeah but this question explains why that is, really.
2021-08-27 20:04:01	←	markpythonicbtc has quit (Ping timeout: 252 seconds)
2021-08-27 20:04:09	[exa]	yeah
2021-08-27 20:04:52	→	derelict has joined #haskell
2021-08-27 20:05:38	→	nilof has joined #haskell
2021-08-27 20:05:43	janus	why does Maybe force the right argument?
2021-08-27 20:05:57	janus	(for mappend) ?
2021-08-27 20:06:02	int-e	janus: because Just x <> Just y = Just (x <> y)
2021-08-27 20:06:14	→	dschrempf has joined #haskell
2021-08-27 20:06:18	int-e	you can't get that without inspecting the right argument
2021-08-27 20:06:53	int-e	(generically, without knowing anything about the inner <>)
2021-08-27 20:06:54	janus	oh, i thought there was some strictness hack. but it actually needs the value
2021-08-27 20:07:07	←	notzmv has quit (Ping timeout: 240 seconds)
2021-08-27 20:08:45	hololeap	int-e, so it seems like this behavior would also arise for other types that "inherit" their contents' Semigroup instance, such as (,)
2021-08-27 20:09:44	hololeap	(x1,y1) <> (x2,y2) = (x1<>x2, y1<>y2) -- it has to inspect the right argument here, too
2021-08-27 20:10:11	→	azeem has joined #haskell
2021-08-27 20:11:10	janus	hmmm, if Ord was written with a max/min interface instead of relying on its own types, i wonder if the example with Expr could be illustrative
2021-08-27 20:11:11	int-e	hololeap: Right, the actual implementation (from GHC.Base of all places... interesting) is (a,b) <> (a',b') = (a<>a',b<>b')
2021-08-27 20:11:37	→	hannessteffenhag has joined #haskell
2021-08-27 20:11:45	int-e	hololeap: one /could/ get away with ~(a,b) <> ~(a',b') = (a<>a',b<>b') here, but it's probably a bad trade-off (performance for extra laziness)
2021-08-27 20:12:31	janus	surely an interface  "class Ord where min :: (a,a) -> a" should be equivalent to what standard Ord provides?
2021-08-27 20:12:42	int-e	And in any case this use of irrefutable patterns only works for single constructor types.
2021-08-27 20:12:43	hololeap	ultimately, I'm running a fold that accumulates something like (Maybe X, Maybe Y), and I want it to short-circuit as soon as the accumulator hits (Just X, Just Y)
2021-08-27 20:13:12	←	MQ-17J has quit (Ping timeout: 248 seconds)
2021-08-27 20:13:17	hololeap	and I thought maybe I could glue something together out of pieces from Data.Monoid and Data.Semigroup
2021-08-27 20:13:21	←	acidjnk_new has quit (Ping timeout: 245 seconds)
2021-08-27 20:13:45	int-e	janus: that's... horrible.
2021-08-27 20:14:00	int-e	:t min
2021-08-27 20:14:01	lambdabot	Ord a => a -> a -> a
2021-08-27 20:14:06	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-27 20:14:39	int-e	the thought of computing  x <= y  as  min x y == x  makes me cringe.
2021-08-27 20:14:52	janus	int-e: but it works better with Expr , no ? ;)
2021-08-27 20:15:06	int-e	> let xs = [1..]; ys = [2..] in xs < ys
2021-08-27 20:15:08	lambdabot	 True
2021-08-27 20:15:16	int-e	> let xs = [1..]; ys = [2..] in min xs ys == xs
2021-08-27 20:15:22	lambdabot	 mueval-core: Time limit exceeded
2021-08-27 20:15:28	int-e	so that's a hard no
2021-08-27 20:15:51	sszark2	What does c signify in this expression? `c <- [1..10], b <- [1..c]`
2021-08-27 20:15:56	janus	i made no claim about infinite lists ;)
2021-08-27 20:16:06	←	hannessteffenhag has quit (Ping timeout: 252 seconds)
2021-08-27 20:16:09	ℹ	sszark2 is now known as sszark
2021-08-27 20:16:09	dminuoso	sszark2: This is not a full expression.
2021-08-27 20:16:10	int-e	sszark2: that's not an expression. it's probably part of a list comprehension
2021-08-27 20:16:11	←	[itchyjunk] has quit (Remote host closed the connection)
2021-08-27 20:16:34	←	cfricke has quit (Quit: WeeChat 3.2)
2021-08-27 20:16:42	int-e	sszark: where intuitively, c <- [1..10] makes c (a fresh variable at that point) range over the elements of [1..10]
2021-08-27 20:17:03	janus	i really just wanted to ponder whether an alternate ord could be defined such that it would work for the [0::Expr .. 6] example above
2021-08-27 20:17:58	→	MQ-17J has joined #haskell
2021-08-27 20:18:25	int-e	janus: well, no. you don't even get out of that problem, because you'll still need (==), and (==) :: Expr -> Expr -> Bool runs into the same problem that you wanted to avoid.
2021-08-27 20:18:38	mastarija	Do we have some kind of reader monad in base or is it necessary to use transformers package?
2021-08-27 20:18:44	sszark	So c just makes the range for b the same length as c here?
2021-08-27 20:19:19	mastarija	I want to use doctest, and write an example with a reader monad, but I don't want to include transformers package just for that.
2021-08-27 20:19:29	int-e	sszark: yes. it's enumerating c,b with 1 <= b <= c <= 10
2021-08-27 20:19:41	janus	int-e: damn, gotta make a continuation based Eq also then... :P
2021-08-27 20:19:47	maerwald	mastarija: yes ((->) r)
2021-08-27 20:20:09	janus	purge all bools
2021-08-27 20:20:12	mastarija	oh.. right, function is monad
2021-08-27 20:20:24	int-e	janus: This may be too high a price to pay for solving the Expr.. problem.
2021-08-27 20:20:34	janus	there are no limits to my masochism
2021-08-27 20:20:56	int-e	> map fromIntegral [1..6] :: [Expr]
2021-08-27 20:20:58	lambdabot	 [1,2,3,4,5,6]
2021-08-27 20:21:54	→	azeem has joined #haskell
2021-08-27 20:23:21	→	hannessteffenhag has joined #haskell
2021-08-27 20:23:31	→	notzmv has joined #haskell
2021-08-27 20:23:57	→	merijn has joined #haskell
2021-08-27 20:25:55	←	gehmehgeh has quit (Quit: Leaving)
2021-08-27 20:26:47	←	peterhil has quit (Ping timeout: 240 seconds)
2021-08-27 20:27:36	←	epolanski has quit (Quit: Connection closed for inactivity)
2021-08-27 20:27:57	←	jippiedoe has quit (Quit: Leaving)
2021-08-27 20:30:46	→	lavaman has joined #haskell
2021-08-27 20:31:50	→	hnOsmium0001 has joined #haskell
2021-08-27 20:32:51	→	vpan has joined #haskell
2021-08-27 20:33:47	←	xff0x has quit (Ping timeout: 240 seconds)
2021-08-27 20:34:57	→	xff0x has joined #haskell
2021-08-27 20:35:06	←	notzmv has quit (Ping timeout: 240 seconds)
2021-08-27 20:37:00	→	notzmv has joined #haskell
2021-08-27 20:38:04	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-08-27 20:38:06	←	bitdex has quit (Quit: = "")
2021-08-27 20:38:15	→	MQ-17J has joined #haskell
2021-08-27 20:38:39	→	ziman has joined #haskell
2021-08-27 20:40:20	ziman	hello! I have a typeclass (Serialise metadata a), where I'd like instances to depend only on `a`, i.e. make it impossible that `metadata` could affect the serialisation procedure.
2021-08-27 20:40:42	ziman	i'd like to mark `metadata` as irrelevant in some way but is that possible in Haskell?
2021-08-27 20:40:58	ziman	fundeps don't do what i want because i want instances to work for arbitrary `metadata` for any single `a`
2021-08-27 20:41:12	timCF	ziman: why it's needed in class definition then?
2021-08-27 20:42:30	←	MQ-17J has quit (Ping timeout: 250 seconds)
2021-08-27 20:43:14	ziman	no behaviour depends on it, it is only used to express that this typeclass is not available for some `metadata`, so not all instances are universally quantified over `metadata`; some instances exist only for one `metadata` value
2021-08-27 20:45:09	c_wraith	Well then, the type *does* affect the process, in that it's just not available for some types.
2021-08-27 20:45:37	c_wraith	Haskell makes classes open.  It's always assumed another module could add another instance
2021-08-27 20:46:18	ziman	the typeclass contains a method called toBS, which converts the type to bytestring
2021-08-27 20:46:23	→	MQ-17J has joined #haskell
2021-08-27 20:46:25	c_wraith	So the compiler has to assume the type does impact the functionality
2021-08-27 20:46:27	ziman	i'd like to express that the result of toBS cannot depend on the metadata
2021-08-27 20:46:31	←	hendursa1 has quit (Quit: hendursa1)
2021-08-27 20:46:41	c_wraith	But you've just said it can
2021-08-27 20:47:03	→	hendursaga has joined #haskell
2021-08-27 20:47:05	←	pavonia has quit (Quit: Bye!)
2021-08-27 20:47:05	c_wraith	In that if the metadata type is wrong, you can't call it
2021-08-27 20:47:14	c_wraith	that is a dependency
2021-08-27 20:47:15	→	eggplantade has joined #haskell
2021-08-27 20:48:29	c_wraith	Maybe you want to split the class in two?  One class without the metadata type involved, one class with?
2021-08-27 20:49:08	c_wraith	You could have the class with the metadata depend on the one without, so you'd only need to write that one in type signatures
2021-08-27 20:49:39	ziman	hmmm
2021-08-27 20:49:40	←	dsrt^ has quit (Ping timeout: 240 seconds)
2021-08-27 20:50:56	hololeap	@hoogle (Maybe a, Maybe b) -> Maybe (a,b)
2021-08-27 20:50:57	lambdabot	No results found
2021-08-27 20:51:40	←	eggplantade has quit (Ping timeout: 240 seconds)
2021-08-27 20:51:47	c_wraith	:t uncurry $ liftA2 (,)
2021-08-27 20:51:47	→	neo2 has joined #haskell
2021-08-27 20:51:48	lambdabot	Applicative f => (f a, f b) -> f (a, b)
2021-08-27 20:51:55	ziman	thanks, i'll think about it
2021-08-27 20:52:12	ziman	maybe one just can't do it in haskell
2021-08-27 20:52:34	c_wraith	Haskell makes assumptions about instances that makes restricting them difficult
2021-08-27 20:52:57	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-08-27 20:53:14	→	MQ-17J has joined #haskell
2021-08-27 20:53:54	→	doyougnu has joined #haskell
2021-08-27 20:54:30	←	nilof has quit (Read error: Connection reset by peer)
2021-08-27 20:54:47	→	nilof has joined #haskell
2021-08-27 20:55:09	←	neo1 has quit (Ping timeout: 252 seconds)
2021-08-27 20:58:27	←	merijn has quit (Ping timeout: 252 seconds)
2021-08-27 20:59:09	→	eggplantade has joined #haskell
2021-08-27 20:59:18	←	hannessteffenhag has quit (Ping timeout: 250 seconds)
2021-08-27 21:03:14	→	hexfive has joined #haskell
2021-08-27 21:04:50	ℹ	glider_ is now known as glider
2021-08-27 21:09:50	←	eggplantade has quit (Remote host closed the connection)
2021-08-27 21:10:16	←	martin02 has quit (Ping timeout: 248 seconds)
2021-08-27 21:10:45	→	asthasr has joined #haskell
2021-08-27 21:11:47	→	raehik has joined #haskell
2021-08-27 21:14:46	→	waleee has joined #haskell
2021-08-27 21:14:50	←	jakalx has left #haskell
2021-08-27 21:15:31	→	hannessteffenhag has joined #haskell
2021-08-27 21:16:59	→	jakalx has joined #haskell
2021-08-27 21:17:13	←	Skyfire has quit (Quit: WeeChat 3.2)
2021-08-27 21:18:54	←	dajoer has quit (Quit: leaving)
2021-08-27 21:20:09	←	hexfive has quit (Quit: WeeChat 3.0.1)
2021-08-27 21:20:14	→	argento has joined #haskell
2021-08-27 21:21:04	←	hannessteffenhag has quit (Ping timeout: 250 seconds)
2021-08-27 21:21:35	→	Guest55 has joined #haskell
2021-08-27 21:21:44	←	egoist has quit (Quit: WeeChat 3.2)
2021-08-27 21:21:50	←	hendursaga has quit (Remote host closed the connection)
2021-08-27 21:21:52	Guest55	hey
2021-08-27 21:22:18	→	hendursaga has joined #haskell
2021-08-27 21:22:47	←	lortabac has quit (Quit: WeeChat 2.8)
2021-08-27 21:23:00	←	cheater has quit (Remote host closed the connection)
2021-08-27 21:23:51	Guest55	i wanna find the longest truthiness sequence [False, False, True, True, False, True, False, False, True, True, True, True, False, False, True, True]. 
2021-08-27 21:24:04	Guest55	the starting point and length of it
2021-08-27 21:24:26	Guest55	everything i come up with looks messy. any ideas?
2021-08-27 21:25:00	c_wraith	are you allowed to use stuff from Data.List?
2021-08-27 21:25:09	Guest55	ye sure
2021-08-27 21:25:21	c_wraith	> group [False, False, True, True, False, True, False, False, True, True, True, True, False, False, True, True]
2021-08-27 21:25:23	lambdabot	 [[False,False],[True,True],[False],[True],[False,False],[True,True,True,True...
2021-08-27 21:25:40	Guest55	well yea lol. but look at what im trying to achive
2021-08-27 21:25:58	Guest55	i know how to group. just pulling the indexes after that is messy af
2021-08-27 21:26:05	c_wraith	that's just step one
2021-08-27 21:26:06	mastarija	Index first
2021-08-27 21:26:18	mastarija	and then use "groupOn snd" 
2021-08-27 21:26:22	c_wraith	> map (head &&& length) $ group [False, False, True, True, False, True, False, False, True, True, True, True, False, False, True, True]
2021-08-27 21:26:23	mastarija	or something like that
2021-08-27 21:26:23	lambdabot	 [(False,2),(True,2),(False,1),(True,1),(False,2),(True,4),(False,2),(True,2)]
2021-08-27 21:26:24	→	eggplantade has joined #haskell
2021-08-27 21:26:25	Guest55	ok then assume im way past step 1 now
2021-08-27 21:26:38	Guest55	ive tryied everything you're saying
2021-08-27 21:26:41	Guest55	tried*
2021-08-27 21:27:42	c_wraith	and then at that point, it's probably easiest to go to to explicit recursion
2021-08-27 21:28:00	←	raehik has quit (Ping timeout: 250 seconds)
2021-08-27 21:28:13	Guest55	can you show how? that's the exact place im stuck at
2021-08-27 21:28:31	→	aegon has joined #haskell
2021-08-27 21:29:23	→	cheater has joined #haskell
2021-08-27 21:32:43	hololeap	is there another way to accomplish this using premade monoids/semigroups/alternatives ... ?   http://sprunge.us/0xuc7T
2021-08-27 21:33:03	c_wraith	Guest55: what should it do if there is no True?
2021-08-27 21:33:39	Guest55	umm maybe (0,0) idk
2021-08-27 21:33:48	→	lbseale has joined #haskell
2021-08-27 21:33:58	←	lavaman has quit (Ping timeout: 250 seconds)
2021-08-27 21:34:00	Guest55	less of an issue. just an exercise ive come up with
2021-08-27 21:37:17	hololeap	(fixed it so that it behaves how I actually want: http://sprunge.us/W2QrRQ)
2021-08-27 21:39:12	hololeap	basically, the folding function doesn't care about previous values, but if they are Just, the first one is kept. the whole thing short circuits when all the Maybes are Just
2021-08-27 21:39:24	c_wraith	Guest55: https://paste.tomsmeding.com/BAq8Rd3s works.  Maybe not ideal (it should probably return a Maybe (Int, Int)), but solid
2021-08-27 21:40:15	→	pgib has joined #haskell
2021-08-27 21:42:29	hololeap	the overall idea is that it tries to gather all the pieces for building a product type from a list, and once all those pieces have been collected, it stops reading from the list
2021-08-27 21:43:32	hololeap	I feel like this would be common enough that I wouldn't have to roll my own function for this
2021-08-27 21:44:23	←	phma has quit (Read error: Connection reset by peer)
2021-08-27 21:45:50	→	phma has joined #haskell
2021-08-27 21:46:35	sclv	hololeap: i'd just say `find (\(x,y) -> isJust x && isJust y)` or something for that?
2021-08-27 21:48:40	sclv	but what you may want is something like `concatMap (\(x,y) -> liftM2 (,) x y)` and then pattern match out the head
2021-08-27 21:48:53	sclv	or er not concatMap, but mapMaybe
2021-08-27 21:49:35	→	_ht has joined #haskell
2021-08-27 21:51:20	←	azeem has quit (Ping timeout: 248 seconds)
2021-08-27 21:52:32	c_wraith	there are so many silly ways to do this:
2021-08-27 21:52:34	c_wraith	:t \f -> getFirst . foldMap (First . uncurry (liftA2 (,))  . f)
2021-08-27 21:52:35	lambdabot	Foldable t => (a1 -> (Maybe a2, Maybe b)) -> t a1 -> Maybe (a2, b)
2021-08-27 21:53:28	Guest55	c_wraith thanks. ill try to understand what you wrote
2021-08-27 21:53:49	c_wraith	Ah, that version isn't quite right.  To really be right you'd want to bimap over the pair, which gets uglier
2021-08-27 21:54:18	byorgey	what's an easy way to get a function   Map k (Maybe a) -> Map k a   which deletes the Nothing values from the map?
2021-08-27 21:54:35	c_wraith	:t \f -> bimap getFirst getFirst . foldMap (bimap First First . f)
2021-08-27 21:54:36	lambdabot	(Bifunctor p, Foldable t, Monoid (p (First a1) (First a2))) => (a3 -> p (Maybe a1) (Maybe a2)) -> t a3 -> p (Maybe a1) (Maybe a2)
2021-08-27 21:54:39	hololeap	c_wraith: that would discard an intermediate value like (Just x, Nothing) ... the `uncurry (liftA2 (,))` would transform that into Nothing and you would lose `Just x`
2021-08-27 21:54:42	c_wraith	enjoy that type signature
2021-08-27 21:54:48	c_wraith	hololeap: yes, I just fixed that
2021-08-27 21:55:05	Guest55	the problem btw was to find longest increasing&following number subsequence
2021-08-27 21:55:10	sclv	byorgey: the easiest way is to use witherable :-)
2021-08-27 21:55:44	Guest55	i just converted it to a lists of booleans indicating if one is a successor of the previous
2021-08-27 21:56:05	byorgey	sclv: ah, perfect!
2021-08-27 21:56:56	byorgey	Yes, exactly. I used to have a list and used catMaybes.  But now the list is changing to a map, and... I can still use catMaybes! \o/
2021-08-27 21:59:28	→	azeem has joined #haskell
2021-08-27 21:59:35	dminuoso	byorgey: traverseMaybeWithKey is a thing in new versions of container
2021-08-27 21:59:43	dminuoso	Avoids the dependency on witherable
2021-08-27 21:59:47	c_wraith	hololeap: though..  I'm not sure that's appropriately lazy anymore, since the Firsts are inside the tuple.  Better off going with one of sclv's suggestsions
2021-08-27 22:00:24	←	Morrow_ has quit (Ping timeout: 250 seconds)
2021-08-27 22:01:28	dminuoso	Though catMaybes from witherable might be a better exact fit. But traverseMaybeWithKey is still useful in case this is the output of a traverse already.
2021-08-27 22:03:59	byorgey	dminuoso: oh, good to know, thanks, that's actually an even better fit, because I do a traverse right before the catMaybes
2021-08-27 22:05:54	→	markpythonicbtc has joined #haskell
2021-08-27 22:09:23	←	dschrempf has quit (Quit: WeeChat 3.2)
2021-08-27 22:11:24	→	arjun has joined #haskell
2021-08-27 22:17:39	←	azeem has quit (Ping timeout: 252 seconds)
2021-08-27 22:18:24	←	Guest55 has quit (Ping timeout: 246 seconds)
2021-08-27 22:20:00	←	Boomerang has quit (Ping timeout: 250 seconds)
2021-08-27 22:21:58	→	martin02 has joined #haskell
2021-08-27 22:22:14	→	azeem has joined #haskell
2021-08-27 22:23:02	←	eggplantade has quit (Remote host closed the connection)
2021-08-27 22:25:01	←	arjun has quit (Remote host closed the connection)
2021-08-27 22:29:50	maerwald	is there an easy way to make the Map fromJSON instance of aeson more permissive without redefining it? As in: if it can't parse a key, I want it to just skip that element
2021-08-27 22:30:47	sclv	https://hackage.haskell.org/package/aeson-1.5.6.0/docs/Data-Aeson.html#v:defaultOptions is all i know of?
2021-08-27 22:31:03	maerwald	the instance is here https://hackage.haskell.org/package/aeson-1.5.6.0/docs/src/Data.Aeson.Types.FromJSON.html#line-1896
2021-08-27 22:31:09	maerwald	I'm sure I could just overwrite it, but
2021-08-27 22:31:44	maerwald	it seems like a common use case, isn't it?
2021-08-27 22:32:07	sclv	i'm not sure i see where that errors -- as in the key can't be parsed because its malformed as json?
2021-08-27 22:32:10	→	mc47 has joined #haskell
2021-08-27 22:32:14	dminuoso	Dunno, the the protocol interactions we have are very strict.
2021-08-27 22:32:17	←	mastarija has quit (Read error: Connection reset by peer)
2021-08-27 22:32:25	dminuoso	Simply dropping keys could induce a lot of bizarre failure
2021-08-27 22:32:29	maerwald	well, `FromJSONKey k` will fail
2021-08-27 22:32:35	maerwald	it would have to catch it
2021-08-27 22:32:53	→	Morrow_ has joined #haskell
2021-08-27 22:33:35	sclv	oh uh i'd just parse into a map from string keys in that case
2021-08-27 22:35:42	→	elf_fortrez has joined #haskell
2021-08-27 22:35:43	maerwald	that's gonna be a little annoyong, because those are several nested maps, which then have to be translated to something not-stringy :p
2021-08-27 22:36:13	maerwald	I guess I'll just make an overlapping instance
2021-08-27 22:36:15	sclv	ok then newtype wrap the maps and write your own instance? 
2021-08-27 22:37:07	←	vpan has quit (Quit: Leaving.)
2021-08-27 22:38:00	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-08-27 22:38:03	←	smitop has quit (Remote host closed the connection)
2021-08-27 22:40:13	aegon	i'm trying to grok arrow syntax better / when its good to use anyone got a favorite tutorial / overview? I've got 6 open 
2021-08-27 22:40:24	←	nilof has quit (Ping timeout: 248 seconds)
2021-08-27 22:42:06	→	fef has joined #haskell
2021-08-27 22:42:24	→	eggplantade has joined #haskell
2021-08-27 22:43:36	maerwald	in 8 years of haskell or so I've never used arrows
2021-08-27 22:43:51	maerwald	although I've read several papers that make use of them
2021-08-27 22:44:17	maerwald	then they usually end up doing something similar with monads
2021-08-27 22:45:57	aegon	i did something with wire a while back. It seems like the intent is that arrows can be paralellized but I don't see any parallelization happening unless ghc is doing that when it sees they aren't dependent on eachother
2021-08-27 22:46:07	maerwald	whenever I try to build an intuition about them, I simply can't find enough use cases
2021-08-27 22:46:29	→	MQ-17J has joined #haskell
2021-08-27 22:47:11	→	tzh has joined #haskell
2021-08-27 22:47:12	←	tput has quit (Ping timeout: 250 seconds)
2021-08-27 22:47:33	maerwald	and then I wonder why I spent 2 hours reading about something I don't need :p
2021-08-27 22:48:33	aegon	lol
2021-08-27 22:48:49	hololeap	sclv, c_wraith: the best solution I've come up with so far is to roll a First2 monoid: http://sprunge.us/9RSGe0
2021-08-27 22:48:53	aegon	i want all that sugar at my disposal when planning
2021-08-27 22:49:22	maerwald	except for making an impression at the next haskell meetup
2021-08-27 22:49:30	maerwald	where ppl will go "omg, that arrow dude"
2021-08-27 22:50:08	→	smitop has joined #haskell
2021-08-27 22:50:34	→	nilof has joined #haskell
2021-08-27 22:50:47	hololeap	but it would be cool to find a solution that could do this with any number of arguments
2021-08-27 22:51:36	maerwald	also, 'arrow' is a hell of a nickname
2021-08-27 22:54:55	→	merijn has joined #haskell
2021-08-27 22:56:33	[exa]	hololeap: take `both First` (with `both` from tuple extras) and generalize over `both` ?
2021-08-27 22:58:21	←	wroathe has quit (Ping timeout: 252 seconds)
2021-08-27 22:59:38	[exa]	(and well, unzip)
2021-08-27 22:59:46	←	nilof has quit (Quit: Leaving)
2021-08-27 22:59:54	←	dyeplexer has quit (Quit: Leaving)
2021-08-27 23:00:49	hololeap	hm, no both needs the tuple to look like (a,a), which isn't the case here... the tuple here is (Maybe a, Maybe b)
2021-08-27 23:01:37	[exa]	ah so that would make a higher-order-polymorphic `both`
2021-08-27 23:03:04	→	dsrt^ has joined #haskell
2021-08-27 23:03:47	←	eggplantade has quit (Remote host closed the connection)
2021-08-27 23:04:12	←	MQ-17J has quit (Ping timeout: 250 seconds)
2021-08-27 23:06:06	→	MQ-17J has joined #haskell
2021-08-27 23:09:56	→	chris has joined #haskell
2021-08-27 23:10:00	ℹ	chris is now known as Guest1015
2021-08-27 23:10:10	←	notzmv has quit (Ping timeout: 240 seconds)
2021-08-27 23:11:30	→	Skyfire has joined #haskell
2021-08-27 23:13:26	←	MQ-17J has quit (Ping timeout: 240 seconds)
2021-08-27 23:15:40	→	MQ-17J has joined #haskell
2021-08-27 23:17:06	←	neo2 has quit (Ping timeout: 240 seconds)
2021-08-27 23:17:54	→	Erutuon has joined #haskell
2021-08-27 23:20:44	←	thyriaen_ has quit (Quit: Leaving)
2021-08-27 23:24:49	→	takuan has joined #haskell
2021-08-27 23:26:02	→	vysn has joined #haskell
2021-08-27 23:27:50	←	bgamari has quit (Quit: ZNC 1.8.1 - https://znc.in)
2021-08-27 23:28:11	→	bgamari has joined #haskell
2021-08-27 23:28:46	←	merijn has quit (Ping timeout: 240 seconds)
2021-08-27 23:29:28	←	Guest1015 has quit (Ping timeout: 248 seconds)
2021-08-27 23:30:27	Cale	maerwald: They have some good use cases for things like building state machines, FRP, that sort of thing, but the details of how the class is defined and the stuff it leaves out tends to also undermine those use cases quite a bit.
2021-08-27 23:32:15	Cale	It ought to be fixed up so that it fits the definition of a symmetric monoidal category a bit more closely. The extra operations that explicitly reassociate and swap tuples, introduce an eliminate units, actually become quite important, because they let you do some static analysis of your computation to simplify it before running, which is a trick that monads struggle with.
2021-08-27 23:33:36	Cale	Currently, if you use the proc/do syntax, it will shove a black box "arr" in between every pair of arrows in your computation, which destroys any hope of simplifying things.
2021-08-27 23:35:05	Cale	It's possible to get that down to basically just the cases where you have a complex (non-tuple-like) construction on the right of a -< or where you're doing a fancier pattern match on the left of a <-
2021-08-27 23:35:44	→	chris has joined #haskell
2021-08-27 23:35:48	ℹ	chris is now known as Guest5790
2021-08-27 23:36:18	Cale	But that said, even if it were improved to the point that it didn't undermine its best use cases, those use cases are still probably pretty rare :)
2021-08-27 23:37:34	→	eggplantade has joined #haskell
2021-08-27 23:39:24	←	doyougnu has quit (Remote host closed the connection)
2021-08-27 23:40:10	←	Guest5790 has quit (Ping timeout: 250 seconds)
2021-08-27 23:41:37	→	raehik has joined #haskell
2021-08-27 23:42:06	←	hyiltiz has quit (Ping timeout: 240 seconds)
2021-08-27 23:42:35	→	doyougnu has joined #haskell
2021-08-27 23:42:56	→	burnsidesLlama has joined #haskell
2021-08-27 23:44:24	sm	interesting!
2021-08-27 23:44:26	→	hyiltiz has joined #haskell
2021-08-27 23:44:56	←	MQ-17J has quit (Ping timeout: 248 seconds)
2021-08-27 23:46:02	⚡	sm has been missing the Cale insight drops in here
2021-08-27 23:46:32	→	MQ-17J has joined #haskell
2021-08-27 23:48:08	←	burnsidesLlama has quit (Ping timeout: 248 seconds)
2021-08-27 23:48:44	maerwald	yeah, I still have to get into FRP as well, but the same thing applies as well: can't find a use case :p
2021-08-27 23:48:54	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-08-27 23:49:30	→	zebrag has joined #haskell
2021-08-27 23:49:59	→	burnsidesLlama has joined #haskell
2021-08-27 23:50:51	→	MQ-17J has joined #haskell
2021-08-27 23:51:09	←	geekosaur has quit (Ping timeout: 252 seconds)
2021-08-27 23:51:38	→	geekosaur has joined #haskell
2021-08-27 23:52:48	←	argento has quit (Ping timeout: 252 seconds)
2021-08-27 23:54:00	←	Morrow_ has quit (Ping timeout: 248 seconds)
2021-08-27 23:57:00	srid[m]	web apps
2021-08-27 23:57:18	srid[m]	or cli apps
2021-08-27 23:57:44	srid[m]	https://github.com/reflex-frp/reflex-ghci for instance
2021-08-27 23:57:53	maerwald	for web apps I don't use haskell
2021-08-27 23:58:10	maerwald	for cli, I use brick, which isn't FRP and much simple
2021-08-27 23:59:26	→	argento has joined #haskell
2021-08-28 00:00:02	maerwald	I think I only tried to get reflex-vty working once and gave up pretty early
2021-08-28 00:02:06	←	MQ-17J has quit (Ping timeout: 240 seconds)
2021-08-28 00:02:24	→	MQ-17J has joined #haskell
2021-08-28 00:04:52	→	pavonia has joined #haskell
2021-08-28 00:06:46	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-28 00:07:00	→	azeem has joined #haskell
2021-08-28 00:07:32	←	fef has quit (Remote host closed the connection)
2021-08-28 00:09:31	←	eggplantade has quit (Remote host closed the connection)
2021-08-28 00:11:38	←	carbolymer has quit (Quit: carbolymer)
2021-08-28 00:11:50	→	carbolymer has joined #haskell
2021-08-28 00:12:36	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-08-28 00:12:53	→	MQ-17J has joined #haskell
2021-08-28 00:13:09	←	sszark has quit (Ping timeout: 252 seconds)
2021-08-28 00:13:48	←	burnsidesLlama has quit (Remote host closed the connection)
2021-08-28 00:14:16	→	wroathe has joined #haskell
2021-08-28 00:14:16	←	wroathe has quit (Changing host)
2021-08-28 00:14:16	→	wroathe has joined #haskell
2021-08-28 00:15:02	→	sszark has joined #haskell
2021-08-28 00:15:39	→	qbt has joined #haskell
2021-08-28 00:20:25	→	tput has joined #haskell
2021-08-28 00:21:44	←	sciencentistguy has quit (Ping timeout: 248 seconds)
2021-08-28 00:23:43	←	tput has quit (Read error: Connection reset by peer)
2021-08-28 00:25:50	→	tput has joined #haskell
2021-08-28 00:27:21	←	qbt has quit (Remote host closed the connection)
2021-08-28 00:29:42	→	Morrow_ has joined #haskell
2021-08-28 00:30:51	→	tfeb has joined #haskell
2021-08-28 00:33:44	→	eggplantade has joined #haskell
2021-08-28 00:37:59	→	qbt has joined #haskell
2021-08-28 00:38:27	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-08-28 00:38:40	aegon	cli apps i use ansii-term its simple
2021-08-28 00:38:44	→	MQ-17J has joined #haskell
2021-08-28 00:38:59	→	fresheyeball has joined #haskell
2021-08-28 00:39:16	aegon	web apps i've been using scotty-web
2021-08-28 00:39:24	aegon	srid[m]: ^
2021-08-28 00:41:28	←	argento has quit (Ping timeout: 248 seconds)
2021-08-28 00:41:34	maerwald	who's building web apps still, so 90s
2021-08-28 00:42:12	maerwald	have login, a database and customer support
2021-08-28 00:43:18	aegon	i assume webapps meant api consumed by something like react
2021-08-28 00:43:19	maerwald	after 20 years this nonsense should be abstracted out so hard that you shouldn't know about it anymore
2021-08-28 00:43:19	maerwald	but for some reason we haven't managed
2021-08-28 00:43:33	→	argento has joined #haskell
2021-08-28 00:43:45	aegon	the browser is a crazy land and javascript along with it. blows my mind javascript is the most used language today
2021-08-28 00:43:48	aegon	no one thought that through
2021-08-28 00:43:59	aegon	:P
2021-08-28 00:44:15	maerwald	I don't think js is the problem here, or even languages at all
2021-08-28 00:44:16	monochrom	Blew DIjkstra's mind BASIC was the most learned language, too.
2021-08-28 00:44:34	maerwald	it's the complete lack of *engineering*
2021-08-28 00:44:43	monochrom	Yes I'm now comparing you with Dijkstra. >:)
2021-08-28 00:46:16	maerwald	why can't you build your startup platform web app in 10 clicks via a GUI? I'm pretty sure there's nothing *technically* new about your idea, use case, database constraints etc etc
2021-08-28 00:46:49	maerwald	it has been done a million times and yet we still do it from scratch again
2021-08-28 00:46:54	maerwald	because it pays well?
2021-08-28 00:46:54	←	tfeb has quit (Quit: died)
2021-08-28 00:47:08	aegon	:O
2021-08-28 00:47:09	monochrom	I think it's called WordPress and FourSquare etc.
2021-08-28 00:47:16	→	burnsidesLlama has joined #haskell
2021-08-28 00:47:21	ℹ	aegon is now known as DJ
2021-08-28 00:47:28	ℹ	DJ is now known as DJ_Ikstra
2021-08-28 00:47:29	→	kayprish has joined #haskell
2021-08-28 00:48:16	←	kayprish has quit (Remote host closed the connection)
2021-08-28 00:48:47	DJ_Ikstra	maerwald: we must all fight django for at least 2 years in our career before noticing how silly it is and vowing never again
2021-08-28 00:48:56	maerwald	I wonder if you could apply unix principles to web development
2021-08-28 00:49:25	maerwald	oh no, I believe ppl will interpret this as microservices
2021-08-28 00:49:29	maerwald	ok, I didn't say anything
2021-08-28 00:49:29	monochrom	But I do not object to the possibilities that most programmers are scammers.
2021-08-28 00:49:31	maerwald	forget it
2021-08-28 00:51:59	monochrom	Functional programming is the closest to realizing unix principles without unix flaws (such as "everything is a string" and "there is only one input source and only one output destination").
2021-08-28 00:52:40	←	burnsidesLlama has quit (Ping timeout: 248 seconds)
2021-08-28 00:53:12	←	MQ-17J has quit (Ping timeout: 248 seconds)
2021-08-28 00:53:18	monochrom	John Hughes paper is almost "why unix but strongly statically typed matters"
2021-08-28 00:54:43	maerwald	I ultimately believe in coding via moving pictures around my screen and connecting them with lines
2021-08-28 00:55:04	→	MQ-17J has joined #haskell
2021-08-28 00:56:04	monochrom	Arrow is almost like that, but trapped in plain text files.
2021-08-28 00:57:10	ℹ	Logio_ is now known as Logio
2021-08-28 00:58:30	→	Codaraxis__ has joined #haskell
2021-08-28 01:01:46	←	Codaraxis_ has quit (Ping timeout: 240 seconds)
2021-08-28 01:08:08	←	MQ-17J has quit (Ping timeout: 250 seconds)
2021-08-28 01:10:50	→	Codaraxis_ has joined #haskell
2021-08-28 01:11:21	←	orhan89 has quit (Ping timeout: 240 seconds)
2021-08-28 01:11:40	←	elf_fortrez has quit (Quit: Client closed)
2021-08-28 01:12:40	←	dsrt^ has quit (Ping timeout: 240 seconds)
2021-08-28 01:12:47	→	notzmv has joined #haskell
2021-08-28 01:12:55	byorgey	Does lens provide a combinator of type (something like)   MonadState s m => Lens' s a -> (a -> m a) -> m s  ?
2021-08-28 01:13:15	→	dsrt^ has joined #haskell
2021-08-28 01:13:27	byorgey	I can do it with   get >>= theLens f   where   f :: a -> m a   ,  but wondered if there was already an operator to do this
2021-08-28 01:13:34	→	orhan89 has joined #haskell
2021-08-28 01:14:07	byorgey	:t \lens f -> get >>= lens f
2021-08-28 01:14:08	lambdabot	MonadState a m => (t -> a -> m b) -> t -> m b
2021-08-28 01:14:09	←	Codaraxis__ has quit (Ping timeout: 240 seconds)
2021-08-28 01:16:25	hololeap	I found a solution to my problem that seems ok: make a new typeclass for semigroups/monoids that have a "short-circuit state", so that wrappers can know whether or not to evaluate the second argument to `sappend`: http://sprunge.us/hYNINa
2021-08-28 01:17:35	byorgey	In other words, I want to apply an update to the component of the monadic state targeted by the lens, but the update may itself have some effects in the monad
2021-08-28 01:18:09	←	hyiltiz has quit (Ping timeout: 240 seconds)
2021-08-28 01:18:46	→	hyiltiz has joined #haskell
2021-08-28 01:22:15	byorgey	wait, I'm not even sure  get >>= lens f  does what I want, because I think that throws out the returned state which has the updated thing in it.  Maybe it should be get >>= lens f >>= put.
2021-08-28 01:25:10	→	merijn has joined #haskell
2021-08-28 01:27:12	←	azeem has quit (Ping timeout: 250 seconds)
2021-08-28 01:27:27	→	azeem has joined #haskell
2021-08-28 01:28:32	byorgey	oh, that doesn't work because the put overwrites any changes to the state made by the 'lens f' part!  Never mind, maybe there's no concise, lawful way to do this, because what if the effects of the 'lens f' part modify the part of the state the lens is targeting?
2021-08-28 01:29:37	byorgey	In my situation that's not the case, but anyway, I will stick with something like   do { a <- use lens; a' <- f a; lens %= a' }
2021-08-28 01:31:09	←	_ht has quit (Remote host closed the connection)
2021-08-28 01:31:28	→	lavaman has joined #haskell
2021-08-28 01:34:57	→	Hanicef has joined #haskell
2021-08-28 16:17:27	→	oxide has joined #haskell
2021-08-28 16:17:27	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-28 16:17:27	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-28 16:17:27	ℹ	Channel #haskell: 720 nicks (1 op, 0 voices, 719 normals)
2021-08-28 16:17:27	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-28 16:18:59	→	jtomas has joined #haskell
2021-08-28 16:19:53	←	sjb0 has quit (Quit: Leaving.)
2021-08-28 16:21:44	←	d0ku has quit (Ping timeout: 248 seconds)
2021-08-28 16:23:03	→	eggplantade has joined #haskell
2021-08-28 16:27:09	←	eggplantade has quit (Ping timeout: 240 seconds)
2021-08-28 16:31:02	→	alx741 has joined #haskell
2021-08-28 16:31:02	←	Vajb has quit (Read error: Connection reset by peer)
2021-08-28 16:31:14	→	Vajb has joined #haskell
2021-08-28 16:40:25	→	pretty_dumm_guy has joined #haskell
2021-08-28 16:40:57	←	Erutuon has quit (Ping timeout: 252 seconds)
2021-08-28 16:48:28	←	azeem has quit (Ping timeout: 250 seconds)
2021-08-28 16:48:51	→	azeem has joined #haskell
2021-08-28 16:49:12	←	merijn has quit (Ping timeout: 252 seconds)
2021-08-28 16:54:05	→	Pickchea has joined #haskell
2021-08-28 16:56:06	←	cheater has quit (Ping timeout: 240 seconds)
2021-08-28 17:04:25	←	polyphem has quit (Read error: Connection reset by peer)
2021-08-28 17:08:02	hololeap	@unmtl StateT s (ExceptT e) a
2021-08-28 17:08:02	lambdabot	err: `ExceptT e (a, s)' is not applied to enough arguments.
2021-08-28 17:08:11	hololeap	@unmtl StateT s (Except e) a
2021-08-28 17:08:11	lambdabot	s -> Except e (a, s)
2021-08-28 17:08:19	→	hannessteffenhag has joined #haskell
2021-08-28 17:08:30	hololeap	@unmtl ExceptT e (State s) a
2021-08-28 17:08:30	lambdabot	s -> (Either e a, s)
2021-08-28 17:14:39	←	hannessteffenhag has quit (Ping timeout: 240 seconds)
2021-08-28 17:16:40	←	azeem has quit (Ping timeout: 248 seconds)
2021-08-28 17:17:44	→	azeem has joined #haskell
2021-08-28 17:20:33	←	martin02 has quit (Ping timeout: 252 seconds)
2021-08-28 17:20:33	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-08-28 17:21:32	→	MQ-17J has joined #haskell
2021-08-28 17:24:25	→	slowButPresent has joined #haskell
2021-08-28 17:25:30	←	slowButPresent has quit (Client Quit)
2021-08-28 17:26:26	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-28 17:28:11	→	slowButPresent has joined #haskell
2021-08-28 17:31:49	→	Codaraxis__ has joined #haskell
2021-08-28 17:34:46	←	Codaraxis_ has quit (Ping timeout: 240 seconds)
2021-08-28 17:35:10	→	azeem has joined #haskell
2021-08-28 17:39:51	←	feepo has quit (Quit: Connection closed for inactivity)
2021-08-28 17:39:54	→	hannessteffenhag has joined #haskell
2021-08-28 17:42:00	←	timCF has quit (Quit: leaving)
2021-08-28 17:44:09	←	hannessteffenhag has quit (Ping timeout: 240 seconds)
2021-08-28 17:47:24	←	MQ-17J has quit (Ping timeout: 250 seconds)
2021-08-28 17:51:44	←	xff0x has quit (Ping timeout: 250 seconds)
2021-08-28 17:53:13	→	aman has joined #haskell
2021-08-28 17:53:18	→	[itchyjunk] has joined #haskell
2021-08-28 17:56:13	→	hannessteffenhag has joined #haskell
2021-08-28 17:56:25	→	peterhil has joined #haskell
2021-08-28 17:58:14	→	favonia has joined #haskell
2021-08-28 17:59:28	→	mikoto-chan has joined #haskell
2021-08-28 18:01:28	←	hannessteffenhag has quit (Ping timeout: 248 seconds)
2021-08-28 18:09:19	←	Vajb has quit (Read error: Connection reset by peer)
2021-08-28 18:09:31	→	Vajb has joined #haskell
2021-08-28 18:10:22	←	hendursa1 has quit (Quit: hendursa1)
2021-08-28 18:11:03	→	hendursaga has joined #haskell
2021-08-28 18:12:31	→	xff0x has joined #haskell
2021-08-28 18:16:37	←	jakalx has left #haskell
2021-08-28 18:16:53	←	icebreaker has left #haskell
2021-08-28 18:20:01	→	martin02 has joined #haskell
2021-08-28 18:22:48	←	mikoto-chan has quit (Ping timeout: 248 seconds)
2021-08-28 18:24:38	→	eggplantade has joined #haskell
2021-08-28 18:24:52	siers	I have found this nix shell to work well for getting cabal/hls for freshly cloned projects: nix-shell -p cabal2nix --run 'nix-shell -E "$(cabal2nix --shell .)" --run "nix-shell -p cabal-install -p haskell-language-server --run zsh"'
2021-08-28 18:25:14	siers	as I don't like declaring unneeded dependencies for my user profile
2021-08-28 18:25:34	maerwald	how long does that run? :)
2021-08-28 18:26:34	→	waleee has joined #haskell
2021-08-28 18:27:51	siers	instantly
2021-08-28 18:28:04	siers	ah, well depends on whether you have the deps :)
2021-08-28 18:28:13	maerwald	in my experience, entering a nix shell takes a couple hours depending on your configuration :p
2021-08-28 18:28:35	siers	no, very fast after the first download run. do you have a HDD?
2021-08-28 18:28:53	←	eggplantade has quit (Ping timeout: 250 seconds)
2021-08-28 18:29:26	maerwald	it also didn't share subdirectories from git clones, not sure that's fixed
2021-08-28 18:29:50	→	mykyta has joined #haskell
2021-08-28 18:30:16	←	APic has quit (Ping timeout: 248 seconds)
2021-08-28 18:32:23	←	mykyta has left #haskell
2021-08-28 18:32:52	→	[_] has joined #haskell
2021-08-28 18:33:18	ℹ	[itchyjunk] is now known as Guest3360
2021-08-28 18:33:19	←	Guest3360 has quit (Killed (silver.libera.chat (Nickname regained by services)))
2021-08-28 18:33:19	ℹ	[_] is now known as [itchyjunk]
2021-08-28 18:33:42	→	Guest3360 has joined #haskell
2021-08-28 18:33:56	←	Guest3360 has quit (Client Quit)
2021-08-28 18:34:51	siers	is SetEnv a function? https://gitlab.com/goldfirere/stitch/blob/58f49b8c8f6cc66cc634944afd9961c7bc15d9d1/src/Language/Stitch/Control/Monad/HReader.hs#L32
2021-08-28 18:35:52	→	MQ-17J has joined #haskell
2021-08-28 18:35:54	→	cods has joined #haskell
2021-08-28 18:36:14	siers	hlocal/MonadHReader breaks my head
2021-08-28 18:36:33	maerwald	associated type family
2021-08-28 18:37:00	→	egoist has joined #haskell
2021-08-28 18:37:01	siers	I can't also conceptually understand how it may result in a ReaderT r1 m, if it returns a r2 and the SetEnv seems to convert to r2 also
2021-08-28 18:38:31	maerwald	https://downloads.haskell.org/~ghc/8.10.7/docs/html/users_guide/glasgow_exts.html#associated-type-families
2021-08-28 18:38:50	siers	I'll take a look
2021-08-28 18:40:17	maerwald	you can view type families as functions on types
2021-08-28 18:40:52	→	ArctVaulMarsHMPJ has joined #haskell
2021-08-28 18:40:57	siers	that is how I viewed them already
2021-08-28 18:41:13	maerwald	1. function: value -> value, 2. type family: type -> type, 3. class: type -> value, 4. GADT: value -> type
2021-08-28 18:41:17	maerwald	I think it was like that?
2021-08-28 18:41:39	maerwald	so the combination of class and type family is especially interesting
2021-08-28 18:41:44	siers	that's an interesting list, I'd never seen one like that
2021-08-28 18:41:53	←	waleee has quit (Ping timeout: 250 seconds)
2021-08-28 18:42:30	siers	it looks like a type, not a type family at the first glance
2021-08-28 18:42:42	maerwald	it is a family
2021-08-28 18:42:47	maerwald	becuaes it's in the class
2021-08-28 18:42:56	maerwald	and can have multiple type instances
2021-08-28 18:42:59	siers	ahm ok
2021-08-28 18:43:03	siers	m = ,
2021-08-28 18:43:54	→	waleee has joined #haskell
2021-08-28 18:43:57	maerwald	you also have open type families and closed type families
2021-08-28 18:44:07	maerwald	https://downloads.haskell.org/~ghc/8.10.7/docs/html/users_guide/glasgow_exts.html#closed-type-families
2021-08-28 18:46:00	→	merijn has joined #haskell
2021-08-28 18:47:24	→	lavaman has joined #haskell
2021-08-28 18:49:16	←	waleee has quit (Quit: WeeChat 3.2)
2021-08-28 18:50:19	maerwald	maybe also check out https://hackage.haskell.org/package/mtl-tf
2021-08-28 18:51:51	←	lavaman has quit (Ping timeout: 250 seconds)
2021-08-28 18:52:26	←	jiribenes has quit (Ping timeout: 258 seconds)
2021-08-28 18:52:51	←	pfurla has quit (Quit: gone to sleep. ZZZzzz…)
2021-08-28 18:54:21	siers	is Mark a brother/relative of Simon or something?
2021-08-28 18:54:50	→	acidjnk_new has joined #haskell
2021-08-28 18:54:51	→	waleee has joined #haskell
2021-08-28 18:56:52	→	acidjnk has joined #haskell
2021-08-28 18:58:28	←	acidjnk_new3 has quit (Ping timeout: 250 seconds)
2021-08-28 18:59:25	→	burnsidesLlama has joined #haskell
2021-08-28 18:59:29	←	burnsidesLlama has quit (Remote host closed the connection)
2021-08-28 18:59:39	←	acidjnk_new has quit (Ping timeout: 250 seconds)
2021-08-28 18:59:40	→	burnsidesLlama has joined #haskell
2021-08-28 19:01:50	siers	ok, I get what hlocal is doing now, finally
2021-08-28 19:03:57	siers	haddock is a fish! ha, I just found out
2021-08-28 19:05:08	←	burnsidesLlama has quit (Remote host closed the connection)
2021-08-28 19:06:47	ℹ	irc: disconnected from server
2021-08-28 19:24:07	→	oxide has joined #haskell
2021-08-28 19:24:07	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-28 19:24:07	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-28 19:24:07	ℹ	Channel #haskell: 722 nicks (1 op, 0 voices, 721 normals)
2021-08-28 19:24:08	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-28 19:26:06	←	lbseale has quit (Ping timeout: 240 seconds)
2021-08-28 19:26:53	→	fendor_ has joined #haskell
2021-08-28 19:29:14	←	fendor has quit (Ping timeout: 250 seconds)
2021-08-28 19:37:27	→	APic has joined #haskell
2021-08-28 19:38:52	→	dagi59194 has joined #haskell
2021-08-28 19:39:22	←	dagit has quit (Read error: Connection reset by peer)
2021-08-28 19:40:23	←	acidjnk has quit (Ping timeout: 250 seconds)
2021-08-28 19:41:15	ℹ	irc: disconnected from server
2021-08-28 20:00:17	→	oxide has joined #haskell
2021-08-28 20:00:17	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-28 20:00:17	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-28 20:00:17	ℹ	Channel #haskell: 723 nicks (1 op, 0 voices, 722 normals)
2021-08-28 20:00:18	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-28 20:00:21	→	pfurla has joined #haskell
2021-08-28 20:06:27	←	MQ-17J has quit (Ping timeout: 240 seconds)
2021-08-28 20:10:38	ℹ	lep is now known as lep-
2021-08-28 20:14:05	→	wroathe has joined #haskell
2021-08-28 20:14:05	←	wroathe has quit (Changing host)
2021-08-28 20:14:05	→	wroathe has joined #haskell
2021-08-28 20:15:51	→	markpythonicbtc has joined #haskell
2021-08-28 20:20:02	←	APic has quit (Ping timeout: 245 seconds)
2021-08-28 20:21:36	ℹ	lep- is now known as lep
2021-08-28 20:24:05	ℹ	lep is now known as lep-
2021-08-28 20:24:06	←	Vajb has quit (Read error: Connection reset by peer)
2021-08-28 20:24:35	→	Vajb has joined #haskell
2021-08-28 20:26:24	→	eggplantade has joined #haskell
2021-08-28 20:27:48	←	geekosaur has quit (Remote host closed the connection)
2021-08-28 20:30:19	→	geekosaur has joined #haskell
2021-08-28 20:30:34	←	markpythonicbtc has quit (Remote host closed the connection)
2021-08-28 20:30:40	←	eggplantade has quit (Ping timeout: 240 seconds)
2021-08-28 20:31:12	←	Vajb has quit (Ping timeout: 250 seconds)
2021-08-28 20:31:20	→	Vajb has joined #haskell
2021-08-28 20:33:20	ℹ	lep- is now known as lep
2021-08-28 20:37:16	←	mei has quit (Read error: Connection reset by peer)
2021-08-28 20:42:03	←	Vajb has quit (Read error: Connection reset by peer)
2021-08-28 20:42:25	←	alx741 has quit (Ping timeout: 252 seconds)
2021-08-28 20:43:07	→	Vajb has joined #haskell
2021-08-28 20:44:00	ℹ	lep is now known as lep-
2021-08-28 20:44:37	←	Vajb has quit (Read error: Connection reset by peer)
2021-08-28 20:44:38	←	Pickchea has quit (Quit: Leaving)
2021-08-28 20:44:56	→	Vajb has joined #haskell
2021-08-28 20:46:00	→	nate1 has joined #haskell
2021-08-28 20:50:56	→	burnsidesLlama has joined #haskell
2021-08-28 20:52:08	←	azeem has quit (Ping timeout: 248 seconds)
2021-08-28 20:54:03	→	azeem has joined #haskell
2021-08-28 20:54:51	→	cheater has joined #haskell
2021-08-28 20:54:55	ℹ	lep- is now known as lep
2021-08-28 20:55:39	→	alx741 has joined #haskell
2021-08-28 20:56:10	←	burnsidesLlama has quit (Ping timeout: 240 seconds)
2021-08-28 20:57:15	←	Vajb has quit (Read error: Connection reset by peer)
2021-08-28 20:57:59	→	Vajb has joined #haskell
2021-08-28 20:59:15	←	jiribenes has quit (Remote host closed the connection)
2021-08-28 20:59:58	→	jiribenes has joined #haskell
2021-08-28 21:00:32	←	pavonia has quit (Quit: Bye!)
2021-08-28 21:03:50	ℹ	lep is now known as lep-
2021-08-28 21:05:40	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-28 21:06:11	→	azeem has joined #haskell
2021-08-28 21:08:24	ℹ	lep- is now known as lep
2021-08-28 21:12:40	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-28 21:12:59	→	azeem has joined #haskell
2021-08-28 21:13:12	←	Vajb has quit (Ping timeout: 252 seconds)
2021-08-28 21:13:50	→	Vajb has joined #haskell
2021-08-28 21:16:16	→	merijn has joined #haskell
2021-08-28 21:18:31	ℹ	lep is now known as lep-
2021-08-28 21:19:07	DigitalKiwi	hi i'm here to talk about stocks
2021-08-28 21:21:54	→	hexfive has joined #haskell
2021-08-28 21:23:44	→	chris has joined #haskell
2021-08-28 21:23:48	ℹ	chris is now known as Guest3892
2021-08-28 21:23:59	ℹ	lep- is now known as lep
2021-08-28 21:27:28	maerwald	what you got for me today
2021-08-28 21:28:18	←	azeem has quit (Ping timeout: 250 seconds)
2021-08-28 21:28:40	←	renzhi has quit (Ping timeout: 240 seconds)
2021-08-28 21:28:59	→	azeem has joined #haskell
2021-08-28 21:29:39	DigitalKiwi	jokes
2021-08-28 21:31:19	←	hexfive has quit (Quit: WeeChat 3.0.1)
2021-08-28 21:33:01	←	Morrow_ has quit (Ping timeout: 252 seconds)
2021-08-28 21:36:24	maerwald	https://www.haskell.org/tutorial/ what's this
2021-08-28 21:37:39	monochrom	The best Haskell tutorial.
2021-08-28 21:37:43	→	Guest3199 has joined #haskell
2021-08-28 21:37:55	←	Guest3199 has quit (Client Quit)
2021-08-28 21:38:10	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-28 21:38:25	→	azeem has joined #haskell
2021-08-28 21:38:30	→	eggplantade has joined #haskell
2021-08-28 21:44:35	←	derelict has quit (Quit: WeeChat 3.2)
2021-08-28 21:45:34	DigitalKiwi	is it really the best?
2021-08-28 21:45:57	DigitalKiwi	simply being official doesn't make it the gest
2021-08-28 21:46:04	DigitalKiwi	or best
2021-08-28 21:46:16	→	derelict has joined #haskell
2021-08-28 21:46:34	←	dajoer has quit (Quit: leaving)
2021-08-28 21:48:11	←	Vajb has quit (Read error: Connection reset by peer)
2021-08-28 21:48:21	maerwald	I think we just established that it's the best.
2021-08-28 21:49:23	DigitalKiwi	have we though
2021-08-28 21:50:37	←	merijn has quit (Ping timeout: 252 seconds)
2021-08-28 21:51:04	→	neo2 has joined #haskell
2021-08-28 21:51:14	→	Vajb has joined #haskell
2021-08-28 21:52:44	←	derelict has quit (Quit: bye)
2021-08-28 21:52:59	→	derelict has joined #haskell
2021-08-28 21:55:48	←	Vajb has quit (Read error: Connection reset by peer)
2021-08-28 21:56:42	→	Vajb has joined #haskell
2021-08-28 21:57:40	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-28 21:58:26	←	nate1 has quit (Quit: WeeChat 3.2)
2021-08-28 21:58:47	→	azeem has joined #haskell
2021-08-28 22:03:04	←	azeem has quit (Ping timeout: 248 seconds)
2021-08-28 22:03:43	→	falafel has joined #haskell
2021-08-28 22:04:08	→	azeem has joined #haskell
2021-08-28 22:04:46	←	lbseale_ has quit (Read error: Connection reset by peer)
2021-08-28 22:07:52	←	Guest3892 has quit (Ping timeout: 248 seconds)
2021-08-28 22:12:05	→	chris has joined #haskell
2021-08-28 22:12:09	ℹ	chris is now known as Guest2283
2021-08-28 22:12:38	←	Guest2283 has quit (Remote host closed the connection)
2021-08-28 22:13:22	←	falafel has quit (Ping timeout: 245 seconds)
2021-08-28 22:14:46	→	hnOsmium0001 has joined #haskell
2021-08-28 22:16:15	→	APic has joined #haskell
2021-08-28 22:19:38	→	chris has joined #haskell
2021-08-28 22:19:42	ℹ	chris is now known as Guest8241
2021-08-28 22:21:29	→	Pickchea has joined #haskell
2021-08-28 22:21:56	←	jrm has quit (Quit: ciao)
2021-08-28 22:23:23	monochrom	It's how I learned Haskell, and I think it's the best, or least worst, compared to tutorials that came after.
2021-08-28 22:24:24	monochrom	One of its strengths is that it does not have broken analogies or misleading pictures that everyone praises in other, worse, tutorials.
2021-08-28 22:25:50	monochrom	Note that there is a line to be drawn between tutorials and textbooks. I am comparing tutorials with tutorials, not tutorials with textbooks.
2021-08-28 22:27:13	monochrom	http://www.vex.net/~trebla/haskell/learn-sources.html#a-gentle-introduction-to-haskell
2021-08-28 22:34:52	←	kuribas has quit (Remote host closed the connection)
2021-08-28 22:40:48	←	geekosaur has quit (Remote host closed the connection)
2021-08-28 22:41:25	→	Morrow_ has joined #haskell
2021-08-28 22:41:42	←	azeem has quit (Ping timeout: 245 seconds)
2021-08-28 22:44:07	→	geekosaur has joined #haskell
2021-08-28 22:44:34	hololeap	is there a monad (transformer) similar to ExceptT, but with different semantics, where the monad will "short-circuit" and return when a computation is finished, as opposed to on an error?
2021-08-28 22:45:20	janus	hololeap: not sure i understand, why not just swap success and error types in ExceptT ?
2021-08-28 22:47:18	monochrom	I don't understand how "finished" and "short-circuit" can be brought together.
2021-08-28 22:47:23	janus	maybe if we eschew the "success/error" terminology and just call it "returned on short circuit" "returned when no short circuiting appears". that captures ExceptT just as accurately, no?
2021-08-28 22:47:33	monochrom	I would think "short-circuit" means "unfinished but quit".
2021-08-28 22:47:34	→	azeem has joined #haskell
2021-08-28 22:48:19	hololeap	monochrom: for instance, I'm building a data structure using Accum using "pieces" that come in from a list, and I want to stop reading from the list when the data structure is complete
2021-08-28 22:48:47	monochrom	I don't know Accum.
2021-08-28 22:49:05	hololeap	It's basically just State but specialized for monoids as `s`
2021-08-28 22:49:07	←	haykam has quit (Remote host closed the connection)
2021-08-28 22:49:13	→	lavaman has joined #haskell
2021-08-28 22:49:21	→	haykam has joined #haskell
2021-08-28 22:49:23	hololeap	it's actually in transformers
2021-08-28 22:50:00	monochrom	But "f (x:y:_) = (x,y)" satisfies "stop reading from the list when the tuple (x,y) is complete".
2021-08-28 22:50:57	hololeap	this is more like, `data MyThing (Maybe X) (Maybe Y) (Maybe Z)` and I want to stop when all the fields are (Just X), (Just Y), etc
2021-08-28 22:52:16	hololeap	oh, I just remembered monad-loops. takeWhileM is probably what I'm looking for
2021-08-28 22:53:40	←	lavaman has quit (Ping timeout: 250 seconds)
2021-08-28 22:54:18	monochrom	Equivalently, making a recursive call means "don't stop", therefore simply don't make a recursive call to "stop".
2021-08-28 22:55:24	hololeap	true, but I like to avoid rolling my own recursion when possible. I find the code easier to comprehend that way
2021-08-28 22:57:36	monochrom	When I'm writing in C, half of the loops are for-loops that don't contain "break", "continue", "return", "exit()".  They are the pure loops, they would be foldl, foldr, foldMap, mapM_ if I were writing Haskell.
2021-08-28 22:57:41	kaol	I've used ContT for my not-ExceptT things sometimes.
2021-08-28 22:58:54	monochrom	But the other half, they were really handwritten recursion in my head, and for just cause, but then it's C so I compiled recursion to "loop"s with "break" and "continue" and "return".
2021-08-28 23:00:00	→	Erutuon has joined #haskell
2021-08-28 23:00:28	monochrom	Basically trying to explain that half of the "loops" in C are dishonest loops.  They don't improve comprehensibility.
2021-08-28 23:03:05	→	tzh has joined #haskell
2021-08-28 23:03:50	kaol	flip runContT return $ callCC $ \exit -> ... and exit can be called to short circuit and it'll have the same type as the whole computation, with no Either involved.
2021-08-28 23:05:26	monochrom	http://www.vex.net/~trebla/haskell/cont.xhtml#yield for using that to exit and re-enter and re-exit and re-enter... >:)
2021-08-28 23:08:34	hpc	if you want to be extra mean, flip runContT pure $ callCC $ \return -> ...
2021-08-28 23:09:02	hpc	now return actually affects control flow! :D
2021-08-28 23:09:16	monochrom	That's only the 2nd meanest.  s/pure/return/  to be the meanest.
2021-08-28 23:10:17	hpc	then you can't nest it though
2021-08-28 23:10:26	monochrom	But let me optimize it for you.
2021-08-28 23:10:27	←	martin02 has quit (Ping timeout: 240 seconds)
2021-08-28 23:10:27	maerwald	is `pure` even politically correct?
2021-08-28 23:10:30	hpc	it's fun to not know if your return is going to take you too far up, or not take you too far up enough
2021-08-28 23:10:41	monochrom	flip runContT pure $ \pure -> ...
2021-08-28 23:11:07	monochrom	err
2021-08-28 23:11:13	hpc	actually, hmm
2021-08-28 23:11:16	monochrom	flip runContT pure $ ContT $ \pure -> ...
2021-08-28 23:11:30	hpc	in \pure, that pure has the same type as actual pure
2021-08-28 23:11:37	hpc	monochrom: so yes, yours is better
2021-08-28 23:11:48	hpc	because then who even knows what nesting it will do
2021-08-28 23:16:40	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-28 23:16:54	→	azeem has joined #haskell
2021-08-28 23:21:10	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-28 23:22:15	→	azeem has joined #haskell
2021-08-28 23:22:43	→	Gurkenglas has joined #haskell
2021-08-28 23:22:52	→	martin02 has joined #haskell
2021-08-28 23:29:37	←	APic has quit (Ping timeout: 252 seconds)
2021-08-28 23:31:10	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-28 23:32:06	→	azeem has joined #haskell
2021-08-28 23:33:33	monochrom	On second thought, callCC is necessary.
2021-08-28 23:34:06	hpc	it's always on second thought with callCC :P
2021-08-28 23:36:05	←	ArctVaulMarsHMPJ has quit (Remote host closed the connection)
2021-08-28 23:36:13	←	azeem has quit (Ping timeout: 252 seconds)
2021-08-28 23:37:18	→	azeem has joined #haskell
2021-08-28 23:37:40	hololeap	is there something (premade) that combines takeWhile with a fold, so that you can access the state of the fold in the check?
2021-08-28 23:38:23	Rembane_	MonadPlus might be your friend here, I haven't used it though, only seen something about it in the docs.
2021-08-28 23:38:46	hololeap	I don't think that would help here, but explain
2021-08-28 23:41:33	hololeap	@hoogle (b -> Either b c) -> (a -> b -> b) -> b -> t a -> Either b c
2021-08-28 23:41:33	lambdabot	No results found
2021-08-28 23:42:27	→	d0ku has joined #haskell
2021-08-28 23:45:07	←	Pickchea has quit (Ping timeout: 240 seconds)
2021-08-28 23:45:12	hololeap	well, I think I'll just stick with what I have: mapM_ using ExceptT (Bare T) (Accum (Partial T)) ()
2021-08-28 23:45:39	hololeap	although that () in the last position makes me feel like the monad interface is too powerful here
2021-08-28 23:46:06	←	raehik has quit (Ping timeout: 250 seconds)
2021-08-28 23:47:04	→	merijn has joined #haskell
2021-08-28 23:47:09	⚡	hololeap renames Bare to Finished -- there, that makes more sense
2021-08-28 23:47:47	←	eldritch_ has quit (Changing host)
2021-08-28 23:47:47	→	eldritch_ has joined #haskell
2021-08-28 23:48:06	→	TranquilEcho has joined #haskell
2021-08-28 23:48:17	→	raehik has joined #haskell
2021-08-28 23:49:52	←	andinus has quit (Remote host closed the connection)
2021-08-28 23:50:33	→	andinus has joined #haskell
2021-08-28 23:53:38	→	Jeanne-Kamikaze has joined #haskell
2021-08-28 23:55:27	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-28 23:56:11	→	azeem has joined #haskell
2021-08-28 23:56:40	→	ArctVaulMarsHMPJ has joined #haskell
2021-08-28 23:57:52	→	mud has joined #haskell
2021-08-29 00:02:35	←	Guest8241 has quit (Remote host closed the connection)
2021-08-29 00:02:40	←	azeem has quit (Ping timeout: 250 seconds)
2021-08-29 00:03:12	→	chris has joined #haskell
2021-08-29 00:03:16	ℹ	chris is now known as Guest3524
2021-08-29 00:03:23	←	Guest3524 has quit (Remote host closed the connection)
2021-08-29 00:04:20	→	chris has joined #haskell
2021-08-29 00:04:24	ℹ	chris is now known as Guest9786
2021-08-29 00:05:28	→	azeem has joined #haskell
2021-08-29 00:06:00	←	dyeplexer has quit (Remote host closed the connection)
2021-08-29 00:11:46	←	azeem has quit (Ping timeout: 250 seconds)
2021-08-29 00:13:02	→	azeem has joined #haskell
2021-08-29 00:13:09	→	desophos has joined #haskell
2021-08-29 00:13:34	→	waleee has joined #haskell
2021-08-29 00:19:40	←	azeem has quit (Ping timeout: 252 seconds)
2021-08-29 00:20:06	→	azeem has joined #haskell
2021-08-29 00:21:10	←	merijn has quit (Ping timeout: 240 seconds)
2021-08-29 00:31:07	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-29 00:31:38	→	azeem has joined #haskell
2021-08-29 00:31:40	→	Pickchea has joined #haskell
2021-08-29 00:33:25	←	Jeanne-Kamikaze has quit (Ping timeout: 252 seconds)
2021-08-29 00:41:49	→	mikoto-chan has joined #haskell
2021-08-29 00:42:00	←	martin02 has quit (Ping timeout: 248 seconds)
2021-08-29 00:43:09	→	kenran has joined #haskell
2021-08-29 00:44:27	←	_xor has quit (Read error: Connection reset by peer)
2021-08-29 00:44:34	→	pavonia has joined #haskell
2021-08-29 00:44:58	→	_xor has joined #haskell
2021-08-29 00:45:14	→	vysn has joined #haskell
2021-08-29 00:45:48	←	Guest9786 has quit (Remote host closed the connection)
2021-08-29 00:45:55	→	martin02 has joined #haskell
2021-08-29 00:46:20	←	neo2 has quit (Ping timeout: 250 seconds)
2021-08-29 00:46:29	→	chris has joined #haskell
2021-08-29 00:46:32	ℹ	chris is now known as Guest473
2021-08-29 00:51:01	←	Guest473 has quit (Ping timeout: 252 seconds)
2021-08-29 00:53:25	→	chris has joined #haskell
2021-08-29 00:53:29	ℹ	chris is now known as Guest1221
2021-08-29 00:54:43	→	mastarija has joined #haskell
2021-08-29 00:57:13	mastarija	any idea how I might be able to escape this in haddock: `failIf [UnderAge] (<18)`? It interprets [UnderAge] (<18) as a markdown link syntax. I tried "escaping" the brackets, but then they render with backslashes (which isn't really escaping them).
2021-08-29 01:01:26	hololeap	are you trying to put a code snippet in the doc?
2021-08-29 01:01:31	→	acidjnk has joined #haskell
2021-08-29 01:02:24	hololeap	https://www.haskell.org/haddock/doc/html/ch03s08.html#idm140354810780208
2021-08-29 01:02:24	hololeap	you wrap the code in "at signs" @
2021-08-29 01:02:24	hololeap	it doesn't use the markdown syntax
2021-08-29 01:02:46	mastarija	hololeap, I use @@ block, not inline
2021-08-29 01:02:56	→	burnsidesLlama has joined #haskell
2021-08-29 01:03:07	mastarija	and it has that problem
2021-08-29 01:03:20	←	Guest1221 has quit (Remote host closed the connection)
2021-08-29 01:04:01	→	chris has joined #haskell
2021-08-29 01:04:05	ℹ	chris is now known as Guest7545
2021-08-29 01:05:18	mastarija	I mean, it's the same if I do it inline as well.
2021-08-29 01:08:33	←	Guest7545 has quit (Ping timeout: 250 seconds)
2021-08-29 01:10:36	←	azeem has quit (Ping timeout: 250 seconds)
2021-08-29 01:10:52	→	azeem has joined #haskell
2021-08-29 01:12:40	hololeap	can you post the actual line of code?
2021-08-29 01:13:50	mastarija	Sure, just a sec
2021-08-29 01:13:53	→	tput has joined #haskell
2021-08-29 01:14:11	mastarija	hololeap, `ageV = 'adapt' unAge $ 'passIf' [AgeUnder] (>18) <> 'failIf' [AgeOver] (>65)`
2021-08-29 01:15:01	hololeap	so are you using backticks or @ ?
2021-08-29 01:15:23	mastarija	sorry, habit
2021-08-29 01:15:25	mastarija	I use @
2021-08-29 01:15:43	hololeap	can you post the actual line of code copied directly from your sorce?
2021-08-29 01:16:53	hololeap	sorry, lines, since you said it was a block... you can use https://paste.tomsmeding.com
2021-08-29 01:17:30	mastarija	hololeap, https://paste.tomsmeding.com/p9hVfre9
2021-08-29 01:19:43	hololeap	maralorn: hm, try indenting the code block (not the @'s) by four spaces
2021-08-29 01:20:13	hololeap	that's the way it's shown in the doc
2021-08-29 01:20:22	mastarija	hololeap, nope doesn't work
2021-08-29 01:20:34	←	wroathe has quit (Ping timeout: 250 seconds)
2021-08-29 01:20:35	maerwald	is there a optparse-applicative plugin that shows suggestions on mistyping flags/commands?
2021-08-29 01:20:54	maerwald	foo --heeelp -- did you mean `--help`?
2021-08-29 01:21:02	mastarija	It still renders as linked AgeOver instead of [AgeOver] (>65)
2021-08-29 01:21:17	hololeap	mastarija: > Additionally, the character > has a special meaning at the beginning of a line, and the following characters have special meanings at the beginning of a paragraph: *, -. These characters can also be escaped using \.
2021-08-29 01:21:56	hololeap	mastarija: try escaping the > in front of 18 like so: (\>18)@
2021-08-29 01:22:13	hololeap	and also 64
2021-08-29 01:22:15	hololeap	*65
2021-08-29 01:22:33	⚡	hololeap might be clutching at straws here
2021-08-29 01:22:53	mastarija	I tried escaping [ with \[, but it just renders it as \[. Similarly, escaping > does nothing :(
2021-08-29 01:23:21	←	gehmehgeh has quit (Quit: Leaving)
2021-08-29 01:23:40	hololeap	mastarija: you might have a typo if you meant <18 :p
2021-08-29 01:24:22	mastarija	hololeap, `passIf`, not `failIf` :P
2021-08-29 01:24:55	hololeap	oh, good point
2021-08-29 01:25:24	mastarija	damn, this is annoying
2021-08-29 01:25:37	mastarija	Almost done with all the documentation, and this is such pain in the ass
2021-08-29 01:25:46	mastarija	And I have plenty of such examples
2021-08-29 01:26:16	←	PinealGlandOptic has quit (Quit: leaving)
2021-08-29 01:27:24	hololeap	mastarija: can you identify which one of these you think it is erroneously parsing from your code block: https://www.haskell.org/haddock/doc/html/ch03s08.html#idm140354810770608
2021-08-29 01:27:27	mastarija	hm.. I can use > to start a code line, but then I loose ability to link to my functions within the documentation
2021-08-29 01:27:36	←	Lord_of_Life has quit (Ping timeout: 250 seconds)
2021-08-29 01:27:56	hololeap	it's hard to verify since I can't see the output
2021-08-29 01:29:11	mastarija	It's not listed there, but it is a markdown link syntax. e.g. [Link text](https://linkurl.com)
2021-08-29 01:29:28	←	dsrt^ has quit (Ping timeout: 248 seconds)
2021-08-29 01:29:31	mastarija	It's technically correct
2021-08-29 01:29:37	→	Guest32 has joined #haskell
2021-08-29 01:29:38	mastarija	But I can't find a way to escape it
2021-08-29 01:29:47	←	juhp_ has quit (Ping timeout: 240 seconds)
2021-08-29 01:30:51	→	dsrt^ has joined #haskell
2021-08-29 01:31:07	→	Lord_of_Life has joined #haskell
2021-08-29 01:32:35	←	Guest32 has quit (Quit: Client closed)
2021-08-29 01:33:44	→	josh has joined #haskell
2021-08-29 01:34:07	ℹ	josh is now known as Guest8166
2021-08-29 01:36:03	hololeap	mastarija: ok, I confirmed it
2021-08-29 01:36:21	mastarija	I reported it in the meantime :D
2021-08-29 01:36:33	hololeap	good idea
2021-08-29 01:36:39	hololeap	because I don't see that documented
2021-08-29 01:36:51	hololeap	and it shouldn't be happening inside a code block
2021-08-29 01:37:40	→	APic has joined #haskell
2021-08-29 01:37:44	mastarija	I've found a stackoverflow question where they confirmed it used to happen on GitHub as well, but they have added ability to escape [] later.
2021-08-29 01:38:01	jiribenes	maerwald: AFAICT optparse-applicative already does this automatically when you're close enough
2021-08-29 01:38:07	jiribenes	something like "edit distance at most two"
2021-08-29 01:38:57	jiribenes	yeah, see here https://github.com/pcapriotti/optparse-applicative/blob/8edc41994984cbfdfc1ee960e4d4d112cfccbc11/src/Options/Applicative/Extra.hs#L256-L309
2021-08-29 01:39:59	←	emliunix has quit (Remote host closed the connection)
2021-08-29 01:40:18	→	emliunix has joined #haskell
2021-08-29 01:40:57	←	fresheyeball has quit (Quit: WeeChat 2.9)
2021-08-29 01:45:11	→	tllp has joined #haskell
2021-08-29 01:45:31	maerwald	jiribenes: doesn't seem to work for subcommands
2021-08-29 01:49:46	→	hololeap_ has joined #haskell
2021-08-29 01:50:25	←	azeem has quit (Ping timeout: 252 seconds)
2021-08-29 01:51:58	→	azeem has joined #haskell
2021-08-29 01:52:18	←	hololeap has quit (Ping timeout: 276 seconds)
2021-08-29 01:52:41	←	Lord_of_Life has quit (Read error: Connection reset by peer)
2021-08-29 01:53:06	ℹ	hololeap_ is now known as hololeap
2021-08-29 02:00:52	←	burnsidesLlama has quit (Remote host closed the connection)
2021-08-29 02:01:19	→	burnsidesLlama has joined #haskell
2021-08-29 02:05:40	←	burnsidesLlama has quit (Ping timeout: 240 seconds)
2021-08-29 02:11:42	←	azeem has quit (Ping timeout: 250 seconds)
2021-08-29 02:12:44	→	azeem has joined #haskell
2021-08-29 02:14:44	→	wroathe has joined #haskell
2021-08-29 02:14:44	←	wroathe has quit (Changing host)
2021-08-29 02:14:44	→	wroathe has joined #haskell
2021-08-29 02:17:06	→	merijn has joined #haskell
2021-08-29 02:17:56	←	Pickchea has quit (Quit: Leaving)
2021-08-29 02:26:58	→	Lord_of_Life has joined #haskell
2021-08-29 02:29:07	←	wroathe has quit (Ping timeout: 240 seconds)
2021-08-29 02:30:39	←	Lord_of_Life has quit (Client Quit)
2021-08-29 02:30:43	→	enoq has joined #haskell
2021-08-29 02:31:09	→	Lord_of_Life has joined #haskell
2021-08-29 02:33:52	←	Morrow_ has quit (Ping timeout: 252 seconds)
2021-08-29 02:37:21	←	_ht has quit (Remote host closed the connection)
2021-08-29 02:38:33	←	eggplantade has quit (Remote host closed the connection)
2021-08-29 02:41:29	→	Sgeo has joined #haskell
2021-08-29 02:42:43	→	wroathe has joined #haskell
2021-08-29 02:42:43	←	wroathe has quit (Changing host)
2021-08-29 02:42:43	→	wroathe has joined #haskell
2021-08-29 02:42:46	ℹ	irc: disconnected from server
2021-08-29 04:01:05	→	oxide has joined #haskell
2021-08-29 04:01:05	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-29 04:01:05	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-29 04:01:05	ℹ	Channel #haskell: 730 nicks (1 op, 0 voices, 729 normals)
2021-08-29 04:01:06	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-29 04:02:24	←	d0ku has quit (Ping timeout: 252 seconds)
2021-08-29 04:04:40	←	wroathe has quit (Ping timeout: 240 seconds)
2021-08-29 04:06:12	←	bitdex_ has quit (Ping timeout: 276 seconds)
2021-08-29 04:08:25	→	bitdex_ has joined #haskell
2021-08-29 04:08:57	←	minimario has quit (Ping timeout: 256 seconds)
2021-08-29 04:12:08	←	fendor_ has quit (Ping timeout: 248 seconds)
2021-08-29 04:13:49	→	acidjnk_new has joined #haskell
2021-08-29 04:16:29	enab2	c_wraith: I understand. If a function is typeclass polymorphic will this hidden argument be the first or the last argument of the function?
2021-08-29 04:16:48	c_wraith	first.  GHC actually compiles => as -> in core
2021-08-29 04:17:28	←	acidjnk has quit (Ping timeout: 250 seconds)
2021-08-29 04:21:03	←	haykam has quit (Remote host closed the connection)
2021-08-29 04:21:16	→	haykam has joined #haskell
2021-08-29 04:24:48	←	enoq has quit (Quit: enoq)
2021-08-29 04:28:12	←	kimjetwav has quit (Ping timeout: 250 seconds)
2021-08-29 04:32:38	←	qbt has quit (Ping timeout: 250 seconds)
2021-08-29 04:33:21	←	asthasr has quit (Remote host closed the connection)
2021-08-29 04:34:40	→	asthasr has joined #haskell
2021-08-29 04:36:00	←	hendi has quit (Ping timeout: 250 seconds)
2021-08-29 04:36:21	←	jtomas has quit (Remote host closed the connection)
2021-08-29 04:41:11	→	hendi has joined #haskell
2021-08-29 04:41:47	←	Vajb has quit (Read error: Connection reset by peer)
2021-08-29 04:41:59	→	Vajb has joined #haskell
2021-08-29 04:42:46	→	d0ku has joined #haskell
2021-08-29 04:44:01	←	hnOsmium0001 has quit (Quit: Connection closed for inactivity)
2021-08-29 04:45:51	←	Gurkenglas has quit (Ping timeout: 252 seconds)
2021-08-29 04:48:01	→	merijn has joined #haskell
2021-08-29 04:49:40	←	idnar has quit (Ping timeout: 258 seconds)
2021-08-29 04:49:56	←	yaroot has quit (Quit: The Lounge - https://thelounge.chat)
2021-08-29 04:50:10	→	wroathe has joined #haskell
2021-08-29 04:50:11	←	wroathe has quit (Changing host)
2021-08-29 04:50:11	→	wroathe has joined #haskell
2021-08-29 04:50:34	janus	if you have multiple constraints, will there be multiple dictionaries? or one for the whole combination?
2021-08-29 04:51:25	→	lavaman has joined #haskell
2021-08-29 04:51:53	→	idnar has joined #haskell
2021-08-29 04:53:50	janus	i always imagined there would be one dictionary per instance chosen, but there can be only one =>. so are the dictionaries put in a tuple?
2021-08-29 04:54:38	←	hendi has quit (Ping timeout: 250 seconds)
2021-08-29 04:55:04	←	Pent has quit (Ping timeout: 250 seconds)
2021-08-29 04:55:19	geekosaur	actually there can be more than one => (there's not supposed to be, it's a side effect of how ghc implements it)
2021-08-29 04:55:27	←	lavaman has quit (Ping timeout: 240 seconds)
2021-08-29 04:56:22	←	d0ku has quit (Ping timeout: 250 seconds)
2021-08-29 04:56:23	hpc	higher-ranked types can have more (=>) without being weird
2021-08-29 04:57:32	→	zebrag has joined #haskell
2021-08-29 04:58:04	→	Pent has joined #haskell
2021-08-29 04:58:09	→	hendi has joined #haskell
2021-08-29 04:58:13	janus	hpc: oh, do you know of an example? it's hard to hoogle or google
2021-08-29 04:59:30	←	acidjnk_new has quit (Ping timeout: 250 seconds)
2021-08-29 05:02:04	monochrom	execute :: MonadIO m => (forall n. MyMonadClass n => n a) -> m a
2021-08-29 05:02:27	hpc	foo :: IsString s => (forall s' a. (Show a, IsString s') => a -> s') -> s
2021-08-29 05:02:42	hpc	foo f = (f "this", f 5)
2021-08-29 05:02:46	hpc	or something along those lines
2021-08-29 05:02:50	hpc	too lazy to ghci :P
2021-08-29 05:05:35	←	enab2 has quit (Quit: WeeChat 3.0.1)
2021-08-29 05:07:39	←	tllp has quit (Quit: nyaa~)
2021-08-29 05:08:04	←	Adeon has quit (Ping timeout: 250 seconds)
2021-08-29 05:08:40	←	NemesisD has quit (Ping timeout: 248 seconds)
2021-08-29 05:09:04	←	vysn has quit (Remote host closed the connection)
2021-08-29 05:09:06	←	idnar has quit (Ping timeout: 240 seconds)
2021-08-29 05:09:21	→	dajoer has joined #haskell
2021-08-29 05:09:30	←	raehik has quit (Ping timeout: 252 seconds)
2021-08-29 05:10:48	←	Pent has quit (Ping timeout: 248 seconds)
2021-08-29 05:10:56	→	Guest|50 has joined #haskell
2021-08-29 05:11:52	→	NemesisD has joined #haskell
2021-08-29 05:12:31	→	Adeon has joined #haskell
2021-08-29 05:12:37	←	enemeth79 has quit (Ping timeout: 245 seconds)
2021-08-29 05:12:44	→	idnar has joined #haskell
2021-08-29 05:13:42	←	hsiktas has quit (Ping timeout: 250 seconds)
2021-08-29 05:14:17	→	Pent has joined #haskell
2021-08-29 05:14:29	←	Guest|50 has quit (Client Quit)
2021-08-29 05:14:55	→	yaroot has joined #haskell
2021-08-29 05:15:07	←	martin02 has quit (Ping timeout: 240 seconds)
2021-08-29 05:15:07	→	enemeth79 has joined #haskell
2021-08-29 05:17:07	←	integral has quit (Ping timeout: 240 seconds)
2021-08-29 05:18:01	→	integral has joined #haskell
2021-08-29 05:18:02	←	nrr has quit (Ping timeout: 250 seconds)
2021-08-29 05:18:38	→	hsiktas has joined #haskell
2021-08-29 05:19:52	←	azeem has quit (Ping timeout: 248 seconds)
2021-08-29 05:19:52	←	hsiktas has quit (Max SendQ exceeded)
2021-08-29 05:22:02	←	merijn has quit (Ping timeout: 250 seconds)
2021-08-29 05:22:45	→	hsiktas has joined #haskell
2021-08-29 05:25:07	→	nrr has joined #haskell
2021-08-29 05:25:24	←	haykam has quit (Remote host closed the connection)
2021-08-29 05:25:27	←	Jeanne-Kamikaze has quit (Quit: Leaving)
2021-08-29 05:25:30	←	hendi has quit (Ping timeout: 250 seconds)
2021-08-29 05:25:37	→	haykam has joined #haskell
2021-08-29 05:27:57	→	hendi has joined #haskell
2021-08-29 05:29:45	→	azeem has joined #haskell
2021-08-29 05:38:40	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-29 05:40:46	→	azeem has joined #haskell
2021-08-29 05:41:20	→	jlamothe has joined #haskell
2021-08-29 05:41:47	koz	The documentation for Data.Complex.Complex refers to an Ord instance, but that data type lacks one. Is this a typo, or is the instance cleverly hidden someplace?
2021-08-29 05:45:30	geekosaur	strictly speaking it shouldn't have one
2021-08-29 05:48:29	koz	Agreed, but this documentation suggests it existed once, got removed, but not completely.
2021-08-29 05:48:51	koz	I mean, even Gaussian integers don't have a total order that respects arithmetic.
2021-08-29 05:51:05	→	[_] has joined #haskell
2021-08-29 05:53:10	←	[itchyjunk] has quit (Ping timeout: 240 seconds)
2021-08-29 05:53:50	ℹ	[_] is now known as [itchyjunk]
2021-08-29 05:53:51	→	justsomeguy has joined #haskell
2021-08-29 05:56:46	←	justsomeguy has quit (Client Quit)
2021-08-29 06:04:10	←	benin036932 has quit (Ping timeout: 240 seconds)
2021-08-29 06:04:33	→	benin036932 has joined #haskell
2021-08-29 06:08:07	←	Morrow_ has quit (Remote host closed the connection)
2021-08-29 06:08:39	→	Morrow_ has joined #haskell
2021-08-29 06:13:22	←	[itchyjunk] has quit (Remote host closed the connection)
2021-08-29 06:13:47	→	[itchyjunk] has joined #haskell
2021-08-29 06:16:34	monochrom	I think it's just a matter of forgetting to delete a sentence.
2021-08-29 06:23:20	←	azeem has quit (Ping timeout: 248 seconds)
2021-08-29 06:27:02	←	mud has quit (Ping timeout: 250 seconds)
2021-08-29 06:28:14	→	azeem has joined #haskell
2021-08-29 06:34:46	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-29 06:35:03	←	geekosaur has quit (Remote host closed the connection)
2021-08-29 06:35:27	→	geekosaur has joined #haskell
2021-08-29 06:41:29	→	neurocyte3 has joined #haskell
2021-08-29 06:41:29	←	neurocyte3 has quit (Changing host)
2021-08-29 06:41:29	→	neurocyte3 has joined #haskell
2021-08-29 06:42:27	←	albet70 has quit (Remote host closed the connection)
2021-08-29 06:43:10	←	waleee has quit (Ping timeout: 240 seconds)
2021-08-29 06:43:30	←	neurocyte has quit (Ping timeout: 250 seconds)
2021-08-29 06:43:30	ℹ	neurocyte3 is now known as neurocyte
2021-08-29 06:43:33	→	albet70 has joined #haskell
2021-08-29 06:45:11	←	xsperry has quit (Remote host closed the connection)
2021-08-29 06:50:04	→	azeem has joined #haskell
2021-08-29 06:50:13	→	hnOsmium0001 has joined #haskell
2021-08-29 07:00:20	→	martin02 has joined #haskell
2021-08-29 07:03:45	←	egoist has quit (Quit: WeeChat 3.2)
2021-08-29 07:07:46	←	xff0x has quit (Ping timeout: 250 seconds)
2021-08-29 07:09:45	→	xff0x has joined #haskell
2021-08-29 07:12:23	←	TranquilEcho has quit (Quit: WeeChat 2.8)
2021-08-29 07:12:57	→	MQ-17J has joined #haskell
2021-08-29 07:18:07	←	shailangsa has quit (Ping timeout: 240 seconds)
2021-08-29 07:18:39	→	merijn has joined #haskell
2021-08-29 07:18:45	←	pretty_dumm_guy has quit (Quit: WeeChat 3.2)
2021-08-29 07:20:24	→	misu has joined #haskell
2021-08-29 07:23:36	←	misu has quit (Quit: Leaving)
2021-08-29 07:31:02	iqubic	Why doesn't Complex have an ord instance? Data.Linear's V2 type has one. https://hackage.haskell.org/package/linear-1.21.6/docs/Linear-V2.html
2021-08-29 07:31:10	iqubic	I fail to see the difference there.
2021-08-29 07:39:02	pavonia	I guess it's only there for practical reasons like storing those numbers in a Map
2021-08-29 07:39:38	geekosaur	does V2 have a Num instance?
2021-08-29 07:40:03	pavonia	Yes
2021-08-29 07:40:34	→	t3hyoshi has joined #haskell
2021-08-29 07:40:40	janus	could the reason why V2 has one and Complex doesn't be, that people usually mention the x axis before the y axis? but complex is not for cartesian coordinates
2021-08-29 07:41:19	janus	i am not great at math, be kind :P
2021-08-29 07:42:38	→	finn_elija has joined #haskell
2021-08-29 07:42:38	←	FinnElija has quit (Killed (zirconium.libera.chat (Nickname regained by services)))
2021-08-29 07:42:38	ℹ	finn_elija is now known as FinnElija
2021-08-29 07:43:13	janus	or do you think that V2 is not just for cartesian coordinates?
2021-08-29 07:46:20	nshepperd	it's a matter of ideology
2021-08-29 07:46:39	nshepperd	and the maintainer of linear is different from the maintainers of base
2021-08-29 07:47:40	janus	nshepperd: what is an example of an ideological opinion we're seeing here?
2021-08-29 07:48:08	nshepperd	that the ordering expressed by Ord must be compatible with arithmetic
2021-08-29 07:49:44	←	azeem has quit (Ping timeout: 248 seconds)
2021-08-29 07:50:19	janus	so "class Ord" is underspecified because it doesn't state its opinion? not necessarily sinfully underspecified, but underspecified, right?
2021-08-29 07:52:37	→	shailangsa has joined #haskell
2021-08-29 07:52:56	←	merijn has quit (Ping timeout: 248 seconds)
2021-08-29 07:53:22	→	azeem has joined #haskell
2021-08-29 07:54:29	nshepperd	it mentions that there aren't any laws in the haskell report, but does state desiderata that it should at least be a non strict partial order
2021-08-29 07:55:01	nshepperd	you could take that as stating an opinion against such a requirement or as stating no opinion i suppose
2021-08-29 07:56:42	←	td_ has quit (Ping timeout: 252 seconds)
2021-08-29 07:58:41	→	td_ has joined #haskell
2021-08-29 07:58:59	←	HarveyPwca has quit (Quit: Leaving)
2021-08-29 08:10:32	←	azeem has quit (Ping timeout: 248 seconds)
2021-08-29 08:11:15	→	azeem has joined #haskell
2021-08-29 08:15:17	shachaf	Double has an Ord instance, so who knows what it means, really.
2021-08-29 08:24:12	←	azeem has quit (Ping timeout: 252 seconds)
2021-08-29 08:24:30	→	azeem has joined #haskell
2021-08-29 08:26:16	←	alx741 has quit (Quit: alx741)
2021-08-29 08:30:32	←	ArctVaulMarsHMPJ has quit (Ping timeout: 250 seconds)
2021-08-29 08:39:38	←	azeem has quit (Ping timeout: 250 seconds)
2021-08-29 08:45:42	←	otto_s has quit (Ping timeout: 250 seconds)
2021-08-29 08:47:18	→	otto_s has joined #haskell
2021-08-29 08:49:19	→	azeem has joined #haskell
2021-08-29 08:52:32	→	ArctVaulMarsHMPJ has joined #haskell
2021-08-29 08:53:03	→	lavaman has joined #haskell
2021-08-29 08:56:05	→	NoidedSuper has joined #haskell
2021-08-29 08:57:27	NoidedSuper	As horrible as working with type-level stuff in Haskell can be
2021-08-29 08:57:33	NoidedSuper	When you get it working it feels so, so good
2021-08-29 08:57:45	←	lavaman has quit (Ping timeout: 252 seconds)
2021-08-29 08:57:57	NoidedSuper	(sneak preview of a thing I hope will eventually be really useful to a lot of people: https://gist.github.com/AnthonySuper/eecf08998135685774cfbc17f484327b) 
2021-08-29 09:00:28	←	albet70 has quit (Remote host closed the connection)
2021-08-29 09:00:34	←	haykam has quit (Remote host closed the connection)
2021-08-29 09:00:47	→	haykam has joined #haskell
2021-08-29 09:01:35	→	albet70 has joined #haskell
2021-08-29 09:04:22	→	falafel has joined #haskell
2021-08-29 09:06:10	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-29 09:07:56	→	lavaman has joined #haskell
2021-08-29 09:09:18	←	cheater has quit (Ping timeout: 252 seconds)
2021-08-29 09:13:34	→	azeem has joined #haskell
2021-08-29 09:17:46	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-29 09:18:21	←	NoidedSuper has quit (Ping timeout: 256 seconds)
2021-08-29 09:23:53	←	AlistairB has quit (Quit: Client closed)
2021-08-29 09:25:15	←	slowButPresent has quit (Quit: leaving)
2021-08-29 09:25:59	→	azeem has joined #haskell
2021-08-29 09:27:08	←	hololeap has quit (Remote host closed the connection)
2021-08-29 09:27:49	→	hololeap has joined #haskell
2021-08-29 09:39:00	←	azeem has quit (Ping timeout: 252 seconds)
2021-08-29 09:39:23	janus	argh why leave right after posting...
2021-08-29 09:43:57	→	azeem has joined #haskell
2021-08-29 09:45:04	←	MQ-17J has quit (Ping timeout: 250 seconds)
2021-08-29 09:48:59	→	merijn has joined #haskell
2021-08-29 09:49:11	→	vicfred has joined #haskell
2021-08-29 09:58:09	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-29 09:58:10	→	juhp has joined #haskell
2021-08-29 10:02:09	←	zebrag has quit (Quit: Konversation terminated!)
2021-08-29 10:02:15	→	MQ-17J has joined #haskell
2021-08-29 10:04:18	←	Morrow_ has quit (Ping timeout: 252 seconds)
2021-08-29 10:06:15	→	azeem has joined #haskell
2021-08-29 10:14:58	←	azeem has quit (Ping timeout: 250 seconds)
2021-08-29 10:15:17	→	azeem has joined #haskell
2021-08-29 10:16:32	→	logan__ has joined #haskell
2021-08-29 10:17:34	←	favonia has quit (Ping timeout: 250 seconds)
2021-08-29 10:17:58	←	logan__ has quit (Client Quit)
2021-08-29 10:22:47	←	merijn has quit (Ping timeout: 240 seconds)
2021-08-29 10:23:58	←	azeem has quit (Ping timeout: 250 seconds)
2021-08-29 10:24:22	←	[itchyjunk] has quit (Remote host closed the connection)
2021-08-29 10:24:39	→	dyeplexer has joined #haskell
2021-08-29 10:29:13	→	favonia has joined #haskell
2021-08-29 10:31:23	→	justsomeguy has joined #haskell
2021-08-29 10:31:46	→	machinedgod has joined #haskell
2021-08-29 10:32:57	→	azeem has joined #haskell
2021-08-29 10:42:14	→	sjb0 has joined #haskell
2021-08-29 10:48:18	←	azeem has quit (Ping timeout: 252 seconds)
2021-08-29 10:50:41	←	Adran has quit (Remote host closed the connection)
2021-08-29 10:52:01	→	azeem has joined #haskell
2021-08-29 10:55:10	←	martin02 has quit (Ping timeout: 240 seconds)
2021-08-29 10:58:13	→	Adran has joined #haskell
2021-08-29 11:05:01	ℹ	irc: disconnected from server
2021-08-29 11:05:19	→	oxide has joined #haskell
2021-08-29 11:05:19	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-29 11:05:19	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-29 11:05:19	ℹ	Channel #haskell: 715 nicks (1 op, 0 voices, 714 normals)
2021-08-29 11:05:19	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-29 11:09:05	→	martin02 has joined #haskell
2021-08-29 11:13:20	→	mei has joined #haskell
2021-08-29 11:14:46	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-29 11:15:23	→	azeem has joined #haskell
2021-08-29 11:16:09	←	falafel has quit (Ping timeout: 240 seconds)
2021-08-29 11:17:54	→	falafel has joined #haskell
2021-08-29 11:20:23	→	Morrow_ has joined #haskell
2021-08-29 11:24:26	←	Morrow_ has quit (Ping timeout: 240 seconds)
2021-08-29 11:34:54	ℹ	ormaaj is now known as jaamro
2021-08-29 11:35:01	←	azeem has quit (Ping timeout: 250 seconds)
2021-08-29 11:35:34	←	desophos has quit (Quit: Leaving)
2021-08-29 11:35:40	→	azeem has joined #haskell
2021-08-29 11:42:06	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-29 11:42:35	→	azeem has joined #haskell
2021-08-29 11:45:06	←	cross has quit (Ping timeout: 240 seconds)
2021-08-29 11:45:45	→	cross has joined #haskell
2021-08-29 11:46:24	→	Guest8166 has joined #haskell
2021-08-29 11:51:03	←	azeem has quit (Ping timeout: 250 seconds)
2021-08-29 11:51:13	→	azeem has joined #haskell
2021-08-29 12:00:28	←	albet70 has quit (Remote host closed the connection)
2021-08-29 12:01:34	→	albet70 has joined #haskell
2021-08-29 12:03:46	←	spruit11 has quit (Ping timeout: 240 seconds)
2021-08-29 12:04:12	←	Guest8166 has quit (Ping timeout: 252 seconds)
2021-08-29 12:05:51	←	falafel has quit (Ping timeout: 252 seconds)
2021-08-29 12:10:09	←	justsomeguy has quit (Ping timeout: 240 seconds)
2021-08-29 12:17:47	→	spruit11 has joined #haskell
2021-08-29 12:18:28	←	wroathe has quit (Ping timeout: 250 seconds)
2021-08-29 12:19:55	→	merijn has joined #haskell
2021-08-29 12:22:06	←	tzh has quit (Quit: zzz)
2021-08-29 12:22:22	←	spruit11 has quit (Ping timeout: 250 seconds)
2021-08-29 12:27:22	→	burnsidesLlama has joined #haskell
2021-08-29 12:30:41	←	burnsidesLlama has quit (Remote host closed the connection)
2021-08-29 12:31:13	→	burnsidesLlama has joined #haskell
2021-08-29 12:34:03	→	max22- has joined #haskell
2021-08-29 12:35:00	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-08-29 12:35:33	←	burnsidesLlama has quit (Ping timeout: 252 seconds)
2021-08-29 12:35:45	→	MQ-17J has joined #haskell
2021-08-29 12:40:17	←	vicfred has quit (Quit: Leaving)
2021-08-29 12:47:40	←	Sgeo has quit (Read error: Connection reset by peer)
2021-08-29 12:50:56	→	Sgeo has joined #haskell
2021-08-29 12:52:01	→	spruit11 has joined #haskell
2021-08-29 12:54:16	←	merijn has quit (Ping timeout: 248 seconds)
2021-08-29 12:56:56	←	spruit11 has quit (Ping timeout: 250 seconds)
2021-08-29 12:59:13	←	Cajun has quit (Quit: Client closed)
2021-08-29 13:02:20	→	burnsidesLlama has joined #haskell
2021-08-29 13:03:43	→	mikoto-chan has joined #haskell
2021-08-29 13:06:26	←	burnsidesLlama has quit (Ping timeout: 240 seconds)
2021-08-29 13:11:01	→	spruit11 has joined #haskell
2021-08-29 13:12:39	→	Lycurgus has joined #haskell
2021-08-29 13:15:06	←	spruit11 has quit (Ping timeout: 240 seconds)
2021-08-29 13:17:08	→	takuan has joined #haskell
2021-08-29 13:17:46	→	Gurkenglas has joined #haskell
2021-08-29 13:22:19	←	dajoer has quit (Quit: leaving)
2021-08-29 13:27:56	→	burnsidesLlama has joined #haskell
2021-08-29 13:30:00	←	azeem has quit (Ping timeout: 248 seconds)
2021-08-29 13:30:31	→	azeem has joined #haskell
2021-08-29 13:34:10	←	mikoto-chan has quit (Quit: mikoto-chan)
2021-08-29 13:34:30	→	mikoto-chan has joined #haskell
2021-08-29 13:35:48	→	hendursa1 has joined #haskell
2021-08-29 13:37:19	→	qbt has joined #haskell
2021-08-29 13:38:46	←	mikoto-chan has quit (Ping timeout: 240 seconds)
2021-08-29 13:39:29	←	hendursaga has quit (Ping timeout: 276 seconds)
2021-08-29 13:40:06	←	Erutuon has quit (Ping timeout: 240 seconds)
2021-08-29 13:46:11	←	Lycurgus has quit (Quit: Exeunt)
2021-08-29 13:47:38	←	geekosaur has quit (Killed (NickServ (GHOST command used by allbery_b)))
2021-08-29 13:47:38	→	allbery_b has joined #haskell
2021-08-29 13:47:41	ℹ	allbery_b is now known as geekosaur
2021-08-29 13:48:20	→	_ht has joined #haskell
2021-08-29 13:48:38	→	fendor_ has joined #haskell
2021-08-29 13:49:39	←	favonia has quit (Ping timeout: 240 seconds)
2021-08-29 13:50:21	←	jakalx has left #haskell (Error from remote client)
2021-08-29 14:01:21	←	azeem has quit (Ping timeout: 252 seconds)
2021-08-29 14:02:46	→	azeem has joined #haskell
2021-08-29 14:05:57	tomsmeding	I have a haskell program (ircbrowse) that clearly has a memory leak: if I spam it with requests, memory usage steadily grows. However, I've tried all of -hc -hm -hd -hy -hr (also -hb but that crashes?) and while they all break the memory usage down in different ways, in all breakdowns, all categories grow ~equally fast over time, so they give me 0 information. How do I debug this?
2021-08-29 14:07:20	←	azeem has quit (Ping timeout: 248 seconds)
2021-08-29 14:08:57	→	azeem has joined #haskell
2021-08-29 14:09:43	DigitalKiwi	quick everyone respond so that tomsmeding gets OOMed
2021-08-29 14:10:30	maerwald[m]	tomsmeding: enabled StrictData yet :p
2021-08-29 14:10:50	tomsmeding	no :p
2021-08-29 14:10:56	maerwald[m]	Do it
2021-08-29 14:10:57	tomsmeding	like, I can also do git bisect
2021-08-29 14:11:10	tomsmeding	but I'm curious if I can get _some_ diagnostics on this
2021-08-29 14:13:10	→	mikoto-chan has joined #haskell
2021-08-29 14:15:26	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-29 14:15:32	→	jakalx has joined #haskell
2021-08-29 14:16:11	fendor_	tomsmeding, probably ghc-debug?
2021-08-29 14:16:14	ℹ	fendor_ is now known as fendor
2021-08-29 14:16:28	→	spruit11 has joined #haskell
2021-08-29 14:17:14	→	azeem has joined #haskell
2021-08-29 14:17:46	→	Topsi has joined #haskell
2021-08-29 14:17:59	tomsmeding	isn't that only ghc 9.2?
2021-08-29 14:18:13	tomsmeding	(I could try that, sure)
2021-08-29 14:19:32	fendor	yeah, but it was written with that purpose in mind
2021-08-29 14:20:40	←	spruit11 has quit (Ping timeout: 250 seconds)
2021-08-29 14:22:30	tomsmeding	maerwald[m]: ghc-options: -XStrictData doesn't help
2021-08-29 14:24:40	tomsmeding	is there a guide to using ghc-debug?
2021-08-29 14:24:44	tomsmeding	fendor: ^
2021-08-29 14:25:13	fendor	tomsmeding, https://www.youtube.com/watch?v=9zuAsGk9xoM 
2021-08-29 14:25:44	tomsmeding	heh yeah that's still on my watchlist
2021-08-29 14:26:00	fendor	https://github.com/well-typed/memory-usage-zurihac-2021
2021-08-29 14:26:08	fendor	now you have an excuse!
2021-08-29 14:32:40	←	burnsidesLlama has quit (Remote host closed the connection)
2021-08-29 14:34:00	←	hnOsmium0001 has quit (Quit: Connection closed for inactivity)
2021-08-29 14:34:24	→	burnsidesLlama has joined #haskell
2021-08-29 14:34:44	←	burnsidesLlama has quit (Remote host closed the connection)
2021-08-29 14:35:01	←	sjb0 has quit (Read error: Connection timed out)
2021-08-29 14:35:12	→	burnsidesLlama has joined #haskell
2021-08-29 14:37:53	←	takuan has quit (Ping timeout: 250 seconds)
2021-08-29 14:39:37	←	burnsidesLlama has quit (Ping timeout: 250 seconds)
2021-08-29 14:41:30	←	machinedgod has quit (Ping timeout: 252 seconds)
2021-08-29 14:42:15	→	acidjnk_new has joined #haskell
2021-08-29 14:42:27	→	chris has joined #haskell
2021-08-29 14:42:31	ℹ	chris is now known as Guest6436
2021-08-29 14:48:44	←	Morrow has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-08-29 14:48:59	→	Morrow has joined #haskell
2021-08-29 14:49:02	→	sjb0 has joined #haskell
2021-08-29 14:49:26	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-29 14:50:15	→	merijn has joined #haskell
2021-08-29 14:50:30	→	azeem has joined #haskell
2021-08-29 14:51:21	←	eggplantade has quit (Remote host closed the connection)
2021-08-29 14:52:27	←	frobnicator has quit (Quit: WeeChat 3.0)
2021-08-29 14:52:31	←	sjb0 has quit (Read error: Connection reset by peer)
2021-08-29 14:52:58	→	kenran has joined #haskell
2021-08-29 14:53:16	←	andinus has quit (Quit: ERC (IRC client for Emacs 27.1))
2021-08-29 15:01:26	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-29 15:01:49	→	azeem has joined #haskell
2021-08-29 15:06:10	←	azeem has quit (Ping timeout: 250 seconds)
2021-08-29 15:06:43	→	azeem has joined #haskell
2021-08-29 15:07:48	→	burnsidesLlama has joined #haskell
2021-08-29 15:11:16	→	sjb0 has joined #haskell
2021-08-29 15:13:06	←	burnsidesLlama has quit (Ping timeout: 250 seconds)
2021-08-29 15:15:11	←	betelgeuse has quit (Quit: Ping timeout (120 seconds))
2021-08-29 15:15:26	→	burnsidesLlama has joined #haskell
2021-08-29 15:16:33	→	andinus has joined #haskell
2021-08-29 15:16:34	→	betelgeuse has joined #haskell
2021-08-29 15:24:14	←	sjb0 has quit (Quit: Leaving.)
2021-08-29 15:24:24	←	merijn has quit (Ping timeout: 252 seconds)
2021-08-29 15:26:24	←	Sgeo has quit (Read error: Connection reset by peer)
2021-08-29 15:27:05	→	goepsilongo has joined #haskell
2021-08-29 15:29:21	←	kenran has quit (Quit: WeeChat info:version)
2021-08-29 15:32:53	→	mastarija has joined #haskell
2021-08-29 15:33:22	←	mastarija has quit (Client Quit)
2021-08-29 15:36:17	→	cheater has joined #haskell
2021-08-29 15:37:26	→	neo2 has joined #haskell
2021-08-29 15:41:48	←	Guest6436 has quit (Remote host closed the connection)
2021-08-29 15:42:23	→	chris has joined #haskell
2021-08-29 15:42:28	ℹ	chris is now known as Guest3002
2021-08-29 15:42:46	←	hyiltiz has quit (Ping timeout: 240 seconds)
2021-08-29 15:43:11	→	hyiltiz has joined #haskell
2021-08-29 15:45:23	→	gehmehgeh has joined #haskell
2021-08-29 15:45:50	→	merijn has joined #haskell
2021-08-29 15:46:57	←	Guest3002 has quit (Ping timeout: 252 seconds)
2021-08-29 15:47:22	→	waleee has joined #haskell
2021-08-29 15:49:42	←	mikoto-chan has quit (Ping timeout: 252 seconds)
2021-08-29 15:50:56	→	xsperry has joined #haskell
2021-08-29 15:51:40	→	spruit11 has joined #haskell
2021-08-29 15:51:44	→	eggplantade has joined #haskell
2021-08-29 15:55:46	→	tdslaeaoyi^ has joined #haskell
2021-08-29 15:56:06	←	spruit11 has quit (Ping timeout: 240 seconds)
2021-08-29 15:56:09	←	eggplantade has quit (Ping timeout: 240 seconds)
2021-08-29 15:57:15	←	burnsidesLlama has quit (Remote host closed the connection)
2021-08-29 15:57:21	→	burnsidesLlama has joined #haskell
2021-08-29 15:58:32	→	mikoto-chan has joined #haskell
2021-08-29 16:00:32	→	__monty__ has joined #haskell
2021-08-29 16:07:39	←	mikoto-chan has quit (Ping timeout: 240 seconds)
2021-08-29 16:12:12	→	mikoto-chan has joined #haskell
2021-08-29 16:18:18	←	mikoto-chan has quit (Ping timeout: 252 seconds)
2021-08-29 16:23:07	→	spruit11 has joined #haskell
2021-08-29 16:27:38	←	spruit11 has quit (Ping timeout: 250 seconds)
2021-08-29 16:29:25	→	ubert has joined #haskell
2021-08-29 16:31:02	→	alx741 has joined #haskell
2021-08-29 16:31:28	←	fendor has quit (Read error: Connection reset by peer)
2021-08-29 16:31:44	→	fendor has joined #haskell
2021-08-29 16:32:44	→	jumper149 has joined #haskell
2021-08-29 16:35:26	←	gehmehgeh has quit (Remote host closed the connection)
2021-08-29 16:36:11	→	gehmehgeh has joined #haskell
2021-08-29 16:37:00	←	azeem has quit (Ping timeout: 252 seconds)
2021-08-29 16:37:10	←	lavaman has quit (Remote host closed the connection)
2021-08-29 16:37:19	→	jtomas has joined #haskell
2021-08-29 16:37:49	→	lavaman has joined #haskell
2021-08-29 16:40:33	→	azeem has joined #haskell
2021-08-29 16:44:40	←	azeem has quit (Ping timeout: 248 seconds)
2021-08-29 16:45:21	→	azeem has joined #haskell
2021-08-29 16:46:28	→	benin0369324 has joined #haskell
2021-08-29 16:47:20	←	fendor has quit (Read error: Connection reset by peer)
2021-08-29 16:47:45	→	fendor has joined #haskell
2021-08-29 16:48:26	←	benin036932 has quit (Ping timeout: 250 seconds)
2021-08-29 16:48:26	ℹ	benin0369324 is now known as benin036932
2021-08-29 16:48:56	→	pretty_dumm_guy has joined #haskell
2021-08-29 16:52:09	←	fendor has quit (Ping timeout: 240 seconds)
2021-08-29 16:53:06	→	eggplantade has joined #haskell
2021-08-29 16:53:32	←	tdslaeaoyi^ has quit (Remote host closed the connection)
2021-08-29 16:55:19	→	fendor has joined #haskell
2021-08-29 16:55:20	←	merijn has quit (Ping timeout: 248 seconds)
2021-08-29 16:57:32	←	eggplantade has quit (Ping timeout: 250 seconds)
2021-08-29 16:58:40	←	emliunix has quit (Remote host closed the connection)
2021-08-29 16:59:39	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-29 17:00:16	→	azeem has joined #haskell
2021-08-29 17:00:31	←	goepsilongo has quit (Quit: Konversation terminated!)
2021-08-29 17:00:34	→	d0ku has joined #haskell
2021-08-29 17:02:19	←	_xor has quit (Read error: Connection reset by peer)
2021-08-29 17:02:53	→	_xor has joined #haskell
2021-08-29 17:05:01	→	dsrt^ has joined #haskell
2021-08-29 17:05:28	→	kenran has joined #haskell
2021-08-29 17:06:26	←	d0ku has quit (Ping timeout: 240 seconds)
2021-08-29 17:10:40	→	Heisen has joined #haskell
2021-08-29 17:11:55	→	ubert1 has joined #haskell
2021-08-29 17:13:25	←	Heisen has quit (Client Quit)
2021-08-29 17:13:46	←	burnsidesLlama has quit (Remote host closed the connection)
2021-08-29 17:14:17	→	burnsidesLlama has joined #haskell
2021-08-29 17:18:39	←	burnsidesLlama has quit (Ping timeout: 240 seconds)
2021-08-29 17:21:06	→	[itchyjunk] has joined #haskell
2021-08-29 17:22:01	←	aman has left #haskell
2021-08-29 17:22:44	←	__monty__ has quit (Quit: leaving)
2021-08-29 17:23:28	←	ChaiTRex has quit (Quit: ChaiTRex)
2021-08-29 17:32:14	ℹ	irc: disconnected from server
2021-08-29 17:32:34	→	oxide has joined #haskell
2021-08-29 17:32:34	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-29 17:32:34	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-29 17:32:34	ℹ	Channel #haskell: 719 nicks (1 op, 0 voices, 718 normals)
2021-08-29 17:32:35	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-29 17:33:25	→	Vajb has joined #haskell
2021-08-29 17:34:36	→	acidjnk_new3 has joined #haskell
2021-08-29 17:35:37	←	Vajb has quit (Read error: Connection reset by peer)
2021-08-29 17:38:10	←	acidjnk_new has quit (Ping timeout: 250 seconds)
2021-08-29 17:39:09	→	Vajb has joined #haskell
2021-08-29 17:40:45	→	ChaiTRex has joined #haskell
2021-08-29 17:42:27	←	neo2 has quit (Ping timeout: 252 seconds)
2021-08-29 17:46:51	←	kenran has quit (Quit: WeeChat info:version)
2021-08-29 17:48:46	←	azeem has quit (Ping timeout: 240 seconds)
2021-08-29 17:49:34	→	azeem has joined #haskell
2021-08-29 17:58:16	←	azeem has quit (Ping timeout: 248 seconds)
2021-08-29 17:58:57	→	azeem has joined #haskell
2021-08-29 18:01:32	←	Vajb has quit (Read error: Connection reset by peer)
2021-08-29 18:01:32	→	cryptomonad has joined #haskell
2021-08-29 18:03:10	→	Vajb has joined #haskell
2021-08-29 18:03:21	←	azeem has quit (Ping timeout: 252 seconds)
2021-08-29 18:03:54	←	Vajb has quit (Read error: Connection reset by peer)
2021-08-29 18:04:05	→	Vajb has joined #haskell
2021-08-29 18:04:24	→	azeem has joined #haskell
2021-08-29 18:04:41	←	phma has quit (Read error: Connection reset by peer)
2021-08-29 18:04:57	ℹ	irc: disconnected from server
2021-08-29 18:05:26	→	oxide has joined #haskell
2021-08-29 18:05:26	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-29 18:05:26	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-29 18:05:26	ℹ	Channel #haskell: 719 nicks (1 op, 0 voices, 718 normals)
2021-08-29 18:05:26	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-29 18:05:29	→	phma has joined #haskell
2021-08-29 18:09:52	←	cryptomonad has quit (Quit: Quit)
2021-08-29 18:09:59	→	cryptomonad has joined #haskell
2021-08-29 18:13:53	→	PinealGlandOptic has joined #haskell
2021-08-29 18:17:16	ℹ	irc: disconnected from server
2021-08-29 20:13:31	→	oxide has joined #haskell
2021-08-29 20:13:31	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-29 20:13:31	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-29 20:13:31	ℹ	Channel #haskell: 725 nicks (1 op, 0 voices, 724 normals)
2021-08-29 20:13:32	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-29 20:19:13	→	wroathe has joined #haskell
2021-08-29 20:19:13	←	wroathe has quit (Changing host)
2021-08-29 20:19:13	→	wroathe has joined #haskell
2021-08-29 20:21:22	→	dsrt^ has joined #haskell
2021-08-29 20:26:41	→	justsomeguy has joined #haskell
2021-08-29 20:28:26	→	machinedgod has joined #haskell
2021-08-29 20:29:10	←	acidjnk_new has quit (Ping timeout: 245 seconds)
2021-08-29 20:31:31	→	kenran has joined #haskell
2021-08-29 20:34:27	→	zebrag has joined #haskell
2021-08-29 20:36:34	→	kayprish has joined #haskell
2021-08-29 20:38:15	←	cross has quit (Quit: leaving)
2021-08-29 20:38:38	←	martin02 has quit (Ping timeout: 240 seconds)
2021-08-29 20:38:48	→	cross has joined #haskell
2021-08-29 20:44:13	←	max22- has quit (Remote host closed the connection)
2021-08-29 20:46:13	←	lavaman has quit (Remote host closed the connection)
2021-08-29 20:46:24	→	lavaman has joined #haskell
2021-08-29 20:46:30	←	lavaman has quit (Remote host closed the connection)
2021-08-29 20:49:53	→	elf-fortrez has joined #haskell
2021-08-29 20:56:22	→	spruit11 has joined #haskell
2021-08-29 20:57:28	→	amahl has joined #haskell
2021-08-29 20:57:42	→	chisui has joined #haskell
2021-08-29 20:59:58	ℹ	irc: disconnected from server
2021-08-29 23:12:17	→	oxide has joined #haskell
2021-08-29 23:12:17	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-29 23:12:17	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-29 23:12:17	ℹ	Channel #haskell: 732 nicks (1 op, 0 voices, 731 normals)
2021-08-29 23:12:18	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-29 23:13:05	siers	nice!
2021-08-29 23:19:02	←	peterhil has quit (Ping timeout: 252 seconds)
2021-08-29 23:22:04	←	t3hyoshi has quit (Quit: Konversation terminated!)
2021-08-29 23:23:35	←	azeem has quit (Ping timeout: 248 seconds)
2021-08-29 23:26:39	←	random-jellyfish has quit (Ping timeout: 256 seconds)
2021-08-29 23:27:53	→	mastarija has joined #haskell
2021-08-29 23:28:39	mastarija	Do we have any markdown parser that also supports those yaml headers? And isn't pandoc / pandoc dependent?
2021-08-29 23:29:39	sm	could you rephrase that ?
2021-08-29 23:29:46	Rembane_	mastarija: Do you need a markdown parser that isn't Pandoc? Because Pandoc supports it.
2021-08-29 23:30:11	mastarija	Rembane_, yes, something that isn't Pandoc
2021-08-29 23:30:17	mastarija	something small
2021-08-29 23:30:41	sm	search hackage for "markdown" with google (some packages don't have it in their name IIRC)
2021-08-29 23:31:04	mastarija	sm, will try
2021-08-29 23:31:37	→	vicfred has joined #haskell
2021-08-29 23:31:39	mastarija	all I've found on hackage so far was pure markdown, but I want some metadata with my markdown
2021-08-29 23:32:01	Lycurgus	is pandoc still a thing?
2021-08-29 23:32:10	mastarija	Lycurgus, a big thing
2021-08-29 23:32:39	Lycurgus	ah good just checking
2021-08-29 23:33:28	Rembane_	mastarija: If you don't find anything that supports YAML headers you can parse out the header first yourself and then send the rest to the markdown parser 
2021-08-29 23:33:37	mastarija	Yes, that's my backup plan
2021-08-29 23:33:49	mastarija	But I've found mmark now
2021-08-29 23:34:01	mastarija	Put markdown and yaml in google and that came out
2021-08-29 23:34:16	→	lavaman has joined #haskell
2021-08-29 23:34:26	sm	mastarija, cmark or cheapskate seem the way to go
2021-08-29 23:34:38	davean	mastarija: you don't do metadata with markdown, yaml the spec has a thing for trailing data that you would THEN feed into markdown processors
2021-08-29 23:34:47	sm	or mmark
2021-08-29 23:34:52	mastarija	davean, ah... yes
2021-08-29 23:35:06	→	wroathe has joined #haskell
2021-08-29 23:35:07	←	wroathe has quit (Changing host)
2021-08-29 23:35:07	→	wroathe has joined #haskell
2021-08-29 23:35:07	mastarija	I was thinking that maybe I'm going about it the wrong way
2021-08-29 23:35:17	davean	mastarija: yep
2021-08-29 23:35:21	←	Lycurgus has quit (Quit: Exeunt)
2021-08-29 23:35:23	mastarija	but then again, I'm looking for out of the box experience
2021-08-29 23:35:24	davean	Nice and easy actually
2021-08-29 23:35:51	mastarija	davean, so maybe I can use cmark + yaml package
2021-08-29 23:37:08	mastarija	davean, do you maybe know of an example, how does one access the trailing data, is it a special YAML field name?
2021-08-29 23:37:09	davean	mastarija: yep
2021-08-29 23:37:32	davean	Oh god, I haven't done this in a few years lets see if I remember
2021-08-29 23:37:51	mastarija	:)
2021-08-29 23:38:31	←	lavaman has quit (Ping timeout: 248 seconds)
2021-08-29 23:38:33	davean	I stopped using YAML bcause of how insane the spec is
2021-08-29 23:39:36	mastarija	I always heard about the spec being insane, but for me it's just JSON without braces
2021-08-29 23:40:09	⚡	[exa] makes a wish for a decent bencode editor
2021-08-29 23:40:13	davean	ITS VERY MUCH NOT and you can't safely expect thats what it is
2021-08-29 23:40:29	davean	mastarija: Your files can extremely violate that idea
2021-08-29 23:40:33	davean	and no, I don't recall sadly
2021-08-29 23:40:57	davean	Theres a reason there are multiple CSVs of "used yaml as a file format"
2021-08-29 23:41:13	mastarija	I meant, it's JSON for me because how I use it. I'm sure others might have some horror stories :D
2021-08-29 23:41:30	davean	A fully compliant YAML parser can cause arbitrary code execution during decoding :-p 
2021-08-29 23:41:55	mastarija	Lol
2021-08-29 23:41:58	davean	if you only get YAML files from yourself thats fine
2021-08-29 23:42:03	davean	but if someone else can create them?
2021-08-29 23:42:06	davean	Uh
2021-08-29 23:42:13	davean	Enjoy being their cloud provider? :)
2021-08-29 23:43:23	davean	Luckily I don't think theres any YAML parsers that can even do that in Haskell because Haskell doesn't make hooking like that make sense
2021-08-29 23:43:41	davean	but its happened a large number of times in practice
2021-08-29 23:43:45	mastarija	Honestly, I was always a bit skeptical about configuration "languages". Maybe because I don't do very complicated stuff, but things like nix or dhall always look like complications, rather than solutions to me
2021-08-29 23:45:00	davean	oh, no I mean YAML is a data format
2021-08-29 23:45:17	davean	that dataformat can just happen to call constructors in your language with arbitrary parameters
2021-08-29 23:45:27	davean	so like Grovy("heres the script I want to run")
2021-08-29 23:45:45	←	max22- has quit (Ping timeout: 240 seconds)
2021-08-29 23:46:10	mastarija	davean, yes, that execution just reminded me of nix / dhall
2021-08-29 23:46:10	davean	Thats your data
2021-08-29 23:46:13	davean	Ah
2021-08-29 23:46:26	mastarija	So I went on a mini rant :D
2021-08-29 23:49:28	→	thyriaen has joined #haskell
2021-08-29 23:50:39	sm	like backfiring.. set off a mini rant to stop the big rant :)
2021-08-29 23:53:50	→	merijn has joined #haskell
2021-08-29 23:57:22	→	neurocyte2 has joined #haskell
2021-08-29 23:57:23	←	neurocyte2 has quit (Changing host)
2021-08-29 23:57:23	→	neurocyte2 has joined #haskell
2021-08-29 23:57:51	←	neurocyte has quit (Ping timeout: 250 seconds)
2021-08-29 23:57:51	ℹ	neurocyte2 is now known as neurocyte
2021-08-29 23:59:55	←	martin02 has quit (Quit: WeeChat 3.2)
2021-08-30 00:04:09	←	dyeplexer has quit (Ping timeout: 240 seconds)
2021-08-30 00:06:26	←	mikoto-chan has quit (Ping timeout: 240 seconds)
2021-08-30 00:10:38	→	max22- has joined #haskell
2021-08-30 00:14:30	←	jess has quit
2021-08-30 00:14:35	ℹ	Everything is now known as Everyone
2021-08-30 00:15:09	←	Everyone has quit (Quit: leaving)
2021-08-30 00:22:12	→	burnsidesLlama has joined #haskell
2021-08-30 00:23:05	←	notzmv has quit (Ping timeout: 240 seconds)
2021-08-30 00:26:19	←	burnsidesLlama has quit (Remote host closed the connection)
2021-08-30 00:27:22	←	fendor has quit (Remote host closed the connection)
2021-08-30 00:28:20	←	merijn has quit (Ping timeout: 252 seconds)
2021-08-30 00:28:35	→	fendor has joined #haskell
2021-08-30 00:28:57	←	eggplantade has quit (Remote host closed the connection)
2021-08-30 00:29:11	→	eggplantade has joined #haskell
2021-08-30 00:29:45	→	Pickchea has joined #haskell
2021-08-30 00:37:34	←	chexum has quit (Remote host closed the connection)
2021-08-30 00:37:46	→	chexum has joined #haskell
2021-08-30 00:41:00	→	y04nn has joined #haskell
2021-08-30 00:41:17	siers	could you make a excel-kind spreadsheet program with frp?
2021-08-30 00:42:28	maerwald	with frp? :D
2021-08-30 00:42:40	←	eggplantade has quit (Remote host closed the connection)
2021-08-30 00:42:43	siers	react frp, I suppose
2021-08-30 00:46:32	←	Xnuk has quit (Quit: ZNC - https://znc.in)
2021-08-30 00:46:48	→	Xnuk has joined #haskell
2021-08-30 00:46:51	→	ub has joined #haskell
2021-08-30 00:48:01	maerwald	siers: https://i.imgflip.com/5l7mel.jpg
2021-08-30 00:48:04	maerwald	couldn't resist
2021-08-30 00:48:05	←	ubert has quit (Ping timeout: 240 seconds)
2021-08-30 00:48:06	ℹ	ub is now known as ubert
2021-08-30 00:49:08	←	ubert1 has quit (Ping timeout: 240 seconds)
2021-08-30 00:50:58	←	kayprish has quit (Read error: Connection reset by peer)
2021-08-30 00:52:05	←	kenran has quit (Ping timeout: 240 seconds)
2021-08-30 00:52:07	→	burnsidesLlama has joined #haskell
2021-08-30 00:53:16	→	kenran has joined #haskell
2021-08-30 00:53:39	←	tomboy64 has quit (Ping timeout: 250 seconds)
2021-08-30 00:55:30	→	eggplantade has joined #haskell
2021-08-30 00:56:17	←	burnsidesLlama has quit (Remote host closed the connection)
2021-08-30 00:56:51	←	chomwitt has quit (Read error: Connection reset by peer)
2021-08-30 00:57:13	→	chomwitt has joined #haskell
2021-08-30 00:57:35	→	kayprish has joined #haskell
2021-08-30 00:59:10	→	pavonia has joined #haskell
2021-08-30 01:00:15	→	arjun has joined #haskell
2021-08-30 01:01:03	hololeap	siers: you might want to check out elm
2021-08-30 01:01:22	hololeap	if you're making something like that for the browser
2021-08-30 01:01:41	carbolymer	I'm trying to start vim from my shake script: https://bpa.st/SVTA - but I think I need to allocate terminal to make it work interactively - how can I do that?
2021-08-30 01:01:59	siers	hololeap, I would really rather want to try haskell + ghcjs, since it's nothing serious
2021-08-30 01:02:39	→	sts-q has joined #haskell
2021-08-30 01:02:46	hololeap	do you, but I found elm quite fun to work with
2021-08-30 01:03:05	hololeap	once you get used to the restrictions (e.g. no typeclasses)
2021-08-30 01:03:47	maerwald	siers: miso
2021-08-30 01:04:03	←	chisui has quit (Quit: Client closed)
2021-08-30 01:04:28	→	sleblanc has joined #haskell
2021-08-30 01:09:44	→	tomboy64 has joined #haskell
2021-08-30 01:10:54	←	[itchyjunk] has quit (Read error: Connection reset by peer)
2021-08-30 01:12:20	←	Topsi has quit (Read error: Connection reset by peer)
2021-08-30 01:13:26	←	mei has quit (Ping timeout: 252 seconds)
2021-08-30 01:20:32	←	qbt has quit (Remote host closed the connection)
2021-08-30 01:20:55	→	machinedgod has joined #haskell
2021-08-30 01:21:11	→	burnsidesLlama has joined #haskell
2021-08-30 01:22:37	→	mikoto-chan has joined #haskell
2021-08-30 01:25:37	→	notzmv has joined #haskell
2021-08-30 01:26:33	←	burnsidesLlama has quit (Remote host closed the connection)
2021-08-30 01:26:46	→	jtomas_ has joined #haskell
2021-08-30 01:28:09	←	jtomas has quit (Ping timeout: 240 seconds)
2021-08-30 01:29:30	←	_ht has quit (Remote host closed the connection)
2021-08-30 01:38:43	_bin	Good afternoon, this code is failing to compile, saying, "Couldn't match expected type 'Toml.Key' with actual type '[Char]': https://paste.tomsmeding.com/DaT48aj9  It closely matches the example code listed for this library, so I'm unsure as to why this might be happening: https://hackage.haskell.org/package/tomland
2021-08-30 01:39:35	←	benin036932 has quit (Ping timeout: 248 seconds)
2021-08-30 01:40:23	←	jtomas_ has quit (Ping timeout: 252 seconds)
2021-08-30 01:40:26	→	benin036932 has joined #haskell
2021-08-30 01:42:44	→	acidjnk_new has joined #haskell
2021-08-30 01:45:16	c_wraith	_bin: well..  long odds the problem code isn't what you pasted
2021-08-30 01:46:48	←	hendursa1 has quit (Quit: hendursa1)
2021-08-30 01:47:10	c_wraith	_bin: oh, nevermind!  here's your problem:  https://hackage.haskell.org/package/tomland-1.3.3.0/docs/Toml-Codec-Combinator-Primitive.html#v:int
2021-08-30 01:47:38	→	hendursaga has joined #haskell
2021-08-30 01:48:23	_bin	c_wraith: Right, it appears to take a Key, but the example code shows using just string literals and doesn't mention directly creating a Key.
2021-08-30 01:48:32	_bin	Or is there something else?
2021-08-30 01:48:44	c_wraith	_bin: I'd blame out of date examples.  (Examples are always out of date)
2021-08-30 01:49:24	c_wraith	the next line looks probably-wrong too
2021-08-30 01:50:18	_bin	c_wraith: I lost a prior version of the code where it was working, I believe... Another example, updated this February, shows similar: https://github.com/kowainik/tomland/blob/main/examples/Main.hs#L107
2021-08-30 01:50:24	_bin	Next line has the same error, yes.
2021-08-30 01:50:38	→	Ariakenom has joined #haskell
2021-08-30 01:52:02	→	dschrempf has joined #haskell
2021-08-30 01:53:53	c_wraith	yeah, you're basing it on the comment in https://hackage.haskell.org/package/tomland-1.3.3.0/docs/Toml-Codec-Di.html#v:.-61- ?
2021-08-30 01:53:57	c_wraith	that's clearly out of date
2021-08-30 01:54:02	c_wraith	Toml.str doesn't exist
2021-08-30 01:54:15	c_wraith	examples always lie
2021-08-30 01:55:21	c_wraith	Ah.  It expects you to have OverloadedStrings enabled.
2021-08-30 01:55:38	c_wraith	I'd skip that and just call fromString so that inference remains sane
2021-08-30 01:56:38	←	thyriaen has quit (Remote host closed the connection)
2021-08-30 01:59:13	→	burnsidesLlama has joined #haskell
2021-08-30 01:59:37	←	Boomerang has quit (Ping timeout: 250 seconds)
2021-08-30 02:01:20	←	dschrempf has quit (Quit: WeeChat 3.2)
2021-08-30 02:03:02	→	merijn has joined #haskell
2021-08-30 02:03:35	←	burnsidesLlama has quit (Ping timeout: 248 seconds)
2021-08-30 02:04:30	→	d0ku has joined #haskell
2021-08-30 02:05:05	←	arjun has quit (Remote host closed the connection)
2021-08-30 02:06:24	_bin	Thanks, I appreciate it
2021-08-30 02:09:40	_bin	c_wraith: Weirdly, it's still not working with OverloadedStrings.  How would I go about using `fromString` to resolve this?
2021-08-30 02:10:15	c_wraith	same code, just enabled OverloadedStrings?  What error is it giving you now?
2021-08-30 02:12:48	_bin	Yes, exact same but with OverloadedStrings.  Same error: "Couldn't match expected type ‘Toml.Key’ with actual type ‘[Char]’"
2021-08-30 02:13:27	c_wraith	That suggests you didn't actually enable OverloadedStrings.  It would give an error message about IsString a => a  instead of [Char]
2021-08-30 02:14:12	_bin	Oh dang, you're right.  It appears I accidentally put my language directive after the module where line.  My bad.
2021-08-30 02:14:28	c_wraith	easy mistake to make, really.  I've done it several times.
2021-08-30 02:15:13	maerwald	you can also just use `fromString`
2021-08-30 02:15:23	maerwald	it may be more hygienic
2021-08-30 02:15:58	c_wraith	You'll note that was my original recommendation. :P
2021-08-30 02:16:07	←	zebrag has quit (Quit: Konversation terminated!)
2021-08-30 02:16:15	→	Lord_of_Life_ has joined #haskell
2021-08-30 02:16:44	c_wraith	_bin: in case you're curious..  The OverloadedStrings extension just adds fromString calls to all string *literals* in the code.  You can apply those calls yourself, if you so desire.
2021-08-30 02:16:50	maerwald	yeah, overloadedstrings can confuse type inference etc
2021-08-30 02:17:14	_bin	Oh, handy to know, thanks.  I'll give that a shot instead.
2021-08-30 02:17:17	maerwald	it would be cool if you could specify for which literals it works
2021-08-30 02:18:39	←	Lord_of_Life has quit (Ping timeout: 240 seconds)
2021-08-30 02:18:39	ℹ	Lord_of_Life_ is now known as Lord_of_Life
2021-08-30 02:19:09	→	jtomas_ has joined #haskell
2021-08-30 02:19:46	maerwald	that would also solve half of the bytestring debacle, because you could just ban the instance
2021-08-30 02:20:32	←	ubert has quit (Ping timeout: 252 seconds)
2021-08-30 02:20:38	Cale	I think a default declaration might work?
2021-08-30 02:21:20	Cale	At least, if what you want is the same as annotating all the ambiguous stuff with :: Text or some such.
2021-08-30 02:22:03	→	elf_fortrezz has joined #haskell
2021-08-30 02:22:35	c_wraith	Not by itself.  Maybe with ExtendedDefaultRules that would work
2021-08-30 02:23:44	Cale	Haskell’s defaulting mechanism (Haskell Report, Section 4.3.4) is extended to cover string literals, when OverloadedStrings is specified. Specifically:
2021-08-30 02:23:44	Cale	    Each type in a default declaration must be an instance of Num or of IsString.
2021-08-30 02:23:44	Cale	    If no default declaration is given, then it is just as if the module contained the declaration default( Integer, Double, String).
2021-08-30 02:23:44	Cale	    The standard defaulting rule is extended thus: defaulting applies when all the unresolved constraints involve standard classes or IsString; and at least one is a numeric class or IsString.
2021-08-30 02:24:05	c_wraith	oh, huh.  I didn't realize OverloadedStrings included that
2021-08-30 02:25:24	Cale	I didn't know about it either, just suspected that someone might've done it due to the purpose of defaulting in the first place.
2021-08-30 02:28:12	_bin	Cale: Oh cool, thanks for mentioning that.
2021-08-30 02:30:47	←	mikoto-chan has quit (Ping timeout: 248 seconds)
2021-08-30 02:31:13	→	takuan has joined #haskell
2021-08-30 02:31:52	→	ubert has joined #haskell
2021-08-30 02:32:38	→	__monty__ has joined #haskell
2021-08-30 02:33:25	←	elf_fortrezz has quit (Quit: Client closed)
2021-08-30 02:37:02	←	merijn has quit (Ping timeout: 252 seconds)
2021-08-30 02:37:17	←	cryptomonad has quit (Remote host closed the connection)
2021-08-30 02:39:46	→	Codaraxis__ has joined #haskell
2021-08-30 02:43:43	←	Codaraxis_ has quit (Ping timeout: 250 seconds)
2021-08-30 02:43:59	→	Codaraxis has joined #haskell
2021-08-30 02:45:17	←	jtomas_ has quit (Ping timeout: 252 seconds)
2021-08-30 02:47:29	←	Codaraxis__ has quit (Ping timeout: 252 seconds)
2021-08-30 02:53:15	→	opac has joined #haskell
2021-08-30 02:53:59	opac	any book/articles/blogs about haskell bug/vulnerabilities? 
2021-08-30 02:56:02	→	Codaraxis_ has joined #haskell
2021-08-30 02:57:19	maerwald	opac: we've been pretending that doesn't exist... I'm still waiting for the first big incident 
2021-08-30 02:57:21	sm	nope, never happens
2021-08-30 02:57:31	maerwald	we don't even have a CVE workflow
2021-08-30 02:57:36	→	Codaraxis__ has joined #haskell
2021-08-30 02:59:05	opac	lol
2021-08-30 02:59:23	opac	no segfaults ? :(
2021-08-30 02:59:35	←	Codaraxis has quit (Ping timeout: 252 seconds)
2021-08-30 03:00:02	davean	opac: how would you get a segv with Haskell? You'd have to really do something thats explicitely a problem
2021-08-30 03:00:33	maerwald	easily via borked ffi
2021-08-30 03:01:26	←	Codaraxis_ has quit (Ping timeout: 240 seconds)
2021-08-30 03:02:35	opac	davean: I dont know. I am interested in learning how those cases happen. Never wrote 1 line of haskell :x
2021-08-30 03:02:52	opac	Im young :X
2021-08-30 03:02:55	maerwald	https://www.haskell.org/ghc/blog/20210709-capi-usage.html
2021-08-30 03:03:05	jpds	opac: Maybe start with a book on Haskell itself then
2021-08-30 03:03:22	→	janiczek has joined #haskell
2021-08-30 03:03:25	←	Codaraxis__ has quit (Ping timeout: 240 seconds)
2021-08-30 03:04:15	opac	jpds will do
2021-08-30 03:06:37	monochrom	I don't understand the motivation behind the question.  Suppose I had never learned C.  I don't suppose it would be productive to read "C bugs/vulnerability blogs".  Unless my goal were to look for something to laugh at.
2021-08-30 03:06:48	maerwald	:D
2021-08-30 03:07:00	maerwald	or win a specific argument
2021-08-30 03:07:55	davean	maerwald: yes, ffi is explicitely a problem, as is unsafe coerce
2021-08-30 03:08:14	davean	You want to do both sometimes, but its pretty clear that they can be a problem
2021-08-30 03:12:02	opac	monochrom: i have interest in security related topics thats why and was looking for a writeup or blog of a haskell's program being exploited (rare) - if I come with one, can I turn to NFT?
2021-08-30 03:12:45	opac	davean: you'd say ffi is the source of prior `bugs`? 
2021-08-30 03:12:49	monochrom	Would you understand it?  Do you have the Haskell knowledge to understand it?
2021-08-30 03:13:19	monochrom	Like I said, if I hadn't learned C, I would not understand an article that requires knowledge in C.
2021-08-30 03:13:41	opac	well depends, which other langs you know
2021-08-30 03:14:08	monochrom	Haskell. Pascal.
2021-08-30 03:15:41	opac	since the syntax is way simpler... if the writeup is detailed... then I am sure you'd have an enjoyable time reading C
2021-08-30 03:15:50	davean	No, I don't think so at all
2021-08-30 03:16:03	davean	That misses the poin tof whats important to understand this
2021-08-30 03:16:04	maerwald	https://frasertweedale.github.io/blog-fp/posts/2021-02-12-haskell-dependency-confusion.html
2021-08-30 03:16:16	davean	The only thing close enough to be useful for me to understand C is probably assembly
2021-08-30 03:16:59	janiczek	Hey there, I'm writing manual combined Except+State monad impl in Elm and I can't figure out the ending of andThen (bind). I'm sure it's something silly. Could you take a look? https://gist.github.com/Janiczek/a979c8a8f59d4a5186b2a340991a3aef
2021-08-30 03:17:05	maerwald	I believe there was a hacking course too, but I can't find it anymore
2021-08-30 03:17:58	←	kenran has quit (Quit: WeeChat info:version)
2021-08-30 03:19:18	←	fendor has quit (Read error: Connection reset by peer)
2021-08-30 03:20:57	opac	thanks for your thoughs
2021-08-30 03:21:11	monochrom	janiczek: I understand "s -> Result e (s, a)", and I understand "s -> (s, Result e a)".  But I don't understand "Result e (s -> (s, a))".  Do you?
2021-08-30 03:22:22	janiczek	@monochrom: Um, you're saying State . Except makes sense but Except . State isn't possible?
2021-08-30 03:22:23	lambdabot	Unknown command, try @list
2021-08-30 03:27:55	←	mastarija has quit (Quit: Leaving)
2021-08-30 03:28:44	←	machinedgod has quit (Ping timeout: 252 seconds)
2021-08-30 03:28:52	←	jumper149 has quit (Quit: WeeChat 3.2)
2021-08-30 03:29:41	←	tcard has quit (Quit: Leaving)
2021-08-30 03:30:38	←	max22- has quit (Quit: Leaving)
2021-08-30 03:30:51	janiczek	Hm indeed when I tried "s -> Result e (s, a)" I had no issues...
2021-08-30 03:31:24	←	Pickchea has quit (Quit: Leaving)
2021-08-30 03:33:02	→	jtomas_ has joined #haskell
2021-08-30 03:34:26	←	Tuplanolla has quit (Quit: Leaving.)
2021-08-30 03:34:34	→	tcard has joined #haskell
2021-08-30 03:36:58	←	__monty__ has quit (Quit: leaving)
2021-08-30 03:42:28	←	xlei has quit (Read error: Connection reset by peer)
2021-08-30 03:42:31	→	roboguy_ has joined #haskell
2021-08-30 03:43:38	Cale	maerwald: Good reason to be using nix, and to specify the hashes that you expect Hackage packages to have when downloaded. :)
2021-08-30 03:49:44	janiczek	So `ExceptT e (StateT s a)` and `StateT s (ExceptT e a)` result in `s -> Either e (a, s)` and `s -> (Either e a, s)` but neither in `Either e (s -> (a, s))` or something else that would have the Either on the outside?
2021-08-30 03:50:34	Cale	correct
2021-08-30 03:51:37	→	xlei has joined #haskell
2021-08-30 03:51:38	←	Guest372 has quit (Remote host closed the connection)
2021-08-30 03:51:39	janiczek	Seems unsymmetrical somehow :D and slightly magical... but fair enough
2021-08-30 03:52:10	Cale	Well, if you just look at the definition of ExceptT and especially StateT, it'll become clear why :)
2021-08-30 03:52:40	Cale	newtype StateT s m a = StateT { runStateT :: s -> m (a, s) }
2021-08-30 03:52:44	→	Guest372 has joined #haskell
2021-08-30 03:53:06	Cale	puts the m in the middle
2021-08-30 03:54:25	janiczek	Ah I see
2021-08-30 03:54:55	→	roboguy__ has joined #haskell
2021-08-30 03:55:05	Cale	Also, perhaps if you don't hide the m's...
2021-08-30 03:55:40	Cale	@unmtl ExceptT e (StateT s a)
2021-08-30 03:55:40	lambdabot	err: `ExceptT e (StateT s a)' is not applied to enough arguments, giving `/\A. s -> a (Either e A, s)'
2021-08-30 03:55:52	Cale	@unmtl ExceptT e (StateT s m a)
2021-08-30 03:55:52	lambdabot	err: `ExceptT e (s -> m (a, s))' is not applied to enough arguments.
2021-08-30 03:55:57	Cale	@unmtl ExceptT e (StateT s m) a
2021-08-30 03:55:57	lambdabot	s -> m (Either e a, s)
2021-08-30 03:56:00	Cale	there :)
2021-08-30 03:56:29	Cale	@unmtl StateT s (EitherT e m) a
2021-08-30 03:56:29	lambdabot	s -> EitherT e m (a, s)
2021-08-30 03:56:52	Cale	@unmtl StateT s (ExceptT e m) a
2021-08-30 03:56:52	lambdabot	s -> m (Either e (a, s))
2021-08-30 03:57:49	←	roboguy_ has quit (Ping timeout: 250 seconds)
2021-08-30 03:58:06	Cale	Quite often monad transformers end up changing the result type of the monad they're transforming, internally
2021-08-30 03:59:54	janiczek	Yeah it didn't occur to me, I went straight for "the other monad goes instead of `a` and that's it". Thanks for the explanation!
2021-08-30 04:00:38	←	amahl has quit (Ping timeout: 240 seconds)
2021-08-30 04:08:14	←	janiczek has quit (Quit: WeeChat 3.2)
2021-08-30 04:10:43	→	chris has joined #haskell
2021-08-30 04:10:47	ℹ	chris is now known as Guest8787
2021-08-30 04:12:39	→	cjb has joined #haskell
2021-08-30 04:14:56	→	elf_fortrez has joined #haskell
2021-08-30 04:15:52	←	elf_fortrez has quit (Client Quit)
2021-08-30 04:16:29	→	haykam1 has joined #haskell
2021-08-30 04:17:43	→	pavonia_ has joined #haskell
2021-08-30 04:18:39	←	sander has quit (Ping timeout: 240 seconds)
2021-08-30 04:19:01	→	sander has joined #haskell
2021-08-30 04:19:04	→	orcus- has joined #haskell
2021-08-30 04:19:08	←	takuan has quit (Ping timeout: 240 seconds)
2021-08-30 04:19:09	←	pavonia has quit (Ping timeout: 240 seconds)
2021-08-30 04:19:09	←	toms has quit (Ping timeout: 240 seconds)
2021-08-30 04:19:09	←	koolazer has quit (Ping timeout: 240 seconds)
2021-08-30 04:19:15	→	toms has joined #haskell
2021-08-30 04:19:24	ℹ	pavonia_ is now known as pavonia
2021-08-30 04:19:39	←	haykam has quit (Ping timeout: 240 seconds)
2021-08-30 04:19:39	←	sts-q has quit (Ping timeout: 240 seconds)
2021-08-30 04:19:39	←	td_ has quit (Ping timeout: 240 seconds)
2021-08-30 04:19:39	←	orcus has quit (Ping timeout: 240 seconds)
2021-08-30 04:19:39	←	nisstyre has quit (Ping timeout: 240 seconds)
2021-08-30 04:20:08	←	Vajb has quit (Ping timeout: 240 seconds)
2021-08-30 04:20:09	←	tdammers has quit (Ping timeout: 240 seconds)
2021-08-30 04:20:29	←	albet70 has quit (Remote host closed the connection)
2021-08-30 04:20:49	→	Vajb has joined #haskell
2021-08-30 04:21:09	→	takuan has joined #haskell
2021-08-30 04:21:36	→	albet70 has joined #haskell
2021-08-30 04:21:39	←	ishutin_ has quit (Ping timeout: 240 seconds)
2021-08-30 04:21:49	→	td_ has joined #haskell
2021-08-30 04:22:09	←	ridcully_ has quit (Ping timeout: 240 seconds)
2021-08-30 04:22:09	←	keltono has quit (Ping timeout: 240 seconds)
2021-08-30 04:23:16	←	jtomas_ has quit (Remote host closed the connection)
2021-08-30 04:23:42	maerwald[m]	Cale: `plan.json` has hashes as well
2021-08-30 04:23:44	→	ishutin has joined #haskell
2021-08-30 04:24:01	→	keltono has joined #haskell
2021-08-30 04:24:11	→	ridcully_ has joined #haskell
2021-08-30 04:26:29	←	albet70 has quit (Remote host closed the connection)
2021-08-30 04:27:35	→	albet70 has joined #haskell
2021-08-30 04:28:07	←	Gurkenglas has quit (Ping timeout: 248 seconds)
2021-08-30 04:29:01	←	d0ku has quit (Ping timeout: 250 seconds)
2021-08-30 04:33:00	→	nisstyre has joined #haskell
2021-08-30 04:33:12	→	koolazer has joined #haskell
2021-08-30 04:34:12	→	tdammers has joined #haskell
2021-08-30 04:34:37	→	merijn has joined #haskell
2021-08-30 04:41:22	←	kayprish has quit (Remote host closed the connection)
2021-08-30 04:42:33	←	acidjnk_new has quit (Ping timeout: 250 seconds)
2021-08-30 04:50:29	←	albet70 has quit (Remote host closed the connection)
2021-08-30 04:51:37	→	albet70 has joined #haskell
2021-08-30 04:52:39	←	juri_ has quit (Ping timeout: 240 seconds)
2021-08-30 04:54:22	→	juri_ has joined #haskell
2021-08-30 04:55:05	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-08-30 04:55:51	←	dsrt^ has quit (Ping timeout: 248 seconds)
2021-08-30 05:00:02	←	takuan has quit (Ping timeout: 252 seconds)
2021-08-30 05:02:27	←	opac has quit (Quit: Going offline, see ya! (www.adiirc.com))
2021-08-30 05:03:20	←	Guest8787 has quit (Ping timeout: 252 seconds)
2021-08-30 05:06:37	→	chris has joined #haskell
2021-08-30 05:06:41	ℹ	chris is now known as Guest9625
2021-08-30 05:07:35	←	merijn has quit (Ping timeout: 248 seconds)
2021-08-30 05:09:15	←	gehmehgeh has quit (Quit: Leaving)
2021-08-30 05:11:56	←	eggplantade has quit (Remote host closed the connection)
2021-08-30 05:23:11	←	Guest9625 has quit (Ping timeout: 250 seconds)
2021-08-30 05:25:21	←	chomwitt has quit (Remote host closed the connection)
2021-08-30 05:26:49	→	chris has joined #haskell
2021-08-30 05:26:53	ℹ	chris is now known as Guest9678
2021-08-30 05:32:28	→	MQ-17J has joined #haskell
2021-08-30 05:34:03	→	sjb0 has joined #haskell
2021-08-30 05:36:53	→	lavaman has joined #haskell
2021-08-30 05:41:11	←	lavaman has quit (Ping timeout: 248 seconds)
2021-08-30 05:46:30	←	albet70 has quit (Remote host closed the connection)
2021-08-30 05:47:06	Axman6	jle`: How'd you go with hls and vim? 
2021-08-30 05:47:36	→	albet70 has joined #haskell
2021-08-30 05:48:17	←	qrpnxz has quit (Quit: Gateway shutdown)
2021-08-30 06:10:22	ℹ	irc: disconnected from server
2021-08-30 06:10:47	→	oxide has joined #haskell
2021-08-30 06:10:47	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-30 06:10:47	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-30 06:10:47	ℹ	Channel #haskell: 705 nicks (1 op, 0 voices, 704 normals)
2021-08-30 06:10:48	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-30 06:12:07	←	cjb has quit (Ping timeout: 256 seconds)
2021-08-30 06:12:31	←	albet70 has quit (Remote host closed the connection)
2021-08-30 06:12:49	→	eggplantade has joined #haskell
2021-08-30 06:13:14	→	cjb has joined #haskell
2021-08-30 06:13:37	→	albet70 has joined #haskell
2021-08-30 06:13:50	→	wroathe has joined #haskell
2021-08-30 06:13:50	←	wroathe has quit (Changing host)
2021-08-30 06:13:50	→	wroathe has joined #haskell
2021-08-30 06:17:01	←	eggplantade has quit (Ping timeout: 250 seconds)
2021-08-30 06:18:08	←	wroathe has quit (Ping timeout: 252 seconds)
2021-08-30 06:23:31	←	albet70 has quit (Remote host closed the connection)
2021-08-30 06:24:38	→	albet70 has joined #haskell
2021-08-30 06:24:52	←	leah2 has quit (Ping timeout: 256 seconds)
2021-08-30 06:26:37	←	zgrep has quit (Quit: It's a quitter's world.)
2021-08-30 06:28:08	→	zgrep has joined #haskell
2021-08-30 06:29:31	←	albet70 has quit (Remote host closed the connection)
2021-08-30 06:30:38	→	albet70 has joined #haskell
2021-08-30 06:35:32	←	albet70 has quit (Remote host closed the connection)
2021-08-30 06:36:15	→	eggplantade has joined #haskell
2021-08-30 06:36:39	→	albet70 has joined #haskell
2021-08-30 06:41:16	←	bitdex_ has quit (Ping timeout: 276 seconds)
2021-08-30 06:43:02	→	bitdex_ has joined #haskell
2021-08-30 06:43:06	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-08-30 06:43:15	→	MQ-17J has joined #haskell
2021-08-30 08:04:18	ℹ	irc: disconnected from server
2021-08-30 08:04:43	→	oxide has joined #haskell
2021-08-30 08:04:43	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-30 08:04:43	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-30 08:04:43	ℹ	Channel #haskell: 708 nicks (1 op, 0 voices, 707 normals)
2021-08-30 08:04:44	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-30 08:07:11	sm	@simon1:libera.chat: things are often evaluated in an order you don't expect, or not at all. try adding lots of trace statements to see what's actually being executed
2021-08-30 08:07:11	lambdabot	Unknown command, try @list
2021-08-30 08:14:50	←	teddyc has quit (Ping timeout: 252 seconds)
2021-08-30 08:15:15	sim590	sm: not sure what was going on but I relaunched `cabal v2-repl` and now it works.
2021-08-30 08:15:49	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-08-30 08:17:05	→	wroathe has joined #haskell
2021-08-30 08:17:05	←	wroathe has quit (Changing host)
2021-08-30 08:17:05	→	wroathe has joined #haskell
2021-08-30 08:17:32	←	albet70 has quit (Remote host closed the connection)
2021-08-30 08:18:39	→	albet70 has joined #haskell
2021-08-30 08:18:54	sm	\o/
2021-08-30 08:20:12	sim590	\o/ indeed!
2021-08-30 08:21:19	←	wroathe has quit (Ping timeout: 252 seconds)
2021-08-30 08:22:40	←	tritlo has quit (Ping timeout: 250 seconds)
2021-08-30 08:22:44	←	amir has quit (Ping timeout: 240 seconds)
2021-08-30 08:22:52	→	MQ-17J has joined #haskell
2021-08-30 08:23:14	←	hamishmack has quit (Read error: Connection reset by peer)
2021-08-30 08:23:17	←	astra` has quit (Read error: Connection reset by peer)
2021-08-30 08:23:19	←	SanchayanMaity has quit (Read error: Connection reset by peer)
2021-08-30 08:23:19	←	dmj` has quit (Write error: Connection reset by peer)
2021-08-30 08:23:20	←	acertain has quit (Ping timeout: 258 seconds)
2021-08-30 08:23:31	←	mustafa has quit (Ping timeout: 252 seconds)
2021-08-30 08:23:32	←	jakesyl has quit (Ping timeout: 250 seconds)
2021-08-30 08:23:35	←	hnOsmium0001 has quit (Read error: Connection reset by peer)
2021-08-30 08:24:05	←	pjlsergeant has quit (Ping timeout: 240 seconds)
2021-08-30 08:24:21	ℹ	irc: disconnected from server
2021-08-31 03:51:26	→	oxide has joined #haskell
2021-08-31 03:51:26	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-08-31 03:51:26	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-08-31 03:51:26	ℹ	Channel #haskell: 719 nicks (1 op, 0 voices, 718 normals)
2021-08-31 03:51:27	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-08-31 03:59:47	←	Tuplanolla has quit (Quit: Leaving.)
2021-08-31 04:00:11	←	azeem has quit (Ping timeout: 244 seconds)
2021-08-31 04:00:26	→	azeem has joined #haskell
2021-08-31 04:00:37	→	bitmapper has joined #haskell
2021-08-31 04:00:41	→	xenon- has joined #haskell
2021-08-31 04:01:44	←	fendor has quit (Ping timeout: 244 seconds)
2021-08-31 04:03:41	→	mastarija has joined #haskell
2021-08-31 04:04:48	←	minimario has quit (Ping timeout: 256 seconds)
2021-08-31 04:05:14	←	troydm has quit (Quit: What is Hope? That all of your wishes and all of your dreams come true? To turn back time because things were not supposed to happen like that (C) Rau Le Creuset)
2021-08-31 04:05:15	→	Morrow_ has joined #haskell
2021-08-31 04:07:12	←	drakonis has quit (Quit: WeeChat 3.1)
2021-08-31 04:07:38	→	troydm has joined #haskell
2021-08-31 04:08:19	←	neo1 has quit (Ping timeout: 252 seconds)
2021-08-31 04:11:43	←	michalz has quit (Remote host closed the connection)
2021-08-31 04:14:09	←	ec_ has quit (Ping timeout: 276 seconds)
2021-08-31 04:16:16	←	_xor has quit (Quit: WeeChat 3.2)
2021-08-31 04:18:47	←	MQ-17J has quit (Ping timeout: 244 seconds)
2021-08-31 04:19:04	→	MQ-17J has joined #haskell
2021-08-31 04:21:10	→	wroathe has joined #haskell
2021-08-31 04:21:10	←	wroathe has quit (Changing host)
2021-08-31 04:21:10	→	wroathe has joined #haskell
2021-08-31 04:23:57	←	d0ku has quit (Ping timeout: 244 seconds)
2021-08-31 04:24:22	←	mizu_no_oto has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-08-31 04:24:22	→	ec_ has joined #haskell
2021-08-31 04:25:30	←	Gurkenglas has quit (Ping timeout: 244 seconds)
2021-08-31 04:25:55	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-08-31 04:26:12	→	MQ-17J has joined #haskell
2021-08-31 04:27:05	→	cjb has joined #haskell
2021-08-31 04:27:35	→	sami has joined #haskell
2021-08-31 04:28:29	←	sami has quit (Client Quit)
2021-08-31 04:28:44	→	sami has joined #haskell
2021-08-31 04:29:25	sami	test
2021-08-31 04:32:39	ℹ	sami is now known as abc
2021-08-31 04:32:46	ℹ	abc is now known as st05
2021-08-31 04:32:54	ℹ	st05 is now known as _05st
2021-08-31 04:33:06	→	hannessteffenhag has joined #haskell
2021-08-31 04:33:29	jackdk	Does this function have a common name? `Semigroup g => These g g -> g`
2021-08-31 04:33:46	maerwald	gg? :D
2021-08-31 04:35:36	maerwald	maybe `both`?
2021-08-31 04:36:30	←	mastarija has quit (Quit: Leaving)
2021-08-31 04:36:58	maerwald	`mergeThese :: (a -> a -> a) -> These a a -> a ` is the closest
2021-08-31 04:37:10	←	hannessteffenhag has quit (Ping timeout: 240 seconds)
2021-08-31 04:37:55	maerwald	mappendThese
2021-08-31 04:39:18	→	lavaman has joined #haskell
2021-08-31 04:42:38	←	_05st has quit (Quit: WeeChat 3.2)
2021-08-31 04:43:35	←	lavaman has quit (Ping timeout: 244 seconds)
2021-08-31 04:44:44	haveo	I don't think the Bifoldable1 instance for These is actually defined anywhere but the answer should be bifold1
2021-08-31 04:46:04	→	sleblanc has joined #haskell
2021-08-31 04:46:44	jackdk	gg maerwald =). It is frustrating that we still call it "mappend" even though it's really relaxed to Semigroup
2021-08-31 04:47:24	→	jeslie0 has joined #haskell
2021-08-31 04:55:17	→	hololeap_ has joined #haskell
2021-08-31 04:56:34	→	sm2n_ has joined #haskell
2021-08-31 04:58:21	←	ec_ has quit (Ping timeout: 276 seconds)
2021-08-31 04:58:34	←	sm2n has quit (Ping timeout: 244 seconds)
2021-08-31 04:59:07	monochrom	Semigroup has <>, which is more popular anyway.
2021-08-31 05:02:56	→	skykanin has joined #haskell
2021-08-31 05:03:52	←	jeslie0 has quit (Ping timeout: 252 seconds)
2021-08-31 05:03:58	hpc	jackdk: we should also put some emphasis on its algebraic properties too, rather than alluding to lists
2021-08-31 05:04:02	hpc	clearly it should be named "sadd"
2021-08-31 05:04:33	jackdk	how about "smoosh"?
2021-08-31 05:05:03	hpc	(bonus points if you manage to use it in combination with https://hackage.haskell.org/package/happy)
2021-08-31 05:05:09	hpc	hah, smoosh
2021-08-31 05:05:12	hpc	even better
2021-08-31 05:05:32	jackdk	it mooshes things together, semigroupally, which is why is starts with an s
2021-08-31 05:05:38	jackdk	proposal: rename mappend to moosh
2021-08-31 05:06:07	hpc	and of course, rename (++) to oosh
2021-08-31 05:06:52	→	abrantesasf has joined #haskell
2021-08-31 05:06:59	monochrom	A parser is some kind of inverse of <>
2021-08-31 05:07:09	jackdk	What if we tool `(+)` out of `Num` and made it the `Semigroup` operation? What could possibly go wrong?
2021-08-31 05:07:15	←	acidjnk_new3 has quit (Ping timeout: 250 seconds)
2021-08-31 05:07:16	monochrom	Happily, happy is some kind of inverse of sad. >:)
2021-08-31 05:07:28	jackdk	Nothing, I say! Nothing at all!
2021-08-31 05:09:07	→	ec_ has joined #haskell
2021-08-31 05:10:59	ℹ	skykanin is now known as antimatter
2021-08-31 05:13:11	ℹ	antimatter is now known as verixor
2021-08-31 05:15:56	ℹ	verixor is now known as antagonist
2021-08-31 05:15:57	→	merijn has joined #haskell
2021-08-31 05:17:52	ℹ	antagonist is now known as antares
2021-08-31 05:18:04	ℹ	antares is now known as antagonist
2021-08-31 05:19:47	ℹ	antagonist is now known as desantra
2021-08-31 05:24:48	←	desantra has quit (Changing host)
2021-08-31 05:24:48	→	desantra has joined #haskell
2021-08-31 05:27:01	→	Axman6 has joined #haskell
2021-08-31 05:28:04	←	zebrag has quit (Remote host closed the connection)
2021-08-31 05:29:32	→	chris has joined #haskell
2021-08-31 05:29:36	ℹ	chris is now known as Guest729
2021-08-31 05:36:22	→	minimario has joined #haskell
2021-08-31 05:37:49	→	zebrag has joined #haskell
2021-08-31 05:39:43	←	Guest729 has quit (Remote host closed the connection)
2021-08-31 05:45:09	←	ec_ has quit (Ping timeout: 276 seconds)
2021-08-31 05:45:27	→	jaja has joined #haskell
2021-08-31 05:49:27	←	jaja has quit (Remote host closed the connection)
2021-08-31 05:49:43	←	merijn has quit (Ping timeout: 244 seconds)
2021-08-31 05:51:12	←	zebrag has quit (Remote host closed the connection)
2021-08-31 05:55:19	←	hololeap_ has quit (Remote host closed the connection)
2021-08-31 05:55:54	→	ec_ has joined #haskell
2021-08-31 05:57:47	→	zebrag has joined #haskell
2021-08-31 05:57:51	←	opac has quit (Quit: Going offline, see ya! (www.adiirc.com))
2021-08-31 05:59:52	→	lavaman has joined #haskell
2021-08-31 06:01:34	←	zer0bitz has quit (Ping timeout: 252 seconds)
2021-08-31 06:05:16	←	lavaman has quit (Remote host closed the connection)
2021-08-31 06:05:30	→	lavaman has joined #haskell
2021-08-31 06:05:38	←	lavaman has quit (Remote host closed the connection)
2021-08-31 06:05:40	←	waleee has quit (Ping timeout: 240 seconds)
2021-08-31 06:07:10	←	desantra has quit (Quit: WeeChat 3.2)
2021-08-31 06:07:12	←	pretty_dumm_guy has quit (Quit: WeeChat 3.2)
2021-08-31 06:07:55	→	waleee has joined #haskell
2021-08-31 06:08:45	←	aegon has quit (Quit: leaving)
2021-08-31 06:10:25	←	raehik has quit (Ping timeout: 252 seconds)
2021-08-31 06:11:40	←	MQ-17J has quit (Ping timeout: 240 seconds)
2021-08-31 06:11:57	→	MQ-17J has joined #haskell
2021-08-31 06:14:49	←	peterhil has quit (Ping timeout: 252 seconds)
2021-08-31 06:15:42	←	ec_ has quit (Ping timeout: 276 seconds)
2021-08-31 06:18:18	←	zebrag has quit (Remote host closed the connection)
2021-08-31 06:21:08	→	Achylles_ has joined #haskell
2021-08-31 06:22:06	←	Achylles has quit (Remote host closed the connection)
2021-08-31 06:22:27	→	zebrag has joined #haskell
2021-08-31 06:24:13	←	tabemann has quit (Remote host closed the connection)
2021-08-31 06:26:18	→	ec_ has joined #haskell
2021-08-31 06:26:41	→	tabemann has joined #haskell
2021-08-31 06:32:57	←	tabemann has quit (Remote host closed the connection)
2021-08-31 06:33:36	→	tabemann has joined #haskell
2021-08-31 06:33:54	→	hannessteffenhag has joined #haskell
2021-08-31 06:36:08	→	lavaman has joined #haskell
2021-08-31 06:38:17	←	hannessteffenhag has quit (Ping timeout: 244 seconds)
2021-08-31 06:40:21	←	lavaman has quit (Ping timeout: 244 seconds)
2021-08-31 06:40:59	←	Guest372 has quit (Remote host closed the connection)
2021-08-31 06:41:03	←	ec_ has quit (Ping timeout: 276 seconds)
2021-08-31 06:42:06	→	Guest372 has joined #haskell
2021-08-31 06:44:21	→	peterhil has joined #haskell
2021-08-31 06:45:47	←	minimario has quit (Quit: Client closed)
2021-08-31 06:47:45	→	neurocyte3 has joined #haskell
2021-08-31 06:47:45	←	neurocyte3 has quit (Changing host)
2021-08-31 06:47:45	→	neurocyte3 has joined #haskell
2021-08-31 06:48:19	←	dsrt^ has quit (Ping timeout: 252 seconds)
2021-08-31 06:49:28	←	pavonia has quit (Read error: Connection reset by peer)
2021-08-31 06:49:57	←	neurocyte has quit (Ping timeout: 250 seconds)
2021-08-31 06:49:57	ℹ	neurocyte3 is now known as neurocyte
2021-08-31 06:50:01	←	peterhil has quit (Ping timeout: 252 seconds)
2021-08-31 06:52:54	←	Achylles_ has quit (Remote host closed the connection)
2021-08-31 06:54:06	→	pavonia has joined #haskell
2021-08-31 06:54:27	←	xenon- has quit (Quit: http://www.okay.uz/ (Ping timeout))
2021-08-31 06:58:41	←	machinedgod has quit (Read error: Connection reset by peer)
2021-08-31 06:58:48	→	machined1od has joined #haskell
2021-08-31 07:04:52	←	xff0x has quit (Ping timeout: 252 seconds)
2021-08-31 07:06:53	→	xff0x has joined #haskell
2021-08-31 07:06:55	→	peterhil has joined #haskell
2021-08-31 07:09:01	←	sleblanc has quit (Ping timeout: 250 seconds)
2021-08-31 07:09:17	←	wroathe has quit (Ping timeout: 244 seconds)
2021-08-31 07:09:57	←	tabemann has quit (Remote host closed the connection)
2021-08-31 07:11:00	→	tabemann has joined #haskell
2021-08-31 07:11:31	→	dsrt^ has joined #haskell
2021-08-31 07:11:32	sim590	Is there a way to compile your code so that all of your datatypes derive a default Show instance without actually modifying the code? Some sort of flag you could pass to ghc ?
2021-08-31 07:11:40	→	lavaman has joined #haskell
2021-08-31 07:13:58	pavonia	That would cause inconsistencies across different packages, so hopefully you can't
2021-08-31 07:14:06	→	noddy has joined #haskell
2021-08-31 07:15:37	pavonia	sim590: What you could do is to have an extra module with the instances and link that
2021-08-31 07:16:25	←	lavaman has quit (Ping timeout: 252 seconds)
2021-08-31 07:18:26	sim590	pavonia: why is that so? Let's say I would like to do that only for debugging purposes by compiling in a debug mode and not bother wether I did or not create a Show instance. What is the big deal if in the case when there's no Show instance for a given data type, ghc creates one ? I don't really see the issue.
2021-08-31 07:19:17	sim590	Because the advantage of using ghci to debug is not have to modify the code in order to debug. But if you have to put Show instances everytime you want to see what's inside something, it becomes annoying.
2021-08-31 07:19:33	←	abrantesasf has quit (Quit: Leaving)
2021-08-31 07:20:59	pavonia	What if another modules creates one too? Then you have two instances of the same type in scope but your code doesn't represent that
2021-08-31 07:21:55	←	peterhil has quit (Ping timeout: 252 seconds)
2021-08-31 07:22:05	sim590	If I create an extra module, let's say MyProject.Debug.MyModule and I define the instance inside that module, then I will end up with the warning "oprhan instance". I always try to get rid of warnings. I'm not sure I would like to disable this one. Unless I can tell cabal to compile the Debug module and disable the warning when in debug mode and do the opposite when not in debug mode?
2021-08-31 07:23:31	sim590	pavonia: wouldn't ghc be just able to detect whether there is another instance and not create one if there is?
2021-08-31 07:23:34	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-08-31 07:23:54	pavonia	You can have flags in cabal files with different options, I think
2021-08-31 07:24:19	pavonia	No, it wouldn't know whether there is already one is scope because the code say there is none
2021-08-31 07:24:23	c_wraith	I don't understand why you don't want show instances normally
2021-08-31 07:24:35	pavonia	The linker would complain, though
2021-08-31 07:25:13	sim590	pavonia: then if there's compile time errors, it's fine. I'm not sure why ghc could never provide that functionnality
2021-08-31 07:25:54	→	MQ-17J has joined #haskell
2021-08-31 07:26:12	sim590	c_wraith: Some datatypes just don't need to be showed in the normal cases. If that's just for debugging purposes, I don't know why I would derive it for the user of my library. 
2021-08-31 07:26:36	c_wraith	so...  you're optimizing to make debugging hard at no cost to users?
2021-08-31 07:28:02	pavonia	sim590: What would be a convincing reason to support such a functionality? I can't see the advantage over just deriving Show automatically in your code
2021-08-31 07:29:17	sim590	It's no optimization. It's rather just that I'm writing code based on the needs of the user. The user of the library doesn't need to debug my code so it wouldn't need to have the instance of show. And if the user would need it, then I say that all my types should have a Show instance which brings me back to the GHC option flag I'm thinking I'd like to have because why bother enabling manually a
2021-08-31 07:29:19	sim590	Show instance if you want it in every cases.
2021-08-31 07:29:40	c_wraith	Because not every type can have a (sensible) show instance
2021-08-31 07:30:35	sim590	As soon as you need to check what's inside of a datatype, then you need it. If you're debugging, the :print command doesn't inform you on the values inside, but rather just the types.
2021-08-31 07:31:47	pavonia	You can always use preprocessor conditionals if you really want to hide the instances from your users
2021-08-31 07:32:18	sim590	But if I'm to do that, then I don't see a datatype that wouldn't have a Show instance for debugging purposes.
2021-08-31 07:32:33	sim590	Can you give an example of some datatype that couldn't be showed?
2021-08-31 07:32:44	janus	Void :P
2021-08-31 07:32:49	sim590	Yeah...
2021-08-31 07:32:49	c_wraith	data Foo = Foo (Int -> (Int -> Int))
2021-08-31 07:33:12	sim590	OK. So a datatype that contains a function cannot be shown, right?
2021-08-31 07:34:19	pavonia	data Foo = Foo (IO ()) is another example
2021-08-31 07:34:24	janus	Category seems to have no Show https://hackage.haskell.org/package/base-4.15.0.0/docs/Control-Category.html
2021-08-31 07:35:12	sim590	OK, but what about deriving Show for all datatypes that don't contain a function inside it but rather "simple" data types (what would you call it actually?)
2021-08-31 07:37:25	→	ystael has joined #haskell
2021-08-31 07:38:13	janus	you can derive a sensible Show datatypes that are not polymorphic and have constructors and do not contains functions, i guess..
2021-08-31 07:38:15	→	mjs2600 has joined #haskell
2021-08-31 07:38:54	janus	*Show for datatypes
2021-08-31 07:39:00	pavonia	sim590: Are you seriously arguing GHC should implement an option that might cause inconstistent object files only that you don't need to ignore a compiler warning for your debugging module?
2021-08-31 07:41:01	sim590	No, but rather only that I don't have to always specify `deriving Show` for all datatypes when the only reason I would do that is for debugging puposes. What I'm arguing about is that it is not a function of my datatype to be showable. It's not used in any circumstances for outputing or serializing anything. So why would I have a Show instance. It doesn't make sense.
2021-08-31 07:41:11	sim590	Then it makes it so the code doesn't make sense and it is irritating.
2021-08-31 07:41:55	janus	but how could the compiler know if you would stick a function in there in the future?
2021-08-31 07:42:28	janus	by writing "deriving Show" you're also making an assertion about its future behaviour
2021-08-31 07:42:48	sim590	May be at runtime it could try and see if it can show it and figure out that it cannot and bail out with the usual error it prompts me with at the moment.
2021-08-31 07:43:19	sim590	I'm talking about GHCi repl.
2021-08-31 07:43:34	←	amk has quit (Ping timeout: 250 seconds)
2021-08-31 07:43:44	→	amk has joined #haskell
2021-08-31 07:43:51	janus	but then GHCi would work totally different ?
2021-08-31 07:44:25	←	FinnElija has quit (Ping timeout: 252 seconds)
2021-08-31 07:44:28	sim590	What if I'd activate a flag for that with :set or something.
2021-08-31 07:45:14	janus	sounds like you want something like -fdefer-type-errors and something else than type classes that are not resolved at compile time
2021-08-31 07:46:15	→	FinnElija has joined #haskell
2021-08-31 07:46:35	sim590	Does it exist?
2021-08-31 07:47:04	→	merijn has joined #haskell
2021-08-31 07:47:44	sim590	 Would -XStandaloneDeriving help me ? Could I then derive the Show instance live in the GHCi repl?
2021-08-31 07:48:36	pavonia	Yes, you would still have to type it :3
2021-08-31 07:49:12	pavonia	Doesn't :force even work there too?
2021-08-31 07:51:40	←	hyiltiz has quit (Ping timeout: 240 seconds)
2021-08-31 07:51:55	sim590	pavonia: That's OK. As long as I don't modify my file, I'm fine with that. I guess if I'd have more of these types to derive, then I'd be looking for something else. May be a file to run a list of repl commands before launching so that I don't have to run them by hand every time I launch my repl.
2021-08-31 07:53:20	janus	but you'd need to enumerate them, that's a dealbreaker for you no?
2021-08-31 07:54:06	→	hyiltiz has joined #haskell
2021-08-31 07:54:24	←	td_ has quit (Ping timeout: 250 seconds)
2021-08-31 07:55:58	→	shapr has joined #haskell
2021-08-31 07:56:23	→	td_ has joined #haskell
2021-08-31 07:56:59	sim590	janus: I would have prefered something that is instantenous for which I wouldn't need to enumerate, indeed. But not modifying my source files is a big improvement.
2021-08-31 07:58:03	janus	sim590: you may need to modify your source files, since you can't make use standalone deriving without having the type available, so you may need exports , i think
2021-08-31 07:58:41	janus	one exported type could have an internal type embedded in it, which wouldn't be exported. how would you use standalone deriving on it?
2021-08-31 07:59:04	pavonia	Why not just an extra module? If its just for debugging purpose, why to care about orphan instances?
2021-08-31 07:59:25	sim590	pavonia: actually :force works
2021-08-31 08:02:30	←	alx741 has quit (Quit: alx741)
2021-08-31 08:03:45	sm	sim590: is it such a big hassle to specify Show in your types' classes ?
2021-08-31 08:06:28	sim590	sm: as I said earlier, it doesn't make sense. I don't like writing it if it doesn't makes sense. I'm expecting that if something derives the Show instance, it's that it's either going to be serialized in some way or printed somewhere. I want to keep a code that honors the expectations. That's how I see it..
2021-08-31 08:07:40	sm	I'm having a hard time understanding this, could be my fault
2021-08-31 08:07:44	←	hendursaga has quit (Remote host closed the connection)
2021-08-31 08:08:14	→	hendursaga has joined #haskell
2021-08-31 08:08:39	→	hololeap has joined #haskell
2021-08-31 08:09:46	←	tv has quit (Ping timeout: 240 seconds)
2021-08-31 08:10:10	→	tv has joined #haskell
2021-08-31 08:10:28	→	wroathe has joined #haskell
2021-08-31 08:10:28	←	wroathe has quit (Changing host)
2021-08-31 08:10:28	→	wroathe has joined #haskell
2021-08-31 08:12:30	sim590	May be it is a just a matter of opinion. But that's how I see my code. I want to write it in a way that if you write something, it's not in case you need it. It's because you *need* it. And I don't need the show instance in normal circumstances. If I can derive it while debugging and remove it afterwards and that my code is totally fine then and the library does what it needs to do, then it means
2021-08-31 08:12:31	sim590	that I don't need the Show instance in my code.
2021-08-31 08:14:40	sm	is it that you don't want to see "deriving Show" in the source ? or you don't want the generated show code in your production executable ? both ?
2021-08-31 08:15:10	monochrom	"data Foo = MkFoo deriving ()" is legal.
2021-08-31 08:15:53	monochrom	Now you can "#define SHOW Show" or "#define SHOW" depending on a flag.  Then "data Foo = MkFoo deriving (SHOW)".
2021-08-31 08:16:21	monochrom	perhaps s/SHOW/MAYBESHOW/
2021-08-31 08:16:22	←	waleee has quit (Ping timeout: 252 seconds)
2021-08-31 08:16:37	←	tv has quit (Ping timeout: 250 seconds)
2021-08-31 08:17:00	→	tv has joined #haskell
2021-08-31 08:17:39	sim590	sm: both I'd say. 
2021-08-31 08:18:46	sm	you can certainly have separate production and debug builds, with Show included by a build flag, eg like monochrom said. Personally I would really avoid that unless it were absolutely necessary
2021-08-31 08:19:07	←	machined1od has quit (Ping timeout: 252 seconds)
2021-08-31 08:19:16	sm	eg the production build is usually the one you'll want debug output from.. 
2021-08-31 08:19:18	sim590	monochrom: interesting! I'd keep that functionality in mind. For now, I think that :force is great for what I need. If I ever need something else, I'll think about that. I'll take a note. Thanks!!
2021-08-31 08:20:20	monochrom	In a test suite, I would use some kind of standalone deriving, and move on.
2021-08-31 08:21:01	ystael	in a _production_ system, I would derive Show _everywhere_ and swear about the places where I can't, because every missed opportunity to add inspectability is suffering waiting to happen
2021-08-31 08:21:06	←	merijn has quit (Ping timeout: 244 seconds)
2021-08-31 08:21:33	→	Erutuon has joined #haskell
2021-08-31 08:21:35	monochrom	Assuming that my users absolutely do not want me to do "deriving Show" outside the test suite.
2021-08-31 08:22:23	sm	ystael++
2021-08-31 08:22:26	monochrom	My suspicion though is that my users would appreciate it if I derived Show so they can also deriving Show.
2021-08-31 08:23:21	sim590	Weird: http://ix.io/3xv7. I've issued :force a first time and I got `mt = _`. Then I ran :print on it. I only saw the types then. And then, I tried :force again and it gave a different result (the one I wanted to being with). Why? Just curious.
2021-08-31 08:23:32	monochrom	Right? If my type is T and their type is "data B = MkB T Int deriving Show" and it errs on the stupid technicality that I don't provide Show in any way.
2021-08-31 08:23:39	→	econo has joined #haskell
2021-08-31 08:24:04	monochrom	I definitely have seen complaints in this channel for that.
2021-08-31 08:24:35	←	sagax has quit (Excess Flood)
2021-08-31 08:25:14	←	tv has quit (Ping timeout: 244 seconds)
2021-08-31 08:25:26	sim590	monochrom: But why wouldn't your users just use `:force` in GHCi if there's no point in showing the datatype in question (I'm supposing we're talking about a data type which it makes no sense to show in normal circumstances).
2021-08-31 08:25:44	monochrom	Huh, my users aren't using :force.
2021-08-31 08:25:55	monochrom	My users aren't using ghci either.
2021-08-31 08:25:55	sim590	Well, may be they should. :p
2021-08-31 08:26:14	monochrom	Perhaps they also have their test suites to run.
2021-08-31 08:26:53	monochrom	You are saying that every use case of my library must confine itself to ghci and :force.
2021-08-31 08:27:08	monochrom	Is that some kind of proprietory lock in?
2021-08-31 08:28:49	sim590	It depends on the library. If we're talking about a library that define fundamental data types, like Maybe for instance, then I say yeah you could show it. But if your type hides a potentially huge recursive definition (like a tree), then I don't think it's worth doing since nobody is gonna show that somewhere.
2021-08-31 08:37:52	→	tv has joined #haskell
2021-08-31 08:38:09	←	wroathe has quit (Ping timeout: 244 seconds)
2021-08-31 08:42:47	←	otto_s has quit (Ping timeout: 240 seconds)
2021-08-31 08:44:52	→	otto_s has joined #haskell
2021-08-31 08:48:58	←	zebrag has quit (Quit: Konversation terminated!)
2021-08-31 08:49:22	←	tv has quit (Ping timeout: 252 seconds)
2021-08-31 08:49:45	→	tv has joined #haskell
2021-08-31 08:51:41	pavonia	Missing or "wrong" Show instances is actually one of the biggest nuisance in user libraries, IMHO
2021-08-31 08:52:09	←	xff0x has quit (Ping timeout: 250 seconds)
2021-08-31 08:53:05	→	xff0x has joined #haskell
2021-08-31 09:02:26	←	azeem has quit (Ping timeout: 244 seconds)
2021-08-31 09:03:15	→	azeem has joined #haskell
2021-08-31 09:04:10	←	Morrow_ has quit (Ping timeout: 240 seconds)
2021-08-31 09:05:54	←	Erutuon has quit (Ping timeout: 250 seconds)
2021-08-31 09:14:07	←	azeem has quit (Ping timeout: 252 seconds)
2021-08-31 09:16:43	→	azeem has joined #haskell
2021-08-31 09:20:28	←	slowButPresent has quit (Quit: leaving)
2021-08-31 09:25:05	→	wroathe has joined #haskell
2021-08-31 09:25:05	←	wroathe has quit (Changing host)
2021-08-31 09:25:05	→	wroathe has joined #haskell
2021-08-31 09:42:07	←	Maxdamantus has quit (Ping timeout: 240 seconds)
2021-08-31 09:42:53	←	napping has quit (Quit: leaving)
2021-08-31 09:43:02	→	dajoer has joined #haskell
2021-08-31 09:43:11	→	Maxdamantus has joined #haskell
2021-08-31 09:43:46	←	zaquest has quit (Ping timeout: 252 seconds)
2021-08-31 09:51:15	→	freizl has joined #haskell
2021-08-31 09:51:56	←	freizl has left #haskell
2021-08-31 10:00:18	←	azeem has quit (Ping timeout: 244 seconds)
2021-08-31 10:00:48	←	synthmeat has quit (*.net *.split)
2021-08-31 10:00:48	←	Hafydd has quit (*.net *.split)
2021-08-31 10:00:48	←	vjoki has quit (*.net *.split)
2021-08-31 10:00:48	←	phaazon has quit (*.net *.split)
2021-08-31 10:01:04	→	phaazon has joined #haskell
2021-08-31 10:01:07	→	Hafydd has joined #haskell
2021-08-31 10:01:12	→	synthmeat has joined #haskell
2021-08-31 10:02:01	→	vjoki has joined #haskell
2021-08-31 10:02:15	→	azeem has joined #haskell
2021-08-31 10:09:37	←	hueso has quit (Ping timeout: 252 seconds)
2021-08-31 10:10:08	→	hannessteffenhag has joined #haskell
2021-08-31 10:14:15	←	hannessteffenhag has quit (Ping timeout: 244 seconds)
2021-08-31 10:15:31	→	light_ has joined #haskell
2021-08-31 10:16:45	→	hueso has joined #haskell
2021-08-31 10:17:23	→	mei has joined #haskell
2021-08-31 10:17:49	→	merijn has joined #haskell
2021-08-31 10:18:16	←	favonia has quit (Ping timeout: 250 seconds)
2021-08-31 10:20:47	ℹ	light_ is now known as Smokey
2021-08-31 10:20:50	ℹ	irc: disconnected from server
2021-09-01 09:36:36	→	oxide_ has joined #haskell
2021-09-01 09:36:36	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-01 09:36:36	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-01 09:36:36	ℹ	Channel #haskell: 706 nicks (1 op, 0 voices, 705 normals)
2021-09-01 09:36:37	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-01 09:42:26	→	hololeap_ has joined #haskell
2021-09-01 09:42:38	←	zebrag has quit (Quit: Konversation terminated!)
2021-09-01 09:42:41	←	oxide has quit (Ping timeout: 244 seconds)
2021-09-01 09:42:48	←	hololeap has quit (Ping timeout: 276 seconds)
2021-09-01 09:49:42	ℹ	hololeap_ is now known as hololeap
2021-09-01 09:51:24	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-01 09:52:19	→	MQ-17J has joined #haskell
2021-09-01 09:55:49	ℹ	irc: disconnected from server
2021-09-01 09:56:03	→	oxide has joined #haskell
2021-09-01 09:56:03	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-01 09:56:03	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-01 09:56:03	ℹ	Channel #haskell: 704 nicks (1 op, 0 voices, 703 normals)
2021-09-01 09:56:03	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-01 09:59:34	←	justsomeguy has quit (Quit: WeeChat 3.2)
2021-09-01 10:04:09	→	eggplantade has joined #haskell
2021-09-01 10:07:54	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-01 10:08:39	←	eggplantade has quit (Ping timeout: 240 seconds)
2021-09-01 10:14:11	←	azeem has quit (Ping timeout: 244 seconds)
2021-09-01 10:14:24	→	azeem has joined #haskell
2021-09-01 10:18:39	←	azeem has quit (Ping timeout: 240 seconds)
2021-09-01 10:19:22	→	azeem has joined #haskell
2021-09-01 10:23:17	→	eggplantade has joined #haskell
2021-09-01 10:23:51	←	azeem has quit (Ping timeout: 252 seconds)
2021-09-01 10:24:23	→	azeem has joined #haskell
2021-09-01 10:26:47	→	betelgeuse has joined #haskell
2021-09-01 10:30:26	→	takuan has joined #haskell
2021-09-01 10:31:09	←	azeem has quit (Ping timeout: 240 seconds)
2021-09-01 10:31:28	→	azeem has joined #haskell
2021-09-01 10:40:43	→	Sgeo_ has joined #haskell
2021-09-01 10:40:44	←	slowButPresent has quit (Quit: leaving)
2021-09-01 10:42:56	←	Sgeo has quit (Ping timeout: 245 seconds)
2021-09-01 10:52:26	←	sleblanc has quit (Ping timeout: 252 seconds)
2021-09-01 10:54:21	→	kimjetwav has joined #haskell
2021-09-01 10:54:56	←	Guest4294 has quit (Ping timeout: 256 seconds)
2021-09-01 10:54:57	←	aegon has quit (Quit: leaving)
2021-09-01 10:55:08	←	_xor has quit (Quit: brb)
2021-09-01 10:56:18	→	lavaman has joined #haskell
2021-09-01 10:56:19	→	vysn has joined #haskell
2021-09-01 10:59:04	←	shapr has quit (Ping timeout: 250 seconds)
2021-09-01 10:59:48	→	qbt has joined #haskell
2021-09-01 11:00:46	←	qbt has quit (Remote host closed the connection)
2021-09-01 11:06:42	←	azeem has quit (Ping timeout: 252 seconds)
2021-09-01 11:07:13	→	azeem has joined #haskell
2021-09-01 11:10:35	←	peterhil has quit (Ping timeout: 252 seconds)
2021-09-01 11:21:05	arahael	what's that ~ for?
2021-09-01 11:28:32	→	mikoto-chan has joined #haskell
2021-09-01 11:29:18	opqdonut	lazy pattern
2021-09-01 11:29:25	opqdonut	aka irrefutable pattern
2021-09-01 11:30:18	pavonia	> let yay ~(x,y) = "yay"; nay (x,y) = "nay" in (yay undefined, nay undefined)
2021-09-01 11:30:20	lambdabot	 ("yay","*Exception: Prelude.undefined
2021-09-01 11:31:42	arahael	opqdonut: Thanks - that give sme some keywords :D
2021-09-01 11:31:59	Christoph[m]	https://wiki.haskell.org/Keywords#.7E
2021-09-01 11:35:18	←	wroathe has quit (Ping timeout: 244 seconds)
2021-09-01 11:40:59	←	azeem has quit (Ping timeout: 244 seconds)
2021-09-01 11:41:38	→	azeem has joined #haskell
2021-09-01 11:43:46	←	tzh has quit (Quit: zzz)
2021-09-01 11:45:51	→	wroathe has joined #haskell
2021-09-01 11:45:51	←	wroathe has quit (Changing host)
2021-09-01 11:45:51	→	wroathe has joined #haskell
2021-09-01 11:48:13	←	favonia has quit (Ping timeout: 244 seconds)
2021-09-01 11:49:22	→	max22- has joined #haskell
2021-09-01 11:50:26	←	wroathe has quit (Ping timeout: 245 seconds)
2021-09-01 11:52:52	→	michalz has joined #haskell
2021-09-01 11:53:29	←	hyiltiz has quit (Ping timeout: 252 seconds)
2021-09-01 11:58:13	→	Gurkenglas has joined #haskell
2021-09-01 12:00:32	→	oxide has joined #haskell
2021-09-01 12:00:32	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-01 12:00:32	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-01 12:00:32	ℹ	Channel #haskell: 700 nicks (1 op, 0 voices, 699 normals)
2021-09-01 12:00:32	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-01 12:04:59	→	merijn has joined #haskell
2021-09-01 12:05:29	taeaad	What is the relationship between a DAG and lambda calculus? Are the nodes in the graph states? Or are the domains and codomains? I've known for a while that Excel for example uses a DAG in the backend, and generally that there is a connection to functional programming, but just realised that I wouldn't be able to write out what the connection is.
2021-09-01 12:07:00	taeaad	Or from another perspectve, in the category Hask, is the appropriate DAG simply the generated by morphisms of Hask?
2021-09-01 12:07:08	taeaad	*the one
2021-09-01 12:09:11	taeaad	Hmm, I see Hask is not cartesian closed and doesn't have products or coproducts. So, should we think of "plantonic Hask" instead?
2021-09-01 12:12:51	←	Sgeo_ has quit (Read error: Connection reset by peer)
2021-09-01 12:13:03	→	phma_ has joined #haskell
2021-09-01 12:13:39	←	phma has quit (Ping timeout: 240 seconds)
2021-09-01 12:16:41	←	Erutuon has quit (Ping timeout: 245 seconds)
2021-09-01 12:18:42	←	jonathanx_ has quit (Remote host closed the connection)
2021-09-01 12:20:03	→	jonathanx has joined #haskell
2021-09-01 12:23:55	→	mei has joined #haskell
2021-09-01 12:25:25	[exa]	taeaad: excel uses the graphs for dependency tracking, no need for that in the "normal" lambda calculus unless you jump into specific implementations of lazy evaluation
2021-09-01 12:25:26	←	azeem has quit (Ping timeout: 245 seconds)
2021-09-01 12:26:29	→	azeem has joined #haskell
2021-09-01 12:27:11	→	dhouthoo has joined #haskell
2021-09-01 12:30:13	←	Guest2602 has quit (Quit: ERC (IRC client for Emacs 27.2))
2021-09-01 12:32:12	ℹ	phma_ is now known as phma
2021-09-01 12:39:22	←	merijn has quit (Ping timeout: 244 seconds)
2021-09-01 12:39:39	←	azeem has quit (Ping timeout: 252 seconds)
2021-09-01 12:40:06	→	slavaqq has joined #haskell
2021-09-01 12:40:29	→	nschoe has joined #haskell
2021-09-01 12:42:17	→	azeem has joined #haskell
2021-09-01 12:48:53	←	azeem has quit (Ping timeout: 256 seconds)
2021-09-01 12:50:54	→	azeem has joined #haskell
2021-09-01 12:52:11	→	hannessteffenhag has joined #haskell
2021-09-01 13:00:56	→	acidjnk_new has joined #haskell
2021-09-01 13:06:24	→	Boomerang has joined #haskell
2021-09-01 13:10:35	→	aman has joined #haskell
2021-09-01 13:10:43	→	hyiltiz has joined #haskell
2021-09-01 13:10:49	→	mc47 has joined #haskell
2021-09-01 13:13:00	→	merijn has joined #haskell
2021-09-01 13:15:20	→	desophos has joined #haskell
2021-09-01 13:15:37	→	lortabac has joined #haskell
2021-09-01 13:16:02	←	eggplantade has quit (Remote host closed the connection)
2021-09-01 13:19:39	→	eggplantade has joined #haskell
2021-09-01 13:21:57	←	shriekingnoise has quit (Quit: Quit)
2021-09-01 13:24:54	ℹ	irc: disconnected from server
2021-09-01 15:20:00	→	oxide has joined #haskell
2021-09-01 15:20:00	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-01 15:20:00	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-01 15:20:00	ℹ	Channel #haskell: 720 nicks (1 op, 0 voices, 719 normals)
2021-09-01 15:20:00	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-01 15:20:39	←	azeem has quit (Ping timeout: 240 seconds)
2021-09-01 15:21:23	→	azeem has joined #haskell
2021-09-01 15:29:06	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-01 15:29:41	→	merijn has joined #haskell
2021-09-01 15:31:48	→	pretty_dumm_guy has joined #haskell
2021-09-01 15:32:36	←	slavaqq has quit (Ping timeout: 256 seconds)
2021-09-01 15:35:02	←	merijn has quit (Ping timeout: 244 seconds)
2021-09-01 15:35:34	←	juhp has quit (Quit: juhp)
2021-09-01 15:35:51	→	merijn has joined #haskell
2021-09-01 15:36:02	lortabac	any suggestions for a simple templating library? I just need to replace a couple of placeholders in a text file
2021-09-01 15:36:49	dminuoso	lortabac: rawstring-qm works nicely for me.
2021-09-01 15:37:02	←	desophos has quit (Quit: Leaving)
2021-09-01 15:37:38	dminuoso	The included ToTextBuilder nicely fits in as well.
2021-09-01 15:38:10	dminuoso	It's what we use for generating emails in one of our projects. :)
2021-09-01 15:38:31	lortabac	I'll have a look, thanks
2021-09-01 15:46:39	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-01 15:47:15	→	merijn has joined #haskell
2021-09-01 15:48:28	←	ubert has quit (Ping timeout: 244 seconds)
2021-09-01 15:49:26	tomsmeding	lortabac: if the template is only known at runtime, you could also use 'mustache'
2021-09-01 15:50:20	dminuoso	tomsmeding: mustache does not come with TH helpers, ensuring the presence at compile time right?
2021-09-01 15:50:37	tomsmeding	dminuoso: "if the template is only known at runtime" ;)
2021-09-01 15:51:01	tomsmeding	can't use quasiquotes with a template from a file provided at runtime :p
2021-09-01 15:51:08	dminuoso	You can use TH.
2021-09-01 15:51:10	dminuoso	Oh
2021-09-01 15:51:14	dminuoso	Heh, I guess you're right.
2021-09-01 15:51:27	dminuoso	But mustache could still provide TH helpers to hook that into compile time
2021-09-01 15:51:31	tomsmeding	true
2021-09-01 15:51:45	dminuoso	Who wouldn't want their compiler to do random IO on the disk.
2021-09-01 15:51:51	dminuoso	:-)
2021-09-01 15:52:12	⚡	tomsmeding raises hand hesitantly
2021-09-01 15:52:55	→	ghoul42 has joined #haskell
2021-09-01 15:52:59	tomsmeding	you know what would be nice? limited IO at compile time
2021-09-01 15:53:10	tomsmeding	e.g. only reading files and only in the project directory
2021-09-01 15:53:40	dminuoso	Im not sure that's enough, as in principle the file API can do quite a bit of damage.
2021-09-01 15:53:46	tomsmeding	I bet that, plus all the TH stuff that doesn't actually do any IO, covers 99% of TH use cases
2021-09-01 15:54:07	dminuoso	I'd want an assurance that the compiler cant do nonsense on my system
2021-09-01 15:54:43	tomsmeding	what's unsafe about "only read operations in the project directory"?
2021-09-01 15:54:53	dminuoso	tomsmeding: It might be more realistic to use namespaces and cgroups to run TH perhaps.
2021-09-01 15:54:57	tomsmeding	or are you arguing that you're not going to be able to restrain opreations to that
2021-09-01 15:55:05	tomsmeding	right
2021-09-01 15:55:24	dminuoso	tomsmeding: The thing is, "the project directory" doesnt mean much in a file system with support for fuse, mount points, symlinks, etc
2021-09-01 15:55:37	tomsmeding	c.f. a discussion on one of the mailing lists a while back, concerning "safe haskell" vs "cgroups"
2021-09-01 15:55:54	tomsmeding	that's true
2021-09-01 15:56:13	tdammers	dminuoso: it is meaningful, but only if all other OS interactions are sandboxed too.
2021-09-01 15:56:19	tomsmeding	yes
2021-09-01 15:56:25	dminuoso	tdammers: Right.
2021-09-01 15:56:34	tomsmeding	or hm
2021-09-01 15:56:44	←	merijn has quit (Ping timeout: 244 seconds)
2021-09-01 15:56:48	tomsmeding	I mean, if the person compiling the project mounts random stuff in the project directory
2021-09-01 15:56:55	dminuoso	tdammers: Well, it might still not be truly meaningful. If the directory contains a symlink towards somewhere else, is that inside the project directory or not?
2021-09-01 15:57:05	tomsmeding	I'd say yes
2021-09-01 15:57:12	tdammers	same
2021-09-01 15:57:39	dminuoso	Either way, cgroups+namespaces for TH might actually not be a terrible idea.
2021-09-01 15:57:46	tdammers	and that's fine, as long as the symlink was put there by the user; but if the TH code can create and manipulate symlinks, then that is indeed meaningless
2021-09-01 15:58:02	dminuoso	Right
2021-09-01 15:58:39	→	merijn has joined #haskell
2021-09-01 15:58:49	dminuoso	This is something Ive been wanting for a while, really. Each time I run `cabal update` and then build something, there's a chance my compiler will install ransomware or something else on my machine.
2021-09-01 15:58:52	→	Kaipi has joined #haskell
2021-09-01 15:59:08	←	Kaiepi has quit (Remote host closed the connection)
2021-09-01 15:59:23	tomsmeding	but if you're going to run whatever you just compiled, all bets are off anyway
2021-09-01 15:59:29	dminuoso	If at least `cabal` had the tooling to give me a complete source diff for the transitive depenency closure after an update, it would be workable
2021-09-01 15:59:48	dminuoso	tomsmeding: Mmm that's true I guess
2021-09-01 15:59:58	tomsmeding	right, though that's a problem unrelated to TH
2021-09-01 16:00:18	dminuoso	So I guess, such an diff-after-update tool would be what I really want.
2021-09-01 16:00:31	dminuoso	That would be genuinely useful for a lot of reasons actually
2021-09-01 16:00:50	dminuoso	Get an idea whether perhaps someone broke PVP, or just get an idea what changed, for auditing the security
2021-09-01 16:02:03	maerwald	dminuoso: right... that's one of the problem with PVP/semver. They're manual.
2021-09-01 16:02:09	tomsmeding	and then cabal should always (unless explicitly told not to, I guess) print the total number of source lines changed in your transitive dependency graph since the last configure
2021-09-01 16:02:33	dminuoso	tomsmeding: Yes!
2021-09-01 16:02:43	tomsmeding	and then you get scary high numbers :p
2021-09-01 16:03:17	dminuoso	Well, there could be a variety of knobs. Say, a flag that does this only for direct dependencies
2021-09-01 16:03:18	tomsmeding	which illustrate the futility of the thing if you have a non-trivial dependency graph
2021-09-01 16:03:58	←	merijn has quit (Ping timeout: 244 seconds)
2021-09-01 16:04:00	tomsmeding	(and, I guess, if you don't have the budget or incentive to really get high-assurance software)
2021-09-01 16:04:05	⚡	tomsmeding has to go now though
2021-09-01 16:04:21	→	merijn has joined #haskell
2021-09-01 16:04:58	←	jakalx has left #haskell (Error from remote client)
2021-09-01 16:04:58	dminuoso	Or, perhaps, another flag that does this for actually imported modules.
2021-09-01 16:05:11	dminuoso	So you'd get control over how much changes you want to see
2021-09-01 16:05:38	dminuoso	So you'd have the choice of "all lines changed in the entire closure", "all lines changed in direct dependencies", and "all lines changed in imported modules".
2021-09-01 16:09:39	←	merijn has quit (Ping timeout: 244 seconds)
2021-09-01 16:10:25	→	merijn has joined #haskell
2021-09-01 16:11:24	←	Gurkenglas has quit (Ping timeout: 252 seconds)
2021-09-01 16:13:12	←	ghoul42 has quit (Quit: Client closed)
2021-09-01 16:15:18	→	neo has joined #haskell
2021-09-01 16:15:20	←	merijn has quit (Ping timeout: 244 seconds)
2021-09-01 16:16:04	→	merijn has joined #haskell
2021-09-01 16:16:23	←	mikoto-chan has quit (Quit: mikoto-chan)
2021-09-01 16:16:38	→	mikoto-chan has joined #haskell
2021-09-01 16:18:03	←	neo1 has quit (Ping timeout: 252 seconds)
2021-09-01 16:19:44	→	juhp has joined #haskell
2021-09-01 16:21:01	←	merijn has quit (Ping timeout: 244 seconds)
2021-09-01 16:21:58	→	merijn has joined #haskell
2021-09-01 16:23:36	←	elf_fortrez has quit (Ping timeout: 256 seconds)
2021-09-01 16:27:13	←	merijn has quit (Ping timeout: 244 seconds)
2021-09-01 16:27:13	ℹ	AndrewYu is now known as Andrew
2021-09-01 16:27:52	→	merijn has joined #haskell
2021-09-01 16:30:56	→	alx741 has joined #haskell
2021-09-01 16:33:36	→	arjun has joined #haskell
2021-09-01 16:34:00	←	jippiedoe has quit (Ping timeout: 252 seconds)
2021-09-01 16:35:09	→	jakalx has joined #haskell
2021-09-01 16:45:30	→	[itchyjunk] has joined #haskell
2021-09-01 16:49:14	→	eggplantade has joined #haskell
2021-09-01 16:50:51	←	azeem has quit (Ping timeout: 245 seconds)
2021-09-01 16:51:07	→	trcc has joined #haskell
2021-09-01 16:53:21	←	eggplantade has quit (Ping timeout: 245 seconds)
2021-09-01 16:54:15	→	azeem has joined #haskell
2021-09-01 16:54:17	→	sugarfunc has joined #haskell
2021-09-01 16:55:20	sugarfunc	I'm new to haskell and i didn't quite understand haskell's indentation rules. I'm using Vim that comes installed in macOS by default. How many spaces should I use?
2021-09-01 16:55:36	→	fendor_ has joined #haskell
2021-09-01 16:56:03	hpc	as many as you want - haskell works by alignment
2021-09-01 16:56:33	←	Kaipi has quit (Ping timeout: 252 seconds)
2021-09-01 16:56:35	hpc	everything at the same indentation level is in the same "block"
2021-09-01 16:56:40	←	sugarfunc has left #haskell
2021-09-01 16:56:47	hpc	for example
2021-09-01 16:56:57	hpc	foo x y = do m <- x
2021-09-01 16:57:09	hpc	             m' <- y
2021-09-01 16:57:16	hpc	             ...
2021-09-01 16:57:24	→	sugarfunc has joined #haskell
2021-09-01 16:57:32	hpc	you might also prefer foo x y = do
2021-09-01 16:57:36	hpc	  m <- x
2021-09-01 16:57:41	hpc	  ...
2021-09-01 16:58:13	←	fendor has quit (Ping timeout: 244 seconds)
2021-09-01 16:58:14	hpc	er, when i said "indentation level" up there pretend i said "column" instead
2021-09-01 16:58:17	merijn	sugarfunc: For a super detailed explanation, see: https://en.wikibooks.org/wiki/Haskell/Indentation
2021-09-01 16:58:28	merijn	hpc: Or you can just be lazy and link the wikibook ;)
2021-09-01 16:58:38	hpc	i forgot it existed :D
2021-09-01 16:59:34	←	merijn has quit (Quit: terminal restart)
2021-09-01 16:59:55	sugarfunc	thank you :-) i didn't knew that wikibooks has a book about haskell. I'm just done reading first chapter of "learn you some haskell for great good"
2021-09-01 17:00:13	[exa]	sugarfunc: any number of spaces is good but you need to consistently use spaces. I'm doing something like :set et sta sw=2 ts=2
2021-09-01 17:00:35	→	jippiedoe has joined #haskell
2021-09-01 17:00:40	hpc	sugarfunc: yeah, there's resources all over the place - https://www.haskell.org/documentation/
2021-09-01 17:01:13	→	merijn has joined #haskell
2021-09-01 17:01:34	←	merijn has quit (Client Quit)
2021-09-01 17:01:35	←	sugarfunc has quit (Quit: Leaving.)
2021-09-01 17:03:34	→	merijn has joined #haskell
2021-09-01 17:04:25	←	hannessteffenhag has quit (Ping timeout: 244 seconds)
2021-09-01 17:05:22	→	favonia has joined #haskell
2021-09-01 17:06:45	andinus	are there more why haskell writeups?
2021-09-01 17:06:48	andinus	i read https://crypto.stanford.edu/~blynn/haskell/why.html
2021-09-01 17:08:20	→	tfeb has joined #haskell
2021-09-01 17:09:41	→	Kaiepi has joined #haskell
2021-09-01 17:10:49	→	echoone has joined #haskell
2021-09-01 17:17:06	←	azeem has quit (Ping timeout: 245 seconds)
2021-09-01 17:17:20	→	waleee has joined #haskell
2021-09-01 17:17:27	→	neofromatrix has joined #haskell
2021-09-01 17:18:15	→	azeem has joined #haskell
2021-09-01 17:18:43	←	neofromatrix has left #haskell
2021-09-01 17:18:55	→	amahl has joined #haskell
2021-09-01 17:26:16	→	sleblanc has joined #haskell
2021-09-01 17:26:48	←	azeem has quit (Ping timeout: 252 seconds)
2021-09-01 17:28:06	←	ikex has quit (Quit: ZNC - https://znc.in)
2021-09-01 17:28:19	→	ikex has joined #haskell
2021-09-01 17:28:26	→	TranquilEcho has joined #haskell
2021-09-01 17:29:06	→	azeem has joined #haskell
2021-09-01 17:29:57	←	max22- has quit (Ping timeout: 256 seconds)
2021-09-01 17:30:07	maerwald	andinus: the one from dijkstra that gets posted every other month
2021-09-01 17:30:44	maerwald	https://www.cs.utexas.edu/users/EWD/transcriptions/OtherDocs/Haskell.html
2021-09-01 17:30:56	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-01 17:37:05	ℹ	irc: disconnected from server
2021-09-01 17:37:24	→	oxide has joined #haskell
2021-09-01 17:37:24	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-01 17:37:24	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-01 17:37:24	ℹ	Channel #haskell: 723 nicks (1 op, 0 voices, 722 normals)
2021-09-01 17:37:24	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-01 17:42:10	←	tfeb has quit (Quit: died)
2021-09-01 17:43:28	→	tengu1 has joined #haskell
2021-09-01 17:47:23	→	ubert has joined #haskell
2021-09-01 17:47:40	andinus	thanks
2021-09-01 17:53:51	→	Kaipi has joined #haskell
2021-09-01 17:54:02	←	Kaiepi has quit (Read error: Connection reset by peer)
2021-09-01 17:54:19	→	slowButPresent has joined #haskell
2021-09-01 17:57:07	←	MQ-17J has quit (Ping timeout: 244 seconds)
2021-09-01 17:58:03	→	dunj3 has joined #haskell
2021-09-01 17:58:07	→	MQ-17J has joined #haskell
2021-09-01 17:59:59	echoone	testing
2021-09-01 18:00:17	→	Vajb has joined #haskell
2021-09-01 18:00:51	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-01 18:00:54	←	mikoto-chan has quit (Ping timeout: 252 seconds)
2021-09-01 18:01:04	→	Vajb has joined #haskell
2021-09-01 18:06:02	kuribas	operational reasoning = performance?
2021-09-01 18:06:34	kuribas	Perhaps they mean it discouraging from writing a series of steps.
2021-09-01 18:06:39	albet70	\k -> let k k' = k in k' it's equal to fix k, rigth?
2021-09-01 18:06:45	kuribas	Rather writing the "meaning" of the program.
2021-09-01 18:06:58	merijn	kuribas: Operational reasoning is *any* form of reasoning about how things are implemented/evaluated
2021-09-01 18:07:05	merijn	for performance or any other reason
2021-09-01 18:08:03	kuribas	well, I don't see how that could ever be an advantage...
2021-09-01 18:10:05	merijn	kuribas: Because it's an important math skill to separate "what" from "how"
2021-09-01 18:10:26	merijn	kuribas: It's the reason why I think compiler construction courses are one of the most crucial CS courses
2021-09-01 18:10:32	kuribas	merijn: indeed
2021-09-01 18:10:37	→	acidjnk_new has joined #haskell
2021-09-01 18:10:43	merijn	Because they're the only ones that separate "what does this mean" from "how can we implement/do it"
2021-09-01 18:11:03	merijn	Much bad programming comes from a priori thinking about "how" before having properly defined "what"
2021-09-01 18:11:27	merijn	But you can only teach that if you can somehow stop students from thinking about "how", which is notoriously hard
2021-09-01 18:11:41	→	echoone55 has joined #haskell
2021-09-01 18:11:46	merijn	Hence, making operational reasoning hard is good, because it means they can't fall back to thinking about "how"
2021-09-01 18:12:08	←	echoone55 has quit (Client Quit)
2021-09-01 18:12:34	→	echoone83 has joined #haskell
2021-09-01 18:13:32	←	echoone has quit (Ping timeout: 256 seconds)
2021-09-01 18:14:10	←	acidjnk has quit (Ping timeout: 244 seconds)
2021-09-01 18:14:25	maerwald	you have to do operational reasoning anyway if you do IO, ST, 90% of the monad transformer stacks, async, etc etc
2021-09-01 18:15:32	merijn	maerwald: Eventually, sure.
2021-09-01 18:15:53	merijn	maerwald: But most conventional programming languages waste too much time on it
2021-09-01 18:16:17	→	jacks2 has joined #haskell
2021-09-01 18:19:21	ℹ	echoone83 is now known as echoone
2021-09-01 18:20:14	→	machinedgod has joined #haskell
2021-09-01 18:21:32	kuribas	but the danger of doing implementation before understanding exists in haskell too.
2021-09-01 18:22:07	maerwald	yeah, I don't think haskell can make something great out of a sloppy programmer
2021-09-01 18:22:25	merijn	This seems like moving goalposts
2021-09-01 18:22:43	merijn	Dijkstra said "it's good for teaching, because it discourages operational reasoning"
2021-09-01 18:22:45	→	mikoto-chan has joined #haskell
2021-09-01 18:22:53	maerwald	I know
2021-09-01 18:22:59	merijn	You guys: "but you still can and it won't fix arbitrary bad programmer behaviours!!"
2021-09-01 18:23:09	merijn	I mean...yeah, I guess
2021-09-01 18:23:09	maerwald	that's why I said that his sentence doesn't have much value beyond teaching
2021-09-01 18:24:26	echoone	Maybe there should be a second course called "Operational reasoning in programming" where they cover the nitty gritty.
2021-09-01 18:24:51	→	pbrisbin has joined #haskell
2021-09-01 18:24:53	→	max22- has joined #haskell
2021-09-01 18:24:59	maerwald	the thing is... most CS courses don't even talk much about operational vs denotational semantics
2021-09-01 18:25:13	echoone	True. I never learned that stuff in my CS degree.
2021-09-01 18:25:24	merijn	Most CS degrees are bad, yes
2021-09-01 18:25:25	maerwald	even in compiler course, we talked more about Chomsky than those things
2021-09-01 18:25:56	maerwald	yeah, I'm pretty confident my degree was a waste of time :)
2021-09-01 18:26:08	merijn	I'm pretty confident mine wasn't :p
2021-09-01 18:26:20	merijn	That's Dijkstra's entire point
2021-09-01 18:26:28	merijn	Just because most are shite, doesn't mean they *have* to be
2021-09-01 18:27:11	→	hannessteffenhag has joined #haskell
2021-09-01 18:27:32	maerwald	I got fed so much of Java design patterns that I still have nightmares about observer patterns following me
2021-09-01 18:27:40	echoone	lol
2021-09-01 18:27:40	kuribas	merijn: Utrecht?
2021-09-01 18:28:00	kuribas	maerwald: Java design patterns are BS.
2021-09-01 18:28:08	merijn	kuribas: Nope, VU in Amsterdam
2021-09-01 18:28:12	kuribas	maerwald: or rather, they are so vague that the are always right.
2021-09-01 18:28:16	kuribas	merijn: right
2021-09-01 18:28:25	maerwald	kuribas: I suck at OOP
2021-09-01 18:28:39	kuribas	maerwald: that's ok :)
2021-09-01 18:28:45	echoone	I think everyone sucks at OOP.
2021-09-01 18:28:50	←	tengu1 has quit (Ping timeout: 256 seconds)
2021-09-01 18:29:22	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-01 18:29:33	absence	is it possible to derive aeson types for higher-kinded data? i've tried searching online and found monstrous workarounds, but there's also mention about a "future" QuantifiedConstraints extension that will simplify things, and i believe that's available now?
2021-09-01 18:32:51	→	ravan has joined #haskell
2021-09-01 18:34:11	→	Vajb has joined #haskell
2021-09-01 18:35:11	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-01 18:35:46	→	Vajb has joined #haskell
2021-09-01 18:37:45	←	sleblanc has quit (Ping timeout: 252 seconds)
2021-09-01 18:39:03	←	trcc has quit (Remote host closed the connection)
2021-09-01 18:39:35	→	trcc has joined #haskell
2021-09-01 18:42:30	←	hendursaga has quit (Quit: hendursaga)
2021-09-01 18:42:57	→	hendursaga has joined #haskell
2021-09-01 18:43:48	←	mjs2600 has quit (Ping timeout: 252 seconds)
2021-09-01 18:47:07	←	iqubic has left #haskell (ERC (IRC client for Emacs 28.0.50))
2021-09-01 18:47:46	←	Skyfire has quit (Ping timeout: 240 seconds)
2021-09-01 18:48:46	←	ravan has left #haskell (Leaving)
2021-09-01 18:49:17	←	max22- has quit (Ping timeout: 256 seconds)
2021-09-01 18:49:52	→	shriekingnoise has joined #haskell
2021-09-01 18:50:33	→	eggplantade has joined #haskell
2021-09-01 18:51:27	→	o0p4c has joined #haskell
2021-09-01 18:51:34	←	opac has quit (Read error: Connection reset by peer)
2021-09-01 18:51:37	ℹ	o0p4c is now known as opac
2021-09-01 18:53:43	←	__monty__ has quit (Remote host closed the connection)
2021-09-01 18:53:58	→	__monty__ has joined #haskell
2021-09-01 18:54:48	←	eggplantade has quit (Ping timeout: 252 seconds)
2021-09-01 18:56:57	kuribas	absence: could you use a newtype?
2021-09-01 18:57:31	kuribas	like: data Hk f = Hk (f Int) (f String); newtype HKProxy f a = HKProxy f a; instance ToJSON (f a) => ToJSON (HKProxy f a); instance ToJSON (Hk HKProxy)
2021-09-01 18:58:15	←	xsperry has quit
2021-09-01 18:58:20	kuribas	erm (Hk (HKProxy f))
2021-09-01 18:59:22	kuribas	hmm, I guess not...
2021-09-01 19:01:45	←	kmein has quit (Quit: ciao kakao)
2021-09-01 19:02:04	→	kmein has joined #haskell
2021-09-01 19:02:33	←	df has quit (Ping timeout: 240 seconds)
2021-09-01 19:08:43	ℹ	irc: disconnected from server
2021-09-01 19:09:03	→	oxide has joined #haskell
2021-09-01 19:09:03	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-01 19:09:03	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-01 19:09:03	ℹ	Channel #haskell: 723 nicks (1 op, 0 voices, 722 normals)
2021-09-01 19:09:03	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-01 19:12:13	→	max22- has joined #haskell
2021-09-01 19:16:37	←	jacks2 has quit (Quit: quit)
2021-09-01 19:17:23	←	TimWolla has quit (Quit: Bye)
2021-09-01 19:21:46	→	TimWolla has joined #haskell
2021-09-01 19:25:03	←	Boomerang has quit (Ping timeout: 252 seconds)
2021-09-01 19:28:19	→	Sgeo has joined #haskell
2021-09-01 19:31:19	←	trcc has quit (Remote host closed the connection)
2021-09-01 19:31:41	←	hololeap_ has quit (Ping timeout: 276 seconds)
2021-09-01 19:32:51	→	ec_ has joined #haskell
2021-09-01 19:34:17	←	ec_ has quit (Client Quit)
2021-09-01 19:34:31	→	ec_ has joined #haskell
2021-09-01 19:36:02	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-01 19:36:02	exarkun	https://github.com/PrivateStorageio/PaymentServer/blob/99.enforce-token-count/test/Stripe.hs#L86-L87 runs fine.  https://github.com/PrivateStorageio/PaymentServer/blob/99.enforce-token-count/test/Redemption.hs#L72-L83 seems awfully similar to me but hangs for a few minutes before failing.
2021-09-01 19:36:48	exarkun	I dunno why
2021-09-01 19:36:49	→	Vajb has joined #haskell
2021-09-01 19:37:00	exarkun	And I dunno where to look to find out
2021-09-01 19:38:40	→	df has joined #haskell
2021-09-01 19:44:34	→	Everything has joined #haskell
2021-09-01 19:44:41	←	waleee has quit (Ping timeout: 245 seconds)
2021-09-01 19:46:45	→	waleee has joined #haskell
2021-09-01 19:47:09	←	BestSteve has quit (Ping timeout: 245 seconds)
2021-09-01 19:47:41	←	qwedfg has quit (Ping timeout: 244 seconds)
2021-09-01 19:47:55	[exa]	exarkun: how does it fail? OOM? timeout?
2021-09-01 19:51:58	exarkun	[exa]: On one run it reported OKFAIL Exception: WaiTestFailure "Expected status code 200, but received 400"
2021-09-01 19:52:08	exarkun	On another it just said FAIL w/ that exception
2021-09-01 19:52:20	←	vysn has quit (Quit: WeeChat 3.2)
2021-09-01 19:53:46	exarkun	I found the bug that leads to the 400 (instead of the 200) and if I fix that bug then it passes fast instead of failing slow ... so I guess that's some kind of clue, except it doesn't help me understand why it fails slow instead of failing fast.
2021-09-01 19:55:10	→	hnOsmium0001 has joined #haskell
2021-09-01 19:55:10	[exa]	I only see an extra `encode` but that's likely ignorable
2021-09-01 19:55:34	__monty__	Sounds like a timeout.
2021-09-01 19:55:44	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-01 19:55:48	→	BestSteve has joined #haskell
2021-09-01 20:02:19	→	marjinal1st has joined #haskell
2021-09-01 20:03:46	→	vysn has joined #haskell
2021-09-01 20:03:57	→	wroathe has joined #haskell
2021-09-01 20:03:57	←	wroathe has quit (Changing host)
2021-09-01 20:03:57	→	wroathe has joined #haskell
2021-09-01 20:04:06	←	jippiedoe has quit (Ping timeout: 252 seconds)
2021-09-01 20:06:03	→	ec_ has joined #haskell
2021-09-01 20:08:00	←	neo has quit (Remote host closed the connection)
2021-09-01 20:08:21	←	wroathe has quit (Ping timeout: 244 seconds)
2021-09-01 20:08:25	→	neo has joined #haskell
2021-09-01 20:09:16	←	echoone has quit (Quit: Client closed)
2021-09-01 20:12:09	→	Gurkenglas has joined #haskell
2021-09-01 20:12:58	→	shapr has joined #haskell
2021-09-01 20:13:27	←	acidjnk_new has quit (Ping timeout: 252 seconds)
2021-09-01 20:14:57	→	zachjs has joined #haskell
2021-09-01 20:14:59	←	TimWolla has quit (Quit: Bye)
2021-09-01 20:15:43	exarkun	okay application logic bug, all my fault
2021-09-01 20:16:30	←	kenran has quit (Quit: WeeChat info:version)
2021-09-01 20:16:35	→	timCF has joined #haskell
2021-09-01 20:19:57	→	TimWolla has joined #haskell
2021-09-01 20:20:21	timCF	Hello! Any `Async` users there? I have a question about process linking. Is `link` working always to one direction (propagation of exception from spawned process back to parent process), or it will propagate back as well? Also I'm looking for possibility to make all child `Async` processes terminated (cancelled) in case where parent process has been cancelled. Is `link` function the way to go, or there is 
2021-09-01 20:20:27	timCF	some better function for this?
2021-09-01 20:22:09	←	[itchyjunk] has quit (Quit: Leaving)
2021-09-01 20:23:17	→	pfurla has joined #haskell
2021-09-01 20:23:59	timCF	Or maybe there is some other library which solves task of building such proccess trees (a bit similar to Erlang typical procees tree) better than `Async`?
2021-09-01 20:26:06	merijn	It can be done with async, but requires a bit of low level fiddling to get nice abstractions
2021-09-01 20:26:11	←	pfurla_ has quit (Ping timeout: 256 seconds)
2021-09-01 20:29:09	←	jonathanx has quit (Remote host closed the connection)
2021-09-01 20:29:53	→	myShoggoth has joined #haskell
2021-09-01 20:30:01	←	neo has quit (Ping timeout: 252 seconds)
2021-09-01 20:30:34	←	turlando has quit (Read error: Connection reset by peer)
2021-09-01 20:34:54	←	vysn has quit (Ping timeout: 252 seconds)
2021-09-01 20:35:18	→	turlando has joined #haskell
2021-09-01 20:35:18	←	turlando has quit (Changing host)
2021-09-01 20:35:18	→	turlando has joined #haskell
2021-09-01 20:39:04	←	lortabac has quit (Quit: WeeChat 2.8)
2021-09-01 20:39:17	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-01 20:41:03	→	ec_ has joined #haskell
2021-09-01 20:44:48	→	011AAA542 has joined #haskell
2021-09-01 20:44:48	→	047AAD8YA has joined #haskell
2021-09-01 20:44:50	←	047AAD8YA has quit (Client Quit)
2021-09-01 20:44:56	←	011AAA542 has quit (Client Quit)
2021-09-01 20:45:13	→	mc47 has joined #haskell
2021-09-01 20:46:08	→	xsperry has joined #haskell
2021-09-01 20:47:17	←	enoq has quit (Quit: enoq)
2021-09-01 20:47:30	←	hyiltiz has quit (Ping timeout: 252 seconds)
2021-09-01 20:49:11	→	hyiltiz has joined #haskell
2021-09-01 20:52:26	→	eggplantade has joined #haskell
2021-09-01 20:56:39	←	eggplantade has quit (Ping timeout: 240 seconds)
2021-09-01 21:06:05	→	eggplantade has joined #haskell
2021-09-01 21:11:32	→	wroathe has joined #haskell
2021-09-01 21:11:32	←	wroathe has quit (Changing host)
2021-09-01 21:11:32	→	wroathe has joined #haskell
2021-09-01 21:17:35	→	Morrow has joined #haskell
2021-09-01 21:20:57	→	hgolden has joined #haskell
2021-09-01 21:22:00	kuribas	here's a handy function which I often need: buildMap :: Ord k => (a -> k) -> (a -> v) -> [a] -> Map.Map k [v]
2021-09-01 21:22:13	kuribas	buildMap getKey getValue = Map.map reverse . Map.fromListWith (++) . map (\x -> (getKey x, [getValue x]))
2021-09-01 21:22:28	kuribas	building up a map from a key and value.
2021-09-01 21:22:32	kuribas	and accumulating the values.
2021-09-01 21:22:50	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-01 21:23:47	←	MQ-17J has quit (Ping timeout: 244 seconds)
2021-09-01 21:24:04	→	MQ-17J has joined #haskell
2021-09-01 21:26:12	←	dajoer has quit (Quit: leaving)
2021-09-01 21:27:38	←	xsperry has quit (Quit: quit)
2021-09-01 21:29:22	→	ec_ has joined #haskell
2021-09-01 21:29:28	←	marjinal1st has quit (Ping timeout: 244 seconds)
2021-09-01 21:35:41	←	Morrow has quit (Read error: Connection reset by peer)
2021-09-01 21:35:47	→	Morrow_ has joined #haskell
2021-09-01 21:37:22	→	Morrow has joined #haskell
2021-09-01 21:37:27	→	_ht has joined #haskell
2021-09-01 21:37:36	→	justsomeguy has joined #haskell
2021-09-01 21:39:25	←	eggplantade has quit (Remote host closed the connection)
2021-09-01 21:39:27	→	lavaman has joined #haskell
2021-09-01 21:42:01	→	jippiedoe has joined #haskell
2021-09-01 21:44:12	←	lavaman has quit (Ping timeout: 252 seconds)
2021-09-01 21:46:00	←	merijn has quit (Ping timeout: 244 seconds)
2021-09-01 21:47:23	→	merijn has joined #haskell
2021-09-01 21:51:12	→	qwedfg has joined #haskell
2021-09-01 21:52:27	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-01 21:53:03	←	kuribas has quit (Quit: ERC (IRC client for Emacs 26.3))
2021-09-01 21:53:24	→	merijn has joined #haskell
2021-09-01 21:58:33	←	merijn has quit (Ping timeout: 256 seconds)
2021-09-01 21:59:41	→	merijn has joined #haskell
2021-09-01 22:01:45	←	d0ku has quit (Remote host closed the connection)
2021-09-01 22:01:46	→	tzh has joined #haskell
2021-09-01 22:03:17	→	aegon has joined #haskell
2021-09-01 22:03:23	→	Erutuon has joined #haskell
2021-09-01 22:03:30	←	zachjs has quit (Quit: zachjs)
2021-09-01 22:04:26	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-01 22:05:06	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-01 22:05:46	→	merijn has joined #haskell
2021-09-01 22:10:19	←	jippiedoe has quit (Quit: Leaving)
2021-09-01 22:10:48	←	merijn has quit (Ping timeout: 244 seconds)
2021-09-01 22:11:25	→	merijn has joined #haskell
2021-09-01 22:13:27	→	SystemFFan has joined #haskell
2021-09-01 22:15:14	→	ec_ has joined #haskell
2021-09-01 22:16:29	←	merijn has quit (Ping timeout: 244 seconds)
2021-09-01 22:17:44	→	merijn has joined #haskell
2021-09-01 22:19:04	←	nschoe has quit (Ping timeout: 244 seconds)
2021-09-01 22:19:31	→	eggplantade has joined #haskell
2021-09-01 22:22:35	→	econo has joined #haskell
2021-09-01 22:23:39	←	Xe has quit (Ping timeout: 240 seconds)
2021-09-01 22:25:09	←	merijn has quit (Ping timeout: 240 seconds)
2021-09-01 22:29:07	→	Xe has joined #haskell
2021-09-01 22:31:02	→	xsperry has joined #haskell
2021-09-01 22:32:55	tomsmeding	buildMap getKey getValue = Map.fromList . map ((,) <$> head . fst <*> map snd) . groupOn ((==) `on` fst) . sortBy (comparing fst) . map ((,) <$> getKey <*> getValue)
2021-09-01 22:33:07	tomsmeding	potentially more efficient because less (++) ?
2021-09-01 22:33:52	←	fendor_ has quit (Remote host closed the connection)
2021-09-01 22:36:18	tomsmeding	@tell kuribas https://ircbrowse.tomsmeding.com/day/lchaskell/2021/09/01?id=163897#trid163897
2021-09-01 22:36:18	lambdabot	Consider it noted.
2021-09-01 22:42:59	←	xsperry has quit
2021-09-01 22:46:33	→	xsperry has joined #haskell
2021-09-01 22:51:42	→	merijn has joined #haskell
2021-09-01 22:52:24	←	pgib has quit (Ping timeout: 252 seconds)
2021-09-01 22:53:21	←	hannessteffenhag has quit (Ping timeout: 245 seconds)
2021-09-01 22:54:09	←	mikoto-chan has quit (Quit: mikoto-chan)
2021-09-01 22:54:15	←	ec_ has quit (Remote host closed the connection)
2021-09-01 22:54:37	→	ec_ has joined #haskell
2021-09-01 22:56:46	←	merijn has quit (Ping timeout: 245 seconds)
2021-09-01 23:03:08	→	desantra has joined #haskell
2021-09-01 23:04:14	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-01 23:06:49	←	eggplantade has quit (Remote host closed the connection)
2021-09-01 23:09:02	→	hannessteffenhag has joined #haskell
2021-09-01 23:10:23	←	jrm has quit (Quit: ciao)
2021-09-01 23:11:21	phaazon	@hoogle ifM
2021-09-01 23:11:22	lambdabot	Control.Monad.Extra ifM :: Monad m => m Bool -> m a -> m a -> m a
2021-09-01 23:11:22	lambdabot	Extra ifM :: Monad m => m Bool -> m a -> m a -> m a
2021-09-01 23:11:22	lambdabot	Protolude ifM :: Monad m => m Bool -> m a -> m a -> m a
2021-09-01 23:11:51	→	jrm has joined #haskell
2021-09-01 23:13:21	←	hannessteffenhag has quit (Ping timeout: 256 seconds)
2021-09-01 23:13:33	→	Tuplanolla has joined #haskell
2021-09-01 23:13:46	→	Pickchea has joined #haskell
2021-09-01 23:15:04	←	qwedfg has quit (Read error: Connection reset by peer)
2021-09-01 23:15:32	→	ec_ has joined #haskell
2021-09-01 23:18:39	→	qwedfg has joined #haskell
2021-09-01 23:19:53	→	ub has joined #haskell
2021-09-01 23:25:58	←	alx741 has quit (Quit: alx741)
2021-09-01 23:26:17	→	hannessteffenhag has joined #haskell
2021-09-01 23:28:05	←	qwedfg has quit (Read error: Connection reset by peer)
2021-09-01 23:28:13	→	eggplantade has joined #haskell
2021-09-01 23:28:29	→	Guest10 has joined #haskell
2021-09-01 23:28:34	→	merijn has joined #haskell
2021-09-01 23:28:42	←	ub has quit (Ping timeout: 252 seconds)
2021-09-01 23:29:23	Guest10	is there an efficient solution to the snail problem in haskell? https://www.codewars.com/kata/521c2db8ddc89b9b7a0000c1/haskell
2021-09-01 23:30:39	←	hannessteffenhag has quit (Ping timeout: 240 seconds)
2021-09-01 23:30:52	Guest10	i know https://rextester.com/NJMZH56113 but with all the transposes it offers a less efficient solution than the normal imperative solution 
2021-09-01 23:31:01	→	qwedfg has joined #haskell
2021-09-01 23:33:04	int-e	but it's so short and idiomatic :P
2021-09-01 23:33:56	Guest10	ye i love that solution. just wondering about efficiency
2021-09-01 23:34:44	int-e	An efficient solution will have to forego lists, I think. And once you use arrays... it's kind of boring?
2021-09-01 23:35:01	Guest10	vectors probably
2021-09-01 23:35:05	Guest10	also yes
2021-09-01 23:35:13	Guest10	but im still interested
2021-09-01 23:35:41	Guest10	because we still need to think about efficiency in code. no matter how fucking beautiful that solution is
2021-09-01 23:36:08	monochrom	Use a 2D array and work on indexing tricks.
2021-09-01 23:36:26	monochrom	Note that array ≠ list.
2021-09-01 23:37:05	monochrom	The indexing trick is not boring.
2021-09-01 23:38:25	Guest10	monochrom idk how to do what you're saying in haskell. that's why i raised the subject
2021-09-01 23:39:31	←	idf has quit (Remote host closed the connection)
2021-09-01 23:39:45	Guest10	this was my solution in python which is not beautiful at all but works (without indexing tricks tho): https://pastebin.com/LgYCdfJv
2021-09-01 23:40:33	Guest10	just wondering if actually efficient solutions could be made in haskell and still be elegant
2021-09-01 23:41:44	monochrom	Do you already know how to use either the vector library from Hackage or the Data.Array module that comes with GHC?
2021-09-01 23:42:31	←	max22- has quit (Ping timeout: 245 seconds)
2021-09-01 23:45:09	[exa]	Guest10: if you want to do that with lists, just splitting the lists in half gives a pretty interesting recursion scheme there tbh
2021-09-01 23:45:14	→	hannessteffenhag has joined #haskell
2021-09-01 23:46:53	→	zebrag has joined #haskell
2021-09-01 23:47:56	←	benin0369323 has quit (Ping timeout: 244 seconds)
2021-09-01 23:48:01	←	OscarH has quit (Ping timeout: 252 seconds)
2021-09-01 23:48:54	Guest10	monochrom no
2021-09-01 23:49:21	int-e	> let go 0 _ x y = [(x,y)]; go n d x y = [(x+d*i,y) | i <- [0..n-1]] ++ [(x+d*n,y+d*i) | i <- [0..n-1]] ++ go (n-1) (-d) (x+d*n) (y+d*n); snail n = go (n-1) 1 0 0 in snail 3 -- just computing indices
2021-09-01 23:49:23	lambdabot	 [(0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1)]
2021-09-01 23:49:29	←	hannessteffenhag has quit (Ping timeout: 244 seconds)
2021-09-01 23:49:35	Guest10	[exa] umm ok
2021-09-01 23:49:44	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-01 23:49:55	monochrom	They you can start by tossing a coin to pick one and start learning.
2021-09-01 23:50:17	monochrom	Either one is just a matter of reading library doc and practicing.
2021-09-01 23:51:40	Guest10	well i already am learning it
2021-09-01 23:51:50	Guest10	just thought somebody would have a clever solution to suggest
2021-09-01 23:52:09	[exa]	hm let's convert some logicks to data
2021-09-01 23:52:20	[exa]	(because that is the way™)
2021-09-01 23:53:21	←	MQ-17J has quit (Ping timeout: 245 seconds)
2021-09-01 23:53:41	int-e	Well, the  reverse . transpose  thing is clever. You can mimic it with an array library that implements reversals and transposes and tails as *views* on an initial 2D array... keeping track of a linear transformation... but it's hard to justify that amount of code for this simple problem
2021-09-01 23:53:42	Guest10	im not fluent enough to come up with one myself I(tho learning) yet, but still interested in how would that even look like in haskell
2021-09-01 23:54:20	Guest10	int-e would you say it's just not a kind of problem haskell is good at solving?
2021-09-01 23:54:37	→	MQ-17J has joined #haskell
2021-09-01 23:55:06	Guest10	well not literally haskel but you get what i mean
2021-09-01 23:55:18	int-e	Oh it's good enough. It doesn't get a chance to shine and it suffers from not having the concise array indexing notation that imperative programming languages tend to have.
2021-09-01 23:55:28	[exa]	guideWithLimits = [ (_1, (+1), width), (_2, (+1), height), (_1, (- 1), 1), (_2, (- 1), 1)]
2021-09-01 23:55:31	monochrom	I am not very thrilled with composing views, since there are about sqrt(n) views to compose eventually.
2021-09-01 23:55:58	int-e	monochrom: yes, which is why you keep track of a linear transformation as a matrix
2021-09-01 23:56:17	int-e	so you don't have to go through the whole stack on every access.
2021-09-01 23:56:18	[exa]	unfortunately it requires rotating the guide but that can be done in AO(1) with the lazy queue
2021-09-01 23:56:33	int-e	monochrom: or at least that's what I had in mind
2021-09-02 00:00:19	monochrom	[exa], I would replace "rotation" by cycle.  cycle [x,y,z] = [x,y,z,x,y,z,x,y,z,...] not more rotation, just consumption.
2021-09-02 00:00:30	→	ec_ has joined #haskell
2021-09-02 00:02:09	[exa]	monochrom: I need to update the bounds there, but yeah there might be a better way
2021-09-02 00:02:39	←	merijn has quit (Ping timeout: 240 seconds)
2021-09-02 00:03:24	[exa]	anyway that was an exercise in "materialize the offsets for clarity", not saying it's good :]
2021-09-02 00:03:25	→	mikoto-chan has joined #haskell
2021-09-02 00:06:11	→	lavaman has joined #haskell
2021-09-02 00:06:28	→	Guest8166 has joined #haskell
2021-09-02 00:07:52	→	max22- has joined #haskell
2021-09-02 00:08:52	→	chisui has joined #haskell
2021-09-02 00:12:08	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-02 00:12:47	←	desantra has quit (Quit: WeeChat 3.2)
2021-09-02 00:13:00	→	MQ-17J has joined #haskell
2021-09-02 00:21:48	←	mikoto-chan has quit (Quit: mikoto-chan)
2021-09-02 00:25:12	→	commuswift[m] has joined #haskell
2021-09-02 00:25:50	←	Guest10 has quit (Ping timeout: 256 seconds)
2021-09-02 00:25:51	←	justsomeguy has quit (Ping timeout: 245 seconds)
2021-09-02 00:27:12	←	azeem has quit (Ping timeout: 244 seconds)
2021-09-02 00:27:36	→	azeem has joined #haskell
2021-09-02 00:27:50	→	justsomeguy has joined #haskell
2021-09-02 00:32:48	→	burnsidesLlama has joined #haskell
2021-09-02 00:34:09	→	vysn has joined #haskell
2021-09-02 00:34:35	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-02 00:35:39	→	mikoto-chan has joined #haskell
2021-09-02 00:36:21	←	lisq has quit (Quit: lisq)
2021-09-02 00:39:05	←	hyiltiz has quit (Ping timeout: 244 seconds)
2021-09-02 00:39:55	←	justsomeguy has quit (Quit: WeeChat 3.2)
2021-09-02 00:40:31	←	wroathe has quit (Ping timeout: 245 seconds)
2021-09-02 00:40:45	ℹ	lep is now known as lep-
2021-09-02 00:40:59	→	hyiltiz has joined #haskell
2021-09-02 00:41:30	←	burnsidesLlama has quit (Remote host closed the connection)
2021-09-02 00:42:57	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-02 00:43:21	→	MQ-17J has joined #haskell
2021-09-02 00:44:31	→	burnsidesLlama has joined #haskell
2021-09-02 00:44:37	→	hannessteffenhag has joined #haskell
2021-09-02 00:44:54	→	cloudy[m] has joined #haskell
2021-09-02 00:45:17	→	ec_ has joined #haskell
2021-09-02 00:48:10	ℹ	cloudy[m] is now known as cloudy
2021-09-02 00:48:54	←	hannessteffenhag has quit (Ping timeout: 244 seconds)
2021-09-02 00:50:05	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-02 00:51:17	ℹ	lep- is now known as lep
2021-09-02 00:51:27	←	arjun has quit (Remote host closed the connection)
2021-09-02 00:52:59	←	lavaman has quit (Remote host closed the connection)
2021-09-02 00:53:54	→	Lycurgus has joined #haskell
2021-09-02 00:54:49	→	wroathe has joined #haskell
2021-09-02 00:54:50	←	wroathe has quit (Changing host)
2021-09-02 00:54:50	→	wroathe has joined #haskell
2021-09-02 00:55:43	←	superbil has quit (Ping timeout: 250 seconds)
2021-09-02 00:59:46	→	echoone has joined #haskell
2021-09-02 01:00:28	ℹ	lep is now known as lep-
2021-09-02 01:00:55	←	nvmd has quit (Ping timeout: 250 seconds)
2021-09-02 01:01:00	←	cloudy has quit (Quit: Reconnecting)
2021-09-02 01:01:13	→	lisq has joined #haskell
2021-09-02 01:01:15	→	cloudy has joined #haskell
2021-09-02 01:01:39	→	elf_fortrez has joined #haskell
2021-09-02 01:02:07	←	burnsidesLlama has quit (Remote host closed the connection)
2021-09-02 01:03:22	→	hannessteffenhag has joined #haskell
2021-09-02 01:03:32	←	chisui has quit (Quit: Client closed)
2021-09-02 01:03:34	←	elf_fortrez has quit (Client Quit)
2021-09-02 01:03:47	→	burnsidesLlama has joined #haskell
2021-09-02 01:09:20	←	azeem has quit (Ping timeout: 252 seconds)
2021-09-02 01:09:51	→	azeem has joined #haskell
2021-09-02 01:14:32	←	sclv has quit (Ping timeout: 276 seconds)
2021-09-02 01:15:11	←	rune has quit (Ping timeout: 276 seconds)
2021-09-02 01:15:11	←	royo has quit (Ping timeout: 276 seconds)
2021-09-02 01:15:11	←	zzz has quit (Ping timeout: 276 seconds)
2021-09-02 01:15:36	←	burnsidesLlama has quit (Remote host closed the connection)
2021-09-02 01:15:50	←	caasih has quit (Ping timeout: 276 seconds)
2021-09-02 01:15:50	←	welterde has quit (Ping timeout: 276 seconds)
2021-09-02 01:16:19	←	azeem has quit (Ping timeout: 256 seconds)
2021-09-02 01:16:34	→	caasih has joined #haskell
2021-09-02 01:16:41	←	hannessteffenhag has quit (Ping timeout: 245 seconds)
2021-09-02 01:17:04	→	rune has joined #haskell
2021-09-02 01:17:23	→	azeem has joined #haskell
2021-09-02 01:17:29	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-02 01:21:23	→	zzz has joined #haskell
2021-09-02 01:23:29	→	lavaman has joined #haskell
2021-09-02 01:26:24	ℹ	lep- is now known as lep
2021-09-02 01:26:56	←	Guest8166 has quit (Ping timeout: 252 seconds)
2021-09-02 01:27:59	→	ec_ has joined #haskell
2021-09-02 01:28:02	←	lavaman has quit (Ping timeout: 252 seconds)
2021-09-02 01:28:09	→	welterde has joined #haskell
2021-09-02 01:28:14	→	kenran has joined #haskell
2021-09-02 01:28:38	→	royo has joined #haskell
2021-09-02 01:29:21	→	sclv has joined #haskell
2021-09-02 01:33:45	←	_ht has quit (Remote host closed the connection)
2021-09-02 01:34:53	←	juhp has quit (Ping timeout: 244 seconds)
2021-09-02 01:35:44	←	hgolden has quit (Ping timeout: 252 seconds)
2021-09-02 01:36:46	→	juhp has joined #haskell
2021-09-02 01:36:56	→	talismanick has joined #haskell
2021-09-02 01:38:18	←	flukiluke has quit (Ping timeout: 250 seconds)
2021-09-02 01:38:41	→	flukiluke has joined #haskell
2021-09-02 01:38:42	←	echoone has quit (Quit: Client closed)
2021-09-02 01:40:41	→	superbil has joined #haskell
2021-09-02 01:42:07	←	dunj3 has quit (Remote host closed the connection)
2021-09-02 01:46:24	←	gehmehgeh has quit (Quit: Leaving)
2021-09-02 01:47:21	→	pavonia has joined #haskell
2021-09-02 01:49:52	←	aman has quit (Ping timeout: 244 seconds)
2021-09-02 01:52:14	←	superbil has quit (Ping timeout: 252 seconds)
2021-09-02 01:55:29	→	burnsidesLlama has joined #haskell
2021-09-02 01:58:31	dminuoso	Let's pretend there was a global malware that would delete all binary installations of a Haskeller compiler (GHC, Hugs, all of them). How tedious would the process be of bootstrapping GHC again?
2021-09-02 01:59:11	→	merijn has joined #haskell
2021-09-02 01:59:51	dminuoso	In principle you'd just have to implement Haskell with all the language extensions used in GHC, and reimplement the RTS behavior in all details right?
2021-09-02 02:00:22	Lycurgus	why couldn't it be recompiled?
2021-09-02 02:00:34	dminuoso	GHC is written in Haskell.
2021-09-02 02:00:59	dminuoso	With all binary installations (and archives!) of a Haskell compiler removed, you couldn't bootstrap it.
2021-09-02 02:01:27	Lycurgus	so you meant not just the final binary but anything between sources and the binary
2021-09-02 02:01:31	dminuoso	Right.
2021-09-02 02:01:41	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-02 02:01:45	←	burnsidesLlama has quit (Ping timeout: 244 seconds)
2021-09-02 02:02:12	→	hgolden has joined #haskell
2021-09-02 02:03:16	Lycurgus	you could still prolly do somekina translation on the sources with a bootstrapping rube goldberg kinda thing
2021-09-02 02:03:51	→	MQ-17J has joined #haskell
2021-09-02 02:05:24	Lycurgus	that autopoetic thing began with smalltalk sfaict
2021-09-02 02:05:45	Lycurgus	but prolly goes back further
2021-09-02 02:06:19	Lycurgus	to lisp i imagine
2021-09-02 02:06:20	dsal	You can experience a lot of that pain by just trying to port it to a new architecture.
2021-09-02 02:06:51	dminuoso	dsal: I dont have to implement a whole compiler for that, though.
2021-09-02 02:07:09	sclv	yeah i was going to say that if you have unregisterized sources you can _in theory_ compile them directly with gcc https://downloads.haskell.org/~ghc/9.0.1/docs/html/users_guide/codegens.html?highlight=unregisterised#c-code-generator-fvia-c
2021-09-02 02:07:10	Lycurgus	really they claim it's facilitated
2021-09-02 02:07:14	dminuoso	For porting to a new architecture might start with Core
2021-09-02 02:07:17	Lycurgus	which means eased
2021-09-02 02:07:25	dsal	dminuoso: Yeah, I guess the low-level stuff is relatively smaller.
2021-09-02 02:08:14	dminuoso	I'm guessing adding a new architecture faces three primary problems: RTS, code generation and linkage.
2021-09-02 02:08:22	⚡	Lycurgus was pleased to see a few minutes ago that a stack built binary ran ok copied to another machine
2021-09-02 02:09:00	dminuoso	sclv: That's just for code generation though. The moment we're generating code already, most of the hard work is done.
2021-09-02 02:09:12	sclv	i don't know what you mean
2021-09-02 02:09:30	sclv	i mean that you can get a "working" ghc by building from unregisterized c
2021-09-02 02:09:32	sclv	directly
2021-09-02 02:09:38	sclv	and that in turn can compile into unregiserized c
2021-09-02 02:09:53	sclv	or any supported arch
2021-09-02 02:10:01	←	MQ-17J has quit (Ping timeout: 245 seconds)
2021-09-02 02:10:06	←	mikoto-chan has quit (Ping timeout: 245 seconds)
2021-09-02 02:10:32	dminuoso	Ah. Im just saying, this wouldn't help in case of the global Haskell Removal Incident
2021-09-02 02:10:48	sclv	assuming you already had unregisterized sources it would
2021-09-02 02:11:11	sclv	you could just throw those sources at gcc
2021-09-02 02:11:14	⚡	Lycurgus .oO( somebody's got too much time on their hands)
2021-09-02 02:11:46	→	lavaman has joined #haskell
2021-09-02 02:11:55	→	ec_ has joined #haskell
2021-09-02 02:12:34	dminuoso	I guess it just fascinates me, how much technology requires itself for bootstrapping. Let's say we didn't have unregistered sources for GHC.
2021-09-02 02:12:34	→	mikoto-chan has joined #haskell
2021-09-02 02:12:59	kaol	Hugs is implemented in C, I suppose it could bootstrap an old enough GHC.
2021-09-02 02:13:11	dminuoso	kaol: I explicitly even named Hugs!
2021-09-02 02:13:20	janus	haskell is gods own programming langauge, god will make sure haskell emerges from nature again
2021-09-02 02:13:25	dminuoso	The tapeworm will destroy Hugs as well.
2021-09-02 02:13:47	dminuoso	(It's quite a destructive and evil tapeworm)
2021-09-02 02:14:35	dminuoso	The thought that sparked all of this was wondering how could I ever actually trust my compiler.
2021-09-02 02:14:59	dminuoso	So kaol might actually have supplied a sufficient answer for that.
2021-09-02 02:15:49	→	MQ-17J has joined #haskell
2021-09-02 02:15:52	dminuoso	I can only reasonably trust a GHC binary to be free of evil modifications if I built it myself - but I can't build GHC without GHC - 
2021-09-02 02:16:08	dsal	...from spec
2021-09-02 02:16:31	←	lavaman has quit (Ping timeout: 252 seconds)
2021-09-02 02:18:05	←	ubert has quit (Ping timeout: 252 seconds)
2021-09-02 02:19:54	→	Lord_of_Life_ has joined #haskell
2021-09-02 02:21:16	←	Lord_of_Life has quit (Ping timeout: 245 seconds)
2021-09-02 02:21:16	ℹ	Lord_of_Life_ is now known as Lord_of_Life
2021-09-02 02:22:42	monochrom	May I exploit a loop hole in your question?  (Haha the irony.)
2021-09-02 02:23:24	monochrom	It may be viable to take surviving gopher and miranda compilers to restart GHC.
2021-09-02 02:23:42	monochrom	Your tapeworm passed over them, no? :)
2021-09-02 02:23:59	monochrom	err s/gopher/gofer/
2021-09-02 02:24:40	monochrom	(Let's leave gopher for some other day when you propose "if a tapeworm destroys all web browsers and web servers"... >:) )
2021-09-02 02:25:21	←	mc47 has quit (Remote host closed the connection)
2021-09-02 02:26:33	monochrom	And if gofer and miranda were wiped out too, there would still be SML.
2021-09-02 02:26:58	monochrom	And if SML were wiped out too, there would still be Lisp. (Early *ML compilers were written in Lisp.)
2021-09-02 02:27:19	←	SystemFFan has quit (Remote host closed the connection)
2021-09-02 02:27:35	dminuoso	monochrom: Nice pun.
2021-09-02 02:27:50	dminuoso	If a tapeworm destroys all web browsers the world will be a better place.
2021-09-02 02:27:59	dminuoso	I wouldn't want anything to be restored after that.
2021-09-02 02:28:09	→	SystemFFan has joined #haskell
2021-09-02 02:28:27	dminuoso	But it's interesting, I really hadn't considered gofer and miranda.
2021-09-02 02:28:30	monochrom	:(
2021-09-02 02:29:18	dminuoso	Can we even be sure that all GHCs arent infested with evil modifications already?
2021-09-02 02:29:24	monochrom	The web has a good part, I enjoy the good part very much. Hyperlinking was a great invention. Much better than "[1]" and requiring the reader to scroll to the bottom for [1].
2021-09-02 02:29:36	kaol	NPM sure tries it best to destroy itself periodically.
2021-09-02 02:29:43	dminuoso	I mean if say Ben Gamaris machine was compromised, and he produced evil binaries that were then used to bootstrap other GHCs..
2021-09-02 02:29:59	dminuoso	That seems like a type of supply chain attack to be almost impossbile to get out of
2021-09-02 02:30:12	Lycurgus	how do you distinguish evil modifications from the next new breaking change?
2021-09-02 02:30:41	davean	dminuoso: you mean the trusting trust attack?
2021-09-02 02:30:47	dminuoso	monochrom: hyperlinking was a terrible invention since most webserver hosters break the principle idea of persistent links.
2021-09-02 02:30:51	←	mikoto-chan has quit (Ping timeout: 245 seconds)
2021-09-02 02:30:57	davean	dminuoso: you build GHC via-c, boot that from a minimal compiler, and walk forward recompiling
2021-09-02 02:31:06	monochrom	Yeah Dennis Ritchie's Turing Award lecture paints a basically bleak picture about this. (Except s/Haskell/C/.) It's very hard to fix.
2021-09-02 02:31:16	dminuoso	davean: via-c using what software?
2021-09-02 02:31:39	davean	dminuoso: old GHC, you save one - there are saved ones I believe
2021-09-02 02:31:45	davean	but you can also audit the C (if you're insane)
2021-09-02 02:31:50	→	acidjnk_new has joined #haskell
2021-09-02 02:32:01	dminuoso	Ill have to read Dennis Ritcies lecture on that.
2021-09-02 02:32:13	dminuoso	And yeah, it seems trusting trust is what Im chasing.
2021-09-02 02:32:32	dminuoso	davean: Of course that's assuming that that old GHC wasnt evil already. 
2021-09-02 02:32:38	davean	dminuoso: doesn't matter
2021-09-02 02:32:42	davean	if you audit the C
2021-09-02 02:32:56	←	wroathe has quit (Ping timeout: 252 seconds)
2021-09-02 02:33:02	davean	we can step forward to a C compile from a few machine code bytes
2021-09-02 02:33:15	davean	Its something like 200 bytes you have to trust
2021-09-02 02:33:16	←	merijn has quit (Ping timeout: 244 seconds)
2021-09-02 02:33:26	davean	Again, its a fuckton of work
2021-09-02 02:33:46	davean	but you can boot the world from a few bytes of machine code, if you trust the machine
2021-09-02 02:33:47	→	johnw has joined #haskell
2021-09-02 02:34:31	dminuoso	I've already silently accepted that I have to trust my machine of hardware I cant possibly inspect, with firmware I cant possibly inspect, running microcode I cant possibly inspect on a CPU I cant possibly inspect..
2021-09-02 02:35:09	→	superbil has joined #haskell
2021-09-02 02:35:49	monochrom	The PDP-11 is pretty reasonable to trust, without all those bells and whistles about CPU having its own OS etc.
2021-09-02 02:36:41	davean	dminuoso: https://github.com/oriansj/stage0
2021-09-02 02:38:07	davean	dminuoso: anyway, you CAN do this walk
2021-09-02 02:40:26	dminuoso	davean: That's an interesting bootstrap project
2021-09-02 02:40:51	→	deejaytee has joined #haskell
2021-09-02 02:41:06	←	kenran has quit (Quit: WeeChat info:version)
2021-09-02 02:41:55	davean	dminuoso: on power you can do a little better and inspect the firmware?
2021-09-02 02:42:13	davean	Its a hard problem, but not an unsolvable one
2021-09-02 02:43:21	←	MQ-17J has quit (Ping timeout: 245 seconds)
2021-09-02 02:43:37	→	MQ-17J has joined #haskell
2021-09-02 02:43:46	dminuoso	davean: bootstrapping hardware is much more difficult, though.
2021-09-02 02:43:51	←	michalz has quit (Remote host closed the connection)
2021-09-02 02:45:00	dminuoso	But I guess FPGAs would be a good starter
2021-09-02 02:45:39	dminuoso	Not entirely fool proof, but an evil modification inside an FPGA to affect unknown FPGA code that simulates say power
2021-09-02 02:45:46	dminuoso	Seems much more unrealistic
2021-09-02 02:46:31	dminuoso	All of this dampens my mood :(
2021-09-02 02:47:11	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-02 02:48:09	davean	dminuoso: I mean you can buy a machine which you can compile your own firmware for in POWER form today
2021-09-02 02:48:17	davean	That doesn't check the circutes mind you
2021-09-02 02:51:41	←	Erutuon has quit (Ping timeout: 245 seconds)
2021-09-02 02:52:14	→	ec_ has joined #haskell
2021-09-02 02:52:54	→	fendor has joined #haskell
2021-09-02 02:54:29	→	wroathe has joined #haskell
2021-09-02 02:54:30	←	wroathe has quit (Changing host)
2021-09-02 02:54:30	→	wroathe has joined #haskell
2021-09-02 02:54:45	→	lavaman has joined #haskell
2021-09-02 02:59:06	←	lavaman has quit (Ping timeout: 244 seconds)
2021-09-02 03:00:26	←	azeem has quit (Ping timeout: 245 seconds)
2021-09-02 03:00:31	←	max22- has quit (Quit: Leaving)
2021-09-02 03:00:46	←	takuan has quit (Remote host closed the connection)
2021-09-02 03:07:27	←	BestSteve has quit (Quit: WeeChat 3.1)
2021-09-02 03:10:55	tdammers	realistically, the only proper solution is a cabin in Siberia with a flock of goats
2021-09-02 03:12:09	←	__monty__ has quit (Quit: leaving)
2021-09-02 03:13:06	→	hannessteffenhag has joined #haskell
2021-09-02 03:15:56	maerwald	hmm, goat cheese
2021-09-02 03:17:29	←	hannessteffenhag has quit (Ping timeout: 252 seconds)
2021-09-02 03:20:14	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-02 03:20:33	→	MQ-17J has joined #haskell
2021-09-02 03:20:45	hpc	a flock of goats?
2021-09-02 03:25:41	←	Everything has quit (Quit: leaving)
2021-09-02 03:30:41	meejah	_should_ be "annoyance" but that's for ravens
2021-09-02 03:32:41	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-02 03:33:34	←	qwedfg has quit (Quit: ZNC - https://znc.in)
2021-09-02 03:34:26	→	qwedfg has joined #haskell
2021-09-02 03:37:45	→	ec_ has joined #haskell
2021-09-02 03:38:17	←	eggplantade has quit (Remote host closed the connection)
2021-09-02 03:39:10	→	desantra has joined #haskell
2021-09-02 03:39:36	→	BestSteve has joined #haskell
2021-09-02 03:44:32	→	eggplantade has joined #haskell
2021-09-02 03:57:54	→	son0p has joined #haskell
2021-09-02 04:01:15	←	Tuplanolla has quit (Quit: Leaving.)
2021-09-02 04:02:54	→	thyriaen has joined #haskell
2021-09-02 04:03:14	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-02 04:04:54	tdammers	herd?
2021-09-02 04:04:56	tdammers	pack?
2021-09-02 04:05:00	tdammers	school?
2021-09-02 04:05:02	tdammers	idk
2021-09-02 04:06:36	←	dhouthoo has quit (Quit: WeeChat 3.2)
2021-09-02 04:07:53	SrPx	LPT: when implementing a linear λ-calculus, go for name-based substitutions instead of bruijn indices or levels. That's the most efficient solution, because, as long as all variable names are unique, there can't be variable capture, and you avoid having expensive shifting passes.
2021-09-02 04:08:21	hpc	a gaggle of goats
2021-09-02 04:10:28	hpc	SrPx: added bonus, you can use the names from the code itself and it's easier to inspect the output
2021-09-02 04:10:36	←	qwedfg has quit (Read error: Connection reset by peer)
2021-09-02 04:10:48	SrPx	yep
2021-09-02 04:11:33	hpc	iirc there's an esolang that's just lambda calculus with de bruijn indices
2021-09-02 04:11:44	hpc	not even anything special on top of that
2021-09-02 04:12:35	→	qwedfg has joined #haskell
2021-09-02 04:18:15	→	mjs2600 has joined #haskell
2021-09-02 04:20:13	←	MQ-17J has quit (Ping timeout: 244 seconds)
2021-09-02 04:20:29	→	MQ-17J has joined #haskell
2021-09-02 04:25:28	→	bradyt has joined #haskell
2021-09-02 04:25:52	bradyt	can i generate C code from Haskell, to access via another language's FFI?
2021-09-02 04:26:35	bradyt	like this structure? https://github.com/dart-lang/samples/tree/master/ffi/structs/structs_library
2021-09-02 04:27:56	pavonia	C code or object code?
2021-09-02 04:28:10	hpc	i assume the goal is to call dart code from haskell code?
2021-09-02 04:28:15	monochrom	Not sure what that URL is trying to exemplify.
2021-09-02 04:28:32	bradyt	i think eventually the Dart code calls .so or .dylib
2021-09-02 04:28:55	bradyt	the code in ../structs.dart calls the C library files
2021-09-02 04:29:15	Lycurgus	did you see my response in #taskwarrior?
2021-09-02 04:29:34	monochrom	There are programs like hsc2hs and c2hs that help bridge between C structs and Haskell types.
2021-09-02 04:29:53	bradyt	Lycurgus: oh, i wasn't sure if that implies it can /output/ C code
2021-09-02 04:30:05	←	acidjnk_new has quit (Ping timeout: 252 seconds)
2021-09-02 04:30:34	Lycurgus	yeah those (the ones monochrom just mentioned) where the pkgs whose names escaped me when i referred to ffi
2021-09-02 04:30:37	←	Pickchea has quit (Quit: Leaving)
2021-09-02 04:30:38	→	merijn has joined #haskell
2021-09-02 04:30:42	bradyt	like, can i write Haskell libraries, and generate C libraries
2021-09-02 04:30:56	Lycurgus	libs is libs
2021-09-02 04:30:59	←	jpds has quit (Remote host closed the connection)
2021-09-02 04:31:09	Lycurgus	it's all binary when i comes down it
2021-09-02 04:31:35	monochrom	Not sure why you don't accept "asm code *.so files callable from C"
2021-09-02 04:31:38	Lycurgus	the source language becomes irrelevant
2021-09-02 04:31:51	→	Erutuon has joined #haskell
2021-09-02 04:32:02	bradyt	i haven't checked them out, but "c2hs" i was just assuming it was unidirectional
2021-09-02 04:32:30	monochrom	Although, in practice, for now, making a *.so from GHC or cabal-install isn't entirely seamless either.
2021-09-02 04:33:25	Lycurgus	it looks like stack builds a monolithic exe static binding the libs
2021-09-02 04:34:37	monochrom	Oh yeah this is where you learn the lesson that meaningful names are misleading names.
2021-09-02 04:34:44	←	fendor has quit (Read error: Connection reset by peer)
2021-09-02 04:34:55	→	jpds has joined #haskell
2021-09-02 04:39:38	←	Lycurgus has quit (Quit: Exeunt)
2021-09-02 04:41:26	bradyt	okay, i will keep working at some sort of minimal example. someone said chicken scheme could do it, but that hasn't been sufficient motivation yet.
2021-09-02 04:41:38	bradyt	multitasking, in and out, sorry
2021-09-02 04:42:26	←	NinjaTrappeur has quit (Ping timeout: 240 seconds)
2021-09-02 04:43:21	←	deejaytee has quit (Ping timeout: 245 seconds)
2021-09-02 04:46:02	←	wroathe has quit (Ping timeout: 252 seconds)
2021-09-02 04:47:02	sm	messing around with haskell foundation finance reports: https://github.com/simonmichael/haskell-finance
2021-09-02 04:53:26	←	hyiltiz has quit (Ping timeout: 245 seconds)
2021-09-02 04:53:57	→	renzhi has joined #haskell
2021-09-02 04:57:33	→	hyiltiz has joined #haskell
2021-09-02 05:03:02	→	wroathe has joined #haskell
2021-09-02 05:03:03	←	wroathe has quit (Changing host)
2021-09-02 05:03:03	→	wroathe has joined #haskell
2021-09-02 05:04:11	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-02 05:04:26	←	wroathe has quit (Client Quit)
2021-09-02 05:06:18	→	fryguybob has joined #haskell
2021-09-02 05:06:41	→	wroathe has joined #haskell
2021-09-02 05:06:42	←	wroathe has quit (Changing host)
2021-09-02 05:06:42	→	wroathe has joined #haskell
2021-09-02 05:12:24	←	Gurkenglas has quit (Ping timeout: 244 seconds)
2021-09-02 05:15:50	→	hannessteffenhag has joined #haskell
2021-09-02 05:15:54	→	lavaman has joined #haskell
2021-09-02 05:18:38	→	alx741 has joined #haskell
2021-09-02 05:24:57	ℹ	irc: disconnected from server
2021-09-02 05:25:19	→	oxide has joined #haskell
2021-09-02 05:25:19	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-02 05:25:19	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-02 05:25:19	ℹ	Channel #haskell: 717 nicks (1 op, 0 voices, 716 normals)
2021-09-02 05:25:19	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-02 05:25:26	glguy	oh?, what would that look like?
2021-09-02 05:26:22	Hydrazer	does anyone know of a shorter program that doesn't throw any errors https://paste.tomsmeding.com/4eDOmAZQ
2021-09-02 05:26:44	sm	glguy, like this:
2021-09-02 05:26:48	⚡	sm sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/23a867063035b7f7b1eb8bc687eab59f5d04565b
2021-09-02 05:27:12	glguy	Does that make the bottom two postings less "real"?
2021-09-02 05:27:13	sm	("bracketed virtual postings", bit of a gimmick)
2021-09-02 05:27:40	sm	it makes them filterable out by the -R/--real flag yes, otherwise they're just as good as a regular posting
2021-09-02 05:27:55	glguy	Are they checked as balancing because they are [] and not ()?
2021-09-02 05:28:02	sm	exactly
2021-09-02 05:29:10	sm	probably just a separate transaction is better
2021-09-02 05:31:09	←	SystemFFan has quit (Ping timeout: 240 seconds)
2021-09-02 05:31:43	glguy	Aw, shoot. hledger thinks ==* means something else
2021-09-02 05:31:46	glguy	err
2021-09-02 05:31:48	monochrom	Hydrazer: If a main is not required, I would try an empty file.  If a module declaration is not counted toward code size, I would try "module M where".
2021-09-02 05:31:49	glguy	ledger does
2021-09-02 05:32:33	sm	[OT] ledger doesn't parse it, yes. If you need that sticking to = is sometimes best
2021-09-02 05:32:34	glguy	Hydrazer: main=main
2021-09-02 05:33:38	glguy	sm: I want ==* because I want to assert that an event is closed out when I belive that to be the case
2021-09-02 05:33:58	glguy	and I have an account tree: Events:<Event Name>:<Person>
2021-09-02 05:34:16	glguy	so I'm looking at being able to write:   Events:Summer Camp 2021  ==* $0
2021-09-02 05:35:02	glguy	I only really care about ledger compatibility because my spacemaces has ledger-mode
2021-09-02 05:35:15	glguy	I should see about getting hledger in its place
2021-09-02 05:35:22	johnw	noooo.....
2021-09-02 05:35:31	⚡	glguy hides
2021-09-02 05:35:40	sm	doh! act natural!
2021-09-02 05:35:54	glguy	oh, hi johnw; I meant my friend might try to do that thing
2021-09-02 05:36:00	johnw	:(
2021-09-02 05:37:54	sm	howdy john
2021-09-02 05:38:04	←	Hydrazer has quit (Ping timeout: 256 seconds)
2021-09-02 05:45:27	←	pretty_dumm_guy has quit (Ping timeout: 252 seconds)
2021-09-02 05:49:16	←	vysn has quit (Ping timeout: 245 seconds)
2021-09-02 05:49:55	glguy	sm: Have I showed this to you before? https://gist.github.com/glguy/e996b1ea2fef5dd5e8a32f39da8a3f78
2021-09-02 05:51:18	johnw	sm: hi!
2021-09-02 05:53:26	sm	perhaps not glguy, nice!
2021-09-02 05:54:33	→	VoidNoir0 has joined #haskell
2021-09-02 05:54:49	←	VoidNoir0 has quit (Client Quit)
2021-09-02 05:56:25	→	VoidNoir0 has joined #haskell
2021-09-02 05:57:06	←	pbrisbin has quit (Ping timeout: 245 seconds)
2021-09-02 05:57:27	←	VoidNoir0 has quit (Client Quit)
2021-09-02 05:57:42	→	OscarH has joined #haskell
2021-09-02 05:59:04	→	VoidNoir0 has joined #haskell
2021-09-02 05:59:48	glguy	OH, we're not in #plaintextaccounting
2021-09-02 06:00:34	sm	right :) but it's quiet
2021-09-02 06:00:52	glguy	Well, i was going to share *haskell source code* so still on topic: https://gist.github.com/glguy/fe5ea89e8d447874b704326e889d7f4b
2021-09-02 06:01:11	sm	+1
2021-09-02 06:04:27	sm	nice scripts! I'll link em
2021-09-02 06:09:00	←	jakalx has left #haskell (Error from remote client)
2021-09-02 06:10:12	→	jakalx has joined #haskell
2021-09-02 06:13:18	←	lbseale has quit (Read error: Connection reset by peer)
2021-09-02 06:15:50	→	[itchyjunk] has joined #haskell
2021-09-02 06:17:14	ℹ	irc: disconnected from server
2021-09-02 10:05:15	→	oxide has joined #haskell
2021-09-02 10:05:15	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-02 10:05:15	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-02 10:05:15	ℹ	Channel #haskell: 706 nicks (1 op, 0 voices, 705 normals)
2021-09-02 10:05:16	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-02 10:05:18	Axman6	% :t let fmapCompose3 f = getCompose . getCompose . fmap f . Compose . Compose in fmapCompose
2021-09-02 10:05:19	yahb	Axman6: ; <interactive>:1:78: error:; * Variable not in scope: fmapCompose; * Perhaps you meant `fmapCompose3' (line 1)
2021-09-02 10:05:24	Axman6	% :t let fmapCompose3 f = getCompose . getCompose . fmap f . Compose . Compose in fmapCompose3
2021-09-02 10:05:24	→	ubert has joined #haskell
2021-09-02 10:05:24	yahb	Axman6: forall {k1} {k2} {f :: k1 -> *} {g1 :: k2 -> k1} {g2 :: * -> k2} {a1} {a2}. Functor (Compose (Compose f g1) g2) => (a1 -> a2) -> f (g1 (g2 a1)) -> f (g1 (g2 a2))
2021-09-02 10:05:51	←	merijn has quit (Ping timeout: 244 seconds)
2021-09-02 10:07:46	sayola	Axman6: imo its just easy to miss something, considering the dimensions. e.g. am still not sure what the type system can and can not do. not to mention all the extensions that manipulate these options. and then figuring out how to pack the actual code into it.
2021-09-02 10:10:28	→	hannessteffenhag has joined #haskell
2021-09-02 10:10:51	sayola	btw. i just remembered newtype deriving ... probably the solution to the actual problem i have, if i'm not missing something x) 
2021-09-02 10:13:58	jle`	it depends on what you actually want to do i think; if you just want to map over the 'a' in Bar (Baz a), you can do fmap (fmap f)
2021-09-02 10:14:38	←	hannessteffenhag has quit (Ping timeout: 244 seconds)
2021-09-02 10:16:23	sayola	assuming that Bar is also a functor
2021-09-02 10:16:31	jle`	right
2021-09-02 10:17:17	←	wirez has left #haskell (part)
2021-09-02 10:17:41	←	mikoto-chan has quit (Ping timeout: 252 seconds)
2021-09-02 10:20:33	ℹ	irc: disconnected from server
2021-09-05 17:36:24	→	oxide has joined #haskell
2021-09-05 17:36:24	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-05 17:36:24	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-05 17:36:24	ℹ	Channel #haskell: 722 nicks (1 op, 0 voices, 721 normals)
2021-09-05 17:36:25	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-05 17:37:56	←	eggplantade has quit (Ping timeout: 250 seconds)
2021-09-05 17:38:40	←	Vajb has quit (Ping timeout: 240 seconds)
2021-09-05 17:47:03	Gurkenglas	ah stack path said config-location, so i renamed that yaml. it installed another ghc and and then failed to install old-time in the same way
2021-09-05 17:47:24	Gurkenglas	jneira[m], ^^
2021-09-05 17:50:36	←	retroid_ has quit (Ping timeout: 252 seconds)
2021-09-05 17:54:17	→	Vajb has joined #haskell
2021-09-05 17:57:25	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-05 17:58:13	→	Vajb has joined #haskell
2021-09-05 18:00:14	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-05 18:00:43	→	Vajb has joined #haskell
2021-09-05 18:00:51	Gurkenglas	hmm stack install Cabal doesn't put cabal on the path
2021-09-05 18:01:07	←	vysn has quit (Ping timeout: 252 seconds)
2021-09-05 18:01:14	←	pavonia has quit (Quit: Bye!)
2021-09-05 18:01:38	Gurkenglas	oh wait it did, i just thought the stack bin path was different from the choco bin path.
2021-09-05 18:09:11	Gurkenglas	oh wait it is... stack install Cabal doesn't seem to do much of anything when i run it after this first tiem? it finishes in ~1 second and my C:\Users\Gurkenglas\AppData\Roaming\local\bin (stack path --local-bin) does not get a new cabal.exe
2021-09-05 18:09:13	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-05 18:09:40	←	hyiltiz has quit (Ping timeout: 240 seconds)
2021-09-05 18:10:46	→	Vajb has joined #haskell
2021-09-05 18:11:41	ℹ	CoCoHaxPenguin is now known as \[
2021-09-05 18:12:03	←	talismanick has quit (Ping timeout: 256 seconds)
2021-09-05 18:12:06	ℹ	\[ is now known as \}
2021-09-05 18:12:07	tomsmeding	Gurkenglas: Cabal != cabal-install
2021-09-05 18:12:14	tomsmeding	Cabal is the library, cabal-install is the executable
2021-09-05 18:12:25	ℹ	\} is now known as a_
2021-09-05 18:12:28	ℹ	a_ is now known as Andrew
2021-09-05 18:12:33	Gurkenglas	youProbablyWantCapitalCabal lied to me!?
2021-09-05 18:12:46	→	Lord_of_Life has joined #haskell
2021-09-05 18:12:57	tomsmeding	world is a hard place
2021-09-05 18:13:10	←	jespada has quit (Ping timeout: 252 seconds)
2021-09-05 18:16:58	→	jespada has joined #haskell
2021-09-05 18:19:16	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-05 18:19:28	→	Vajb has joined #haskell
2021-09-05 18:19:36	→	hyiltiz has joined #haskell
2021-09-05 18:20:31	→	euandreh has joined #haskell
2021-09-05 18:20:58	jneira[m]	<Gurkenglas> "local-bin-path presumably" <- the path to ghcs and msys is controlled by local-programs-path
2021-09-05 18:21:26	jneira[m]	local-bin-path is where installed binaries go
2021-09-05 18:22:51	jneira[m]	and it is advisable to set the ghc and msys location to a short path as well
2021-09-05 18:23:08	Gurkenglas	why doesn't stack do this automatically
2021-09-05 18:23:10	jneira[m]	I would try again after change it
2021-09-05 18:23:50	jneira[m]	to get a fresh global cache delete C:\sr entirely
2021-09-05 18:24:42	jneira[m]	spaces and non ASCII chars in the user name usually gives problems too (not your case though)
2021-09-05 18:25:36	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-05 18:26:26	jneira[m]	Gurkenglas: maybe cause it can choose a location which is known to be writable by the user for sure
2021-09-05 18:26:33	→	Vajb has joined #haskell
2021-09-05 18:26:43	jneira[m]	it cant
2021-09-05 18:28:18	←	hendursa1 has quit (Quit: hendursa1)
2021-09-05 18:28:46	→	hendursaga has joined #haskell
2021-09-05 18:29:24	Gurkenglas	eh, i read out of head swapspace. ill try installing idris on wsl, then.
2021-09-05 18:29:30	Gurkenglas	*ran out
2021-09-05 18:32:27	→	waleee has joined #haskell
2021-09-05 18:34:25	→	DNH has joined #haskell
2021-09-05 18:43:42	phaazon	do you people remember where cabal writes compilation outputs like binaries, libs, etc.?
2021-09-05 18:43:53	phaazon	I would swear I remember using a command like cabal path --binary
2021-09-05 18:43:57	phaazon	but I don’t recall exactly
2021-09-05 18:44:11	phaazon	I basically want to grab the built binary and sent it to a server node
2021-09-05 18:44:21	→	raehik has joined #haskell
2021-09-05 18:47:03	phaazon	found it by manually going in the directory but I was sure there was a way to grab that
2021-09-05 18:47:08	phaazon	or was it with stack, hm
2021-09-05 18:49:32	←	cods has quit (Ping timeout: 250 seconds)
2021-09-05 18:49:33	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-05 18:53:21	→	kuribas has joined #haskell
2021-09-05 18:55:03	DigitalKiwi	cabal list-bin
2021-09-05 18:55:47	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-09-05 18:55:56	phaazon	oh yeah, thanks!
2021-09-05 18:56:09	←	barrucadu has quit (Quit: leaving)
2021-09-05 18:56:52	DigitalKiwi	yw
2021-09-05 18:59:02	→	max22- has joined #haskell
2021-09-05 18:59:24	→	son0p has joined #haskell
2021-09-05 19:00:03	→	yourname_ has joined #haskell
2021-09-05 19:02:04	→	favonia has joined #haskell
2021-09-05 19:04:48	→	machinedgod has joined #haskell
2021-09-05 19:06:49	←	img has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-09-05 19:16:24	→	cods has joined #haskell
2021-09-05 19:21:04	←	cods has quit (Ping timeout: 250 seconds)
2021-09-05 19:21:28	→	img has joined #haskell
2021-09-05 19:24:13	wz1000	kuribas: https://gitlab.haskell.org/ghc/ghc/-/issues/17768#note_374060
2021-09-05 19:25:20	→	burnsidesLlama has joined #haskell
2021-09-05 19:25:26	←	thyriaen has quit (Remote host closed the connection)
2021-09-05 19:26:24	→	cods has joined #haskell
2021-09-05 19:27:16	→	thyriaen has joined #haskell
2021-09-05 19:29:52	→	Vajb has joined #haskell
2021-09-05 19:32:35	Gurkenglas	...does idris just not build on a modern resolve with allow-newer?
2021-09-05 19:34:29	Gurkenglas	janus, what do you use for idris? stack install idris? something something idris2?
2021-09-05 19:39:31	kuribas	wz1000: are you sure it's applicative do?
2021-09-05 19:39:39	wz1000	yes, remove it and it will work
2021-09-05 19:39:51	kuribas	wz1000: I did, and I got the same error?
2021-09-05 19:40:22	kuribas	wz1000: nice reduction!
2021-09-05 19:41:04	kuribas	wz1000: in any case, that should be sort enough for them to find the problem?
2021-09-05 19:41:18	kuribas	wz1000: or are you a ghc hacker as well?
2021-09-05 19:42:07	wz1000	yes
2021-09-05 19:42:44	→	amahl has joined #haskell
2021-09-05 19:50:25	ℹ	irc: disconnected from server
2021-09-05 19:50:44	→	oxide has joined #haskell
2021-09-05 19:50:44	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-05 19:50:44	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-05 19:50:44	ℹ	Channel #haskell: 726 nicks (1 op, 0 voices, 725 normals)
2021-09-05 19:50:45	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-05 19:50:45	kuribas	Still it's very handy together with records.
2021-09-05 19:50:45	wz1000	there is -optimal-applicative-do or something if you want
2021-09-05 19:51:18	wz1000	https://downloads.haskell.org/ghc/latest/docs/html/users_guide/exts/applicative_do.html#ghc-flag--foptimal-applicative-do
2021-09-05 19:51:18	kuribas	Otherwise you need to do "MyRecord <$> field1 <*> field2 <*> field3", and so easy to mix them up.
2021-09-05 19:52:13	kuribas	I just bypass the problem by doing  do field1 <- field1A; field2 <- field2A; pure $ MyRecord {field1, field2, field3 = pureComputation}
2021-09-05 19:52:22	←	thyriaen has quit (Remote host closed the connection)
2021-09-05 19:52:30	→	MQ-17J has joined #haskell
2021-09-05 19:58:25	kuribas	wz1000: that's a silly flag
2021-09-05 19:58:41	kuribas	why would I want "suboptimal-applicative-do"?
2021-09-05 19:59:27	wz1000	kuribas: because it is faster
2021-09-05 20:01:42	⚡	tomsmeding . o O ( O(n^3), that's some heavy complexity for a compiler )
2021-09-05 20:03:21	kuribas	why would that need to be so slow?  Isn't it just creating a graph?
2021-09-05 20:03:25	→	vysn has joined #haskell
2021-09-05 20:11:15	→	turlando has joined #haskell
2021-09-05 20:11:16	←	turlando has quit (Changing host)
2021-09-05 20:11:16	→	turlando has joined #haskell
2021-09-05 20:20:07	←	MQ-17J has quit (Ping timeout: 256 seconds)
2021-09-05 20:20:25	→	MQ-17J has joined #haskell
2021-09-05 20:21:24	→	Erutuon has joined #haskell
2021-09-05 20:26:47	←	MQ-17J has quit (Ping timeout: 245 seconds)
2021-09-05 20:27:04	→	MQ-17J has joined #haskell
2021-09-05 20:28:22	→	DNH has joined #haskell
2021-09-05 20:30:04	←	APic has quit (Read error: Connection reset by peer)
2021-09-05 20:30:24	→	APic has joined #haskell
2021-09-05 20:31:45	←	hgolden has quit (Ping timeout: 252 seconds)
2021-09-05 20:32:51	←	DNH has quit (Ping timeout: 252 seconds)
2021-09-05 20:33:40	→	ryantrinkle has joined #haskell
2021-09-05 20:33:48	ryantrinkle	is there a good tool for removing unused imports these days?
2021-09-05 20:34:26	ryantrinkle	i tried fix-imports, but it only removed Data.ByteString.Lazy (even though lots of other imports are unused since I just cleared a ton of stuff out of the file)
2021-09-05 20:35:03	ryantrinkle	i'm trying to try importify, but the version in nixpkgs doesn't build
2021-09-05 20:35:15	wz1000	ryantrinkle: HLS can do it
2021-09-05 20:35:50	←	mikoto-chan has quit (Quit: mikoto-chan)
2021-09-05 20:36:43	ryantrinkle	wz1000: ah ok, in-editor i guess?
2021-09-05 20:36:58	wz1000	yes
2021-09-05 20:37:34	→	wroathe has joined #haskell
2021-09-05 20:37:34	←	wroathe has quit (Changing host)
2021-09-05 20:37:34	→	wroathe has joined #haskell
2021-09-05 20:44:13	←	burnsidesLlama has quit (Remote host closed the connection)
2021-09-05 20:50:13	→	tzh has joined #haskell
2021-09-05 20:55:00	←	APic has quit (Read error: Connection reset by peer)
2021-09-05 20:55:35	→	APic has joined #haskell
2021-09-05 20:57:03	←	pgib has quit (Ping timeout: 252 seconds)
2021-09-05 20:58:46	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-05 20:59:03	→	MQ-17J has joined #haskell
2021-09-05 21:04:48	→	mrus has joined #haskell
2021-09-05 21:06:25	←	jess has quit
2021-09-05 21:10:00	←	APic has quit (Read error: Connection reset by peer)
2021-09-05 21:12:30	→	kenran has joined #haskell
2021-09-05 21:15:11	→	APic has joined #haskell
2021-09-05 21:18:13	→	madjestic has joined #haskell
2021-09-05 21:19:16	→	burnsidesLlama has joined #haskell
2021-09-05 21:20:09	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-05 21:20:22	→	MQ-17J has joined #haskell
2021-09-05 21:21:48	←	sleblanc has quit (Ping timeout: 252 seconds)
2021-09-05 21:22:03	→	mikoto-chan has joined #haskell
2021-09-05 21:22:58	ryantrinkle	wz1000:  any idea how to actually make emacs do it?
2021-09-05 21:23:02	ryantrinkle	i think i've got lsp working
2021-09-05 21:23:20	wz1000	look for "code actions" in your lsp client
2021-09-05 21:23:34	wz1000	you need to trigger it over a redundant import I think
2021-09-05 21:23:41	→	lavaman has joined #haskell
2021-09-05 21:23:42	wz1000	(which should be highlighted)
2021-09-05 21:24:06	wz1000	then you will get an option ("code action") to remove all redundant imports
2021-09-05 21:24:33	←	burnsidesLlama has quit (Ping timeout: 252 seconds)
2021-09-05 21:25:44	→	fernand has joined #haskell
2021-09-05 21:25:59	monochrom	I use ghc's -ddump-minimal-imports
2021-09-05 21:27:55	←	lavaman has quit (Ping timeout: 252 seconds)
2021-09-05 21:34:20	←	vysn has quit (Quit: WeeChat 3.2)
2021-09-05 21:35:00	←	machinedgod has quit (Ping timeout: 252 seconds)
2021-09-05 21:35:45	→	x_kuru has joined #haskell
2021-09-05 21:36:47	←	fernand has quit (Ping timeout: 245 seconds)
2021-09-05 21:37:32	→	TranquilEcho has joined #haskell
2021-09-05 21:38:51	←	xkuru has quit (Ping timeout: 252 seconds)
2021-09-05 21:43:19	←	wroathe has quit (Ping timeout: 252 seconds)
2021-09-05 21:50:40	←	thelounge9230681 has quit (Ping timeout: 240 seconds)
2021-09-05 21:51:23	kaol	Really weird. I have two IntMaps that have equal keys. intersectionWith (,) yields an empty list. But doing IntMap.fromList . IntMap.toList on one of them makes it work. And using (==) on that variable and the one piped through that yields False. How can IntMap.fromList . IntMap.toList not be identity?
2021-09-05 21:52:22	geekosaur	Doubles?
2021-09-05 21:53:09	geekosaur	(in particular any NaNs will break the IntMap)
2021-09-05 21:53:11	kaol	No, I don't have any Doubles in my data.
2021-09-05 21:53:14	c_wraith	eh, that shouldn't matter in the values, and the keys of an IntMap are always Int
2021-09-05 21:53:24	→	orcalikastecona has joined #haskell
2021-09-05 21:53:25	geekosaur	mm, right. sorry
2021-09-05 21:53:37	hpc	@where paste
2021-09-05 21:53:37	lambdabot	Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
2021-09-05 21:53:49	hpc	can you make a minimal reproduction?
2021-09-05 21:54:35	kaol	I'll try.
2021-09-05 21:55:00	←	APic has quit (Read error: Connection reset by peer)
2021-09-05 21:55:01	kaol	Or at least one that doesn't require my DB for running it.
2021-09-05 21:55:16	→	APic has joined #haskell
2021-09-05 21:56:51	hpc	it'll be interesting to see what the root cause is
2021-09-05 21:58:15	→	retroid_ has joined #haskell
2021-09-05 21:59:26	→	wroathe has joined #haskell
2021-09-05 21:59:26	←	wroathe has quit (Changing host)
2021-09-05 21:59:26	→	wroathe has joined #haskell
2021-09-05 22:03:36	←	madjestic has quit (Ping timeout: 252 seconds)
2021-09-05 22:04:05	→	pbrisbin has joined #haskell
2021-09-05 22:04:17	←	wroathe has quit (Ping timeout: 245 seconds)
2021-09-05 22:04:30	ℹ	irc: disconnected from server
2021-09-06 08:38:48	→	oxide has joined #haskell
2021-09-06 08:38:48	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-06 08:38:48	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-06 08:38:48	ℹ	Channel #haskell: 727 nicks (1 op, 0 voices, 726 normals)
2021-09-06 08:38:48	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-06 08:51:39	→	lavaman has joined #haskell
2021-09-06 08:51:59	→	aarvar has joined #haskell
2021-09-06 08:56:09	←	lavaman has quit (Ping timeout: 250 seconds)
2021-09-06 08:59:09	←	MQ-17J has quit (Ping timeout: 240 seconds)
2021-09-06 08:59:17	←	favonia has quit (Quit: Leaving)
2021-09-06 08:59:26	→	MQ-17J has joined #haskell
2021-09-06 09:03:36	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-06 09:03:53	→	MQ-17J has joined #haskell
2021-09-06 09:18:38	→	otto_s has joined #haskell
2021-09-06 09:20:14	→	benin0369323 has joined #haskell
2021-09-06 09:21:39	←	otto_s_ has quit (Ping timeout: 240 seconds)
2021-09-06 09:22:19	←	amitnjha has quit (Quit: amitnjha)
2021-09-06 09:22:37	→	amitnjha has joined #haskell
2021-09-06 09:26:24	lechner	Hi, what do people dislike about Template Haskell when they talk poorly about it, please?
2021-09-06 09:27:43	janus	lechner: https://stackoverflow.com/a/10857227/309483
2021-09-06 09:29:04	c_wraith	that's pretty old
2021-09-06 09:29:11	c_wraith	There is type-safe TH now
2021-09-06 09:29:27	c_wraith	and visibility of module-private stuff has been restricted better
2021-09-06 09:29:44	c_wraith	But arbitrary IO is still an issue
2021-09-06 09:30:14	c_wraith	But my real problem with TH isn't even mentioned there.  It makes compiling *slooooow*
2021-09-06 09:31:01	lechner	Thanks!
2021-09-06 09:32:43	lechner	I love FP, and would like to move a Node-based web site toward Haskell. Should I look at Yesod, which uses TH extensively?
2021-09-06 09:32:46	←	xlei has quit (Ping timeout: 240 seconds)
2021-09-06 09:33:26	←	wroathe has quit (Ping timeout: 245 seconds)
2021-09-06 09:33:55	→	Skyfire has joined #haskell
2021-09-06 09:33:58	c_wraith	I wouldn't worry about that, in particular, for making that decision.  I'd worry more about how much you like using it.  It's very opinionated.  It may be just what you want, it may not.  That's up to you.
2021-09-06 09:35:02	lechner	What's at the other end of the spectrum?
2021-09-06 09:35:53	c_wraith	Things like spock/scotty (they're variants of the same idea).  They do about as little as possible.
2021-09-06 09:41:54	hololeap	is this still the only way to avoid the boilerplate of writing a Show1 instance? https://hackage.haskell.org/package/deriving-compat-0.6/docs/Text-Show-Deriving.html#v:deriveShow1
2021-09-06 09:42:37	→	xlei has joined #haskell
2021-09-06 09:42:39	←	amitnjha has quit (Quit: amitnjha)
2021-09-06 09:42:54	→	amitnjha has joined #haskell
2021-09-06 09:44:09	→	retroid_ has joined #haskell
2021-09-06 09:44:57	←	APic has quit (Read error: Connection reset by peer)
2021-09-06 09:45:15	→	APic has joined #haskell
2021-09-06 09:48:36	←	slowButPresent has quit (Quit: leaving)
2021-09-06 09:49:46	→	wroathe has joined #haskell
2021-09-06 09:49:46	←	wroathe has quit (Changing host)
2021-09-06 09:49:46	→	wroathe has joined #haskell
2021-09-06 09:52:22	←	[itchyjunk] has quit (Quit: Leaving)
2021-09-06 09:54:45	←	wroathe has quit (Ping timeout: 252 seconds)
2021-09-06 09:57:56	→	Gurkenglas has joined #haskell
2021-09-06 10:00:09	←	hyiltiz has quit (Ping timeout: 240 seconds)
2021-09-06 10:03:04	←	nehsou^ has quit (Ping timeout: 252 seconds)
2021-09-06 10:05:31	→	nehsou^ has joined #haskell
2021-09-06 10:06:20	dhruvasagar	AaAaAaAa
2021-09-06 10:07:20	→	mikoto-chan has joined #haskell
2021-09-06 10:08:26	→	Zianic has joined #haskell
2021-09-06 10:13:55	→	hyiltiz has joined #haskell
2021-09-06 10:17:58	→	pi1 has joined #haskell
2021-09-06 10:20:03	→	wroathe has joined #haskell
2021-09-06 10:20:03	←	wroathe has quit (Changing host)
2021-09-06 10:20:03	→	wroathe has joined #haskell
2021-09-06 10:20:05	←	mikoto-chan has quit (Quit: mikoto-chan)
2021-09-06 10:24:57	←	APic has quit (Read error: Connection reset by peer)
2021-09-06 10:26:53	←	slack1256 has quit (Remote host closed the connection)
2021-09-06 10:27:22	lechner	Hi, i think like scotty. Is lucid a good way to generate Html?
2021-09-06 10:30:09	→	APic has joined #haskell
2021-09-06 10:30:27	←	nicbk has quit (Quit: nicbk)
2021-09-06 10:30:39	←	orcalikastecona has quit (Ping timeout: 240 seconds)
2021-09-06 10:35:17	→	fef has joined #haskell
2021-09-06 10:35:48	arahael	Out of curiosity, what's most similar to Rx but in Haskell? (I'm talking ReactiveExtensions).  Would that be Conduit?
2021-09-06 10:36:52	←	cjb has quit (Quit: rcirc on GNU Emacs 28.0.50)
2021-09-06 10:37:46	Cale	arahael: I'd use reflex
2021-09-06 10:38:40	arahael	Cale: I still seriously have to get familiar with that. :(
2021-09-06 10:38:44	←	Skyfire has quit (Quit: brb)
2021-09-06 10:40:32	Cale	What kind of application are you thinking of?
2021-09-06 10:41:16	arahael	Oh, I'm just academically wondering, but one significant point here is that I was looking at "Just a library", whereas reflex always seems to provide the whole framework, toolchain, and build system.
2021-09-06 10:41:47	arahael	Howeer, reflex does seem pretty good from waht I've seen, just haven't yet spent the time to look at it. I really should.
2021-09-06 10:42:36	Cale	Well, reflex itself is just a library
2021-09-06 10:43:37	Cale	But if you want to use reflex-dom, you're probably building a web application frontend, in which case, you'll need ghcjs, and that's kind of annoying to set up, or else perhaps you're building a mobile application, and the toolchains for those are even more annoying.
2021-09-06 10:44:37	Cale	So we have a bunch of nix handy in the form of reflex-platform to help solve those toolchain issues, and a framework called Obelisk which lets you set up projects with a frontend and backend and shared code and stuff.
2021-09-06 10:45:24	arahael	Well, I'm strictly wondering academically, because what I'm actually working on is an iOS app that uses Swift.  Integrating haskell, even ghcjs, is out of the question. :(
2021-09-06 10:45:27	→	nicbk has joined #haskell
2021-09-06 10:46:01	arahael	But I'm looking at maybe utilising kotlin-native, which other peole in the team like, and I'm just wondering: "What would this be like in haskell". :)
2021-09-06 10:46:09	arahael	brb - later...
2021-09-06 10:46:21	Cale	At some point we might build reflex-y Haskell bindings to native mobile GUI libraries
2021-09-06 10:46:45	Cale	We haven't yet had a customer that cared enough to pay us the extra to do that.
2021-09-06 10:47:27	Cale	But it'd be doable even in a fairly piecemeal way
2021-09-06 10:53:00	←	amitnjha has quit (Quit: amitnjha)
2021-09-06 10:53:19	→	amitnjha has joined #haskell
2021-09-06 10:53:25	→	takuan has joined #haskell
2021-09-06 10:59:35	←	xff0x has quit (Ping timeout: 256 seconds)
2021-09-06 11:00:28	→	xff0x has joined #haskell
2021-09-06 11:07:04	arahael	That would be very very cool. Do you have reflex-y haskell bindings for desktop or androi GUI libraries, though? Even avoiding using a browser web control to host it would be an improvement - even if it's juts politics.
2021-09-06 11:09:12	iqubic	Where in the MTL library is the definition of MonadPlus for the WriterMonad? It should be something of the form "(Monoid w, MonadPlus m) => MonadPlus (WriterT w m) where..." but I can't seem to find the source code for that.
2021-09-06 11:12:09	lechner	https://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-Writer-Lazy.html
2021-09-06 11:12:39	lechner	or ::Strict
2021-09-06 11:15:10	iqubic	Yeah, but that's not in the source code.
2021-09-06 11:15:45	iqubic	I can't find the source code that tells me what mzero and mplus do for Writer.
2021-09-06 11:18:05	iqubic	Actually, really, what I want to know is what the Alternative functions of "empty" and "<|>" do for a Writer.
2021-09-06 11:18:33	←	sleblanc has quit (Ping timeout: 240 seconds)
2021-09-06 11:19:34	lechner	this one?   https://hackage.haskell.org/package/base-4.15.0.0/docs/Control-Applicative.html#v:empty
2021-09-06 11:20:17	iqubic	Yes. I want to know what that does for the Writer monad.
2021-09-06 11:20:36	iqubic	Or rather, what that does for a WriterT.
2021-09-06 11:22:51	janus	iqubic: this one? https://hackage.haskell.org/package/transformers-0.6.0.2/docs/src/Control.Monad.Trans.Writer.Lazy.html#local-6989586621679078134
2021-09-06 11:23:35	iqubic	Yes, actually. That's what I was looking for. Thanks so much.
2021-09-06 11:25:43	janus	yes, it is tricky to find because the docs pages you will find are for mtl, but the implementation is actually in transformers. so what i do is just look at the source for the mtl page, look where it imports from, and adjust the package name in the url to say 'transformers'. you can delete the version number and it will redirect to the latest version
2021-09-06 11:26:36	←	myShoggoth has quit (Ping timeout: 252 seconds)
2021-09-06 11:28:17	iqubic	Yeah. That makes little sense, but I can work with that.
2021-09-06 11:29:56	←	APic has quit (Read error: Connection reset by peer)
2021-09-06 11:30:06	→	APic has joined #haskell
2021-09-06 11:34:55	←	xlei has quit (Ping timeout: 252 seconds)
2021-09-06 11:34:56	→	hgolden has joined #haskell
2021-09-06 11:36:04	→	michalz has joined #haskell
2021-09-06 11:39:10	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-06 11:39:28	→	Vajb has joined #haskell
2021-09-06 11:39:49	iqubic	Does anyone know what the Accum monad is, and how it differs from the Writer monad?
2021-09-06 11:39:56	←	APic has quit (Read error: Connection reset by peer)
2021-09-06 11:40:07	→	APic has joined #haskell
2021-09-06 11:44:55	←	wroathe has quit (Ping timeout: 256 seconds)
2021-09-06 11:46:52	→	max22- has joined #haskell
2021-09-06 11:47:56	←	jakalx has left #haskell
2021-09-06 11:51:32	←	nicbk has quit (Ping timeout: 276 seconds)
2021-09-06 11:53:15	←	MidAutumnMoon has quit (Quit: Ping timeout (120 seconds))
2021-09-06 11:53:29	→	MidAutumnMoon has joined #haskell
2021-09-06 11:53:39	←	son0p has quit (Ping timeout: 240 seconds)
2021-09-06 11:57:45	→	Akronymus has joined #haskell
2021-09-06 11:59:41	←	xff0x has quit (Ping timeout: 245 seconds)
2021-09-06 12:00:41	→	xff0x has joined #haskell
2021-09-06 12:00:47	dibblego	with the extra ability to read all previous output
2021-09-06 12:01:04	iqubic	Huh? How so?
2021-09-06 12:01:29	iqubic	Oh. I see.
2021-09-06 12:01:44	iqubic	So, how does Accum differ from State?
2021-09-06 12:01:54	dibblego	a restricted append-only version of a state monad transformer
2021-09-06 12:02:10	iqubic	Yeah, but how do Accum and State differ?
2021-09-06 12:02:17	→	wroathe has joined #haskell
2021-09-06 12:02:17	←	wroathe has quit (Changing host)
2021-09-06 12:02:17	→	wroathe has joined #haskell
2021-09-06 12:02:51	dibblego	a restricted append-only version of a
2021-09-06 12:03:30	iqubic	I'm not sure I understand.
2021-09-06 12:04:00	←	stiell has quit (Remote host closed the connection)
2021-09-06 12:04:26	→	stiell has joined #haskell
2021-09-06 12:06:50	←	wroathe has quit (Ping timeout: 250 seconds)
2021-09-06 12:08:16	→	xsperry has joined #haskell
2021-09-06 12:12:03	→	kenran has joined #haskell
2021-09-06 12:12:31	→	wroathe has joined #haskell
2021-09-06 12:12:31	←	wroathe has quit (Changing host)
2021-09-06 12:12:31	→	wroathe has joined #haskell
2021-09-06 12:13:17	Cale	iqubic: You can't set the state to any value you want, only add to it, apparently
2021-09-06 12:13:24	→	jakalx has joined #haskell
2021-09-06 12:17:47	←	wroathe has quit (Ping timeout: 256 seconds)
2021-09-06 12:18:23	←	amitnjha has quit (Quit: amitnjha)
2021-09-06 12:18:36	→	amitnjha has joined #haskell
2021-09-06 12:20:11	→	hannessteffenhag has joined #haskell
2021-09-06 12:22:55	→	meinside has joined #haskell
2021-09-06 12:23:23	→	Skyfire has joined #haskell
2021-09-06 12:25:32	→	gehmehgeh has joined #haskell
2021-09-06 12:27:50	janus	the recording of spj's 'the state of ghc' is out: https://www.youtube.com/watch?v=OZgoid0pex8&list=PLyrlk8Xaylp6_QTmXGuRe3lShaRGaMtgc&index=9&t=80s
2021-09-06 12:29:43	tomsmeding	iqubic: where did you find that Accum?
2021-09-06 12:30:22	tomsmeding	usually, I believe, accumulation-only data structures are useful if you want to parallelise something, if you can take advantage of the combine operation being commutative
2021-09-06 12:32:59	→	lortabac has joined #haskell
2021-09-06 12:33:43	←	amitnjha has quit (Quit: amitnjha)
2021-09-06 12:33:59	→	amitnjha has joined #haskell
2021-09-06 12:34:40	→	cfricke has joined #haskell
2021-09-06 12:35:57	←	fef has quit (Quit: Leaving)
2021-09-06 12:37:37	←	cods has quit (Ping timeout: 256 seconds)
2021-09-06 12:39:03	→	slavaqq has joined #haskell
2021-09-06 12:48:13	→	cods has joined #haskell
2021-09-06 12:49:11	Hecate	thanks janus 
2021-09-06 12:49:56	→	jtomas has joined #haskell
2021-09-06 12:53:33	→	lavaman has joined #haskell
2021-09-06 12:54:04	←	amitnjha has quit (Quit: amitnjha)
2021-09-06 12:54:18	→	amitnjha has joined #haskell
2021-09-06 12:57:36	←	cods has quit (Ping timeout: 245 seconds)
2021-09-06 12:57:45	←	lavaman has quit (Ping timeout: 240 seconds)
2021-09-06 13:08:15	→	LeyLa21F has joined #haskell
2021-09-06 13:10:12	←	c_wraith has quit (Quit: Bye)
2021-09-06 13:11:06	→	c_wraith has joined #haskell
2021-09-06 13:11:10	→	pretty_dumm_guy has joined #haskell
2021-09-06 13:12:03	→	cherryblossom has joined #haskell
2021-09-06 13:14:38	←	cherryblossom has quit (Changing host)
2021-09-06 13:14:38	→	cherryblossom has joined #haskell
2021-09-06 13:15:09	←	cherryblossom has left #haskell
2021-09-06 13:16:16	→	acidjnk_new has joined #haskell
2021-09-06 13:18:00	←	shriekingnoise has quit (Quit: Quit)
2021-09-06 13:18:09	←	hyiltiz has quit (Ping timeout: 240 seconds)
2021-09-06 13:18:21	→	kuribas has joined #haskell
2021-09-06 13:18:33	→	hyiltiz has joined #haskell
2021-09-06 13:22:48	←	LeyLa21F has quit
2021-09-06 13:27:11	←	xsarnik has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-06 13:29:00	→	xsarnik has joined #haskell
2021-09-06 13:29:24	←	amitnjha has quit (Quit: amitnjha)
2021-09-06 13:29:37	→	amitnjha has joined #haskell
2021-09-06 13:35:51	←	Erutuon has quit (Ping timeout: 252 seconds)
2021-09-06 13:36:36	→	hendursa1 has joined #haskell
2021-09-06 13:38:14	→	pmk has joined #haskell
2021-09-06 13:38:45	→	cods has joined #haskell
2021-09-06 13:38:57	→	__monty__ has joined #haskell
2021-09-06 13:39:26	←	hendursaga has quit (Ping timeout: 276 seconds)
2021-09-06 13:46:45	→	burnsidesLlama has joined #haskell
2021-09-06 13:47:28	←	geekosaur has quit (Remote host closed the connection)
2021-09-06 13:47:53	→	geekosaur has joined #haskell
2021-09-06 13:50:26	→	dhouthoo has joined #haskell
2021-09-06 13:52:04	←	burnsidesLlama has quit (Remote host closed the connection)
2021-09-06 13:52:41	→	burnsidesLlama has joined #haskell
2021-09-06 13:52:53	→	mc47 has joined #haskell
2021-09-06 13:56:49	←	burnsidesLlama has quit (Ping timeout: 252 seconds)
2021-09-06 13:58:10	→	raehik has joined #haskell
2021-09-06 13:59:44	←	amitnjha has quit (Quit: amitnjha)
2021-09-06 13:59:50	→	merijn has joined #haskell
2021-09-06 14:00:00	→	amitnjha has joined #haskell
2021-09-06 14:01:29	→	acidjnk_new3 has joined #haskell
2021-09-06 14:04:33	←	acidjnk_new has quit (Ping timeout: 240 seconds)
2021-09-06 14:05:07	←	amitnjha has quit (Quit: amitnjha)
2021-09-06 14:05:21	→	amitnjha has joined #haskell
2021-09-06 14:09:12	←	Sgeo has quit (Read error: Connection reset by peer)
2021-09-06 14:09:41	←	nehsou^ has quit (Remote host closed the connection)
2021-09-06 14:13:46	→	zer0bitz_ has joined #haskell
2021-09-06 14:14:39	←	sim590 has quit (Ping timeout: 240 seconds)
2021-09-06 14:15:36	←	econo has quit (Quit: Connection closed for inactivity)
2021-09-06 14:16:32	→	amahl has joined #haskell
2021-09-06 14:16:50	←	zer0bitz has quit (Ping timeout: 250 seconds)
2021-09-06 14:17:12	←	tzh has quit (Quit: zzz)
2021-09-06 14:28:06	→	sim590 has joined #haskell
2021-09-06 15:05:54	→	oxide has joined #haskell
2021-09-06 15:05:54	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-06 15:05:54	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-06 15:05:54	ℹ	Channel #haskell: 742 nicks (1 op, 0 voices, 741 normals)
2021-09-06 15:05:54	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-06 15:08:55	←	MQ-17J has quit (Ping timeout: 256 seconds)
2021-09-06 15:09:12	→	MQ-17J has joined #haskell
2021-09-06 15:11:47	←	jtomas has quit (Remote host closed the connection)
2021-09-06 15:15:20	→	acidjnk_new has joined #haskell
2021-09-06 15:16:08	←	talismanick has quit (Remote host closed the connection)
2021-09-06 15:18:21	←	acidjnk_new3 has quit (Ping timeout: 250 seconds)
2021-09-06 15:18:38	←	hnOsmium0001 has quit (Quit: Connection closed for inactivity)
2021-09-06 15:19:36	←	ArctVaulMarsHMPJ has quit (Read error: Connection reset by peer)
2021-09-06 15:19:39	←	merijn has quit (Ping timeout: 250 seconds)
2021-09-06 15:19:54	→	merijn has joined #haskell
2021-09-06 15:23:21	←	hyiltiz has quit (Ping timeout: 240 seconds)
2021-09-06 15:24:04	←	eggplantade has quit (Remote host closed the connection)
2021-09-06 15:25:17	←	merijn has quit (Ping timeout: 250 seconds)
2021-09-06 15:25:49	→	merijn has joined #haskell
2021-09-06 15:29:16	→	hyiltiz has joined #haskell
2021-09-06 15:30:55	←	merijn has quit (Ping timeout: 250 seconds)
2021-09-06 15:31:37	→	merijn has joined #haskell
2021-09-06 15:36:51	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-06 15:37:10	→	merijn has joined #haskell
2021-09-06 15:37:28	ℹ	irc: disconnected from server
2021-09-06 17:23:59	→	oxide has joined #haskell
2021-09-06 17:23:59	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-06 17:23:59	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-06 17:23:59	ℹ	Channel #haskell: 740 nicks (1 op, 0 voices, 739 normals)
2021-09-06 17:24:00	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-06 17:26:47	tomsmeding	good luck writing a typechecker for that :p
2021-09-06 17:31:40	hpc	you may want to check out dependent types
2021-09-06 17:32:08	hpc	you don't get to express things in quite the way you describe, but they're pretty neat anyway
2021-09-06 17:33:00	←	alx741 has quit (Quit: alx741)
2021-09-06 17:36:44	→	[itchyjunk] has joined #haskell
2021-09-06 17:40:20	→	kenran has joined #haskell
2021-09-06 17:41:09	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-06 17:42:01	→	MQ-17J has joined #haskell
2021-09-06 17:44:36	→	hannessteffenhag has joined #haskell
2021-09-06 17:44:45	←	xsperry has quit (Ping timeout: 256 seconds)
2021-09-06 17:46:21	→	flukiluke_ has joined #haskell
2021-09-06 17:46:24	→	Guest53 has joined #haskell
2021-09-06 17:48:39	←	hannessteffenhag has quit (Ping timeout: 240 seconds)
2021-09-06 17:54:11	←	Guest53 has quit (Quit: Client closed)
2021-09-06 17:54:44	ℹ	lep- is now known as lep
2021-09-06 17:57:55	→	jippiedoe has joined #haskell
2021-09-06 18:05:51	←	shailangsa has quit (Ping timeout: 252 seconds)
2021-09-06 18:11:07	←	amitnjha has quit (Quit: amitnjha)
2021-09-06 18:11:26	→	amitnjha has joined #haskell
2021-09-06 18:12:34	←	dyeplexer has quit (Ping timeout: 252 seconds)
2021-09-06 18:14:56	→	dyeplexer has joined #haskell
2021-09-06 18:16:30	←	amitnjha has quit (Quit: amitnjha)
2021-09-06 18:16:46	→	amitnjha has joined #haskell
2021-09-06 18:16:48	→	hannessteffenhag has joined #haskell
2021-09-06 18:17:27	←	benin0369323 has quit (Ping timeout: 252 seconds)
2021-09-06 18:17:44	→	benin0369323 has joined #haskell
2021-09-06 18:20:01	→	yiyuan has joined #haskell
2021-09-06 18:20:13	←	yiyuan has quit (Remote host closed the connection)
2021-09-06 18:20:30	→	yiyuan has joined #haskell
2021-09-06 18:20:32	yiyuan	hey
2021-09-06 18:20:42	kuribas	Gurkenglas: perhaps you can express that in liquid haskell
2021-09-06 18:20:53	←	yiyuan has quit (Remote host closed the connection)
2021-09-06 18:20:57	←	hannessteffenhag has quit (Ping timeout: 240 seconds)
2021-09-06 18:21:11	→	yiyuan has joined #haskell
2021-09-06 18:21:12	←	yiyuan has left #haskell
2021-09-06 18:21:59	→	Guest69 has joined #haskell
2021-09-06 18:22:40	←	Guest69 has quit (Client Quit)
2021-09-06 18:23:07	→	aman has joined #haskell
2021-09-06 18:25:09	←	shapr has quit (Ping timeout: 252 seconds)
2021-09-06 18:26:03	→	machinedgod has joined #haskell
2021-09-06 18:26:25	→	eggplantade has joined #haskell
2021-09-06 18:28:39	←	jippiedoe has quit (Quit: Leaving)
2021-09-06 18:29:03	←	geekosaur has quit (Remote host closed the connection)
2021-09-06 18:29:22	→	geekosaur has joined #haskell
2021-09-06 18:29:49	→	hannessteffenhag has joined #haskell
2021-09-06 18:30:39	←	eggplantade has quit (Ping timeout: 240 seconds)
2021-09-06 18:31:11	←	burnsidesLlama has quit (Ping timeout: 250 seconds)
2021-09-06 18:32:55	←	aarvar has quit (Ping timeout: 256 seconds)
2021-09-06 18:34:09	←	hannessteffenhag has quit (Ping timeout: 240 seconds)
2021-09-06 18:34:22	yin[m]	i've started using neovim. what's the current recommended setup for haskell?
2021-09-06 18:35:03	←	hyiltiz has quit (Ping timeout: 252 seconds)
2021-09-06 18:35:30	arahael	I think HLS, but frankly, I just use a split window and run ghcid in the other pane.
2021-09-06 18:35:32	arahael	Hard to beat.
2021-09-06 18:36:12	→	burnsidesLlama has joined #haskell
2021-09-06 18:40:56	⚡	yin[m] uploaded an audio file: (4KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/ZBOMQEGOzGNPIWRTlhcSZmuw/Voice%20message.ogg >
2021-09-06 18:43:30	kuribas	yin[m]: emacs
2021-09-06 18:46:08	kuribas	to be fair, I haven't actually found any satisfying setup.  emacs with flycheck works reasonably well.  LSP always seems to crash or have bugs for me.  Never tried vim though...
2021-09-06 18:47:21	lortabac	I use neovim + HLS, it works well when it works
2021-09-06 18:47:22	raehik	yin[m]: I use neovim with a stack ghci session in another terminal. Emacs with HLS is better but it needs tons of memory and, well, Emacs knowledge
2021-09-06 18:47:47	lortabac	it crashes regularly on medium/big projects
2021-09-06 18:47:53	kuribas	lortabac: for me too, except it rarely works...
2021-09-06 18:48:18	lortabac	for me it only works reliably on tiny projects
2021-09-06 18:49:25	kuribas	intellij with stack also seems to work well...
2021-09-06 18:49:44	tomsmeding	raehik: neovim has native support for language servers nowadays since 0.5.0; doesn't solve the memory usage issue but does solve having to learn emacs :)
2021-09-06 18:50:12	ℹ	lep is now known as lep-
2021-09-06 18:50:15	←	slep has quit (Ping timeout: 250 seconds)
2021-09-06 18:50:42	→	shailangsa has joined #haskell
2021-09-06 18:51:14	raehik	tomsmeding: hrmmmm! I should have a look at that, thank you. So it "just works"?
2021-09-06 18:51:19	←	burnsidesLlama has quit (Remote host closed the connection)
2021-09-06 18:51:19	tomsmeding	kind of?
2021-09-06 18:51:29	tomsmeding	if you put the right lua incantations in your vimrc it just works :)
2021-09-06 18:52:02	tomsmeding	raehik: this is what I use https://paste.tomsmeding.com/ra9omdg9
2021-09-06 18:52:31	tomsmeding	minorly modified from the standard example code from nvim-lspconfig so that HLS also works on bare files outside of a cabal project
2021-09-06 18:52:47	tomsmeding	note that you need github.com/neovim/nvim-lspconfig
2021-09-06 18:53:24	→	hannessteffenhag has joined #haskell
2021-09-06 18:53:58	←	xstill has left #haskell
2021-09-06 18:54:48	←	andinus has left #haskell (ERC (IRC client for Emacs 27.1))
2021-09-06 18:59:09	←	hannessteffenhag has quit (Ping timeout: 240 seconds)
2021-09-06 18:59:24	→	hyiltiz has joined #haskell
2021-09-06 19:01:31	←	renzhi has quit (Ping timeout: 252 seconds)
2021-09-06 19:01:48	←	vysn has quit (Remote host closed the connection)
2021-09-06 19:01:51	←	amitnjha has quit (Quit: amitnjha)
2021-09-06 19:02:05	→	amitnjha has joined #haskell
2021-09-06 19:04:00	→	jtomas has joined #haskell
2021-09-06 19:04:26	raehik	tomsmeding: thanks! saving that
2021-09-06 19:05:51	zzz	nice
2021-09-06 19:11:48	←	qbt has quit (Remote host closed the connection)
2021-09-06 19:13:27	→	renzhi has joined #haskell
2021-09-06 19:17:11	←	amitnjha has quit (Quit: amitnjha)
2021-09-06 19:17:25	→	amitnjha has joined #haskell
2021-09-06 19:19:03	←	hyiltiz has quit (Ping timeout: 252 seconds)
2021-09-06 19:21:38	→	son0p has joined #haskell
2021-09-06 19:23:33	→	qbt has joined #haskell
2021-09-06 19:23:39	→	shriekingnoise has joined #haskell
2021-09-06 19:24:28	→	hannessteffenhag has joined #haskell
2021-09-06 19:28:51	←	hannessteffenhag has quit (Ping timeout: 245 seconds)
2021-09-06 19:30:03	←	Everything has quit (Ping timeout: 252 seconds)
2021-09-06 19:32:01	→	Everything has joined #haskell
2021-09-06 19:38:48	→	sleblanc has joined #haskell
2021-09-06 19:45:17	→	jpsa has joined #haskell
2021-09-06 19:46:09	→	_bin has joined #haskell
2021-09-06 19:46:17	→	orcalikastecona has joined #haskell
2021-09-06 19:52:16	ℹ	irc: disconnected from server
2021-09-06 19:52:37	→	oxide has joined #haskell
2021-09-06 19:52:37	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-06 19:52:37	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-06 19:52:37	ℹ	Channel #haskell: 743 nicks (1 op, 0 voices, 742 normals)
2021-09-06 19:52:38	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-06 19:53:13	←	hannessteffenhag has quit (Ping timeout: 252 seconds)
2021-09-06 19:55:33	→	lbseale has joined #haskell
2021-09-06 19:57:56	→	hannessteffenhag has joined #haskell
2021-09-06 19:58:28	→	nvmd has joined #haskell
2021-09-06 20:02:36	←	orcalikastecona has quit (Quit: WeeChat 2.8)
2021-09-06 20:03:09	ℹ	lep- is now known as lep
2021-09-06 20:03:33	←	machinedgod has quit (Read error: Connection reset by peer)
2021-09-06 20:04:15	ℹ	hexeme is now known as ldlework
2021-09-06 20:06:20	→	hyiltiz has joined #haskell
2021-09-06 20:06:30	→	thyriaen has joined #haskell
2021-09-06 20:06:57	→	machinedgod has joined #haskell
2021-09-06 20:07:06	←	jpsa has left #haskell (ERC (IRC client for Emacs 28.0.50))
2021-09-06 20:13:36	→	myShoggoth has joined #haskell
2021-09-06 20:14:45	←	pretty_dumm_guy has quit (Quit: WeeChat 3.2.1)
2021-09-06 20:17:56	→	waleee has joined #haskell
2021-09-06 20:20:22	→	shapr has joined #haskell
2021-09-06 20:27:31	←	amitnjha has quit (Quit: amitnjha)
2021-09-06 20:27:51	→	amitnjha has joined #haskell
2021-09-06 20:28:22	→	eggplantade has joined #haskell
2021-09-06 20:31:49	←	Akronymus has quit (Quit: Akronymus)
2021-09-06 20:32:57	←	eggplantade has quit (Ping timeout: 250 seconds)
2021-09-06 20:33:03	←	shapr has quit (Ping timeout: 256 seconds)
2021-09-06 20:34:51	→	wroathe has joined #haskell
2021-09-06 20:34:51	←	wroathe has quit (Changing host)
2021-09-06 20:34:51	→	wroathe has joined #haskell
2021-09-06 20:43:42	→	zebrag has joined #haskell
2021-09-06 20:47:32	←	hendursa1 has quit (Quit: hendursa1)
2021-09-06 20:48:15	→	hendursaga has joined #haskell
2021-09-06 20:49:15	←	stiell has quit (Remote host closed the connection)
2021-09-06 20:49:19	←	amahl has quit (Ping timeout: 252 seconds)
2021-09-06 20:49:42	→	stiell has joined #haskell
2021-09-06 20:52:31	←	jakalx has left #haskell
2021-09-06 20:55:22	→	burnsidesLlama has joined #haskell
2021-09-06 20:56:06	→	john2312 has joined #haskell
2021-09-06 20:56:56	→	lavaman has joined #haskell
2021-09-06 20:59:15	john2312	earlyExit :: [Int] -> Cont [Int] Int; earlyExit alist = do { r <- cont $ k -> k <$> alist; return [r] } why <$> can't work here?
2021-09-06 20:59:41	←	burnsidesLlama has quit (Ping timeout: 245 seconds)
2021-09-06 21:00:22	→	justsomeguy has joined #haskell
2021-09-06 21:01:23	←	lavaman has quit (Ping timeout: 256 seconds)
2021-09-06 21:04:33	ℹ	lep is now known as lep-
2021-09-06 21:05:11	john2312	this is the code https://paste.tomsmeding.com/JP4DbWYC
2021-09-06 21:05:23	→	jakalx has joined #haskell
2021-09-06 21:06:39	←	anderson has quit (Quit: bye)
2021-09-06 21:08:39	→	anderson has joined #haskell
2021-09-06 21:09:13	←	eldritch_ has quit (Quit: bye)
2021-09-06 21:09:38	→	eldritch_ has joined #haskell
2021-09-06 21:10:51	ℹ	lep- is now known as lep
2021-09-06 21:11:12	←	mc47 has quit (Remote host closed the connection)
2021-09-06 21:13:26	←	justsomeguy has quit (Ping timeout: 245 seconds)
2021-09-06 21:15:09	←	hyiltiz has quit (Ping timeout: 240 seconds)
2021-09-06 21:17:14	→	jtomas_ has joined #haskell
2021-09-06 21:17:30	→	hyiltiz has joined #haskell
2021-09-06 21:18:27	→	justsomeguy has joined #haskell
2021-09-06 21:19:34	←	jtomas has quit (Ping timeout: 252 seconds)
2021-09-06 21:21:47	←	cheater has quit (Ping timeout: 256 seconds)
2021-09-06 21:22:16	→	cheater has joined #haskell
2021-09-06 21:22:52	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-06 21:24:39	←	lortabac has quit (Quit: WeeChat 2.8)
2021-09-06 21:28:51	←	justsomeguy has quit (Ping timeout: 252 seconds)
2021-09-06 21:30:20	→	vysn has joined #haskell
2021-09-06 21:31:44	maerwald	john2312: `k` is supposed to be a function from `Int -> [Int]`
2021-09-06 21:32:15	john2312	maerwald yes, how I should change it?
2021-09-06 21:32:24	←	haykam1 has quit (Remote host closed the connection)
2021-09-06 21:32:27	→	Tuplanolla has joined #haskell
2021-09-06 21:32:27	maerwald	I don't really know what you're trying to do 
2021-09-06 21:32:55	→	haykam has joined #haskell
2021-09-06 21:33:01	←	vysn has quit (Client Quit)
2021-09-06 21:33:18	→	vysn has joined #haskell
2021-09-06 21:33:21	john2312	maerwald there's a list [1..10], and a function (+1), fmap (+1) [1..10] if the result contain 3 then early exit
2021-09-06 21:34:03	john2312	I know there's traverse can do that, but I'd like to know how Cont do that
2021-09-06 21:35:20	←	myShoggoth has quit (Remote host closed the connection)
2021-09-06 21:35:24	kuribas	You can always write a left fold as a CPS right fold.
2021-09-06 21:35:26	←	kenran has quit (Quit: WeeChat info:version)
2021-09-06 21:35:35	kuribas	Which allows early exit.
2021-09-06 21:35:37	→	merijn has joined #haskell
2021-09-06 21:35:38	→	myShoggoth has joined #haskell
2021-09-06 21:36:06	Clint	so you want f (+1) [1..10] = [2,3] ?
2021-09-06 21:40:29	←	machinedgod has quit (Ping timeout: 256 seconds)
2021-09-06 21:40:33	←	merijn has quit (Ping timeout: 250 seconds)
2021-09-06 21:41:06	john2312	yes
2021-09-06 21:44:06	→	shapr has joined #haskell
2021-09-06 21:49:04	→	hnOsmium0001 has joined #haskell
2021-09-06 21:50:56	→	justsomeguy has joined #haskell
2021-09-06 21:51:49	←	MQ-17J has quit (Ping timeout: 256 seconds)
2021-09-06 21:52:07	→	MQ-17J has joined #haskell
2021-09-06 21:54:23	←	dajoer has quit (Quit: leaving)
2021-09-06 21:54:39	ldlework	I have an infinite loop here somewhere but I don't see it, https://gist.github.com/dustinlacewell/2fe2bd282a794a97677cf723b4499989
2021-09-06 21:54:48	ldlework	Can anyone help me spot it?
2021-09-06 21:55:19	←	shapr has quit (Ping timeout: 252 seconds)
2021-09-06 21:56:27	ldlework	Oh I probably don't want to be mapping my draw function over the balloons
2021-09-06 21:57:00	ldlework	I probably need to like... "reduce" it
2021-09-06 21:57:48	ldlework	hmm
2021-09-06 21:58:28	ldlework	I guess I have no clue how to actually draw multiple things with Gloss
2021-09-06 21:59:32	ldlework	oh the `pictures` function takes a list of pictures
2021-09-06 21:59:38	ldlework	so this should be doing the right thing 
2021-09-06 22:00:57	←	MQ-17J has quit (Ping timeout: 240 seconds)
2021-09-06 22:01:15	→	MQ-17J has joined #haskell
2021-09-06 22:01:46	←	berberman_ has quit (Ping timeout: 240 seconds)
2021-09-06 22:01:53	→	polyphem has joined #haskell
2021-09-06 22:02:07	→	berberman has joined #haskell
2021-09-06 22:04:34	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-06 22:05:17	→	Vajb has joined #haskell
2021-09-06 22:06:09	←	hannessteffenhag has quit (Ping timeout: 240 seconds)
2021-09-06 22:06:46	←	MQ-17J has quit (Ping timeout: 245 seconds)
2021-09-06 22:07:05	→	MQ-17J has joined #haskell
2021-09-06 22:08:07	ℹ	irc: disconnected from server
2021-09-07 18:43:30	→	oxide has joined #haskell
2021-09-07 18:43:30	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-07 18:43:30	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-07 18:43:30	ℹ	Channel #haskell: 740 nicks (1 op, 0 voices, 739 normals)
2021-09-07 18:43:31	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-07 18:43:43	kuribas	> flip runStateT [] $ for_ [1..] $ \x -> do xs <- get; if x > 5 then lift $ Left xs; else put (x:xs)
2021-09-07 18:43:45	lambdabot	 Left [5,4,3,2,1]
2021-09-07 18:45:17	kuribas	albet70: note that ListT (from transformers) isn't a proper monad.
2021-09-07 18:45:34	kuribas	also the List monad probably doesn't short circuit the way you think.
2021-09-07 18:46:33	kuribas	continuation monad on top of the list monad is madness...
2021-09-07 18:47:28	→	michalz has joined #haskell
2021-09-07 18:49:14	←	koz has quit (Ping timeout: 252 seconds)
2021-09-07 18:49:36	→	acidjnk_new has joined #haskell
2021-09-07 18:52:17	←	amitnjha has quit (Quit: amitnjha)
2021-09-07 18:52:35	→	amitnjha has joined #haskell
2021-09-07 18:52:39	←	acidjnk_new3 has quit (Ping timeout: 252 seconds)
2021-09-07 18:57:03	→	Sgeo has joined #haskell
2021-09-07 18:57:50	→	[itchyjunk] has joined #haskell
2021-09-07 18:58:24	→	arjun_ has joined #haskell
2021-09-07 18:59:37	←	alp has quit (Quit: ZNC 1.8.1 - https://znc.in)
2021-09-07 18:59:37	←	guibou has quit (Quit: ZNC 1.8.1 - https://znc.in)
2021-09-07 19:00:51	←	arjun has quit (Ping timeout: 252 seconds)
2021-09-07 19:00:52	ℹ	arjun_ is now known as arjun
2021-09-07 19:01:56	→	wroathe has joined #haskell
2021-09-07 19:01:57	←	wroathe has quit (Changing host)
2021-09-07 19:01:57	→	wroathe has joined #haskell
2021-09-07 19:05:21	→	Kevin578 has joined #haskell
2021-09-07 19:09:06	→	pzanco has joined #haskell
2021-09-07 19:09:17	→	shriekingnoise has joined #haskell
2021-09-07 19:12:20	lechner	Hi, in this servant example what does the sole, single quote do, please?    https://github.com/sras/servant-examples/blob/master/src/HelloWorld.hs#L44
2021-09-07 19:12:37	←	amitnjha has quit (Quit: amitnjha)
2021-09-07 19:12:51	→	amitnjha has joined #haskell
2021-09-07 19:13:41	geekosaur	marks it as a type-level list
2021-09-07 19:14:04	→	max22- has joined #haskell
2021-09-07 19:16:13	geekosaur	instead of declaring a value-level list's type
2021-09-07 19:17:25	←	hendursa1 has quit (Quit: hendursa1)
2021-09-07 19:17:52	→	hendursaga has joined #haskell
2021-09-07 19:18:19	lechner	it's available even without "TypeOperators" right?
2021-09-07 19:18:23	→	tddschn has joined #haskell
2021-09-07 19:18:32	dminuoso	Yes.
2021-09-07 19:18:35	dminuoso	lechner: It's part of DataKinds
2021-09-07 19:19:18	dminuoso	Or at least Id expect it to be
2021-09-07 19:19:55	→	lavaman has joined #haskell
2021-09-07 19:22:06	←	favonia has quit (Ping timeout: 256 seconds)
2021-09-07 19:22:18	←	hyiltiz has quit (Ping timeout: 252 seconds)
2021-09-07 19:23:54	lechner	thanks!
2021-09-07 19:24:23	←	chomwitt has quit (Ping timeout: 260 seconds)
2021-09-07 19:24:27	dminuoso	lechner: The ' essentially lets you distinguish between a lifted and non-lifted constructor.
2021-09-07 19:24:31	←	lavaman has quit (Ping timeout: 265 seconds)
2021-09-07 19:25:07	dminuoso	for instance:
2021-09-07 19:25:12	dminuoso	% :set -XDataKinds
2021-09-07 19:25:12	yahb	dminuoso: 
2021-09-07 19:25:18	dminuoso	% data Color = Red | Blue
2021-09-07 19:25:18	yahb	dminuoso: 
2021-09-07 19:25:34	dminuoso	% type A = '['Red]
2021-09-07 19:25:34	yahb	dminuoso: ; <interactive>:43:10: error: parse error on input '
2021-09-07 19:26:35	→	koz has joined #haskell
2021-09-07 19:27:02	dminuoso	% type T = Const Int 'Red
2021-09-07 19:27:02	yahb	dminuoso: 
2021-09-07 19:27:34	dminuoso	lechner: Interestingly here you could have also written `type T = Const Int Red`, because `Red` happens to be unambiguous in the current namespace (it can only refer to the lifted type)
2021-09-07 19:27:39	dminuoso	But consider if we also have this present:
2021-09-07 19:27:46	dminuoso	% newtype Red = Red Int
2021-09-07 19:27:46	yahb	dminuoso: 
2021-09-07 19:27:53	dminuoso	% type T = Const Int Red
2021-09-07 19:27:53	yahb	dminuoso: 
2021-09-07 19:28:11	dminuoso	Then here `Red` will refer to the newtype Red, but `'Red` would refer to the lifted type from Colour.
2021-09-07 19:28:43	dminuoso	' for type lists is the same thing, as '[] lets GHC disambiguate between the lifted list and non-lifted list
2021-09-07 19:30:38	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-07 19:30:54	→	zebrag has joined #haskell
2021-09-07 19:31:09	→	MQ-17J has joined #haskell
2021-09-07 19:32:19	→	chomwitt has joined #haskell
2021-09-07 19:32:26	lechner	why would someone do something like     newtype Red = Red Int   ?
2021-09-07 19:33:52	[exa]	lechner: for example because it may have different typeclass instances than Int
2021-09-07 19:35:00	[exa]	it sounds kindof like color, so e.g. Show can print with blood and Num may clamp to 0-255 for 8bit rgb values
2021-09-07 19:35:07	→	biberu\ has joined #haskell
2021-09-07 19:36:48	lechner	i am just confused by the naming.  same with "newtype FirstName = FirstName String" here    https://wiki.haskell.org/Type
2021-09-07 19:36:58	→	adanwan has joined #haskell
2021-09-07 19:37:03	←	pzanco has quit (Quit: Leaving)
2021-09-07 19:38:08	←	biberu has quit (Ping timeout: 252 seconds)
2021-09-07 19:38:09	ℹ	biberu\ is now known as biberu
2021-09-07 19:38:19	→	alp has joined #haskell
2021-09-07 19:39:02	←	alp has quit (Changing host)
2021-09-07 19:39:02	→	alp has joined #haskell
2021-09-07 19:40:03	dminuoso	lechner: Newtypes are barriers that increase the robustness of your program.
2021-09-07 19:40:16	←	Dima[m] has left #haskell
2021-09-07 19:40:28	dminuoso	Consider you have some function that returns a temperature in degrees celsius, and some function that deposits money onto an account
2021-09-07 19:40:35	lechner	i get that, but how can the same label appear on both sides?
2021-09-07 19:40:43	dminuoso	If we used Int for both, you could accidentally pass a temperature into the latter function.
2021-09-07 19:40:45	dminuoso	Oh
2021-09-07 19:40:48	dminuoso	Different namespaces
2021-09-07 19:40:54	dminuoso	Types and values live in different namespaces
2021-09-07 19:40:59	dminuoso	So they are completely non-ambiguous
2021-09-07 19:41:06	maerwald	dminuoso: aren't they poor mans liquid types?
2021-09-07 19:41:08	→	guibou has joined #haskell
2021-09-07 19:42:31	lechner	so in    newtype Red = Red Int    both "Int" and the first "Red" are types, right?
2021-09-07 19:42:47	[exa]	lechner: the first Red is in a language of types, the second Red is in a language of values. You use `x :: Red` to say something has a type (notice: behind :: and with no parameters)
2021-09-07 19:42:57	←	amitnjha has quit (Quit: amitnjha)
2021-09-07 19:42:57	→	hyiltiz has joined #haskell
2021-09-07 19:43:10	→	amitnjha has joined #haskell
2021-09-07 19:43:25	[exa]	...and `Red 1` to make a value of Red type (here, actually, you may view the constructor as a function `Red :: Int -> Red`)
2021-09-07 19:44:23	[exa]	so as dminuoso said -- stuff before and after :: is from a completely different language
2021-09-07 19:44:58	lechner	i get that too, but i don't understand how the the value (the second "Red") can appear next to a type (the "Int") without anyone being confused about name spaces
2021-09-07 19:45:08	[exa]	the only place you mix these now is when specifying the types in the data structure, where you write `Red Int` -- that's a special syntax, kinda mixed language.
2021-09-07 19:45:18	[exa]	ah yes you just asked. :]
2021-09-07 19:45:40	lechner	how does the compiler know?
2021-09-07 19:45:46	[exa]	in fact, if you enable generalized algebraic datatypes, you would write this as `red :: Int -> Red`
2021-09-07 19:46:08	[exa]	and the compiler doesn't really "know"-- it's syntax driven. first thing after the `=` is the data constructor, and that's it
2021-09-07 19:46:33	←	dsrt^ has quit (Remote host closed the connection)
2021-09-07 19:46:51	[exa]	the pattern is roughly:
2021-09-07 19:47:20	[exa]	data Type = Datacons Type Type | Datacons Type Type Type | ...
2021-09-07 19:48:55	→	waleee has joined #haskell
2021-09-07 19:51:01	→	ubert has joined #haskell
2021-09-07 19:53:17	←	amitnjha has quit (Quit: amitnjha)
2021-09-07 19:53:32	→	amitnjha has joined #haskell
2021-09-07 19:53:36	dminuoso	Clint: the language is very dense, yes.
2021-09-07 19:53:39	dminuoso	Err lechner 
2021-09-07 19:53:50	lechner	i'm getting there
2021-09-07 19:53:54	dminuoso	lechner: the compiler knows this because we have grammar production rules for it.
2021-09-07 19:54:05	dminuoso	However
2021-09-07 19:54:10	dminuoso	For learning, you can enable GADTSyntax
2021-09-07 19:54:13	dminuoso	Which allows you to write:
2021-09-07 19:54:32	→	favonia has joined #haskell
2021-09-07 19:54:34	dminuoso	`data Foo where Con :: Int -> String -> Foo` rather than `data Foo = Con Int String`
2021-09-07 19:54:44	→	maxime_ has joined #haskell
2021-09-07 19:54:45	dminuoso	Which is less terse, but more readable
2021-09-07 19:55:31	←	gentauro has quit (Read error: Connection reset by peer)
2021-09-07 19:55:45	lechner	in this example    https://stackoverflow.com/a/51549110   does the value constructor Person (but not the type Person) appear anywhere except in     (Person id name)   ?
2021-09-07 19:56:40	dminuoso	Nope
2021-09-07 19:57:22	dminuoso	Some people also tend to prefix data constructors with Mk, so you might write `data Person = MkPerson Int String`, giving a visual clue of whats a type constructor and whats a data constructor.
2021-09-07 19:57:36	dminuoso	Not very common, but you see it from time to time
2021-09-07 19:57:39	←	max22- has quit (Ping timeout: 260 seconds)
2021-09-07 19:57:54	dminuoso	Especially in examples or learning material
2021-09-07 19:58:23	lechner	i think i get it now. in essence, the reuse that i find so confusing is actually meant to synchronize the two name spaces
2021-09-07 19:58:26	←	Kevin578 has quit (Remote host closed the connection)
2021-09-07 19:58:37	←	amitnjha has quit (Quit: amitnjha)
2021-09-07 19:58:48	janus	might as well get used to avoiding punning if we're getting dependent types...
2021-09-07 19:58:50	→	amitnjha has joined #haskell
2021-09-07 19:59:08	→	vicfred has joined #haskell
2021-09-07 19:59:09	←	vicfred has quit (Client Quit)
2021-09-07 20:00:14	lechner	will that mix the name spaces?
2021-09-07 20:00:36	→	gentauro has joined #haskell
2021-09-07 20:01:45	janus	lechner: yes
2021-09-07 20:02:00	lechner	you will have a revolution
2021-09-07 20:03:14	lortabac	lechner: if you are a beginner I'd suggest you to consider values and types as separate things and not worry about the namespace problem
2021-09-07 20:04:11	→	slack1256 has joined #haskell
2021-09-07 20:04:41	←	dajoer has quit (Quit: leaving)
2021-09-07 20:04:46	lortabac	that's a problem that only arises when you enable the DataKinds extension
2021-09-07 20:05:11	lortabac	or maybe in the future if one day there is a DependentHaskell extension
2021-09-07 20:05:30	lechner	https://int-index.com/posts/haskell-punning
2021-09-07 20:07:03	←	favonia has quit (Ping timeout: 265 seconds)
2021-09-07 20:08:42	EvanR	List a, Pair a b... dunno
2021-09-07 20:09:12	←	Akronymus has quit (Quit: Client closed)
2021-09-07 20:09:48	EvanR	too bad you just use different colors in the code itself
2021-09-07 20:09:53	EvanR	you can't*
2021-09-07 20:10:58	→	john2312 has joined #haskell
2021-09-07 20:11:15	←	wroathe has quit (Ping timeout: 252 seconds)
2021-09-07 20:12:15	ℹ	lep is now known as lep-
2021-09-07 20:13:20	lortabac	someone should come up with a color-sensitive language :D
2021-09-07 20:13:34	←	kmein has quit (Quit: ciao kakao)
2021-09-07 20:14:13	→	kmein has joined #haskell
2021-09-07 20:14:30	janus	lortabac: we have something even better, a language without syntax: http://www.lamdu.org/
2021-09-07 20:14:55	→	myShoggoth has joined #haskell
2021-09-07 20:15:39	←	stefan-_ has quit (Ping timeout: 252 seconds)
2021-09-07 20:16:14	←	hannessteffenhag has quit (Ping timeout: 265 seconds)
2021-09-07 20:18:10	←	bontaq has quit (Remote host closed the connection)
2021-09-07 20:19:06	→	hannessteffenhag has joined #haskell
2021-09-07 20:19:34	→	stefan-_ has joined #haskell
2021-09-07 20:20:58	←	chomwitt has quit (Ping timeout: 260 seconds)
2021-09-07 20:23:29	→	asthasr has joined #haskell
2021-09-07 20:24:04	←	Ariakenom has quit (Quit: WeeChat 3.1)
2021-09-07 20:26:37	geekosaur	lortabac, does piet not count?
2021-09-07 20:27:04	→	shapr has joined #haskell
2021-09-07 20:27:34	lortabac	geekosaur: nice :) I didn't know this language
2021-09-07 20:28:02	←	adanwan has quit (Ping timeout: 276 seconds)
2021-09-07 20:28:42	→	eggplantade has joined #haskell
2021-09-07 20:28:51	→	hnOsmium0001 has joined #haskell
2021-09-07 20:29:23	←	[itchyjunk] has quit (Quit: Leaving)
2021-09-07 20:29:26	→	neo has joined #haskell
2021-09-07 20:29:48	merijn	lortabac: eh
2021-09-07 20:29:50	ℹ	neo is now known as Guest1732
2021-09-07 20:29:54	merijn	lortabac: Color-sensitive already exists
2021-09-07 20:30:18	merijn	lortabac: https://en.wikipedia.org/wiki/ColorForth
2021-09-07 20:31:33	lortabac	when you think you had a crazy idea, there is always someone crazier than you who has even implemented it
2021-09-07 20:33:18	←	eggplantade has quit (Ping timeout: 252 seconds)
2021-09-07 20:37:42	→	ub has joined #haskell
2021-09-07 20:37:47	→	ubert1 has joined #haskell
2021-09-07 20:37:52	dminuoso	16:28:50       janus | might as well get used to avoiding punning if we're getting dependent types...
2021-09-07 20:38:07	ℹ	Guest1732 is now known as neo
2021-09-07 20:38:08	dminuoso	Yup, in hindsight having separate namespaces was a poor idea.
2021-09-07 20:38:25	dminuoso	Same thing for operators not needing ' anymore. :(
2021-09-07 20:38:37	ℹ	neo is now known as Guest9247
2021-09-07 20:39:07	pavonia	How would you enter differently colored text?
2021-09-07 20:39:21	←	ubert has quit (Ping timeout: 252 seconds)
2021-09-07 20:39:21	ℹ	ubert1 is now known as ubert
2021-09-07 20:39:30	geekosaur	editors would have shortcuts for it
2021-09-07 20:39:49	geekosaur	much the same way various IRC clients have shortcuts for entering colors
2021-09-07 20:41:39	geekosaur	(which I alays have to look up or use the riught click menu for, because I never remember them :)
2021-09-07 20:43:52	pavonia	Seems to me the tiny compiling speedup comes with a huge editing slowdown
2021-09-07 20:44:58	geekosaur	same could be said of unicode operators
2021-09-07 20:45:16	geekosaur	yet e.g. agda uses them
2021-09-07 20:45:51	pavonia	Well, who uses Agda anyway? :p
2021-09-07 20:47:48	←	vysn has quit (Quit: WeeChat 3.2)
2021-09-07 20:48:05	→	vysn has joined #haskell
2021-09-07 20:48:28	kuribas	does anyone write practical programs in idris/agda/coq/lean/... ?
2021-09-07 20:48:40	kuribas	anything other than a proof?
2021-09-07 20:50:18	←	cfricke has quit (Quit: WeeChat 3.2)
2021-09-07 20:50:22	ℹ	lep- is now known as lep
2021-09-07 20:50:53	←	vysn has quit (Client Quit)
2021-09-07 20:51:11	→	vysn has joined #haskell
2021-09-07 20:51:52	kuribas	I suppose haskell is the most "advanced" among practical languages.
2021-09-07 20:52:04	[exa]	kuribas: y tho
2021-09-07 20:52:26	[exa]	there is some software that is verified using coq programs, which I'd say is practical programming
2021-09-07 20:52:37	[exa]	either a compiler or an operating system or something
2021-09-07 20:52:40	kuribas	[exa]: it compiles to haskell?
2021-09-07 20:53:24	[exa]	L4 microkernel was verified by something too, I guess it was isabelle/hol?
2021-09-07 20:54:23	kuribas	what language was it written in?
2021-09-07 20:54:49	kuribas	Do they prove it in isabelle/hol, then implement the algorithm in another language?
2021-09-07 20:55:06	←	vysn has quit (Client Quit)
2021-09-07 20:55:12	[exa]	it's written in C and then verified in isabelle afaik
2021-09-07 20:55:20	[exa]	there's some magicks around there too
2021-09-07 20:55:22	→	vysn has joined #haskell
2021-09-07 20:55:41	[exa]	like, what's wrong with a specialized language for writing tests? :D
2021-09-07 20:56:13	[exa]	wow, wiki: The proof is constructed and checked in Isabelle/HOL and comprises over 200,000 lines of proof script to verify 7,500 lines of C. 
2021-09-07 20:56:18	←	vysn has quit (Client Quit)
2021-09-07 20:56:32	kuribas	wow
2021-09-07 20:56:36	→	vysn has joined #haskell
2021-09-07 20:57:08	←	lortabac has quit (Ping timeout: 260 seconds)
2021-09-07 20:57:10	[exa]	that's some testing
2021-09-07 20:58:34	→	libertyprime has joined #haskell
2021-09-07 20:58:57	libertyprime	hi haskell people. please make one of these!
2021-09-07 20:59:02	libertyprime	https://semiosis.github.io/ilambda/
2021-09-07 21:00:15	→	eggplantade has joined #haskell
2021-09-07 21:01:06	[exa]	libertyprime: the code samples there need more comments I'd say
2021-09-07 21:03:16	libertyprime	sorry ive been in a real rush with trying to make tooling for openai's codex/gpt3. i am outsourcing to you guys because i know its important
2021-09-07 21:03:41	[exa]	no worries
2021-09-07 21:04:03	[exa]	the languages that don't "return" stuff are not covered by the paradigm?
2021-09-07 21:04:39	→	chomwitt has joined #haskell
2021-09-07 21:04:58	←	burnsidesLlama has quit (Remote host closed the connection)
2021-09-07 21:07:12	libertyprime	http://semiosis.github.io/posts/imaginary-chimera-languages-with-codex/
2021-09-07 21:07:42	libertyprime	codex is a LM which is a representation of all languages in a large vector space
2021-09-07 21:08:02	libertyprime	it's probabilistic. the imaginary dimensions allow you to translate, do code gen and make these chimeric languages
2021-09-07 21:08:48	libertyprime	but the real value, i think is in keeping your peas and carrots separate, which haskell is good at
2021-09-07 21:09:16	libertyprime	a proper interop instead of a pure imaginary ghci , an ilambda library
2021-09-07 21:10:49	monochrom	"the program was written in C, the verification was written in Coq" sounds like "Coq is a practical proof language" to me.  proof ≠ program.
2021-09-07 21:11:01	monochrom	Unpopular opinion: proof ≠ program.
2021-09-07 21:11:26	[exa]	monochrom: thats just unpopular :(
2021-09-07 21:11:39	monochrom	program is what you actually run.
2021-09-07 21:11:51	monochrom	If you don't run your proof, it is not a program.
2021-09-07 21:12:01	[exa]	libertyprime: I'm a bit lost. does it have any explanation in already known terms? (without LM and "probabilistic language" etc)
2021-09-07 21:12:30	monochrom	I am a formal methods person, I value proofs.  All the more reason to acknowledge the difference.
2021-09-07 21:12:30	[exa]	monochrom: b...b.but...curry&howard :'(
2021-09-07 21:13:00	libertyprime	[exa]: there are some very dense academic papers you can read on prompt engineering and GPT
2021-09-07 21:13:15	libertyprime	but IP is very very new
2021-09-07 21:13:25	[exa]	link?
2021-09-07 21:13:25	monochrom	My personal experience with the ergonomics of writing programs and the ergonomics of writing proof is that they have very different ergonomics.
2021-09-07 21:14:09	libertyprime	https://arxiv.org/abs/2107.13586
2021-09-07 21:14:16	libertyprime	This is a recent survey on prompting
2021-09-07 21:14:25	→	bitmapper has joined #haskell
2021-09-07 21:14:35	libertyprime	a prompt links a function to a language model
2021-09-07 21:14:57	janus	what does it even mean to 'run' a program? if the program contains a value that type that witnesses the poincare conjecture, what would running it do? 
2021-09-07 21:15:24	monochrom	That experience is consistent with how Coq, Agda, ATS didn't quite catch on as programming languages, and how Haskell, Idris didn't quite catch on as proof languages.
2021-09-07 21:15:25	janus	is that why you object to proof=program?
2021-09-07 21:15:47	janus	ok
2021-09-07 21:15:59	libertyprime	janus: are you eleutherai janus?
2021-09-07 21:16:02	monochrom	janus, do you run your OS? do you run your webapp?
2021-09-07 21:16:41	janus	if we say that 'running' includes type checking, then surely 'running' a program that contains interesting types does tell you something about what is true
2021-09-07 21:16:41	monochrom	What would running your OS do, under your logic?
2021-09-07 21:16:48	→	lavaman has joined #haskell
2021-09-07 21:16:51	←	Guest9247 has quit (Quit: Leaving)
2021-09-07 21:17:01	janus	libertyprime: i don't know what eleutherai is, so i don't know if it is me
2021-09-07 21:17:12	→	neo1 has joined #haskell
2021-09-07 21:17:21	libertyprime	[exa]: you wont find anything on IP. but im doing a presentation on it in a month
2021-09-07 21:17:24	libertyprime	https://semiosis.github.io/posts/emacsconf-2021-imaginary-programming/
2021-09-07 21:17:48	libertyprime	github copilot is an example of it. except its a very very simplistic example of IP
2021-09-07 21:18:02	janus	monochrom: well, i thought i was arguing that 'running' isn't really clearly defined. so i don't know if i can say that i am running anything at all :P
2021-09-07 21:18:44	janus	maybe it just means electricity is turned to heat? then type checking would also be 'running' :P
2021-09-07 21:20:18	janus	it seems like an analogue to 'life'. not clearly defined but still commonly accepted as a term, even by scientists
2021-09-07 21:20:47	monochrom	OK, for starters, you are ignoring the fact that 99.999% of the time, the "value" is a function.  Perhaps a function that maps a list to its sum.  Now I'm going to use that function, give it [3,1,4], and hope to get some answer.
2021-09-07 21:21:00	←	MQ-17J has quit (Ping timeout: 265 seconds)
2021-09-07 21:21:09	←	landonf has quit (Ping timeout: 240 seconds)
2021-09-07 21:21:19	[exa]	libertyprime: well, good luck. :]
2021-09-07 21:21:32	monochrom	Your proof did not witness that 8 exists. Your proof witnessed that a function that maps [3,1,4] to 8, [1,4] to 5, etc., exists.
2021-09-07 21:22:06	monochrom	But I'm going to use that function, with a parameter that is drawn from an infinite space.
2021-09-07 21:22:08	←	eggplantade has quit (Remote host closed the connection)
2021-09-07 21:22:16	libertyprime	[exa] thanks. gpt4 is coming out very soon. its important to have a haskell library
2021-09-07 21:22:31	libertyprime	i mean, i can make something really lame with my noob haskell skills
2021-09-07 21:22:32	monochrom	And this is only the most basic use case.
2021-09-07 21:23:25	monochrom	In reality, the "value" is even more interesting than a function.  It is an interactive automaton, such as an OS, a webapp, a stdio application, a unix pipe, ...
2021-09-07 21:23:38	libertyprime	but please u are welcome to attempt to build yourself. could probably get a codex key if you say you want to work on an ilambda implementation foor the benefit of humanity or something
2021-09-07 21:23:44	[exa]	libertyprime: haskell isn't the usual working ground for linguists honestly
2021-09-07 21:24:02	libertyprime	[exa] this is nothing to do with linguistics really, it isnt
2021-09-07 21:24:16	monochrom	There is indeed the remaining 0.001% of the time when the "value" is just a natural number.  That's called Project Euler.
2021-09-07 21:24:28	→	danasca has joined #haskell
2021-09-07 21:24:36	monochrom	Unpopular opinion: Project Euler is not programming either.
2021-09-07 21:24:40	←	maxime_ has quit (Remote host closed the connection)
2021-09-07 21:25:13	→	MQ-17J has joined #haskell
2021-09-07 21:25:18	c_wraith	is that unpopular?
2021-09-07 21:25:21	[exa]	monochrom: +1, euler is puzzles
2021-09-07 21:25:29	→	max22- has joined #haskell
2021-09-07 21:25:37	c_wraith	I thought anyone who read over any of their problems past #10 or so knew that it was a math test.
2021-09-07 21:25:49	monochrom	So if you want to pitch "the value exists, it's proven, what's there to run?", pitch it to people who use PE to "learn coding" and tell them there is nothing to run when they ask "but why is my code so slow?"
2021-09-07 21:25:49	→	favonia has joined #haskell
2021-09-07 21:26:19	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-07 21:27:33	[exa]	monochrom: it might be interesting for teaching the phds in number theory and algebra to code?4~
2021-09-07 21:27:59	janus	i think maybe i know what you're saying. is it that type checking is just part of a compilation/running pipeline and it makes little sense to run only part of it?
2021-09-07 21:28:19	→	lbseale has joined #haskell
2021-09-07 21:28:23	janus	if instead of types, i had a program that generated my program, and i claimed it would be sufficient to only run the first, that would make little sense
2021-09-07 21:29:03	janus	so is the argument that type checking is not sufficient because the type commonly is not exact enough to prove the statement? like you mention that the type only witnesses that the mapping exists
2021-09-07 21:29:40	→	maxime_ has joined #haskell
2021-09-07 21:30:11	←	tddschn has quit (Ping timeout: 265 seconds)
2021-09-07 21:30:26	janus	but i don't know if i claimed otherwise. i agree that it makes no difference if you spend the time running a type checker or a runtime system
2021-09-07 21:31:02	monochrom	You are running your IRC client.  What is it proving?  What is it checking?
2021-09-07 21:31:20	monochrom	Proving that you exist?
2021-09-07 21:31:39	monochrom	Proving that someone else on the Internet also exists?
2021-09-07 21:32:05	janus	i don't know how to use the word 'proving' about interactions with the internet, so i don't know if those statements make sense to me
2021-09-07 21:32:27	monochrom	How do you explain how the PL research community has two words, "static" and "dynamic"?
2021-09-07 21:32:44	←	max22- has quit (Ping timeout: 260 seconds)
2021-09-07 21:32:49	monochrom	How do you explain how they have a "static semantics" and then a "dynamic semantics"?
2021-09-07 21:33:22	monochrom	Stop weaseling out with "I don't know".
2021-09-07 21:33:59	monochrom	Either you confirm "I don't know, I withdraw everything I said", or "I know, here is the justification of what I said".
2021-09-07 21:35:14	janus	i can't withdraw without understanding why i am wrong. and i can't justify without understanding exactly what needs justification
2021-09-07 21:35:34	monochrom	Alternatively if you assert "the OS is not a program, the IRC client is not a program, the web browser is not a program, none of those are being run", I'm also OK with that.
2021-09-07 21:36:10	Hecate	monochrom: dynamic semantics is when the behaviour of your programme is created from something during runtime, and you cannot infer what it could possibly do before you run it :D
2021-09-07 21:36:27	Hecate	like, a TCP-connected lisp interpreter
2021-09-07 21:36:32	Hecate	opened to the Internet
2021-09-07 21:36:33	janus	right, i previously stated that 'running' is not well defined to me. why should i make assertions that use ill-defined terms?
2021-09-07 21:36:49	monochrom	But you did.
2021-09-07 21:36:50	→	aliosablack has joined #haskell
2021-09-07 21:37:05	Hecate	sounds like a "you" problem, the majority of people have no trouble understanding what "running" a programme means
2021-09-07 21:37:21	Hecate	and if I'm not mistaken that is usually the first thing you do after writing your first programme
2021-09-07 21:37:45	←	libertyprime has quit (Quit: leaving)
2021-09-07 21:37:52	←	chomwitt has quit (Read error: Connection reset by peer)
2021-09-07 21:37:55	←	favonia has quit (Ping timeout: 265 seconds)
2021-09-07 21:38:25	→	burnsidesLlama has joined #haskell
2021-09-07 21:38:31	→	bitdex has joined #haskell
2021-09-07 21:38:35	janus	Hecate: the majority of people have no trouble using ill-defined terms like e.g. 'life', your appeal to the majority cannot sway me
2021-09-07 21:38:50	monochrom	Alternatively squared you can assert "the OS is not a program, the IRC client is not a program, the web browser is not a program, none of those are proving/checking anything"
2021-09-07 21:39:06	Hecate	janus: again, still sounds like a "you" problem, I have no trouble sleeping at night 
2021-09-07 21:39:20	janus	Hecate: i have not made any statements about your sleep quality
2021-09-07 21:39:23	→	econo has joined #haskell
2021-09-07 21:39:38	Hecate	janus: no but you sound like someone who would lose sleep over the definition of the term "sleep" :P
2021-09-07 21:39:39	→	eggplantade has joined #haskell
2021-09-07 21:39:46	monochrom	And you did make assertions about proofs and checks, so don't tell me now you suddenly don't know what proving and checking mean.
2021-09-07 21:39:51	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-07 21:40:16	→	tzh has joined #haskell
2021-09-07 21:40:44	→	arjun_ has joined #haskell
2021-09-07 21:40:46	→	favonia has joined #haskell
2021-09-07 21:41:35	lechner	I'm having a Magritte moment "Ceci n'est pas une pipe"
2021-09-07 21:42:28	monochrom	That's the dual meme to "is this a pigeon?" :)
2021-09-07 21:42:30	janus	monochrom: if we accept proofs==programs, we can go either way, either we claim that a web browser is a really bad proof, or we claim that it is no program. or we can reject proofs==programs like you do. 
2021-09-07 21:43:14	monochrom	"bad" is ill-defined.
2021-09-07 21:43:27	monochrom	and "really bad" is really ill-defined.
2021-09-07 21:43:41	janus	of course it is subjective, you can ignore it if you like
2021-09-07 21:43:43	←	arjun has quit (Ping timeout: 265 seconds)
2021-09-07 21:43:43	ℹ	arjun_ is now known as arjun
2021-09-07 21:43:59	monochrom	And be it recorded that I was not the one who brought up "bad".  I only brought up programs, proofs, and web browsers.
2021-09-07 21:44:02	monochrom	and running.
2021-09-07 21:44:12	←	burnsidesLlama has quit (Ping timeout: 265 seconds)
2021-09-07 21:44:14	→	pzanco has joined #haskell
2021-09-07 21:44:25	lechner	"the quote ...  is widely used to express utter confusion"      https://knowyourmeme.com/memes/is-this-a-pigeon
2021-09-07 21:44:27	janus	is it a bigger sin to use 'bad' than use 'proof'? they are both subjective
2021-09-07 21:44:50	monochrom	No I'm just saying if I took up that bait, 10 minutes down the road you would be weaseling out with "'bad" is ill-defined".
2021-09-07 21:45:38	lechner	maybe a poem about it would shed more light on the truth
2021-09-07 21:45:49	dminuoso	17:21:53      kuribas | I suppose haskell is the most "advanced" among practical languages.
2021-09-07 21:45:52	dminuoso	Depends on what you mean by advanced.
2021-09-07 21:46:36	dminuoso	If by "advanced" you mean complicated, C or C++ win by a large margin. Or even Python in terms of having to be very talented in order to write or manage non-trivial code.
2021-09-07 21:46:38	→	merijn has joined #haskell
2021-09-07 21:46:58	Hecate	I think it stopped being "the most advanced" with Koka and its effect handlers
2021-09-07 21:47:23	kuribas	dminuoso: I was thinking more in an "academic" sense.
2021-09-07 21:47:49	dminuoso	Mmm, hard to say.
2021-09-07 21:47:50	Hecate	kuribas: from an Academic perspective, OCaml and Haskell are basically at the same level
2021-09-07 21:48:00	dminuoso	Haskell in the sense of Haskell2010 is rather simple.
2021-09-07 21:48:13	dminuoso	Much of the complicated parts are in the libraries, not the language.
2021-09-07 21:48:42	dminuoso	Rust with borrow checking is also not trivial
2021-09-07 21:48:44	kuribas	dminuoso: sure, but does anyone actually programin in haskell2010?
2021-09-07 21:49:04	monochrom	I sometimes do.
2021-09-07 21:49:09	kuribas	dminuoso: true, I didn't consider rust, which is getting pretty popular.
2021-09-07 21:49:18	monochrom	At least it's better than Haskell98.
2021-09-07 21:49:41	kuribas	does Haskell2010 have multiparam typeclasses?
2021-09-07 21:49:46	monochrom	No.
2021-09-07 21:50:32	monochrom	But it has pattern guards. :)
2021-09-07 21:50:50	Hecate	kuribas: no you need to enable it in GHC, IIRC
2021-09-07 21:51:20	dminuoso	Hecate: That's just GHC being weird.
2021-09-07 21:51:30	monochrom	When I step outside of Haskell2010, usually it is only because of scoped type variables and exceptions.
2021-09-07 21:51:36	dminuoso	And hold on, you dont need to enable pattern guards.
2021-09-07 21:51:38	dminuoso	Im very sure
2021-09-07 21:51:47	kuribas	monochrom: no multiparam typeclasses?
2021-09-07 21:51:51	monochrom	No.
2021-09-07 21:51:52	kuribas	monochrom: no generics?
2021-09-07 21:51:52	dminuoso	I regularly use them, and I never had to flip on an extension for it.
2021-09-07 21:51:56	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-07 21:51:56	monochrom	No.
2021-09-07 21:52:15	Hecate	dminuoso: I don't understand your point
2021-09-07 21:52:23	→	merijn has joined #haskell
2021-09-07 21:52:42	dminuoso	Hecate: Sorry, I got the lines mixed up - caused some confusion.
2021-09-07 21:52:47	Hecate	ok no worries
2021-09-07 21:52:49	←	maxime_ has quit (Quit: Leaving)
2021-09-07 21:53:11	←	chisui has quit (Quit: Client closed)
2021-09-07 21:53:17	Hecate	dminuoso: I become extremely defensive when people say "oh that's just implementation-specific" when there is only one implementation which is used everywhere :P
2021-09-07 21:53:57	←	amitnjha has quit (Quit: amitnjha)
2021-09-07 21:54:10	→	amitnjha has joined #haskell
2021-09-07 21:54:44	monochrom	Yeah I don't draw that line in all contexts.  Only in some contexts when it's reasonable to.
2021-09-07 21:55:40	monochrom	A lot of times, to a lot of people who are interested in getting things done, names like "Haskell", "C", "Python" mean what programmers actually do, not what the defining documents say.
2021-09-07 21:56:30	→	Vajb has joined #haskell
2021-09-07 21:57:29	kuribas	monochrom: then you never use Vector?
2021-09-07 21:57:40	kuribas	as it uses type-families, etc...
2021-09-07 21:57:44	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-07 21:58:20	Hecate	especially since we said "fuck you" to the definition quite some time ago for Haskell, that C is mostly implementation-specific so the standard isn't worth more than your compiler…
2021-09-07 21:58:31	→	merijn has joined #haskell
2021-09-07 21:58:39	kuribas	does having a standard even matter for haskell?
2021-09-07 21:58:39	Hecate	Python I can respect the fact that PyPy is an absolute unit when it comes to performance
2021-09-07 21:58:55	kuribas	for Python it actually would matter :)
2021-09-07 22:01:08	←	geekosaur has quit (Quit: Leaving)
2021-09-07 22:02:31	→	geekosaur has joined #haskell
2021-09-07 22:04:13	←	merijn has quit (Ping timeout: 260 seconds)
2021-09-07 22:04:39	→	merijn has joined #haskell
2021-09-07 22:07:44	←	bitdex has quit (Quit: = "")
2021-09-07 22:07:58	→	Erutuon has joined #haskell
2021-09-07 22:08:18	←	geekosaur has quit (Remote host closed the connection)
2021-09-07 22:08:43	→	geekosaur has joined #haskell
2021-09-07 22:09:30	maerwald	standard matters for any language
2021-09-07 22:10:03	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-07 22:10:14	maerwald	unless you have a C++ workflow
2021-09-07 22:10:19	maerwald	then it really makes no difference
2021-09-07 22:10:19	→	merijn has joined #haskell
2021-09-07 22:10:32	maerwald	the idea is that a language shouldn't grow randomly
2021-09-07 22:10:54	maerwald	a standard is likely to enforce some discipline there
2021-09-07 22:11:17	→	max22- has joined #haskell
2021-09-07 22:11:23	←	geekosaur has quit (Remote host closed the connection)
2021-09-07 22:12:56	c_wraith	agh.  I just figured out what problem I'm having.
2021-09-07 22:13:01	c_wraith	:t callCC
2021-09-07 22:13:02	lambdabot	MonadCont m => ((a -> m b) -> m a) -> m a
2021-09-07 22:13:08	c_wraith	that's not polymorphic enough! :(
2021-09-07 22:13:34	→	geekosaur has joined #haskell
2021-09-07 22:14:10	c_wraith	I want to choose b independently at each use of the function provided
2021-09-07 22:15:36	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-07 22:16:24	→	merijn has joined #haskell
2021-09-07 22:16:55	←	geekosaur has quit (Remote host closed the connection)
2021-09-07 22:16:58	c_wraith	well.  When I have time, that's something to experiment on with quick look impredicativity.
2021-09-07 22:17:15	→	geekosaur has joined #haskell
2021-09-07 22:17:21	c_wraith	...  nevermind, that just needs a higher-rank type.  Not impredicativity
2021-09-07 22:18:53	←	geekosaur has quit (Excess Flood)
2021-09-07 22:18:53	←	pretty_dumm_guy has quit (Quit: WeeChat 3.2.1)
2021-09-07 22:19:12	→	geekosaur has joined #haskell
2021-09-07 22:21:54	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-07 22:22:27	→	merijn has joined #haskell
2021-09-07 22:22:43	←	john2312 has quit (Ping timeout: 252 seconds)
2021-09-07 22:23:49	awpr	seems to me you can make the more polymorphic version out of the standard one -- callCC (\k -> absurd <$> k _something), or factor that (fmap absurd . k) into a let-binding, or even wrap callCC with type ((forall b. a -> m b) -> m a) -> m a
2021-09-07 22:23:50	←	geekosaur has quit (Remote host closed the connection)
2021-09-07 22:24:12	→	geekosaur has joined #haskell
2021-09-07 22:26:32	monochrom	kuribas: Heh right, I sometimes use vector. But not very often.
2021-09-07 22:27:00	awpr	c_wraith: it does seem like a worthwhile convenience for callCC to have, though.  I wonder if there's a way for transformers/mtl to add this without interfering with Haskell98 support, e.g. CPP that only enables it on (non-ancient) GHC
2021-09-07 22:27:39	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-07 22:27:56	c_wraith	it's not like mtl and transformers try to work on non-ghc these days
2021-09-07 22:28:01	monochrom	c_wraith: Congrats on discovering the truth :)
2021-09-07 22:28:31	dminuoso	c_wraith: :s/mtl and transformers/anything on hackage/
2021-09-07 22:28:32	awpr	yeah I was just poking around at the metadata to figure that out.  maybe there's no obstacle to it
2021-09-07 22:28:38	c_wraith	I wonder if that'd be a breaking change.
2021-09-07 22:28:39	monochrom	The nice thing is that you only need to fix the type sig.  The function body is the same.
2021-09-07 22:28:41	→	merijn has joined #haskell
2021-09-07 22:28:58	c_wraith	like, if the type change would break any code anywhere relying on it for inference.
2021-09-07 22:29:18	monochrom	Yeah it may be a breaking change.
2021-09-07 22:29:31	awpr	I suppose it would break instances of using TypeApplications on callCC
2021-09-07 22:29:57	monochrom	I think adding a second name is safer than changing the type on the original name.
2021-09-07 22:30:00	c_wraith	oh, right. that too.
2021-09-07 22:30:31	monochrom	I don't think realistically callCC has been or will be used with type application. :)
2021-09-07 22:30:56	c_wraith	you're right, but it feels like there's a danger of becoming php if you go too far that direction. foo, foo_real, foo_real_fixed, etc
2021-09-07 22:31:01	dminuoso	TypeApplications has too many issues to be seriously used as part of an API.
2021-09-07 22:31:27	awpr	is this perhaps one of those cases where GHC would not complain if a type variable is completely unconstrained?
2021-09-07 22:31:30	monochrom	callCC itself is already pretty fringe. And it is not one of those things that gains much from type application.  It is not even a type-level programming tool.
2021-09-07 22:32:02	awpr	I've never really understood when that can happen, but I've seen it here and there, when working with phantom types
2021-09-07 22:32:14	←	raehik has quit (Ping timeout: 260 seconds)
2021-09-07 22:32:41	←	kuribas has quit (Quit: ERC (IRC client for Emacs 26.3))
2021-09-07 22:32:59	monochrom	s/php/snoyman/ with his exception-safe
2021-09-07 22:33:35	awpr	er, "this" referring to calls to the callback provided by callCC where the result type would be ambiguous.  if GHC would be okay with unconstrained types, then you can't be relying on it for inference, because they'd become unconstrained and still be fine
2021-09-07 22:33:59	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-07 22:34:13	→	raehik has joined #haskell
2021-09-07 22:34:15	→	merijn has joined #haskell
2021-09-07 22:35:03	awpr	I think I can contrive a case where the non-quantified version of the callback helps GHC choose an instance, so I guess it's not guaranteed to be safe
2021-09-07 22:35:24	c_wraith	yeah, that's certainly possible to construct.
2021-09-07 22:37:01	c_wraith	I don't think the whole thing really matters all that much, as the typical fix for problems with callCC is "don't use continuations"
2021-09-07 22:37:18	←	geekosaur has quit (Remote host closed the connection)
2021-09-07 22:38:13	→	geekosaur has joined #haskell
2021-09-07 22:38:28	→	ub1 has joined #haskell
2021-09-07 22:38:47	→	ubert1 has joined #haskell
2021-09-07 22:38:47	c_wraith	I was mostly just poking at it to get a better intuition for what the type says. nothing I did is best expressed using callCC
2021-09-07 22:39:12	←	ub has quit (Ping timeout: 252 seconds)
2021-09-07 22:39:48	←	merijn has quit (Ping timeout: 260 seconds)
2021-09-07 22:40:21	←	ubert has quit (Ping timeout: 252 seconds)
2021-09-07 22:40:21	ℹ	ubert1 is now known as ubert
2021-09-07 22:40:22	ℹ	ub1 is now known as ub
2021-09-07 22:40:32	→	merijn has joined #haskell
2021-09-07 22:41:52	→	aman_ has joined #haskell
2021-09-07 22:44:29	lechner	Lambdu looks super cool, but did the UI improvements require a new language?
2021-09-07 22:45:00	→	_ht has joined #haskell
2021-09-07 22:46:18	janus	lechner: note that lamdu supports multiple languages for bindings. so a binding can have different names in different langauges. how would you encode that in an existing language?
2021-09-07 22:46:39	monochrom	https://xkcd.com/927/
2021-09-07 22:46:59	janus	lechner: of course it can be done, it is yet anoth question of compromises. there are other 'structural' langauges, i linked this one because it is implemented in haskell and i think it is the neatest
2021-09-07 22:47:01	→	aarvar has joined #haskell
2021-09-07 22:47:44	lechner	janus: the language is neat, or the IDE is neat?
2021-09-07 22:47:47	←	pzanco has quit (Quit: Leaving)
2021-09-07 22:47:48	→	APic has joined #haskell
2021-09-07 22:47:59	janus	is there an xkcd for "we developed an incompatible implementation of an existing standard" that i can send when people send xkcd 927??
2021-09-07 22:48:42	monochrom	I think no. I think I'm pretty safe.
2021-09-07 22:48:58	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-07 22:49:17	←	amitnjha has quit (Quit: amitnjha)
2021-09-07 22:49:27	←	hyiltiz has quit (Ping timeout: 265 seconds)
2021-09-07 22:49:32	monochrom	But you should interpret it more broadly.  Instead of "standard", it could just as well be "language", "implementation", "philosophy".
2021-09-07 22:49:38	→	amitnjha has joined #haskell
2021-09-07 22:49:48	monochrom	So, how about sending 927 back to those who send 927?
2021-09-07 22:50:04	monochrom	I send 927 to those who don't send 927 to themselves.
2021-09-07 22:50:35	janus	lechner: i think their videos are really neat, i think the animations in the IDE is really neat . i think you still can't make your own data types, so the language probably is incomplete :P
2021-09-07 22:50:52	Gurkenglas	monochrom, you're lucky haskell is inconsistent
2021-09-07 22:51:02	janus	lechner: but they are building it on their own AST library which i still have to understand... some day https://hackage.haskell.org/package/hypertypes
2021-09-07 22:51:38	janus	lechner: the github explains how they build on data types a la carte: https://github.com/lamdu/hypertypes#readme
2021-09-07 22:51:54	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-07 22:52:21	lechner	janus: i may want that IDE, but I'm lukewarm about learning a new language
2021-09-07 22:52:36	→	MQ-17J has joined #haskell
2021-09-07 22:53:02	←	machinedgod has quit (Read error: Connection reset by peer)
2021-09-07 22:53:20	→	machinedgod has joined #haskell
2021-09-07 22:53:27	lechner	they could so totally build for Haskell what Eclipse was for Java
2021-09-07 22:53:27	monochrom	When one day every language is similar to Haskell,
2021-09-07 22:53:43	monochrom	we can say "learning a new language is just a matter of picking up new syntax" again!
2021-09-07 22:53:53	←	geekosaur has quit (Remote host closed the connection)
2021-09-07 22:54:12	→	geekosaur has joined #haskell
2021-09-07 22:54:39	janus	lechner: apropos eclipse , did you see https://www.jetbrains.com/mps/ ?
2021-09-07 22:55:31	←	justsomeguy has quit (Ping timeout: 245 seconds)
2021-09-07 22:57:18	raehik	janus: that library looks veeeery interesting, thank you!
2021-09-07 22:59:38	←	MQ-17J has quit (Ping timeout: 260 seconds)
2021-09-07 23:00:11	→	MQ-17J has joined #haskell
2021-09-07 23:01:30	→	hyiltiz has joined #haskell
2021-09-07 23:02:10	→	StefanMeier has joined #haskell
2021-09-07 23:02:53	←	geekosaur has quit (Remote host closed the connection)
2021-09-07 23:04:43	→	geekosaur has joined #haskell
2021-09-07 23:04:44	←	amitnjha has quit (Quit: amitnjha)
2021-09-07 23:04:58	→	amitnjha has joined #haskell
2021-09-07 23:05:24	←	favonia has quit (Ping timeout: 265 seconds)
2021-09-07 23:05:30	StefanMeier	hello. i'm having strange issues with ghci on Windows when I terminate a process with control-c. the process seems to still run in the background spamming my inputs.
2021-09-07 23:06:21	StefanMeier	Windows 10, platform installed with stack, running "stack ghci", tried in terminal: cmd, git bash, cygwin, msys2, powershell, powershell 7, msys2 + winpty. but nothing works
2021-09-07 23:06:45	←	xff0x has quit (Ping timeout: 252 seconds)
2021-09-07 23:07:16	StefanMeier	using ghc 9.0.1
2021-09-07 23:07:43	→	xff0x has joined #haskell
2021-09-07 23:09:41	→	burnsidesLlama has joined #haskell
2021-09-07 23:11:18	→	justsomeguy has joined #haskell
2021-09-07 23:12:39	←	qbt has quit (Ping timeout: 265 seconds)
2021-09-07 23:12:45	←	geekosaur has quit (Killed (NickServ (GHOST command used by allbery_b)))
2021-09-07 23:12:45	→	allbery_b has joined #haskell
2021-09-07 23:12:48	ℹ	allbery_b is now known as geekosaur
2021-09-07 23:13:03	←	MQ-17J has quit (Ping timeout: 260 seconds)
2021-09-07 23:14:35	→	qbt has joined #haskell
2021-09-07 23:16:23	←	geekosaur has quit (Remote host closed the connection)
2021-09-07 23:16:42	→	geekosaur has joined #haskell
2021-09-07 23:18:12	→	MQ-17J has joined #haskell
2021-09-07 23:18:43	zzz	that's weird. the process never exits? can you kill it? what terminal are you using?
2021-09-07 23:19:47	StefanMeier	apparently it's a "stack ghci" issues. https://github.com/commercialhaskell/stack/issues/4737
2021-09-07 23:19:48	StefanMeier	https://github.com/commercialhaskell/stack/issues/610
2021-09-07 23:20:30	←	dschrempf has quit (Ping timeout: 252 seconds)
2021-09-07 23:20:33	StefanMeier	when I run plain "ghci" and press control-c twice, everything is fine. "stack ghci" and control-c twice produces strange glitches and exits ghci, while keeping the process in the backgorund
2021-09-07 23:20:51	→	favonia has joined #haskell
2021-09-07 23:22:42	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-07 23:23:01	→	MQ-17J has joined #haskell
2021-09-07 23:24:34	→	merijn has joined #haskell
2021-09-07 23:27:38	←	MQ-17J has quit (Ping timeout: 265 seconds)
2021-09-07 23:29:48	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-07 23:30:48	→	MQ-17J has joined #haskell
2021-09-07 23:34:50	←	fryguybob has quit (Ping timeout: 256 seconds)
2021-09-07 23:35:26	←	lavaman has quit (Remote host closed the connection)
2021-09-07 23:37:00	←	StefanMeier has quit (Quit: Client closed)
2021-09-07 23:37:30	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-07 23:37:56	→	MQ-17J has joined #haskell
2021-09-07 23:41:04	←	arjun has quit (Remote host closed the connection)
2021-09-07 23:41:18	←	geekosaur has quit (Remote host closed the connection)
2021-09-07 23:41:41	→	geekosaur has joined #haskell
2021-09-07 23:42:37	←	MQ-17J has quit (Ping timeout: 265 seconds)
2021-09-07 23:42:55	→	MQ-17J has joined #haskell
2021-09-07 23:46:03	→	wroathe has joined #haskell
2021-09-07 23:46:03	←	wroathe has quit (Changing host)
2021-09-07 23:46:03	→	wroathe has joined #haskell
2021-09-07 23:50:43	←	aman_ has quit (Quit: aman_)
2021-09-07 23:51:02	→	aman has joined #haskell
2021-09-07 23:51:26	→	fryguybob has joined #haskell
2021-09-07 23:57:18	←	hannessteffenhag has quit (Ping timeout: 252 seconds)
2021-09-07 23:58:28	←	zebrag has quit (Remote host closed the connection)
2021-09-08 00:01:20	→	merijn has joined #haskell
2021-09-08 00:05:33	←	max22- has quit (Ping timeout: 260 seconds)
2021-09-08 00:06:54	→	hannessteffenhag has joined #haskell
2021-09-08 00:08:47	←	slack1256 has quit (Remote host closed the connection)
2021-09-08 00:09:07	→	jess has joined #haskell
2021-09-08 00:10:10	←	lbseale has quit (Ping timeout: 265 seconds)
2021-09-08 00:10:11	→	slack1256 has joined #haskell
2021-09-08 00:10:48	←	MQ-17J has quit (Ping timeout: 260 seconds)
2021-09-08 00:13:25	→	roboguy_ has joined #haskell
2021-09-08 00:16:07	→	MQ-17J has joined #haskell
2021-09-08 00:18:36	→	lbseale has joined #haskell
2021-09-08 00:19:54	→	no-n has joined #haskell
2021-09-08 00:20:13	ℹ	no-n is now known as pony
2021-09-08 00:21:30	←	jtomas has quit (Ping timeout: 252 seconds)
2021-09-08 00:21:50	←	justsomeguy has quit (Quit: WeeChat 3.2)
2021-09-08 00:21:53	←	hannessteffenhag has quit (Ping timeout: 260 seconds)
2021-09-08 00:22:12	maerwald[m]	ghcii?
2021-09-08 00:23:06	→	dschrempf has joined #haskell
2021-09-08 00:23:07	←	lbseale has quit (Read error: Connection reset by peer)
2021-09-08 00:23:23	→	xyh has joined #haskell
2021-09-08 00:25:04	←	amitnjha has quit (Quit: amitnjha)
2021-09-08 00:25:17	←	michalz has quit (Remote host closed the connection)
2021-09-08 00:25:18	→	amitnjha has joined #haskell
2021-09-08 00:26:31	←	jakalx has left #haskell (Error from remote client)
2021-09-08 00:26:44	ℹ	irc: disconnected from server
2021-09-08 09:21:57	→	oxide has joined #haskell
2021-09-08 09:21:57	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-08 09:21:57	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-08 09:21:57	ℹ	Channel #haskell: 728 nicks (1 op, 0 voices, 727 normals)
2021-09-08 09:21:58	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-08 09:27:51	ℹ	irc: disconnected from server
2021-09-08 09:28:12	→	oxide has joined #haskell
2021-09-08 09:28:12	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-08 09:28:12	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-08 09:28:12	ℹ	Channel #haskell: 726 nicks (1 op, 0 voices, 725 normals)
2021-09-08 09:28:13	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-08 09:31:58	←	myShoggoth has quit (Ping timeout: 260 seconds)
2021-09-08 09:32:56	→	neo1 has joined #haskell
2021-09-08 09:37:04	→	lavaman has joined #haskell
2021-09-08 09:43:07	ℹ	irc: disconnected from server
2021-09-08 09:43:26	→	oxide has joined #haskell
2021-09-08 09:43:26	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-08 09:43:26	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-08 09:43:26	ℹ	Channel #haskell: 726 nicks (1 op, 0 voices, 725 normals)
2021-09-08 09:43:27	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-08 09:43:46	←	zebrag has quit (Quit: Konversation terminated!)
2021-09-08 09:44:31	→	vysn has joined #haskell
2021-09-08 09:45:31	←	slowButPresent has quit (Quit: leaving)
2021-09-08 09:45:33	←	lstor_ has quit (Remote host closed the connection)
2021-09-08 09:50:35	←	amitnjha has quit (Quit: amitnjha)
2021-09-08 09:50:49	→	amitnjha has joined #haskell
2021-09-08 09:50:49	→	hannessteffenhag has joined #haskell
2021-09-08 09:53:50	←	lavaman has quit (Remote host closed the connection)
2021-09-08 09:54:04	→	lavaman has joined #haskell
2021-09-08 09:54:11	←	lavaman has quit (Remote host closed the connection)
2021-09-08 09:55:18	←	neo1 has quit (Ping timeout: 260 seconds)
2021-09-08 09:55:28	←	hannessteffenhag has quit (Ping timeout: 265 seconds)
2021-09-08 09:56:11	→	bitdex has joined #haskell
2021-09-08 10:00:39	←	wroathe has quit (Ping timeout: 252 seconds)
2021-09-08 10:00:55	←	amitnjha has quit (Quit: amitnjha)
2021-09-08 10:01:13	→	amitnjha has joined #haskell
2021-09-08 10:01:18	←	amitnjha has quit (Client Quit)
2021-09-08 10:01:33	→	amitnjha has joined #haskell
2021-09-08 10:03:37	→	merijn has joined #haskell
2021-09-08 10:03:50	→	Vajb has joined #haskell
2021-09-08 10:05:21	iqubic	how does one use Data.Graph from containers? Why does each vertex need a node vaule and a key value?
2021-09-08 10:06:04	iqubic	Is this a Map like structure, except with some of the pieces of data are connected via edges?
2021-09-08 10:06:11	←	aarvar has quit (Ping timeout: 252 seconds)
2021-09-08 10:06:36	→	dschrempf has joined #haskell
2021-09-08 10:07:07	iqubic	And if I use "graphFromEdges :: Ord key => [(node, key, [key])] -> (Graph, Vertex -> (node, key, [key]), key -> Maybe Vertex)" will that create me a directed graph or an undirected graph?
2021-09-08 10:08:08	→	Everything has joined #haskell
2021-09-08 10:10:22	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-08 10:11:05	→	Vajb has joined #haskell
2021-09-08 10:17:06	→	wroathe has joined #haskell
2021-09-08 10:17:06	←	wroathe has quit (Changing host)
2021-09-08 10:17:06	→	wroathe has joined #haskell
2021-09-08 10:18:27	roboguy_	iqubic: It looks like it uses an adjacency list representation for graphs
2021-09-08 10:19:22	iqubic	Yeah, that's fine, but will graphFromEdges give me a directed graph or not?
2021-09-08 10:19:23	roboguy_	also, regarding the type in general, it says that it represents a directed graph, so I imagine that function would construct a directed graph
2021-09-08 10:19:23	→	aarvar has joined #haskell
2021-09-08 10:19:33	iqubic	Alright, that's good to know.
2021-09-08 10:20:24	iqubic	So if I want all edges to be traversable in both directions, I need to add two entries per edge. That's fine.
2021-09-08 10:22:03	←	wroathe has quit (Ping timeout: 265 seconds)
2021-09-08 10:25:00	→	lavaman has joined #haskell
2021-09-08 10:29:47	←	lavaman has quit (Ping timeout: 265 seconds)
2021-09-08 10:33:03	→	aman has joined #haskell
2021-09-08 10:34:08	←	jespada has quit (Ping timeout: 240 seconds)
2021-09-08 10:36:08	→	jespada has joined #haskell
2021-09-08 10:38:03	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-08 10:39:47	←	roboguy_ has quit
2021-09-08 10:39:55	→	ubert has joined #haskell
2021-09-08 10:40:51	←	awth13 has quit (Remote host closed the connection)
2021-09-08 10:40:51	←	ubert has quit (Read error: Connection reset by peer)
2021-09-08 10:41:03	→	ubert has joined #haskell
2021-09-08 10:41:35	→	ub has joined #haskell
2021-09-08 10:45:14	→	acidjnk_new has joined #haskell
2021-09-08 10:45:55	→	falafel has joined #haskell
2021-09-08 10:47:35	←	falafel has quit (Client Quit)
2021-09-08 10:48:32	←	acidjnk has quit (Ping timeout: 252 seconds)
2021-09-08 10:49:05	→	falafel has joined #haskell
2021-09-08 10:50:13	→	rekahsoft has joined #haskell
2021-09-08 10:52:31	→	awth13 has joined #haskell
2021-09-08 10:53:34	→	wroathe has joined #haskell
2021-09-08 10:53:34	←	wroathe has quit (Changing host)
2021-09-08 10:53:34	→	wroathe has joined #haskell
2021-09-08 10:56:31	←	rekahsoft has quit (Remote host closed the connection)
2021-09-08 10:56:56	→	rekahsoft has joined #haskell
2021-09-08 10:58:53	←	wroathe has quit (Ping timeout: 260 seconds)
2021-09-08 11:02:39	→	peterhil has joined #haskell
2021-09-08 11:02:46	←	rekahsoft has quit (Remote host closed the connection)
2021-09-08 11:02:59	→	takuan has joined #haskell
2021-09-08 11:03:21	→	rekahsoft has joined #haskell
2021-09-08 11:11:47	→	mikoto-chan has joined #haskell
2021-09-08 11:14:31	←	dschrempf has quit (Quit: WeeChat 3.2.1)
2021-09-08 11:15:01	→	hannessteffenhag has joined #haskell
2021-09-08 11:15:50	←	asivitz has quit (Quit: Connection closed for inactivity)
2021-09-08 11:17:07	→	homarlone has joined #haskell
2021-09-08 11:19:20	←	xff0x has quit (Ping timeout: 252 seconds)
2021-09-08 11:20:02	→	xff0x has joined #haskell
2021-09-08 11:20:59	←	falafel has quit (Ping timeout: 252 seconds)
2021-09-08 11:21:47	←	ub has quit (Ping timeout: 265 seconds)
2021-09-08 13:38:20	→	oxide has joined #haskell
2021-09-08 13:38:20	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-08 13:38:20	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-08 13:38:20	ℹ	Channel #haskell: 739 nicks (1 op, 0 voices, 738 normals)
2021-09-08 13:38:20	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-08 13:39:36	←	hendursaga has quit (Ping timeout: 276 seconds)
2021-09-08 13:40:35	[exa]	albet70: transformers will generally work until you hit some problems where 2 monads need to cast the side effects on each other
2021-09-08 13:40:53	→	mc47 has joined #haskell
2021-09-08 13:41:05	←	hannessteffenhag has quit (Ping timeout: 260 seconds)
2021-09-08 13:41:34	[exa]	(at that point you can either do a custom monad, spend a nice week or two with the advanced effect systems, or just layer the software better. :D )
2021-09-08 13:41:38	→	hannessteffenhag has joined #haskell
2021-09-08 13:43:37	albet70	sorry I don't understand what "layer the software better " mean? my english isn't good
2021-09-08 13:43:53	→	amahl has joined #haskell
2021-09-08 13:44:07	→	hyiltiz has joined #haskell
2021-09-08 13:45:11	[exa]	albet70: by that I meant basically "redesign", so that both monad transformers don't need to influence each other, keeping it nicely layered and unidirectional instead
2021-09-08 13:45:54	albet70	ok
2021-09-08 13:46:20	[exa]	anyway yeah the answer was "go with transformers until it grows too much, then probably write a custom monad"
2021-09-08 13:47:45	→	allbery_b has joined #haskell
2021-09-08 13:47:45	←	geekosaur has quit (Killed (NickServ (GHOST command used by allbery_b)))
2021-09-08 13:47:48	ℹ	allbery_b is now known as geekosaur
2021-09-08 13:48:29	albet70	I haven't written a meaningful custom monad yet
2021-09-08 13:48:45	albet70	with multiple effects
2021-09-08 13:49:13	kuribas	I always write custom monads as a newtype on existing transformers.
2021-09-08 13:49:20	kuribas	Saves me from the plumbing.
2021-09-08 13:49:57	kuribas	And inspecting core shows me it's the same code anyway.
2021-09-08 13:50:05	albet70	could you share them? simple examples will be better
2021-09-08 13:51:05	kuribas	and recently I also started to do type MyInnerMonad = ..monadstack, then newtype MyMonad a = MyMonad (MyInnerMonad a)
2021-09-08 13:51:15	merijn	albet70: Something like: https://github.com/merijn/Belewitte/blob/master/benchmark-analysis/src/Core.hs#L96-L99
2021-09-08 13:51:18	kuribas	it makes it easier to write helpers for my monad.
2021-09-08 13:51:34	→	lortabac has joined #haskell
2021-09-08 13:51:56	kuribas	albet70: https://hackage.haskell.org/package/hasqlator-mysql-0.0.8/docs/src/Database.MySQL.Hasqlator.Typed.html#Query
2021-09-08 13:52:59	kuribas	albet70: also, I never derive MonadState, MonadReader, etc... I write my own functions to encapsulate them.
2021-09-08 13:53:15	kuribas	except MonadIO
2021-09-08 13:53:36	kuribas	because whatever state my stack is using, should be an implementation detail.
2021-09-08 13:53:38	merijn	^^ that is the way
2021-09-08 13:58:50	←	cjb has quit (Quit: cjb)
2021-09-08 13:59:31	→	cjb has joined #haskell
2021-09-08 14:01:25	Rembane	kuribas: Are the derived transformers always available?
2021-09-08 14:01:47	kuribas	which derived transformers?
2021-09-08 14:06:41	Rembane	kuribas: I think I asked that question in the wrong way. You never derive MonadState et al, because you want the state of the stack to be an implementatoin detail, so how can someone else get to the state if e.g. MonadState is  derived?
2021-09-08 14:07:22	merijn	Rembane: They can't, except through specific functions. That's the point
2021-09-08 14:07:25	kuribas	Rembane: they cannot, and should not.  I'll have helper functions to get any state, if the business logic requires it.
2021-09-08 14:07:40	merijn	If you expose MonadState/MonadReader in your API, you're messing up
2021-09-08 14:07:55	merijn	The mtl classes are a terrible API and you should never expose them
2021-09-08 14:08:16	Rembane	merijn, kuribas: Got it! 
2021-09-08 14:08:24	kuribas	Rembane: unless it's a library monad with an user defined internal stack.  But in that case you need to write manual instances anyway.
2021-09-08 14:08:44	kuribas	Because the MonadState should target the user stack, not your stack.
2021-09-08 14:08:53	merijn	Rembane: The problem is you get people implementing MonadReader for Monad (or transformer) X and another for Y and now you can never combine the two ever
2021-09-08 14:09:02	kuribas	merijn: well, I find them ok for doing plumbing.
2021-09-08 14:09:42	merijn	mtl-style classes work well for exposing *specific* functionality that's unique within a program. The problem is that the mtl classes are too general to guarantee uniqueness
2021-09-08 14:10:55	Rembane	That sounds reasonable.
2021-09-08 14:11:53	Hecate	"yer mum's reasonable, Rembane" 
2021-09-08 14:11:59	Hecate	(hello, good morning)
2021-09-08 14:12:06	merijn	Hecate: So's your face
2021-09-08 14:12:25	Rembane	Hecate: And your mum! :D
2021-09-08 14:13:10	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-08 14:13:25	merijn	(I always read "yer" in a Scottish accent and if there's one thing I've learned in Scotland it is that "so's your face" is an appropriate retort to all remarks :p)
2021-09-08 14:14:02	→	MQ-17J has joined #haskell
2021-09-08 14:14:51	kuribas	HecateyMcHcatyFace?
2021-09-08 14:18:39	arahael	Just finally looked at reflex-frp, I'd have to say that the "Comprehensive Reflex Documentation" really should be the first thing to look at.
2021-09-08 14:19:10	←	econo has quit (Quit: Connection closed for inactivity)
2021-09-08 14:21:41	Hecate	merijn: that was absolutely the spirit :)
2021-09-08 14:21:52	Hecate	kuribas: :'D
2021-09-08 14:26:03	merijn	I should go to Scotland again...well, once we're done with all this covid nonsense >.>
2021-09-08 14:26:11	←	Akronymus has quit (Ping timeout: 256 seconds)
2021-09-08 14:26:15	merijn	So 5 years from now at the current rate >.>
2021-09-08 14:26:27	→	thyriaen has joined #haskell
2021-09-08 14:28:01	←	amahl has quit (Ping timeout: 252 seconds)
2021-09-08 14:31:37	→	GoodbyeVincent has joined #haskell
2021-09-08 14:31:44	⚡	arahael wants to visit scotland and check out his cousin's ancestry there.
2021-09-08 14:31:53	arahael	so much bloodthirsty history.
2021-09-08 14:34:55	←	eggplantade has quit (Remote host closed the connection)
2021-09-08 14:41:14	ℹ	irc: disconnected from server
2021-09-08 14:41:34	→	oxide has joined #haskell
2021-09-08 14:41:34	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-08 14:41:34	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-08 14:41:34	ℹ	Channel #haskell: 738 nicks (1 op, 0 voices, 737 normals)
2021-09-08 14:41:34	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-08 14:47:15	←	bitmapper has quit (Quit: Connection closed for inactivity)
2021-09-08 14:50:47	←	cjb has quit (Quit: cjb)
2021-09-08 14:55:39	→	hexfive has joined #haskell
2021-09-08 14:56:59	←	slavaqq has quit (Quit: Client closed)
2021-09-08 14:57:58	→	enoq has joined #haskell
2021-09-08 15:00:18	←	hexfive has quit (Client Quit)
2021-09-08 15:03:23	←	slep has quit (Ping timeout: 265 seconds)
2021-09-08 15:04:01	←	amk has quit (Remote host closed the connection)
2021-09-08 15:06:49	←	shriekingnoise has quit (Quit: Quit)
2021-09-08 15:07:50	→	Guest59 has joined #haskell
2021-09-08 15:08:45	→	amk has joined #haskell
2021-09-08 15:09:08	←	Guest59 has left #haskell
2021-09-08 15:09:08	→	Guest59 has joined #haskell
2021-09-08 15:09:39	←	mestre has quit (Quit: Lost terminal)
2021-09-08 15:09:45	←	Guest59 has left #haskell
2021-09-08 15:11:37	→	slep has joined #haskell
2021-09-08 15:12:01	←	xff0x has quit (Ping timeout: 252 seconds)
2021-09-08 15:12:57	→	xff0x has joined #haskell
2021-09-08 15:13:15	←	GoodbyeVincent has quit (Remote host closed the connection)
2021-09-08 15:15:02	←	amk has quit (Remote host closed the connection)
2021-09-08 15:15:10	→	amk has joined #haskell
2021-09-08 15:15:36	←	amk has quit (Remote host closed the connection)
2021-09-08 15:15:46	→	amk has joined #haskell
2021-09-08 15:15:58	←	amk has quit (Remote host closed the connection)
2021-09-08 15:16:06	→	amk has joined #haskell
2021-09-08 15:27:05	tdammers	merijn: we may be done with covid one day, but the nonsense is permanent
2021-09-08 15:33:26	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-08 15:34:31	→	merijn has joined #haskell
2021-09-08 15:35:20	→	eggplantade has joined #haskell
2021-09-08 15:37:54	←	hololeap_ has quit (Ping timeout: 276 seconds)
2021-09-08 15:37:56	→	nattiestnate has joined #haskell
2021-09-08 15:39:37	←	eggplantade has quit (Ping timeout: 245 seconds)
2021-09-08 15:40:07	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-08 15:40:25	→	merijn has joined #haskell
2021-09-08 15:42:03	←	MQ-17J has quit (Ping timeout: 265 seconds)
2021-09-08 15:42:22	→	MQ-17J has joined #haskell
2021-09-08 15:43:02	arahael	And sadly predated covid.
2021-09-08 15:43:26	→	hololeap_ has joined #haskell
2021-09-08 15:45:34	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-08 15:46:13	→	merijn has joined #haskell
2021-09-08 15:47:46	←	aarvar has quit (Ping timeout: 252 seconds)
2021-09-08 15:50:22	→	glassy has joined #haskell
2021-09-08 15:50:29	glassy	hi
2021-09-08 15:51:07	glassy	is ARM better suited for functional (lazy?) languages with weak memory ordering?
2021-09-08 15:51:54	glassy	compared to x86
2021-09-08 15:51:54	←	merijn has quit (Ping timeout: 260 seconds)
2021-09-08 15:52:22	→	merijn has joined #haskell
2021-09-08 15:53:26	glassy	just because a functional compiler i think would have more liberty to put memory stores wherever it wants as the steps do not need to be executed imperatively
2021-09-08 15:53:29	←	azeem has quit (Ping timeout: 256 seconds)
2021-09-08 15:54:08	←	amitnjha has quit (Quit: amitnjha)
2021-09-08 15:54:10	→	azeem has joined #haskell
2021-09-08 15:54:24	→	amitnjha has joined #haskell
2021-09-08 15:54:29	←	amitnjha has quit (Client Quit)
2021-09-08 15:55:12	→	amitnjha has joined #haskell
2021-09-08 15:55:12	←	amitnjha has quit (Client Quit)
2021-09-08 15:55:12	→	amitnjha has joined #haskell
2021-09-08 15:55:25	maerwald	I think we just got a native code generator for ARM and I'd be surprised if it outperforms x86
2021-09-08 15:59:13	glassy	it is new and ARM isn't that popular though
2021-09-08 15:59:17	glassy	i just meant theoretically
2021-09-08 15:59:25	gehmehgeh	do you mean x86 or "amd64"?
2021-09-08 15:59:29	glassy	amd64
2021-09-08 15:59:31	gehmehgeh	k
2021-09-08 15:59:35	glassy	my bad
2021-09-08 16:02:21	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-08 16:03:41	→	merijn has joined #haskell
2021-09-08 16:08:19	←	nattiestnate has quit (Quit: WeeChat 3.2)
2021-09-08 16:09:13	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-08 16:09:30	→	merijn has joined #haskell
2021-09-08 16:14:43	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-08 16:15:40	→	merijn has joined #haskell
2021-09-08 16:24:34	←	Morrow has quit (Ping timeout: 240 seconds)
2021-09-08 16:26:31	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-08 16:27:37	→	merijn has joined #haskell
2021-09-08 16:30:57	→	pavonia has joined #haskell
2021-09-08 16:30:58	→	alx741 has joined #haskell
2021-09-08 16:40:05	→	AlexNoo_ has joined #haskell
2021-09-08 16:41:40	←	AlexZenon has quit (Ping timeout: 240 seconds)
2021-09-08 16:43:21	←	Alex_test has quit (Ping timeout: 256 seconds)
2021-09-08 16:43:22	→	polyphem has joined #haskell
2021-09-08 16:43:50	←	AlexNoo has quit (Ping timeout: 252 seconds)
2021-09-08 16:44:22	→	hiredman has joined #haskell
2021-09-08 16:44:38	kuribas	How do I print a utf8 bytestring?
2021-09-08 16:44:44	kuribas	Or do I need to convert to Text first?
2021-09-08 16:45:17	←	amitnjha has quit (Quit: amitnjha)
2021-09-08 16:45:32	→	AlexZenon has joined #haskell
2021-09-08 16:45:35	→	amitnjha has joined #haskell
2021-09-08 16:46:07	→	lavaman has joined #haskell
2021-09-08 16:47:23	→	Alex_test has joined #haskell
2021-09-08 16:47:56	hololeap_	kuribas: you can just do Data.ByteString.putStr and the console should be able to handle it
2021-09-08 16:48:01	merijn	That's a category error
2021-09-08 16:48:06	ℹ	hololeap_ is now known as hololeap
2021-09-08 16:48:13	merijn	hololeap: That is...pretty terrible advice
2021-09-08 16:48:35	hololeap	is it false?
2021-09-08 16:48:40	kuribas	hololeap: yes
2021-09-08 16:48:51	merijn	hololeap: It depends on the locale configured for the console
2021-09-08 16:49:05	kuribas	at outputs ASCII
2021-09-08 16:49:19	merijn	The fact that you have mostly encountered consoles with utf-8 locales is a coincidence
2021-09-08 16:49:34	merijn	I wouldn't be surprised if asian locales did not default to utf-8
2021-09-08 16:49:58	merijn	What you *should* do is check the configured locale and then convert based on that. Which is what text/string do in GHC
2021-09-08 16:50:02	[exa]	+1, utf-16 is pretty common
2021-09-08 16:50:26	←	lavaman has quit (Ping timeout: 252 seconds)
2021-09-08 16:50:33	merijn	kuribas: The least headache, most correct way is to convert to Text and output that, yes
2021-09-08 16:51:36	hololeap	so, Text.putStr will do proper encoding depending on the locale of the console?
2021-09-08 16:51:40	merijn	Yes
2021-09-08 16:51:46	hololeap	ok, TIL
2021-09-08 16:52:12	merijn	Well, the locale specified in the environment variables. But unless you manually fucked it up, your console should set those correctly
2021-09-08 16:53:11	merijn	The odds of you printing so much text that copying it to convert to Text is problematic seems...unlikely and niche enough to postpone worrying about it until it's proven to be a problem :)
2021-09-08 16:53:44	arahael	ShiftJIS is also still used, I believe.
2021-09-08 16:54:31	merijn	kuribas: Decoding to text will also let you manually specify how to handle errors if you get incorrect utf8
2021-09-08 16:55:10	kuribas	merijn: this comes from Aeson, but I found encodeToLazyText can encode directly to Text.
2021-09-08 16:55:53	→	akegalj has joined #haskell
2021-09-08 16:55:58	→	fendor_ has joined #haskell
2021-09-08 16:58:41	←	fendor has quit (Ping timeout: 252 seconds)
2021-09-08 17:00:11	←	ArctVaulMarsHMPJ has quit (Quit: EXIT)
2021-09-08 17:02:36	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-08 17:02:47	←	bitdex has quit (Quit: = "")
2021-09-08 17:07:51	→	Vajb has joined #haskell
2021-09-08 17:08:10	←	mikoto-chan has quit (Ping timeout: 260 seconds)
2021-09-08 17:08:33	→	machinedgod has joined #haskell
2021-09-08 17:09:59	→	mikoto-chan has joined #haskell
2021-09-08 17:10:32	←	sudden has quit (Ping timeout: 250 seconds)
2021-09-08 17:10:40	←	amitnjha has quit (Quit: amitnjha)
2021-09-08 17:10:46	→	sudden has joined #haskell
2021-09-08 17:10:55	→	amitnjha has joined #haskell
2021-09-08 17:12:53	→	raehik has joined #haskell
2021-09-08 17:15:46	←	jakalx has left #haskell
2021-09-08 17:15:51	→	jakalx has joined #haskell
2021-09-08 17:23:55	←	max22- has quit (Ping timeout: 260 seconds)
2021-09-08 17:27:20	←	vysn has quit (Quit: WeeChat 3.2)
2021-09-08 17:27:37	→	vysn has joined #haskell
2021-09-08 17:29:01	→	Unhammer has joined #haskell
2021-09-08 17:30:27	←	infinity0 has quit (Ping timeout: 245 seconds)
2021-09-08 17:30:56	→	waleee has joined #haskell
2021-09-08 17:31:36	→	infinity0 has joined #haskell
2021-09-08 17:34:15	←	fryguybob has quit (Remote host closed the connection)
2021-09-08 17:34:49	←	glassy has quit (Quit: Client closed)
2021-09-08 17:35:21	→	andre has joined #haskell
2021-09-08 17:36:34	←	raehik has quit (Quit: WeeChat 3.2)
2021-09-08 17:37:12	→	eggplantade has joined #haskell
2021-09-08 17:37:49	Axman6	On a related note, utf8 Text is so close!
2021-09-08 17:38:35	←	alx741 has quit (Quit: alx741)
2021-09-08 17:40:54	→	raehik has joined #haskell
2021-09-08 17:40:54	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-08 17:41:41	←	eggplantade has quit (Ping timeout: 245 seconds)
2021-09-08 17:42:01	→	MQ-17J has joined #haskell
2021-09-08 17:42:31	tdammers	I wonder if I'm the only one in the Haskell world who has absolutely no feelings either way about utf8-Text
2021-09-08 17:43:59	hpc	https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fmedia.giphy.com%2Fmedia%2F10j1ZRgKdcHIoU%2Fgiphy.gif&f=1&nofb=1
2021-09-08 17:46:04	lortabac	tdammers: I don't care about which encoding is used in the implementation, but apparently there are performance improvements with UTF8 Text
2021-09-08 17:46:17	merijn	tdammers: I don't either
2021-09-08 17:49:01	→	[itchyjunk] has joined #haskell
2021-09-08 17:49:33	→	lavaman has joined #haskell
2021-09-08 17:54:06	Cale	It'll probably make the jank we end up doing to hack the text package under GHCJS to use Javascript strings directly a good deal simpler.
2021-09-08 17:55:12	Cale	(otoh, it'll also probably need to be redone...)
2021-09-08 17:59:44	←	gentauro has quit (Ping timeout: 252 seconds)
2021-09-08 18:03:27	←	enikar has quit (Quit: WeeChat 2.8)
2021-09-08 18:05:29	→	gentauro has joined #haskell
2021-09-08 18:06:31	←	mikoto-chan has quit (Read error: Connection reset by peer)
2021-09-08 18:06:59	→	amahl has joined #haskell
2021-09-08 18:10:19	→	luc03 has joined #haskell
2021-09-08 18:11:00	←	amitnjha has quit (Quit: amitnjha)
2021-09-08 18:11:14	→	amitnjha has joined #haskell
2021-09-08 18:12:19	→	mikoto-chan has joined #haskell
2021-09-08 18:14:05	←	kuribas has quit (Ping timeout: 260 seconds)
2021-09-08 18:15:04	←	burnsidesLlama has quit (Remote host closed the connection)
2021-09-08 18:22:38	→	Akronymus has joined #haskell
2021-09-08 18:22:46	→	ec_ has joined #haskell
2021-09-08 18:23:12	←	lavaman has quit (Read error: Connection reset by peer)
2021-09-08 18:23:40	→	lavaman has joined #haskell
2021-09-08 18:26:08	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-08 18:26:26	→	MQ-17J has joined #haskell
2021-09-08 18:26:41	→	Pickchea has joined #haskell
2021-09-08 18:26:52	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-08 18:33:29	arahael	i dont understand how recursive do is evaluated.
2021-09-08 18:34:15	→	merijn has joined #haskell
2021-09-08 18:34:26	arahael	reading this a bit before bed: https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/guide-to-ghc-extensions/basic-syntax-extensions#recursivedo-and-dorec
2021-09-08 18:36:00	arahael	eh, 
2021-09-08 18:36:16	arahael	perhaps i should read it in the new day.
2021-09-08 18:37:41	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-08 18:38:12	→	MQ-17J has joined #haskell
2021-09-08 18:38:47	→	sleblanc has joined #haskell
2021-09-08 18:39:10	←	vysn has quit (Ping timeout: 260 seconds)
2021-09-08 18:39:19	shachaf	arahael: I think I learned it from https://leventerkok.github.io/papers/erkok-thesis.pdf which was pretty readable if I remember correctly.
2021-09-08 18:39:22	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-08 18:40:19	→	merijn has joined #haskell
2021-09-08 18:42:02	arahael	shachaf: at a glance that looks pretty good, thanks!
2021-09-08 18:43:11	ℹ	AlexNoo_ is now known as AlexNoo
2021-09-08 18:43:18	←	cheater has quit (Ping timeout: 265 seconds)
2021-09-08 18:45:25	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-08 18:46:40	→	merijn has joined #haskell
2021-09-08 18:47:22	←	phma has quit (Read error: Connection reset by peer)
2021-09-08 18:49:07	→	phma has joined #haskell
2021-09-08 18:49:35	←	lavaman has quit (Ping timeout: 265 seconds)
2021-09-08 18:52:01	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-08 18:52:42	→	merijn has joined #haskell
2021-09-08 18:56:05	→	shapr has joined #haskell
2021-09-08 18:57:31	←	sleblanc has quit (Ping timeout: 252 seconds)
2021-09-08 18:59:40	←	andre has quit (Quit: WeeChat 3.2)
2021-09-08 19:03:05	←	merijn has quit (Ping timeout: 260 seconds)
2021-09-08 19:03:23	←	jlamothe has quit (Quit: leaving)
2021-09-08 19:04:38	→	merijn has joined #haskell
2021-09-08 19:06:25	←	hendursa1 has quit (Quit: hendursa1)
2021-09-08 19:08:29	→	hendursaga has joined #haskell
2021-09-08 19:08:52	→	cheater has joined #haskell
2021-09-08 19:09:45	←	Akronymus has quit (Quit: Client closed)
2021-09-08 19:09:57	←	infinity0 has quit (Remote host closed the connection)
2021-09-08 19:09:58	→	Akronymus has joined #haskell
2021-09-08 19:11:19	→	wroathe has joined #haskell
2021-09-08 19:11:19	←	wroathe has quit (Changing host)
2021-09-08 19:11:19	→	wroathe has joined #haskell
2021-09-08 19:12:27	→	shriekingnoise has joined #haskell
2021-09-08 19:12:54	→	pleroma_ has joined #haskell
2021-09-08 19:16:16	→	TranquilEcho has joined #haskell
2021-09-08 19:19:32	→	aman has joined #haskell
2021-09-08 19:19:36	←	jonathanx has quit (Remote host closed the connection)
2021-09-08 19:23:26	→	jonathanx has joined #haskell
2021-09-08 19:23:40	→	max22- has joined #haskell
2021-09-08 19:24:45	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-08 19:25:04	→	MQ-17J has joined #haskell
2021-09-08 19:25:15	←	dsrt^ has quit (Ping timeout: 260 seconds)
2021-09-08 19:26:27	→	Sgeo has joined #haskell
2021-09-08 19:29:36	←	ec_ has quit (Remote host closed the connection)
2021-09-08 19:30:44	→	tinhatcat has joined #haskell
2021-09-08 19:34:54	←	thyriaen has quit (Quit: Leaving)
2021-09-08 19:35:50	→	burnsidesLlama has joined #haskell
2021-09-08 19:36:20	←	amitnjha has quit (Quit: amitnjha)
2021-09-08 19:36:34	→	amitnjha has joined #haskell
2021-09-08 19:36:35	←	amitnjha has quit (Client Quit)
2021-09-08 19:36:46	→	amitnjha has joined #haskell
2021-09-08 19:36:49	←	amitnjha has quit (Client Quit)
2021-09-08 19:37:03	→	amitnjha has joined #haskell
2021-09-08 19:37:08	←	amitnjha has quit (Client Quit)
2021-09-08 19:37:22	→	amitnjha has joined #haskell
2021-09-08 19:38:42	→	eggplantade has joined #haskell
2021-09-08 19:42:35	←	burnsidesLlama has quit (Ping timeout: 252 seconds)
2021-09-08 19:43:10	←	eggplantade has quit (Ping timeout: 252 seconds)
2021-09-08 19:43:18	←	aman has quit (Quit: aman)
2021-09-08 19:47:22	→	justsomeguy has joined #haskell
2021-09-08 19:47:28	←	amitnjha has quit (Quit: amitnjha)
2021-09-08 19:47:42	→	amitnjha has joined #haskell
2021-09-08 19:51:31	←	enoq has quit (Quit: enoq)
2021-09-08 19:53:32	←	nvmd has quit (Quit: Later, nerds.)
2021-09-08 19:55:19	→	acidjnk_new3 has joined #haskell
2021-09-08 19:55:49	←	gentauro has quit (Ping timeout: 252 seconds)
2021-09-08 19:58:34	←	acidjnk_new has quit (Ping timeout: 252 seconds)
2021-09-08 20:00:00	kritzefitz	Wow. I just had to document some perl code in POD. I never even realized how good haddock is in comparison.
2021-09-08 20:03:10	←	justsomeguy has quit (Ping timeout: 260 seconds)
2021-09-08 20:03:14	→	slowButPresent has joined #haskell
2021-09-08 20:05:10	←	akegalj has quit (Ping timeout: 252 seconds)
2021-09-08 20:06:49	→	gentauro has joined #haskell
2021-09-08 20:08:45	merijn	kritzefitz: Haskell tools are as bad as everyone claims...until you try and use comparable tools in other languages #ChangeMyMind :p
2021-09-08 20:12:20	→	jlamothe has joined #haskell
2021-09-08 20:12:59	→	neo1 has joined #haskell
2021-09-08 20:15:02	←	cfricke has quit (Quit: WeeChat 3.2)
2021-09-08 20:15:27	→	aman has joined #haskell
2021-09-08 20:15:28	→	dyeplexer has joined #haskell
2021-09-08 20:17:09	tdammers	dependency hell is real in all language ecosystems; you just get different symptoms
2021-09-08 20:17:49	←	kenran has quit (Quit: WeeChat info:version)
2021-09-08 20:20:37	→	dschrempf has joined #haskell
2021-09-08 20:22:23	←	dschrempf has quit (Client Quit)
2021-09-08 20:24:36	→	Guest|67 has joined #haskell
2021-09-08 20:25:31	→	bontaq has joined #haskell
2021-09-08 20:27:01	←	[itchyjunk] has quit (Quit: Leaving)
2021-09-08 20:32:16	→	myShoggoth has joined #haskell
2021-09-08 20:33:32	←	dajoer has quit (Quit: leaving)
2021-09-08 20:35:55	←	hannessteffenhag has quit (Ping timeout: 265 seconds)
2021-09-08 20:38:19	→	jumper149 has joined #haskell
2021-09-08 20:39:23	→	hannessteffenhag has joined #haskell
2021-09-08 20:40:20	←	xff0x has quit (Ping timeout: 252 seconds)
2021-09-08 20:40:33	←	pleroma_ has quit (Quit: leaving)
2021-09-08 20:42:50	←	Akronymus has quit (Quit: workday is over.)
2021-09-08 20:44:43	→	hnOsmium0001 has joined #haskell
2021-09-08 20:45:38	→	xff0x has joined #haskell
2021-09-08 20:45:43	←	lortabac has quit (Quit: WeeChat 2.8)
2021-09-08 20:53:36	→	slack1256 has joined #haskell
2021-09-08 20:54:40	←	mikoto-chan has quit (Read error: Connection reset by peer)
2021-09-08 20:56:54	slack1256	On a imaginary dependent haskell, would there be a need for DataKinds ?
2021-09-08 20:58:06	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-08 21:00:08	dminuoso	Why are you asking whether there'd be need for a concrete specific extension in a completely unspecified imaginary language?
2021-09-08 21:00:13	dminuoso	The question doesn't seem to make sense
2021-09-08 21:00:39	→	justsomeguy has joined #haskell
2021-09-08 21:00:42	→	mikoto-chan has joined #haskell
2021-09-08 21:01:11	→	vysn has joined #haskell
2021-09-08 21:02:38	monochrom	arahael: https://wiki.haskell.org/MonadFix desugars recursive-do to mfix.  This reduces the question to: what does mfix do, and how, for each specific instance.
2021-09-08 21:03:05	merijn	slack1256: Nope
2021-09-08 21:03:15	merijn	slack1256: But dependent haskell is gonna be a mess, imo
2021-09-08 21:03:27	merijn	slack1256: If you're curious about this stuff, I'd highly recommend looking into idriss
2021-09-08 21:04:14	monochrom	Oh, Erkok's thesis is even better about mfix. But it predates do-rec. At that time we had at most mdo.
2021-09-08 21:06:11	←	hannessteffenhag has quit (Ping timeout: 252 seconds)
2021-09-08 21:09:34	→	MQ-17J has joined #haskell
2021-09-08 21:11:44	slack1256	dminuoso: Well it's not that unspecified if Richards' ghc proposal are anything to go by. And sure, we can imagine worlds that don't actually exists, we have imagination. I just want to know if DataKinds would be redudant on that dependent version of haskell.
2021-09-08 21:12:35	→	fresheyeball has joined #haskell
2021-09-08 21:13:05	slack1256	merijn: Gotcha, I think that will answer my doubts more throughly than anything I could ask.
2021-09-08 21:13:12	maerwald	slack1256: that's not even the actual DH proposal
2021-09-08 21:15:11	slack1256	https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0378-dependent-type-design.rst 
2021-09-08 21:15:29	slack1256	I should have posted it sooner, sorry.
2021-09-08 21:15:54	maerwald	Yeah, it's more of a sketch
2021-09-08 21:16:40	maerwald	""Do we want to have dependent types in GHC?" front and center. This proposal does just that, by putting forward a design sketch for what dependent types might look like in GHC."
2021-09-08 21:16:51	maerwald	"might look like"
2021-09-08 21:17:02	→	pzanco has joined #haskell
2021-09-08 21:17:11	maerwald	so this is an incremental effort
2021-09-08 21:17:24	maerwald	it's not an actual proposal for actual DT in GHC
2021-09-08 21:17:32	slack1256	Got it.
2021-09-08 21:17:42	←	hendursaga has quit (Remote host closed the connection)
2021-09-08 21:18:07	→	hendursaga has joined #haskell
2021-09-08 21:19:01	→	ub has joined #haskell
2021-09-08 21:19:09	→	hannessteffenhag has joined #haskell
2021-09-08 21:19:59	→	vaibhavsagar[m] has joined #haskell
2021-09-08 21:20:00	slack1256	merijn: By the way, do you know if it "doable" to integrate idris2 on certain parts of a haskell program? No IPC, but maybe a program/TH to translate between types of the two languages?
2021-09-08 21:20:25	→	eggplantade has joined #haskell
2021-09-08 21:20:53	merijn	slack1256: no clue, more of a question for #idris? :p
2021-09-08 21:21:18	merijn	slack1256: On the bright side, most Idris docs are explicitly written for people coming from Haskell, so should be easy enough to get into :p
2021-09-08 21:22:40	dminuoso	slack1256: That wouldn't be imaginary, then. If you're wondering whether the current path of GHC would make DataKinds redundant, then yes.
2021-09-08 21:22:43	←	ubert has quit (Ping timeout: 252 seconds)
2021-09-08 21:22:43	ℹ	ub is now known as ubert
2021-09-08 21:23:14	→	lavaman has joined #haskell
2021-09-08 21:27:07	←	cheater has quit (Ping timeout: 252 seconds)
2021-09-08 21:27:43	slack1256	Maybe a more explicit framework would have helped from my part and a more caritative interpretation from yours would have been better.
2021-09-08 21:28:03	→	ubert1 has joined #haskell
2021-09-08 21:30:59	→	ec_ has joined #haskell
2021-09-08 21:34:10	←	bontaq has quit (Ping timeout: 260 seconds)
2021-09-08 21:34:30	←	fresheyeball has quit (Quit: WeeChat 2.9)
2021-09-08 21:34:37	←	supersven has quit (Ping timeout: 256 seconds)
2021-09-08 21:35:00	→	supersven has joined #haskell
2021-09-08 21:41:29	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-08 21:42:40	→	MQ-17J has joined #haskell
2021-09-08 21:48:37	→	cheater has joined #haskell
2021-09-08 21:52:11	→	k`` has joined #haskell
2021-09-08 21:52:57	←	Pickchea has quit (Remote host closed the connection)
2021-09-08 21:53:17	k``	Is there a way to bundle a constructor with a type alias like one can bundle a pattern synonym with a data type?
2021-09-08 21:54:45	dminuoso	"bundle"?
2021-09-08 21:56:50	k``	I've had to reorder the type parameters of a data type to write the right class instances. Now I want to export the original type as an alias with the original parameter order (for people who write type signatures), and export the alias with the constructors (for people who explicitly import `Type(..)` rather than just importing the whole module).
2021-09-08 21:57:22	←	hannessteffenhag has quit (Ping timeout: 252 seconds)
2021-09-08 21:57:45	k``	It's possible to bundle patterns with a type constructor using `TypeConstructor(pattern Pattern)`
2021-09-08 21:58:06	←	justsomeguy has quit (Quit: WeeChat 3.2)
2021-09-08 21:58:43	k``	I'm wondering whether there's a way to bundle the constructor functions with the type alias in a similar way (e.g. `Alias(pattern Constructor)` )
2021-09-08 21:59:10	←	Eoco has quit (Ping timeout: 240 seconds)
2021-09-08 21:59:11	→	_ht has joined #haskell
2021-09-08 21:59:34	dsal	k``: are you sure you want a type alias?
2021-09-08 21:59:48	k``	As it stands, folks will be fine with the change as long as they haven't explicitly imported the data type. But I don't want to screw someone over just because they used an explicit import!
2021-09-08 22:00:41	k``	dsal: Yes. Does it seem like there's something else I should do?
2021-09-08 22:01:39	dsal	Probably a newtype.  Type aliases aren't useful for much more than documentation.  And just like documentation, I tend to ignore them and have quite bad results.
2021-09-08 22:03:08	k``	Making a newtype would be way more disruptive. Rather than just messing with folks who use explicit imports (likely very few), it would mess with absolutely everyone.
2021-09-08 22:03:19	←	pzanco has quit (Quit: Leaving)
2021-09-08 22:03:23	→	kuribas has joined #haskell
2021-09-08 22:03:24	→	zebrag has joined #haskell
2021-09-08 22:03:47	luc03	I want to write a function `readEither :: forall a. Read a => String -> Either String a` that works like readMaybe but says what went wrong. I could write `case readMaybe @a myString of; Nothing -> Left "Parse error"; Just x -> Right x` but this is useless because just like readMaybe it does not give a useful error message.
2021-09-08 22:03:48	luc03	I would like to have an error message like "Impossible to parse a Bool from String \"foo\"" if I write `readEither @Bool "foo"`.
2021-09-08 22:03:50	luc03	But now I need to know what type @a is and I need its name as a String.
2021-09-08 22:03:52	luc03	Is it possible to write this function?
2021-09-08 22:04:13	k``	The order of the type parameters is irrelevant except for the definition of class instances as long as nobody is writing orphan instances.
2021-09-08 22:05:53	→	wonko has joined #haskell
2021-09-08 22:07:52	→	__monty__ has joined #haskell
2021-09-08 22:08:14	pavonia	luc03: Not in general, as Show doesn't provide context about a type. You could add another constraint that gives that information, e.g. Typeable
2021-09-08 22:08:43	←	slack1256 has quit (Ping timeout: 265 seconds)
2021-09-08 22:09:23	luc03	pavonia: Something like readEither :: (Read a, Typeable a) => ... ?
2021-09-08 22:09:32	pavonia	Yes
2021-09-08 22:10:00	k``	luc03: I don't know if there's a way to show the type that you're trying to parse, but it seems like the simplest thing is to append the string you're trying to parse to the failure message. Could specifically extract the point of failure using the `ReadPrec` machinery.
2021-09-08 22:11:57	tomsmeding	% :m +Data.Typeable +Text.Read
2021-09-08 22:11:57	yahb	tomsmeding: syntax: :module [+/-] [*]M1 ... [*]Mn
2021-09-08 22:12:06	tomsmeding	% import Data.Typeable
2021-09-08 22:12:07	yahb	tomsmeding: 
2021-09-08 22:12:10	tomsmeding	% import Text.Read
2021-09-08 22:12:11	yahb	tomsmeding: 
2021-09-08 22:12:16	tomsmeding	% :set -XScopedTypeVariables
2021-09-08 22:12:16	→	Erutuon has joined #haskell
2021-09-08 22:12:16	yahb	tomsmeding: 
2021-09-08 22:12:22	tomsmeding	% readEither :: forall a. (Typeable a, Read a) => String -> Either String a ; readEither str = case readMaybe str of Just res -> Right res ; r@Nothing -> Left ("Cannot parse " ++ show (typeRep (Proxy :: Proxy a)) ++ " from " ++ show str)
2021-09-08 22:12:22	yahb	tomsmeding: 
2021-09-08 22:12:29	luc03	pavonia: So this Typeable type class makes it possible to get some value level information about a type that has been applied using -XTypeApplications?
2021-09-08 22:12:30	tomsmeding	% readEither "a42" :: Either String Int
2021-09-08 22:12:31	yahb	tomsmeding: Left "Cannot parse Int from \"a42\""
2021-09-08 22:12:42	tomsmeding	see https://hackage.haskell.org/package/base-4.14.1.0/docs/Data-Typeable.html#t:TypeRep
2021-09-08 22:13:19	tomsmeding	(oh the r@ is redundant)
2021-09-08 22:13:22	k``	That's beautiful.
2021-09-08 22:13:38	tomsmeding	you can even skip the Proxy by writing 'typeRep r' :p
2021-09-08 22:13:50	tomsmeding	because r :: Maybe a, and typeRep takes a 'proxy a' :p
2021-09-08 22:13:51	luc03	tomsmeding: thank you. looks perfect.
2021-09-08 22:14:12	tomsmeding	and then you don't need ScopedTypeVariables anymore either
2021-09-08 22:14:20	tomsmeding	but I thought this was most insightful
2021-09-08 22:14:54	←	__monty__ has quit (Quit: leaving)
2021-09-08 22:16:08	→	__monty__ has joined #haskell
2021-09-08 22:16:22	k``	Is anything _not_ Typeable these days?
2021-09-08 22:16:37	←	jumper149 has quit (Quit: WeeChat 3.2)
2021-09-08 22:17:27	tomsmeding	I believe a Typeable constraint is automatically solved by internal ghc magic for any type
2021-09-08 22:17:32	sclv	"Since GHC 7.10, all types automatically have Typeable instances derived. This is in contrast to previous releases where Typeable had to be explicitly derived using the DeriveDataTypeable language extension."
2021-09-08 22:17:35	tomsmeding	or, well, any monomorphic type
2021-09-08 22:18:38	←	__monty__ has quit (Client Quit)
2021-09-08 22:19:19	→	tzh has joined #haskell
2021-09-08 22:19:22	k``	Nice, so your `readEither` is effectively just as general as `readMaybe` .
2021-09-08 22:19:56	tomsmeding	well, you do need to propagate that extra Typeable constraint upwards all the way until you know the actual monomorphic type
2021-09-08 22:20:06	tomsmeding	basically until can discharge the Read constraint
2021-09-08 22:20:27	tomsmeding	`type Read' a = (Read a, Typeable a)` using ConstraintKinds :p
2021-09-08 22:21:17	←	wroathe has quit (Ping timeout: 265 seconds)
2021-09-08 22:21:49	tomsmeding	% readMaybe "Proxy" :: Maybe (Proxy a)
2021-09-08 22:21:49	yahb	tomsmeding: Just Proxy
2021-09-08 22:21:57	tomsmeding	% readEither "Proxy" :: Either String (Proxy a)
2021-09-08 22:21:57	yahb	tomsmeding: ; <interactive>:74:1: error:; * No instance for (Typeable a1) arising from a use of `readEither'; Possible fix:; add (Typeable a1) to the context of; an expression type signature:; forall {k1} (a1 :: k1). Either String (Proxy a1); * In the expression: readEither "Proxy" :: Either String (Proxy a); In an equation for `it': it = readEither "Proxy" :: Either 
2021-09-08 22:22:00	k``	or use the old `class (Read a, Typeable a)=> Read' a ; instance (Read a, Typeable a)=> Read' a` trick with UndecidableInstances.
2021-09-08 22:22:11	tomsmeding	because 'Proxy a' is not monomorphic, while it _does_ have a Read instance
2021-09-08 22:22:22	tomsmeding	% readEither "Proxy" :: Either String (Proxy Int)
2021-09-08 22:22:23	yahb	tomsmeding: Right Proxy
2021-09-08 22:22:38	k``	Aah.
2021-09-08 22:23:17	tomsmeding	and it makes sense: what would the error message need to be upon a parse error if I wrote "Proxy a"
2021-09-08 22:23:48	→	hannessteffenhag has joined #haskell
2021-09-08 22:24:54	k``	I guess it has to be monomorphic or unification down the line could end up with mismatches on types that should be unified or matches on types that should not?
2021-09-08 22:25:09	←	mikoto-chan has quit (Ping timeout: 265 seconds)
2021-09-08 22:26:12	→	__monty__ has joined #haskell
2021-09-08 22:26:14	tomsmeding	well, what would the result of `readEtiher "abc" :: Either String (Proxy a)` be
2021-09-08 22:26:45	tomsmeding	given Typeable a, the answer is clear, but if you don't have Typeable a, you can't know
2021-09-08 22:26:59	→	mikoto-chan has joined #haskell
2021-09-08 22:27:13	k``	Because there could be an overlapping instance for `Proxy` of that specific type?
2021-09-08 22:27:37	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-08 22:27:44	tomsmeding	% foo1 :: String -> Either String (Proxy a) ; foo1 = readEither
2021-09-08 22:27:44	yahb	tomsmeding: ; <interactive>:76:52: error:; * No instance for (Typeable a) arising from a use of `readEither'; Possible fix:; add (Typeable a) to the context of; the type signature for:; foo1 :: forall {k} (a :: k). String -> Either String (Proxy a); * In the expression: readEither; In an equation for `foo1': foo1 = readEither
2021-09-08 22:27:48	←	amitnjha has quit (Quit: amitnjha)
2021-09-08 22:27:53	tomsmeding	% foo2 :: Typeable a => String -> Either String (Proxy a) ; foo2 = readEither
2021-09-08 22:27:54	yahb	tomsmeding: ; <interactive>:77:66: error:; * Could not deduce (Typeable k) arising from a use of `readEither'; from the context: Typeable a; bound by the type signature for:; foo2 :: forall {k} (a :: k). Typeable a => String -> Either String (Proxy a); at <interactive>:77:1-55; * In the expression: readEither; In an equation for `foo2': foo2 = readEither
2021-09-08 22:27:56	tomsmeding	oh
2021-09-08 22:28:11	→	amitnjha has joined #haskell
2021-09-08 22:28:13	k``	Sorry, I'm thinking in terms of the requirements of Typeable rather than the `readEither` function specifically.
2021-09-08 22:28:15	←	amitnjha has quit (Client Quit)
2021-09-08 22:28:27	tomsmeding	ah right
2021-09-08 22:28:31	→	amitnjha has joined #haskell
2021-09-08 22:28:47	tomsmeding	well, in order to derive Typeable for something, you should be able to get a string representation of the type
2021-09-08 22:29:07	tomsmeding	because you need to support 'show (typeRep (Proxy @a))'
2021-09-08 22:29:21	tomsmeding	so you need to know what to, well, return there :p
2021-09-08 22:29:35	←	hannessteffenhag has quit (Ping timeout: 260 seconds)
2021-09-08 22:29:36	tomsmeding	and you can only know that when the type is actually concrete and known
2021-09-08 22:30:11	tomsmeding	automatically solving Typeable involves magically constructing the dictionary necessary to implement typeRep; after that it's just normal typeclass dictionary passing
2021-09-08 22:30:14	⚡	tomsmeding has to go now, sorry
2021-09-08 22:30:28	k``	Right, you don't want to print "forall a. Typeable a => Proxy a" in one place and "Proxy Int" in another place for the same value.
2021-09-08 22:32:01	←	amk has quit (Ping timeout: 252 seconds)
2021-09-08 22:43:18	→	rekahsoft has joined #haskell
2021-09-08 22:44:36	→	pretty_dumm_guy has joined #haskell
2021-09-08 22:44:45	←	mikoto-chan has quit (Ping timeout: 260 seconds)
2021-09-08 22:46:10	→	dsrt^ has joined #haskell
2021-09-08 22:46:15	→	mikoto-chan has joined #haskell
2021-09-08 22:47:52	←	MQ-17J has quit (Ping timeout: 265 seconds)
2021-09-08 22:50:18	→	MQ-17J has joined #haskell
2021-09-08 22:50:22	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-08 22:50:35	→	Vajb has joined #haskell
2021-09-08 22:51:52	→	roboguy_ has joined #haskell
2021-09-08 22:56:06	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-08 22:56:15	→	Vajb has joined #haskell
2021-09-08 22:56:44	teddyc	https://hackage.haskell.org/package/req-3.9.0/docs/Network-HTTP-Req.html#t:HttpConfig I'm trying to use the defaultHttpConfig but I only want to change one field. Is this possible? 
2021-09-08 22:56:58	dminuoso	Yes.
2021-09-08 22:56:59	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-08 22:57:04	teddyc	easily?
2021-09-08 22:57:11	→	Vajb has joined #haskell
2021-09-08 22:57:11	dminuoso	Yes.
2021-09-08 22:57:16	geekosaur	theDefault {field = val}
2021-09-08 22:58:11	→	sneedsfeed has joined #haskell
2021-09-08 22:58:24	←	geekosaur has quit (Remote host closed the connection)
2021-09-08 22:59:17	tomsmeding	(this is called record update syntax)
2021-09-08 22:59:23	teddyc	nice, thanks
2021-09-08 22:59:41	teddyc	haven't seen it that much
2021-09-08 23:00:36	teddyc	The library throws exception for every statuscode not in [200..300]. Isn't this a bit weird?
2021-09-08 23:00:41	→	geekosaur has joined #haskell
2021-09-08 23:00:43	→	econo has joined #haskell
2021-09-08 23:01:05	←	lavaman has quit (Remote host closed the connection)
2021-09-08 23:01:23	→	abhixec has joined #haskell
2021-09-08 23:01:23	geekosaur	you'll find a lot of Haskell APIs use it
2021-09-08 23:01:53	dminuoso	teddyc: You can also write your own MonadHTTP implementation that does it differently
2021-09-08 23:02:01	teddyc	it said it would help with error handling. I guess it might, just seems to opinonated in my taste
2021-09-08 23:02:08	teddyc	dminuoso: aha
2021-09-08 23:02:12	teddyc	s/to/too/
2021-09-08 23:02:17	dminuoso	https://hackage.haskell.org/package/req-3.9.0/docs/Network-HTTP-Req.html#v:handleHttpException
2021-09-08 23:02:29	dminuoso	oh hold on
2021-09-08 23:02:32	dminuoso	I might have talked too soon
2021-09-08 23:03:08	maerwald	If there's one thing that sucks across the board in haskell, it's error handling. I've just given up and instead try to memorize all the pitfalls.
2021-09-08 23:03:36	←	amitnjha has quit (Quit: amitnjha)
2021-09-08 23:03:48	→	merijn has joined #haskell
2021-09-08 23:03:51	→	amitnjha has joined #haskell
2021-09-08 23:04:12	teddyc	yeah, i have been struggling with that
2021-09-08 23:04:29	dminuoso	maerwald: that's the one thing go has going for itself.
2021-09-08 23:04:40	dminuoso	at least its very clear how errors are communicated.
2021-09-08 23:04:44	dminuoso	usually, anyhow
2021-09-08 23:04:45	maerwald	dminuoso: weeell
2021-09-08 23:04:59	dminuoso	its just very easy to completely ignore and miss an error
2021-09-08 23:05:01	dminuoso	but oh well
2021-09-08 23:05:07	maerwald	when I worked with go the team actually tried to come up with a better error handling library
2021-09-08 23:05:11	maerwald	but no one could agree on anything
2021-09-08 23:05:16	←	rekahsoft has quit (Ping timeout: 265 seconds)
2021-09-08 23:05:41	maerwald	it's just no expressive enough to come up with... uh, anything
2021-09-08 23:05:45	maerwald	so just use what's there
2021-09-08 23:05:53	→	hannessteffenhag has joined #haskell
2021-09-08 23:06:27	dminuoso	Maybe error handling is a thing that nobody has gotten right
2021-09-08 23:06:27	maerwald	that, in an odd way, forces consistency throughout the ecosystem
2021-09-08 23:06:55	dminuoso	Java's attempt seems to have gotten close, but the ergonomics are shitty and there's backdoors that severely reduce the trust you can put in it.
2021-09-08 23:07:09	maerwald	and it's kind of a pleasure to pick a library in Go and not have to read a phd thesis to figure out how it works. Because everything is just the same
2021-09-08 23:07:24	dminuoso	maerwald: That's very much the intention of go.
2021-09-08 23:07:37	dminuoso	Being able to get people out of school into Google, and have them work with code with as little training as possible
2021-09-08 23:07:45	dminuoso	For whatever good that might be..
2021-09-08 23:08:47	maerwald	maybe it's modern PHP... it doesn't feel like coding, actually
2021-09-08 23:09:05	dminuoso	PHP is completely unprincipled and invented by someone with absolutely no experience in language design or implementation.
2021-09-08 23:09:17	dminuoso	which is very different... :P
2021-09-08 23:09:17	←	Guest|67 has quit (Quit: Connection closed)
2021-09-08 23:09:37	dminuoso	Internally go is well designed. Whether I agree with many of those design decisions is a different matter
2021-09-08 23:09:53	dminuoso	But PHP wasnt even designed, it's just a lot of adhocness accumulated over time
2021-09-08 23:09:57	←	eggplantade has quit (Remote host closed the connection)
2021-09-08 23:10:29	←	hannessteffenhag has quit (Ping timeout: 252 seconds)
2021-09-08 23:11:56	k``	What are the fundamental problems with errors in Haskell? That you can't really catch them outside of IO? That you have to worry about asynchronous errors?
2021-09-08 23:12:21	k``	Or just that folks don't really worry about handling them in the first place?
2021-09-08 23:12:23	dminuoso	k``: we have a multitude of largely incompatible error communication methods
2021-09-08 23:12:49	monochrom	I would put it in positive terms.
2021-09-08 23:12:51	shapr	I think the fundamental problem with Haskell is that it doesn't have the funding of golang, php, etc :-)
2021-09-08 23:12:57	monochrom	We recognize that one size doesn't fit all.
2021-09-08 23:13:29	monochrom	There are many error communication+handling schemes, and they look incompatible. That's because there are many incompatible contexts.
2021-09-08 23:13:42	ℹ	irc: disconnected from server
2021-09-09 10:53:47	→	oxide has joined #haskell
2021-09-09 10:53:47	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-09 10:53:47	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-09 10:53:47	ℹ	Channel #haskell: 725 nicks (1 op, 0 voices, 724 normals)
2021-09-09 10:53:47	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-09 10:54:01	→	mikoto-chan has joined #haskell
2021-09-09 10:55:17	→	fendor has joined #haskell
2021-09-09 10:55:55	→	rekahsoft has joined #haskell
2021-09-09 10:57:46	←	tomku has quit (Ping timeout: 252 seconds)
2021-09-09 11:04:38	←	hannessteffenhag has quit (Ping timeout: 260 seconds)
2021-09-09 11:07:43	←	zmt00 has quit (Ping timeout: 252 seconds)
2021-09-09 11:08:13	←	peterhil has quit (Ping timeout: 252 seconds)
2021-09-09 11:08:31	←	cjb has quit (Ping timeout: 260 seconds)
2021-09-09 11:09:16	←	sm2n has quit (Ping timeout: 245 seconds)
2021-09-09 11:10:13	←	rekahsoft has quit (Ping timeout: 260 seconds)
2021-09-09 11:11:37	←	wroathe has quit (Ping timeout: 260 seconds)
2021-09-09 11:13:05	→	hannessteffenhag has joined #haskell
2021-09-09 11:17:01	←	aegon has quit (Quit: leaving)
2021-09-09 11:18:03	→	tddschn has joined #haskell
2021-09-09 11:20:44	←	mikoto-chan has quit (Quit: mikoto-chan)
2021-09-09 11:21:41	→	Gurkenglas has joined #haskell
2021-09-09 11:22:35	→	gioyik has joined #haskell
2021-09-09 11:22:40	←	aratamizuki has quit (Remote host closed the connection)
2021-09-09 11:23:13	→	aratamizuki has joined #haskell
                                                                                                                                                                                                                                                                       2021-09-09 14:50:12	→	oxide has joined #haskell
2021-09-09 14:50:12	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-09 14:50:12	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-09 14:50:12	ℹ	Channel #haskell: 724 nicks (1 op, 0 voices, 723 normals)
2021-09-09 14:50:13	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-09 14:52:35	→	paradajz has joined #haskell
2021-09-09 14:54:59	→	peterhil has joined #haskell
2021-09-09 14:55:27	←	amitnjha has quit (Quit: amitnjha)
2021-09-09 14:55:37	←	paradajz has quit (Client Quit)
2021-09-09 14:55:42	→	amitnjha has joined #haskell
2021-09-09 14:59:51	Gurkenglas	why not? the linearness restriction expresses that we won't need a way of combining them.
2021-09-09 15:01:13	nshepperd2	no it doesn't
2021-09-09 15:01:45	Gurkenglas	can you give an example?
2021-09-09 15:02:00	←	peterhil has quit (Ping timeout: 252 seconds)
2021-09-09 15:03:17	nshepperd2	Applicative f => (a -> f b) ~> (s -> f t)
2021-09-09 15:04:36	Gurkenglas	You mean that I can't write "(forall f. Applicative f => (a -> f b) ~> (s -> f t)) -> (forall f. Functor f => (a -> f b) -> (s -> f t))"?
2021-09-09 15:05:39	nshepperd2	I mean that if you wanna apply that function, you're gonna have to provide an Applicative instance
2021-09-09 15:08:24	nshepperd2	and no, simply inventing one out of `undefined` on the basis that it can't possibly need it is unsound, because as mentioned, > being linear on p a b is different from being linear on whatever the 'result' of p a b is
2021-09-09 15:09:01	→	mei has joined #haskell
2021-09-09 15:09:21	nshepperd2	and anyway, if you do the right thing and weaken the constraint to Functor f in the first place, then the linear type is redundant
2021-09-09 15:11:06	gentauro	so looking at /r/haskell and seeing SPJ "moving along". The question is, is Haskell in good hands going forward? :)
2021-09-09 15:11:31	merijn	He's not stopping with Haskell or GHC...
2021-09-09 15:11:37	merijn	It literally says right in the post >.>
2021-09-09 15:11:43	merijn	He's just leaving MSR
2021-09-09 15:12:07	Gurkenglas	nshepperd2, may I have some p where this doesn't work?
2021-09-09 15:13:38	nshepperd2	Gurkenglas: literally a -> f b
2021-09-09 15:13:49	gentauro	merijn: aha
2021-09-09 15:13:53	←	azeem has quit (Ping timeout: 265 seconds)
2021-09-09 15:14:16	gentauro	I was afraid that he was going to join Oracle and spend time on Java instead :'(
2021-09-09 15:14:17	Gurkenglas	:t unsafeSingular -- This does the undefined thing, what does it not work on?
2021-09-09 15:14:18	lambdabot	(Conjoined p, Functor f) => Traversing p f s t a b -> Over p f s t a b
2021-09-09 15:14:29	→	azeem has joined #haskell
2021-09-09 15:14:39	nshepperd2	Gurkenglas: that's not the same thing
2021-09-09 15:14:41	Gurkenglas	(I admit that properly I should be threading the %1 through the definition to show that the undefined isnt hit)
2021-09-09 15:15:15	dminuoso	Gurkenglas: Perhaps the real question is, what are you hoping to obtain? The language of linearity wouldn't allow you to model much else.
2021-09-09 15:15:23	nshepperd2	basically, linear type are useless
2021-09-09 15:15:25	dminuoso	What is a Prism? What about an AffineFold?
2021-09-09 15:15:47	nshepperd2	a function being linear doesn't let the caller do anything new except call it in a context that is itself linear
2021-09-09 15:16:50	nshepperd2	this is completely different from parametricity, which actually lets you call functions at different types
2021-09-09 15:17:58	Gurkenglas	dminuoso, Lens,Traversal1,AffineTraversal,Traversal become Traversal. Getter,Fold1,AffineFold,Fold become Fold.
2021-09-09 15:20:42	←	ubert has quit (Ping timeout: 252 seconds)
2021-09-09 15:23:52	←	luc03 has quit (Quit: WeeChat 3.0.1)
2021-09-09 15:24:00	←	asthasr has quit (Quit: asthasr)
2021-09-09 15:26:13	→	ubert has joined #haskell
2021-09-09 15:27:40	←	azeem has quit (Read error: Connection reset by peer)
2021-09-09 15:27:55	→	azeem has joined #haskell
2021-09-09 15:29:42	Gurkenglas	a lens is to a traversal as a prism is to a... witness that s is isomorphic to "something + (Nat, a)"? my theory predicts that %1 will make it a prism again iff it's the correct definition.
2021-09-09 15:30:48	←	ubert has quit (Ping timeout: 265 seconds)
2021-09-09 15:30:50	→	ub has joined #haskell
2021-09-09 15:33:08	ℹ	ub is now known as ubert
2021-09-09 15:35:57	Gurkenglas	(that's what i'm hoping to obtain, predictions :))
2021-09-09 15:36:46	←	qbt has quit (Quit: WeeChat 3.2)
2021-09-09 15:37:12	ℹ	statusfa1led is now known as statusfailed
2021-09-09 15:41:58	→	lavaman has joined #haskell
2021-09-09 15:45:28	←	azeem has quit (Ping timeout: 252 seconds)
2021-09-09 15:45:47	←	amitnjha has quit (Quit: amitnjha)
2021-09-09 15:46:02	→	amitnjha has joined #haskell
2021-09-09 15:46:11	→	azeem has joined #haskell
2021-09-09 15:46:31	←	lavaman has quit (Ping timeout: 260 seconds)
2021-09-09 15:49:39	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-09 15:49:43	→	burnsidesLlama has joined #haskell
2021-09-09 15:50:24	←	azeem has quit (Read error: Connection reset by peer)
2021-09-09 15:51:05	→	merijn has joined #haskell
2021-09-09 15:51:06	→	peterhil has joined #haskell
2021-09-09 15:51:27	→	azeem has joined #haskell
2021-09-09 15:53:21	Gurkenglas	Why aren't the lens laws just "view l s ≡ view l s' implies set l b s ≡ set l b s'"?
2021-09-09 15:56:06	←	burnsidesLlama has quit (Ping timeout: 260 seconds)
2021-09-09 15:56:07	←	amitnjha has quit (Quit: amitnjha)
2021-09-09 15:56:22	→	amitnjha has joined #haskell
2021-09-09 15:56:27	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-09 15:56:49	→	merijn has joined #haskell
2021-09-09 15:57:06	←	sidbendu has quit (Quit: Client closed)
2021-09-09 15:57:39	→	[itchyjunk] has joined #haskell
2021-09-09 15:59:35	←	peterhil has quit (Ping timeout: 260 seconds)
2021-09-09 16:00:18	←	aratamizuki has quit (Remote host closed the connection)
2021-09-09 16:00:50	→	aratamizuki has joined #haskell
2021-09-09 16:02:50	→	ub has joined #haskell
2021-09-09 16:04:03	→	eggplantade has joined #haskell
2021-09-09 16:04:11	←	ubert has quit (Ping timeout: 265 seconds)
2021-09-09 16:04:11	ℹ	ub is now known as ubert
2021-09-09 16:06:43	nshepperd2	because that law isn't true?
2021-09-09 16:07:11	←	merijn has quit (Ping timeout: 260 seconds)
2021-09-09 16:07:58	→	merijn has joined #haskell
2021-09-09 16:08:27	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-09 16:09:16	[itchyjunk]	What's a good pace to specfically learn all the A->B->C notations. a :: A->B says a has the type A->B, but i can thinking of a as a function that takes something of type A and returns something of type B right?
2021-09-09 16:09:58	←	Pickchea has quit (Ping timeout: 265 seconds)
2021-09-09 16:10:03	[itchyjunk]	but when a :: A->B->C->A, is a function that takes two things of type A and B and returns something of type C->A or takes three things of type A,B,C and returns something of type A
2021-09-09 16:10:05	→	Phantastes has joined #haskell
2021-09-09 16:10:06	[itchyjunk]	type thing
2021-09-09 16:10:49	←	Phantastes has quit (Client Quit)
2021-09-09 16:13:30	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-09 16:14:04	→	merijn has joined #haskell
2021-09-09 16:15:49	→	sedeki has joined #haskell
2021-09-09 16:18:17	←	sedeki has quit (Client Quit)
2021-09-09 16:18:23	←	anderson has quit (Quit: bye)
2021-09-09 16:19:32	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-09 16:19:47	→	merijn has joined #haskell
2021-09-09 16:21:35	←	notzmv has quit (Read error: Connection reset by peer)
2021-09-09 16:22:27	→	anderson has joined #haskell
2021-09-09 16:24:55	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-09 16:25:00	→	notzmv has joined #haskell
2021-09-09 16:25:14	→	merijn has joined #haskell
2021-09-09 16:28:19	←	azeem has quit (Ping timeout: 265 seconds)
2021-09-09 16:29:31	→	azeem has joined #haskell
2021-09-09 16:30:25	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-09 16:31:00	→	alx741 has joined #haskell
2021-09-09 16:31:05	←	anderson has quit (Changing host)
2021-09-09 16:31:05	→	anderson has joined #haskell
2021-09-09 16:31:20	→	merijn has joined #haskell
2021-09-09 16:31:58	←	anderson has quit (Quit: bye)
2021-09-09 16:32:42	←	ChaiTRex has quit (Remote host closed the connection)
2021-09-09 16:32:44	←	ubert has quit (Ping timeout: 252 seconds)
2021-09-09 16:32:50	enikar	[itchyjunk]: the both are true. Function are currified. When they are partialy applied, they return a new function that takes remaind arguments.
2021-09-09 16:32:56	→	anderson has joined #haskell
2021-09-09 16:32:56	→	ub has joined #haskell
2021-09-09 16:32:56	←	azeem has quit (Read error: Connection reset by peer)
2021-09-09 16:33:09	→	ChaiTRex has joined #haskell
2021-09-09 16:33:11	→	azeem has joined #haskell
2021-09-09 16:35:14	ℹ	ub is now known as ubert
2021-09-09 16:37:34	[itchyjunk]	so say f :: A->B->C->D, applying right associativity f :: A->(B->(C->D)). I pass this function only A and the return of this would be a function g :: B->(C->D). If f had A and B, i would have a return of h :: C->D and in case f had A B and C, the return type would be D ?
2021-09-09 16:38:47	←	vysn has quit (Quit: WeeChat 3.2)
2021-09-09 16:39:07	enikar	[itchyjunk]: exactly. You are right.
2021-09-09 16:39:45	[itchyjunk]	this stuff is sloooowly making sense ;_;
2021-09-09 16:47:26	←	max22- has quit (Ping timeout: 260 seconds)
2021-09-09 16:49:55	→	Pickchea has joined #haskell
2021-09-09 16:51:53	←	azeem has quit (Read error: Connection reset by peer)
2021-09-09 16:52:16	carbolymer	anyone tried to "register" on haskell.love in the schedule tab? I wanted to build agenda for tomorrow, and it seems not possible
2021-09-09 16:53:15	→	azeem has joined #haskell
2021-09-09 16:55:56	→	fendor_ has joined #haskell
2021-09-09 16:56:27	←	amitnjha has quit (Quit: amitnjha)
2021-09-09 16:56:40	→	amitnjha has joined #haskell
2021-09-09 16:58:46	←	fendor has quit (Ping timeout: 265 seconds)
2021-09-09 16:59:08	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-09 16:59:18	→	MQ-17J has joined #haskell
2021-09-09 16:59:45	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-09 16:59:49	ℹ	fendor_ is now known as fendor
2021-09-09 17:00:32	→	dschrempf has joined #haskell
2021-09-09 17:02:23	←	alx741 has quit (Quit: alx741)
2021-09-09 17:02:54	→	MQ-17J has joined #haskell
2021-09-09 17:04:46	→	eggplantade has joined #haskell
2021-09-09 17:05:38	←	sneedsfeed has quit (Quit: Client closed)
2021-09-09 17:06:47	←	amitnjha has quit (Quit: amitnjha)
2021-09-09 17:07:09	→	amitnjha has joined #haskell
2021-09-09 17:08:15	→	sleblanc has joined #haskell
2021-09-09 17:09:34	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-09 17:12:42	←	seeg has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-09 17:13:24	→	seeg has joined #haskell
2021-09-09 17:13:39	→	shapr has joined #haskell
2021-09-09 17:17:12	←	bitdex has quit (Quit: = "")
2021-09-09 17:18:34	←	glguy has quit (Read error: Connection reset by peer)
2021-09-09 17:22:35	→	System123 has joined #haskell
2021-09-09 17:24:30	←	shapr has quit (Ping timeout: 260 seconds)
2021-09-09 17:28:42	→	burnsidesLlama has joined #haskell
2021-09-09 17:33:34	←	MQ-17J has quit (Ping timeout: 265 seconds)
2021-09-09 17:35:12	→	MQ-17J has joined #haskell
2021-09-09 17:37:08	→	hololeap has joined #haskell
2021-09-09 17:43:12	ℹ	irc: disconnected from server
2021-09-09 17:44:16	→	oxide has joined #haskell
2021-09-09 17:44:16	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-09 17:44:16	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-09 17:44:16	ℹ	Channel #haskell: 724 nicks (1 op, 0 voices, 723 normals)
2021-09-09 17:44:17	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-09 17:45:30	←	cheater has quit (Ping timeout: 260 seconds)
2021-09-09 17:46:56	→	raehik has joined #haskell
2021-09-09 17:50:47	←	yaroot has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-09 17:51:37	→	yaroot has joined #haskell
2021-09-09 17:52:19	→	glguy has joined #haskell
2021-09-09 17:55:05	←	Pickchea has quit (Ping timeout: 260 seconds)
2021-09-09 17:55:18	←	System123 has quit (Ping timeout: 260 seconds)
2021-09-09 17:57:00	→	Akronymus has joined #haskell
2021-09-09 18:03:22	→	Lycurgus has joined #haskell
2021-09-09 18:07:10	←	aratamizuki has quit (Remote host closed the connection)
2021-09-09 18:07:23	→	aratamizuki has joined #haskell
2021-09-09 18:10:07	←	tinhatcat has quit (Quit: Leaving)
2021-09-09 18:13:15	kuribas	How do you handle versioning of configuration?  For example, being able to test a previous version of the app without having to manually edit your configuration files...
2021-09-09 18:13:37	carbolymer	in git
2021-09-09 18:13:59	kuribas	I don't want to store configuration in git, because it contains passwords etc...
2021-09-09 18:14:12	carbolymer	then skip passwords, and store the rest in git
2021-09-09 18:14:16	carbolymer	encrypt passwords
2021-09-09 18:14:25	carbolymer	or store them in shit like hashicorp vault
2021-09-09 18:14:26	←	sleblanc has quit (Ping timeout: 260 seconds)
2021-09-09 18:15:01	kuribas	hmm
2021-09-09 18:15:21	kuribas	Also, my own configuration file may look different from the other developers.
2021-09-09 18:15:30	kuribas	Different database ports...
2021-09-09 18:16:01	→	max22- has joined #haskell
2021-09-09 18:16:21	merijn	kuribas: Support old formats indefinitely
2021-09-09 18:16:22	carbolymer	uhm, you can store your diff on a separate branch or git stash, and rebase it every time
2021-09-09 18:16:41	merijn	kuribas: If you change the format, make a migration codepath to "upgrade" old config files to the new code support
2021-09-09 18:17:09	kuribas	merijn: well, it's not upgrading which is problematic, but downgrading, for example if production has a different config file then testing.
2021-09-09 18:18:06	kuribas	merijn: ideally they would be backwards compatible.
2021-09-09 18:18:12	kuribas	I wonder if that can be done with dhall...
2021-09-09 18:18:30	kuribas	if dhall will skip fields it doesn't recognise
2021-09-09 18:19:19	merijn	kuribas: Presumably the production config is older then testing, so upgrading old configs to new is sufficient, no?
2021-09-09 18:20:00	kuribas	merijn: not if I am first testing, then need to hotfix a bug in production.
2021-09-09 18:21:49	→	slowButPresent has joined #haskell
2021-09-09 18:21:57	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-09 18:22:08	→	Vajb has joined #haskell
2021-09-09 18:24:59	→	pbrisbin has joined #haskell
2021-09-09 18:27:17	→	sedeki has joined #haskell
2021-09-09 18:27:18	→	Pickchea has joined #haskell
2021-09-09 18:27:46	←	sedeki has quit (Client Quit)
2021-09-09 18:28:24	←	lortabac has quit (Quit: WeeChat 2.8)
2021-09-09 18:29:04	←	max22- has quit (Quit: Leaving)
2021-09-09 18:30:42	←	burnsidesLlama has quit (Remote host closed the connection)
2021-09-09 18:33:38	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-09 18:34:17	→	Vajb has joined #haskell
2021-09-09 18:34:43	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-09 18:39:03	→	MQ-17J has joined #haskell
2021-09-09 18:39:05	←	orcus- has quit (Quit: ZNC 1.8.1 - https://znc.in)
2021-09-09 18:39:13	→	Franciman has joined #haskell
2021-09-09 18:39:24	→	orcus has joined #haskell
2021-09-09 18:39:45	Franciman	Hi all, is there a way to tell ghc to delete all compilation byproducts in the directory?
2021-09-09 18:39:50	Franciman	i.e. Main.hi Main.o etc
2021-09-09 18:40:09	→	burnsidesLlama has joined #haskell
2021-09-09 18:41:20	→	luc03 has joined #haskell
2021-09-09 18:43:22	←	MQ-17J has quit (Ping timeout: 260 seconds)
2021-09-09 18:43:43	→	MQ-17J has joined #haskell
2021-09-09 18:46:35	adamCS	Franciman: "cabal clean" might? but it also clears out dependencies that come from a git repo or local directory (via cabal.project). 
2021-09-09 18:47:19	adamCS	(and that might depend a bit on cabal version...)
2021-09-09 18:47:22	←	raehik has quit (Ping timeout: 252 seconds)
2021-09-09 18:47:48	Franciman	adamCS: I am not using cabal
2021-09-09 18:48:01	Franciman	I am using ghc directly
2021-09-09 18:48:02	←	dschrempf has quit (Ping timeout: 260 seconds)
2021-09-09 18:48:02	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-09 18:48:07	adamCS	ah. No idea, then.  Sorry!
2021-09-09 18:48:54	Franciman	np, thanks anyways
2021-09-09 18:49:01	←	lavaman has quit (Ping timeout: 252 seconds)
2021-09-09 18:49:10	→	raehik has joined #haskell
2021-09-09 18:49:22	←	hendursa1 has quit (Quit: hendursa1)
2021-09-09 18:49:33	→	max22- has joined #haskell
2021-09-09 18:50:55	→	hendursaga has joined #haskell
2021-09-09 18:51:33	kuribas	Is there a portable solution for config file location?
2021-09-09 18:53:10	carbolymer	what do you mean? https://wiki.archlinux.org/title/XDG_user_directories ?
2021-09-09 18:53:36	kuribas	carbolymer: does xdg work in windows?
2021-09-09 18:53:52	carbolymer	I highly doubt that
2021-09-09 18:53:56	kuribas	hmm, an environment variable would do ...
2021-09-09 18:54:51	→	cheater has joined #haskell
2021-09-09 18:55:17	←	aman has quit (Quit: aman)
2021-09-09 19:02:14	←	amitnjha has quit (Quit: amitnjha)
2021-09-09 19:02:35	→	amitnjha has joined #haskell
2021-09-09 19:02:56	←	xff0x has quit (Ping timeout: 252 seconds)
2021-09-09 19:03:41	→	xff0x has joined #haskell
2021-09-09 19:06:17	→	eggplantade has joined #haskell
2021-09-09 19:07:15	←	jpds has quit (Remote host closed the connection)
2021-09-09 19:07:39	→	jpds has joined #haskell
2021-09-09 19:09:56	→	MQ-17J has joined #haskell
2021-09-09 19:09:56	→	wroathe has joined #haskell
2021-09-09 19:09:57	←	wroathe has quit (Changing host)
2021-09-09 19:09:57	→	wroathe has joined #haskell
2021-09-09 19:10:54	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-09 19:11:03	←	jpds has quit (Remote host closed the connection)
2021-09-09 19:11:25	→	jpds has joined #haskell
2021-09-09 19:12:04	→	sim590 has joined #haskell
2021-09-09 19:12:37	←	amitnjha has quit (Quit: amitnjha)
2021-09-09 19:12:50	→	amitnjha has joined #haskell
2021-09-09 19:12:56	←	amitnjha has quit (Client Quit)
2021-09-09 19:13:21	→	amitnjha has joined #haskell
2021-09-09 19:14:28	←	burnsidesLlama has quit (Remote host closed the connection)
2021-09-09 19:14:55	←	aratamizuki has quit (Remote host closed the connection)
2021-09-09 19:15:27	→	aratamizuki has joined #haskell
2021-09-09 19:21:27	→	shriekingnoise has joined #haskell
2021-09-09 19:22:06	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-09 19:22:10	←	troydm has quit (Quit: What is Hope? That all of your wishes and all of your dreams come true? To turn back time because things were not supposed to happen like that (C) Rau Le Creuset)
2021-09-09 19:22:23	→	MQ-17J has joined #haskell
2021-09-09 19:22:45	→	troydm has joined #haskell
2021-09-09 19:25:14	→	Sgeo has joined #haskell
2021-09-09 19:29:53	←	xff0x has quit (Ping timeout: 252 seconds)
2021-09-09 19:31:38	→	peterhil has joined #haskell
2021-09-09 19:32:48	←	Pickchea has quit (Quit: Leaving)
2021-09-09 19:33:20	←	spruit11 has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-09-09 19:35:10	←	acidjnk_new has quit (Ping timeout: 260 seconds)
2021-09-09 19:35:27	→	jippiedoe has joined #haskell
2021-09-09 19:39:31	→	hnOsmium0001 has joined #haskell
2021-09-09 19:39:43	→	mcglk has joined #haskell
2021-09-09 19:40:37	→	xff0x has joined #haskell
2021-09-09 19:42:04	→	mangoiv has joined #haskell
2021-09-09 19:42:49	→	ec_ has joined #haskell
2021-09-09 19:46:20	→	slack1256 has joined #haskell
2021-09-09 19:46:21	←	mangoiv has quit (Client Quit)
2021-09-09 19:46:30	→	mangoiv has joined #haskell
2021-09-09 19:46:48	slack1256	Is it possible to specify a type family arity from the signature given by StandaloneKindSignatures ?
2021-09-09 19:47:12	dminuoso	Sure
2021-09-09 19:47:17	dminuoso	% :set -XStandaloneKindSignatures
2021-09-09 19:47:17	yahb	dminuoso: 
2021-09-09 19:47:44	dminuoso	% :set -XDataKinds
2021-09-09 19:47:45	yahb	dminuoso: 
2021-09-09 19:48:18	←	mangoiv has quit (Client Quit)
2021-09-09 19:48:27	→	mangoiv has joined #haskell
2021-09-09 19:49:05	dminuoso	% type F :: Bool -> Type; type family F x where F 'True = Int; F 'False = Char -- slack1256 
2021-09-09 19:49:06	yahb	dminuoso: 
2021-09-09 19:49:37	dminuoso	Is this what you meant?
2021-09-09 19:49:50	→	Pickchea has joined #haskell
2021-09-09 19:49:51	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-09 19:50:30	slack1256	Mmmm let me think if this is what I actually wanted.
2021-09-09 19:50:40	←	arahael has quit (Ping timeout: 252 seconds)
2021-09-09 19:54:42	→	burnsidesLlama has joined #haskell
2021-09-09 19:54:47	←	mangoiv has quit (Quit: WeeChat 3.2)
2021-09-09 19:55:05	→	mangoiv has joined #haskell
2021-09-09 19:55:36	luc03	dminuoso: Do you use % to indicate a ghci prompt?
2021-09-09 19:57:01	dminuoso	luc03: It's the trigger command for yahb 
2021-09-09 19:57:01	←	burnsidesLlama has quit (Read error: Connection reset by peer)
2021-09-09 19:57:06	→	burnside_ has joined #haskell
2021-09-09 19:57:32	→	myShoggoth has joined #haskell
2021-09-09 19:58:05	←	Akronymus has quit (Quit: Client closed)
2021-09-09 19:58:16	→	Akronymus has joined #haskell
2021-09-09 20:00:51	←	mangoiv has quit (Quit: WeeChat 3.2)
2021-09-09 20:01:00	→	mangoiv has joined #haskell
2021-09-09 20:01:29	←	mangoiv has quit (Client Quit)
2021-09-09 20:01:37	→	mangoiv has joined #haskell
2021-09-09 20:02:12	→	waleee has joined #haskell
2021-09-09 20:02:35	→	spruit11 has joined #haskell
2021-09-09 20:06:24	→	ec_ has joined #haskell
2021-09-09 20:09:58	→	tlaxkit has joined #haskell
2021-09-09 20:15:02	←	phma has quit (Read error: Connection reset by peer)
2021-09-09 20:15:04	←	burnside_ has quit (Remote host closed the connection)
2021-09-09 20:15:29	←	wroathe has quit (Ping timeout: 252 seconds)
2021-09-09 20:15:52	→	phma has joined #haskell
2021-09-09 20:16:58	dminuoso	Oh I can see how that might not have been obvious.
2021-09-09 20:17:07	dminuoso	% foldr (+) 0 [1,2,3,4,5] -- luc03 
2021-09-09 20:17:08	yahb	dminuoso: 15
2021-09-09 20:17:45	dminuoso	yahb is just a GHCi bot, if you write a message starting with % yahb will run everything that follows in a GHCi session
2021-09-09 20:17:51	dminuoso	And return the output
2021-09-09 20:20:24	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-09 20:21:28	→	pavonia has joined #haskell
2021-09-09 20:24:20	←	Pickchea has quit (Ping timeout: 252 seconds)
2021-09-09 20:25:34	←	xff0x has quit (Ping timeout: 260 seconds)
2021-09-09 20:25:42	←	mangoiv has quit (Quit: WeeChat 3.2)
2021-09-09 20:25:50	→	mangoiv has joined #haskell
2021-09-09 20:26:29	→	xff0x has joined #haskell
2021-09-09 20:26:56	slack1256	dminuoso: https://gist.github.com/RubenAstudillo/6fb47a6dfe9238987c292c1894e2bfbe
2021-09-09 20:27:16	←	mangoiv has quit (Client Quit)
2021-09-09 20:27:39	slack1256	I think my problem is with using partially applied type families. If you have time, can you read that gist?
2021-09-09 20:27:43	→	mangoiv has joined #haskell
2021-09-09 20:28:15	←	mangoiv has quit (Client Quit)
2021-09-09 20:29:14	→	mangoiv has joined #haskell
2021-09-09 20:29:44	→	sneedsfeed has joined #haskell
2021-09-09 20:30:14	←	Vajb has quit (Ping timeout: 260 seconds)
2021-09-09 20:30:46	→	aman has joined #haskell
2021-09-09 20:39:36	←	mangoiv has quit (Quit: WeeChat 3.2)
2021-09-09 20:39:49	→	mangoiv has joined #haskell
2021-09-09 20:39:51	→	Vajb has joined #haskell
2021-09-09 20:40:13	→	vysn has joined #haskell
2021-09-09 20:40:30	→	kstuart has joined #haskell
2021-09-09 20:41:23	←	mangoiv has quit (Client Quit)
2021-09-09 20:41:27	merijn	slack1256: wait
2021-09-09 20:41:39	merijn	slack1256: Why are you defining a type synonym *and* type with the same name?
2021-09-09 20:41:52	merijn	You're defining Sigma twice
2021-09-09 20:42:09	slack1256	StandaloneKindSignatures :-)
2021-09-09 20:42:13	merijn	Or is this fancy new typefamilies syntax they changed when I wasn't looking?
2021-09-09 20:42:24	slack1256	merijn: The future is now!
2021-09-09 20:42:41	merijn	Why not just define them in place? >.>
2021-09-09 20:43:22	slack1256	It is an example, I wanted to try my hand at SAKS. Also, to see if they worked with type families.
2021-09-09 20:43:43	←	Andrew has quit (Ping timeout: 250 seconds)
2021-09-09 20:43:43	slack1256	But sure, on a real closed type families, there is no much sense to use SAKS.
2021-09-09 20:44:25	→	AndrewYu has joined #haskell
2021-09-09 20:46:09	←	Akronymus has quit (Quit: Client closed)
2021-09-09 20:47:16	→	Akronymus has joined #haskell
2021-09-09 20:48:00	→	mangoiv has joined #haskell
2021-09-09 20:48:15	→	burnsidesLlama has joined #haskell
2021-09-09 20:48:38	→	zmt00 has joined #haskell
2021-09-09 20:49:30	→	burnside_ has joined #haskell
2021-09-09 20:49:31	←	burnsidesLlama has quit (Read error: Connection reset by peer)
2021-09-09 20:50:29	←	Akronymus has quit (Client Quit)
2021-09-09 20:52:33	→	eggplantade has joined #haskell
2021-09-09 20:53:26	←	amitnjha has quit (Quit: amitnjha)
2021-09-09 20:53:47	→	amitnjha has joined #haskell
2021-09-09 20:54:43	→	mikoto-chan has joined #haskell
2021-09-09 20:54:47	→	Pickchea has joined #haskell
2021-09-09 20:56:28	←	ChaiTRex has quit (Remote host closed the connection)
2021-09-09 20:56:53	→	ChaiTRex has joined #haskell
2021-09-09 21:00:38	←	mangoiv has quit (Quit: WeeChat 3.2)
2021-09-09 21:00:47	←	mc47 has quit (Remote host closed the connection)
2021-09-09 21:00:54	→	mangoiv has joined #haskell
2021-09-09 21:01:52	←	jippiedoe has quit (Quit: Leaving)
2021-09-09 21:03:51	→	brandonh has joined #haskell
2021-09-09 21:07:18	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-09 21:09:37	←	favonia has quit (Ping timeout: 265 seconds)
2021-09-09 21:10:44	←	chele has quit (Remote host closed the connection)
2021-09-09 21:10:52	→	enoq has joined #haskell
2021-09-09 21:11:33	←	Pickchea has quit (Ping timeout: 265 seconds)
2021-09-09 21:12:49	→	System123 has joined #haskell
2021-09-09 21:13:00	←	System123 has quit (Quit: Leaving...)
2021-09-09 21:14:53	monochrom	https://discourse.haskell.org/t/new-horizons-for-spj/3099?u=taylorfausak
2021-09-09 21:15:32	monochrom	This just before the Haskell Love conference.  Tomorrow everyone will be overwhelming him during his keynote speech!
2021-09-09 21:15:39	→	System123 has joined #haskell
2021-09-09 21:16:13	←	vysn has quit (Quit: WeeChat 3.2)
2021-09-09 21:17:53	→	Vajb has joined #haskell
2021-09-09 21:19:53	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-09 21:20:31	→	Vajb has joined #haskell
2021-09-09 21:22:13	pavonia	Is this a fancy mailing list archive or a separate board?
2021-09-09 21:22:26	monochrom	separate board
2021-09-09 21:22:50	pavonia	Interesting, never heard of it
2021-09-09 21:23:26	←	MQ-17J has quit (Ping timeout: 260 seconds)
2021-09-09 21:23:53	→	neo1 has joined #haskell
2021-09-09 21:24:27	←	[itchyjunk] has quit (Read error: Connection reset by peer)
2021-09-09 21:24:37	geekosaur	it's fairly recent, part of the new Haskell Foundation stuff
2021-09-09 21:27:13	→	amahl has joined #haskell
2021-09-09 21:28:04	←	eggplantade has quit (Remote host closed the connection)
2021-09-09 21:31:11	←	burnside_ has quit (Remote host closed the connection)
2021-09-09 21:31:28	→	MQ-17J has joined #haskell
2021-09-09 21:31:50	←	Lycurgus has quit (Ping timeout: 260 seconds)
2021-09-09 21:31:53	←	cfricke has quit (Quit: WeeChat 3.2)
2021-09-09 21:31:58	→	eggplantade has joined #haskell
2021-09-09 21:32:24	→	shapr has joined #haskell
2021-09-09 21:32:43	Hecate	omfg https://github.com/zkat/miette
2021-09-09 21:32:48	→	hexfive has joined #haskell
2021-09-09 21:32:49	←	hexfive has quit (Client Quit)
2021-09-09 21:34:47	←	System123 has quit (Remote host closed the connection)
2021-09-09 21:36:31	←	luc03 has quit (Quit: WeeChat 3.0.1)
2021-09-09 21:37:51	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-09 21:38:09	→	tzh has joined #haskell
2021-09-09 21:38:35	→	Vajb has joined #haskell
2021-09-09 21:39:55	←	geekosaur has quit (Remote host closed the connection)
2021-09-09 21:40:41	→	ec_ has joined #haskell
2021-09-09 21:40:44	→	geekosaur has joined #haskell
2021-09-09 21:41:56	→	vysn has joined #haskell
2021-09-09 21:42:32	←	azeem has quit (Read error: Connection reset by peer)
2021-09-09 21:43:12	→	azeem has joined #haskell
2021-09-09 21:43:49	←	amitnjha has quit (Quit: amitnjha)
2021-09-09 21:44:06	→	amitnjha has joined #haskell
2021-09-09 21:44:14	gentauro	monochrom: doesn't SPJ "own" part of FP Complete? Perhaps he will join there?
2021-09-09 21:44:41	⚡	gentauro reference: https://www.fpcomplete.com/blog/2013/01/why-im-investing-in-fp-complete/
2021-09-09 21:45:45	gentauro	perhaps his position will be BDFL of Haskell?
2021-09-09 21:48:23	→	arahael has joined #haskell
2021-09-09 21:49:08	→	wroathe has joined #haskell
2021-09-09 21:49:08	←	wroathe has quit (Changing host)
2021-09-09 21:49:08	→	wroathe has joined #haskell
2021-09-09 21:49:43	Hecate	gentauro: he's already in such a place through the GHC Steering Committee :)
2021-09-09 21:52:09	←	abhixec has quit (Ping timeout: 265 seconds)
2021-09-09 21:52:13	←	martin02 has quit (Ping timeout: 252 seconds)
2021-09-09 21:53:38	→	martin02 has joined #haskell
2021-09-09 21:54:39	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-09 21:58:00	←	eggplantade has quit (Remote host closed the connection)
2021-09-09 21:58:11	←	slack1256 has quit (Remote host closed the connection)
2021-09-09 21:58:15	→	cafkafk has joined #haskell
2021-09-09 21:58:46	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-09 21:59:18	→	favonia has joined #haskell
2021-09-09 21:59:48	→	eggplantade has joined #haskell
2021-09-09 22:00:03	→	merijn has joined #haskell
2021-09-09 22:01:29	→	ec_ has joined #haskell
2021-09-09 22:01:32	→	abhixec has joined #haskell
2021-09-09 22:01:50	←	shapr has quit (Ping timeout: 260 seconds)
2021-09-09 22:02:54	→	glguy_ has joined #haskell
2021-09-09 22:04:16	←	glguy has quit (Read error: Connection reset by peer)
2021-09-09 22:04:39	→	proofofkeags has joined #haskell
2021-09-09 22:04:54	→	shapr has joined #haskell
2021-09-09 22:05:00	→	Erutuon has joined #haskell
2021-09-09 22:06:15	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-09 22:07:36	→	Vajb has joined #haskell
2021-09-09 22:07:39	monochrom	"imperator" is better.
2021-09-09 22:08:14	←	merijn has quit (Ping timeout: 260 seconds)
2021-09-09 22:09:08	→	burnsidesLlama has joined #haskell
2021-09-09 22:11:59	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-09 22:12:38	→	Vajb has joined #haskell
2021-09-09 22:13:54	←	burnsidesLlama has quit (Ping timeout: 265 seconds)
2021-09-09 22:14:42	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-09 22:15:00	→	MQ-17J has joined #haskell
2021-09-09 22:18:29	←	aman has quit (Quit: aman)
2021-09-09 22:19:12	←	amitnjha has quit (Quit: amitnjha)
2021-09-09 22:19:25	→	amitnjha has joined #haskell
2021-09-09 22:21:41	←	hegstal has quit (Remote host closed the connection)
2021-09-09 22:22:07	←	MQ-17J has quit (Ping timeout: 265 seconds)
2021-09-09 22:23:04	ℹ	glguy_ is now known as glguy
2021-09-09 22:24:50	→	aman has joined #haskell
2021-09-09 22:26:30	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-09 22:26:35	→	MQ-17J has joined #haskell
2021-09-09 22:27:12	←	sneedsfeed has quit (Ping timeout: 256 seconds)
2021-09-09 22:29:53	←	hrnz has quit (Quit: das ist mir zu bld hier; bb)
2021-09-09 22:30:38	→	hrnz has joined #haskell
2021-09-09 22:31:19	←	hrnz has quit (Client Quit)
2021-09-09 22:31:48	→	hrnz has joined #haskell
2021-09-09 22:33:28	maerwald	SPJ working on stack?
2021-09-09 22:33:32	→	ec_ has joined #haskell
2021-09-09 22:34:04	→	zebrag has joined #haskell
2021-09-09 22:38:07	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-09 22:38:49	→	Vajb has joined #haskell
2021-09-09 22:38:53	Hecate	maerwald: uh?
2021-09-09 22:39:02	Hecate	why are you giving me heart attacks like that
2021-09-09 22:39:12	←	hnOsmium0001 has quit (Quit: Connection closed for inactivity)
2021-09-09 22:39:42	monochrom	I thought gentauro said it first.
2021-09-09 22:40:00	monochrom	You didn't have a heart attack back then. Why now?
2021-09-09 22:40:00	→	Pickchea has joined #haskell
2021-09-09 22:40:15	geekosaur	I thought FPC had moved stack to community support more or less anyway
2021-09-09 22:41:58	maerwald	geekosaur: you mean the issue tracker is dead? yeah
2021-09-09 22:44:47	maerwald	I've been commenting on it for the past 2 weeks and fixed several bugs. Generally, there's not response to both issues and PRs, unless e.g. the metadata is broken.
2021-09-09 22:46:38	→	lavaman has joined #haskell
2021-09-09 22:46:55	→	econo has joined #haskell
2021-09-09 22:47:50	←	tureba has quit (Ping timeout: 252 seconds)
2021-09-09 22:48:17	←	nshepperd2 has quit (Quit: Ping timeout (120 seconds))
2021-09-09 22:48:27	→	nshepperd2 has joined #haskell
2021-09-09 22:48:28	→	abraham has joined #haskell
2021-09-09 22:50:17	maerwald	you may ask why... well, because I'm getting stack bug reports now.
2021-09-09 22:51:07	←	lavaman has quit (Ping timeout: 265 seconds)
2021-09-09 22:51:40	←	shapr has quit (Remote host closed the connection)
2021-09-09 22:51:54	geekosaur	you can unsubscribe
2021-09-09 22:52:26	monochrom	Or we can name you Imperator of Stack so you can act on the bug reports. >:)
2021-09-09 22:52:32	geekosaur	auto-subscribing people to new issues is imo one of the weirder github-ism
2021-09-09 22:53:10	geekosaur	*s
2021-09-09 22:53:19	monochrom	Interesting. But I would think github learned it from Amazon.
2021-09-09 22:54:47	monochrom	"You looked at a Logitech keyboard. We think you will be interested in all kinds of RGB gaming peripherals."
2021-09-09 22:55:20	monochrom	"You submitted a bug report. We think you will be interested in all kinds of bug reports."
2021-09-09 22:55:50	←	Pickchea has quit (Ping timeout: 260 seconds)
2021-09-09 22:55:57	←	wroathe has quit (Ping timeout: 265 seconds)
2021-09-09 22:58:26	→	jangid has joined #haskell
2021-09-09 22:58:31	maerwald	eh, worst thing is if you work on github hosted projects and can't distinguish the 200+ notifications from useful bug reports on your open source libs anymore
2021-09-09 23:02:14	←	Vajb has quit (Ping timeout: 265 seconds)
2021-09-09 23:05:17	maerwald	here... ppl complaining about emails and mailing lists
2021-09-09 23:05:26	maerwald	at least there I can have a proper filter
2021-09-09 23:05:38	←	eggplantade has quit (Remote host closed the connection)
2021-09-09 23:05:48	jangid	The type of '(<)' is a function and type of 'compare' is a function. Then why compare works with backticks in infix format but this doesn't work: 4 `(<)` 5
2021-09-09 23:05:49	jangid	 
2021-09-09 23:06:17	jangid	what is the rule for backtics?
2021-09-09 23:06:54	→	justsomeguy has joined #haskell
2021-09-09 23:07:44	dsal	Functions made up of symbols are infix by default and functions made up of letters are prefix by default.
2021-09-09 23:07:52	dsal	> (<) 4 5
2021-09-09 23:07:54	lambdabot	 True
2021-09-09 23:07:58	dsal	> 4 `compare` 5
2021-09-09 23:08:00	lambdabot	 LT
2021-09-09 23:08:42	dsal	Backticks allow you to use a prefix function infix and parens let you use an infix function prefix.
2021-09-09 23:08:58	dsal	(hand wavy wording)
2021-09-09 23:09:23	mangoiv	I think his question is specifically about why `(<)` doesn't work (as the brackets make "<" a prefix function)
2021-09-09 23:09:25	mangoiv	m
2021-09-09 23:09:40	mangoiv	*their
2021-09-09 23:10:53	dolio	Because backticks are for making alphabetical names infix.
2021-09-09 23:11:03	awpr	there are backquotes there, but some IRC clients are interpreting them as formatting; I think the question is why backquotes don't undo the effect of parens
2021-09-09 23:11:38	awpr	and I think the answer is just that the syntax is defined so that backquotes around alphanumeric-style identifiers create an infix operator
2021-09-09 23:11:59	awpr	as opposed to backquotes around "anything that would be a prefix function"
2021-09-09 23:12:29	awpr	i.e., that's just how it is
2021-09-09 23:12:39	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-09 23:14:16	→	Vajb has joined #haskell
2021-09-09 23:19:05	←	dhouthoo has quit (Quit: WeeChat 3.2)
2021-09-09 23:19:37	←	favonia has quit (Ping timeout: 252 seconds)
2021-09-09 23:19:44	→	ec_ has joined #haskell
2021-09-09 23:20:03	jangid	yes, I want to why backticks doesn't under the effect of parens.
2021-09-09 23:20:21	jangid	I mean doesn't undo the effect of parens
2021-09-09 23:20:49	awpr	that's just how the grammar is defined.  (<) is an expression but not an identifier, but backquotes turn identifiers into infix operators
2021-09-09 23:21:41	jangid	but calling :t with (<) shows it as a function
2021-09-09 23:21:53	awpr	it sure is.  but it's not an identifier
2021-09-09 23:22:00	mangoiv	well, it is a function in any case.
2021-09-09 23:22:04	awpr	this is about the Haskell syntax, not the type system
2021-09-09 23:22:31	jangid	hmm, I think I am beginning to understand. 
2021-09-09 23:23:51	jangid	everything is function if we check types :t 5 reports 5 :: Num p => p
2021-09-09 23:24:40	→	eggplantade has joined #haskell
2021-09-09 23:24:46	dminuoso	It's not a function.
2021-09-09 23:24:58	iqubic	No actually, that's just a single value.
2021-09-09 23:25:14	awpr	it's got nothing to do with whether it's a function, you could just as well do "let x = True in 2 `x` 2".  it'd be a type error, but still parsed as an infix operator
2021-09-09 23:25:23	→	merijn has joined #haskell
2021-09-09 23:25:32	awpr	https://gitlab.haskell.org/ghc/ghc/-/blob/master/compiler/GHC/Parser.y#L3656 is where the grammar describes the backquote syntax; it specifically wants a "varid" inside the backquotes, not an expression
2021-09-09 23:25:35	dminuoso	While, in the implementation, that might be compiled into being parametrized over a dictionary, that's an implementation detail and might not even happen.
2021-09-09 23:26:03	iqubic	But actually, the way that number literals work is that haskell turns your 5 into "fromIntergral 5"
2021-09-09 23:26:29	awpr	a "varid" is the alphanumeric-style identifier I was talking about earlier, basically a name made of text rather than symbols
2021-09-09 23:27:14	dolio	Just like you're not allowed to write: (`isInfixOf`)
2021-09-09 23:27:25	←	kuribas has quit (Remote host closed the connection)
2021-09-09 23:28:05	jangid	dolio: exactly. that's how the grammar is.
2021-09-09 23:28:07	→	kayprish has joined #haskell
2021-09-09 23:28:18	jangid	thnks for help, friends
2021-09-09 23:28:48	awpr	I guess to get a bit more into "why", if you wanted backquotes to work on parenthesized operator names, you might define them as containing an expression rather than a varid.  but then you'd have a problem: backquotes aren't matched pairs, so there's an ambiguity where the ending backquote could get parsed as another nested backquote operator.  incoming GHC proposal: add guillemets as an operator delimiter that contains expressions 
2021-09-09 23:28:48	awpr	:)
2021-09-09 23:28:49	mangoiv	iqubic: really? That's interesting, why does it parse it as an int in the first place? It could just parse it as "some number" as that's what it's kept as anyways? 
2021-09-09 23:29:29	awpr	iqubic: unless you're using https://hackage.haskell.org/package/dependent-literals-plugin :P
2021-09-09 23:29:29	iqubic	:t fromIntegral
2021-09-09 23:29:31	lambdabot	(Integral a, Num b) => a -> b
2021-09-09 23:29:50	→	chisui has joined #haskell
2021-09-09 23:30:22	←	brandonh has quit (Ping timeout: 260 seconds)
2021-09-09 23:31:06	iqubic	It's not actually parsing it as an Int.
2021-09-09 23:32:29	mangoiv	Can you elaborate? Cause I think I didn't understand yet. If it isn't parsed to an Int, why does it have to use fromIntegral then? 
2021-09-09 23:34:32	←	amitnjha has quit (Quit: amitnjha)
2021-09-09 23:34:46	→	amitnjha has joined #haskell
2021-09-09 23:35:00	iqubic	I'm both surprised and pleased that DataKinds and NumericUnderscores work well together, letting me use "2_147_483_647" as a thing of kind Nat.
2021-09-09 23:35:10	→	beka has joined #haskell
2021-09-09 23:35:32	←	abraham has quit (Quit: Textual IRC Client: www.textualapp.com)
2021-09-09 23:35:37	→	System123 has joined #haskell
2021-09-09 23:36:18	justsomeguy	I have a linux filepath, and want to find out the UID or user name of the account that owns it. What module has functions for stuff like that?
2021-09-09 23:37:43	koala_man	unix presumably. System.Posix.Files
2021-09-09 23:37:43	justsomeguy	(I tried searching for getUser, getOwner, and a few different type signature on Hoogle but didn't come up with anything useful.)
2021-09-09 23:38:02	←	enoq has quit (Quit: enoq)
2021-09-09 23:38:02	koala_man	fileOwner :: FileStatus -> UserID
2021-09-09 23:38:14	awpr	mangoiv: from GHC's perspective the literal value is an Integer, and the interpretation of that Integer as whatever particular numeric type is up to Haskell library code; that way libraries can define custom numeric types that work with integral literals by adding their own Num instance, without needing to modify the compiler to know about it.  `fromInteger` is the hook that GHC uses to talk to the library side, so it turns 
2021-09-09 23:38:15	awpr	source-level literals `42` into `fromInteger 42`, which ends up calling whichever implementation is appropriate, including custom numeric types
2021-09-09 23:38:28	←	mangoiv has quit (Quit: WeeChat 3.2)
2021-09-09 23:38:45	→	mangoiv has joined #haskell
2021-09-09 23:38:54	→	favonia has joined #haskell
2021-09-09 23:39:15	awpr	most of the time that gets optimized into something like `I# 42#` by inlining and simplifying and such, so it's almost like the compiler has built-in knowledge of every custom numeric type that will ever exist
2021-09-09 23:39:25	←	abhixec has quit (Ping timeout: 252 seconds)
2021-09-09 23:40:10	←	System123 has quit (Ping timeout: 260 seconds)
2021-09-09 23:40:20	←	mangoiv has quit (Client Quit)
2021-09-09 23:40:33	→	mangoiv has joined #haskell
2021-09-09 23:41:55	justsomeguy	This seems to work in ghci ...  s <- getFileStatus "testdir"; print $ fileOwner s
2021-09-09 23:42:25	justsomeguy	Thanks for pointing me in the right direction, koala_man 
2021-09-09 23:43:33	justsomeguy	I should probably just do a search for likely module names from packages included with ghc and base next time.
2021-09-09 23:43:57	jangid	 (Integral a, Num b) => a -> b i.e. fromIntegral parses a as integer and converts it into more generic number so that it is easy to put it in expressions with Floating.
2021-09-09 23:44:59	awpr	careful not to mix up fromIntegral and fromInteger -- `fromIntegral = fromInteger . toInteger`
2021-09-09 23:45:16	awpr	:t (fromInteger, toInteger, fromIntegral)
2021-09-09 23:45:17	lambdabot	(Integral a1, Integral a2, Num a3, Num b) => (Integer -> a3, a1 -> Integer, a2 -> b)
2021-09-09 23:45:36	awpr	oof, that formatting is less useful than I had hoped
2021-09-09 23:46:51	awpr	anyway fromInteger is the one GHC uses internally for integral literals, and fromIntegral is the one you'd usually use as a Haskell user for converting "whatever inty type" to "whatever numeric type"
2021-09-09 23:47:07	monochrom	I# 42# means that the compiler knows it's Int.
2021-09-09 23:47:42	awpr	yep, I'd contend that most of the time you use a literal it's for a statically known type
2021-09-09 23:49:29	→	brandonh has joined #haskell
2021-09-09 23:51:00	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-09 23:54:13	mangoiv	Thanks awpr for the for the extensive answer! 
2021-09-09 23:54:38	←	justsomeguy has quit (Ping timeout: 260 seconds)
2021-09-09 23:56:19	→	wroathe has joined #haskell
2021-09-09 23:56:20	←	wroathe has quit (Changing host)
2021-09-09 23:56:20	→	wroathe has joined #haskell
2021-09-09 23:57:50	→	ec_ has joined #haskell
2021-09-09 23:58:17	_bin	What's the best way to retry a GET with wreq until it succeeds if I hit a 5xx error or similar?
2021-09-09 23:58:20	→	lavaman has joined #haskell
2021-09-09 23:59:46	←	merijn has quit (Ping timeout: 260 seconds)
2021-09-10 00:00:24	iqubic	How does fromInteger work for Word16? Does it just take the 16 lowest bits of the given Integer?
2021-09-10 00:00:53	→	hnOsmium0001 has joined #haskell
2021-09-10 00:01:16	→	asivitz has joined #haskell
2021-09-10 00:01:28	awpr	generally fromInteger overflows, or sometimes throws.  I don't know of any that saturate
2021-09-10 00:01:38	awpr	> fromInteger 65537 :: Word16
2021-09-10 00:01:40	lambdabot	 1
2021-09-10 00:02:06	awpr	but GHC has warnings for out-of-range literals for a few types it has actual built-in knowledge of
2021-09-10 00:02:19	awpr	> 65537 :: Word16
2021-09-10 00:02:21	lambdabot	 1
2021-09-10 00:02:43	awpr	hmm, lambdabot doesn't show them, but it's `-Woverflowed-literals`
2021-09-10 00:03:06	→	justsomeguy has joined #haskell
2021-09-10 00:03:09	iqubic	What I want is a way to convert an Integer to a Word16 by just taking the lowest 16 bits. How can I do that?
2021-09-10 00:03:36	awpr	that should have the same effect as overflowing, i.e. fromInteger does that
2021-09-10 00:04:00	iqubic	Cool!
2021-09-10 00:04:47	←	ezzieyguywuf has quit (Ping timeout: 250 seconds)
2021-09-10 00:05:59	←	jangid has quit (Quit: day over)
2021-09-10 00:07:54	→	roboguy_ has joined #haskell
2021-09-10 00:08:02	→	vicfred has joined #haskell
2021-09-10 00:09:25	←	dyeplexer has quit (Remote host closed the connection)
2021-09-10 00:11:20	←	wroathe has quit (Ping timeout: 260 seconds)
2021-09-10 00:11:25	→	ephemient has joined #haskell
2021-09-10 00:12:20	←	eggplantade has quit (Remote host closed the connection)
2021-09-10 00:14:58	←	lavaman has quit (Remote host closed the connection)
2021-09-10 00:17:06	←	kstuart has quit (Remote host closed the connection)
2021-09-10 00:17:29	→	alx741 has joined #haskell
2021-09-10 00:19:22	→	dschrempf has joined #haskell
2021-09-10 00:19:24	→	mmohammadi9812 has joined #haskell
2021-09-10 00:26:22	→	abraham has joined #haskell
2021-09-10 00:27:12	←	max22- has quit (Quit: Leaving)
2021-09-10 00:29:25	←	geekosaur has quit (Remote host closed the connection)
2021-09-10 00:30:02	→	thyriaen has joined #haskell
2021-09-10 00:31:14	←	alx741 has quit (Quit: alx741)
2021-09-10 00:31:41	→	geekosaur has joined #haskell
2021-09-10 00:33:56	→	merijn has joined #haskell
2021-09-10 00:35:45	←	aman has quit (Quit: aman)
2021-09-10 00:37:09	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-10 00:38:54	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-10 00:41:26	←	mmohammadi9812 has quit (Killed (NickServ (GHOST command used by mohammadi9812m!~Mohammad@2.178.201.78)))
2021-09-10 00:41:39	_bin	To clarify the above, I am attempting to make a number of requests and sometimes receive errors (timeouts, 5xx, etc.)  I'd like to simply repeat the request indefinitely until I get a successful response; how should I go about doing this?
2021-09-10 00:41:46	→	mmohammadi9812 has joined #haskell
2021-09-10 00:42:16	maerwald	_bin: there's a retry strategies thing
2021-09-10 00:42:18	maerwald	sec
2021-09-10 00:43:02	maerwald	_bin: https://hackage.haskell.org/package/retry-0.9.0.0/docs/Control-Retry.html
2021-09-10 00:43:10	→	eggplantade has joined #haskell
2021-09-10 00:43:11	→	_ht has joined #haskell
2021-09-10 00:43:12	→	System123 has joined #haskell
2021-09-10 00:43:20	←	brandonh has quit (Quit: brandonh)
2021-09-10 00:43:30	maerwald	I use fullJitterBackoff http://www.awsarchitectureblog.com/2015/03/backoff.html
2021-09-10 00:44:02	→	ec_ has joined #haskell
2021-09-10 00:44:21	←	phma has quit (Read error: Connection reset by peer)
2021-09-10 00:45:12	→	phma has joined #haskell
2021-09-10 00:45:25	→	max22- has joined #haskell
2021-09-10 00:49:58	→	abhixec has joined #haskell
2021-09-10 00:50:29	_bin	maerwald: Thanks, this looks promising.
2021-09-10 00:54:10	iqubic	@pl \m -> m `mod` 5 == 0
2021-09-10 00:54:10	lambdabot	(0 ==) . (`mod` 5)
2021-09-10 00:55:21	→	Guest|41 has joined #haskell
2021-09-10 00:56:30	→	Axma21295 has joined #haskell
2021-09-10 00:58:07	←	Axman6 has quit (Ping timeout: 260 seconds)
2021-09-10 00:58:19	→	System12_ has joined #haskell
2021-09-10 01:00:22	iqubic	I think I'll just use the former version.
2021-09-10 01:00:37	teddyc	lol
2021-09-10 01:01:21	monochrom	This one is not too bad.
2021-09-10 01:01:37	←	System123 has quit (Ping timeout: 265 seconds)
2021-09-10 01:01:51	monochrom	But by the time you get "(g . ) . (. f)" then yeah, use a pointful lambda.
2021-09-10 01:02:11	maerwald	:t (.).(.)
2021-09-10 01:02:12	lambdabot	(b -> c) -> (a1 -> a2 -> b) -> a1 -> a2 -> c
2021-09-10 01:02:44	monochrom	Unfortunately, playing with category theory too much does lead to "(g . ) . (. f)"
2021-09-10 01:03:40	awpr	dimap @(->)?
2021-09-10 01:04:20	iqubic	monochrom: I'm actually just using this: "divisible divisor = filter (\n -> n `mod` divisor == 0)" I take a list of numbers and return the same list, but with only the values divisible by divisor.
2021-09-10 01:04:59	monochrom	Mathematicians think they have mitigated it with "g_{*} . f^{*}".
2021-09-10 01:04:59	iqubic	I'm not sure that making the lambda into a pointfree version will be clearer.
2021-09-10 01:05:30	monochrom	That only caused the bigger problem that no one remembers whether g_{*} means (g .) or (. g).
2021-09-10 01:05:45	monochrom	In fact, I don't either. I might have mixed them up too.
2021-09-10 01:05:53	→	tfeb has joined #haskell
2021-09-10 01:06:02	iqubic	monochrom: I don't know which it is and I don't care.
2021-09-10 01:06:20	iqubic	Either way (g .) and (. g) are weird to think about.
2021-09-10 01:06:27	→	drguildo has joined #haskell
2021-09-10 01:06:32	roboguy_	monochrom: IIRC, different sources have different conventions on those names, to make it even more confusing
2021-09-10 01:07:17	monochrom	iqubic: I was not talking to you.
2021-09-10 01:07:17	←	neo1 has quit (Read error: Connection reset by peer)
2021-09-10 01:07:25	iqubic	Ah. I'm sorry.
2021-09-10 01:07:43	monochrom	I don't care about your divisible either.
2021-09-10 01:07:46	justsomeguy	If I want to find out what a file handle is in depth, what it's structure is and what things it keeps track of, where would I read about it? Should I be consulting the C stdlib documentation?
2021-09-10 01:08:04	→	neo1 has joined #haskell
2021-09-10 01:08:35	ℹ	irc: disconnected from server
2021-09-10 11:41:50	→	oxide has joined #haskell
2021-09-10 11:41:50	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-10 11:41:50	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-10 11:41:50	ℹ	Channel #haskell: 724 nicks (1 op, 0 voices, 723 normals)
2021-09-10 11:41:50	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-10 11:41:57	→	max22- has joined #haskell
2021-09-10 11:42:29	→	Neuromancer has joined #haskell
2021-09-10 11:45:16	dsal	And if you want to get weird, you can do `pressFor` with fewer passes by remembering the position you found the char in right away instead of noting that you found it and then counting back to that list position and searching again:  `pressFor (Keypad keys) c = listToMaybe . catMaybes $ zipWith (\k i -> (i,) . succ <$> elemIndex c k) keys [0..]`
2021-09-10 11:45:22	←	jakalx has left #haskell (Error from remote client)
2021-09-10 11:48:27	→	dyeplexer has joined #haskell
2021-09-10 11:49:38	→	falafel has joined #haskell
2021-09-10 11:50:37	→	Lycurgus has joined #haskell
2021-09-10 11:52:34	→	fefufo[m] has joined #haskell
2021-09-10 11:52:47	→	Pickchea has joined #haskell
2021-09-10 11:57:22	←	amitnjha has quit (Quit: amitnjha)
2021-09-10 11:57:37	→	amitnjha has joined #haskell
2021-09-10 12:02:42	←	amitnjha has quit (Quit: amitnjha)
2021-09-10 12:02:56	→	amitnjha has joined #haskell
2021-09-10 12:05:17	←	Sgeo has quit (Read error: Connection reset by peer)
2021-09-10 12:05:34	ℹ	irc: disconnected from server
2021-09-10 16:49:58	→	oxide has joined #haskell
2021-09-10 16:49:58	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-10 16:49:58	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-10 16:49:58	ℹ	Channel #haskell: 733 nicks (1 op, 0 voices, 732 normals)
2021-09-10 16:49:58	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-10 16:50:28	raehik	but for a project that uses hmatrix as a dep, I need a cabal.project and I need to use Windows-style dirs (C:\x\y\z)
2021-09-10 16:50:41	tomsmeding	isn't that because ghc uses mingw internally, and that has a linux-path-to-windows-path conversion thing?
2021-09-10 16:51:16	tomsmeding	raehik: ghc versions?
2021-09-10 16:52:25	tomsmeding	9 or 9.2 or something added a new windows layer for the RTS or something? that did away with some of the mingw stuff? just guessing
2021-09-10 16:52:26	→	lavaman has joined #haskell
2021-09-10 16:52:31	raehik	GHC 9.0.1 via ghcup
2021-09-10 16:53:07	raehik	You're right I see lots of /x/ghcup/mingw32 paths in the verbose build logs
2021-09-10 16:53:13	fusionr86	tomsmeding: so which of these two solutions is prettier? https://paste.tomsmeding.com/TSpvZg9Q I kinda like 2a because it uses less () aka more readable imo, but abusing ++ like that feels wrong.
2021-09-10 16:53:20	ldlework	I'm having a hard time writing a map2
2021-09-10 16:53:41	ldlework	why are these cases incomplete? https://gist.github.com/dustinlacewell/0bd14c3457ee70b6a840149268d0c97f
2021-09-10 16:53:57	←	brandonh has quit (Ping timeout: 252 seconds)
2021-09-10 16:54:25	tomsmeding	ldlework: you need some () instead of some [], probably in your third and fourth cases
2021-09-10 16:54:37	jneira[m]	tomsmeding: i think it is not the default yet, at least in 9.9
2021-09-10 16:54:38	jneira[m]	9.0
2021-09-10 16:54:42	ldlework	oh
2021-09-10 16:54:44	ldlework	that worked
2021-09-10 16:55:09	tomsmeding	jneira[m]: ah
2021-09-10 16:55:38	tomsmeding	fusionr86: 2a will cost you points for excessive pointfree notation lol
2021-09-10 16:56:01	tomsmeding	@pl \a b c d f -> f d b a c
2021-09-10 16:56:01	lambdabot	((flip . (flip .)) .) . flip (flip . (flip .) . flip (flip . flip id))
2021-09-10 16:56:48	tomsmeding	fusionr86: the big question when writing "nice" haskell code is: how easy is it to figure out what it does by reading it
2021-09-10 16:57:11	tomsmeding	not any kind of metric-following where you want more or less pointfreeness
2021-09-10 16:57:11	→	euandreh has joined #haskell
2021-09-10 16:57:14	jneira[m]	<raehik> "but for a project that uses..." <- i would say that putting paths in the cabal.project for a dependency should work like putting them in the cabal global config file or the cli option for building it directly 
2021-09-10 16:57:31	jneira[m]	so it is a cabal bug
2021-09-10 16:57:46	tomsmeding	fusionr86: for 2a I had to mentally convert it to 2b to even get what it's doing
2021-09-10 16:58:01	←	lavaman has quit (Ping timeout: 260 seconds)
2021-09-10 16:58:16	raehik	jneira[m]: It looks like it's an open issue #2997 on the Cabal github
2021-09-10 16:58:20	jneira[m]	but i think putting windows paths in the config or cli option works as well no?
2021-09-10 16:58:47	sclv	its not a bug per se
2021-09-10 16:58:47	jneira[m]	hmm it talks about windows vs posix paths too?
2021-09-10 16:59:15	jneira[m]	a feature then 😆
2021-09-10 16:59:16	fusionr86	tomsmeding: alright I'll go with 2b, but tbh all haskell code I see looks like 2a to me (complexity wise)
2021-09-10 16:59:20	sclv	its a question of semantics -- if you have an option set _in general_ then you need to decide what packages it applies to
2021-09-10 16:59:23	raehik	no not that (I can imagine that's awkwardness with MSYS)
2021-09-10 16:59:41	sclv	if it gets applied to every package then you're rebuilding the full dep tree with that option, etc
2021-09-10 16:59:47	ldlework	this still doesn't work
2021-09-10 16:59:49	ldlework	https://gist.github.com/dustinlacewell/0bd14c3457ee70b6a840149268d0c97f
2021-09-10 16:59:50	sclv	the problem is nobody worked out the "right" way
2021-09-10 16:59:51	ldlework	leaves the string unchanged
2021-09-10 16:59:56	jneira[m]	i talk about handle paths the same way
2021-09-10 16:59:58	ldlework	it should iterate over it 2 chars at a time
2021-09-10 17:00:10	ldlework	replace any char who's followed by a vowel with '!'
2021-09-10 17:00:12	ldlework	what gives?
2021-09-10 17:00:22	ldlework	oh
2021-09-10 17:00:24	ldlework	see my problem
2021-09-10 17:00:25	sclv	so the solution punted and said "we'll just take specified options"
2021-09-10 17:00:45	sclv	and didn't try to figure out the "right meaning" for setting the extra lib stuff "in general"
2021-09-10 17:00:48	ldlework	no didn't fix it
2021-09-10 17:01:02	nshepperd	Gurkenglas: pretty much any object and lens on it
2021-09-10 17:01:03	ldlework	updated with fix though
2021-09-10 17:01:05	jneira[m]	sclv: agree on that, it is tricky
2021-09-10 17:01:10	←	ChaiTRex has quit (Quit: ChaiTRex)
2021-09-10 17:01:18	jneira[m]	but paths should be handle the same way :-)
2021-09-10 17:02:15	→	ChaiTRex has joined #haskell
2021-09-10 17:02:25	nshepperd	Gurkenglas: s = (1, 0), s' = (2, 0), l = _2, for one
2021-09-10 17:03:04	←	lambdap has quit (Quit: lambdap)
2021-09-10 17:03:10	tomsmeding	fusionr86: example of code in the wild that looks like that to you?
2021-09-10 17:03:25	←	acidjnk_new3 has quit (Ping timeout: 252 seconds)
2021-09-10 17:03:40	tomsmeding	(not saying it doesn't exist, just want to see what it looks like)
2021-09-10 17:03:43	→	lambdap has joined #haskell
2021-09-10 17:05:33	→	ManofLetters[m] has joined #haskell
2021-09-10 17:07:07	←	aman has quit (Quit: aman)
2021-09-10 17:09:42	fusionr86	tomsmeding: nothing in particular, was just referring to the fact that haskell is a huge mindset switch compared to 'other' languages (well it is for me at least)
2021-09-10 17:09:49	←	FinnElija has quit (Quit: FinnElija)
2021-09-10 17:10:24	tomsmeding	fusionr86: that makes sense; it is for most people :)
2021-09-10 17:10:27	←	raehik has quit (Ping timeout: 252 seconds)
2021-09-10 17:10:49	tomsmeding	you'll get more familiar with the mindset as you go along
2021-09-10 17:11:28	ldlework	tomsmeding: where am i going wrong
2021-09-10 17:15:30	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-10 17:15:35	→	eggplantade has joined #haskell
2021-09-10 17:18:29	→	FinnElija has joined #haskell
2021-09-10 17:18:35	Gurkenglas	nshepperd, how silly of me, I thought quotient sets are the inverse of set product :)
2021-09-10 17:19:39	→	ic2000_ has joined #haskell
2021-09-10 17:19:51	ldlework	stumped
2021-09-10 17:20:01	←	eggplantade has quit (Ping timeout: 245 seconds)
2021-09-10 17:20:47	→	raehik has joined #haskell
2021-09-10 17:22:38	tomsmeding	ldlework: I don't see a word starting with a vowel?
2021-09-10 17:23:10	tomsmeding	(also note that the pattern '(a:[b])' is equivalent to the pattern '[a,b]')
2021-09-10 17:23:51	ldlework	lmao, changing it to "the ape" doesn't have any change in behavior
2021-09-10 17:23:52	tomsmeding	ldlework: also you're not using 'words' anywhere
2021-09-10 17:24:24	ldlework	tomsmeding: this is just iterating the characters
2021-09-10 17:24:40	ldlework	switching the first of any pair of characters to '!' if it's followed by a vowel
2021-09-10 17:24:50	ldlework	i made it simplier to try to figure out what's going on
2021-09-10 17:24:59	←	max22- has quit (Ping timeout: 260 seconds)
2021-09-10 17:25:02	ldlework	this gist, just to be sure https://gist.github.com/dustinlacewell/0bd14c3457ee70b6a840149268d0c97f
2021-09-10 17:25:18	ldlework	grass should => g!ass
2021-09-10 17:25:26	tomsmeding	ah
2021-09-10 17:25:39	tomsmeding	`[a', b] ++ cs where a' = f a b` doesn't recurse
2021-09-10 17:25:50	ldlework	but there's only two elements
2021-09-10 17:26:09	ldlework	oh
2021-09-10 17:26:13	→	brandonh has joined #haskell
2021-09-10 17:26:41	ldlework	I see
2021-09-10 17:26:43	tomsmeding	also, when you're done, the third case of map2 (a:[b]) is probably going to be redundant because it does the same as case 4 and case 2 together
2021-09-10 17:27:40	→	jeicher has joined #haskell
2021-09-10 17:28:10	←	raehik has quit (Ping timeout: 252 seconds)
2021-09-10 17:29:06	ldlework	I get an infinite type now
2021-09-10 17:29:12	tomsmeding	yay
2021-09-10 17:29:18	←	fusionr86 has quit (Quit: Leaving)
2021-09-10 17:29:31	←	lambdap has quit (Ping timeout: 265 seconds)
2021-09-10 17:29:49	ldlework	https://gist.github.com/dustinlacewell/0bd14c3457ee70b6a840149268d0c97f
2021-09-10 17:30:06	→	raehik has joined #haskell
2021-09-10 17:30:30	tomsmeding	ldlework: as the error says, f :: a -> a -> a and xs :: [a]
2021-09-10 17:30:59	tomsmeding	presumably s/map/map2/
2021-09-10 17:31:07	ldlework	oh
2021-09-10 17:31:11	ldlework	man I should go to sleep
2021-09-10 17:31:14	ldlework	7am up all night
2021-09-10 17:31:16	ldlework	heh
2021-09-10 17:31:33	tomsmeding	it's 7am in the morning for you? please go to sleep now
2021-09-10 17:31:51	ldlework	it still somehow doesn't work XD
2021-09-10 17:31:59	ldlework	ok ok, night :) (thanks for the help btw)
2021-09-10 17:32:20	tomsmeding	after sleep you'll have a better time fixing the code :)
2021-09-10 17:32:23	ldlework	oh
2021-09-10 17:32:24	ldlework	now it does
2021-09-10 17:32:26	ldlework	nice
2021-09-10 17:32:33	ℹ	jeicher is now known as jcat
2021-09-10 17:32:36	←	parisienne has quit (Quit: Connection closed for inactivity)
2021-09-10 17:32:49	ldlework	"t!e!a!e!a!e t!e g!ass??"
2021-09-10 17:33:19	ChaiTRex	What's a good name for a function that takes a list, xs, and produces the list of all possible lists of the same length as xs consisting of any elements from xs, but the elements have to be sorted in the same order they appear in xs? whatever [a,b,c] == [[a,a,a],[a,a,b],[a,a,c],[a,b,b],[a,b,c],[a,c,c],[b,b,b],[b,b,c],[b,c,c],[c,c,c]]
2021-09-10 17:33:30	→	[itchyjunk] has joined #haskell
2021-09-10 17:33:54	ldlework	orderedPermutations ?
2021-09-10 17:33:55	→	WorldSEnder has joined #haskell
2021-09-10 17:34:15	ldlework	cccomboMaker
2021-09-10 17:34:37	ChaiTRex	Well, they're not exactly permutations.
2021-09-10 17:35:26	←	WorldSEnder has quit (Client Quit)
2021-09-10 17:35:32	ChaiTRex	What is it called when you do whatever [a,b] and get [[a,a],[a,b],[b,a],[b,b]]?
2021-09-10 17:35:48	tomsmeding	if the length of the sublists was a parameter instead of hard-coded to be "the length of the input list", then it would be sublists
2021-09-10 17:35:51	Akronymus	Point free syntax, yay or nay?
2021-09-10 17:36:02	tomsmeding	well, sublistsWithReplacement, which is weird
2021-09-10 17:36:09	tomsmeding	ChaiTRex: combinations
2021-09-10 17:36:20	tomsmeding	Akronymus: if it makes the code more readable ;)
2021-09-10 17:36:36	ChaiTRex	combinationsWithReplacement maybe.
2021-09-10 17:36:48	→	burnsidesLlama has joined #haskell
2021-09-10 17:36:53	Akronymus	Tbh, I don't think I have seen a case where point free made it actually more readable.
2021-09-10 17:36:58	tomsmeding	combinations to me implies that [b,a] is in the result
2021-09-10 17:37:02	Akronymus	Rather than less or the same.
2021-09-10 17:37:18	hpc	Akronymus: poınt free syntax :D
2021-09-10 17:37:21	ChaiTRex	So, orderedCombinationsWithReplacement
2021-09-10 17:37:34	tomsmeding	Akronymus: dumb case is simple operator sections: map (*2) is better than map (\x -> x * 2)
2021-09-10 17:37:51	Gurkenglas	ChaiTRex, are they in the same order because they're not supposed to have an order?
2021-09-10 17:37:55	Akronymus	Oh like that.
2021-09-10 17:38:03	tomsmeding	'ordNub = uniq . sort' also
2021-09-10 17:38:04	Akronymus	Didn't even occur to me that it was points free.
2021-09-10 17:38:54	Akronymus	If you have a list of lists, for example, and I want to sum all things, I'd probably do something like this: fold (fold +)
2021-09-10 17:39:28	tomsmeding	:t fold (fold (+))
2021-09-10 17:39:29	lambdabot	(Foldable ((->) m), Monoid m, Num m) => m
2021-09-10 17:39:33	tomsmeding	not sure you meant that
2021-09-10 17:39:36	ChaiTRex	Gurkenglas: The order is irrelevant, so I want to avoid what are essentially duplicates with the same elements in different orders.
2021-09-10 17:39:40	tomsmeding	Akronymus: sum . map sum
2021-09-10 17:39:45	Akronymus	Oh that works too.
2021-09-10 17:40:02	tomsmeding	ChaiTRex: submultisets
2021-09-10 17:41:28	Gurkenglas	ChaiTRex, why are they the same size? I'd expect them to only be the same size if it is meaningful to zip them together.
2021-09-10 17:42:05	←	arjun has quit (Ping timeout: 265 seconds)
2021-09-10 17:42:35	ChaiTRex	I'm making a program to relabel dice to get a certain distribution of sum-what-you-rolled outcomes.
2021-09-10 17:43:28	ChaiTRex	So, when you label a fair die, the order you label the sides doesn't matter.
2021-09-10 17:43:47	Gurkenglas	Why do you fix the labels to [1..6]?
2021-09-10 17:43:49	ChaiTRex	So, I want to choose labels for the sides from, say [0 .. 9] or something.
2021-09-10 17:44:12	Gurkenglas	Aka why dont you let them label a sixsided die 1,2,4,8,16,32?
2021-09-10 17:44:48	ChaiTRex	Well, I could do [1 .. 32] for the possible labels and that would eventually produce that labelling.
2021-09-10 17:45:08	Gurkenglas	no, that only labels 32-sided dice.
2021-09-10 17:45:19	ChaiTRex	No, those are the possible labels.
2021-09-10 17:45:32	ChaiTRex	1,2,4,8,16,32 are all in [1 .. 32].
2021-09-10 17:45:45	Gurkenglas	"all possible lists of the same length as xs" you said
2021-09-10 17:46:33	ChaiTRex	Yeah, but someone suggested that the length of the sublists could be a parameter.
2021-09-10 17:46:56	Gurkenglas	Oh, sorry.
2021-09-10 17:47:42	ChaiTRex	tomsmeding: I think submultisetsOfLength might work.
2021-09-10 17:48:02	ChaiTRex	Or multisetsOfLength
2021-09-10 17:48:08	Gurkenglas	replicateM, for the Bag monad.
2021-09-10 17:49:01	Gurkenglas	(aka lists without order)
2021-09-10 17:50:49	Gurkenglas	(just another word for multisets)
2021-09-10 17:53:13	Gurkenglas	> replicateM 3 [x,y]
2021-09-10 17:53:14	lambdabot	 [[x,x,x],[x,x,y],[x,y,x],[x,y,y],[y,x,x],[y,x,y],[y,y,x],[y,y,y]]
2021-09-10 17:54:06	ChaiTRex	Yeah, one implementation is this:
2021-09-10 17:54:21	ChaiTRex	> nub . map sort . replicateM 3 $ [x, y]
2021-09-10 17:54:22	lambdabot	 [[x,x,x],[x,x,y],[x,y,y],[y,y,y]]
2021-09-10 17:55:08	←	amitnjha has quit (Quit: amitnjha)
2021-09-10 17:55:10	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-10 17:55:23	→	amitnjha has joined #haskell
2021-09-10 17:55:27	Gurkenglas	Yeah but I'm going for nubbing at each step to help with the combinatorial runtime
2021-09-10 17:55:57	←	raehik has quit (Quit: WeeChat 3.2)
2021-09-10 17:56:37	Gurkenglas	(oh, it's replicateM for the MultiSet monad *with [] replaced by MultiSet as well*)
2021-09-10 17:57:11	ChaiTRex	@let multisetsOfSize :: Word8 -> [a] -> [[a]]; multisetsOfSize 0 = const [[]]; multisetsOfSize n = concatMap (\ yys@(y : _) -> map (y :) (multisetsOfSize (n - 1) yys)) . init . tails
2021-09-10 17:57:13	lambdabot	 Defined.
2021-09-10 17:57:29	ChaiTRex	That's an implementation that doesn't produce duplicates or require Ord.
2021-09-10 17:57:40	ChaiTRex	> moltisetsOfSize 3 [x, y]
2021-09-10 17:57:42	lambdabot	 error:
2021-09-10 17:57:42	lambdabot	     • Variable not in scope: moltisetsOfSize :: t0 -> [Expr] -> t
2021-09-10 17:57:42	lambdabot	     • Perhaps you meant ‘multisetsOfSize’ (line 154)
2021-09-10 17:57:45	ChaiTRex	> multisetsOfSize 3 [x, y]
2021-09-10 17:57:47	lambdabot	 [[x,x,x],[x,x,y],[x,y,y],[y,y,y]]
2021-09-10 17:59:22	→	Vajb has joined #haskell
2021-09-10 17:59:23	→	acidjnk_new3 has joined #haskell
2021-09-10 17:59:47	Gurkenglas	Data.Monoid.Combinators says to use reducers instead, but where's the replicate?
2021-09-10 18:02:33	→	shapr has joined #haskell
2021-09-10 18:04:26	Gurkenglas	oh well, not like it needs an import.
2021-09-10 18:07:02	→	raehik has joined #haskell
2021-09-10 18:07:02	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-10 18:08:07	→	Vajb has joined #haskell
2021-09-10 18:16:27	→	eggplantade has joined #haskell
2021-09-10 18:18:38	Gurkenglas	Is there a proposal to have Typeclasses propagate constraints automatiaclly, so that Set could have a monad instance?
2021-09-10 18:18:48	←	ic2000_ has quit (Ping timeout: 252 seconds)
2021-09-10 18:20:09	→	pera has joined #haskell
2021-09-10 18:21:05	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-10 18:21:48	→	zmt01 has joined #haskell
2021-09-10 18:24:09	←	burnsidesLlama has quit (Remote host closed the connection)
2021-09-10 18:24:21	←	zmt00 has quit (Ping timeout: 260 seconds)
2021-09-10 18:35:57	→	shriekingnoise has joined #haskell
2021-09-10 18:38:49	←	MQ-17J has quit (Ping timeout: 260 seconds)
2021-09-10 18:39:06	→	MQ-17J has joined #haskell
2021-09-10 18:46:16	→	geekosaur has joined #haskell
2021-09-10 18:49:01	→	mei has joined #haskell
2021-09-10 18:49:24	→	slowButPresent has joined #haskell
2021-09-10 18:50:14	←	mei has quit (Read error: Connection reset by peer)
2021-09-10 18:50:48	←	dudek has quit (Read error: Connection reset by peer)
2021-09-10 18:51:05	→	dudek has joined #haskell
2021-09-10 18:52:06	→	mei has joined #haskell
2021-09-10 18:54:48	→	pottsy has joined #haskell
2021-09-10 18:55:49	→	vpan has joined #haskell
2021-09-10 18:57:03	←	mei has quit (Quit: mei)
2021-09-10 18:57:34	→	mei has joined #haskell
2021-09-10 19:01:29	→	burnsidesLlama has joined #haskell
2021-09-10 19:04:14	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-10 19:04:21	→	n3t has joined #haskell
2021-09-10 19:05:02	→	Vajb has joined #haskell
2021-09-10 19:05:28	←	amitnjha has quit (Quit: amitnjha)
2021-09-10 19:05:47	→	amitnjha has joined #haskell
2021-09-10 19:05:54	←	burnsidesLlama has quit (Ping timeout: 260 seconds)
2021-09-10 19:06:31	→	Guest|1 has joined #haskell
2021-09-10 19:07:10	←	Guest|1 has quit (Client Quit)
2021-09-10 19:07:15	→	max22- has joined #haskell
2021-09-10 19:08:33	→	rond_ has joined #haskell
2021-09-10 19:11:28	→	merijn has joined #haskell
2021-09-10 19:13:23	→	tureba_ has joined #haskell
2021-09-10 19:13:44	←	tureba_ has quit (Client Quit)
2021-09-10 19:13:49	←	sleblanc has quit (Ping timeout: 260 seconds)
2021-09-10 19:15:06	←	hendursa1 has quit (Quit: hendursa1)
2021-09-10 19:15:18	←	thyriaen has quit (Ping timeout: 252 seconds)
2021-09-10 19:15:36	→	hendursaga has joined #haskell
2021-09-10 19:15:51	←	amitnjha has quit (Quit: amitnjha)
2021-09-10 19:16:05	→	amitnjha has joined #haskell
2021-09-10 19:16:48	→	tureba has joined #haskell
2021-09-10 19:19:53	←	favonia has quit (Ping timeout: 260 seconds)
2021-09-10 19:23:17	←	jcat has quit (Quit: WeeChat 3.2)
2021-09-10 19:25:54	→	pbrisbin has joined #haskell
2021-09-10 19:28:00	←	wolfshappen has quit (Ping timeout: 252 seconds)
2021-09-10 19:28:44	→	wolfshappen has joined #haskell
2021-09-10 19:29:26	→	TranquilEcho has joined #haskell
2021-09-10 19:31:53	→	zebrag has joined #haskell
2021-09-10 19:35:43	→	burnsidesLlama has joined #haskell
2021-09-10 19:35:52	←	teo has quit
2021-09-10 19:40:31	→	favonia has joined #haskell
2021-09-10 19:42:45	←	jinsun has quit (Ping timeout: 260 seconds)
2021-09-10 19:43:47	→	aman has joined #haskell
2021-09-10 19:45:49	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-10 19:50:46	←	img has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-09-10 19:50:57	←	amahl has quit (Remote host closed the connection)
2021-09-10 19:51:03	→	img has joined #haskell
2021-09-10 19:51:11	←	amitnjha has quit (Quit: amitnjha)
2021-09-10 19:51:25	→	amitnjha has joined #haskell
2021-09-10 19:52:06	←	Akronymus has quit (Quit: Client closed)
2021-09-10 19:54:32	→	Sgeo has joined #haskell
2021-09-10 19:54:39	→	waleee has joined #haskell
2021-09-10 19:56:12	←	pottsy has quit (Quit: Leaving)
2021-09-10 20:02:44	←	azeem has quit (Ping timeout: 265 seconds)
2021-09-10 20:04:41	←	favonia has quit (Ping timeout: 260 seconds)
2021-09-10 20:06:10	→	mangoiv has joined #haskell
2021-09-10 20:11:09	←	cafkafk has quit (Quit: WeeChat 3.1)
2021-09-10 20:11:31	←	slep has quit (Ping timeout: 252 seconds)
2021-09-10 20:11:31	←	amitnjha has quit (Quit: amitnjha)
2021-09-10 20:11:46	→	amitnjha has joined #haskell
2021-09-10 20:11:46	←	gentauro has quit (Read error: Connection reset by peer)
2021-09-10 20:15:22	←	pera has quit (Ping timeout: 252 seconds)
2021-09-10 20:15:29	→	pera has joined #haskell
2021-09-10 20:15:53	ℹ	pera is now known as Guest265
2021-09-10 20:16:59	→	azeem has joined #haskell
2021-09-10 20:17:42	→	gentauro has joined #haskell
2021-09-10 20:18:12	→	eggplantade has joined #haskell
2021-09-10 20:18:13	←	brandonh has quit (Ping timeout: 260 seconds)
2021-09-10 20:20:36	←	dsrt^ has quit (Remote host closed the connection)
2021-09-10 20:20:48	→	brandonh has joined #haskell
2021-09-10 20:22:41	←	[itchyjunk] has quit (Remote host closed the connection)
2021-09-10 20:22:53	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-10 20:23:22	←	Guest265 has quit (Quit: leaving)
2021-09-10 20:27:49	←	mei has quit (Read error: Connection reset by peer)
2021-09-10 20:29:04	c_wraith	Gurkenglas: I'm not a big fan of breaking parametricity
2021-09-10 20:29:41	←	shapr has quit (Remote host closed the connection)
2021-09-10 20:29:48	→	wroathe has joined #haskell
2021-09-10 20:29:48	←	wroathe has quit (Changing host)
2021-09-10 20:29:48	→	wroathe has joined #haskell
2021-09-10 20:30:27	→	hexfive has joined #haskell
2021-09-10 20:31:28	→	shapr has joined #haskell
2021-09-10 20:31:38	←	burnsidesLlama has quit (Remote host closed the connection)
2021-09-10 20:32:43	←	hexfive has quit (Client Quit)
2021-09-10 20:33:04	c_wraith	I really like looking at   (>>=) :: Monad m => m a -> (a -> m b) -> m b    and knowing that it can't do arbitrary things based on the types `a' and `b', or what values of each may or may not exist.
2021-09-10 20:33:28	→	acidjnk_new has joined #haskell
2021-09-10 20:36:16	←	acidjnk_new3 has quit (Ping timeout: 245 seconds)
2021-09-10 20:36:53	Gurkenglas	c_wraith, can you give an example of an arbitrary thing you could do if (>>=) specialized to (Ord a, Ord b) => Set a -> (a -> Set b) -> Set b?
2021-09-10 20:37:21	←	MQ-17J has quit (Ping timeout: 260 seconds)
2021-09-10 20:37:38	→	MQ-17J has joined #haskell
2021-09-10 20:37:51	c_wraith	No, but I could give you plenty of examples of bad things if (>>=) specialized to (Typeable a, Typeable b) => Foo a -> (a -> Foo b) -> (Foo b)
2021-09-10 20:39:25	Gurkenglas	Ooh! Such as?
2021-09-10 20:40:09	←	jespada has quit (Ping timeout: 252 seconds)
2021-09-10 20:41:41	→	jespada has joined #haskell
2021-09-10 20:42:06	→	goepsilongo has joined #haskell
2021-09-10 20:43:27	→	ic2000_ has joined #haskell
2021-09-10 20:44:21	c_wraith	newtype Foo a = Foo (Maybe a) ; Foo (Just x) >>= Foo (Just f) = case (eqT :: Maybe (b :~: Double)) of Just Refl -> Foo Nothing ; Nothing -> f x
2021-09-10 20:44:27	←	brandonh has quit (Read error: Connection reset by peer)
2021-09-10 20:44:30	→	brandonh_ has joined #haskell
2021-09-10 20:44:31	→	favonia has joined #haskell
2021-09-10 20:44:35	c_wraith	left a bunch out, but that should be enough to get the point across
2021-09-10 20:45:27	→	merijn has joined #haskell
2021-09-10 20:45:35	c_wraith	err.  that second arg should just be f, not a pattern match.  forgot I wasn't writing (<*>)
2021-09-10 20:45:38	Gurkenglas	I agree that you could do such a thing, but have not yet demonstrated the badness.
2021-09-10 20:45:43	→	sneedsfeed has joined #haskell
2021-09-10 20:45:46	Gurkenglas	*you
2021-09-10 20:45:54	c_wraith	that is the badness
2021-09-10 20:46:03	Gurkenglas	Is there something that relies on such things being impossible?
2021-09-10 20:46:05	c_wraith	I can no longer reason about the behavior of (>>=)
2021-09-10 20:46:09	Gurkenglas	Why not?
2021-09-10 20:46:16	c_wraith	it lost parametricity
2021-09-10 20:46:18	→	slep has joined #haskell
2021-09-10 20:46:30	c_wraith	Right now, I know that's impossible
2021-09-10 20:46:55	c_wraith	This is explicitly documented by the type
2021-09-10 20:46:56	Gurkenglas	You can reason out what it will do depending on the type signature it ends up with
2021-09-10 20:47:14	c_wraith	Right now you can reason out what it will do by looking at the type of (>>=)
2021-09-10 20:47:30	c_wraith	you propose to replace that with having to know what type it will be used at before you can know what it does
2021-09-10 20:47:35	c_wraith	that's a massive downgrade
2021-09-10 20:49:02	Gurkenglas	The behavior of (>>=) already depends on the instance it is used with, is there something about drawing the line where it is drawn that is optimal?
2021-09-10 20:50:15	c_wraith	the behavior only depends on m
2021-09-10 20:50:24	c_wraith	You're proposing to make it also depend on a and b
2021-09-10 20:50:39	c_wraith	despite the fact that only m is used to select an implementation
2021-09-10 20:50:42	→	Phantastes has joined #haskell
2021-09-10 20:50:53	c_wraith	Once again, it comes down to the types
2021-09-10 20:51:07	c_wraith	The type signature shows m is constrained, but a and b are parametric
2021-09-10 20:51:16	←	acidjnk_new has quit (Ping timeout: 245 seconds)
2021-09-10 20:51:31	c_wraith	This is *documentation*
2021-09-10 20:51:51	c_wraith	It says that what it does will depend on m, but not a and b
2021-09-10 20:52:15	ℹ	Phantastes is now known as Fufu
2021-09-10 20:52:33	Gurkenglas	I think your monad instance breaks the functor laws
2021-09-10 20:52:49	c_wraith	laws are not enforced by the compiler.
2021-09-10 20:52:50	→	lambdap has joined #haskell
2021-09-10 20:52:56	c_wraith	parametricity is
2021-09-10 20:52:58	←	Fufu has quit (Client Quit)
2021-09-10 20:53:03	c_wraith	It is stronger than laws
2021-09-10 20:54:01	Gurkenglas	Can you give a scenario where you would be negatively surprised by Foo's existence or something like it?
2021-09-10 20:54:13	c_wraith	(yes, there are some dirty things you can do to break parametricity using ghc internals. But even they can't see newtype wrappers at runtime, for instance)
2021-09-10 20:54:18	Gurkenglas	(or someone else, if you want using an existing library)
2021-09-10 20:54:25	←	cfricke has quit (Quit: WeeChat 3.2)
2021-09-10 20:55:09	→	lavaman has joined #haskell
2021-09-10 20:55:48	c_wraith	Every single place I see an unconstrained type variable, I use that knowledge
2021-09-10 20:56:30	c_wraith	It's the sort of documentation almost every other language lacks badly, and suffers for
2021-09-10 20:56:33	←	shapr has quit (Remote host closed the connection)
2021-09-10 20:56:58	c_wraith	(Unlike other documentation, it's actually correct)
2021-09-10 20:57:21	c_wraith	You're proposing to remove the correctness
2021-09-10 20:57:43	c_wraith	that seems like giving up far more than you're gaining.
2021-09-10 20:59:45	←	lavaman has quit (Ping timeout: 260 seconds)
2021-09-10 21:03:11	→	shapr has joined #haskell
2021-09-10 21:05:34	←	brandonh_ has quit (Ping timeout: 265 seconds)
2021-09-10 21:07:48	→	brandonh has joined #haskell
2021-09-10 21:13:11	←	rond_ has quit (Quit: Client closed)
2021-09-10 21:14:25	→	ec_ has joined #haskell
2021-09-10 21:16:34	→	Erutuon has joined #haskell
2021-09-10 21:16:43	←	dajoer has quit (Quit: leaving)
2021-09-10 21:19:45	←	chele has quit (Remote host closed the connection)
2021-09-10 21:21:30	→	eggplantade has joined #haskell
2021-09-10 21:23:34	←	xsperry has quit (Ping timeout: 252 seconds)
2021-09-10 21:30:51	←	wroathe has quit (Ping timeout: 245 seconds)
2021-09-10 21:31:07	←	dudek has quit (Quit: Leaving)
2021-09-10 21:35:02	→	tzh has joined #haskell
2021-09-10 21:37:03	→	texasmynsted has joined #haskell
2021-09-10 21:37:38	←	vpan has quit (Quit: Leaving.)
2021-09-10 21:38:18	→	wroathe has joined #haskell
2021-09-10 21:38:19	←	wroathe has quit (Changing host)
2021-09-10 21:38:19	→	wroathe has joined #haskell
2021-09-10 21:38:29	texasmynsted	What is a great way to handle configuration? I like dhall but it feels like a better yaml. What if yaml is not the ideal way to describe configuration? Is there some language or package this is just config?
2021-09-10 21:39:52	kritzefitz	texasmynsted, I'm not sure I understand your question correctly, but maybe TOML might be in the right direction? https://toml.io/en/
2021-09-10 21:40:22	←	xff0x has quit (Ping timeout: 265 seconds)
2021-09-10 21:41:35	texasmynsted	Toml is good, but it is still a file. Why not a language w/o a human readable file?
2021-09-10 21:41:35	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-10 21:41:54	texasmynsted	Maybe what I am looking for is a bad idea or does not really make sense.
2021-09-10 21:42:11	→	xff0x has joined #haskell
2021-09-10 21:42:35	→	MQ-17J has joined #haskell
2021-09-10 21:42:46	geekosaur	in general tose turn out badly because you can't use standard tools to query or manipulate them
2021-09-10 21:43:15	texasmynsted	Do you have an example of one?
2021-09-10 21:43:26	maerwald	XML... it's not readable after 10 lines of code
2021-09-10 21:43:56	geekosaur	with JSON you have to use jq to do anything useful
2021-09-10 21:43:59	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-10 21:44:27	texasmynsted	JSON is just a human readable description of Javascript data
2021-09-10 21:44:32	dminuoso	texasmynsted: for haskell configuration?
2021-09-10 21:44:38	geekosaur	sometimes you want to look up one or two settings for use in a shell script
2021-09-10 21:44:54	texasmynsted	dminuoso: Ideally but just anything would be a good start.
2021-09-10 21:45:02	dminuoso	texasmynsted: I'm a big fan of config-schema
2021-09-10 21:45:14	texasmynsted	config-schema? 
2021-09-10 21:45:15	dminuoso	Yes.
2021-09-10 21:45:17	⚡	texasmynsted googles
2021-09-10 21:45:19	dminuoso	https://hackage.haskell.org/package/config-schema
2021-09-10 21:45:26	→	qbt has joined #haskell
2021-09-10 21:46:00	dminuoso	It's a cute package with built-in schema verification, good enough error messages, easy custom schemas, and documentation output you can directly glue into your program 
2021-09-10 21:46:21	sm	texasmynsted, "language" but not "human readable file" ? could you clarify ?
2021-09-10 21:47:14	←	aman has quit (Quit: aman)
2021-09-10 21:47:25	dminuoso	All my programs have some kind of --config-help option that prints out the generated docs, meaning I dont need to separately document that format either. :)
2021-09-10 21:47:28	texasmynsted	dminuoso: Nice. I like this.
2021-09-10 21:47:50	→	_ht has joined #haskell
2021-09-10 21:48:11	dsal	% traverse_ print (Just 2) -- ldlework, in your initial question, you were asking about `let Just a in print a` without the Let binding (and presumably not printing when `Nothing`).  That's what `traverse_` does.
2021-09-10 21:48:12	yahb	dsal: 2
2021-09-10 21:48:22	texasmynsted	sm: Most things build a config file that is human readable like toml, yaml, ini files, etc. Then the program reads the human and computer readable file.
2021-09-10 21:49:59	texasmynsted	What if the language was a haskell DSL or something, specifically for configuration and the result was not human readable but very efficient for the program to load and use
2021-09-10 21:51:05	→	ec_ has joined #haskell
2021-09-10 21:51:46	dminuoso	I'd pick lisp then.
2021-09-10 21:52:07	texasmynsted	It feels like there are challenges because we want a file format that works for both humans and programs, then we need tools to have more control over producing those human and computer readable files. 
2021-09-10 21:52:17	dminuoso	Bu not really, dhall would be that thing I guess
2021-09-10 21:52:47	[exa]	texasmynsted: the best language probably depends on environment and users. For exampel if they are unixy, you might be better off just sourcing the config file with bash and taking out environment/stdout
2021-09-10 21:52:48	dminuoso	Well, any programming or configuration language is for unidirectional communication between a human and a computer.
2021-09-10 21:52:57	←	ic2000_ has quit (Ping timeout: 260 seconds)
2021-09-10 21:53:00	→	neo2 has joined #haskell
2021-09-10 21:53:05	[exa]	otherwise +1 for lisp-ish scheme-ish configs
2021-09-10 21:53:39	dminuoso	at least lispy syntax, simply so you dont have the overhead of some complicated syntax.
2021-09-10 21:55:19	←	phma has quit (Read error: Connection reset by peer)
2021-09-10 21:55:25	sm	texasmynsted: well I'd call haskell human readable, compared to say a sqlite db, but I see. xmonad uses haskell for config, the problem with that is you need to do an expensive recompile to change any config
2021-09-10 21:55:59	dminuoso	And you need to be a haskell programmer to deal with virtually any typo.
2021-09-10 21:56:05	sm	propellor, shake also use haskell for "config", if you squint at it
2021-09-10 21:56:09	ℹ	ormaaj2 is now known as ormaaj
2021-09-10 21:56:27	geekosaur	not very expensive, it's not like you're dealing with e.g. lots of type families
2021-09-10 21:56:51	→	phma has joined #haskell
2021-09-10 21:56:56	geekosaur	xmonad gets away with it because 100 lines is an unusually large config
2021-09-10 21:56:58	dminuoso	Indeed, I have a moderately complex xmonad configuration, and rebuilding takes about 3-4 seconds?
2021-09-10 21:57:04	texasmynsted	Dhall is nice. Like why Json or Yaml over something like messagepack
2021-09-10 21:57:09	[exa]	geekosaur: unfortunately you're talking to a channel where every second person will start the config with UndecidableInstances pragma
2021-09-10 21:57:10	sm	it's relatively expensive compared to tweaking an ini file, no matter how you look at it (consider all the requirements and opportunities for it to fail)
2021-09-10 21:58:10	texasmynsted	I think that viewing/understanding the config from looking at the file could be different than "tweaking" it. 
2021-09-10 21:58:57	sm	ie, it's not that recompiling xmonad config once you're all set up takes a long time, it's that you have to install a haskell toolchain on your random platform, and keep it working, both non-trivial
2021-09-10 22:00:02	texasmynsted	So dhall or config-schema...
2021-09-10 22:02:02	dsal	I really liked dhall until I tried using it.  heh
2021-09-10 22:02:45	→	vicfred has joined #haskell
2021-09-10 22:03:36	sm	lua is an option - programmable, but embeddable within your program so the user doesn't have to install anything. pandoc uses this for certain things
2021-09-10 22:03:47	dsal	The case where I'm still using it was simple enough.  I don't format "correctly" because their canonical format is unusable.  I can't remember what my last attempt was, but it wasn't expressive enough.
2021-09-10 22:03:48	sm	...but you have to write lua
2021-09-10 22:03:54	texasmynsted	Oh yeah, I forgot about lua
2021-09-10 22:04:07	dsal	Ha.  Yeah, I've embedded lua in a few projects and then got to that "now I have to write lua" part.
2021-09-10 22:04:34	sm	one of these days we'll have "haskellscript" !
2021-09-10 22:04:39	texasmynsted	I would rather an embeddable haskell-like language though
2021-09-10 22:04:54	janus	what would be the difference between haskellscript and cabal script?
2021-09-10 22:05:24	texasmynsted	Maybe there is some part of nix that could be used this way
2021-09-10 22:05:44	geekosaur	arguably hugs is haskellscript
2021-09-10 22:06:00	sm	a "cabal/stack script" is haskell, requiring all the know-how and toolchain etc. "haskellscript" is an easier low-install just-works no-compilation-step language
2021-09-10 22:06:36	→	dunj3 has joined #haskell
2021-09-10 22:06:51	←	amitnjha has quit (Quit: amitnjha)
2021-09-10 22:07:06	→	amitnjha has joined #haskell
2021-09-10 22:07:07	geekosaur	the remaining problem is "already installed everywhere" which, well, glwt
2021-09-10 22:07:19	janus	aah ok, so we're talking about how all linux distros have a python interpreter with most of the stdlib installed by default
2021-09-10 22:07:22	dminuoso	If you need `already installed everywhere`, there's realistically only sh, bash and perl.
2021-09-10 22:07:40	geekosaur	python also fits, especially these days
2021-09-10 22:07:59	geekosaur	and most machines have some flavor of js around
2021-09-10 22:08:06	sm	it might look like modern tooling like deno or zig, where you download one small executable for any platform and it does everything (build, run, stdlib, packages  etc)
2021-09-10 22:08:20	←	brandonh has quit (Quit: brandonh)
2021-09-10 22:08:32	→	__monty__ has joined #haskell
2021-09-10 22:10:05	janus	would be intresting to see if it is possible to have a distro with all the usual linux parts written in haskell
2021-09-10 22:10:17	janus	like, how hard is it to write an init system in haskell?
2021-09-10 22:10:24	→	pavonia has joined #haskell
2021-09-10 22:10:50	janus	and how hard would it be to provide systemd-like services written in haskell? i guess the ghc api is not geared for that now
2021-09-10 22:11:41	sm	there was http://programatica.cs.pdx.edu/House/
2021-09-10 22:11:56	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-10 22:12:02	geekosaur	sadly that requires a lot of signal hhandling, and the ghc runtime's signal handling is badly broken
2021-09-10 22:12:03	janus	right, but wasn't that lower level? it mentions vga and ps2
2021-09-10 22:12:35	sm	oh, well there's https://hackage.haskell.org/package/angel, is that the sort of thing ?
2021-09-10 22:13:15	janus	yeah i was thinking of something like systemd
2021-09-10 22:13:28	janus	this is way simpler probably if it is inspired by djb
2021-09-10 22:13:43	janus	but i guess the systemd debate is another can o worms :P
2021-09-10 22:15:10	←	sneedsfeed has quit (Ping timeout: 256 seconds)
2021-09-10 22:15:16	→	brandonh_ has joined #haskell
2021-09-10 22:15:41	janus	geekosaur: do you have any links about what is wrong with the RTS? just curious
2021-09-10 22:16:21	geekosaur	most of them are not well documented. talk to merijn, pretty sure he can give you a lot of detail
2021-09-10 22:16:37	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-10 22:16:52	geekosaur	...timing
2021-09-10 22:16:55	janus	i don't wanna bother people too much since i don't really have an actual problem, just armchair programming here :P
2021-09-10 22:17:30	geekosaur	trust me, if merijn had been paying attention here he'd have jumped in immediately and volubly :)
2021-09-10 22:17:31	__monty__	Don't worry merijn likes being vocal about it : )
2021-09-10 22:18:56	→	ec_ has joined #haskell
2021-09-10 22:20:36	dminuoso	And very emotional.
2021-09-10 22:21:23	⚡	texasmynsted googles deno and zig
2021-09-10 22:23:40	→	mikoto-chan has joined #haskell
2021-09-10 22:23:52	←	brandonh_ has quit (Ping timeout: 265 seconds)
2021-09-10 22:24:24	→	mc47 has joined #haskell
2021-09-10 22:25:31	→	brandonh has joined #haskell
2021-09-10 22:25:39	sm	yes https://ziglang.org, https://deno.land, good inspiration for us haskellers
2021-09-10 22:26:38	Hecate	one day we'll have `cabal build --target <triplet>`
2021-09-10 22:27:02	texasmynsted	wow, both zig and deno are fascinating 
2021-09-10 22:27:11	←	amitnjha has quit (Quit: amitnjha)
2021-09-10 22:27:27	→	amitnjha has joined #haskell
2021-09-10 22:27:51	⚡	texasmynsted now wonders if Unsion could be made to work this way
2021-09-10 22:28:43	sm	they are winners, we should interop with them :)
2021-09-10 22:31:06	←	mc47 has quit (Ping timeout: 252 seconds)
2021-09-10 22:32:37	maerwald	we can barely interop with C++
2021-09-10 22:32:48	→	econo has joined #haskell
2021-09-10 22:37:01	→	justsomeguy has joined #haskell
2021-09-10 22:37:32	←	amitnjha has quit (Quit: amitnjha)
2021-09-10 22:37:45	→	amitnjha has joined #haskell
2021-09-10 22:39:03	→	kayprish has joined #haskell
2021-09-10 22:39:28	←	hpc has quit (Ping timeout: 252 seconds)
2021-09-10 22:39:44	→	merijn has joined #haskell
2021-09-10 22:39:47	→	proofofkeags_ has joined #haskell
2021-09-10 22:39:53	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-10 22:41:22	→	hpc has joined #haskell
2021-09-10 22:44:38	kuribas	hmm, I have a exe and a library, it doesn't seem that stack recompiles when I just change the library...
2021-09-10 22:47:13	→	ec_ has joined #haskell
2021-09-10 22:47:46	→	gehmehgeh has joined #haskell
2021-09-10 22:48:30	kuribas	strange, now it does...
2021-09-10 22:52:20	→	jinsun has joined #haskell
2021-09-10 22:56:53	←	merijn has quit (Ping timeout: 260 seconds)
2021-09-10 22:59:18	←	justsomeguy has quit (Ping timeout: 252 seconds)
2021-09-10 22:59:31	maerwald	kuribas: why are you using stack again? You don't seem like you're enjoying it
2021-09-10 23:00:18	kuribas	maerwald: it's not about enjoying, about letting my coworkers use intellij...
2021-09-10 23:00:28	maerwald	that only works with stack?
2021-09-10 23:00:33	kuribas	maerwald: yeah
2021-09-10 23:00:39	maerwald	also, why not use stack2cabal?
2021-09-10 23:00:47	kuribas	it works ok with the latests snapshot.
2021-09-10 23:01:12	maerwald	you don't have to be confined to stack just bc your coworkers use it
2021-09-10 23:01:42	dminuoso	maerwald: really?
2021-09-10 23:01:53	dminuoso	does stack2cabal generate appropriate constraints matching the resolver?
2021-09-10 23:01:56	maerwald	yes
2021-09-10 23:02:00	dminuoso	Ah great.
2021-09-10 23:02:02	kuribas	maerwald: I cannot force them to use emacs :)
2021-09-10 23:02:04	kuribas	or vim
2021-09-10 23:02:22	maerwald	dminuoso: it doesn't understand ALL pantry syntax (most users don't use all of it) and doesn't translate flags yet
2021-09-10 23:02:29	glguy	maerwald: assuming it was you, thanks for getting cabal-install-3.6.0.0 into ghcup so quickly
2021-09-10 23:02:33	maerwald	but works on non-trivial projects
2021-09-10 23:06:38	maerwald	glguy: it took so long because I had to build darwin-aarch64 bindists and then got stuck with CI
2021-09-10 23:06:59	maerwald	there are no official darwin-aarch64 bindists
2021-09-10 23:07:33	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-10 23:08:29	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-10 23:08:47	maerwald	I think github actions still doesn't provide it
2021-09-10 23:08:53	←	eggplantade has quit (Remote host closed the connection)
2021-09-10 23:08:55	←	mikoto-chan has quit (Quit: mikoto-chan)
2021-09-10 23:15:23	←	vicfred has quit (Quit: Leaving)
2021-09-10 23:15:40	→	ec_ has joined #haskell
2021-09-10 23:18:21	←	alanz has quit (Ping timeout: 250 seconds)
2021-09-10 23:18:21	←	obviyus has quit (Ping timeout: 250 seconds)
2021-09-10 23:18:21	←	b20n has quit (Ping timeout: 250 seconds)
2021-09-10 23:18:41	←	totbwf__ has quit (Read error: Connection reset by peer)
2021-09-10 23:18:41	←	bradparker has quit (Read error: Connection reset by peer)
2021-09-10 23:18:41	←	systemfault has quit (Read error: Connection reset by peer)
2021-09-10 23:18:43	←	etrepum has quit (Read error: Connection reset by peer)
2021-09-10 23:18:43	←	T_S_ has quit (Read error: Connection reset by peer)
2021-09-10 23:18:43	←	davetapley has quit (Read error: Connection reset by peer)
2021-09-10 23:18:55	←	aarchi has quit (Read error: Connection reset by peer)
2021-09-10 23:19:05	←	SrPx has quit (Read error: Connection reset by peer)
2021-09-10 23:19:05	←	vito has quit (Write error: Connection reset by peer)
2021-09-10 23:20:17	→	justsomeguy has joined #haskell
2021-09-10 23:20:31	←	stevenxl has quit (Ping timeout: 250 seconds)
2021-09-10 23:21:09	→	alanz has joined #haskell
2021-09-10 23:21:12	→	davetapley has joined #haskell
2021-09-10 23:21:14	→	etrepum has joined #haskell
2021-09-10 23:21:19	→	T_S_ has joined #haskell
2021-09-10 23:21:19	→	SrPx has joined #haskell
2021-09-10 23:21:32	→	b20n has joined #haskell
2021-09-10 23:21:45	→	totbwf__ has joined #haskell
2021-09-10 23:21:52	→	obviyus has joined #haskell
2021-09-10 23:22:21	→	systemfault has joined #haskell
2021-09-10 23:22:28	→	aarchi has joined #haskell
2021-09-10 23:22:32	→	vito has joined #haskell
2021-09-10 23:22:33	→	bradparker has joined #haskell
2021-09-10 23:23:39	→	MQ-17J has joined #haskell
2021-09-10 23:23:48	←	wroathe has quit (Ping timeout: 265 seconds)
2021-09-10 23:24:35	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-10 23:24:45	→	stevenxl has joined #haskell
2021-09-10 23:24:53	→	MQ-17J has joined #haskell
2021-09-10 23:27:55	→	wroathe has joined #haskell
2021-09-10 23:27:55	←	wroathe has quit (Changing host)
2021-09-10 23:27:55	→	wroathe has joined #haskell
2021-09-10 23:31:42	jneira[m]	<maerwald> "I think github actions still..." <- nope, the gitlab arm image is gold for now
2021-09-10 23:32:12	maerwald	they aren't cheap :)
2021-09-10 23:33:44	←	kuribas has quit (Quit: ERC (IRC client for Emacs 26.3))
2021-09-10 23:34:02	→	asivitz has joined #haskell
2021-09-10 23:35:38	←	brandonh has quit (Quit: brandonh)
2021-09-10 23:36:26	←	ec_ has quit (Ping timeout: 276 seconds)
2021-09-10 23:36:51	←	MQ-17J has quit (Ping timeout: 265 seconds)
2021-09-10 23:37:10	→	MQ-17J has joined #haskell
2021-09-10 23:37:39	←	wroathe has quit (Ping timeout: 252 seconds)
2021-09-10 23:38:12	←	alx741 has quit (Ping timeout: 252 seconds)
2021-09-10 23:40:35	→	xsperry has joined #haskell
2021-09-10 23:44:42	→	abhixec has joined #haskell
2021-09-10 23:47:51	←	amitnjha has quit (Quit: amitnjha)
2021-09-10 23:48:06	→	amitnjha has joined #haskell
2021-09-10 23:52:49	→	alx741 has joined #haskell
2021-09-10 23:54:06	←	justsomeguy has quit (Quit: WeeChat 3.2)
2021-09-10 23:54:13	→	wroathe has joined #haskell
2021-09-10 23:54:14	←	wroathe has quit (Changing host)
2021-09-10 23:54:14	→	wroathe has joined #haskell
2021-09-10 23:54:20	→	eggplantade has joined #haskell
2021-09-10 23:59:05	←	wroathe has quit (Ping timeout: 265 seconds)
2021-09-10 23:59:52	←	MQ-17J has quit (Remote host closed the connection)
2021-09-11 00:01:17	→	MQ-17J has joined #haskell
2021-09-11 00:02:17	←	dyeplexer has quit (Remote host closed the connection)
2021-09-11 00:02:49	→	pooryorick has joined #haskell
2021-09-11 00:03:30	←	MQ-17J has quit (Remote host closed the connection)
2021-09-11 00:05:44	←	max22- has quit (Ping timeout: 260 seconds)
2021-09-11 00:08:14	mrianbloom	Does anyone know how to persuade cabal to notice when an embedded file has changed?
2021-09-11 00:08:21	→	pmk has joined #haskell
2021-09-11 00:09:10	sclv	add it to the extra-files iirc
2021-09-11 00:09:36	lechner	Hi, which type does Lucid's title_ take, please? Efforts to replace a literal string with Text or a String produce errors like this:    https://dpaste.org/th9v
2021-09-11 00:09:58	sclv	mrianbloom: `extra-source-files` rather
2021-09-11 00:11:09	[exa]	lechner: you may put an underscore instead of the title_ and see what ghc thinks should be there
2021-09-11 00:11:40	mrianbloom	sclv : I see, trying that out.
2021-09-11 00:12:42	geekosaur	at a guess, Html has an IsString instance
2021-09-11 00:12:54	geekosaur	that produces an html-encoded literal string
2021-09-11 00:13:11	geekosaur	(properly escaped etc.)
2021-09-11 00:13:59	[exa]	I have to say the type on hoogle is opaque
2021-09-11 00:14:10	[exa]	title :: Term arg result => arg -> result
2021-09-11 00:14:24	lechner	[exa]: thanks! here it is. (Take another look at the nice short URL!) maybe i should pass the expression (title_ "Literal") instead?     https://dpaste.org/buGs
2021-09-11 00:14:32	[exa]	title = term "title"
2021-09-11 00:14:58	→	ec_ has joined #haskell
2021-09-11 00:15:24	lechner	i posted this by accident on #hackage earlier       Hi, is the name 'result' appropriate fo a type?   https://hackage.haskell.org/package/lucid-2.9.12.1/docs/Lucid-Html5.html
2021-09-11 00:16:31	[exa]	lechner: I guess you want to add another custom tag into the head?
2021-09-11 00:16:56	[exa]	anyway `result` is technically perfectly same type variable name as `a` or `b` or `oiruweoiruqweiurqwioeruqwiur`
2021-09-11 00:16:57	lechner	[exa]: just a page title, really
2021-09-11 00:17:53	lechner	maybe those types are chainable. i think i have to pass   (title- "Literal"0 :: Html
2021-09-11 00:17:59	lechner	titel_
2021-09-11 00:18:04	lechner	title_
2021-09-11 00:18:10	[exa]	then `title_ "YourTitle"` should work
2021-09-11 00:18:11	mrianbloom	sclv FYYI that doesn't seem to work. I also tried data-files
2021-09-11 00:18:28	[exa]	the problem with title_ is that they want it both as a tag and as argument, therefore the typeclass in there
2021-09-11 00:18:58	maerwald	extra-source-files should work
2021-09-11 00:19:00	sclv	i'm pretty sure extra-source-files works, if you have a recent enough cabal
2021-09-11 00:19:06	sclv	i just tested/improved it
2021-09-11 00:19:32	maerwald	how do you embed the file?
2021-09-11 00:20:33	maerwald	I'm not sure if `qAddDependentFile` makes any difference in the TH expression
2021-09-11 00:21:00	lechner	[exa]: thanks! maybe one day i'll understand why
2021-09-11 00:21:21	maerwald	https://hackage.haskell.org/package/file-embed
2021-09-11 00:21:47	maerwald	https://github.com/snoyberg/file-embed/blob/548430d2a79bb6f4cb4256768761071f59909aa5/file-embed.cabal#L16
2021-09-11 00:21:48	maerwald	checks out
2021-09-11 00:22:35	sclv	adding a dependent file hints ghc, but it can't get transmitted back to cabal -- there's no interface for it
2021-09-11 00:22:50	[exa]	lechner: anyway you need to wrap the inner `pageTitle` into HTML
2021-09-11 00:23:02	→	brandonh has joined #haskell
2021-09-11 00:23:04	←	eggplantade has quit (Remote host closed the connection)
2021-09-11 00:23:06	[exa]	lechner: in the instance you can see that title_ doesn't wrap text, it needs inner html already
2021-09-11 00:23:19	[exa]	s/instance/error message with the instance/
2021-09-11 00:23:44	lechner	[exa]: but how does the overloaded string satisfy it?
2021-09-11 00:24:17	geekosaur	fromString provided by the IsString instance
2021-09-11 00:24:24	[exa]	overloaded strings only work with string literals
2021-09-11 00:24:36	[exa]	it's not an autoconversion
2021-09-11 00:25:17	lechner	i thought they only provide String, ByteString and Text, but that must be wrong
2021-09-11 00:25:37	geekosaur	those are the standard ones. the package you're using added one
2021-09-11 00:25:48	geekosaur	remember, typeclasses are open
2021-09-11 00:26:11	geekosaur	you could define your own IsString instance for some type and OverloadedStrings would start working with it
2021-09-11 00:26:21	lechner	not the first time i saw type magic here. so cool!
2021-09-11 00:26:30	janus	sclv: so in summary, addDependentFile and extra-source-files should be sufficient to always get the right modules build when the embedded file changes?
2021-09-11 00:27:56	lechner	[exa]: did you mean "Html ()" when you referred to html inner?
2021-09-11 00:28:00	[exa]	is there anything standard that would do `FromString a => Text -> a` ?
2021-09-11 00:28:25	[exa]	lechner: quick check: if you write `title_ "asasdasd"` it works, right?
2021-09-11 00:28:38	sclv	i believe so. also file-embed should be calling addDependentFile for you https://hackage.haskell.org/package/file-embed-0.0.15.0/docs/src/Data.FileEmbed.html
2021-09-11 00:28:39	lechner	yes, with a literal
2021-09-11 00:28:44	ℹ	irc: disconnected from server
2021-09-11 11:05:46	→	oxide has joined #haskell
2021-09-11 11:05:46	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-11 11:05:46	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-11 11:05:46	ℹ	Channel #haskell: 721 nicks (1 op, 0 voices, 720 normals)
2021-09-11 11:05:46	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-11 11:10:21	←	amitnjha has quit (Quit: amitnjha)
2021-09-11 11:10:25	→	haskl[error] has joined #haskell
2021-09-11 11:10:26	←	haskl has quit (Ping timeout: 256 seconds)
2021-09-11 11:10:36	→	amitnjha has joined #haskell
2021-09-11 11:13:12	awpr	wrote one
2021-09-11 11:14:28	awpr	it's pretty straightforward/mechanical to write a bitraverse function for `Node`, and then with some kinda tricky recursion you can thread that through the tree to get a traverse for `MyTree`
2021-09-11 11:14:53	hololeap	ok, I actually have bitraverse for Node written
2021-09-11 11:16:02	←	slowButPresent has quit (Quit: leaving)
2021-09-11 11:17:29	hololeap	awpr: would you mind sharing what you wrote?
2021-09-11 11:19:11	→	Cajun has joined #haskell
2021-09-11 11:19:33	awpr	`go (Fix node) = Fix <$> bitraverseNode f go node` is the core part of it
2021-09-11 11:24:18	hololeap	awpr: awesome, it works!
2021-09-11 11:30:30	awpr	I think you're right that that other type signature requires Monad.  I haven't figured out a way to factor the recursion out of this implementation, but it seems like it should be possible
2021-09-11 11:33:05	→	lavaman has joined #haskell
2021-09-11 11:35:42	←	amitnjha has quit (Quit: amitnjha)
2021-09-11 11:35:55	→	amitnjha has joined #haskell
2021-09-11 11:37:06	←	zaquest has quit (Ping timeout: 260 seconds)
2021-09-11 11:37:36	←	lavaman has quit (Ping timeout: 252 seconds)
2021-09-11 11:38:58	←	wroathe has quit (Ping timeout: 265 seconds)
2021-09-11 11:51:31	→	falafel has joined #haskell
2021-09-11 11:52:02	←	xff0x has quit (Ping timeout: 260 seconds)
2021-09-11 11:52:56	→	xff0x has joined #haskell
2021-09-11 11:55:56	→	wroathe has joined #haskell
2021-09-11 11:55:56	←	wroathe has quit (Changing host)
2021-09-11 11:55:56	→	wroathe has joined #haskell
2021-09-11 11:57:05	←	seeg has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-11 11:57:48	→	seeg has joined #haskell
2021-09-11 11:58:06	←	nicbk has quit (Ping timeout: 276 seconds)
2021-09-11 11:59:36	hololeap	awpr: I think this is about as abstract as it gets: http://sprunge.us/HUBf35
2021-09-11 12:00:09	→	Lycurgus has joined #haskell
2021-09-11 12:00:20	ℹ	irc: disconnected from server
2021-09-12 12:41:32	→	oxide has joined #haskell
2021-09-12 12:41:32	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-12 12:41:32	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-12 12:41:32	ℹ	Channel #haskell: 716 nicks (1 op, 0 voices, 715 normals)
2021-09-12 12:41:33	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-12 12:43:04	←	zmt01 has quit (Ping timeout: 252 seconds)
2021-09-12 12:43:30	←	Erutuon has quit (Ping timeout: 252 seconds)
2021-09-12 12:45:26	←	favonia has quit (Ping timeout: 245 seconds)
2021-09-12 12:46:28	→	favonia has joined #haskell
2021-09-12 12:51:02	←	amitnjha has quit (Quit: amitnjha)
2021-09-12 12:51:15	→	amitnjha has joined #haskell
2021-09-12 12:51:40	ldlework	Cajun: when I change `mappend` to `(<>)` it says ‘<>’ is not a (visible) method of class ‘Monoid’
2021-09-12 12:51:59	Cajun	define (<>) in a Semigroup instance 
2021-09-12 12:52:20	Cajun	monoids are semigroups, and the append operation comes from the Semigroup instance
2021-09-12 12:52:44	Cajun	if youre reading an article/textbook and its telling you to just define a monoid with mappend, its because its dated
2021-09-12 12:53:09	ldlework	oh so literally implement an instance of Semigroup which is where (<>) is defined?
2021-09-12 12:53:17	Cajun	yup!
2021-09-12 12:53:47	Cajun	mappend only exists as a legacy function, its unlawful to have its definition be different than the Semigroup definition
2021-09-12 12:53:51	ldlework	Cajun: is there some other version of mempty to use too?
2021-09-12 12:54:02	Cajun	no
2021-09-12 12:54:07	ldlework	okay thanks for the guidance
2021-09-12 12:54:59	Cajun	Semigroups are a datatype that can append, but not necessarily have a unit/empty value. monoids can append (because they are instances of Semigroup) and they have an empty/unit value (because thats what it means to be a monoid)
2021-09-12 12:55:25	Cajun	semigroups are a typeclass that implements an*
2021-09-12 12:55:50	←	homarlone has quit (Quit: Client closed)
2021-09-12 12:56:20	←	jpds has quit (Ping timeout: 276 seconds)
2021-09-12 12:56:27	→	homarlone has joined #haskell
2021-09-12 12:57:23	ldlework	Cajun: is there an interactive site where you can explore these relationships
2021-09-12 12:57:32	→	jpds has joined #haskell
2021-09-12 12:57:49	→	acidjnk_new has joined #haskell
2021-09-12 12:58:03	Cajun	you can check the documentation or the wiki but im not sure if there is anything that is interactive
2021-09-12 12:58:07	Cajun	https://wiki.haskell.org/Data.Semigroup
2021-09-12 12:58:48	ldlework	Ah, I wonder if the network could be extracted systematically from Haskell source
2021-09-12 12:59:19	ldlework	Or maybe haskell is powerful enough to introspectively compute it?
2021-09-12 12:59:29	Cajun	it would be cool to see a web for that like there are for dependencies
2021-09-12 12:59:37	ldlework	yeah!
2021-09-12 13:00:14	Cajun	https://wiki.haskell.org/File:Typeclassopedia-diagram.png
2021-09-12 13:00:27	ldlework	ah neato
2021-09-12 13:01:22	←	amitnjha has quit (Quit: amitnjha)
2021-09-12 13:01:36	→	amitnjha has joined #haskell
2021-09-12 13:01:56	←	phma has quit (Read error: Connection reset by peer)
2021-09-12 13:02:46	→	phma has joined #haskell
2021-09-12 13:12:46	→	max22- has joined #haskell
2021-09-12 13:15:34	←	hyiltiz has quit (Ping timeout: 252 seconds)
2021-09-12 13:15:49	→	hyiltiz has joined #haskell
2021-09-12 13:16:18	←	syntactic_sugar has quit (Quit: WeeChat 3.1)
2021-09-12 13:16:21	mjrosenb	so, I have a function that uses the lens function `use`, and now I'm trying to change it to accept `use` as a parameter, but the types are not behaving.
2021-09-12 13:16:29	mjrosenb	is it even possible to do this?
2021-09-12 13:18:00	ℹ	irc: disconnected from server
2021-09-16 17:37:09	→	oxide has joined #haskell
2021-09-16 17:37:09	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-16 17:37:09	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-16 17:37:09	ℹ	Channel #haskell: 724 nicks (1 op, 0 voices, 723 normals)
2021-09-16 17:37:10	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-16 17:37:22	←	Guest3036 has quit (Ping timeout: 252 seconds)
2021-09-16 17:38:17	→	cuz has joined #haskell
2021-09-16 17:39:29	←	cuz has quit (Remote host closed the connection)
2021-09-16 17:39:53	→	cuz has joined #haskell
2021-09-16 17:41:11	←	merijn has quit (Ping timeout: 240 seconds)
2021-09-16 17:41:11	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-16 17:41:23	→	Vajb has joined #haskell
2021-09-16 17:44:24	←	waleee has quit (Quit: WeeChat 3.2.1)
2021-09-16 17:46:34	←	hololeap has quit (Ping timeout: 276 seconds)
2021-09-16 17:46:40	→	zer0bitz_ has joined #haskell
2021-09-16 17:47:16	→	hololeap has joined #haskell
2021-09-16 17:47:49	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-16 17:48:39	→	Vajb has joined #haskell
2021-09-16 17:48:57	←	zer0bitz has quit (Ping timeout: 265 seconds)
2021-09-16 17:53:25	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-16 17:53:58	→	Vajb has joined #haskell
2021-09-16 17:55:24	→	dsrt^ has joined #haskell
2021-09-16 17:56:45	sshine	> let (┻━┻) = intersperse 'f'; ノಠ益ಠノ = "Python" in (ノಠ益ಠノ ┻━┻)
2021-09-16 17:56:46	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-16 17:56:46	lambdabot	 "Pfyftfhfofn"
2021-09-16 17:57:21	→	Vajb has joined #haskell
2021-09-16 17:58:40	Hecate	https://www.unicode.org/versions/Unicode14.0.0/ it's out!
2021-09-16 17:58:57	→	jtomas has joined #haskell
2021-09-16 18:00:01	←	neurocyte has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-16 18:00:42	sshine	🥳 𝕪𝕒𝕪!
2021-09-16 18:00:55	←	dsrt^ has quit (Remote host closed the connection)
2021-09-16 18:03:06	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-16 18:04:07	→	neurocyte has joined #haskell
2021-09-16 18:04:08	←	neurocyte has quit (Changing host)
2021-09-16 18:04:08	→	neurocyte has joined #haskell
2021-09-16 18:05:34	→	Vajb has joined #haskell
2021-09-16 18:05:59	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-16 18:06:00	←	bitdex has quit (Quit: = "")
2021-09-16 18:06:09	→	Vajb has joined #haskell
2021-09-16 18:08:04	→	machinedgod has joined #haskell
2021-09-16 18:10:20	sshine	wow, you can sponsor a unicode character: https://www.unicode.org/consortium/adopt-a-character.html
2021-09-16 18:12:50	→	nedh^ has joined #haskell
2021-09-16 18:15:07	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-16 18:16:04	→	Vajb has joined #haskell
2021-09-16 18:18:38	←	xff0x has quit (Ping timeout: 252 seconds)
2021-09-16 18:19:33	→	juhp has joined #haskell
2021-09-16 18:23:13	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-16 18:24:02	→	Vajb has joined #haskell
2021-09-16 18:24:48	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-16 18:25:32	→	xff0x has joined #haskell
2021-09-16 18:25:38	←	burnsidesLlama has quit (Remote host closed the connection)
2021-09-16 18:26:01	→	Cajun has joined #haskell
2021-09-16 18:26:05	Hecate	% scanl1 (+) . map (succ . length) $ [["lol", "mdr", "haha"], ["blah", "bleh"]]
2021-09-16 18:26:06	yahb	Hecate: [4,7]
2021-09-16 18:29:35	→	benin036932301 has joined #haskell
2021-09-16 18:29:53	sshine	> ('o':) . pure . chr . foldl1 (\x y -> 10*x+y) . scanl1 (+) . map (succ . length) $ [["lol", "mdr", "haha"], ["blah", "bleh"]]
2021-09-16 18:29:55	lambdabot	 "o/"
2021-09-16 18:31:09	→	chris has joined #haskell
2021-09-16 18:31:13	ℹ	chris is now known as Guest7647
2021-09-16 18:32:39	←	AlexNoo has quit (Quit: Leaving)
2021-09-16 18:33:27	←	Alex_test has quit (Quit: ;-)
2021-09-16 18:33:34	←	AlexZenon has quit (Quit: ;-)
2021-09-16 18:33:57	→	ph88 has joined #haskell
2021-09-16 18:36:41	←	ph88^ has quit (Ping timeout: 240 seconds)
2021-09-16 18:36:42	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-16 18:36:56	→	shapr has joined #haskell
2021-09-16 18:37:31	→	Vajb has joined #haskell
2021-09-16 18:39:32	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-16 18:39:53	→	Vajb has joined #haskell
2021-09-16 18:42:41	←	hendursa2 has quit (Quit: hendursa2)
2021-09-16 18:42:57	←	jstolarek has quit (Ping timeout: 268 seconds)
2021-09-16 18:43:13	→	jstolarek has joined #haskell
2021-09-16 18:43:29	→	hendursaga has joined #haskell
2021-09-16 18:43:59	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-16 18:44:05	←	zer0bitz_ has quit (Ping timeout: 252 seconds)
2021-09-16 18:45:04	→	Vajb has joined #haskell
2021-09-16 18:47:28	→	Lycurgus has joined #haskell
2021-09-16 18:47:41	←	vysn has quit (Ping timeout: 268 seconds)
2021-09-16 18:48:18	←	jstolarek has quit (Ping timeout: 268 seconds)
2021-09-16 18:49:43	→	jokleinn has joined #haskell
2021-09-16 18:50:05	→	jstolarek has joined #haskell
2021-09-16 18:54:43	→	goepsilongo has joined #haskell
2021-09-16 18:56:56	→	burnsidesLlama has joined #haskell
2021-09-16 18:57:08	→	AlexZenon has joined #haskell
2021-09-16 18:57:51	←	AlexZenon has quit (Client Quit)
2021-09-16 18:58:10	←	hammock has quit (Ping timeout: 268 seconds)
2021-09-16 18:58:10	→	AlexZenon has joined #haskell
2021-09-16 18:58:19	→	AlexNoo has joined #haskell
2021-09-16 18:59:58	→	Alex_test has joined #haskell
2021-09-16 19:00:28	→	motherfsck has joined #haskell
2021-09-16 19:01:20	→	System123 has joined #haskell
2021-09-16 19:01:51	→	Sgeo has joined #haskell
2021-09-16 19:02:31	←	burnsidesLlama has quit (Ping timeout: 260 seconds)
2021-09-16 19:06:28	←	jstolarek has quit (Read error: Connection reset by peer)
2021-09-16 19:07:07	→	tromp has joined #haskell
2021-09-16 19:09:04	→	jstolarek has joined #haskell
2021-09-16 19:11:22	→	tito has joined #haskell
2021-09-16 19:13:24	←	Guest7647 has quit (Remote host closed the connection)
2021-09-16 19:19:03	←	gehmehgeh has quit (Quit: Leaving)
2021-09-16 19:19:23	→	max22- has joined #haskell
2021-09-16 19:20:15	←	jokleinn has quit (Ping timeout: 260 seconds)
2021-09-16 19:20:21	kuribas	We are getting this error on macOs:  Undefined symbols for architecture x86_64: >   "___darwin_check_fd_set_overflow", referenced from: >       _awaitEvent in libHSrts.a(Select.o) > ld: symbol(s) not found for architecture x86_64 > clang: error: linker command failed with exit code 1 (use -v to see invocation) > `gcc' failed in phase `Linker'. (Exit code: 1)
2021-09-16 19:23:21	maerwald	kuribas: https://gitlab.haskell.org/ghc/ghc/-/issues/19950
2021-09-16 19:23:43	maerwald	seems you're not running 8.10.7
2021-09-16 19:25:18	kuribas	ghc?
2021-09-16 19:25:28	maerwald	yeah
2021-09-16 19:26:11	kuribas	8.10.7
2021-09-16 19:26:17	kuribas	8.10.6 sorry
2021-09-16 19:26:21	maerwald	yeah
2021-09-16 19:26:45	→	chris has joined #haskell
2021-09-16 19:26:48	ℹ	chris is now known as Guest9212
2021-09-16 19:27:08	←	Guest9212 has quit (Read error: Connection reset by peer)
2021-09-16 19:28:38	→	chris has joined #haskell
2021-09-16 19:28:42	ℹ	chris is now known as Guest3568
2021-09-16 19:29:44	kuribas	isn't it risky to run bleeding edge?
2021-09-16 19:29:53	kuribas	this is what I don't like about stack.
2021-09-16 19:31:02	maerwald	kuribas: you can use my stack ghc install hooks :p
2021-09-16 19:31:16	maerwald	but it's not upstreamed
2021-09-16 19:31:32	→	ubert1 has joined #haskell
2021-09-16 19:31:47	→	juhp_ has joined #haskell
2021-09-16 19:32:22	←	ubert has quit (Ping timeout: 252 seconds)
2021-09-16 19:32:23	ℹ	ubert1 is now known as ubert
2021-09-16 19:32:47	←	juhp_ has quit (Read error: Connection reset by peer)
2021-09-16 19:32:50	←	jespada has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-09-16 19:33:19	ℹ	sm2n_ is now known as sm2n
2021-09-16 19:33:20	←	juhp has quit (Read error: Connection reset by peer)
2021-09-16 19:33:28	→	juhp has joined #haskell
2021-09-16 19:34:06	maerwald	allows you to provide a shell script that performs installation/discovery of ghc
2021-09-16 19:34:08	←	System123 has quit (Ping timeout: 268 seconds)
2021-09-16 19:34:28	maerwald	so the shell script gets "need 8.10.6" as input and you can just install 8.10.7 instead
2021-09-16 19:34:59	maerwald	micro version barely matters for dependency resolution anyway
2021-09-16 19:36:36	←	nedh^ has quit (Ping timeout: 268 seconds)
2021-09-16 19:36:42	maerwald	https://downloads.haskell.org/~ghcup/unofficial-bindists/stack/2.7.3.1/ 
2021-09-16 19:36:48	maerwald	example hook https://paste.tomsmeding.com/NI4H4xT3
2021-09-16 19:36:58	maerwald	needs to be placed in ~/.stack/hooks/
2021-09-16 19:37:22	→	merijn has joined #haskell
2021-09-16 19:38:36	ℹ	irc: disconnected from server
2021-09-17 13:45:35	→	oxide has joined #haskell
2021-09-17 13:45:35	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-17 13:45:35	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-17 13:45:35	ℹ	Channel #haskell: 716 nicks (1 op, 0 voices, 715 normals)
2021-09-17 13:45:36	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-17 13:47:09	kenran	I think I've let the easy testability of polysemy-based code convince me a bit too easily ("changing your interpreter for a test is just using another function", but I've yet to actually use it as much as I'd like :D
2021-09-17 13:47:44	→	allbery_b has joined #haskell
2021-09-17 13:47:44	←	geekosaur has quit (Killed (NickServ (GHOST command used by allbery_b)))
2021-09-17 13:47:46	ℹ	allbery_b is now known as geekosaur
2021-09-17 13:48:01	→	benin036932301 has joined #haskell
2021-09-17 13:48:48	kuribas	Not having global state is the biggest advantage.
2021-09-17 13:49:03	kuribas	or better, "invisible" global state.
2021-09-17 13:49:16	dminuoso	It's all a trade off. Sometimes I think people spend way too much time and effort in restructuring with effect systems on the misbelief, that being able to "plug in different interpreters" will yield valuable net results.
2021-09-17 13:49:35	kenran	dminuoso: yep, that's definitely true
2021-09-17 13:49:38	dminuoso	It feels it comes at the price of readability and maintainability. When you need to become a polysemy expert just to interact and deal with the code, Im not sure much was won.
2021-09-17 13:51:05	kenran	Honestly, the same goes for me trying to write mtl/tagless-final style code, too. My experience with polysemy in particular was that it improves upon that style, but if the code I transform is already wrongly based on the (dis)belief you mention, there's definitely nothing won, and time lost
2021-09-17 13:51:17	dminuoso	It reminds me how some projects spent endless amount of time on pleasing some coverage tester, convincing themselves that having 100% coverage means there's less bugs.
2021-09-17 13:51:31	→	juhp has joined #haskell
2021-09-17 13:51:33	dminuoso	I wonder whether this is just the Haskell-variant of that.
2021-09-17 13:51:42	kenran	It might just be
2021-09-17 13:52:15	kenran	Lots of the bugs that are not prevented by coverage alone are of the kind that is harder to produce in Haskell when leveraging the type system well
2021-09-17 13:52:55	←	benin036932301 has quit (Ping timeout: 265 seconds)
2021-09-17 13:53:53	←	dtman34 has quit (Ping timeout: 265 seconds)
2021-09-17 14:04:54	←	chele has quit (Remote host closed the connection)
2021-09-17 14:05:54	→	chele has joined #haskell
2021-09-17 14:06:07	←	hnOsmium0001 has quit (Quit: Connection closed for inactivity)
2021-09-17 14:10:58	←	vaucouleur has quit (Read error: Connection reset by peer)
2021-09-17 14:11:16	→	vaucouleur has joined #haskell
2021-09-17 14:13:47	←	jstolarek has quit (Quit: leaving)
2021-09-17 14:13:59	→	jstolarek has joined #haskell
2021-09-17 14:14:33	←	jstolarek has quit (Client Quit)
2021-09-17 14:14:45	→	jstolarek has joined #haskell
2021-09-17 14:16:06	←	jstolarek has quit (Client Quit)
2021-09-17 14:16:18	→	jstolarek has joined #haskell
2021-09-17 14:19:52	→	dtman34 has joined #haskell
2021-09-17 14:22:06	→	favonia has joined #haskell
2021-09-17 14:22:53	←	hyiltiz has quit (Ping timeout: 265 seconds)
2021-09-17 14:25:12	→	hyiltiz has joined #haskell
2021-09-17 14:26:05	←	jonathanx has quit (Remote host closed the connection)
2021-09-17 14:26:23	→	jonathanx has joined #haskell
2021-09-17 14:28:26	←	jespada has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-09-17 14:30:06	←	fabfianda[m] has quit (Quit: You have been kicked for being idle)
2021-09-17 14:30:54	maerwald	dminuoso: polysemy is also very slow
2021-09-17 14:31:08	maerwald	and has questionable semantics
2021-09-17 14:31:39	maerwald	because: effects systems are hard
2021-09-17 14:31:50	dminuoso	The real solution is to have software without errors. Then you dont need error effects.
2021-09-17 14:31:58	maerwald	and yeah, I think this is hype driven development in haskell
2021-09-17 14:31:59	dminuoso	It's why bottom was invented.
2021-09-17 14:32:05	dminuoso	Always error free. :-)
2021-09-17 14:32:18	dminuoso	"hype driven development"
2021-09-17 14:32:21	dminuoso	Interesting expression, had not heard about that
2021-09-17 14:32:24	←	dschrempf has quit (Quit: WeeChat 3.2.1)
2021-09-17 14:32:33	maerwald	there are several blog posts about it (I think bashing NoSQL)
2021-09-17 14:33:31	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-17 14:33:59	dminuoso	NoSQL is an interesting proposition. I stand by my opinion that it's an emergent technology of folks thinking "Who cares about well-principled databases founded on research and academia, you only live once!" for most people. Who cares about transactional safety.
2021-09-17 14:34:25	dminuoso	The fact that MongoDB, not until too long ago crashed and corrupted if the dataset exceeded 4GiB on 32bit systems is just telling..
2021-09-17 14:34:40	maerwald	Afaiu NoSQL was an attempt to solve a very specific performance problem with relational databases. It wasn't intended as general purpose technology
2021-09-17 14:34:57	maerwald	but then it got hyped and here we are
2021-09-17 14:35:11	dminuoso	Sure, though "NoSQL" as a term that comes from that hype.
2021-09-17 14:35:20	dminuoso	I mean memcached is also.. "nosql"
2021-09-17 14:35:38	dminuoso	Though its not new and hipster enough
2021-09-17 14:36:04	maerwald	there's also microservices in town, which is basically "you could have written a library, but that's too easy"
2021-09-17 14:36:39	maerwald	"your library needs a database, a protocol and be part of a kubernetes cluster"
2021-09-17 14:36:40	←	tzh has quit (Quit: zzz)
2021-09-17 14:36:41	dminuoso	One of our hottest postgresql servers serves roughly 5kTX/s.. during the hottest phase of the day. And that's without even trying hard!
2021-09-17 14:36:50	dminuoso	Writing.
2021-09-17 14:36:54	dminuoso	Not reading. :-)
2021-09-17 14:37:22	maerwald	That's the problem with CTOs looking at "what does facebook/google do"
2021-09-17 14:37:29	maerwald	they're solving problems you don't have 
2021-09-17 14:38:10	dminuoso	Of course. I think there's some hope that if you employ the same technologies as google does, you get as large and rich as google.
2021-09-17 14:38:17	maerwald	:D
2021-09-17 14:38:50	→	sim590 has joined #haskell
2021-09-17 14:41:04	dminuoso	It's nothing but an example of cum hoc ergo propter hoc.
2021-09-17 14:41:32	dminuoso	(Or maybe its a different fallacy?)
2021-09-17 14:42:29	maerwald	I think it's just plain stupidity
2021-09-17 14:42:52	maerwald	as plain as white rice (although the latter is more delicious)
2021-09-17 14:44:10	dminuoso	White rice is indeed delicious.
2021-09-17 14:44:21	dminuoso	Especially if cooked with tahdig.
2021-09-17 14:44:28	dminuoso	The only true way to cook rice.
2021-09-17 14:45:26	⚡	[exa] discovers tahdig
2021-09-17 14:45:57	dminuoso	[exa]: Good luck on your endaveours, it took me over two years to make perfect tahdig.
2021-09-17 14:46:13	dminuoso	And it's not even half as perfect as when my Farsi friends do it.
2021-09-17 14:46:16	[exa]	time to rice
2021-09-17 14:46:31	dminuoso	:)
2021-09-17 14:53:17	→	waleee has joined #haskell
2021-09-17 14:56:21	→	eggplantade has joined #haskell
2021-09-17 14:57:15	→	vaucouleur_ has joined #haskell
2021-09-17 14:57:46	→	vaucouleur__ has joined #haskell
2021-09-17 15:00:25	→	fef has joined #haskell
2021-09-17 15:00:35	←	vaucouleur has quit (Ping timeout: 265 seconds)
2021-09-17 15:00:54	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-17 15:01:46	→	vaucouleur has joined #haskell
2021-09-17 15:02:05	←	vaucouleur_ has quit (Ping timeout: 268 seconds)
2021-09-17 15:03:00	←	vaucouleur__ has quit (Ping timeout: 265 seconds)
2021-09-17 15:04:41	→	eggplantade has joined #haskell
2021-09-17 15:08:32	→	merijn has joined #haskell
2021-09-17 15:09:18	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-17 15:10:09	→	pretty_dumm_guy has joined #haskell
2021-09-17 15:12:39	←	[itchyjunk] has quit (Remote host closed the connection)
2021-09-17 15:12:57	→	wonko has joined #haskell
2021-09-17 15:22:02	←	betelgeuse has quit (Quit: Ping timeout (120 seconds))
2021-09-17 15:23:33	←	neurocyte has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-17 15:24:03	→	betelgeuse has joined #haskell
2021-09-17 15:28:52	→	neurocyte0 has joined #haskell
2021-09-17 15:28:53	←	neurocyte0 has quit (Changing host)
2021-09-17 15:28:53	→	neurocyte0 has joined #haskell
2021-09-17 15:29:27	←	betelgeuse has quit (Read error: Connection reset by peer)
2021-09-17 15:30:48	→	betelgeuse has joined #haskell
2021-09-17 15:32:48	←	arkanoid has quit (Quit: WeeChat 2.8)
2021-09-17 15:38:46	←	fendor_ has quit (Ping timeout: 265 seconds)
2021-09-17 15:41:36	→	yauhsien has joined #haskell
2021-09-17 15:43:12	←	merijn has quit (Ping timeout: 268 seconds)
2021-09-17 15:46:53	→	jespada has joined #haskell
2021-09-17 15:49:32	←	yauhsien has quit (Remote host closed the connection)
2021-09-17 15:50:10	→	yauhsien has joined #haskell
2021-09-17 15:55:07	←	yauhsien has quit (Ping timeout: 252 seconds)
2021-09-17 15:55:29	→	thornAvery has joined #haskell
2021-09-17 15:56:03	thornAvery	anyone got experience with `XMPP`, its failing to build (i think because haskell98 fails too) and im wondering whether its worth figuring out or if i should use something else
2021-09-17 15:57:56	maerwald	xmpp?
2021-09-17 15:59:00	→	__monty__ has joined #haskell
2021-09-17 15:59:56	→	fendor_ has joined #haskell
2021-09-17 16:00:00	←	zaquest has quit (Quit: Leaving)
2021-09-17 16:00:39	←	hannessteffenhag has quit (Remote host closed the connection)
2021-09-17 16:01:11	→	zaquest has joined #haskell
2021-09-17 16:02:12	thornAvery	maerwald: https://hackage.haskell.org/package/XMPP
2021-09-17 16:04:21	→	burnsidesLlama has joined #haskell
2021-09-17 16:05:24	←	jakalx has left #haskell (Error from remote client)
2021-09-17 16:07:06	→	burnside_ has joined #haskell
2021-09-17 16:08:40	→	enicar has joined #haskell
2021-09-17 16:09:07	←	enicar has quit (Client Quit)
2021-09-17 16:11:09	←	burnsidesLlama has quit (Ping timeout: 265 seconds)
2021-09-17 16:11:09	←	ksu has quit (Ping timeout: 265 seconds)
2021-09-17 16:20:00	→	yauhsien has joined #haskell
2021-09-17 16:25:20	←	yauhsien has quit (Ping timeout: 268 seconds)
2021-09-17 16:27:56	←	juhp has quit (Read error: Connection reset by peer)
2021-09-17 16:30:48	←	betelgeuse has quit (Quit: Ping timeout (120 seconds))
2021-09-17 16:30:57	→	alx741 has joined #haskell
2021-09-17 16:32:11	→	betelgeuse has joined #haskell
2021-09-17 16:34:12	→	lavaman has joined #haskell
2021-09-17 16:34:21	→	rawles has joined #haskell
2021-09-17 16:34:40	←	fendor_ has quit (Ping timeout: 240 seconds)
2021-09-17 16:38:17	←	leah2 has quit (Ping timeout: 250 seconds)
2021-09-17 16:38:55	←	lavaman has quit (Ping timeout: 260 seconds)
2021-09-17 16:40:31	→	AlexNoo_ has joined #haskell
2021-09-17 16:42:34	←	Alex_test has quit (Ping timeout: 265 seconds)
2021-09-17 16:43:01	←	AlexZenon has quit (Ping timeout: 268 seconds)
2021-09-17 16:44:02	←	AlexNoo has quit (Ping timeout: 260 seconds)
2021-09-17 16:48:03	→	Alex_test has joined #haskell
2021-09-17 16:48:29	→	AlexZenon has joined #haskell
2021-09-17 16:52:07	ℹ	AlexNoo_ is now known as AlexNoo
2021-09-17 16:57:57	→	leah2 has joined #haskell
2021-09-17 16:57:59	→	jakalx has joined #haskell
2021-09-17 17:03:10	←	sim590 has quit (Ping timeout: 240 seconds)
2021-09-17 17:03:26	→	Cajun has joined #haskell
2021-09-17 17:06:03	→	eggplantade has joined #haskell
2021-09-17 17:07:07	→	Tuplanolla has joined #haskell
2021-09-17 17:07:20	→	sim590 has joined #haskell
2021-09-17 17:10:58	←	eggplantade has quit (Ping timeout: 268 seconds)
2021-09-17 17:13:36	←	tcard has quit (Quit: Leaving)
2021-09-17 17:14:46	→	benin036932301 has joined #haskell
2021-09-17 17:14:50	←	sim590 has quit (Ping timeout: 260 seconds)
2021-09-17 17:18:24	→	tcard has joined #haskell
2021-09-17 17:19:01	←	jinsun has quit (Read error: Connection reset by peer)
2021-09-17 17:19:49	←	benin036932301 has quit (Ping timeout: 252 seconds)
2021-09-17 17:20:31	→	jinsun has joined #haskell
2021-09-17 17:23:13	→	Phantastes has joined #haskell
2021-09-17 17:24:35	←	vpan has quit (Quit: Leaving.)
2021-09-17 17:29:52	→	raehik has joined #haskell
2021-09-17 17:30:35	←	jonathanx has quit (Remote host closed the connection)
2021-09-17 17:30:42	←	__monty__ has quit (Ping timeout: 260 seconds)
2021-09-17 17:30:53	→	jonathanx has joined #haskell
2021-09-17 17:32:58	←	max22- has quit (Ping timeout: 268 seconds)
2021-09-17 17:39:16	←	bitdex has quit (Quit: = "")
2021-09-17 17:39:55	→	merijn has joined #haskell
2021-09-17 17:42:50	→	shapr has joined #haskell
2021-09-17 17:46:10	←	vysn has quit (Ping timeout: 240 seconds)
2021-09-17 17:49:21	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-17 17:51:40	←	waleee has quit (Ping timeout: 268 seconds)
2021-09-17 17:52:47	→	waleee has joined #haskell
2021-09-17 17:57:50	←	dsrt^ has quit (Ping timeout: 268 seconds)
2021-09-17 17:59:05	←	yaroot has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-17 17:59:58	→	yaroot has joined #haskell
2021-09-17 18:01:01	→	dsrt^ has joined #haskell
2021-09-17 18:01:15	←	dsrt^ has quit (Remote host closed the connection)
2021-09-17 18:07:25	→	__monty__ has joined #haskell
2021-09-17 18:08:21	ProofTechnique	maerwald: (on microservices) I'm working on exactly such a platform right now, and I've set it as a team principle that all our services are just libraries with a thin executable wrapper that depends on the library. I don't want our business logic to ever understand anything about the system, it just needs to transform data
2021-09-17 18:08:58	maerwald	ProofTechnique: why do you have microservices in the first place?
2021-09-17 18:09:39	ProofTechnique	Because an architect said so, and because we need to replace the tangled Groovy monolith we're currently using :D
2021-09-17 18:09:52	maerwald	sounds like a poor choice then
2021-09-17 18:11:12	ProofTechnique	The main nice thing is that it's a lot easier to onboard _other people's_ services. As long as they can read the auth headers we decorate requests with, they can ignore authn/authz logic in their own code
2021-09-17 18:12:00	←	kimjetwav has quit (Remote host closed the connection)
2021-09-17 18:12:37	ProofTechnique	As compared to "make someone unfamiliar with the monolith hack their new functionality into it and make the trashball worse"
2021-09-17 18:12:52	→	yauhsien has joined #haskell
2021-09-17 18:13:26	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-17 18:14:17	ProofTechnique	And it has been significantly easier to get an active-active configuration working consistently across our environments without a bunch of bookkeeping
2021-09-17 18:17:07	←	yauhsien has quit (Ping timeout: 245 seconds)
2021-09-17 18:17:19	ProofTechnique	In good news, if we ever need to collapse down some of the services into beefier ones, it's just shuffling library imports :)
2021-09-17 18:18:01	dminuoso	Microservices is that other thing that people adopt for no good reason, and later dont even realize that they're regretting it..
2021-09-17 18:18:27	dminuoso	While most of the hype has passed, it's still a very popular practice.
2021-09-17 18:19:19	kuribas	people knowing what to regret would be an advancement for many teams :)
2021-09-17 18:19:33	ProofTechnique	I'm being a little facetious, we do have good reasons (that are very boring), I just like to blame the architect because their initial recommendation was "just do it as a bunch of lambdas" :D
2021-09-17 18:19:58	→	fendor_ has joined #haskell
2021-09-17 18:20:32	kuribas	ProofTechnique: if the services are just libraries, then why not pack it into a single executable?
2021-09-17 18:21:11	ldlework	dminuoso: I have found that microservice regret is a function of a team's infrastructure/orchestration prowess.
2021-09-17 18:21:55	dminuoso	ldlework: And what kind of function is that?
2021-09-17 18:22:57	ldlework	It's just to say, that the more handedness (in knowledge or automation) in orchestration, the less associated pain with microservices there is.
2021-09-17 18:23:26	ldlework	Developers seem fine making services and making them use each other's APIs. It's the operational complexity that usually degrades returns (in my experience).
2021-09-17 18:23:42	→	max22- has joined #haskell
2021-09-17 18:23:44	←	hyiltiz has quit (Ping timeout: 268 seconds)
2021-09-17 18:23:56	dminuoso	ldlework: that's a myth. some of the biggest issues of microservices dont relate to orchestration.
2021-09-17 18:24:28	ldlework	OK, maybe you have some research paper, I only have a couple decades of experience to go off.
2021-09-17 18:24:34	→	hyiltiz has joined #haskell
2021-09-17 18:24:37	ProofTechnique	Multiple languages across teams, multiple on-prem and cloud resources that need consistent access patterns, and we don't have any dedicated ops people since I shifted into product development :D
2021-09-17 18:24:58	dminuoso	Not sure what that snarky comment was supposed to convey, but okay.
2021-09-17 18:25:18	ldlework	dminuoso: not sure what an offhanded rejection of someone else's premise as "myth" was supposed to convey, but okay.
2021-09-17 18:25:27	ProofTechnique	And there's just decades of legacy that needs to be enclosed so that we don't have to think so damn hard about it just to barf JSON at each other all over the place
2021-09-17 18:26:18	ProofTechnique	At the end of the day, it's not my money, so I just write good software and automation and don't worry too much about how it actually gets run
2021-09-17 18:28:02	kuribas	I think service architecture is good, but you want to maximise service size, not minimize it.
2021-09-17 18:28:38	kuribas	Unless you have needs that *require* it.
2021-09-17 18:28:47	←	hyiltiz has quit (Ping timeout: 245 seconds)
2021-09-17 18:29:07	maerwald	ProofTechnique: there are very few reasons for microservices, technically
2021-09-17 18:29:20	maerwald	all of them have nothing to do with architecture
2021-09-17 18:29:59	maerwald	I know of only 2 good ones: 1. you need to scale microservices differently (e.g. one needs more CPU, the other ram, the other better latency, ...)
2021-09-17 18:30:34	→	pbrisbin has joined #haskell
2021-09-17 18:30:41	maerwald	2. someone wants to verify your microservice formally/semi-formally (happens in online casino business for the RNG... it has to be a microservice)
2021-09-17 18:31:28	ProofTechnique	We do need to scale them differently, so box ticked :)
2021-09-17 18:32:12	dminuoso	Microservices are usually not a technical solution to a problem, but an emergent cultural phenomenon in companies.
2021-09-17 18:32:29	dminuoso	They tend to be modelled after the organization
2021-09-17 18:32:54	→	hyiltiz has joined #haskell
2021-09-17 18:34:00	ldlework	There's different ways of looking at things depending on what you are aiming to optimize for. In the reductio of optimizing for scaling, you'd segregate your overall system specficially by utilization. But concerns abound you end up balancing what you're optimizing for. Microservices sounds like a paradigm in which you blindly optimize for concerns that demand microserivces, but really it is the
2021-09-17 18:34:01	ldlework	study of small unit services so there is something known to say in cases in which small services are the answer to the optimizations you're looking for.
2021-09-17 18:34:09	kuribas	we rejected some candidates because in the interview they asked us why we didn't grow with the time, and used cubernetes :)
2021-09-17 18:34:26	maerwald	dminuoso: true, someone once said the architecture is merely a reflection of the communication
2021-09-17 18:34:36	kuribas	We use decade old unix technology, and it still works fine :)
2021-09-17 18:34:56	gehmehgeh	kuribas: I'm looking for job, can I apply? :D
2021-09-17 18:35:07	dminuoso	maerwald: And there's a lot of merit in it with microservices. Each team can monitor its own services, responsible for their deployment, alerting, defined interfaces, etc.
2021-09-17 18:35:22	dminuoso	But then again, this can as easily happen inside a given program
2021-09-17 18:35:26	ProofTechnique	For my part, if we didn't do it this way then I wouldn't be able to write services in Haskell :D
2021-09-17 18:35:29	maerwald	dminuoso: yeah... and deployment is SO MUCH FUN
2021-09-17 18:35:30	dminuoso	Where you have some defined module structure how some other part will interface.
2021-09-17 18:35:38	ldlework	ProofTechnique: heh
2021-09-17 18:35:40	maerwald	because suddenly the entire armada of microservices need to be in sync
2021-09-17 18:35:41	kuribas	gehmehgeh: well, currently we don't need backend developers, only a senior devops guy.
2021-09-17 18:35:43	maerwald	BOOM
2021-09-17 18:35:54	ldlework	> function of orchestration prowess
2021-09-17 18:35:56	lambdabot	 <hint>:1:10: error: parse error on input ‘of’
2021-09-17 18:35:58	⚡	ldlework shrugs
2021-09-17 18:35:58	→	acidjnk has joined #haskell
2021-09-17 18:36:01	←	cfricke has quit (Quit: WeeChat 3.2.1)
2021-09-17 18:36:05	maerwald	then you end up doing multi-stage deployments and all sorts of things
2021-09-17 18:36:10	dminuoso	ldlework: At what benefit, though?
2021-09-17 18:36:17	kuribas	gehmehgeh: and a junior one.
2021-09-17 18:36:22	dminuoso	You drive up complexity, introduce additional angles in which the entirety of your service can fail..
2021-09-17 18:36:25	ldlework	I feel like I just gave a generalized principle for understanding that
2021-09-17 18:36:49	dminuoso	Optimizing for scaling is a problem most software applications dont have.
2021-09-17 18:36:55	ldlework	Yes, if you have priorities, you will have to pay for them with costs elsewhere.
2021-09-17 18:37:34	kuribas	well, scaling on a single system is good enough for most applications.
2021-09-17 18:38:07	←	mjs2600 has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-09-17 18:38:22	ldlework	Again, treating microservices as a dogmatic paradigm where all you are allowed to do is make microservices, rather than a series of worked out ideas for working with unit services when you happen to need them is a mistake.
2021-09-17 18:39:22	maerwald	and there go 80% of your Go programming opportunities :D
2021-09-17 18:39:31	ProofTechnique	lol
2021-09-17 18:39:32	→	mjs2600 has joined #haskell
2021-09-17 18:39:32	kuribas	I read about this haskell company that migrated the code from distributed scala running on a several nodes, to a single haskell node, and they saw an *improvement* in performance.
2021-09-17 18:39:54	→	tromp has joined #haskell
2021-09-17 18:39:55	ldlework	maerwald: heh yeah, that's not to say some people arnt out there treating it like a paradigm
2021-09-17 18:40:07	maerwald	like scrum
2021-09-17 18:40:13	maerwald	imagine you do both
2021-09-17 18:40:18	maerwald	microservices and scrum
2021-09-17 18:40:58	ProofTechnique	.oO(I don't have to imagine)
2021-09-17 18:40:59	dminuoso	We have one microservice oriented stack here, but that's done because this particular stack interfaces with at least three separate network regions, and we want high fault taulerance against network failures. So we split it up to have locally running service that could provide local services while the network was down.
2021-09-17 18:41:10	dminuoso	Not done out of any religion or scaling, but just out of a strict technical requirement.
2021-09-17 18:41:31	ldlework	kuribas: sure, horizontal scaling isn't some universal optimization
2021-09-17 18:43:24	→	fresheyeball has joined #haskell
2021-09-17 18:44:59	ldlework	JS is adding a pipeline operator to the language
2021-09-17 18:45:15	sshine	besides ->? :-P
2021-09-17 18:45:24	ldlework	|>
2021-09-17 18:45:32	sshine	JS#
2021-09-17 18:45:36	ldlework	actually
2021-09-17 18:45:42	ldlework	instead of F# semantics
2021-09-17 18:45:48	ldlework	where it just applies a value
2021-09-17 18:45:55	ldlework	they are going with a whacky expression based one
2021-09-17 18:46:00	ldlework	where the lhs is bound to ^
2021-09-17 18:46:03	ProofTechnique	We have a couple of tiny glue services that didn't really "fit" anywhere else and basically just amount to slightly fancy proxies around garbage legacy systems that we want to quarantine, but the majority are mid-to-large size units that don't logically share any functionality beyond "reads our auth headers". I expect things will evolve over time and we'll coalesce things as we observe more of how everything actually interacts
2021-09-17 18:46:07	ldlework	so you can do things with it
2021-09-17 18:46:37	←	jtomas has quit (Remote host closed the connection)
2021-09-17 18:47:01	→	jtomas has joined #haskell
2021-09-17 18:47:11	ldlework	ProofTechnique: this conversation reminds me of some funny video about microservices where a developer is trying to explain to a product manager how some change is no small ask
2021-09-17 18:47:29	ldlework	https://www.youtube.com/watch?v=y8OnoxKotPQ
2021-09-17 18:48:04	ProofTechnique	I love that video :D
2021-09-17 18:48:19	ldlework	cracks me up everytime
2021-09-17 18:50:05	ldlework	"you think you know what it takes to tell the user their birthday... you know nothing!!"
2021-09-17 18:50:19	ProofTechnique	When someone started drawing a diagram to explain a new service they wanted to onboard, I stopped them right there and said "okay, but why does this need to be five moving pieces instead of one?" and now they've rewritten it to just run in a container. A logical unit of work should not require a chain of 3 lambdas and an API gateway just to puke JSON
2021-09-17 18:50:39	ProofTechnique	(And now they get multi-region deploys for free, just because I'm nice)
2021-09-17 18:52:37	←	xsperry has quit (Ping timeout: 252 seconds)
2021-09-17 18:53:46	ldlework	ProofTechnique: it's possible to get to the point where a collection of containers, at the level of analysis relevant to ops, is a single logical unit.
2021-09-17 18:54:41	ldlework	(or a collection of AWS CF artifacts, or whatever else)
2021-09-17 18:56:22	ProofTechnique	If you knew this team, you would not give the benefit of the doubt :D
2021-09-17 18:57:27	ProofTechnique	(Also AWS API Gateways have _no_ good story for multi-region other than "just deploy a second one, lol", so that was a big operational no)
2021-09-17 18:58:09	→	xsperry has joined #haskell
2021-09-17 18:59:26	←	pavonia has quit (Quit: Bye!)
2021-09-17 19:01:20	←	fresheyeball has quit (Quit: WeeChat 2.9)
2021-09-17 19:02:25	→	yauhsien has joined #haskell
2021-09-17 19:03:13	←	favonia has quit (Ping timeout: 265 seconds)
2021-09-17 19:05:16	←	ubert has quit (Ping timeout: 252 seconds)
2021-09-17 19:05:16	ℹ	ub is now known as ubert
2021-09-17 19:06:00	→	ubert1 has joined #haskell
2021-09-17 19:07:30	→	eggplantade has joined #haskell
2021-09-17 19:11:54	←	byorgey has quit (Quit: leaving)
2021-09-17 19:11:58	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-17 19:13:36	→	machinedgod has joined #haskell
2021-09-17 19:14:30	→	Sgeo has joined #haskell
2021-09-17 19:18:28	←	xsperry has quit (Ping timeout: 252 seconds)
2021-09-17 19:21:38	→	[itchyjunk] has joined #haskell
2021-09-17 19:26:16	←	yauhsien has quit (Remote host closed the connection)
2021-09-17 19:27:20	→	kimjetwav has joined #haskell
2021-09-17 19:28:22	←	lbseale_ has quit (Ping timeout: 252 seconds)
2021-09-17 19:28:52	←	burnside_ has quit (Remote host closed the connection)
2021-09-17 19:29:21	→	burnsidesLlama has joined #haskell
2021-09-17 19:32:10	→	ub has joined #haskell
2021-09-17 19:32:48	→	xsperry has joined #haskell
2021-09-17 19:33:26	←	ubert has quit (Ping timeout: 260 seconds)
2021-09-17 19:33:26	ℹ	ub is now known as ubert
2021-09-17 19:33:52	←	burnsidesLlama has quit (Ping timeout: 252 seconds)
2021-09-17 19:33:54	←	ubert1 has quit (Ping timeout: 260 seconds)
2021-09-17 19:33:56	→	hiruji has joined #haskell
2021-09-17 19:34:09	→	wroathe has joined #haskell
2021-09-17 19:34:09	←	wroathe has quit (Changing host)
2021-09-17 19:34:09	→	wroathe has joined #haskell
2021-09-17 19:34:32	←	hiruji has quit (Client Quit)
2021-09-17 19:34:43	→	lbseale_ has joined #haskell
2021-09-17 19:35:28	→	shriekingnoise has joined #haskell
2021-09-17 19:35:40	←	alx741 has quit (Ping timeout: 260 seconds)
2021-09-17 19:36:17	→	slowButPresent has joined #haskell
2021-09-17 19:40:25	→	favonia has joined #haskell
2021-09-17 19:41:39	←	gehmehgeh has quit (Quit: Leaving)
2021-09-17 19:43:05	←	fef has quit (Quit: Leaving)
2021-09-17 19:43:07	←	Phantastes has quit (Quit: Client closed)
2021-09-17 19:44:08	→	Phantastes has joined #haskell
2021-09-17 19:48:04	←	fendor_ has quit (Remote host closed the connection)
2021-09-17 19:48:24	→	fendor_ has joined #haskell
2021-09-17 19:48:24	→	alx741 has joined #haskell
2021-09-17 19:54:40	→	zebrag has joined #haskell
2021-09-17 19:55:56	←	cawfee has quit (Quit: WeeChat 3.2.1)
2021-09-17 19:57:34	→	hiruji has joined #haskell
2021-09-17 19:57:42	ldlework	:O http://lambdacube3d.com/editor.html
2021-09-17 20:01:07	←	kenran has quit (Quit: WeeChat info:version)
2021-09-17 20:01:29	→	burnsidesLlama has joined #haskell
2021-09-17 20:05:55	←	burnsidesLlama has quit (Ping timeout: 252 seconds)
2021-09-17 20:06:02	→	bontaq has joined #haskell
2021-09-17 20:06:48	→	doyougnu has joined #haskell
2021-09-17 20:07:08	←	hiruji has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-09-17 20:07:44	→	yauhsien has joined #haskell
2021-09-17 20:08:33	←	fendor_ has quit (Remote host closed the connection)
2021-09-17 20:08:41	ldlework	ProofTechnique: https://hydra.nixos.org/job/nixpkgs/trunk/haskellPackages.lambdacube-engine.x86_64-linux/all
2021-09-17 20:08:53	→	fendor_ has joined #haskell
2021-09-17 20:09:49	→	merijn has joined #haskell
2021-09-17 20:12:22	←	yauhsien has quit (Ping timeout: 252 seconds)
2021-09-17 20:15:00	→	jess has joined #haskell
2021-09-17 20:16:41	←	tdammers has quit (Ping timeout: 265 seconds)
2021-09-17 20:20:00	→	hnOsmium0001 has joined #haskell
2021-09-17 20:21:22	→	hiruji has joined #haskell
2021-09-17 20:25:31	←	mc47 has quit (Remote host closed the connection)
2021-09-17 20:27:16	←	jstolarek has quit (Ping timeout: 252 seconds)
2021-09-17 20:31:59	→	celeste has joined #haskell
2021-09-17 20:32:08	ℹ	celeste is now known as __celeste
2021-09-17 20:33:33	→	dyeplexer has joined #haskell
2021-09-17 20:34:40	→	tommd has joined #haskell
2021-09-17 20:35:04	→	p_____ has joined #haskell
2021-09-17 20:35:12	←	p_____ has quit (Remote host closed the connection)
2021-09-17 20:35:58	→	lavaman has joined #haskell
2021-09-17 20:37:34	←	lortabac has quit (Quit: WeeChat 2.8)
2021-09-17 20:37:54	←	albet70 has quit (Remote host closed the connection)
2021-09-17 20:40:10	←	lavaman has quit (Ping timeout: 240 seconds)
2021-09-17 20:42:06	→	benin036932301 has joined #haskell
2021-09-17 20:42:29	→	zmt00 has joined #haskell
2021-09-17 20:43:11	←	vaucouleur has quit (Read error: Connection reset by peer)
2021-09-17 20:47:07	←	benin036932301 has quit (Ping timeout: 245 seconds)
2021-09-17 20:49:42	→	yauhsien has joined #haskell
2021-09-17 20:53:38	→	cawfee has joined #haskell
2021-09-17 20:58:37	→	yauhsien_ has joined #haskell
2021-09-17 20:58:37	←	yauhsien has quit (Read error: Connection reset by peer)
2021-09-17 21:00:25	→	tdammers has joined #haskell
2021-09-17 21:04:37	←	yauhsien_ has quit (Ping timeout: 252 seconds)
2021-09-17 21:04:55	←	xff0x has quit (Ping timeout: 260 seconds)
2021-09-17 21:05:34	→	mortemeur has joined #haskell
2021-09-17 21:06:25	monochrom	On haskell-cafe, I think I lost my respect for Michael Turner when he reported that he didn't understand "(TTree -> TTree -> Tree) -> TTree -> TTree -> [TTree]", he only understood it after using a type alias for the "(TTree -> TTree -> Tree)".
2021-09-17 21:07:51	Hecate	I am resisting from posting on this thread
2021-09-17 21:07:54	Hecate	this is a hell thread
2021-09-17 21:07:59	→	slack1256 has joined #haskell
2021-09-17 21:08:10	monochrom	I can respect using a few type aliases or defining a few component types in a very much more complex scenerio, but this is not one of the complex scenerios at all.
2021-09-17 21:08:19	geekosaur	AntC isn't exactly helping
2021-09-17 21:08:25	→	vysn has joined #haskell
2021-09-17 21:08:56	←	__celeste has quit (Remote host closed the connection)
2021-09-17 21:09:04	slack1256	On emacs + LSP, what is the M-x command name for searching a project for calls to a specific function? Currently I am using grep/ag but maybe LSP does that too?
2021-09-17 21:09:04	monochrom	On top of that, can you guess the name Turner chose for (TTree -> TTree -> Tree)?  It's "Order".  I have no idea why "order" makes sense for that.
2021-09-17 21:09:13	→	eggplantade has joined #haskell
2021-09-17 21:09:19	→	__celeste has joined #haskell
2021-09-17 21:09:43	Clint	fascinating
2021-09-17 21:10:13	Hecate	again, this is a hell thread
2021-09-17 21:10:14	Hecate	do not post
2021-09-17 21:10:17	Hecate	do not read
2021-09-17 21:10:21	←	__celeste has quit (Remote host closed the connection)
2021-09-17 21:10:45	→	__celeste has joined #haskell
2021-09-17 21:10:49	←	dhouthoo has quit (Quit: WeeChat 3.2)
2021-09-17 21:11:19	monochrom	Turner asks "am I translating Haskell to C/C++"?  My heart say yes, you're translating to the C/C++ culture, in which people feel that every function parameter type "needs" a typedef.
2021-09-17 21:11:44	→	xff0x has joined #haskell
2021-09-17 21:13:25	monochrom	I would have lost less respect if he chose a more apt name, e.g., along the line of "TTreeCombiner".  At least that's closer to the nature of TTree -> TTree -> Tree.
2021-09-17 21:13:46	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-17 21:15:03	janus	what is a hell thread? urban dictionary gives a definition that doesn't make sense
2021-09-17 21:15:21	monochrom	"Order" is a very unhelpful name for that one, in fact very misleading, we say that "less than", "greater than or equal to" are "orders", not this.
2021-09-17 21:15:47	monochrom	So much for someone who keep asking for more "plain English" and then goes on to show how broken it is.
2021-09-17 21:16:34	monochrom	Oh, I think you have to take apart "hell" and "thread", understand each individually, and then just combine :)
2021-09-17 21:16:39	←	chele has quit (Remote host closed the connection)
2021-09-17 21:16:42	monochrom	Maybe "thread from hell" helps.
2021-09-17 21:16:54	monochrom	or fix the grammar, "hellish thread".
2021-09-17 21:17:02	→	yauhsien has joined #haskell
2021-09-17 21:17:14	janus	ah all right, i was overthinking it
2021-09-17 21:17:35	←	hyiltiz has quit (Ping timeout: 265 seconds)
2021-09-17 21:17:54	Hecate	janus: yeah, it's a bad place
2021-09-17 21:18:22	monochrom	But yeah I'm not posting.
2021-09-17 21:18:44	→	hyiltiz has joined #haskell
2021-09-17 21:21:02	→	eggplantade has joined #haskell
2021-09-17 21:21:47	monochrom	My other angle is that Kmett started in a similar but worse initial condition too.  Decades of C++ before trying Haskell.  And he started way earlier, meaning even worse tutorials and books.
2021-09-17 21:22:39	monochrom	And yet he went on to understand everything and surpass it.  Look at how much category-theoretic libraries he churns out that it is our turn to not understand!
2021-09-17 21:22:59	geekosaur	I think comparing most newcomers to Haskell can't very ewll be compared to Kmett, though
2021-09-17 21:23:36	←	hyiltiz has quit (Ping timeout: 268 seconds)
2021-09-17 21:24:07	monochrom	You know, I'm very tempted to just plot a line between those two data points and conclude: You need worse tutorials to learn Haskell better.
2021-09-17 21:24:40	monochrom	Either that, or conclude that the old, "worse" tutorials such as the Gentle Introduction is actually better.
2021-09-17 21:25:10	monochrom	It may be that it is today's hand-holding tutorials that are worse.
2021-09-17 21:25:16	ldlework	I really think HFFP is a great way to go for people who have coded for a long time in non-functional languages.
2021-09-17 21:25:21	→	hyiltiz has joined #haskell
2021-09-17 21:25:29	ldlework	It felt very much like brick-laying, which is what I appreciate from pedagogy in other domains.
2021-09-17 21:25:46	ldlework	It didn't assume I was a category theorist, just someone capable of understanding a new formal system.
2021-09-17 21:26:22	monochrom	I think Turner was following and complaining about HFFP when he said "talking down to me".  (But I think he will neither confirm nor deny.)
2021-09-17 21:27:04	←	yauhsien has quit (Remote host closed the connection)
2021-09-17 21:27:14	ldlework	huh, i wonder what passages made him feel that way 
2021-09-17 21:27:16	←	mortemeur has quit (Read error: Connection reset by peer)
2021-09-17 21:27:26	monochrom	This is wher AntC may be right, as much as you say that he's unhelpful.
2021-09-17 21:27:39	→	yauhsien has joined #haskell
2021-09-17 21:27:58	ldlework	Even if HFFP is not the best possible articulation of the approach, I think it's pedagogical structure is sound
2021-09-17 21:27:59	geekosaur	AntC's main problem is not his understanding but his presentation
2021-09-17 21:28:08	monochrom	No, I suspect not about any passage, but the whole plan of "start from square 1".
2021-09-17 21:28:29	←	[itchyjunk] has quit (Read error: Connection reset by peer)
2021-09-17 21:28:57	ldlework	it seems contradictory to want an accessible pedagogy but interpret an assumption of nothing as condescension
2021-09-17 21:29:00	→	nctcf^ has joined #haskell
2021-09-17 21:29:23	monochrom	Right?  There are humble, modest people who recognize that they should start from square 1, so they are thankful when you do that to them.
2021-09-17 21:29:27	ldlework	I feel for Turner, but am really glad it jived with me.
2021-09-17 21:29:32	ldlework	yes!
2021-09-17 21:29:53	monochrom	And then there are proud people who deny that they should start from square 1, so they will hate you for doing that to them.
2021-09-17 21:31:10	monochrom	Turner did, for multiple times, remind us that he has so many decades of programming experience.
2021-09-17 21:31:18	→	mikoto-chan has joined #haskell
2021-09-17 21:31:23	monochrom	I think someone who speaks like that is the proud kind.
2021-09-17 21:31:57	janus	someone who has a 12 line signature...
2021-09-17 21:32:02	monochrom	And of course, I should remind you that he never actually said it was HFFP, he never said which works he tried.
2021-09-17 21:32:12	ldlework	There is this nice video on youtube "Learn Haskell in One Video" and all it does is teach the core ML side of Haskell.
2021-09-17 21:32:49	c_wraith	I had about 20 years of experience programming when I first picked up haskell.  And it was *hard*, but I loved it.  Because I love learning new things.
2021-09-17 21:32:53	lbseale_	ldlework: that is a great video
2021-09-17 21:33:05	lbseale_	it was my starting point
2021-09-17 21:33:22	→	benin036932301 has joined #haskell
2021-09-17 21:33:26	c_wraith	But if you don't come at it as "time to learn something new", it can be really frustrating to be expected to learn something actually new
2021-09-17 21:33:38	ℹ	lbseale_ is now known as lbseale
2021-09-17 21:34:17	janus	why even try to cater to people with that much experience, they are a tiny part of the market and they are not disadvantaged
2021-09-17 21:34:44	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-17 21:34:53	ldlework	i actually did try to give haskell a real go in the past a few times, but the jargon made me sleepy. HFFP's introduction with LC made me really get into the mood that I'm just learning a new formal system (pattern matching essentially) and that things like Functors and Monoids are just gonna be some algebraic laws (generic patterns).
2021-09-17 21:35:11	monochrom	And here is the thing.  Two of his complaints are: "materials that assume I already know much", and "materials that talk down to me".  See the paradox there?  Even hypocrisy?
2021-09-17 21:35:22	ldlework	Then I got over the fact that they have opaque names, and just listened to what the author was telling me they are.
2021-09-17 21:35:37	→	proofofkeags_ has joined #haskell
2021-09-17 21:35:56	←	yauhsien has quit (Ping timeout: 268 seconds)
2021-09-17 21:36:50	monochrom	IMO when someone harps "plain English" so much, this is why.  They are expecting the unsolvable, and they just assume that jargon is the problem, "plain English" can solve it.
2021-09-17 21:37:04	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-17 21:37:30	ldlework	I think that also, once HFFP got to Semigroups and was like "semigroups are like the generalization of addition" (or something to that effect) I was re-energized again with confidence that the opaque sounding typeclasses were just gonna be some general patterns, where the idea behind it is not all that complicated.
2021-09-17 21:38:10	←	benin036932301 has quit (Ping timeout: 252 seconds)
2021-09-17 21:38:41	ldlework	I was actually excited to know what they were at that point.
2021-09-17 21:39:37	janus	think i will write a mail telling Turner that he must read Software Foundations first, since it is the foundation ;)
2021-09-17 21:40:46	monochrom	Ugh hahaha but please don't troll him!
2021-09-17 21:41:04	←	vysn has quit (Ping timeout: 252 seconds)
2021-09-17 21:42:23	→	rond_ has joined #haskell
2021-09-17 21:43:49	janus	wow, Software Foundations has 6 volumes now! amazing
2021-09-17 21:44:05	→	merijn has joined #haskell
2021-09-17 21:44:05	monochrom	Wait what? Oh noes.
2021-09-17 21:44:16	monochrom	Is it competing with HFFP for length?!
2021-09-17 21:45:04	monochrom	Maybe I should adopt volume 2 as my textbook and curriculum.
2021-09-17 21:45:46	→	TPBP has joined #haskell
2021-09-17 21:45:58	monochrom	The course is named "principles of programming languages".  My long-standing concern is "the class average is too high".  I need something to make it harder. >:)
2021-09-17 21:46:11	←	eggplantade has quit (Remote host closed the connection)
2021-09-17 21:46:20	monochrom	OK, the other long-standing concern is I teach too much Haskell.
2021-09-17 21:46:44	monochrom	Well, this solution fixes both!
2021-09-17 21:47:28	monochrom	And yeah I haven't harped Hoare triples as an approach to semantics for a long time.  Maybe it's time to do it.
2021-09-17 21:47:52	→	econo has joined #haskell
2021-09-17 21:48:34	monochrom	(Hoare triples are widely harped as one way to prove your program correct, not one way to define what the language means.  It can do both, and Hoare certainly proposed both.)
2021-09-17 21:49:38	raehik	how do I package some data files (used in hspec tests) with a Stack+Cabal package?
2021-09-17 21:49:43	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-17 21:50:06	janus	i certainly would have been happy if i had had a Coq-based course available in uni instead of working with custom tools
2021-09-17 21:50:07	→	eggplantade has joined #haskell
2021-09-17 21:50:26	raehik	I find recommendations for 'extra-source-files: folder/*' but, Stack appears to only allow files. No folders
2021-09-17 21:51:19	→	chris has joined #haskell
2021-09-17 21:51:23	ℹ	chris is now known as Guest6232
2021-09-17 21:51:39	janus	raehik: ** (double star) wild cards were added in cabal 2.4, are you using a stack based on that?
2021-09-17 21:51:46	sm	got a link ?
2021-09-17 21:51:56	c_wraith	Hoare triples kind of make it clear how tough it is to program based on mutability.
2021-09-17 21:52:25	janus	sm: https://cabal.readthedocs.io/en/3.4/cabal-package.html#pkg-field-data-files
2021-09-17 21:52:29	raehik	janus: I'm on Stack 2.7 / Cabal 3.6. I tried double star too on Stack, but it complains still. Cabal might be OK with one or both
2021-09-17 21:52:44	sm	that doc is for cabal files, janus
2021-09-17 21:53:05	sm	stack files have their own doc
2021-09-17 21:53:14	→	tzh has joined #haskell
2021-09-17 21:53:36	janus	sm: right, but doesn't stack use cabal for lots? i would assume that fields named similarily would have similar underpinnings
2021-09-17 21:54:03	sm	ok, if it's actually in your .cabal file you're on the right track. In that case I'd guess your stack needs upgrading
2021-09-17 21:54:18	raehik	I was especially confused because I'm using stack to generate my cabal file. And when I tried 'data/*', 'data/**', the generated Cabal file didn't include them
2021-09-17 21:54:43	raehik	the Stack side says "nothing found for this entry" and scrubs it from the similarly named Cabal filed
2021-09-17 21:54:48	raehik	s/filed/field
2021-09-17 21:56:11	raehik	(oops, I've been talking about Stack -- I mean hpack, that uses package.yaml)
2021-09-17 21:56:19	sm	hehe
2021-09-17 21:56:36	sm	and I've been mixing up raehik and janus
2021-09-17 21:56:45	sm	but we'll get there
2021-09-17 21:57:25	raehik	sm: hahaha no worries I was following
2021-09-17 21:57:32	sm	study the appropriate doc and all will make sense 🤞
2021-09-17 21:57:59	c_wraith	yeah, hpack is a totally different thing.  It generates cabal files, but that doesn't mean it supports all of cabal's ways of doing things
2021-09-17 22:00:45	→	chisui has joined #haskell
2021-09-17 22:02:21	raehik	mmmmm sm you were right. it feels silly but I have to do 'extra-source-files: data/**/*' ...
2021-09-17 22:03:05	janus	raehik: it is the same in zsh, what did you expect? that ** would also match files?
2021-09-17 22:03:06	raehik	but I admit, it's more powerful and only feels silly because my mind has been rotted by poorly defined globbing and regexes
2021-09-17 22:03:19	raehik	janus: pretty much yes x)
2021-09-17 22:03:49	janus	raehik: they are useful, i'd recommend enabling them in the shell
2021-09-17 22:04:22	janus	saves you from using `find -type f -iname '*blabla*'` all over the place
2021-09-17 22:07:43	janus	though cabal doesn't support that feature, so maybe it is dangerous of me to compare them...
2021-09-17 22:08:03	janus	"** wildcards can only appear as the final path component before the file name (e.g., data/**/images/*.jpg is not allowed). If a ** wildcard is used, then the file name must include a * wildcard (e.g., data/**/README.rst is not allowed)."
2021-09-17 22:09:01	→	_ht has joined #haskell
2021-09-17 22:09:09	→	MQ-17J has joined #haskell
2021-09-17 22:09:21	raehik	meh, the hpack readme defines it well enough
2021-09-17 22:09:38	raehik	it was surprising primarily because the same field name is treated differently in hpack & cabal
2021-09-17 22:13:22	←	fendor_ has quit (Ping timeout: 252 seconds)
2021-09-17 22:19:18	←	acidjnk has quit (Ping timeout: 268 seconds)
2021-09-17 22:19:56	→	acidjnk has joined #haskell
2021-09-17 22:21:31	→	tromp has joined #haskell
2021-09-17 22:22:09	→	fendor_ has joined #haskell
2021-09-17 22:23:48	←	cheater has quit (Ping timeout: 265 seconds)
2021-09-17 22:26:06	←	Skyfire has quit (Ping timeout: 260 seconds)
2021-09-17 22:27:18	→	cheater has joined #haskell
2021-09-17 22:32:08	→	parafactual has joined #haskell
2021-09-17 22:32:30	←	__celeste has quit (Ping timeout: 265 seconds)
2021-09-17 22:32:44	←	rond_ has quit (Quit: Client closed)
2021-09-17 22:33:31	←	fendor_ has quit (Remote host closed the connection)
2021-09-17 22:33:55	→	fendor_ has joined #haskell
2021-09-17 22:37:25	←	TPBP has quit (Quit: Client closed)
2021-09-17 22:39:09	→	Guest70 has joined #haskell
2021-09-17 22:39:46	→	merijn has joined #haskell
2021-09-17 22:39:59	←	Guest70 has left #haskell
2021-09-17 22:43:07	←	chisui has quit (Quit: Client closed)
2021-09-17 22:45:15	ldlework	Anyone know how to make blank-canvas accept remote traffic?
2021-09-17 22:45:16	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-17 22:46:16	→	tfeb has joined #haskell
2021-09-17 22:47:00	←	Guest6232 has quit (Remote host closed the connection)
2021-09-17 22:48:44	ℹ	tfeb is now known as tfb
2021-09-17 22:48:46	ldlework	figured it out
2021-09-17 22:52:06	→	mousey has joined #haskell
2021-09-17 22:52:40	awpr	I would be highly amused if the cellular automata thing turned out to be way faster by sending everything over a socket and rendering with canvas, compared to a natural implementation with Gloss
2021-09-17 22:53:37	ldlework	hehe
2021-09-17 22:54:37	←	tfb has quit (Quit: died)
2021-09-17 22:55:49	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-17 22:56:55	←	fendor_ has quit (Ping timeout: 260 seconds)
2021-09-17 22:57:03	ldlework	i feel like i've been teased with haskell GLSL eDSLs lol
2021-09-17 22:58:59	ldlework	lambdacube looks like the best one, but it uses a very old haskell and very old dependencies that don't work on Nix anymore
2021-09-17 23:02:34	→	chris has joined #haskell
2021-09-17 23:02:34	ℹ	chris is now known as Guest3188
2021-09-17 23:02:48	←	eggplantade has quit (Remote host closed the connection)
2021-09-17 23:07:19	←	Guest3188 has quit (Ping timeout: 252 seconds)
2021-09-17 23:07:21	→	vicfred has joined #haskell
2021-09-17 23:08:20	cdsmith	How would you feel if a library you wanted to use required a GHC plugin?  Asking because I'm thinking of making HMock depend on https://hackage.haskell.org/package/if-instance.  It would let me offer both good error messages (if there's a Show instance) and a more general API (by not requiring Show).
2021-09-17 23:09:07	dminuoso	Requiring a GHC plugin is an *very* high threshold.
2021-09-17 23:09:34	dminuoso	Unless this was crucial to the core functionality of it, I'd stay clear of it.
2021-09-17 23:10:19	cdsmith	Yeah.  Maybe I can get away with a general API that requires Show and then an alternate package using the plugin
2021-09-17 23:10:52	←	parafactual has quit (Ping timeout: 245 seconds)
2021-09-17 23:11:42	cdsmith	This is for the explainable predicates.  They are essentially (a -> Bool), except with the ability to explain why or why not.  Right now, a lot of them require Show instances on a.  I don't like that.
2021-09-17 23:14:19	→	System123 has joined #haskell
2021-09-17 23:21:25	←	max22- has quit (Ping timeout: 260 seconds)
2021-09-17 23:24:38	→	eggplantade has joined #haskell
2021-09-17 23:31:53	→	justsomeguy has joined #haskell
2021-09-17 23:32:36	→	tlaxkit has joined #haskell
2021-09-17 23:33:12	→	_xft0 has joined #haskell
2021-09-17 23:34:55	←	slack1256 has quit (Ping timeout: 252 seconds)
2021-09-17 23:36:14	←	chexum has quit (Remote host closed the connection)
2021-09-17 23:36:21	←	eggplantade has quit (Remote host closed the connection)
2021-09-17 23:36:29	→	chexum has joined #haskell
2021-09-17 23:39:26	←	sneedsfeed has quit (Quit: Client closed)
2021-09-17 23:40:50	←	Phantastes has quit (Quit: Phantastes)
2021-09-17 23:45:56	→	parafactual has joined #haskell
2021-09-17 23:48:57	→	lavaman has joined #haskell
2021-09-17 23:50:56	→	eggplantade has joined #haskell
2021-09-17 23:53:37	←	lavaman has quit (Ping timeout: 252 seconds)
2021-09-17 23:54:04	←	wroathe has quit (Ping timeout: 268 seconds)
2021-09-17 23:56:36	→	merijn has joined #haskell
2021-09-18 00:00:15	→	OutreEE has joined #haskell
2021-09-18 00:01:28	←	Vajb has quit (Ping timeout: 268 seconds)
2021-09-18 00:01:28	←	aji has quit (Ping timeout: 268 seconds)
2021-09-18 00:01:46	→	aji has joined #haskell
2021-09-18 00:01:47	→	tromp has joined #haskell
2021-09-18 00:01:56	→	Vajb has joined #haskell
2021-09-18 00:02:06	←	wrengr_away has quit (Remote host closed the connection)
2021-09-18 00:02:50	→	TranquilEcho has joined #haskell
2021-09-18 00:04:42	←	ralu has quit (Ping timeout: 245 seconds)
2021-09-18 00:04:56	→	ralu has joined #haskell
2021-09-18 00:07:38	←	Lord_of_Life has quit (Ping timeout: 268 seconds)
2021-09-18 00:07:38	←	dyeplexer has quit (Remote host closed the connection)
2021-09-18 00:08:29	→	Lord_of_Life has joined #haskell
2021-09-18 00:09:07	→	burnsidesLlama has joined #haskell
2021-09-18 00:10:37	←	theang has quit (Ping timeout: 265 seconds)
2021-09-18 00:10:48	→	wroathe has joined #haskell
2021-09-18 00:10:48	←	wroathe has quit (Changing host)
2021-09-18 00:10:48	→	wroathe has joined #haskell
2021-09-18 00:11:05	→	theang has joined #haskell
2021-09-18 00:11:14	←	justsomeguy has quit (Quit: WeeChat 3.2)
2021-09-18 00:13:19	←	tlaxkit has quit (Quit: Leaving)
2021-09-18 00:13:52	←	burnsidesLlama has quit (Ping timeout: 252 seconds)
2021-09-18 00:15:30	←	wroathe has quit (Ping timeout: 252 seconds)
2021-09-18 00:17:29	←	Cajun has quit (Quit: Client closed)
2021-09-18 00:18:14	→	yauhsien has joined #haskell
2021-09-18 00:19:59	→	wrengr has joined #haskell
2021-09-18 00:22:05	←	hyiltiz has quit (Ping timeout: 260 seconds)
2021-09-18 00:22:56	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-18 00:25:20	→	tromp has joined #haskell
2021-09-18 00:25:24	→	hyiltiz has joined #haskell
2021-09-18 00:30:42	←	merijn has quit (Ping timeout: 260 seconds)
2021-09-18 00:32:34	←	yauhsien has quit (Ping timeout: 252 seconds)
2021-09-18 00:36:49	←	MQ-17J has quit (Ping timeout: 268 seconds)
2021-09-18 00:39:21	→	MQ-17J has joined #haskell
2021-09-18 00:42:02	→	kenran has joined #haskell
2021-09-18 00:42:43	→	aegon has joined #haskell
2021-09-18 00:45:06	→	tlaxkit has joined #haskell
2021-09-18 00:50:23	←	theang has quit (Ping timeout: 268 seconds)
2021-09-18 00:51:06	→	theang has joined #haskell
2021-09-18 00:52:14	→	tinhatcat has joined #haskell
2021-09-18 00:53:11	ℹ	irc: disconnected from server
2021-09-18 13:11:51	→	oxide has joined #haskell
2021-09-18 13:11:51	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-18 13:11:51	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-18 13:11:51	ℹ	Channel #haskell: 709 nicks (1 op, 0 voices, 708 normals)
2021-09-18 13:11:52	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-18 13:12:03	Cajun	ah i think i know why it was saying you didnt have ghc installed, did you update and/or uninstall a ghc version and the other tools with the editor open? ive had something similar happen in ghci before
2021-09-18 13:14:52	→	_ht has joined #haskell
2021-09-18 13:17:32	→	syntactic_sugar has joined #haskell
2021-09-18 13:19:27	→	hyiltiz has joined #haskell
2021-09-18 13:19:45	Axman6	yeah I think I just had old versions open at the time
2021-09-18 13:28:33	→	merijn has joined #haskell
2021-09-18 13:34:13	←	benin036932301 has quit (Ping timeout: 252 seconds)
2021-09-18 13:35:30	→	hendursa1 has joined #haskell
2021-09-18 13:35:54	→	eggplantade has joined #haskell
2021-09-18 13:35:57	←	syntactic_sugar has quit (Quit: WeeChat 3.1)
2021-09-18 13:36:10	→	syntactic_sugar has joined #haskell
2021-09-18 13:38:24	←	hendursaga has quit (Ping timeout: 276 seconds)
2021-09-18 13:39:59	→	jtomas has joined #haskell
2021-09-18 13:40:09	←	eggplantade has quit (Ping timeout: 252 seconds)
2021-09-18 13:42:01	→	eggplantade has joined #haskell
2021-09-18 13:43:17	←	syntactic_sugar has quit (Quit: WeeChat 3.1)
2021-09-18 13:44:30	←	tzh has quit (Quit: zzz)
2021-09-18 13:46:21	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-18 13:47:43	→	allbery_b has joined #haskell
2021-09-18 13:47:43	←	geekosaur has quit (Killed (NickServ (GHOST command used by allbery_b)))
2021-09-18 13:47:46	ℹ	allbery_b is now known as geekosaur
2021-09-18 13:51:20	→	max22- has joined #haskell
2021-09-18 14:00:59	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-18 14:08:03	→	TranquilEcho has joined #haskell
2021-09-18 14:12:59	→	Nahra has joined #haskell
2021-09-18 14:23:41	→	fef has joined #haskell
2021-09-18 14:24:27	←	mc47 has quit (Remote host closed the connection)
2021-09-18 14:24:43	→	yauhsien has joined #haskell
2021-09-18 14:27:38	→	kuribas has joined #haskell
2021-09-18 14:29:39	←	yauhsien has quit (Ping timeout: 260 seconds)
2021-09-18 14:30:08	←	jaror[m] has quit (Quit: You have been kicked for being idle)
2021-09-18 14:45:05	←	hololeap has quit (Remote host closed the connection)
2021-09-18 14:45:38	→	hololeap has joined #haskell
2021-09-18 14:50:07	→	chris has joined #haskell
2021-09-18 14:50:11	ℹ	chris is now known as Guest2159
2021-09-18 14:54:01	←	hyiltiz has quit (Ping timeout: 260 seconds)
2021-09-18 14:54:20	→	hyiltiz has joined #haskell
2021-09-18 15:01:49	←	hnOsmium0001 has quit (Quit: Connection closed for inactivity)
2021-09-18 15:07:17	←	Sgeo has quit (Read error: Connection reset by peer)
2021-09-18 15:14:22	→	merijn has joined #haskell
2021-09-18 15:26:27	→	__monty__ has joined #haskell
2021-09-18 15:28:49	←	jespada has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-09-18 15:33:22	→	yauhsien has joined #haskell
2021-09-18 15:43:22	→	eggplantade has joined #haskell
2021-09-18 15:43:56	←	ikex has quit (Quit: ZNC - https://znc.in)
2021-09-18 15:44:09	→	ikex has joined #haskell
2021-09-18 15:48:09	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-18 15:54:00	→	tomjaguarpaw has joined #haskell
2021-09-18 16:00:41	←	haskl has quit (Read error: Connection reset by peer)
2021-09-18 16:00:51	←	favonia has quit (Ping timeout: 265 seconds)
2021-09-18 16:03:10	→	haskl has joined #haskell
2021-09-18 16:11:47	→	jespada has joined #haskell
2021-09-18 16:15:01	xerox	maerwald: does ghcup install arm ghc on m1 nowadays?
2021-09-18 16:32:16	→	rond_ has joined #haskell
2021-09-18 16:33:53	←	yauhsien has quit (Ping timeout: 260 seconds)
2021-09-18 16:36:08	←	Gurkenglas has quit (Ping timeout: 268 seconds)
2021-09-18 16:37:06	←	mikoto-chan has quit (Ping timeout: 265 seconds)
2021-09-18 16:41:23	tomjaguarpaw	Not sure if there's a nuance I'm missing but does this answer your question: https://gitlab.haskell.org/haskell/ghcup-hs#supported-platforms
2021-09-18 16:48:15	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-18 16:58:27	→	[itchyjunk] has joined #haskell
2021-09-18 17:05:23	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-18 17:07:30	→	Topsi has joined #haskell
2021-09-18 17:13:50	←	Topsi has quit (Quit: Leaving.)
2021-09-18 17:14:31	→	Everything has joined #haskell
2021-09-18 17:14:56	→	Topsi has joined #haskell
2021-09-18 17:20:19	→	wei2912 has joined #haskell
2021-09-18 17:25:12	←	kmein has quit (Quit: ciao kakao)
2021-09-18 17:25:32	→	kmein has joined #haskell
2021-09-18 17:27:35	←	max22- has quit (Ping timeout: 260 seconds)
2021-09-18 17:34:21	→	sm2n_ has joined #haskell
2021-09-18 17:34:56	←	sm2n has quit (Ping timeout: 268 seconds)
2021-09-18 17:37:08	→	juhp_ has joined #haskell
2021-09-18 17:41:00	←	juhp has quit (Ping timeout: 252 seconds)
2021-09-18 17:41:01	ℹ	juhp_ is now known as juhp
2021-09-18 17:43:02	→	mikoto-chan has joined #haskell
2021-09-18 17:45:14	←	mikoto-chan has quit (Read error: Connection reset by peer)
2021-09-18 17:48:52	←	hyiltiz has quit (Ping timeout: 252 seconds)
2021-09-18 17:50:14	←	fef has quit (Remote host closed the connection)
2021-09-18 17:50:39	→	fef has joined #haskell
2021-09-18 17:51:15	→	hyiltiz has joined #haskell
2021-09-18 17:51:20	→	mikoto-chan has joined #haskell
2021-09-18 17:58:02	→	Guest22 has joined #haskell
2021-09-18 17:58:40	Guest22	@unpl ((`notElem` " |+") . head)
2021-09-18 17:58:41	lambdabot	(\ x -> notElem (head x) " |+")
2021-09-18 17:59:27	←	mikoto-chan has quit (Read error: Connection reset by peer)
2021-09-18 17:59:57	Guest22	@unpl break ((`notElem` " |+") . head) $ lines side
2021-09-18 17:59:57	lambdabot	(break (\ x -> notElem (head x) " |+") (lines side))
2021-09-18 18:02:57	←	fef has quit (Quit: Leaving)
2021-09-18 18:03:34	←	hrnz has quit (Quit: das ist mir zu bld hier; bb)
2021-09-18 18:04:19	←	nrl^ has quit (Ping timeout: 268 seconds)
2021-09-18 18:04:27	→	hrnz has joined #haskell
2021-09-18 18:05:09	→	raehik has joined #haskell
2021-09-18 18:05:56	→	acidjnk has joined #haskell
2021-09-18 18:09:37	←	hrnz has quit (Quit: das ist mir zu bld hier; bb)
2021-09-18 18:10:04	→	hrnz has joined #haskell
2021-09-18 18:13:58	→	sheddow has joined #haskell
2021-09-18 18:16:08	maerwald	xerox: yes
2021-09-18 18:17:19	maerwald	xerox: https://gitlab.haskell.org/haskell/ghcup-hs#supported-platforms
2021-09-18 18:17:32	←	pony has quit (Quit: WeeChat 2.8)
2021-09-18 18:18:37	→	max22- has joined #haskell
2021-09-18 18:19:33	←	Vq has quit (Quit: Server upgrade)
2021-09-18 18:26:42	→	mikoto-chan has joined #haskell
2021-09-18 18:27:25	xerox	maerwald: could it be that I have the x64 version and it won't ever think of updating to an arm version because of this
2021-09-18 18:27:56	maerwald	yeah
2021-09-18 18:28:01	xerox	makes sense
2021-09-18 18:28:19	maerwald	https://downloads.haskell.org/~ghcup/aarch64-apple-darwin-ghcup
2021-09-18 18:28:27	xerox	appreciate it (:
2021-09-18 18:28:43	xerox	are there still random bugs or is it solid nowadays?
2021-09-18 18:29:01	xerox	in the whole thing, ghc and friends
2021-09-18 18:29:58	maerwald	there are a couple of bugs I guess
2021-09-18 18:30:17	maerwald	https://gitlab.haskell.org/ghc/ghc/-/issues?label_name[]=aarch64-darwin
2021-09-18 18:30:33	maerwald	and someone on the stack issue tracker claims the aarch64 ghc is 10 times slower
2021-09-18 18:30:37	maerwald	but I haven't seen that
2021-09-18 18:31:32	→	yauhsien has joined #haskell
2021-09-18 18:31:57	maerwald	I mean, GHC, ghcup and cabal are all built successfully on darwin M1
2021-09-18 18:31:58	geekosaur	is that for 8.10.7 or for 9.2 alpha? going through llvm means a decent amount of extra work going on (llc and opt)
2021-09-18 18:32:04	←	vysn has quit (Ping timeout: 268 seconds)
2021-09-18 18:32:16	maerwald	and cabal and ghcup have a decent amount of dependencies
2021-09-18 18:32:22	xerox	ah yes I am on 8.10
2021-09-18 18:32:56	maerwald	stack fails to build because of haskell tls shenanigans
2021-09-18 18:33:34	maerwald	that whole stack is on my personal blacklist
2021-09-18 18:33:44	maerwald	library stack I mean
2021-09-18 18:34:11	maerwald	try to convince stack upstream to switch to curl... problem solved
2021-09-18 18:35:22	←	acidjnk has quit (Ping timeout: 268 seconds)
2021-09-18 18:36:23	←	yauhsien has quit (Ping timeout: 268 seconds)
2021-09-18 18:39:46	←	mikoto-chan has quit (Read error: Connection reset by peer)
2021-09-18 18:43:17	→	Lycurgus has joined #haskell
2021-09-18 18:45:35	→	eggplantade has joined #haskell
2021-09-18 18:46:54	→	merijn has joined #haskell
2021-09-18 18:50:09	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-18 18:56:19	→	mikoto-chan has joined #haskell
2021-09-18 19:00:49	←	hendursa1 has quit (Quit: hendursa1)
2021-09-18 19:06:38	←	Guest2159 has quit (Remote host closed the connection)
2021-09-18 19:08:03	→	hendursaga has joined #haskell
2021-09-18 19:09:48	←	juhp has quit (Quit: juhp)
2021-09-18 19:10:02	→	juhp has joined #haskell
2021-09-18 19:13:08	→	ubert has joined #haskell
2021-09-18 19:14:17	←	wei2912 has quit (Quit: Lost terminal)
2021-09-18 19:14:49	→	benin036932301 has joined #haskell
2021-09-18 19:18:43	←	sheddow has quit (Ping timeout: 256 seconds)
2021-09-18 19:19:05	←	merijn has quit (Ping timeout: 260 seconds)
2021-09-18 19:20:33	←	benin036932301 has quit (Ping timeout: 252 seconds)
2021-09-18 19:23:22	←	Brumaire has quit (Ping timeout: 265 seconds)
2021-09-18 19:23:39	←	xsperry has quit (Remote host closed the connection)
2021-09-18 19:32:16	→	ub has joined #haskell
2021-09-18 19:32:39	←	ubert has quit (Ping timeout: 252 seconds)
2021-09-18 19:32:40	ℹ	ub is now known as ubert
2021-09-18 19:43:31	→	zer0bitz has joined #haskell
2021-09-18 19:45:41	←	ubert has quit (Ping timeout: 260 seconds)
2021-09-18 19:46:42	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-18 19:49:18	→	Vajb has joined #haskell
2021-09-18 19:51:45	←	Guest22 has quit (Quit: Client closed)
2021-09-18 19:55:01	←	hyiltiz has quit (Ping timeout: 260 seconds)
2021-09-18 19:55:43	→	hyiltiz has joined #haskell
2021-09-18 19:58:27	→	Gurkenglas has joined #haskell
2021-09-18 20:04:29	→	xsperry has joined #haskell
2021-09-18 20:07:15	→	waleee has joined #haskell
2021-09-18 20:11:52	→	favonia has joined #haskell
2021-09-18 20:15:30	→	Guest52 has joined #haskell
2021-09-18 20:19:33	Guest52	what types should be in place so i could add a complex number to a fractional number?
2021-09-18 20:19:57	←	Lycurgus has quit (Quit: Exeunt)
2021-09-18 20:20:00	Guest52	ive tried everything but always get the error `Occurs check: cannot construct the infinite type: a1 ~ Complex a1`
2021-09-18 20:22:36	xerox	> let a = 2/3; b = (-2/3) + 1 in a :+ b
2021-09-18 20:22:38	lambdabot	 0.6666666666666666 :+ 0.33333333333333337
2021-09-18 20:23:00	xerox	missed a : in b's def, oopsie
2021-09-18 20:23:27	xerox	and it's wrong anyway!
2021-09-18 20:24:07	→	vysn has joined #haskell
2021-09-18 20:25:01	xerox	I guess you complexify your rational with ":+ 0" and that's it
2021-09-18 20:26:38	ProofTechnique	> let a = 2/3; b = 1 :+ 1 in a + b
2021-09-18 20:26:39	lambdabot	 1.6666666666666665 :+ 1.0
2021-09-18 20:27:52	Guest52	no
2021-09-18 20:28:00	Guest52	i mean
2021-09-18 20:28:30	Guest52	i want to add a Complex number with a double lets say 
2021-09-18 20:28:43	Guest52	not two doubles to a complex
2021-09-18 20:29:22	ProofTechnique	> let a = pi; b = 1 :+ 1 in a + b
2021-09-18 20:29:23	lambdabot	 4.141592653589793 :+ 1.0
2021-09-18 20:29:28	ProofTechnique	I'm not following
2021-09-18 20:29:45	ProofTechnique	What does "add" mean?
2021-09-18 20:29:51	Guest52	(0 :+ 0) + (1.2 :: Double)
2021-09-18 20:30:12	xerox	> let a = 2/3 :: Double; b = (-2/3) :+ 1 :: Complex Double; f x y = (x :+ 0) + y in f a b
2021-09-18 20:30:14	lambdabot	 0.0 :+ 1.0
2021-09-18 20:33:05	→	yauhsien has joined #haskell
2021-09-18 20:34:04	→	slowButPresent has joined #haskell
2021-09-18 20:36:15	Drew[m]	`(0 :+ 0) + (realToFrac 1.2) `
2021-09-18 20:38:05	←	yauhsien has quit (Ping timeout: 268 seconds)
2021-09-18 20:44:36	→	wroathe has joined #haskell
2021-09-18 20:44:36	←	wroathe has quit (Changing host)
2021-09-18 20:44:36	→	wroathe has joined #haskell
2021-09-18 20:47:11	→	eggplantade has joined #haskell
2021-09-18 20:48:42	←	hololeap has quit (Ping timeout: 276 seconds)
2021-09-18 20:50:48	monochrom	Haha latest plot twist in the haskell-cafe hell thread: "I learned Haskell straight from the Haskell Report" "Yeah me too"
2021-09-18 20:51:57	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-18 20:52:51	hpc	use the source, luke
2021-09-18 20:53:45	monochrom	Oh yeah should I troll with "I learned Haskell from the source code of Hugs, it maps Haskell to the bare metal when the rubber hits to road"?  >:)
2021-09-18 20:54:00	monochrom	err s/hits to road/hits the road/
2021-09-18 20:54:34	monochrom	"It is written in C.  It's very readable."
2021-09-18 20:55:02	monochrom	"I ruled out GHC because back then there was a component written in Perl.  Not readable."
2021-09-18 20:56:35	c_wraith	is the renamer no longer in perl?
2021-09-18 20:57:18	monochrom	Actually more seriously I would want to challenge him "did you learn C from an actual compiler that does an actual mapping to the rubber-hit-the-road thing you rambled about, or did you only imagine a fantasy mapping to congratulate yourself?"
2021-09-18 20:57:39	monochrom	I think there is no longer a renamer.
2021-09-18 20:57:48	c_wraith	that'd do the job
2021-09-18 20:58:04	sclv	“i learned haskell because i invented a perfect language in my head and it turned out paul hudak and lennart had the same idea already” lmao
2021-09-18 20:58:23	hpc	monochrom: "i learned python straight from the test suite"
2021-09-18 20:58:26	monochrom	Ah but GHC has a large component written in Haskell again.  If I haven't learned Haskell I can't read it to learn Haskell... >:)
2021-09-18 20:58:45	monochrom	haha hpc
2021-09-18 20:58:53	monochrom	@quote monochrom downloaded
2021-09-18 20:58:53	lambdabot	monochrom says: I was trying to design a sensible language... then I downloaded ghc.
2021-09-18 20:59:37	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-18 21:00:08	monochrom	OK don't worry folks, I'm on a leash, all the dream posts I said I wanted to post, I won't because I know they are not helpful.
2021-09-18 21:00:38	→	Vajb has joined #haskell
2021-09-18 21:01:06	monochrom	I have posted only once, and it was only to debunk "visual learner, spatial learner", and cdsmith did it too.
2021-09-18 21:04:17	Drew[m]	Is there a tool to take a package and a stackage lts version you know its developer used to build it and return the versions of all its dependencies, without installing stack?
2021-09-18 21:04:52	Drew[m]	That would be handy to have right now
2021-09-18 21:05:15	maerwald	Drew[m]: you want to build a stack project with cabal?
2021-09-18 21:05:48	→	avital has joined #haskell
2021-09-18 21:06:05	Drew[m]	I want to build a hackage package with cabal that a maintainer hasn't put any upper bounds on
2021-09-18 21:06:07	←	jakalx has left #haskell (Error from remote client)
2021-09-18 21:06:34	maerwald	so you want to build a stack project with cabal?
2021-09-18 21:06:49	Drew[m]	essentially
2021-09-18 21:06:54	maerwald	https://hackage.haskell.org/package/stack2cabal
2021-09-18 21:07:08	sclv	monochrom: that was a great link you posted on learning styles by the way, wasn't aware really before
2021-09-18 21:07:35	Drew[m]	maerwald: Ah, thanks
2021-09-18 21:08:05	monochrom	Yeah you can count on Veritasium and other science communicator channels.
2021-09-18 21:10:08	avital	Hi all. This is something I don't quite get. I am trying to use Control.Arrow. Say I have an arrow defined as `pre = (arr .) (++)`. Which makes an arrow `Arrow a1 => [a2] -> a1 [a2] [a2]`. I can run the arrow say with `["one", "two"] >>=(runKleisli $ pre "test")
2021-09-18 21:10:46	avital	But What I do not get is how runKleisli takes an arrow while its type signature requires Kleisli?
2021-09-18 21:10:55	monochrom	@type (arr .) (++)
2021-09-18 21:10:56	lambdabot	Arrow a1 => [a2] -> a1 [a2] [a2]
2021-09-18 21:11:28	avital	I get I can use Kleisli where Arrow is expected bc there is an Arrow instance for Kleisli
2021-09-18 21:11:33	monochrom	@type runKleisli
2021-09-18 21:11:34	avital	But this is reverse
2021-09-18 21:11:34	lambdabot	Kleisli m a b -> a -> m b
2021-09-18 21:11:56	c_wraith	avital: pre is polymorphic, as defined.
2021-09-18 21:12:18	ProofTechnique	I like how this video dances around the point that the learning style myth is just a knock-on consequence of Western hyperindividualist woo
2021-09-18 21:12:26	monochrom	Ah, right, a1 = Kleisli m
2021-09-18 21:13:04	c_wraith	Kleisli [], in that particular case
2021-09-18 21:13:35	avital	What type resolution rule is applied to make an arrow into kleisli in runKleisli, that what I don't quite get. Sorry, this might be a real dumb question
2021-09-18 21:13:54	c_wraith	It's just unification
2021-09-18 21:14:39	→	jakalx has joined #haskell
2021-09-18 21:15:13	c_wraith	pre "test" :: Arrow a1 => a1 [a2] [a2] ; runKleisli :: Kleisli m a b -> a -> m b
2021-09-18 21:15:25	→	merijn has joined #haskell
2021-09-18 21:16:21	c_wraith	err.  (Arrow a1 => a1 String String), actually
2021-09-18 21:16:30	avital	So how Arrow a1 is type-compatible with Kleisli m a b
2021-09-18 21:16:40	c_wraith	Arrow a1 isn't a type
2021-09-18 21:16:44	c_wraith	it's a constraint
2021-09-18 21:16:49	avital	Constraint
2021-09-18 21:16:58	avital	Yup, I get that
2021-09-18 21:17:00	c_wraith	Kleisli m is an instance of Arrow
2021-09-18 21:17:09	c_wraith	so Kleisli m unifies with a1
2021-09-18 21:17:18	←	hendursaga has quit (Ping timeout: 276 seconds)
2021-09-18 21:17:32	avital	Guess I will go read about unification some more, thank you, c_wraith
2021-09-18 21:18:18	monochrom	a1 is the type compatible with Kleisli m
2021-09-18 21:18:21	←	[itchyjunk] has quit (Remote host closed the connection)
2021-09-18 21:18:28	→	hendursaga has joined #haskell
2021-09-18 21:18:32	c_wraith	It's the same idea as  let { x :: Int ; x = 3 ; f :: Num a => a -> a ; f = (+ 1) } in f x
2021-09-18 21:19:23	monochrom	I think my http://www.vex.net/~trebla/haskell/prerequisite.xhtml#unification is all you need to know about unification for a long time.
2021-09-18 21:19:38	←	pavonia has quit (Quit: Bye!)
2021-09-18 21:19:46	avital	ty, c_wraith, monochrom
2021-09-18 21:19:53	monochrom	I say this because if you Google for unification you will just be getting detailed algorithms that you don't need and won't care for a long time.
2021-09-18 21:20:27	c_wraith	Yeah, definitely don't look at unification algorithms.  They're super-complicated because of edge cases that aren't important for this
2021-09-18 21:20:27	monochrom	What most people need for the most part is the problem statement of unification, not a solution.
2021-09-18 21:21:45	monochrom	Or at most, an inefficient but straigthforward solution that you can say "ah yeah this is easy I can do it by hand".
2021-09-18 21:22:35	←	jakalx has left #haskell (Error from remote client)
2021-09-18 21:24:17	hpc	which usually you can
2021-09-18 21:24:43	→	cheater1__ has joined #haskell
2021-09-18 21:24:50	hpc	things don't get difficult unless you do something uselessly complicated like fmap (fmap fmap fmap) fmap (fmap (fmap fmap) fmap) fmap fmap
2021-09-18 21:24:57	←	cheater has quit (Ping timeout: 268 seconds)
2021-09-18 21:25:06	ℹ	cheater1__ is now known as cheater
2021-09-18 21:27:22	EvanR	when all sentences work, no help from the computer notifying you of writing the wrong thing
2021-09-18 21:27:29	EvanR	bad
2021-09-18 21:28:12	EvanR	all least not all fmap clouds fit all slots
2021-09-18 21:28:32	int-e	:t fmap (fmap fmap fmap) fmap (fmap (fmap fmap) fmap) fmap fmap
2021-09-18 21:28:33	lambdabot	(Functor f1, Functor f2, Functor f3) => f1 (a1 -> b) -> f1 ((a2 -> f3 a1) -> f2 a2 -> f2 (f3 b))
2021-09-18 21:29:02	int-e	could be worse :P
2021-09-18 21:29:31	→	jtomas_ has joined #haskell
2021-09-18 21:31:48	←	avital has quit (Quit: Client closed)
2021-09-18 21:32:54	←	jtomas has quit (Ping timeout: 265 seconds)
2021-09-18 21:33:43	int-e	:t fmap ((fmap .) . (.) . fmap)
2021-09-18 21:33:44	lambdabot	(Functor f1, Functor f2, Functor f3) => f1 (a1 -> b) -> f1 ((a2 -> f3 a1) -> f2 a2 -> f2 (f3 b))
2021-09-18 21:34:43	int-e	hpc: ^^ it's almost reasonable!
2021-09-18 21:35:09	hpc	definitely almost :P
2021-09-18 21:35:10	→	jakalx has joined #haskell
2021-09-18 21:35:29	monochrom	"is this representable functor?" meme
2021-09-18 21:38:39	ldlework	Reading about Reader, and my tiny brain can't handle it.
2021-09-18 21:39:08	hpc	you should write about Writer instead
2021-09-18 21:39:33	ldlework	hah
2021-09-18 21:39:36	monochrom	"Each Reader functor is just the representation of a representable functor, what's the problem?"  >:)
2021-09-18 21:39:58	ldlework	Last night in HFFP: "Reader is the Functor of functions."
2021-09-18 21:40:02	ldlework	Me: Weeeeeeeeeee
2021-09-18 21:40:36	monochrom	More seriously, you should not be reading.  This is not a spectator sport.  You should be trying your hands at guessing how to code up fmap, >>=, etc for Reader.
2021-09-18 21:41:03	ldlework	monochrom: I do all the exercises in the book and I've stopped to write a few haskell experiments like with gloss and some other stuff.
2021-09-18 21:41:18	ldlework	But each chapter needs to read at least once :P
2021-09-18 21:42:06	ldlework	(or let's be real, twice or thrice heh)
2021-09-18 21:42:08	monochrom	Sure, but the reading is only to be told "Reader is an instance of Functor".
2021-09-18 21:42:26	monochrom	Beyond that point, if you just read how other people code it up, it makes no sense.
2021-09-18 21:42:45	monochrom	It only makes sense after you walk the same journey yourself.
2021-09-18 21:42:47	ldlework	Well a series of examples of the typeclass in use is instructive
2021-09-18 21:43:02	ldlework	monochrom: sure that's what the exercises in the back of the chapter are for!
2021-09-18 21:43:05	hpc	also consider what you would do if you didn't have Monad and do-notation
2021-09-18 21:43:09	monochrom	OK even after that you will still be missing something. But that is the minimum.
2021-09-18 21:43:15	hpc	and how you would write some random Reader thing
2021-09-18 21:43:45	hpc	then those class functions are just the things you're doing over and over again
2021-09-18 21:44:29	hpc	like for Maybe, the thing you do over and over again is case foo of {Nothing -> Nothing; Just x -> something involving x}
2021-09-18 21:44:45	monochrom	Use case is that if you have "Reader Int XXX" it means that you can a read-only config of type Int you want to consult every once in a while.  THE END.
2021-09-18 21:45:54	ldlework	Someone should make a code-academy thing for haskell
2021-09-18 21:45:55	←	waleee has quit (Ping timeout: 252 seconds)
2021-09-18 21:45:57	c_wraith	Reader itself isn't very useful
2021-09-18 21:46:37	ldlework	I think that'd be really valuable
2021-09-18 21:47:37	→	waleee has joined #haskell
2021-09-18 21:48:31	→	sheddow has joined #haskell
2021-09-18 21:52:10	←	jtomas_ has quit (Ping timeout: 260 seconds)
2021-09-18 21:53:34	→	hololeap has joined #haskell
2021-09-18 21:53:43	→	Brumaire has joined #haskell
2021-09-18 22:01:09	→	hnOsmium0001 has joined #haskell
2021-09-18 22:03:13	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-18 22:04:27	→	Vajb has joined #haskell
2021-09-18 22:05:34	→	VoidNoir0 has joined #haskell
2021-09-18 22:06:18	kuribas	Which REST framework, besides servant, lets you generate openapi docs, clients, etc?
2021-09-18 22:07:19	←	meinside has quit (Quit: Connection closed for inactivity)
2021-09-18 22:07:51	kuribas	I didn't find any...
2021-09-18 22:07:54	→	eggplantade has joined #haskell
2021-09-18 22:08:23	hpc	what's wrong with servant?
2021-09-18 22:08:31	kuribas	it's fancy haskell
2021-09-18 22:08:42	hpc	heh
2021-09-18 22:08:48	kuribas	It is fairly easy to use, until you want to extend it.
2021-09-18 22:08:53	kuribas	Write your own types.
2021-09-18 22:09:03	kuribas	And it is basically untyped on the type level (unkinded?)
2021-09-18 22:11:19	→	lbseale has joined #haskell
2021-09-18 22:11:35	kuribas	It also seems overcomplicated, with it's use of GADTs.
2021-09-18 22:12:41	→	hsiktas[m] has joined #haskell
2021-09-18 22:12:52	kuribas	I just think you could have all the functionality of servant without any type level stuff.
2021-09-18 22:13:21	kuribas	For example, when you generate an REST server, it also creates the API description.
2021-09-18 22:13:43	kuribas	(a theoritical web framework I mean).
2021-09-18 22:14:00	kuribas	Then from the API description you could generate client, openapi, etc...
2021-09-18 22:14:49	←	juhp has quit (Quit: juhp)
2021-09-18 22:15:08	→	juhp has joined #haskell
2021-09-18 22:15:25	ProofTechnique	Scala has tapir
2021-09-18 22:15:42	→	tommd has joined #haskell
2021-09-18 22:16:06	ProofTechnique	Might have some ideas worth stealing, though I expect the mapping won't be very direct, and I imagine the internals are "fancy Scala"
2021-09-18 22:16:40	ldlework	Can you call a function using `getArgs` from ghci repl
2021-09-18 22:17:00	→	jstolarek has joined #haskell
2021-09-18 22:17:18	geekosaur	could you give an example of what you're trying to do?
2021-09-18 22:17:25	kuribas	I just think a type level REST API would work better in idris.
2021-09-18 22:17:42	kuribas	Because the API would be a normal value.
2021-09-18 22:18:13	hpc	ldlework: try it
2021-09-18 22:18:33	ldlework	hpc: i did
2021-09-18 22:18:38	kuribas	Is template haskell "fancy"?
2021-09-18 22:18:55	geekosaur	if you mean can you pass values via getArgs, there is :main and there is :set args
2021-09-18 22:19:01	monochrom	If you run ":main a b c", getArgs will receive ["a","b","c"]
2021-09-18 22:19:08	ldlework	monochrom: oh thanks
2021-09-18 22:19:44	hpc	ah, you meant "and actually give it arguments"
2021-09-18 22:19:53	ldlework	yeah hehe
2021-09-18 22:20:09	geekosaur	yeh, I was unclear on that as well
2021-09-18 22:21:49	kuribas	weird that idris gets so little traction, when people love type level programming so much...
2021-09-18 22:22:12	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-18 22:22:51	→	econo has joined #haskell
2021-09-18 22:23:52	←	Flonk has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-18 22:24:10	←	mikoto-chan has quit (Read error: No route to host)
2021-09-18 22:24:34	→	mikoto-chan has joined #haskell
2021-09-18 22:29:04	ldlework	with `runhaskell` is there a way to invoke a specific function
2021-09-18 22:30:47	ldlework	other than main, that is
2021-09-18 22:30:57	geekosaur	I think the closest you get is --ghc-arg='-main-is function'
2021-09-18 22:31:08	geekosaur	which requires the function to behave like main
2021-09-18 22:31:21	monochrom	ghc -e 'f 5' yourfile.hs
2021-09-18 22:32:00	monochrom	In fact ghc -e '1+1' yourfile.hs too, although it seems like trolling if you load up the file just to end up not using it :)
2021-09-18 22:32:27	monochrom	ghc -e '1+1' is also OK, you don't have to name a file.
2021-09-18 22:32:57	ldlework	monochrom: ah that worked, thanks
2021-09-18 22:37:21	→	merijn has joined #haskell
2021-09-18 22:42:01	←	hyiltiz has quit (Ping timeout: 252 seconds)
2021-09-18 22:42:24	←	raehik has quit (Ping timeout: 252 seconds)
2021-09-18 22:42:33	←	merijn has quit (Ping timeout: 260 seconds)
2021-09-18 22:44:18	→	machinedgod has joined #haskell
2021-09-18 22:47:40	kuribas	hmm, I actually have a nice idea for a higher kinded, profunctor REST API...
2021-09-18 22:48:05	←	lbseale has quit (Read error: Connection reset by peer)
2021-09-18 22:48:19	kuribas	Will still require generics or TH though...
2021-09-18 22:48:38	→	raehik has joined #haskell
2021-09-18 22:50:06	←	Guest52 has quit (Quit: Client closed)
2021-09-18 22:50:29	→	tzh has joined #haskell
2021-09-18 22:50:58	→	jtomas_ has joined #haskell
2021-09-18 22:52:31	→	hyiltiz has joined #haskell
2021-09-18 22:54:07	←	neurocyte0 has quit (Ping timeout: 252 seconds)
2021-09-18 22:54:22	←	hyiltiz has quit (Read error: Connection reset by peer)
2021-09-18 22:56:36	→	tromp has joined #haskell
2021-09-18 22:57:29	←	kuribas has quit (Quit: ERC (IRC client for Emacs 26.3))
2021-09-18 23:00:56	ldlework	I built a handy bash script that lets me either; run, doctest or quicktest a given HFFP exercise, chapter, or everything -- with the ability to "watch" a single exercise in either doctest or quicktest mode
2021-09-18 23:02:22	ldlework	I wonder if it'd be of any value if I made a template repo, with all of the exercises stubbed out, ready to be solved
2021-09-18 23:06:36	←	machinedgod has quit (Ping timeout: 252 seconds)
2021-09-18 23:13:25	hololeap	is there a way to reuse a portion of a cabal file, e.g. a subset of dependencies that are used by multiple executables in the same package?
2021-09-18 23:13:34	sm	sounds good! and a reddit post
2021-09-18 23:14:03	sm	yes hololeap
2021-09-18 23:14:38	→	Vq has joined #haskell
2021-09-18 23:16:20	←	cheater has quit (Ping timeout: 265 seconds)
2021-09-18 23:16:22	←	Topsi has quit (Read error: Connection reset by peer)
2021-09-18 23:16:37	hololeap	oh, just found it: common stanzas
2021-09-18 23:16:37	→	cheater has joined #haskell
2021-09-18 23:19:05	→	lbseale has joined #haskell
2021-09-18 23:20:54	→	jlamothe has joined #haskell
2021-09-18 23:21:24	→	merijn has joined #haskell
2021-09-18 23:22:23	←	lbseale has quit (Read error: Connection reset by peer)
2021-09-18 23:25:32	←	jakalx has left #haskell (Disconnected: Replaced by new connection)
2021-09-18 23:25:33	→	jakalx has joined #haskell
2021-09-18 23:42:02	→	azimut has joined #haskell
2021-09-18 23:44:10	←	merijn has quit (Ping timeout: 240 seconds)
2021-09-18 23:44:59	←	betelgeuse has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-18 23:45:30	←	azimut_ has quit (Ping timeout: 276 seconds)
2021-09-18 23:45:47	sshine	ldlework, what's HFFP?
2021-09-18 23:46:19	sshine	ldlework, oh, first principles book.
2021-09-18 23:46:36	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-18 23:50:29	←	max22- has quit (Ping timeout: 268 seconds)
2021-09-18 23:52:49	→	fresheyeball has joined #haskell
2021-09-18 23:59:30	→	Sgeo has joined #haskell
2021-09-18 23:59:50	←	sander has quit (Ping timeout: 265 seconds)
2021-09-19 00:04:42	←	tommd has quit (Ping timeout: 260 seconds)
2021-09-19 00:04:46	→	wootehfoot has joined #haskell
2021-09-19 00:09:34	→	Lycurgus has joined #haskell
2021-09-19 00:12:11	hololeap	sshine: it's the noise you make when someone tells you haskell will never break into the mainstream
2021-09-19 00:14:38	Lycurgus	hs from 1st principles, i was gonna guess gigglesnort
2021-09-19 00:17:27	→	max22- has joined #haskell
2021-09-19 00:20:23	←	Chai-T-Rex has quit (Remote host closed the connection)
2021-09-19 00:22:37	→	neurocyte01 has joined #haskell
2021-09-19 00:22:37	←	neurocyte01 has quit (Changing host)
2021-09-19 00:22:37	→	neurocyte01 has joined #haskell
2021-09-19 00:25:22	→	Chai-T-Rex has joined #haskell
2021-09-19 00:28:13	→	yinghua has joined #haskell
2021-09-19 00:30:36	←	yinghua has quit (Quit: Leaving)
2021-09-19 00:33:59	→	yinghua has joined #haskell
2021-09-19 00:34:22	→	sander has joined #haskell
2021-09-19 00:37:50	←	justsomeguy has quit (Ping timeout: 260 seconds)
2021-09-19 00:49:31	awpr	> let buffalo = fmap -- after reading this morning's backlogs about unification
2021-09-19 00:49:32	lambdabot	 <no location info>: error:
2021-09-19 00:49:33	lambdabot	     not an expression: ‘let buffalo = fmap -- after reading this morning's b...
2021-09-19 00:50:56	hpc	lol
2021-09-19 00:54:27	→	merijn has joined #haskell
2021-09-19 01:00:41	→	justsomeguy has joined #haskell
2021-09-19 01:01:32	sm	someone should write PFFFH
2021-09-19 01:03:01	justsomeguy	Programming functionally from finnish hotels?
2021-09-19 01:03:37	awpr	Profunctors and Functors For Fledgling Haskellers
2021-09-19 01:03:40	maerwald	any good finnish hotels for coding haskell?
2021-09-19 01:03:47	sm	Programmers' Follies, Failures and Fun with Haskell ?
2021-09-19 01:06:54	←	neurocyte01 has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-19 01:07:44	→	[itchyjunk] has joined #haskell
2021-09-19 01:07:53	→	[_] has joined #haskell
2021-09-19 01:08:12	←	[_] has quit (Remote host closed the connection)
2021-09-19 01:08:17	←	[itchyjunk] has quit (Remote host closed the connection)
2021-09-19 01:08:33	→	[itchyjunk] has joined #haskell
2021-09-19 01:08:58	→	neurocyte01 has joined #haskell
2021-09-19 01:08:58	←	neurocyte01 has quit (Changing host)
2021-09-19 01:08:58	→	neurocyte01 has joined #haskell
2021-09-19 01:09:08	monochrom	In Soviet Russia, principles form first haskell? >:)
2021-09-19 01:11:14	monochrom	I don't want haskell to be mainstream.
2021-09-19 01:11:55	monochrom	People are in delusional denial of what would happen if haskell went into mainstream.
2021-09-19 01:12:15	maerwald	that means you're basically not pro Haskell Foundation
2021-09-19 01:12:23	monochrom	It would mean haskell would be changed by mainstream, not mainstream changed by haskell.  Don't be naïve.
2021-09-19 01:12:42	monochrom	Do you want haskell to adopt mainstream values?
2021-09-19 01:13:12	monochrom	For example utter disrespect of types?
2021-09-19 01:13:52	sm	Programmers' Fabulous Fantasies For Haskell ?
2021-09-19 01:14:02	monochrom	The "I'm bad at math, and proud of it" anti-intellectual attitude?
2021-09-19 01:14:43	monochrom	Note that that attitude means that even our "foldr :: (a -> b -> b) -> ..." is "too advanced, PhD level".
2021-09-19 01:14:54	maerwald	I was good at math, but I remember none of it. Does that count?
2021-09-19 01:15:09	→	acidjnk has joined #haskell
2021-09-19 01:15:14	awpr	also that it's too hard to learn the word "Endo" as "function that returns the same type it accepts"
2021-09-19 01:15:34	monochrom	No.  Haskell just needs the aptitude, not the memory.
2021-09-19 01:15:51	maerwald	I mean come on... how would you keep those things in memory if you have no exposure. And most coding gives you no exposure.
2021-09-19 01:16:05	awpr	_disclaimer: any similarity to current topics of discussion in any other media is purely coincidental and not to be construed as passing judgment on any other forum_
2021-09-19 01:16:25	monochrom	Here is an example of being bad at math in a way that hinders learning Haskell.
2021-09-19 01:16:44	monochrom	Suppose I define f(x) = x+1 and g(x) = 2*x, and now ask you about f(g(x)).
2021-09-19 01:17:15	monochrom	Here is some people's mental model that leads them to failure. You won't believe it, but I saw it happen.
2021-09-19 01:17:37	monochrom	They think of "x" as a global variable and there is only one global x.
2021-09-19 01:17:55	maerwald	that's rough
2021-09-19 01:18:01	sshine	does HLS understand 'default-extensions'? I have OverloadedStrings listed there, and I get a String/Text error in haskell-mode + lsp-haskell in Emacs.
2021-09-19 01:18:13	maerwald	is x an object or a class?
2021-09-19 01:18:16	maerwald	:D
2021-09-19 01:18:21	monochrom	So for example if I start talking about f(g(5)), their trouble is that now x=5 and also x=g(5) and also x=g(x).
2021-09-19 01:19:19	monochrom	You don't remember the quadratic formula, but you still retain your skill of plugging in, you have a correct mental model of functions.  That's all I need.
2021-09-19 01:19:31	awpr	to be fair it's easy to mix up xs in different scopes when evaluating mentally, even if you know in principle that they're unrelated things
2021-09-19 01:19:35	hpc	this is why haskell has unicode support, so you can have 144,762 variables instead of 26
2021-09-19 01:19:48	monochrom	haha
2021-09-19 01:19:49	sm	sshine: for me, most things HLS seem to depend on the phase of the moon...
2021-09-19 01:20:08	sshine	https://github.com/haskell/haskell-language-server/issues/590
2021-09-19 01:20:14	monochrom	Well 144762 variables still can't help you with f(5) + f(6).
2021-09-19 01:20:43	awpr	which is to say, doing capture-avoiding substitution in my head isn't the easiest thing
2021-09-19 01:21:45	awpr	huh, I just realized I reason about `f(g(x))` in something more akin to point-free form, i.e. interpret `f` into like "add one" and `g` into "double"
2021-09-19 01:22:00	monochrom	Another mainstream value is banning recursion.
2021-09-19 01:22:39	sshine	sm, my project is actually ghc-8.10, as that issue suggests would work. but I'm betting that the hlint my emacs refers to is compiled against another version.
2021-09-19 01:22:53	monochrom	I would love to be one of the hippies and soften that to "they just avoid recursion" but no, there are companies that explicitly ban recursion in their code base.
2021-09-19 01:23:38	monochrom	On the very ground that "we want to hire employees who can't deal with recursion".
2021-09-19 01:23:50	sm	sshine: sounds likely.. unfortunately there are still so many ways for things to go wrong, and not enough easy troubleshooting techniques
2021-09-19 01:24:05	awpr	is that a _value_, or an observation that recursion in C-family languages is just a shorthand for "technically-O(1) algorithm for computing stack overflows"
2021-09-19 01:24:17	⚡	sm is a little down on HLS as it hasn't been working in some projects lately. It'll pass
2021-09-19 01:24:32	awpr	ah, if it's about hiring then it sounds like a value
2021-09-19 01:24:34	maerwald	my manager once said that "coders -> coders who understand recursion -> coders who understand dynamic programming"
2021-09-19 01:24:46	monochrom	It is a value.  The reason for banning recursion is perceived human difficulty, not perceived machine penalty.
2021-09-19 01:25:01	→	tromp has joined #haskell
2021-09-19 01:25:32	⚡	awpr wants to see an inductively-defined microservice
2021-09-19 01:25:44	→	kenran has joined #haskell
2021-09-19 01:25:57	maerwald	I'd probably ban effects system in my company
2021-09-19 01:27:05	monochrom	gcc does TCO very well, and I suspect many other C compilers.  You ought to take C off the "C-family" you have in mind. :)
2021-09-19 01:27:36	hpc	monochrom: if you're a C shop you ban pointers and malloc instead
2021-09-19 01:28:18	monochrom	I would be OK with "Java-family" and if it included javascript.
2021-09-19 01:28:38	awpr	how about just "non-Hindley-Milner family"
2021-09-19 01:28:47	→	gehmehgeh has joined #haskell
2021-09-19 01:28:55	Hecate	monochrom:  damn, I had no idea gcc had support for TCO
2021-09-19 01:28:57	←	merijn has quit (Ping timeout: 268 seconds)
2021-09-19 01:29:09	awpr	Python, C, Perl, Turing machines, it's all the same
2021-09-19 01:29:24	monochrom	You have to turn on -O2.  But it has been there for decades.
2021-09-19 01:30:14	maerwald	I think I used recursion in C once
2021-09-19 01:30:16	monochrom	This is why when I was young I said "people write-protect their brains upon graduation or 21-yo"
2021-09-19 01:31:04	Hecate	monochrom: wait, has it been here for *decades* but not in a "you can absolutely, always rely on it" way?
2021-09-19 01:31:33	Hecate	Because I'm reading StackOverflow posts and apparently you shouldn't rely on this behaviour being brought to you by the C compiler
2021-09-19 01:31:53	Hecate	unless you're doing "__attribute__((musttail))"
2021-09-19 01:32:01	Hecate	(which is clang-specific
2021-09-19 01:32:03	Hecate	)
2021-09-19 01:32:03	monochrom	Put it this way, I have never seen a failure example.
2021-09-19 01:32:22	monochrom	And I wouldn't trust stackoverflow either.
2021-09-19 01:32:28	Hecate	ah, quite unfortunately this is very much not in line with what C is all about :P
2021-09-19 01:32:34	←	qbt has quit (Remote host closed the connection)
2021-09-19 01:32:51	monochrom	I can be talked into "you don't know that you can always use gcc, so don't use gcc-specific features".
2021-09-19 01:32:57	awpr	I mean, writing code that isn't capable of being a tail-call is pretty common.  recursion over a binary tree -> only one of two is a tail call at most; doing any postprocessing on the recursive result -> not a tail call unless GCC is very heroic about code motion; etc.
2021-09-19 01:33:14	monochrom	But if I already know that it's gcc, "it randomly decides not to optimize" is absurd.
2021-09-19 01:33:41	monochrom	And instead, I have seen an example of stackoverflow being wrong.
2021-09-19 01:33:50	awpr	is it possible "randomly" is code for "I didn't understand my code was not tail-call-compatible"?
2021-09-19 01:34:41	Hecate	monochrom: to be extremely honest I only do two (mutually exclusive) things when I code in C: Either I overfit my code for one precise compiler, or I keep the standard in mind and then everything is UB :P
2021-09-19 01:34:44	monochrom	No, it means that I have not changed by code, I at most upgrade to a newer gcc version.
2021-09-19 01:34:50	justsomeguy	stackoverflow is wrong so often, I don't know people even us it.
2021-09-19 01:35:00	justsomeguy	s/us it/use it/
2021-09-19 01:35:47	awpr	monochrom: right, I meant if you encounter people in the wild suggesting GCC "randomly" doesn't TCO, perhaps the truth is they incorrectly merged the cases where 
2021-09-19 01:36:00	awpr	where TCO is possible and happens with the cases where it's impossible and doesn't
2021-09-19 01:36:40	monochrom	Suppose you want to know whether stdin will hit EOF the next time you read one byte.  Stackoverflow will suggest fseek(to the end) and see if ftell says 0.
2021-09-19 01:36:50	monochrom	That's how wrong stackoverflow is.
2021-09-19 01:37:11	sshine	sm, do you fall back on ghcid or just alt-tabbing and recompiling?
2021-09-19 01:37:54	monochrom	And the only reason I know is because I put that question on exam, then my TAs noticed that several students gave that same wrong answer, and we thought of "maybe the students googled it"
2021-09-19 01:41:01	maerwald	https://git.io/JzqXg ...this C recursion likely doesn't optimize well :p
2021-09-19 01:41:25	Hecate	monochrom: excellent
2021-09-19 01:42:14	Hecate	maerwald: why so?
2021-09-19 01:42:35	maerwald	there are two
2021-09-19 01:42:59	maerwald	I remember it blowing up 
2021-09-19 01:43:08	Hecate	oh indeed
2021-09-19 01:43:30	monochrom	Well yeah I had T in TCO, I don't expect smart use-CPS-to-enable-TCO either.
2021-09-19 01:43:38	maerwald	but it kinda fits the project
2021-09-19 01:44:00	monochrom	And it is unwise to get CPS involved anyway.
2021-09-19 01:44:36	⚡	enikar paste here the first anwser find with ddg on stackoverflow: https://stackoverflow.com/questions/1428911/detecting-eof-in-c
2021-09-19 01:44:49	monochrom	If you have a genuine non-tail call, CPS just trades stack space for thunk space.
2021-09-19 01:45:32	monochrom	And if you cite "defunctionalization" after that, you just trade thunk space back for user-defined stack space.
2021-09-19 01:45:43	←	Lycurgus has quit (Quit: Exeunt)
2021-09-19 01:46:22	monochrom	You are not saving space, you're just rebranding.
2021-09-19 02:04:29	ℹ	irc: disconnected from server
2021-09-19 13:31:06	→	oxide has joined #haskell
2021-09-19 13:31:06	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-19 13:31:06	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-19 13:31:06	ℹ	Channel #haskell: 718 nicks (1 op, 0 voices, 717 normals)
2021-09-19 13:31:06	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-19 13:32:46	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-19 13:34:07	→	vysn has joined #haskell
2021-09-19 13:34:31	←	eggplantade has quit (Remote host closed the connection)
2021-09-19 13:35:58	→	hendursa1 has joined #haskell
2021-09-19 13:37:05	→	sheddow has joined #haskell
2021-09-19 13:37:11	→	eggplantade has joined #haskell
2021-09-19 13:37:33	mc47	ixlun you might find it interesting to let the type-system worry about that if you're ready to play around with some dependent types
2021-09-19 13:38:04	mc47	Maybe check the safe-money package
2021-09-19 13:39:07	mc47	I have a question: I want to lift (&&) to act on predicates that take three arguments, but I was curious if there's an elegant way to write it
2021-09-19 13:39:23	←	Sgeo has quit (Read error: Connection reset by peer)
2021-09-19 13:39:26	opqdonut	ixlun: you could use phantom types: `data Currency cur = Currency Int; add :: Currency a -> Currency a -> Currency a`
2021-09-19 13:39:26	←	hendursaga has quit (Ping timeout: 276 seconds)
2021-09-19 13:39:38	mc47	i.e. something more compact than andPQ p q a b c = p a b c && q a b c
2021-09-19 13:39:49	opqdonut	ixlun: of course then all your errors would be at compile-time, which might not be what you want
2021-09-19 13:40:42	→	dsrt^ has joined #haskell
2021-09-19 13:42:09	←	eggplantade has quit (Ping timeout: 268 seconds)
2021-09-19 13:43:16	mc47	nvm my question, chaining liftM2 is good enough 
2021-09-19 13:43:59	←	tzh has quit (Quit: zzz)
2021-09-19 13:44:23	←	geekosaur has quit (Remote host closed the connection)
2021-09-19 13:47:29	→	geekosaur has joined #haskell
2021-09-19 13:49:59	→	tromp has joined #haskell
2021-09-19 13:51:36	→	yauhsien has joined #haskell
2021-09-19 13:56:17	←	yauhsien has quit (Ping timeout: 260 seconds)
2021-09-19 13:56:29	→	Brumaire has joined #haskell
2021-09-19 13:57:35	ixlun	opqdonut: Yeah, it would have to be runtime checking since I'm reading from various data sources at runtime
2021-09-19 13:58:42	ixlun	mc47: Would going down the dependent types route restrict errors being caught at compile-time?
2021-09-19 14:00:48	tomsmeding	ixlun: do you parse currency values from data first, then get them into some uniform kind (usb/gbp/...), then operate on them?
2021-09-19 14:01:16	ixlun	Yep, that' pretty much exactly what I'm doing
2021-09-19 14:01:18	tomsmeding	i.e. does it make sense to first do a validation pass that your currency kinds are consistent, and then afterwards be able to compute with them without checking kinds?
2021-09-19 14:01:33	mc47	ixlun you'd have a computation block that is protected by the type system and you'd only need to check before going into it
2021-09-19 14:02:01	tomsmeding	data CurrencyType a where GBP :: CurrencyType "GBP" ; USD :: CurrencyType "USD" ; EUR :: CurrencyType "EUR"
2021-09-19 14:02:15	tomsmeding	data Currency a = Currency (CurrencyType a) Int
2021-09-19 14:02:39	tomsmeding	data Some f = forall a. Some (f a)  -- from the 'some' package if you don't want to define it yourself
2021-09-19 14:03:18	tomsmeding	then you can have: check :: CurrencyType a -> Some Currency -> Maybe (Currency a)
2021-09-19 14:03:44	tomsmeding	and add :: Currency a -> Currency a -> Currency a which doesn't have to care about unequal currencies
2021-09-19 14:04:45	→	lavaman has joined #haskell
2021-09-19 14:04:58	tomsmeding	perhaps also: data CurrencyList a = CurrencyList [Currency a] ; checkUniform :: [SomeCurrency] -> Maybe (Some CurrencyList)
2021-09-19 14:05:22	tomsmeding	if you want a list of equal currency kinds but don't care what they actually are
2021-09-19 14:05:24	hololeap	tomsmeding: couldn't you just have `newtype Currency a = Currency Int` and then derive Num, etc with GNTD?
2021-09-19 14:05:57	tomsmeding	hololeap: you could write a Num instance for my type too :p
2021-09-19 14:06:18	tomsmeding	in my experience having a value-level witness of the phantom type is useful
2021-09-19 14:06:34	tomsmeding	but if you don't need it, then yes that's a more light-weight alternative :p
2021-09-19 14:06:45	Cajun	wouldnt a Num instance give you a whole bunch of functions that you dont really want/need? :P
2021-09-19 14:07:03	Cajun	its nice for the (+) and (*) but the other ones are weird for many types 
2021-09-19 14:07:22	ixlun	There's defiantly some stuff to digest there, I'll take a look.  I've also been looking at the `money` package too which looks pretty nice so I'll see what I can do.  Thanks all!
2021-09-19 14:07:23	tomsmeding	I suspect that if you go with the witness-less approach, you'd end up sprinkling 'class KnownCurrency a where knownCurrency :: CurrencyType a' everywhere
2021-09-19 14:07:50	tomsmeding	ixlun: hope I didn't scare you away :p
2021-09-19 14:08:21	hololeap	@where singletons
2021-09-19 14:08:22	lambdabot	I know nothing about singletons.
2021-09-19 14:08:32	mc47	I play around with a wtiness-less approach and it gets very cumbersome very fast, which was really intimidating while just learning about these type trickeries
2021-09-19 14:08:41	mc47	s/play/played/
2021-09-19 14:08:55	tomsmeding	yeah you can define my CurrencyType GADT from your plain ADT using singletons, but I find a direct GADT clearer -- if only for the lack of TH :p
2021-09-19 14:09:29	hololeap	tomsmeding: I agree, I was just thinking of plugging that intro to singletons blog because it's a helpful tutorial
2021-09-19 14:09:32	←	lavaman has quit (Ping timeout: 265 seconds)
2021-09-19 14:09:40	tomsmeding	mc47: if you core happens to not need the witnesses anywhere, the code can get very clean and neat
2021-09-19 14:09:47	tomsmeding	until the moment you want a witness :p
2021-09-19 14:10:05	hololeap	https://blog.jle.im/entry/introduction-to-singletons-1.html
2021-09-19 14:10:09	←	acidjnk has quit (Ping timeout: 240 seconds)
2021-09-19 14:10:17	tomsmeding	(never read that, actually never worked with the actual singletons library before tbh)
2021-09-19 14:10:46	hololeap	it basically builds up a strong motivation for the libarary, but shows you how to do it all by hand as well
2021-09-19 14:11:26	mc47	tomsmeding that's probably true, I really just skimmed the surface
2021-09-19 14:16:54	←	bontaq has quit (Ping timeout: 252 seconds)
2021-09-19 14:22:36	→	_ht has joined #haskell
2021-09-19 14:30:06	←	deuslambda[m] has quit (Quit: You have been kicked for being idle)
2021-09-19 14:30:06	←	Cesionaut[m] has quit (Quit: You have been kicked for being idle)
2021-09-19 14:31:42	←	syntactic_sugar has quit (Quit: WeeChat 3.1)
2021-09-19 14:34:33	←	machinedgod has quit (Ping timeout: 260 seconds)
2021-09-19 14:35:01	←	burnsidesLlama has quit (Remote host closed the connection)
2021-09-19 14:44:40	←	slowButPresent has quit (Quit: leaving)
2021-09-19 14:44:49	tomsmeding	s/you core/your code/ how did that typo even happen
2021-09-19 14:46:33	→	TranquilEcho has joined #haskell
2021-09-19 14:48:22	←	ubert has quit (Ping timeout: 252 seconds)
2021-09-19 14:52:03	→	azeem has joined #haskell
2021-09-19 14:53:44	→	merijn has joined #haskell
2021-09-19 14:54:00	→	lavaman has joined #haskell
2021-09-19 14:58:16	←	lavaman has quit (Ping timeout: 252 seconds)
2021-09-19 15:00:41	←	hnOsmium0001 has quit (Quit: Connection closed for inactivity)
2021-09-19 15:02:05	→	Null_A has joined #haskell
2021-09-19 15:11:36	→	burnsidesLlama has joined #haskell
2021-09-19 15:11:51	←	Null_A has quit (Remote host closed the connection)
2021-09-19 15:12:41	→	[itchyjunk] has joined #haskell
2021-09-19 15:13:23	←	geekosaur has quit (Remote host closed the connection)
2021-09-19 15:14:18	→	geekosaur has joined #haskell
2021-09-19 15:16:05	←	cheater has quit (Ping timeout: 260 seconds)
2021-09-19 15:17:20	→	Null_A has joined #haskell
2021-09-19 15:18:04	←	burnsidesLlama has quit (Ping timeout: 252 seconds)
2021-09-19 15:18:25	←	Null_A has quit (Client Quit)
2021-09-19 15:24:56	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-19 15:30:27	→	merijn has joined #haskell
2021-09-19 15:40:01	→	waleee has joined #haskell
2021-09-19 15:40:51	→	pfurla has joined #haskell
2021-09-19 15:41:49	→	hexfive has joined #haskell
2021-09-19 15:43:37	←	pfurla_ has quit (Ping timeout: 260 seconds)
2021-09-19 15:43:42	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-19 15:44:01	→	Vajb has joined #haskell
2021-09-19 15:44:33	←	hexfive has quit (Client Quit)
2021-09-19 15:44:34	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-19 15:45:09	→	Vajb has joined #haskell
2021-09-19 15:49:49	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-19 15:50:33	←	benin036932301 has quit (Ping timeout: 265 seconds)
2021-09-19 15:50:43	→	Vajb has joined #haskell
2021-09-19 15:50:49	→	burnsidesLlama has joined #haskell
2021-09-19 15:50:55	→	benin036932301 has joined #haskell
2021-09-19 15:53:14	→	yauhsien has joined #haskell
2021-09-19 15:55:58	←	kimjetwav has quit (Quit: logout)
2021-09-19 15:56:25	→	kimjetwav has joined #haskell
2021-09-19 15:57:18	→	spruit11 has joined #haskell
2021-09-19 15:57:49	←	yauhsien has quit (Ping timeout: 268 seconds)
2021-09-19 16:01:07	←	spruit11_ has quit (Ping timeout: 268 seconds)
2021-09-19 16:10:01	ℹ	irc: disconnected from server
2021-09-19 16:10:20	→	oxide has joined #haskell
2021-09-19 16:10:20	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-19 16:10:20	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-19 16:10:20	ℹ	Channel #haskell: 715 nicks (1 op, 0 voices, 714 normals)
2021-09-19 16:10:21	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-19 16:14:04	←	Brumaire has quit (Ping timeout: 268 seconds)
2021-09-19 16:18:59	←	max22- has quit (Ping timeout: 260 seconds)
2021-09-19 16:19:04	→	Brumaire has joined #haskell
2021-09-19 16:20:01	→	jumper149 has joined #haskell
2021-09-19 16:21:38	→	gehmehgeh has joined #haskell
2021-09-19 16:21:40	→	max22- has joined #haskell
2021-09-19 16:30:18	←	kimjetwav has quit (Remote host closed the connection)
2021-09-19 16:30:44	→	alx741 has joined #haskell
2021-09-19 16:35:09	←	hpc has quit (Ping timeout: 240 seconds)
2021-09-19 16:37:00	→	hpc has joined #haskell
2021-09-19 16:39:24	→	eggplantade has joined #haskell
2021-09-19 16:43:39	←	eggplantade has quit (Ping timeout: 240 seconds)
2021-09-19 16:45:24	←	sm2n_ has quit (Ping timeout: 252 seconds)
2021-09-19 16:45:48	→	sm2n has joined #haskell
2021-09-19 16:56:19	←	max22- has quit (Ping timeout: 260 seconds)
2021-09-19 16:57:15	→	x28girl has joined #haskell
2021-09-19 16:58:21	→	Sose has joined #haskell
2021-09-19 17:00:48	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-19 17:04:12	Sose	I haven't used Haskell or GHC in a while and I'm a bit confused what version I should use. If I type `ghcup list` (https://gist.github.com/Sose/434044f83f51a091939277dc39c7a20d), I see that 8.10.7 doesn't have the "hls powered" note, but here (https://discourse.haskell.org/t/haskell-language-server-1-4-0-release/3237) it says that for example
2021-09-19 17:04:12	Sose	8.10.4 is not supported by the newest hls anymore
2021-09-19 17:04:47	maerwald	Sose: 8.10.7 is supported by HLS 1.4.0
2021-09-19 17:04:53	maerwald	you probably have 1.3.0 installed
2021-09-19 17:05:15	Sose	oh okay, so I should just go for ghc 8.10.7 and hls 1.4.0
2021-09-19 17:05:34	Sose	wanted to make sure because on my potato it takes forever to update
2021-09-19 17:06:51	←	Brumaire has quit (Ping timeout: 252 seconds)
2021-09-19 17:07:12	maerwald	"hls-powered" is only wrt the currently installed and *set* version
2021-09-19 17:07:15	←	haykam2 has quit (Remote host closed the connection)
2021-09-19 17:07:24	Sose	I see, that makes sense. Thanks 
2021-09-19 17:07:28	→	haykam1 has joined #haskell
2021-09-19 17:11:35	→	jtomas_ has joined #haskell
2021-09-19 17:14:39	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-19 17:15:20	→	Vajb has joined #haskell
2021-09-19 17:16:21	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-19 17:17:04	→	Vajb has joined #haskell
2021-09-19 17:18:22	←	burnsidesLlama has quit (Remote host closed the connection)
2021-09-19 17:19:42	←	jtomas_ has quit (Remote host closed the connection)
2021-09-19 17:20:05	→	jtomas_ has joined #haskell
2021-09-19 17:23:55	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-19 17:24:59	→	Vajb has joined #haskell
2021-09-19 17:30:12	→	pretty_dumm_guy has joined #haskell
2021-09-19 17:31:25	→	lavaman has joined #haskell
2021-09-19 17:36:53	←	lavaman has quit (Ping timeout: 265 seconds)
2021-09-19 17:37:55	sshine	I learned something.
2021-09-19 17:44:08	←	neo1 has quit (Ping timeout: 265 seconds)
2021-09-19 17:48:47	←	x28girl has quit (Quit: Leaving)
2021-09-19 17:49:48	→	x28girl has joined #haskell
2021-09-19 17:49:54	→	burnsidesLlama has joined #haskell
2021-09-19 17:51:03	←	x28girl has quit (Changing host)
2021-09-19 17:51:03	→	x28girl has joined #haskell
2021-09-19 17:51:36	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-19 17:51:57	→	Vajb has joined #haskell
2021-09-19 17:53:44	→	x28_girl has joined #haskell
2021-09-19 17:54:09	←	burnsidesLlama has quit (Ping timeout: 240 seconds)
2021-09-19 17:54:50	→	yauhsien has joined #haskell
2021-09-19 17:55:23	←	geekosaur has quit (Remote host closed the connection)
2021-09-19 17:56:16	←	Vajb has quit (Ping timeout: 245 seconds)
2021-09-19 17:57:10	→	Vajb has joined #haskell
2021-09-19 17:57:13	→	geekosaur has joined #haskell
2021-09-19 17:59:09	←	yauhsien has quit (Ping timeout: 240 seconds)
2021-09-19 18:04:58	→	Lycurgus has joined #haskell
2021-09-19 18:06:36	→	cheater has joined #haskell
2021-09-19 18:19:35	→	max22- has joined #haskell
2021-09-19 18:23:02	→	burnsidesLlama has joined #haskell
2021-09-19 18:23:44	→	mikoto-chan has joined #haskell
2021-09-19 18:26:35	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-19 18:26:50	←	mikoto-chan has quit (Read error: Connection reset by peer)
2021-09-19 18:27:18	→	mikoto-chan has joined #haskell
2021-09-19 18:27:39	←	burnsidesLlama has quit (Ping timeout: 252 seconds)
2021-09-19 18:30:26	←	spruit11 has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-09-19 18:33:40	→	tromp has joined #haskell
2021-09-19 18:35:32	→	raehik has joined #haskell
2021-09-19 18:40:52	→	eggplantade has joined #haskell
2021-09-19 18:41:45	←	jumper149 has quit (Quit: WeeChat 3.2)
2021-09-19 18:45:23	→	Brumaire has joined #haskell
2021-09-19 18:45:37	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-19 18:46:17	→	amahl has joined #haskell
2021-09-19 18:49:34	→	yinghua has joined #haskell
2021-09-19 18:50:47	←	mikoto-chan has quit (Read error: Connection reset by peer)
2021-09-19 18:51:14	←	max22- has quit (Ping timeout: 260 seconds)
2021-09-19 18:51:27	←	_xor has quit (Quit: WeeChat 3.2)
2021-09-19 18:55:35	→	yauhsien has joined #haskell
2021-09-19 18:56:27	→	_xor has joined #haskell
2021-09-19 18:56:35	→	mikoto-chan has joined #haskell
2021-09-19 18:57:38	→	merijn has joined #haskell
2021-09-19 19:00:30	←	yauhsien has quit (Ping timeout: 265 seconds)
2021-09-19 19:01:27	→	fendor has joined #haskell
2021-09-19 19:03:37	→	max22- has joined #haskell
2021-09-19 19:15:43	→	jumper149 has joined #haskell
2021-09-19 19:17:00	←	hendursa1 has quit (Quit: hendursa1)
2021-09-19 19:17:26	→	hendursaga has joined #haskell
2021-09-19 19:17:31	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-19 19:18:00	→	Vajb has joined #haskell
2021-09-19 19:19:04	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-19 19:19:34	→	Vajb has joined #haskell
2021-09-19 19:20:41	→	MQ-17J has joined #haskell
2021-09-19 19:24:10	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-19 19:24:37	→	Vajb has joined #haskell
2021-09-19 19:26:17	→	machinedgod has joined #haskell
2021-09-19 19:27:55	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-19 19:28:11	→	Vajb has joined #haskell
2021-09-19 19:29:20	←	slac76507 has quit (Ping timeout: 268 seconds)
2021-09-19 19:30:30	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-19 19:33:17	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-19 19:33:53	←	geekosaur has quit (Remote host closed the connection)
2021-09-19 19:35:02	→	geekosaur has joined #haskell
2021-09-19 19:35:54	←	alx741 has quit (Ping timeout: 252 seconds)
2021-09-19 19:38:49	←	cheater has quit (Ping timeout: 260 seconds)
2021-09-19 19:38:52	→	cheater1__ has joined #haskell
2021-09-19 19:38:55	ℹ	cheater1__ is now known as cheater
2021-09-19 19:47:08	←	cawfee has quit (Quit: macos update)
2021-09-19 19:48:47	→	deejaytee has joined #haskell
2021-09-19 19:50:13	→	alx741 has joined #haskell
2021-09-19 19:56:34	←	chomwitt has quit (Ping timeout: 260 seconds)
2021-09-19 19:58:51	←	sheddow has quit (Ping timeout: 256 seconds)
2021-09-19 20:00:03	→	tromp has joined #haskell
2021-09-19 20:00:59	←	x28_girl has quit (Quit: Leaving)
2021-09-19 20:10:37	→	shapr has joined #haskell
2021-09-19 20:18:12	→	Guest|51 has joined #haskell
2021-09-19 20:22:49	→	cawfee has joined #haskell
2021-09-19 20:23:17	→	Brumaire_ has joined #haskell
2021-09-19 20:24:13	←	Brumaire has quit (Ping timeout: 268 seconds)
2021-09-19 20:24:34	←	justsomeguy has quit (Ping timeout: 260 seconds)
2021-09-19 20:25:16	→	wroathe has joined #haskell
2021-09-19 20:25:16	←	wroathe has quit (Changing host)
2021-09-19 20:25:16	→	wroathe has joined #haskell
2021-09-19 20:25:51	←	rond_ has quit (Quit: Client closed)
2021-09-19 20:28:13	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-19 20:28:32	→	Heffalump has joined #haskell
2021-09-19 20:28:42	←	Guest|51 has quit (Quit: Connection closed)
2021-09-19 20:29:19	→	lavaman has joined #haskell
2021-09-19 20:29:29	→	Vajb has joined #haskell
2021-09-19 20:31:38	Heffalump	Is there a current state of the art when it comes to dynamically loading Haskell? I've looked around a bit, there's plugins (quite old but appears to still build with recent GHCs), ghc-hotswap (doesn't support GHC > 8.4 out of the box) and hint (perhaps the most plausible but appears to have some significant gotchas?)
2021-09-19 20:33:17	→	chris has joined #haskell
2021-09-19 20:33:21	ℹ	chris is now known as Guest6996
2021-09-19 20:33:35	→	zer0bitz has joined #haskell
2021-09-19 20:34:18	←	lavaman has quit (Ping timeout: 268 seconds)
2021-09-19 20:34:19	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-19 20:35:21	→	Vajb has joined #haskell
2021-09-19 20:35:44	→	sheddow has joined #haskell
2021-09-19 20:36:11	←	pavonia has quit (Quit: Bye!)
2021-09-19 20:42:38	→	eggplantade has joined #haskell
2021-09-19 20:46:52	→	haask has joined #haskell
2021-09-19 20:47:19	←	haask has quit (Remote host closed the connection)
2021-09-19 20:47:39	←	eggplantade has quit (Ping timeout: 268 seconds)
2021-09-19 20:47:53	geekosaur	I think all dynamic loading with Haskell has significant gotchas
2021-09-19 20:49:18	→	merijn has joined #haskell
2021-09-19 20:53:38	→	haask has joined #haskell
2021-09-19 20:53:56	→	eggplantade has joined #haskell
2021-09-19 20:55:09	←	haritz has quit (Ping timeout: 240 seconds)
2021-09-19 20:56:39	←	Raito_Bezarius has quit (Ping timeout: 260 seconds)
2021-09-19 20:57:20	→	yauhsien has joined #haskell
2021-09-19 21:01:42	←	yauhsien has quit (Ping timeout: 252 seconds)
2021-09-19 21:02:22	←	mc47 has quit (Remote host closed the connection)
2021-09-19 21:07:58	←	wei2912 has quit (Quit: Lost terminal)
2021-09-19 21:08:53	→	Raito_Bezarius has joined #haskell
2021-09-19 21:09:27	←	eggplantade has quit (Remote host closed the connection)
2021-09-19 21:16:29	←	deejaytee has quit (Ping timeout: 260 seconds)
2021-09-19 21:18:40	→	zebrag has joined #haskell
2021-09-19 21:23:29	←	merijn has quit (Ping timeout: 260 seconds)
2021-09-19 21:24:41	→	deejaytee has joined #haskell
2021-09-19 21:24:52	←	xff0x has quit (Ping timeout: 268 seconds)
2021-09-19 21:26:43	←	cheater has quit (Ping timeout: 268 seconds)
2021-09-19 21:32:39	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-19 21:38:13	←	haask has quit (Remote host closed the connection)
2021-09-19 21:40:04	←	fresheyeball has quit (Ping timeout: 268 seconds)
2021-09-19 21:40:36	→	brettgilio has joined #haskell
2021-09-19 21:42:59	→	fresheyeball has joined #haskell
2021-09-19 21:43:30	→	__monty__ has joined #haskell
2021-09-19 21:46:38	→	xff0x has joined #haskell
2021-09-19 21:47:21	←	machinedgod has quit (Ping timeout: 252 seconds)
2021-09-19 21:50:22	←	jakalx has left #haskell
2021-09-19 21:51:40	→	Null_A has joined #haskell
2021-09-19 21:52:47	←	[itchyjunk] has quit (Read error: Connection reset by peer)
2021-09-19 21:53:41	←	fresheyeball has quit (Quit: WeeChat 2.9)
2021-09-19 21:53:53	←	reyaboj has quit (Ping timeout: 256 seconds)
2021-09-19 21:54:30	→	Guest70 has joined #haskell
2021-09-19 21:56:14	←	deejaytee has quit (Remote host closed the connection)
2021-09-19 21:56:37	→	deejaytee has joined #haskell
2021-09-19 21:56:41	→	eggplantade has joined #haskell
2021-09-19 21:57:07	→	slowButPresent has joined #haskell
2021-09-19 21:57:45	→	hnOsmium0001 has joined #haskell
2021-09-19 21:58:45	←	jespada has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-09-19 21:59:38	→	jakalx has joined #haskell
2021-09-19 22:10:46	←	Guest6996 has quit (Remote host closed the connection)
2021-09-19 22:13:01	→	econo has joined #haskell
2021-09-19 22:18:34	→	alzgh has joined #haskell
2021-09-19 22:19:12	←	psilospore has quit (Quit: Connection closed for inactivity)
2021-09-19 22:19:18	alzgh	hello, which channel is more suited if one has question about making PRs to the GHC repo?
2021-09-19 22:19:58	monochrom	Perhaps #ghc
2021-09-19 22:20:18	alzgh	OK, thanks monochrom
2021-09-19 22:22:17	→	jonatan_ has joined #haskell
2021-09-19 22:22:17	←	jonatan_ has quit (Client Quit)
2021-09-19 22:31:01	←	deejaytee has quit (Ping timeout: 260 seconds)
2021-09-19 22:35:42	sm	Heffalump: clckwrks uses https://hackage.haskell.org/package/web-plugins
2021-09-19 22:35:47	→	tzh has joined #haskell
2021-09-19 22:39:09	←	qbt has quit (Ping timeout: 252 seconds)
2021-09-19 22:40:30	←	OscarZ has quit (Quit: Leaving)
2021-09-19 22:42:06	→	kimjetwav has joined #haskell
2021-09-19 22:46:29	→	tromp has joined #haskell
2021-09-19 22:51:23	→	Lewky has joined #haskell
2021-09-19 22:59:37	←	sneedsfeed has quit (Ping timeout: 256 seconds)
2021-09-19 23:02:31	→	qbt has joined #haskell
2021-09-19 23:07:11	←	Guest70 has quit (Quit: Client closed)
2021-09-19 23:09:47	→	jespada has joined #haskell
2021-09-19 23:13:31	→	Izem has joined #haskell
2021-09-19 23:14:06	Izem	In haskell, you don't need the notion of a pipe because you can curry functions right?
2021-09-19 23:14:35	Rembane	Izem: assume that that is true, why is it true? 
2021-09-19 23:17:16	Izem	I dunno, sorry
2021-09-19 23:17:39	Rembane	Okay, what's a pipe in this context? 
2021-09-19 23:17:57	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-19 23:19:59	→	euandreh_ has joined #haskell
2021-09-19 23:20:19	Izem	similar to a unix pipe, so you can compose functions like so [1 2 3 4 5] | odd | sum would result in 1 + 3 + 5 = 9
2021-09-19 23:20:20	→	merijn has joined #haskell
2021-09-19 23:21:53	←	euandreh has quit (Ping timeout: 260 seconds)
2021-09-19 23:24:41	Sose	I think in Haskell people tend to use function composition more rather than piping. So they'd write something like `(sum . filter odd) [1,2,3,4,5]` instead of `[1,2,3,4,5] & filter odd & sum` 
2021-09-19 23:25:36	Sose	but there is a pipe operator like that (&) in Data.Function 
2021-09-19 23:26:07	Izem	oh ok, that's cool
2021-09-19 23:26:46	Izem	I suspected that was the case but I wasn't sure
2021-09-19 23:26:58	→	justsomeguy has joined #haskell
2021-09-19 23:27:20	←	justsomeguy has quit (Client Quit)
2021-09-19 23:28:36	awpr	note it's not specific to lists or sequences, though: it's just applying each function in order.  the streaming behavior comes from the list type along with the particular functions being used 
2021-09-19 23:28:54	awpr	> 5 & subtract 2 & show
2021-09-19 23:28:55	lambdabot	 "3"
2021-09-19 23:30:30	→	lavaman has joined #haskell
2021-09-19 23:32:21	Sose	to be honest the idea of piping and going in order from left-to-right or top-to-bottom feels a bit more natural to me. I also write Clojure sometimes and there the threading macros (->, ->>) are used a lot
2021-09-19 23:33:59	awpr	Haskell needs backwards lambda syntax to go with the reverse bind operator: `Just (x + 1) <- x/ =<< Nothing`
2021-09-19 23:35:19	←	lavaman has quit (Ping timeout: 260 seconds)
2021-09-19 23:35:39	hpc	just start your file with the unicode RTL override character
2021-09-19 23:35:48	←	neurocyte01 has quit (Ping timeout: 252 seconds)
2021-09-19 23:36:06	awpr	... now I'm curious to see what that would do
2021-09-19 23:36:52	awpr	lol, it corrupts the page describing it https://unicode-table.com/en/202E/
2021-09-19 23:39:10	Sose	that's funny :D
2021-09-19 23:39:16	awpr	https://paste.tomsmeding.com/Rif2xq25
2021-09-19 23:39:56	→	tromp has joined #haskell
2021-09-19 23:41:40	←	Null_A has quit (Remote host closed the connection)
2021-09-19 23:42:13	→	Null_A has joined #haskell
2021-09-19 23:43:00	awpr	https://paste.tomsmeding.com/wpEt1pg6 even better
2021-09-19 23:48:27	→	lavaman has joined #haskell
2021-09-19 23:51:04	→	cheater has joined #haskell
2021-09-19 23:52:44	Cajun	piping gets great when you start using conduits for data processing, which is constant space and quite fast (it also fuses very well iirc)
2021-09-19 23:54:11	←	max22- has quit (Ping timeout: 245 seconds)
2021-09-19 23:54:30	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-19 23:55:59	→	Guest1 has joined #haskell
2021-09-19 23:59:17	→	Everything has joined #haskell
2021-09-20 00:01:57	←	solomon has quit (Ping timeout: 256 seconds)
2021-09-20 00:02:50	←	kimjetwav has quit (Remote host closed the connection)
2021-09-20 00:03:07	→	kimjetwav has joined #haskell
2021-09-20 00:03:17	←	Null_A has quit (Remote host closed the connection)
2021-09-20 00:05:36	←	kimjetwav has quit (Remote host closed the connection)
2021-09-20 00:05:53	→	kimjetwav has joined #haskell
2021-09-20 00:10:35	←	eggplantade has quit (Remote host closed the connection)
2021-09-20 00:10:40	←	Sose has quit (Quit: Client closed)
2021-09-20 00:11:25	→	deejaytee has joined #haskell
2021-09-20 00:12:23	→	bitmapper has joined #haskell
2021-09-20 00:14:22	←	Brumaire_ has quit (Quit: ran away)
2021-09-20 00:20:52	←	kimjetwav has quit (Remote host closed the connection)
2021-09-20 00:21:09	→	kimjetwav has joined #haskell
2021-09-20 00:23:30	←	adamse has left #haskell
2021-09-20 00:25:37	←	Guest1 has quit (Quit: Client closed)
2021-09-20 00:25:57	←	x28girl has quit (Ping timeout: 268 seconds)
2021-09-20 00:27:13	←	jumper149 has quit (Ping timeout: 260 seconds)
2021-09-20 00:28:33	→	max22- has joined #haskell
2021-09-20 00:30:17	→	jumper149 has joined #haskell
2021-09-20 00:30:39	←	__monty__ has quit (Ping timeout: 252 seconds)
2021-09-20 00:33:10	→	tommd has joined #haskell
2021-09-20 00:33:38	→	tfeb has joined #haskell
2021-09-20 00:34:13	→	__monty__ has joined #haskell
2021-09-20 00:35:52	→	eggplantade has joined #haskell
2021-09-20 00:36:02	→	x28girl has joined #haskell
2021-09-20 00:38:29	←	mikoto-chan has quit (Read error: Connection reset by peer)
2021-09-20 00:38:34	→	mikoto-c1 has joined #haskell
2021-09-20 00:39:44	maerwald	how do you parse the version of a cabal file?
2021-09-20 00:39:45	→	kuribas has joined #haskell
2021-09-20 00:41:32	sclv	maerwald: here's a script that as of a few years ago worked fine, as a simple example
2021-09-20 00:41:32	sclv	https://github.com/haskell/cabal/issues/2460#issuecomment-373895722
2021-09-20 00:41:52	sclv	anyway the main point is parsePackageDescrition is the entry point iirc
2021-09-20 00:41:55	maerwald	excellent
2021-09-20 00:46:16	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-20 00:46:26	→	Vajb has joined #haskell
2021-09-20 00:48:58	←	lavaman has quit (Ping timeout: 252 seconds)
2021-09-20 00:49:08	←	mikoto-c1 has quit (Quit: mikoto-c1)
2021-09-20 00:49:20	→	mikoto-chan has joined #haskell
2021-09-20 00:50:36	←	Lycurgus has quit (Quit: Exeunt)
2021-09-20 00:52:53	→	dschrempf has joined #haskell
2021-09-20 00:53:10	←	dschrempf has quit (Client Quit)
2021-09-20 00:57:52	←	dsrt^ has quit (Remote host closed the connection)
2021-09-20 01:01:03	←	fendor has quit (Remote host closed the connection)
2021-09-20 01:01:53	←	tfeb has quit (Remote host closed the connection)
2021-09-20 01:02:20	←	_ht has quit (Remote host closed the connection)
2021-09-20 01:03:41	←	Everything has quit (Quit: leaving)
2021-09-20 01:06:34	→	gioyik has joined #haskell
2021-09-20 01:08:13	→	Pickchea has joined #haskell
2021-09-20 01:11:29	→	solomon has joined #haskell
2021-09-20 01:11:54	←	raehik has quit (Ping timeout: 252 seconds)
2021-09-20 01:12:34	←	deejaytee has quit (Remote host closed the connection)
2021-09-20 01:12:57	→	deejaytee has joined #haskell
2021-09-20 01:18:34	←	deejaytee has quit (Ping timeout: 260 seconds)
2021-09-20 01:19:55	→	jstolarek has joined #haskell
2021-09-20 01:21:47	→	deejaytee has joined #haskell
2021-09-20 01:21:58	←	_xor has quit (Quit: brb)
2021-09-20 01:22:57	→	[itchyjunk] has joined #haskell
2021-09-20 01:26:50	→	Guest29 has joined #haskell
2021-09-20 01:26:57	←	deejaytee has quit (Ping timeout: 260 seconds)
2021-09-20 01:30:39	←	mikoto-chan has quit (Ping timeout: 252 seconds)
2021-09-20 01:32:37	→	mikoto-chan has joined #haskell
2021-09-20 01:32:59	←	FinnElija has quit (Quit: FinnElija)
2021-09-20 01:35:15	←	mikoto-chan has quit (Client Quit)
2021-09-20 01:37:55	→	burnsidesLlama has joined #haskell
2021-09-20 01:39:07	→	FinnElija has joined #haskell
2021-09-20 01:39:58	→	mikoto-chan has joined #haskell
2021-09-20 01:40:33	←	Izem has quit (Ping timeout: 252 seconds)
2021-09-20 01:42:15	←	Topsi has quit (Read error: Connection reset by peer)
2021-09-20 01:42:18	←	burnsidesLlama has quit (Ping timeout: 252 seconds)
2021-09-20 01:42:51	→	deejaytee has joined #haskell
2021-09-20 01:43:00	←	mikoto-chan has quit (Client Quit)
2021-09-20 01:43:41	→	Izem has joined #haskell
2021-09-20 01:43:56	←	Guest29 has quit (Ping timeout: 256 seconds)
2021-09-20 01:47:10	→	chomwitt has joined #haskell
2021-09-20 01:47:32	→	machinedgod has joined #haskell
2021-09-20 01:50:29	ℹ	irc: disconnected from server
2021-09-20 11:41:12	→	oxide has joined #haskell
2021-09-20 11:41:12	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-20 11:41:12	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-20 11:41:12	ℹ	Channel #haskell: 704 nicks (1 op, 0 voices, 703 normals)
2021-09-20 11:41:12	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-20 11:43:58	←	wroathe has quit (Ping timeout: 246 seconds)
2021-09-20 11:45:58	←	caef^ has quit (Remote host closed the connection)
2021-09-20 11:48:51	←	Sgeo has quit (Read error: Connection reset by peer)
2021-09-20 11:49:24	←	geekosaur has quit (Remote host closed the connection)
2021-09-20 11:49:45	→	geekosaur has joined #haskell
2021-09-20 11:50:38	→	Gurkenglas has joined #haskell
2021-09-20 11:53:18	→	merijn has joined #haskell
2021-09-20 11:54:20	Guest372	I dont know
2021-09-20 11:58:58	←	michalz has quit (Remote host closed the connection)
2021-09-20 12:00:59	→	yauhsien has joined #haskell
2021-09-20 12:01:25	→	michalz has joined #haskell
2021-09-20 12:05:29	←	gawen has quit (Quit: cya)
2021-09-20 12:05:49	→	gawen has joined #haskell
2021-09-20 12:06:31	→	pfurla has joined #haskell
2021-09-20 12:07:39	→	cfricke has joined #haskell
2021-09-20 12:09:34	←	pfurla_ has quit (Ping timeout: 260 seconds)
2021-09-20 12:16:07	ℹ	irc: disconnected from server
2021-09-20 12:16:26	→	oxide has joined #haskell
2021-09-20 12:16:26	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-20 12:16:26	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-20 12:16:27	ℹ	Channel #haskell: 704 nicks (1 op, 0 voices, 703 normals)
2021-09-20 12:16:27	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-20 12:16:44	→	max22- has joined #haskell
2021-09-20 12:17:50	←	michalz has quit (Remote host closed the connection)
2021-09-20 12:17:56	→	lortabac has joined #haskell
2021-09-20 12:19:01	→	michalz has joined #haskell
2021-09-20 12:19:34	→	chele has joined #haskell
2021-09-20 12:20:02	→	Brumaire has joined #haskell
2021-09-20 12:26:02	→	jtomas_ has joined #haskell
2021-09-20 12:27:23	←	merijn has quit (Ping timeout: 246 seconds)
2021-09-20 12:31:08	→	tromp has joined #haskell
2021-09-20 12:37:51	←	tzh has quit (Quit: zzz)
2021-09-20 12:42:42	→	dhouthoo has joined #haskell
2021-09-20 12:42:43	→	jstolarek has joined #haskell
2021-09-20 12:47:23	←	ziman has quit (Changing host)
2021-09-20 12:47:23	→	ziman has joined #haskell
2021-09-20 12:52:04	←	Brumaire has quit (Ping timeout: 252 seconds)
2021-09-20 12:53:11	→	chris has joined #haskell
2021-09-20 12:53:15	ℹ	chris is now known as Guest1692
2021-09-20 12:54:50	→	vysn has joined #haskell
2021-09-20 12:58:07	hololeap	Guest372: f :: Maybe a -> Identity a ; f (Just x) = Identity x ; f Nothing = Identity ? -- there is way to do it for one of the cases
2021-09-20 12:59:04	hololeap	so if you think about natural transformations as something akin to functions, this one would be partial -- one of the inputs would create an undefined output
2021-09-20 12:59:18	→	Brumaire has joined #haskell
2021-09-20 12:59:40	←	nfd has quit (Ping timeout: 240 seconds)
2021-09-20 12:59:46	←	natechan has quit (Ping timeout: 252 seconds)
2021-09-20 13:01:53	→	ubert has joined #haskell
2021-09-20 13:02:20	←	NinjaTrappeur has quit (Quit: WeeChat 3.1)
2021-09-20 13:02:35	→	NinjaTrappeur has joined #haskell
2021-09-20 13:03:04	←	CnnibisIndica has quit (Ping timeout: 252 seconds)
2021-09-20 13:03:39	←	ulvarrefr has quit (Remote host closed the connection)
2021-09-20 13:03:45	→	natechan has joined #haskell
2021-09-20 13:04:52	→	vaucouleur has joined #haskell
2021-09-20 13:05:04	ℹ	skn2 is now known as skn
2021-09-20 13:06:55	hololeap	however, since Maybe has two branches and Identity has one, you could supply a default value for when you are given a Nothing: a -> Maybe a -> Identity a
2021-09-20 13:07:41	→	dschrempf has joined #haskell
2021-09-20 13:07:48	hololeap	that's essentially the `maybe` function, which is specific to how Maybe is structured. there is no general way to do this
2021-09-20 13:10:53	hololeap	except to use haskell as a general purpose language, but that's nothing new
2021-09-20 13:14:15	→	raehik has joined #haskell
2021-09-20 13:16:24	→	neurocyte013 has joined #haskell
2021-09-20 13:16:24	←	neurocyte013 has quit (Changing host)
2021-09-20 13:16:24	→	neurocyte013 has joined #haskell
2021-09-20 13:16:35	→	nfd has joined #haskell
2021-09-20 13:16:48	→	rond_ has joined #haskell
2021-09-20 13:17:35	→	ulvarrefr has joined #haskell
2021-09-20 13:20:08	→	mc47 has joined #haskell
2021-09-20 13:23:39	←	dschrempf has quit (Quit: WeeChat 3.2.1)
2021-09-20 13:23:40	→	mousey has joined #haskell
2021-09-20 13:27:00	→	meinside has joined #haskell
2021-09-20 13:34:13	→	merijn has joined #haskell
2021-09-20 13:34:56	→	on^ has joined #haskell
2021-09-20 13:35:18	←	mousey has quit (Ping timeout: 276 seconds)
2021-09-20 13:35:51	→	hendursa1 has joined #haskell
2021-09-20 13:39:12	←	hendursaga has quit (Ping timeout: 276 seconds)
2021-09-20 13:45:19	←	neurocyte013 has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-20 13:47:44	←	geekosaur has quit (Killed (NickServ (GHOST command used by allbery_b)))
2021-09-20 13:47:45	→	allbery_b has joined #haskell
2021-09-20 13:47:48	ℹ	allbery_b is now known as geekosaur
2021-09-20 13:48:28	→	neurocyte013 has joined #haskell
2021-09-20 13:48:28	←	neurocyte013 has quit (Changing host)
2021-09-20 13:48:28	→	neurocyte013 has joined #haskell
2021-09-20 13:50:59	←	eggplantade has quit (Remote host closed the connection)
2021-09-20 13:51:57	→	sheddow has joined #haskell
2021-09-20 13:53:01	←	jpds has quit (Remote host closed the connection)
2021-09-20 13:53:28	→	jpds has joined #haskell
2021-09-20 13:55:27	→	tremon has joined #haskell
2021-09-20 13:56:43	←	vysn has quit (Remote host closed the connection)
2021-09-20 13:57:26	←	hnOsmium0001 has quit (Quit: Connection closed for inactivity)
2021-09-20 14:00:51	→	Pickchea has joined #haskell
2021-09-20 14:08:56	←	neurocyte013 has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-20 14:08:59	→	amahl has joined #haskell
2021-09-20 14:12:00	←	michalz has quit (Remote host closed the connection)
2021-09-20 14:13:22	→	michalz has joined #haskell
2021-09-20 14:19:05	→	dschrempf has joined #haskell
2021-09-20 14:24:23	←	azeem has quit (Read error: Connection reset by peer)
2021-09-20 14:24:39	→	azeem has joined #haskell
2021-09-20 14:27:10	→	Phantastes has joined #haskell
2021-09-20 14:31:37	←	Brumaire has quit (Ping timeout: 265 seconds)
2021-09-20 14:33:35	→	burnsidesLlama has joined #haskell
2021-09-20 14:36:02	←	Guest1692 has quit (Remote host closed the connection)
2021-09-20 14:41:23	→	reyaboj has joined #haskell
2021-09-20 14:42:45	→	fendor[m] has joined #haskell
2021-09-20 14:43:08	→	chris has joined #haskell
2021-09-20 14:43:12	ℹ	chris is now known as Guest3607
2021-09-20 14:46:15	←	shriekingnoise has quit (Quit: Quit)
2021-09-20 14:48:07	←	Guest3607 has quit (Ping timeout: 252 seconds)
2021-09-20 14:51:29	→	eggplantade has joined #haskell
2021-09-20 14:56:28	←	eggplantade has quit (Ping timeout: 264 seconds)
2021-09-20 14:59:14	←	Phantastes has quit (Quit: Client closed)
2021-09-20 15:07:29	←	reyaboj has quit (Ping timeout: 256 seconds)
2021-09-20 15:09:06	←	jpds has quit (Remote host closed the connection)
2021-09-20 15:09:31	→	jpds has joined #haskell
2021-09-20 15:11:13	→	slurmz has joined #haskell
2021-09-20 15:17:15	→	mousey has joined #haskell
2021-09-20 15:20:13	←	x28girl has quit (Quit: Leaving)
2021-09-20 15:20:20	→	arjun has joined #haskell
2021-09-20 15:21:22	arjun	hi. how do i sequence a bunch of Char actions and get a Text value ? since String is [Char] but Text isn't, and i am sure interconverting them isn't the way to go here
2021-09-20 15:22:08	arjun	usecase:- i have a fn charP :: Char -> Parser Char, that parses that specific character
2021-09-20 15:22:09	dminuoso	What is a "Char action"?
2021-09-20 15:22:16	arjun	dminuoso: ^
2021-09-20 15:22:24	maerwald	fmap T.singleton
2021-09-20 15:22:35	dminuoso	arjun: depends a bit what the right way is.
2021-09-20 15:22:56	dminuoso	Is this just some odd instance where you need a Text, or are you generally processing some textual data and want most of that in Text?
2021-09-20 15:23:30	arjun	now i am looking to make a fn called textP that takes a text string and makes a parser for that string composed of little char parsers
2021-09-20 15:23:39	merijn	Which parser are you using?
2021-09-20 15:23:39	arjun	maerwald: ?
2021-09-20 15:23:51	arjun	merijn: writing my own, just base
2021-09-20 15:23:53	maerwald	arjun: Parsers usually have a functor instance
2021-09-20 15:24:28	←	MidAutumnMoon has quit (Quit: Ping timeout (120 seconds))
2021-09-20 15:24:34	merijn	arjun: Most parser have builtin primitives for grabbing entire chunks at a time, so you don't have to go through parsing N individual characters and turning those into Text later
2021-09-20 15:24:54	merijn	maerwald: His question (I think) was "how do I parse *multiple* characters into Text"
2021-09-20 15:25:01	merijn	Not just a single Char parser
2021-09-20 15:25:14	dminuoso	No this is more XY
2021-09-20 15:25:15	maerwald	`charP` looks like parsing a single Char
2021-09-20 15:25:15	arjun	maerwald: yus
2021-09-20 15:25:24	arjun	yus
2021-09-20 15:25:51	dminuoso	Between the lines Im reading: how can I build `string` for `string "foo"`
2021-09-20 15:25:57	maerwald	charP' c = T.singleton <$> charP c
2021-09-20 15:26:12	dminuoso	See: 11:53:30           arjun | now i am looking to make a fn called textP that takes a text string and makes a parser for that string composed of little char parsers
2021-09-20 15:26:26	maerwald	which givem you `charP' :: Char -> Parser Text`
2021-09-20 15:26:41	dminuoso	So I'd start a bit earlier: What is it that you're trying to solve, really.
2021-09-20 15:26:57	arjun	maerwald: you got it
2021-09-20 15:27:38	arjun	dminuoso: writing a parser from scratch, just base, for some metadata i need on my static site generator .
2021-09-20 15:28:16	arjun	and i am using Text as the type for textual data than using String
2021-09-20 15:28:44	dminuoso	If this has to be base, Id just use ReadP and stick to String.
2021-09-20 15:28:56	dminuoso	It's got a few gotchas, but oh well.
2021-09-20 15:29:21	maerwald	oh god no
2021-09-20 15:29:33	maerwald	ReadP/ReadS are abominations
2021-09-20 15:29:34	merijn	dminuoso: oof
2021-09-20 15:29:48	merijn	dminuoso: Don't tell people to self-harm, please >.>
2021-09-20 15:29:50	dminuoso	Yes they are, but honestly, I wouldn't self-impose "cant depend on megaparsec/attoparsec" in the first place.
2021-09-20 15:30:03	dminuoso	Self-rolling parser combinators likely causes same or more oofs.
2021-09-20 15:30:11	maerwald	it's a gread exercise
2021-09-20 15:30:19	maerwald	using ReadP isn't, it's just... anger
2021-09-20 15:30:25	merijn	At least self-rolling parser combinators is fairly straightforward *and* educational
2021-09-20 15:30:31	⚡	dminuoso shrugs
2021-09-20 15:30:35	merijn	ReadP just makes me want to head desk
2021-09-20 15:30:50	arjun	maerwald: now if i  -- textP txt = seqenceA $ list of bunch of charP thats mapped over txt
2021-09-20 15:31:11	arjun	i get Parser [Text] instead of Parser Text right ?
2021-09-20 15:31:15	dminuoso	arjun: You're better of using T.pack rather than T.singleton.
2021-09-20 15:31:32	dminuoso	`T.pack <$> sequenceA ...`
2021-09-20 15:31:57	arjun	dminuoso: ah yes, ofcource!
2021-09-20 15:32:01	maerwald	arjun: you mappend
2021-09-20 15:32:17	maerwald	fmap mconcat $ sequenceA
2021-09-20 15:32:19	maerwald	I think
2021-09-20 15:32:38	maerwald	we're not writing a high-performance parser that way
2021-09-20 15:32:39	maerwald	but uh
2021-09-20 15:32:40	dminuoso	maerwald: At that point, really just use T.pack once, rather than creating a bunch of singleton texts and mappening them together again.
2021-09-20 15:32:46	arjun	maerwald: right!
2021-09-20 15:32:59	arjun	this is just a learning exercise on my part guys, we can chill : P
2021-09-20 15:33:08	dminuoso	merijn: Plus, I dont get why people hate ReadP *that* *much*.
2021-09-20 15:33:43	maerwald	dminuoso: my cat can tell when I'm using ReadP by the amount of increased noise
2021-09-20 15:34:24	dminuoso	As amusing as that phrasing is, can you break it down in rational arguments?
2021-09-20 15:34:56	maerwald	yeah: if you were to design the worst parser API, it would be ReadP
2021-09-20 15:36:14	←	lavaman has quit (Remote host closed the connection)
2021-09-20 15:36:22	←	meinside has quit (Quit: Connection closed for inactivity)
2021-09-20 15:37:47	←	azeem has quit (Read error: Connection reset by peer)
2021-09-20 15:38:19	←	Pickchea has quit (Ping timeout: 265 seconds)
2021-09-20 15:38:30	→	yauhsien has joined #haskell
2021-09-20 15:40:08	→	azeem has joined #haskell
2021-09-20 15:40:16	→	pretty_dumm_guy has joined #haskell
2021-09-20 15:43:12	→	Guest|55 has joined #haskell
2021-09-20 15:43:16	←	yauhsien has quit (Ping timeout: 264 seconds)
2021-09-20 15:44:13	→	yauhsien has joined #haskell
2021-09-20 15:48:06	←	cfricke has quit (Quit: WeeChat 3.2.1)
2021-09-20 15:48:57	←	yauhsien has quit (Ping timeout: 265 seconds)
2021-09-20 15:48:58	←	azeem has quit (Ping timeout: 246 seconds)
2021-09-20 15:50:58	←	slurmz has quit (Quit: Leaving)
2021-09-20 15:52:46	→	azeem has joined #haskell
2021-09-20 15:53:56	←	Guest|55 has quit (Quit: Connection closed)
2021-09-20 16:00:27	→	Everything has joined #haskell
2021-09-20 16:02:47	Franciman	Haskell's laziness: a world of pain with some niceties
2021-09-20 16:07:14	→	jollygood2 has joined #haskell
2021-09-20 16:08:08	→	pera has joined #haskell
2021-09-20 16:10:28	tdammers	time for bogoparse: enumerate all possible parse trees, and then check each one until you find one that matches the input
2021-09-20 16:10:29	→	jespada has joined #haskell
2021-09-20 16:10:40	→	lavaman has joined #haskell
2021-09-20 16:10:46	←	lavaman has quit (Remote host closed the connection)
2021-09-20 16:11:22	int-e	tdammers: then fuse parse tree generation and check and derive an efficient algroithm?
2021-09-20 16:11:43	←	merijn has quit (Ping timeout: 246 seconds)
2021-09-20 16:11:51	tdammers	galaxy brain move right there
2021-09-20 16:12:42	→	merijn has joined #haskell
2021-09-20 16:13:56	int-e	I'm not sure how well this works, but https://en.wikipedia.org/wiki/CYK_algorithm can maybe be thought of it that way if you do bottom-up generation and *also* throw in some dynamic programming
2021-09-20 16:14:51	int-e	Of course, quadratic time isn't what you want for practical parsers.
2021-09-20 16:15:49	→	vysn has joined #haskell
2021-09-20 16:18:01	kuribas	Franciman: I don't quite understand the drama around lazyness.  Sometimes it's mildly inconvenient when tracing stuff, but otherwise I haven't found it a big problem.
2021-09-20 16:18:26	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-20 16:18:32	tdammers	well, the thing with Haskell's non-strict evaluation is that it's usually fine, but on the rare occasions when it's not, it's *really* not
2021-09-20 16:18:35	→	merijn has joined #haskell
2021-09-20 16:18:56	tdammers	tracking down performance problems in Haskell is really expert-level work
2021-09-20 16:19:13	dminuoso	:s/Haskell/any language/
2021-09-20 16:19:35	tdammers	yes, but Haskell makes it particularly tricky to at least follow along
2021-09-20 16:20:23	int-e	"just look at the STG core"
2021-09-20 16:20:24	int-e	;)
2021-09-20 16:20:49	tdammers	it gets worse when you're trying to figure out *compiler* performance problems
2021-09-20 16:21:05	dminuoso	Sure, but that is as complicated with any compiler.
2021-09-20 16:21:22	dminuoso	It takes an expert to look at some assembly and even understand that it's a compiler problem.
2021-09-20 16:21:31	tdammers	maybe
2021-09-20 16:21:47	dminuoso	You cant even determine whether a given problem is compiler related, if you dont understand how that compiler works.
2021-09-20 16:21:49	kuribas	The first solution for performance problems is to fix the architecture.
2021-09-20 16:21:55	tdammers	but then, "why does this 200-line module take six hours to compile and eat up 60 gigabytes of RAM" is not something I've ever lived through in, say, C++
2021-09-20 16:22:11	kuribas	Linear optimizations are the last thing you want to optimize for, not the first.
2021-09-20 16:22:55	int-e	One of my least favorite things is that sometimes, bad inlining decisions can impede the selector shortcut logic in the garbage collector. "it works fine with -O0 but leaks memory with -O2" is really not what you want
2021-09-20 16:23:00	tdammers	kuribas: I'm not talking about linear optimizations. I'm talking about things going accidentally quadratic because you hit an edge case in the optimizer, or because things are getting shared that you didn't expect to, or something like that
2021-09-20 16:23:14	kuribas	tdammers: that sounds nasty :)
2021-09-20 16:23:23	EvanR	in areas of programming where apparently designers tried to make things accessible to "non-experts" or... I don't know what to call it, we have some very interesting resulting software. 
2021-09-20 16:23:32	tdammers	yes. that's the kind of stuff where things not being fine are *really* not find
2021-09-20 16:23:39	tdammers	s/find/fine/
2021-09-20 16:23:55	←	merijn has quit (Ping timeout: 260 seconds)
2021-09-20 16:24:13	kuribas	tdammers: compiler bugs are nasty, and I have run into a few.  But they are not a feature of the language.
2021-09-20 16:24:27	tdammers	EvanR: by "expert-level", I meant that in order to understand some Haskell performance regressions, it's not enough to be an expert at the language itself, you also have to understand how the compiler works under the hood.
2021-09-20 16:24:29	→	merijn has joined #haskell
2021-09-20 16:24:29	EvanR	things are hard in engineering, requiring significant insight and skill to do
2021-09-20 16:24:40	jollygood2	tdammers, I'd like to see an example of that (200 lines module taking 6 hours to compile, consuming 60 GB). I have never encountered anything remotely similar in the 3 years I've used haskell for all my personal projects
2021-09-20 16:24:56	Franciman	kuribas: I have an algorithm which loops forever when put in a monadic computation
2021-09-20 16:24:59	EvanR	how did programming end up being a thing you could supposedly get by with without much skill
2021-09-20 16:25:03	Franciman	and does not loop forever when used purely
2021-09-20 16:25:10	Franciman	also, what tdammers said
2021-09-20 16:25:28	Franciman	what's hard
2021-09-20 16:25:33	Franciman	is understanding what is happening
2021-09-20 16:25:39	kuribas	Franciman: sure, you can get loops without lazyness as well.
2021-09-20 16:25:40	Franciman	I know this is strange given that haskell is declarative
2021-09-20 16:25:45	Franciman	not saying that
2021-09-20 16:25:50	Franciman	the problem is that with laziness I am lost
2021-09-20 16:25:54	Franciman	I don't know what happens
2021-09-20 16:26:03	Franciman	i know that in declarative programming this does not need to be a problem
2021-09-20 16:26:09	kuribas	And perhaps ghc should be better in detecting loops.
2021-09-20 16:26:11	Franciman	but in this particular case, I need to know what's wrong
2021-09-20 16:26:23	Franciman	and I cannot
2021-09-20 16:26:28	EvanR	"I don't know things" is a common problem with younger people on the internet nowadays!
2021-09-20 16:26:37	kuribas	I find that a binary search usually works to pinpoint the guilty code.
2021-09-20 16:26:39	tdammers	EvanR: I did not say that. I do believe that programming should require skill; the problem is that writing performant Haskell code, mastery of the language itself is sometimes not enough, you also need to know and understand its implementation
2021-09-20 16:26:52	EvanR	I don't know X, followed a ways behind by, I can't do X
2021-09-20 16:27:40	EvanR	you sometimes have to understand the implementation of haskell, now compare to how often you have to understand the implementation of not haskell xD
2021-09-20 16:27:54	EvanR	probably all the time
2021-09-20 16:28:09	tdammers	that's not my experience, no
2021-09-20 16:28:10	EvanR	down to the machine
2021-09-20 16:28:49	EvanR	the idea that it's not important how most of it works is this weird idea in programming as opposed to engineering
2021-09-20 16:28:50	tdammers	with most of the other languages I've worked with, having a good mental model of the language itself is generally enough to figure out performance issues
2021-09-20 16:28:57	int-e	EvanR: 
2021-09-20 16:29:01	int-e	oops
2021-09-20 16:29:30	int-e	for most other languages, the mental model of the language is a sufficiently accurate model of the target machine.
2021-09-20 16:29:31	EvanR	haskell is different in that a mental model of the language works more often!
2021-09-20 16:29:49	EvanR	without getting into the weeds
2021-09-20 16:29:53	EvanR	but you still have to
2021-09-20 16:29:58	←	merijn has quit (Ping timeout: 260 seconds)
2021-09-20 16:30:11	Franciman	EvanR: haskell is also different in that it is hard to inspect the actual model
2021-09-20 16:30:15	→	merijn has joined #haskell
2021-09-20 16:30:19	Franciman	what tools do we have?
2021-09-20 16:30:19	EvanR	"actual model" ?
2021-09-20 16:30:22	Franciman	can I see thunks?
2021-09-20 16:30:28	dminuoso	tdammers: perhaps it's difficult to make this determination based on personal observation. If your daily work with Haskell involves problem domains that make performance regressions either likely or relevant, there's a much higher chance of you being confronted with it.
2021-09-20 16:30:31	Franciman	I don't even have proper stack traces sometimes
2021-09-20 16:30:35	EvanR	you might mean the not model
2021-09-20 16:30:39	dminuoso	Say, a C programmer working on Linux likely needs to know a lot about GCC.
2021-09-20 16:30:40	←	max22- has quit (Ping timeout: 264 seconds)
2021-09-20 16:30:41	int-e	Unfortunately, laziness kind of abstracts from memory use. So you have to unpack that level of abstraction... and that's really hard, because the relation isn't very direct.
2021-09-20 16:30:42	Franciman	I mean the implementation
2021-09-20 16:30:50	dminuoso	That doesn't mean the average C programmer must know about GCC.
2021-09-20 16:30:57	→	alx741 has joined #haskell
2021-09-20 16:31:16	tdammers	dminuoso: possible... but I'm not really talking about compile-specific quirks.
2021-09-20 16:31:19	dminuoso	Me personally have had only a single compiler related problem in 3 years of Haskell, and that one was quickly identified after 2 hours.
2021-09-20 16:31:55	tdammers	I'm talking about simple things, such as it not being obvious when a particular suspected-expensive calculation runs, or even how often
2021-09-20 16:32:08	sshine	dminuoso, knowledge of evaluation semantics.
2021-09-20 16:32:48	int-e	dminuoso: C compilers don't rewrite your code nearly as heavily as GHC does.
2021-09-20 16:33:02	EvanR	perhaps I don't look at programming like a programmer but a scientist, and I'm never surprised when theories and stories suddenly fail and you have to go back to basics
2021-09-20 16:33:04	int-e	I really think this is a price we pay for abstraction.
2021-09-20 16:33:11	tdammers	in a strict language, when you write an expression, it will run when the explicit control flow reaches that point. but in a lazy language, it might run in a different thread, at some later point, or not at all, or multiple times
2021-09-20 16:33:29	int-e	So maybe we should compare this to SQL rather than C.
2021-09-20 16:33:46	tdammers	don't get me wrong, most of the time this is great, because the compiler tends to make OK choices, and it frees you from the burden of thinking about evaluation order and all that
2021-09-20 16:33:49	int-e	Where you often have to understand just how exactly your DBS optimizes a particular query.
2021-09-20 16:33:53	Franciman	I like that in haskell to know what's evaluated, you need to start from the end of the program :D
2021-09-20 16:33:55	Franciman	a sort of dual
2021-09-20 16:33:56	→	waleee has joined #haskell
2021-09-20 16:33:59	clever	tdammers: lazy blackholing, is one case where it may run multiple times
2021-09-20 16:34:10	tdammers	int-e: yes, SQL is similar. it's *usually* fine, but when it's not, it's *really* not
2021-09-20 16:34:28	EvanR	Franciman: you mean... the beginning? xD (the top of your expression tree)
2021-09-20 16:34:43	Franciman	ahah exactly
2021-09-20 16:34:55	clever	when haskell decides to evaluate a thunk, it will grab a mutex, and temporarily turn that thunk into a black hole
2021-09-20 16:35:11	clever	any other threads trying to read that value, will then block until the core doing the computation, has an answer
2021-09-20 16:35:11	Franciman	you can't know how a function is evaluated if you don't know where it is called
2021-09-20 16:35:13	Franciman	and how
2021-09-20 16:35:22	clever	but lazy blackholing, skips that mutex
2021-09-20 16:35:31	←	merijn has quit (Ping timeout: 246 seconds)
2021-09-20 16:35:40	clever	so 2 threads may wind up running the same computation in parallel, and the 2nd one to finish, overwrites the result of the 1st
2021-09-20 16:35:52	←	azeem has quit (Ping timeout: 246 seconds)
2021-09-20 16:35:54	clever	but its pure, so the 2nd result is identical, and all you did was waste a bit of cpu time
2021-09-20 16:36:02	tdammers	yep
2021-09-20 16:36:08	EvanR	haskell really makes you appreciate "mental models" of normal programming languages and *their* intricacies and weird bullshit they do sometimes, stuff that confounds programming in those normal languages
2021-09-20 16:36:09	int-e	clever: you also destroyed some sharing
2021-09-20 16:36:15	tdammers	you can also make a similar thing slightly more explicit using STM
2021-09-20 16:36:15	clever	but you avoided a mutex
2021-09-20 16:36:21	→	merijn has joined #haskell
2021-09-20 16:36:39	clever	int-e: yeah, i learned about this, in the context of `ghc -j20`
2021-09-20 16:37:13	clever	int-e: something in ghc is re-making an inter-module cache on each operation, and un-doing the evaluation, and then every thread repeats that work in parallel, so the more threads you use, the worse the compile time becomes
2021-09-20 16:37:29	int-e	if only the compiler knew which functions produce big results and which produce small ones...
2021-09-20 16:37:40	←	xff0x has quit (Ping timeout: 240 seconds)
2021-09-20 16:37:52	←	pera has quit (Ping timeout: 264 seconds)
2021-09-20 16:38:21	int-e	(give me a halting oracle and I'll write a better compiler ;-) )
2021-09-20 16:39:30	clever	int-e: what about a hint the programmer gives to the compiler? to force lazy black-holing off for certain thunks?
2021-09-20 16:40:03	clever	something more lazy then forcing it to just not be a thunk
2021-09-20 16:40:07	→	azeem has joined #haskell
2021-09-20 16:40:19	EvanR	more laziness, two tildes
2021-09-20 16:40:24	int-e	clever: you can probably wrap GHC.Exts.noDuplicate# into something pure
2021-09-20 16:40:42	→	AlexNoo_ has joined #haskell
2021-09-20 16:41:28	int-e	which will probably be quite close to  unsafePerformIO . evaluate
2021-09-20 16:41:54	int-e	since the former does noDuplicate# and the latter forces the evaluation
2021-09-20 16:42:04	←	merijn has quit (Ping timeout: 264 seconds)
2021-09-20 16:42:14	tdammers	EvanR: apply a heuristic that tells you how likely the program is to crash eventually; if that likelyhood exceeds a reasonable threshold (say 50%), just crash the program immediately. very efficient.
2021-09-20 16:42:15	int-e	(noDuplicate# forces taking a mutex)
2021-09-20 16:42:29	→	merijn has joined #haskell
2021-09-20 16:42:29	clever	int-e: ahh
2021-09-20 16:42:59	EvanR	tdammers: intriguing, but what have I done to have this suggested to me specifically
2021-09-20 16:43:07	clever	tdammers: ive seen somebody make a joke before, about running the tests every time you save, if any tests fail, immediately revert all changes, back to what git said it is
2021-09-20 16:43:15	clever	tdammers: if you wrote buggy code, start over from scratch :P
2021-09-20 16:43:56	EvanR	also over 50% of the time, that 50% is vastly exceeded so we're screwed
2021-09-20 16:44:01	hpc	someone linked to a ghc bug here a few weeks ago, where if your code didn't typecheck it deleted the file
2021-09-20 16:44:18	hpc	100% real bug
2021-09-20 16:44:24	clever	hpc: :D
2021-09-20 16:44:26	←	AlexNoo has quit (Ping timeout: 260 seconds)
2021-09-20 16:44:39	EvanR	or was it a bug
2021-09-20 16:44:48	EvanR	maybe ahead of its time really
2021-09-20 16:44:49	←	AlexZenon has quit (Ping timeout: 268 seconds)
2021-09-20 16:44:49	←	Alex_test has quit (Ping timeout: 268 seconds)
2021-09-20 16:45:06	tdammers	EvanR: "more laziness"
2021-09-20 16:46:59	EvanR	i hope the next 700 programming languages all incorporate the good parts of haskell as far as is possible
2021-09-20 16:47:42	EvanR	there's enough complaints about laziness that i'm not sure haskell's version of it is part of that...
2021-09-20 16:47:59	Cajun	so far the main programming languages have incorporated parts of it, like python's list comprehensions. though it completely disregarded types because muh pythonic way :P
2021-09-20 16:48:01	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-20 16:48:20	→	merijn has joined #haskell
2021-09-20 16:48:29	→	Alex_test has joined #haskell
2021-09-20 16:48:34	→	AlexZenon has joined #haskell
2021-09-20 16:48:41	EvanR	pythong aside i mean the next next 700 lol
2021-09-20 16:49:01	EvanR	700 - 1400
2021-09-20 16:49:25	Cajun	if gpt-1000 doesnt beat us out by then :P
2021-09-20 16:50:03	hpc	gpt-3 can write kubernetes yaml, what else is there?
2021-09-20 16:50:38	Cajun	its quite good at html
2021-09-20 16:50:53	hpc	nobody writes html anymore
2021-09-20 16:52:43	EvanR	so the web is that far gone now
2021-09-20 16:53:15	EvanR	not only everything is in a browser but it runs on AI
2021-09-20 16:53:21	→	eggplantade has joined #haskell
2021-09-20 16:53:22	←	merijn has quit (Ping timeout: 246 seconds)
2021-09-20 16:54:11	→	merijn has joined #haskell
2021-09-20 16:54:46	Cajun	so it can do HTML by description, React by description, React by variable name alone, Figma by description, Spreadsheet by description, and SQL
2021-09-20 16:57:00	merijn	dminuoso: Because ReadP is really, *really*, REALLY, *REALLY* hard to reason about
2021-09-20 16:57:34	merijn	dminuoso: Unless your grammar is absolutely, positively, trivial, it's very hard to understand how stuff gets parsed with ReadP
2021-09-20 16:58:16	←	eggplantade has quit (Ping timeout: 264 seconds)
2021-09-20 16:58:17	merijn	dminuoso: I've spent days fighting parse failures relating to the lack of left-biased in <|> and figuring out how to correctly manually left-bias is a major PITA
2021-09-20 16:58:33	→	lavaman has joined #haskell
2021-09-20 16:58:37	merijn	(brb, patch reboot)
2021-09-20 16:58:39	←	merijn has quit (Client Quit)
2021-09-20 17:01:53	→	merijn has joined #haskell
2021-09-20 17:03:04	←	lavaman has quit (Ping timeout: 264 seconds)
2021-09-20 17:03:36	raehik	I know I can tell cabal where to look for libs with --extra-lib-dirs . Can I configure that in a config file, or for my whole system?
2021-09-20 17:04:13	raehik	I can't figure out where cabal searches for libs -- it certainly doesn't seem like $PATH, since I have the dir I want to use on it
2021-09-20 17:04:14	merijn	raehik: ~/.cabal/config
2021-09-20 17:04:14	EvanR	could be worse, your could be using yacc/bison xD
2021-09-20 17:04:26	merijn	EvanR: tbh, yacc/bison are more easy to debug
2021-09-20 17:04:31	EvanR	I knew you'd say that
2021-09-20 17:05:01	merijn	I TAed compilers for 4 years with flex/bison. I've had to dive into their debug facilities whenever students get stuck :p
2021-09-20 17:05:09	EvanR	I too subscribe to "ancient unix tools are awesome and easy to use and understand" xD
2021-09-20 17:05:12	merijn	You can actually output very detailed representations
2021-09-20 17:05:16	raehik	merijn: ah, I misread the docs, envvars just become entries in the config. ty!
2021-09-20 17:05:43	merijn	I'm not saying flex/bison are *easy*, I said they're *easier to debug*
2021-09-20 17:06:02	merijn	EvanR: ReadP (and, honestly, all of the parsecs) provide no way to debug besides "trial and error"
2021-09-20 17:06:28	merijn	flex/bison allow dumping out the entire generated state machine *including* pointers which state transitions are ambiguous
2021-09-20 17:06:45	→	aidy has joined #haskell
2021-09-20 17:06:47	merijn	While those aren't particularly simple to understand, they *can* be understood
2021-09-20 17:07:12	EvanR	it's kind of amazing debugging works anywhere for anything, it's humbling
2021-09-20 17:07:41	sshine	is there something like QuickCheck's Gen that doesn't depend on all of QuickCheck?
2021-09-20 17:08:55	EvanR	merijn: yeah earlier the response to laziness being hard to understand was (a joke?) to dump STG core xD
2021-09-20 17:08:59	←	aidy has quit (Quit: Reconnecting)
2021-09-20 17:09:13	→	aidy has joined #haskell
2021-09-20 17:09:27	←	neo1 has quit (Ping timeout: 252 seconds)
2021-09-20 17:09:54	EvanR	the matrix has too way too much info for the visual decoder, much easier to look at raw, blonde brunette redhead
2021-09-20 17:10:18	→	xff0x has joined #haskell
2021-09-20 17:10:36	merijn	EvanR: The bison state diagrams are actually fairly accessible, imo. Far more so than STG/Core
2021-09-20 17:11:00	merijn	They do require you know a bit about how LALR(1) parser generators work, though
2021-09-20 17:11:03	EvanR	says the guy who grades bison homework xD
2021-09-20 17:11:16	←	jollygood2 has quit (Quit: http://www.okay.uz/)
2021-09-20 17:11:31	→	jollygood2 has joined #haskell
2021-09-20 17:11:52	←	aidy has left #haskell
2021-09-20 17:12:06	merijn	EvanR: We didn't look at their bison unless they had a problem in the lab, so that was, like, 4-8 times a year in a one month period with me not touching bison at any point in between
2021-09-20 17:12:16	EvanR	joking aside, do you have any ideas on similar "good ways" to get a handle on parsec style parsers?
2021-09-20 17:12:44	EvanR	even hypothetically
2021-09-20 17:13:23	EvanR	(trial and error have gotten me this far in all computer topics though xD)
2021-09-20 17:13:24	merijn	You'd need to integrate some way to output diagnostics into the definition of the parser combinator
2021-09-20 17:13:39	merijn	Which probably means you are limited to Selective
2021-09-20 17:13:49	EvanR	Selective?
2021-09-20 17:13:51	merijn	Since you can't do Monads
2021-09-20 17:13:57	merijn	EvanR: Selective Functors
2021-09-20 17:14:03	sshine	https://www.staff.ncl.ac.uk/andrey.mokhov/selective-functors.pdf
2021-09-20 17:14:23	merijn	EvanR: Probably the best paper (together with Build Systems a la Carte) from the past 5 or so years :p
2021-09-20 17:14:42	merijn	I really wanna see more Selective stuff
2021-09-20 17:14:47	sshine	I haven't had a chance to use Selective yet.
2021-09-20 17:15:18	merijn	sshine: I've been (on and off) looking into adding selective support to optparse-applicative
2021-09-20 17:15:20	raehik	merijn: mmm I'm not all that happy with the solution. --extra-lib-dirs never works "recursively"/for dependencies, I had to solve that with a cabal.project file. It feels weird. Why can't I globally configure cabal to search for libraries in X?
2021-09-20 17:15:29	←	asm has quit (Changing host)
2021-09-20 17:15:29	→	asm has joined #haskell
2021-09-20 17:15:33	←	sheddow has quit (Ping timeout: 256 seconds)
2021-09-20 17:15:46	merijn	raehik: You can, though? Using ~/.cabal/config as I said?
2021-09-20 17:16:16	←	jstolarek has quit (Ping timeout: 264 seconds)
2021-09-20 17:16:19	→	aidy has joined #haskell
2021-09-20 17:16:27	raehik	oh, by writing extra-lib-dirs in there? I tried that, and it didn't work for building a dependency that needed a lib in that dir
2021-09-20 17:17:08	merijn	"it didn't work" isn't close to specific enough to say anything useful about
2021-09-20 17:17:11	→	[itchyjunk] has joined #haskell
2021-09-20 17:17:53	→	jstolarek has joined #haskell
2021-09-20 17:18:31	raehik	Sorry. extra-lib-dirs whether as CLI arg or entry in config, doesn't seem to apply for building dependencies
2021-09-20 17:19:02	raehik	I get the same "missing required dependencies: x, y" that I do for if I didn't use extra-lib-dirs
2021-09-20 17:19:19	EvanR	merijn, so what you're saying is monadic parsing is too powerful to debug so to speak, and reigning in the language power would open up legitimate possibilities for analysis
2021-09-20 17:19:39	merijn	raehik: Is the dependency not using pkg-config depends?
2021-09-20 17:19:41	raehik	It does work for the main package I'm building. But it depends on hmatrix, which needs some math libs, and my Windows setup stores them elsewhere
2021-09-20 17:19:43	←	leah2 has quit (Remote host closed the connection)
2021-09-20 17:19:57	merijn	In that case lib-dirs is irrelevant, but whether pkg-config knows about them
2021-09-20 17:20:24	geekosaur	I don't think windows uses pkg-config?
2021-09-20 17:20:33	merijn	EvanR: Monadic parsing could allow for "runtime" debugging (i.e. given a specific input, report debug output how we got where we are and why we're stuck)
2021-09-20 17:20:49	merijn	EvanR: Selective, on the other hand, allows for *offline* debugging
2021-09-20 17:21:00	raehik	I'm using MSYS2 -- I don't think I have the full story on how libs are located
2021-09-20 17:21:14	merijn	EvanR: i.e. with selective you could output diagnostics without having to apply the parser to an input
2021-09-20 17:21:42	merijn	:t (>>=)
2021-09-20 17:21:43	lambdabot	Monad m => m a -> (a -> m b) -> m b
2021-09-20 17:21:52	→	neurocyte013 has joined #haskell
2021-09-20 17:21:56	→	leah2 has joined #haskell
2021-09-20 17:22:03	→	gehmehgeh has joined #haskell
2021-09-20 17:22:07	aidy	I'm wanting a newtype for "monad transformer applied to monad" for use with deriving via, does anyone know if this exists already?
2021-09-20 17:22:07	aidy	`newtype ApplyT (f :: (* -> *) -> * -> *) (m :: * -> *) a = ApplyT { unApplyT :: f m a }`
2021-09-20 17:22:09	merijn	EvanR: It's the infamous "actual effects depend on the value of 'a'" problem introduced by the 2nd argument of >>=
2021-09-20 17:22:14	←	favonia has quit (Ping timeout: 260 seconds)
2021-09-20 17:23:45	EvanR	results are fact dependent, your milage may vary
2021-09-20 17:24:00	merijn	EvanR: You need to parse an 'a' from the input before you can find out what the parser of the next bit looks like with >>=. Selective introduces the option to "speculatively" inspect the "derived" effects
2021-09-20 17:24:29	merijn	Anyway, the paper that sshine linked gives a nice overview of how they compare to applicative and monad and potential uses
2021-09-20 17:26:19	EvanR	reading it
2021-09-20 17:28:24	→	max22- has joined #haskell
2021-09-20 17:29:03	EvanR	select :: Selective f => f (Either a b) -> f (a -> b) -> f b
2021-09-20 17:29:05	EvanR	cool
2021-09-20 17:29:25	←	neurocyte013 has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-20 17:31:00	→	neurocyte013 has joined #haskell
2021-09-20 17:36:20	→	pera has joined #haskell
2021-09-20 17:36:44	ℹ	pera is now known as Guest3214
2021-09-20 17:43:20	→	nschoe has joined #haskell
2021-09-20 17:43:36	←	gehmehgeh has quit (Ping timeout: 276 seconds)
2021-09-20 17:45:23	dminuoso	14:14:53          merijn | [11:36:02] EvanR: ReadP (and, honestly, all of the parsecs) provide no way to debug besides "trial and error"
2021-09-20 17:45:48	dminuoso	And a handrolled parser, by what appears to be a beginner, is likely to have any sort of debugging assistance?
2021-09-20 17:46:00	dminuoso	I find that to be a brave assertion.
2021-09-20 17:52:07	←	econo has quit (Quit: Connection closed for inactivity)
2021-09-20 17:55:00	dminuoso	If you claim that not even any of the parsecs offer sane debugging methods, how is a haskell beginner likely to do anything more sensible? At that point you might as well just use ReadP. :p
2021-09-20 17:58:40	←	nfd has quit (Ping timeout: 240 seconds)
2021-09-20 18:00:43	maerwald	dminuoso: stop :p
2021-09-20 18:01:49	←	jtomas_ has quit (Remote host closed the connection)
2021-09-20 18:06:22	merijn	dminuoso: They will at least understand what they wrote
2021-09-20 18:06:36	merijn	dminuoso: My point is that ReadP behaves unlike every other parser combinator in very confusing ways
2021-09-20 18:06:41	merijn	Like the lack of left-bias
2021-09-20 18:07:04	merijn	Which means that, if you know how to write good parsers using *parsec, your parsers with ReadP will probably be a broken mess
2021-09-20 18:09:03	→	ec_ has joined #haskell
2021-09-20 18:09:26	sshine	merijn, megaparsec has pretty good error messages.
2021-09-20 18:09:33	→	machinedgod has joined #haskell
2021-09-20 18:09:36	←	geekosaur has quit (Quit: Leaving)
2021-09-20 18:09:53	dminuoso	Sometimes.
2021-09-20 18:11:08	→	geekosaur has joined #haskell
2021-09-20 18:11:33	dminuoso	In the widely used paring libraries, trifecta is the only one I'd tag with "good" error messages.
2021-09-20 18:11:58	dminuoso	At the cost of weird performance and ergonomics.
2021-09-20 18:14:09	merijn	megaparsec has good error messages if you implement that stuff
2021-09-20 18:14:30	ℹ	ec_ is now known as ec
2021-09-20 18:16:12	→	slowButPresent has joined #haskell
2021-09-20 18:17:29	→	fendor_ has joined #haskell
2021-09-20 18:19:40	←	fendor has quit (Ping timeout: 240 seconds)
2021-09-20 18:19:52	←	max22- has quit (Ping timeout: 264 seconds)
2021-09-20 18:20:13	→	pbrisbin has joined #haskell
2021-09-20 18:21:07	←	dextaa has quit (Ping timeout: 252 seconds)
2021-09-20 18:21:55	→	gehmehgeh has joined #haskell
2021-09-20 18:25:53	sshine	merijn, if you add good labels you mean?
2021-09-20 18:25:55	←	neurocyte013 has quit (Ping timeout: 252 seconds)
2021-09-20 18:25:55	→	slack1256 has joined #haskell
2021-09-20 18:26:42	→	rcg has joined #haskell
2021-09-20 18:26:52	ℹ	rcg is now known as NoirCode
2021-09-20 18:27:31	sshine	I think they're often good by default for helping me as a developer debug the parser while I'm building it. for really good user-faced error messages, I think they're quite ok, especially compared to a bunch of real-world interpreters. but nothing like Elm. not sure how to get that for free.
2021-09-20 18:28:03	NoirCode	`data RealFloat a => Complex a = !a :+ !a` -- Why does this have the type class operator => ?
2021-09-20 18:28:36	geekosaur	there's been some discussion of that on haskell-cafe because of folks who want Gaussian integers
2021-09-20 18:28:57	geekosaur	but mostly I think it's just to hook it into Num
2021-09-20 18:30:13	geekosaur	without *some* typeclass association you can't use 0 to mean 0 :+ 0, for example (fromInteger "promotion" of literals)
2021-09-20 18:30:37	geekosaur	or fromRational as approppriate
2021-09-20 18:31:09	sshine	https://dev.to/sshine/comment/1502i -- an example of a filename parser and a bunch of failed parses with accompanying error messages. I think they're good...
2021-09-20 18:33:57	NoirCode	Is (Complex a) is the context, or is that being defined here?
2021-09-20 18:34:16	dminuoso	NoirCode: Where did you see this?
2021-09-20 18:34:18	geekosaur	Complex is being defined, RealFloat is the context
2021-09-20 18:35:13	geekosaur	and this is kinda obsolete, DatatypeContexts is mostly useless and highly misleading and was dropped in Haskell2010
2021-09-20 18:35:35	→	neurocyte013 has joined #haskell
2021-09-20 18:35:35	←	neurocyte013 has quit (Changing host)
2021-09-20 18:35:35	→	neurocyte013 has joined #haskell
2021-09-20 18:35:55	NoirCode	dminuoso: I saw this while reading "A Gentle Introduction to Haskell 98"
2021-09-20 18:36:21	dminuoso	Oh that. The most misleading title of a Haskell resource I've ever seen. :-)
2021-09-20 18:36:34	→	enick_736 has joined #haskell
2021-09-20 18:36:41	int-e	haha, "gentle"
2021-09-20 18:36:46	dminuoso	Yeah. :)
2021-09-20 18:37:11	dminuoso	I would have replaced Gentle with Terse.
2021-09-20 18:37:12	int-e	It makes sense if you add [for seaseoned theoretical computer scientists] at the end
2021-09-20 18:37:21	int-e	-e
2021-09-20 18:37:21	dminuoso	Or that.
2021-09-20 18:37:30	←	neurocyte013 has quit (Client Quit)
2021-09-20 18:37:39	dminuoso	It's still a great resource, if you're in its audience.
2021-09-20 18:37:44	NoirCode	geekosaur: Why is it the context if it has a data declaration?
2021-09-20 18:37:52	NoirCode	s/it/RealFloat/
2021-09-20 18:38:04	dminuoso	NoirCode: With datatype contexts you could could constraint the types used when constructing values of that.
2021-09-20 18:38:31	dminuoso	So with that (dated, old) datatype context, you could create some value of `x :+ y` only if the type of x/y also had an instance RealFlow.
2021-09-20 18:39:05	dminuoso	It's largely deprecated since putting constraints on *constructing* values adds little value and just artificially constraints and reduces the amounts of useful code, at no benefit.
2021-09-20 18:39:08	→	neurocyte013 has joined #haskell
2021-09-20 18:39:09	←	neurocyte013 has quit (Changing host)
2021-09-20 18:39:09	→	neurocyte013 has joined #haskell
2021-09-20 18:39:21	dminuoso	Instead we now put constraints on functions that *use* the components using a typeclasses methods
2021-09-20 18:39:43	←	neurocyte013 has quit (Client Quit)
2021-09-20 18:39:55	←	motherfsck has quit (Quit: quit)
2021-09-20 18:40:42	dminuoso	Which means you can construct Complex with anything as its contained type, even String - any function that doesn't even use RealFloat on the components can still work with it.
2021-09-20 18:40:49	dminuoso	Now we have
2021-09-20 18:41:00	dminuoso	`data Complex a = !a :+ !a`
2021-09-20 18:41:33	→	neurocyte013 has joined #haskell
2021-09-20 18:41:34	←	neurocyte013 has quit (Changing host)
2021-09-20 18:41:34	→	neurocyte013 has joined #haskell
2021-09-20 18:43:09	NoirCode	Ok
2021-09-20 18:45:39	NoirCode	"constraints on functions" -- Are these the typeclass contexts?
2021-09-20 18:46:04	geekosaur	yes
2021-09-20 18:46:19	dminuoso	Sometimes "context" is also called "constraint"
2021-09-20 18:46:34	geekosaur	actually constraints are a little more general, but an introduction to haskell 98 won't talk about e.g. type equivalences
2021-09-20 18:46:48	→	argento has joined #haskell
2021-09-20 18:47:10	geekosaur	(not only were they not in haskell 98, they're specific to ghc and not in any standard)
2021-09-20 18:47:40	→	max22- has joined #haskell
2021-09-20 18:50:29	←	Guest3214 has quit (Quit: leaving)
2021-09-20 18:52:21	ℹ	AlexNoo_ is now known as AlexNoo
2021-09-20 18:52:57	→	motherfsck has joined #haskell
2021-09-20 18:53:09	←	ec has quit (Ping timeout: 276 seconds)
2021-09-20 18:54:51	→	eggplantade has joined #haskell
2021-09-20 18:55:11	→	wroathe has joined #haskell
2021-09-20 18:55:12	←	wroathe has quit (Changing host)
2021-09-20 18:55:12	→	wroathe has joined #haskell
2021-09-20 18:59:28	←	eggplantade has quit (Ping timeout: 264 seconds)
2021-09-20 18:59:53	→	cfricke has joined #haskell
2021-09-20 19:02:29	←	argento has quit (Ping timeout: 264 seconds)
2021-09-20 19:05:13	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-20 19:07:54	kuribas	Why does dhall give me an error on two records: [{field1 = ..}, {field1 = ..}], but not one one [{field1 = ..}]?
2021-09-20 19:08:27	kuribas	unexpected '{'
2021-09-20 19:09:33	kuribas	should I regret using dhall?
2021-09-20 19:12:14	→	lavaman has joined #haskell
2021-09-20 19:13:20	→	dextaa has joined #haskell
2021-09-20 19:15:03	←	cfricke has quit (Quit: WeeChat 3.2.1)
2021-09-20 19:15:21	←	NoirCode has quit (Quit: NoirCode)
2021-09-20 19:16:41	ldlework	kuribas: what's dhall
2021-09-20 19:16:52	←	lavaman has quit (Ping timeout: 264 seconds)
2021-09-20 19:17:05	kuribas	ldlework: https://dhall-lang.org/
2021-09-20 19:17:16	kuribas	oh, missing a '='
2021-09-20 19:17:25	kuribas	thanks for the unhelpful error message...
2021-09-20 19:17:37	ldlework	Ah a config language
2021-09-20 19:17:39	kuribas	now: Error: List elements should all have the same type
2021-09-20 19:21:00	kuribas	ah, missing a field...
2021-09-20 19:21:35	→	kenran has joined #haskell
2021-09-20 19:21:59	→	cfricke has joined #haskell
2021-09-20 19:23:30	←	jollygood2 has quit (Quit: http://www.okay.uz/ (Ping timeout))
2021-09-20 19:27:59	→	tromp has joined #haskell
2021-09-20 19:29:03	←	fendor_ has quit (Remote host closed the connection)
2021-09-20 19:33:49	→	kimjetwav has joined #haskell
2021-09-20 19:36:03	←	jpds has quit (Ping timeout: 276 seconds)
2021-09-20 19:38:14	→	Brumaire has joined #haskell
2021-09-20 19:40:49	→	jpds has joined #haskell
2021-09-20 19:42:03	→	shapr has joined #haskell
2021-09-20 19:42:10	←	jstolarek has quit (Ping timeout: 240 seconds)
2021-09-20 19:43:16	←	lambdabot has quit (Remote host closed the connection)
2021-09-20 19:43:54	→	Null_A has joined #haskell
2021-09-20 19:44:00	→	lambdabot has joined #haskell
2021-09-20 19:44:01	←	lambdabot has quit (Changing host)
2021-09-20 19:44:01	→	lambdabot has joined #haskell
2021-09-20 19:45:16	→	shriekingnoise has joined #haskell
2021-09-20 19:45:50	→	yauhsien has joined #haskell
2021-09-20 19:47:28	→	hnOsmium0001 has joined #haskell
2021-09-20 19:48:34	←	nvmd has quit (Ping timeout: 252 seconds)
2021-09-20 19:48:40	←	Null_A has quit (Ping timeout: 264 seconds)
2021-09-20 19:50:07	←	yauhsien has quit (Ping timeout: 246 seconds)
2021-09-20 19:50:56	→	chris has joined #haskell
2021-09-20 19:50:59	ℹ	chris is now known as Guest1557
2021-09-20 19:52:00	→	zebrag has joined #haskell
2021-09-20 19:53:20	→	alzgh has joined #haskell
2021-09-20 19:55:00	→	Sgeo has joined #haskell
2021-09-20 20:02:05	→	cuz has joined #haskell
2021-09-20 20:06:24	←	lambdabot has quit (Remote host closed the connection)
2021-09-20 20:06:51	→	lambdabot has joined #haskell
2021-09-20 20:06:52	←	lambdabot has quit (Changing host)
2021-09-20 20:06:52	→	lambdabot has joined #haskell
2021-09-20 20:07:02	←	finsternis has quit (Ping timeout: 250 seconds)
2021-09-20 20:08:04	←	pavonia has quit (Quit: Bye!)
2021-09-20 20:09:41	dsal	I was really hoping to like dhall, but I've not been successful at that yet.
2021-09-20 20:10:49	→	hiruji` has joined #haskell
2021-09-20 20:12:45	→	ec has joined #haskell
2021-09-20 20:13:02	←	hiruji has quit (Ping timeout: 260 seconds)
2021-09-20 20:19:10	←	cfricke has quit (Ping timeout: 246 seconds)
2021-09-20 20:20:45	→	mikoto-chan has joined #haskell
2021-09-20 20:21:07	←	mikoto-chan has quit (Client Quit)
2021-09-20 20:21:21	→	mikoto-chan has joined #haskell
2021-09-20 20:22:55	→	kayvank has joined #haskell
2021-09-20 20:23:08	←	mikolaj_ has quit (Quit: leaving)
2021-09-20 20:23:18	←	cheater has quit (Ping timeout: 260 seconds)
2021-09-20 20:24:31	←	mikolaj has quit (Quit: leaving)
2021-09-20 20:26:37	→	cheater has joined #haskell
2021-09-20 20:28:48	→	lbseale has joined #haskell
2021-09-20 20:29:51	←	[itchyjunk] has quit (Quit: Leaving)
2021-09-20 20:31:27	←	vgtw has quit (Ping timeout: 240 seconds)
2021-09-20 20:31:56	→	vgtw has joined #haskell
2021-09-20 20:32:42	→	cfricke has joined #haskell
2021-09-20 20:33:00	←	cfricke has quit (Client Quit)
2021-09-20 20:34:56	→	doyougnu has joined #haskell
2021-09-20 20:35:28	←	vgtw has quit (Client Quit)
2021-09-20 20:35:51	←	ec has quit (Ping timeout: 276 seconds)
2021-09-20 20:38:02	←	neurocyte013 has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-20 20:38:03	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-20 20:38:43	→	MQ-17J has joined #haskell
2021-09-20 20:38:46	→	ec has joined #haskell
2021-09-20 20:39:07	←	wroathe has quit (Ping timeout: 246 seconds)
2021-09-20 20:45:43	ℹ	irc: disconnected from server
2021-09-20 20:46:02	→	oxide has joined #haskell
2021-09-20 20:46:02	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-20 20:46:02	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-20 20:46:02	ℹ	Channel #haskell: 732 nicks (1 op, 0 voices, 731 normals)
2021-09-20 20:46:03	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-20 20:47:23	Ollie[m]	As long as it does eventually flush even if my program is hung, I'd be happy
2021-09-20 20:47:29	Ollie[m]	(guess what I'm debugging...)
2021-09-20 20:48:49	←	hendursa1 has quit (Quit: hendursa1)
2021-09-20 20:48:53	geekosaur	depends on how the program is hung, I'd guess
2021-09-20 20:49:16	→	hendursaga has joined #haskell
2021-09-20 20:49:41	Ollie[m]	I was hoping it wouldn't (e.g., being stuck on taking an MVar would still cause a flush to eventually happen)
2021-09-20 20:49:44	Ollie[m]	But I can just try that and see
2021-09-20 20:50:08	geekosaur	right, but if it's stuck in e.g. a loop that doesn't allocate, it's unlikely to ever flush
2021-09-20 20:56:05	←	int-e has quit (Remote host closed the connection)
2021-09-20 20:56:36	→	eggplantade has joined #haskell
2021-09-20 20:57:01	→	int-e has joined #haskell
2021-09-20 20:57:42	→	neurocyte013 has joined #haskell
2021-09-20 20:57:43	←	neurocyte013 has quit (Changing host)
2021-09-20 20:57:43	→	neurocyte013 has joined #haskell
2021-09-20 20:57:44	←	neurocyte013 has quit (Client Quit)
2021-09-20 20:58:43	→	neurocyte013 has joined #haskell
2021-09-20 20:58:43	←	neurocyte013 has quit (Changing host)
2021-09-20 20:58:43	→	neurocyte013 has joined #haskell
2021-09-20 20:59:32	→	Null_A has joined #haskell
2021-09-20 21:01:16	←	eggplantade has quit (Ping timeout: 264 seconds)
2021-09-20 21:02:09	←	pretty_dumm_guy has quit (Ping timeout: 265 seconds)
2021-09-20 21:03:14	→	flouflou has joined #haskell
2021-09-20 21:03:19	→	pretty_dumm_guy has joined #haskell
2021-09-20 21:03:45	←	natechan has quit (Ping timeout: 252 seconds)
2021-09-20 21:03:56	→	neightchan has joined #haskell
2021-09-20 21:06:59	←	mikoto-chan has quit (Ping timeout: 265 seconds)
2021-09-20 21:08:55	→	mikoto-chan has joined #haskell
2021-09-20 21:09:46	←	lortabac has quit (Quit: WeeChat 2.8)
2021-09-20 21:15:21	→	favonia has joined #haskell
2021-09-20 21:17:10	←	leah2 has quit (Remote host closed the connection)
2021-09-20 21:17:28	→	leah2 has joined #haskell
2021-09-20 21:21:55	←	Brumaire has quit (Ping timeout: 252 seconds)
2021-09-20 21:22:07	←	gehmehgeh has quit (Quit: Leaving)
2021-09-20 21:22:14	→	eggplantade has joined #haskell
2021-09-20 21:30:11	←	neurocyte013 has quit (Ping timeout: 265 seconds)
2021-09-20 21:32:01	←	zaquest has quit (Remote host closed the connection)
2021-09-20 21:36:52	←	merijn has quit (Ping timeout: 246 seconds)
2021-09-20 21:38:02	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-20 21:39:25	→	dyeplexer has joined #haskell
2021-09-20 21:39:45	→	tzh has joined #haskell
2021-09-20 21:50:43	→	nfd has joined #haskell
2021-09-20 21:53:14	←	Guest1557 has quit (Remote host closed the connection)
2021-09-20 21:53:24	←	wei2912 has quit (Quit: Lost terminal)
2021-09-20 21:54:38	→	argento has joined #haskell
2021-09-20 21:55:10	→	vgtw has joined #haskell
2021-09-20 21:58:57	→	zaquest has joined #haskell
2021-09-20 21:59:00	←	dschrempf has quit (Quit: WeeChat 3.2.1)
2021-09-20 22:00:22	→	chris has joined #haskell
2021-09-20 22:00:23	ℹ	chris is now known as Guest8687
2021-09-20 22:00:40	←	mikoto-chan has quit (Ping timeout: 264 seconds)
2021-09-20 22:02:12	→	mikoto-chan has joined #haskell
2021-09-20 22:04:52	←	Guest8687 has quit (Ping timeout: 264 seconds)
2021-09-20 22:06:12	→	merijn has joined #haskell
2021-09-20 22:06:21	←	lbseale has quit (Read error: Connection reset by peer)
2021-09-20 22:06:54	→	lbseale has joined #haskell
2021-09-20 22:07:30	←	lbseale has quit (Read error: Connection reset by peer)
2021-09-20 22:08:46	←	mikoto-chan has quit (Ping timeout: 260 seconds)
2021-09-20 22:08:59	→	lbseale has joined #haskell
2021-09-20 22:11:16	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-20 22:11:35	→	mikoto-chan has joined #haskell
2021-09-20 22:12:15	→	tromp has joined #haskell
2021-09-20 22:14:23	←	arjun has quit (Remote host closed the connection)
2021-09-20 22:14:32	→	wroathe has joined #haskell
2021-09-20 22:14:33	←	wroathe has quit (Changing host)
2021-09-20 22:14:33	→	wroathe has joined #haskell
2021-09-20 22:15:29	→	k`` has joined #haskell
2021-09-20 22:18:04	k``	I have a philosophical question. Say there was an instance of Control.Lens.At.At for `Proxy` . Would type Index (Proxy a) = a, and type IxVal (Proxy a) = Void? Or would they both be Void?
2021-09-20 22:18:58	←	vgtw has quit (Quit: ZNC - https://znc.in)
2021-09-20 22:20:16	←	hsiktas has quit (Quit: Connection closed for inactivity)
2021-09-20 22:20:49	int-e	k``: shouldn't the index (domain) be Void regardless? Which gives you a choice for the IxVal (codomain)...
2021-09-20 22:23:14	→	vgtw has joined #haskell
2021-09-20 22:23:51	←	argento has quit (Quit: leaving)
2021-09-20 22:24:28	k``	Hmm. Say you have `data Void1 a` (EmptyDecl). Seems like in this case the Index is forced to be `Void` , and the IxVal can be `a`. I was thinking for some reason that `Proxy` and `Void1` would have their domains and codomains flipped.
2021-09-20 22:26:59	k``	Like `Proxy` and that `Void1` are like terminal and initial objects? But maybe that's a canard.
2021-09-20 22:27:52	k``	Or, rather, arrows, not objects.
2021-09-20 22:28:01	→	neurocyte013 has joined #haskell
2021-09-20 22:28:01	←	neurocyte013 has quit (Changing host)
2021-09-20 22:28:01	→	neurocyte013 has joined #haskell
2021-09-20 22:32:24	←	raehik has quit (Quit: WeeChat 3.2)
2021-09-20 22:32:24	←	xsperry has quit (Ping timeout: 268 seconds)
2021-09-20 22:32:46	→	raehik has joined #haskell
2021-09-20 22:33:27	←	chele has quit (Remote host closed the connection)
2021-09-20 22:34:16	←	azeem has quit (Ping timeout: 264 seconds)
2021-09-20 22:34:21	←	Everything has left #haskell
2021-09-20 22:35:15	→	azeem has joined #haskell
2021-09-20 22:35:53	nshepperd2	i think it's the other way around
2021-09-20 22:37:18	nshepperd2	Void1 can be considered a map of anything to anything, for the purposes of At, because one can't exist
2021-09-20 22:38:29	nshepperd2	Proxy can only be considered an empty map (ie. the domain is Void) because it exists but can't carry any information
2021-09-20 22:42:16	k``	So, rephrased again, `Proxy a` holds a value of `a` at exactly 0 positions? That does make more sense.
2021-09-20 22:42:16	k``	 
2021-09-20 22:44:08	k``	And `Void1 a` is `Void` at all positions `a` ?
2021-09-20 22:47:56	←	eggplantade has quit (Remote host closed the connection)
2021-09-20 22:48:33	→	tomjones has joined #haskell
2021-09-20 22:48:33	tomjones	l
2021-09-20 22:49:34	tomjones	Hi. I have a question regarding pretty printing, namely removing quotes when printing a list of strings: example https://pastebin.com/giUPEw82
2021-09-20 22:49:50	←	nschoe has quit (Ping timeout: 260 seconds)
2021-09-20 22:50:10	←	burnsidesLlama has quit (Remote host closed the connection)
2021-09-20 22:50:39	→	eggplantade has joined #haskell
2021-09-20 22:52:06	→	Tuplanolla has joined #haskell
2021-09-20 22:52:07	←	kimjetwav has quit (Read error: Connection reset by peer)
2021-09-20 22:53:39	monochrom	So don't use show.
2021-09-20 22:54:24	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-20 22:57:40	k``	tomjaguarpaw: More specifically, `foldMap prettypri`
2021-09-20 22:57:44	→	tromp has joined #haskell
2021-09-20 22:58:01	k``	Oh sorry, you want it to show as a list?
2021-09-20 22:59:36	tomjones	Correct, I want it to show as a list
2021-09-20 23:01:57	→	lavaman has joined #haskell
2021-09-20 23:03:39	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-20 23:06:46	←	vaucouleur has quit (Read error: Connection reset by peer)
2021-09-20 23:06:55	tomsmeding	there is showList__: https://hackage.haskell.org/package/base-4.15.0.0/docs/GHC-Show.html#v:showList__
2021-09-20 23:07:07	tomsmeding	I have _no_ idea why that has a double-underscore suffix
2021-09-20 23:07:55	tomsmeding	apparently before base 4.13 it was showListWith, now it's showList__ ?
2021-09-20 23:08:43	→	slac54110 has joined #haskell
2021-09-20 23:08:56	tomsmeding	oh I'm stupid. The Show class has a showList function that shows a list of the things, so that showList__ function clearly cannot also be called showList.
2021-09-20 23:09:13	→	MQ-17J has joined #haskell
2021-09-20 23:09:15	⚡	tomsmeding wonders why it was renamed to this stupid name
2021-09-20 23:10:18	monochrom	intended-for-internal-use functions usually don't get the best names.
2021-09-20 23:10:50	→	chris has joined #haskell
2021-09-20 23:10:52	←	slack1256 has quit (Ping timeout: 264 seconds)
2021-09-20 23:10:54	ℹ	chris is now known as Guest8631
2021-09-20 23:10:58	monochrom	Given that good names are a scarcity, it is probably wise, leave the scarce good names for things more people use.
2021-09-20 23:11:40	←	kuribas has quit (Quit: ERC (IRC client for Emacs 26.3))
2021-09-20 23:12:09	→	Brumaire has joined #haskell
2021-09-20 23:12:19	k``	Ah, the joys of designing APIs for unqualified import.
2021-09-20 23:12:46	←	kayvank has quit (Ping timeout: 246 seconds)
2021-09-20 23:13:01	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-20 23:15:13	←	Guest8631 has quit (Ping timeout: 246 seconds)
2021-09-20 23:15:27	dminuoso	tomsmeding: You'll have to ask Simon, it was from his first cut of the GHC base libraries back from 2001.
2021-09-20 23:15:32	dminuoso	The Marlow one.
2021-09-20 23:15:40	←	xff0x has quit (Ping timeout: 264 seconds)
2021-09-20 23:15:59	→	xff0x has joined #haskell
2021-09-20 23:15:59	→	Lycurgus has joined #haskell
2021-09-20 23:16:26	monochrom	I wouldn't be surprised if it's "It's already 3AM, that's why"
2021-09-20 23:16:31	←	rond_ has quit (Quit: Client closed)
2021-09-20 23:16:43	dminuoso	well, there were quite a few functions suffixed with double underscore 
2021-09-20 23:16:45	dminuoso	In that commit
2021-09-20 23:16:54	⚡	tomsmeding is stupid
2021-09-20 23:17:08	tomsmeding	the real function you should use is in Text.Show, namely showListWith, not in GHC.Show
2021-09-20 23:17:19	dminuoso	readRational__, readList__, there was also Handle__
2021-09-20 23:17:23	monochrom	I myself, when writing code to show in lecture, would do that.  "I should check the return value of write(), but it's already 3AM so meh"
2021-09-20 23:17:28	tomsmeding	somehow I didn't see showListWith in the hackage search thing for newer base versions
2021-09-20 23:17:31	dminuoso	Perhaps these were identifiers intended to be used internally
2021-09-20 23:17:56	monochrom	My students saw that and commented "can relate" :)
2021-09-20 23:17:59	dminuoso	+readRational__ :: String -> Rational -- we export this one (non-std)
2021-09-20 23:18:00	tomsmeding	tomjones: use showListWith from Text.Show
2021-09-20 23:18:08	dminuoso	monochrom: heh. :)
2021-09-20 23:18:40	tomsmeding	:t showListWith showString
2021-09-20 23:18:41	lambdabot	error:
2021-09-20 23:18:41	lambdabot	    • Variable not in scope: showListWith :: (String -> ShowS) -> t
2021-09-20 23:18:41	lambdabot	    • Perhaps you meant one of these:
2021-09-20 23:18:47	tomsmeding	@import Text.Show
2021-09-20 23:18:47	lambdabot	Unknown command, try @list
2021-09-20 23:18:51	tomsmeding	% import Text.Show
2021-09-20 23:18:52	yahb	tomsmeding: 
2021-09-20 23:18:55	tomsmeding	% :t showListWith showString
2021-09-20 23:18:56	yahb	tomsmeding: [String] -> ShowS
2021-09-20 23:19:11	tomsmeding	% :t ($ "") . showListWith showString
2021-09-20 23:19:12	yahb	tomsmeding: [String] -> String
2021-09-20 23:19:30	alexfmpe[m]	does Data.Time.Format provide some way to output day of month with ordinal suffix ?
2021-09-20 23:19:36	dminuoso	But sometimes you dont even remember yourself why. A while ago I reverted my own commit that made absolute no sense, it seemed completely superfluous, even the comments didn't help me explain why I wrote that (3 months earlier).
2021-09-20 23:19:44	dminuoso	Last week we learned why.
2021-09-20 23:20:24	tomsmeding	dminuoso: sounds like a good story
2021-09-20 23:21:01	dminuoso	Sadly it's very domain specific, so it wouldn't make for a fun story as the intersection of Cumulux VXLAN experts and Haskellers is extraordinarily small.
2021-09-20 23:21:23	tomsmeding	sad
2021-09-20 23:21:40	dminuoso	Yeah, I have a whole bag of such fun stories that I will probably take into my grave. :(
2021-09-20 23:22:24	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-20 23:22:52	tomsmeding	alexfmpe[m]: doesn't seem like it
2021-09-20 23:22:52	←	wroathe has quit (Ping timeout: 264 seconds)
2021-09-20 23:23:27	←	dhouthoo has quit (Quit: WeeChat 3.2)
2021-09-20 23:23:30	geekosaur	we had something similar in xmonad the other day, we wondered why some operation did things the slow exponential way and fixed it, and the Tabbed layout broke because it depended on things being updated as it went
2021-09-20 23:23:49	←	Xe has quit (Ping timeout: 268 seconds)
2021-09-20 23:23:59	alexfmpe[m]	madness
2021-09-20 23:24:23	→	Xe has joined #haskell
2021-09-20 23:26:01	orzo	IORef has pointer-comparision identity.  Is there a way i can show that identity for debugging like printf("%p") in C?
2021-09-20 23:29:28	←	geekosaur has quit (Ping timeout: 264 seconds)
2021-09-20 23:30:14	k``	geekosaur: Ugh, yes sorry about that.
2021-09-20 23:30:30	→	geekosaur has joined #haskell
2021-09-20 23:31:09	←	mousey has quit (Remote host closed the connection)
2021-09-20 23:31:18	→	mousey has joined #haskell
2021-09-20 23:32:38	←	waleee has quit (Quit: WeeChat 3.2.1)
2021-09-20 23:32:42	→	_ht has joined #haskell
2021-09-20 23:36:16	←	enick_736 has quit (Quit: Bridge terminating on SIGTERM)
2021-09-20 23:38:48	→	jstolarek has joined #haskell
2021-09-20 23:39:29	→	wroathe has joined #haskell
2021-09-20 23:39:30	←	wroathe has quit (Changing host)
2021-09-20 23:39:30	→	wroathe has joined #haskell
2021-09-20 23:39:51	Cale	orzo: I was going to say "maybe if you tear the thing apart", but it seems like the MutVar# primitive type in GHC doesn't really support any more operations that'd let you do that. Equality goes via sameMutVar# :: MutVar# d a -> MutVar# d a -> Int#
2021-09-20 23:40:10	→	burnsidesLlama has joined #haskell
2021-09-20 23:40:37	→	talismanick has joined #haskell
2021-09-20 23:43:55	←	wroathe has quit (Ping timeout: 246 seconds)
2021-09-20 23:44:19	monochrom	Probably the address keeps getting moved by GC so they don't bother expose it.
2021-09-20 23:44:55	←	neurocyte013 has quit (Ping timeout: 252 seconds)
2021-09-20 23:45:40	←	burnsidesLlama has quit (Ping timeout: 246 seconds)
2021-09-20 23:47:04	←	pretty_dumm_guy has quit (Ping timeout: 246 seconds)
2021-09-20 23:48:12	→	pretty_dumm_guy has joined #haskell
2021-09-20 23:49:08	→	neurocyte013 has joined #haskell
2021-09-20 23:49:08	←	neurocyte013 has quit (Changing host)
2021-09-20 23:49:08	→	neurocyte013 has joined #haskell
2021-09-20 23:50:05	→	nvmd has joined #haskell
2021-09-20 23:53:43	←	vgtw has quit (Ping timeout: 246 seconds)
2021-09-20 23:54:40	←	max22- has quit (Ping timeout: 264 seconds)
2021-09-20 23:57:15	→	vgtw has joined #haskell
2021-09-20 23:57:38	→	tromp has joined #haskell
2021-09-20 23:59:35	→	burnsidesLlama has joined #haskell
2021-09-21 00:00:38	→	vgtw_ has joined #haskell
2021-09-21 00:00:47	→	Guest72 has joined #haskell
2021-09-21 00:01:52	←	vgtw has quit (Ping timeout: 264 seconds)
2021-09-21 00:02:28	←	dyeplexer has quit (Ping timeout: 264 seconds)
2021-09-21 00:02:38	←	favonia has quit (Ping timeout: 260 seconds)
2021-09-21 00:02:38	→	waleee has joined #haskell
2021-09-21 00:02:53	←	motherfsck has quit (Quit: quit)
2021-09-21 00:03:33	Guest72	I have a doubt regarding foldl and foldr. If I we do  foldl (+) 0 xs I can understand that expressions get accumulated because of lazy evaluation. But what I don't get is that if we do foldr (+) 0 [1..10]
2021-09-21 00:04:02	←	renzhi has quit (Ping timeout: 260 seconds)
2021-09-21 00:04:17	Guest72	by definition of foldr there is a whole expression (1+(2+ ...(10+0) ...) in the memory
2021-09-21 00:04:37	Guest72	so wont that also cause memory problem
2021-09-21 00:04:40	→	motherfsck has joined #haskell
2021-09-21 00:04:52	←	lavaman has quit (Ping timeout: 264 seconds)
2021-09-21 00:05:27	c_wraith	most notably, that will cause stack problems
2021-09-21 00:05:34	maerwald	yes
2021-09-21 00:06:07	←	talismanick has quit (Read error: Connection reset by peer)
2021-09-21 00:06:17	c_wraith	but unlike foldl, it won't create a giant think first! it'll just go directly to excessive stack use.
2021-09-21 00:06:22	k``	Guest72: Yeah, the `foldr` expression generates a lot of thunks before evaluating, though it won't fail with recent GHC versions that can grow the stack basically without limit.
2021-09-21 00:06:23	c_wraith	*thunk
2021-09-21 00:06:58	k``	*sorry, meant stack use rather than thunks.
2021-09-21 00:07:04	→	merijn has joined #haskell
2021-09-21 00:07:09	←	slac54110 has quit (Remote host closed the connection)
2021-09-21 00:07:19	Guest72	I dont see the difference
2021-09-21 00:07:27	c_wraith	they're both bad
2021-09-21 00:07:40	c_wraith	the difference is technical and mostly unimportant
2021-09-21 00:07:49	tomsmeding	@src foldr
2021-09-21 00:07:49	lambdabot	foldr f z []     = z
2021-09-21 00:07:49	lambdabot	foldr f z (x:xs) = f x (foldr f z xs)
2021-09-21 00:07:51	tomsmeding	@src foldl
2021-09-21 00:07:51	lambdabot	foldl f z []     = z
2021-09-21 00:07:51	lambdabot	foldl f z (x:xs) = foldl f (f z x) xs
2021-09-21 00:08:02	k``	In practice, GHC can turn the `foldl` version into a tight, strict loop. So that matters.
2021-09-21 00:08:30	tomsmeding	if you evaluate 'foldr (+) 0 [1..5]', in one step that simplifies to '1 + foldr (+) 0 [2..5]'
2021-09-21 00:08:39	c_wraith	I wouldn't trust it to. I'd just use foldl' and forget foldl exists
2021-09-21 00:08:44	tomsmeding	so you recurse into the foldr, remembering the 1
2021-09-21 00:09:19	tomsmeding	if, on the other hand, you evalate 'foldl (+) 0 [1..5]', in one step that simplifies to 'foldl (+) (0 + 1) [2..5]'
2021-09-21 00:09:32	→	slack1256 has joined #haskell
2021-09-21 00:09:33	tomsmeding	so you have to remember this whole subcomputation "0 + 1"
2021-09-21 00:10:07	tomsmeding	remembering "1" is just pushing the value on the stack, which is relatively cheap (using foldl' would be much better still, of course)
2021-09-21 00:10:11	←	motherfsck has quit (Remote host closed the connection)
2021-09-21 00:10:33	tomsmeding	but remembering "0 + 1" means that you have to allocate an (unevaluated) thunk on the heap
2021-09-21 00:11:13	←	jstolarek has quit (Ping timeout: 246 seconds)
2021-09-21 00:11:14	tomsmeding	Guest72: it's both bad in this case (use foldl' here, it's much better for summing integers), but as c_wraith says, foldl is just a bit worse than foldr here due to technical reasons
2021-09-21 00:11:38	Guest72	why is it not pushed to the stack in the case of foldl
2021-09-21 00:11:53	→	talismanick has joined #haskell
2021-09-21 00:12:00	←	talismanick has quit (Client Quit)
2021-09-21 00:12:05	tomsmeding	(with foldl', the "f z x" -- that is, 0 + 1 in the first step -- is evaluated immediately to 1, which is then passed on directly as an argument: no stack usage at all!)
2021-09-21 00:12:28	tomsmeding	Guest72: because of technical details about how the GHC runtime system works :p
2021-09-21 00:12:42	→	chris has joined #haskell
2021-09-21 00:12:45	ℹ	chris is now known as Guest8455
2021-09-21 00:12:53	tomsmeding	(something with the STG machine)
2021-09-21 00:13:09	→	talismanick has joined #haskell
2021-09-21 00:13:10	←	talismanick has quit (Remote host closed the connection)
2021-09-21 00:13:34	dminuoso	We named them foldl and foldl' as a way of filtering out unfit developers without stress tolerance "Why is there no foresight in this library design".
2021-09-21 00:13:46	dminuoso	Morally debatable darwinism.
2021-09-21 00:13:47	tomsmeding	the intuitive difference is that when you evaluate 'foldl', you're not yet sure whether you're actually going to use that "f z x" in the end, so it has to be kept unevaluated because Haskell is lazy
2021-09-21 00:13:48	←	Guest8455 has quit (Remote host closed the connection)
2021-09-21 00:13:59	tomsmeding	dminuoso: heh
2021-09-21 00:15:54	→	renzhi has joined #haskell
2021-09-21 00:16:54	Guest72	ok
2021-09-21 00:17:06	←	hololeap has quit (Remote host closed the connection)
2021-09-21 00:17:14	←	vgtw_ has quit (Quit: ZNC - https://znc.in)
2021-09-21 00:17:19	tomsmeding	Guest72: ah, you said: "by definition of foldr there is a whole expression (1+(2+ ...(10+0) ...) in the memory"
2021-09-21 00:17:21	Guest72	IT foldr has problems, why is many functions implemented in terms of it
2021-09-21 00:17:32	dminuoso	foldr has no problem, it's just a different tool
2021-09-21 00:17:47	tomsmeding	no, in fact, due to the mentioned technical details, there will just be the values 1, 2, ..., 10 on the stack, not the whole expression as a series of thunks in memory :)
2021-09-21 00:17:49	dminuoso	foldr is, conceptually, a way to transform a list 
2021-09-21 00:17:55	dminuoso	foldl' is, conceptually, a loop.
2021-09-21 00:17:57	k``	Lazily `foldl` on a map to start with the larger keys seems legit?
2021-09-21 00:18:36	dminuoso	If you want to accumulate the sum, you'd do this with loop-semantics, rather than turning your list into a call-structure that resembles the initial list and then force that..
2021-09-21 00:18:58	dminuoso	The annoying thing is that the names of `foldr` and `foldl'` suggest they're similar/related - but their purposes are very unrelated.
2021-09-21 00:19:14	monochrom	foldr (+) is a memory hog in both lazy and eager evaluation. No one disputes that.
2021-09-21 00:19:17	tomsmeding	(it's just the implementations that are related)
2021-09-21 00:19:28	monochrom	But foldr (||) is th interesting one.
2021-09-21 00:20:30	ℹ	irc: disconnected from server
2021-09-21 16:00:05	→	oxide has joined #haskell
2021-09-21 16:00:05	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-21 16:00:05	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-21 16:00:05	ℹ	Channel #haskell: 709 nicks (1 op, 0 voices, 708 normals)
2021-09-21 16:00:05	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-21 16:03:40	←	merijn has quit (Ping timeout: 264 seconds)
2021-09-21 16:04:47	→	merijn has joined #haskell
2021-09-21 16:04:49	←	totbwf__ has quit (Quit: Connection closed for inactivity)
2021-09-21 16:08:05	←	econo has quit (Quit: Connection closed for inactivity)
2021-09-21 16:08:25	←	bastelfreak has quit (Quit: WeeChat 3.3)
2021-09-21 16:08:41	→	bastelfreak has joined #haskell
2021-09-21 16:09:09	→	cfricke has joined #haskell
2021-09-21 16:10:16	←	merijn has quit (Ping timeout: 264 seconds)
2021-09-21 16:10:26	→	merijn has joined #haskell
2021-09-21 16:20:28	←	merijn has quit (Ping timeout: 264 seconds)
2021-09-21 16:22:03	→	merijn has joined #haskell
2021-09-21 16:23:10	←	neo1 has quit (Ping timeout: 246 seconds)
2021-09-21 16:24:39	ldlework	Is Monoid a (logical) superclass of Foldable?
2021-09-21 16:25:32	Las[m]	No
2021-09-21 16:25:44	dminuoso	They have different kinds, in fact.
2021-09-21 16:25:46	dminuoso	% :k Foldable
2021-09-21 16:25:46	yahb	dminuoso: (* -> *) -> Constraint
2021-09-21 16:25:47	Las[m]	They don't have the same kind first of all
2021-09-21 16:25:48	dminuoso	% :k Monoid
2021-09-21 16:25:49	yahb	dminuoso: * -> Constraint
2021-09-21 16:26:18	dminuoso	Though there is a sort of relationship.
2021-09-21 16:26:40	ldlework	in https://wiki.haskell.org/wikiupload/d/df/Typeclassopedia-diagram.png what are the dashed lines indicating
2021-09-21 16:26:45	dminuoso	% :t toList
2021-09-21 16:26:45	yahb	dminuoso: Foldable t => t a -> [a]
2021-09-21 16:26:52	ldlework	is it that functions of the typeclass use the other typeclass?
2021-09-21 16:26:59	dminuoso	We can think this function as the spiritual embodiment of Foldable
2021-09-21 16:27:09	dminuoso	And with some squinting we can think of lists as free monoids.
2021-09-21 16:27:18	dminuoso	Is that perhaps the relationship you're after?
2021-09-21 16:27:37	ldlework	dminuoso: I was just observing that some of Foldable's functions take Monoids
2021-09-21 16:27:44	dminuoso	Yes, it's a good observation.
2021-09-21 16:27:55	ldlework	fold :: Monoid m => t m -> m
2021-09-21 16:28:04	ldlework	So I was thinking of including a relation in my graph for that
2021-09-21 16:28:28	dminuoso	There's no straight relationship like that.
2021-09-21 16:28:51	ldlework	straight relationship?
2021-09-21 16:29:26	dminuoso	The best I can see is what I outlined earlier, thinking of `toList` as the (conceptual) characteristic method of Foldable, and thinking of a list as the free monoid.
2021-09-21 16:29:33	ldlework	I wonder if I should include each typeclasses' kind in the graph
2021-09-21 16:29:53	ldlework	dminuoso: what do you mean by "free" in "free monoid"
2021-09-21 16:30:10	←	Chai-T-Rex has quit (Remote host closed the connection)
2021-09-21 16:30:21	dminuoso	"free" as in "without any extra luggage"
2021-09-21 16:30:32	dminuoso	unrestricted/free
2021-09-21 16:30:37	dminuoso	It's a term originating from math
2021-09-21 16:30:40	→	Chai-T-Rex has joined #haskell
2021-09-21 16:30:57	→	alx741 has joined #haskell
2021-09-21 16:32:28	←	merijn has quit (Ping timeout: 264 seconds)
2021-09-21 16:32:29	ldlework	dminuoso: would extra luggage be in the Semigroup direction, or the opposite direction of some other hypothetical  typeclass that's a subclass of Monoid
2021-09-21 16:32:40	ldlework	The latter right?
2021-09-21 16:32:53	dminuoso	If you really want to know the gory details we'd have to dive a bit into category theory.
2021-09-21 16:33:05	dminuoso	Let me try and think of a handwaving way to explain this
2021-09-21 16:33:38	→	merijn has joined #haskell
2021-09-21 16:33:57	ldlework	dminuoso: I have a category theory friend, and he can explain how a car works by simplifying it down and using metaphors, but he cannot explain category theory without using jargon / using metaphors ^_^
2021-09-21 16:34:00	dminuoso	A `free something` is the bare essential `something` that satisfies its laws, but nothing extra.
2021-09-21 16:34:34	dminuoso	A handwaving, perhaps suggestive way, is to think of a list as representing the mere monoidal structure
2021-09-21 16:34:53	ldlework	dminuoso: so a Semigroup would be a `degenerate monoid`, a monoid would be a `free monoid` and something who's superclass was Monoid would be a `restricted monoid` ?
2021-09-21 16:35:02	dminuoso	No rather
2021-09-21 16:35:12	dminuoso	Take the monoid of natural numbers under addition
2021-09-21 16:35:18	ldlework	Right
2021-09-21 16:35:35	ldlework	Semigroup of natural numbers + 0 for identity
2021-09-21 16:35:42	dminuoso	The monoid encompasses not just the operation (+) and its identity (0), but also the entirety of all elements.
2021-09-21 16:35:54	ldlework	the "domain"
2021-09-21 16:36:00	→	eggplantade has joined #haskell
2021-09-21 16:36:07	dminuoso	In category theory there's a lot of structure simply because we cant just ignore those numbers.
2021-09-21 16:36:27	→	jespada has joined #haskell
2021-09-21 16:36:55	dminuoso	So we have these constructions in category theory that allow us to "forget structure", so if we forget as much about this monoid as possible, while still satisfying the monoidal laws
2021-09-21 16:37:24	dminuoso	Sorry no that is wrong
2021-09-21 16:37:26	dminuoso	So
2021-09-21 16:37:47	dminuoso	ldlework: imagine a transformation from the naturals under addition to just the set of naturals.
2021-09-21 16:37:59	dminuoso	ldlework: Notice how such a transformation would essentially "forget" about all the monoidal structure?
2021-09-21 16:38:12	ldlework	dminuoso: It's like how a Monoid is a "restricted semigroup" since it is the "Semigroup with extra baggage" (identity), no?
2021-09-21 16:38:32	dminuoso	Yes, absolutely.
2021-09-21 16:38:42	dminuoso	But for this purpose, we intend to forget the entirety of the monoidal structure
2021-09-21 16:38:43	dminuoso	not just the identity
2021-09-21 16:38:58	ldlework	so the semigroup bits too
2021-09-21 16:39:01	dminuoso	Yes.
2021-09-21 16:39:04	←	merijn has quit (Ping timeout: 264 seconds)
2021-09-21 16:39:07	dminuoso	Everything but the carrier set
2021-09-21 16:39:11	ldlework	why are we forgetting structure? I lost the thread.
2021-09-21 16:39:18	dminuoso	Dont worry about the details of why we do this.
2021-09-21 16:39:23	ldlework	XD
2021-09-21 16:39:40	dminuoso	We can make a construction, called a functor, that does this with any monoid
2021-09-21 16:39:41	→	merijn has joined #haskell
2021-09-21 16:39:53	dminuoso	So given a particular monoid, it just strips away the monoidal structure and gives you back the carrier set
2021-09-21 16:40:11	ldlework	well if you fmap'd id into the monoid
2021-09-21 16:40:12	ldlework	right
2021-09-21 16:40:21	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-21 16:40:40	dminuoso	Note that the "functor" is a different functor from our Haskell thing. A functor is just a way to transform one category into another. In our case, the category of monoids to the category of sets.
2021-09-21 16:40:44	ldlework	that would extract whatever is inside the structure
2021-09-21 16:40:51	ldlework	mm
2021-09-21 16:40:57	dminuoso	And we can also construct another functor in the other direction
2021-09-21 16:41:07	dminuoso	That is intrinsically related
2021-09-21 16:41:16	dminuoso	To the former functor (called the forgetful functor)
2021-09-21 16:41:17	ldlework	Now you have a Groupoid right
2021-09-21 16:41:24	ldlework	Since each morphism is an isomorphism
2021-09-21 16:41:25	dminuoso	Well the question is what does that functor even do
2021-09-21 16:41:31	dminuoso	So what we do is this:
2021-09-21 16:41:41	→	yauhsien has joined #haskell
2021-09-21 16:41:56	dminuoso	That functor maps a given set to the monoid [a], under which the unit is [] and the binary operation is ++
2021-09-21 16:42:00	dminuoso	It can map *every* set this way
2021-09-21 16:42:16	dminuoso	It turns out that these two functors have a deep relationship
2021-09-21 16:42:44	ldlework	you're basically just saying
2021-09-21 16:42:48	ldlework	you can put things into a list
2021-09-21 16:42:50	dminuoso	The former is called a forgetful functor (forgetting monoidal structure), the latter is called a free functor (adding the *bare* monoidal structure back, with no extra baggage)
2021-09-21 16:42:54	ldlework	and we can do list concatenation
2021-09-21 16:43:07	dminuoso	We still have monoidal shape in list concatenation
2021-09-21 16:43:11	dminuoso	but no meaning of that
2021-09-21 16:43:58	ldlework	OK, so you're outlining that with regards to structure, we have a way of taking a set and putting it into structure or taking it out of structure
2021-09-21 16:44:26	ldlework	where a set is some domain of values of a given type, like natural numbers
2021-09-21 16:44:30	dminuoso	Well, we have a way of forgetting concrete monoidal structure back to a set, and a way of adding *bare/essential* monoidal structure to a set.
2021-09-21 16:44:38	dminuoso	Sure, it could be any
2021-09-21 16:45:04	←	merijn has quit (Ping timeout: 264 seconds)
2021-09-21 16:45:24	ldlework	by emphasizing bare essential structure, you just mean, we're just putting the values back into the list (monoid), but no additional structure
2021-09-21 16:45:32	→	merijn has joined #haskell
2021-09-21 16:45:33	dminuoso	This relationship between "free" and "forgetful" can be observed in Haskell, even.
2021-09-21 16:46:09	dminuoso	If we call the forgetful functor `U` that strips away the monoidal structure, and `F` that free functor, we express that relationship as:
2021-09-21 16:46:19	←	yauhsien has quit (Ping timeout: 265 seconds)
2021-09-21 16:46:22	dminuoso	`F a -> b` is isomorphic to `a -> U b`
2021-09-21 16:47:15	dminuoso	Now, again ignoring gory details:
2021-09-21 16:47:40	→	Everything has joined #haskell
2021-09-21 16:47:50	dminuoso	This eventually turns into Haskell by showing that `[a] -> b` being expressible by a function `a -> b`
2021-09-21 16:47:53	dminuoso	% :t foldMap
2021-09-21 16:47:53	yahb	dminuoso: (Foldable t, Monoid m) => (a -> m) -> t a -> m
2021-09-21 16:48:04	dminuoso	If you set `t ~ []`
2021-09-21 16:48:18	→	raehik has joined #haskell
2021-09-21 16:48:34	←	wei2912 has quit (Quit: Lost terminal)
2021-09-21 16:48:56	→	Brumaire has joined #haskell
2021-09-21 16:49:22	Cajun	so if you composed those functions ( `F a -> b` and `a -> U b` ) and assumed `a ~ b` you could get the "bare monoidal structure" from the forgetful functor?
2021-09-21 16:49:41	dminuoso	Those are not regular functions.
2021-09-21 16:50:11	dminuoso	Perhaps this was a bit misleading
2021-09-21 16:50:30	Cajun	ah category theory functors where its just some type to another, not a function?
2021-09-21 16:50:49	←	cheater has quit (Ping timeout: 246 seconds)
2021-09-21 16:55:16	dminuoso	The thing is, `F` is implicitly there in Haskell
2021-09-21 16:55:53	dminuoso	So we could roughly do this:
2021-09-21 16:55:59	←	Brumaire has quit (Ping timeout: 265 seconds)
2021-09-21 16:56:36	dminuoso	% newtype Mon a = Mon [a]; instance Semigroup (Mon a) where Mon a <> Mon b = Mon (a ++ b); instance Monoid (Mon a) where mempty = Mon [];
2021-09-21 16:56:36	yahb	dminuoso: ; <interactive>:53:90: error: parse error on input `instance'
2021-09-21 16:56:44	dminuoso	% newtype Mon a = Mon [a]
2021-09-21 16:56:44	yahb	dminuoso: 
2021-09-21 16:56:49	dminuoso	% nstance Semigroup (Mon a) where Mon a <> Mon b = Mon (a ++ b)
2021-09-21 16:56:49	yahb	dminuoso: ; <interactive>:55:27: error: parse error on input `where'
2021-09-21 16:56:53	dminuoso	% instance Semigroup (Mon a) where Mon a <> Mon b = Mon (a ++ b)
2021-09-21 16:56:53	yahb	dminuoso: 
2021-09-21 16:56:59	dminuoso	% instance Monoid (Mon a) where mempty = Mon [];
2021-09-21 16:56:59	yahb	dminuoso: 
2021-09-21 16:57:29	dminuoso	Mmm not quite
2021-09-21 16:59:28	dminuoso	ldlework: Anyway, at the end the key observation is: You can simply take a list of anything and make a minimal monoid with that. It adds monoidal structure, and nothing else.
2021-09-21 16:59:54	dminuoso	We dont even specify what `a ++ b` even means
2021-09-21 17:02:37	hpc	"We dont even specify what `a ++ b` even means" - leading with this would help a lot with future explanations
2021-09-21 17:04:02	→	cheater has joined #haskell
2021-09-21 17:06:06	→	gehmehgeh has joined #haskell
2021-09-21 17:08:32	carbolymer	are async exceptions masked in "last" computation in `Control.Exception.bracket` ?
2021-09-21 17:10:37	dminuoso	carbolymer: Look at the implementation
2021-09-21 17:11:39	carbolymer	dminuoso: I'm looking and I feel a bit sick today and I'm not sure if it is:
2021-09-21 17:11:39	carbolymer	>restore ((thing a) `onException` after a)
2021-09-21 17:11:40	carbolymer	or
2021-09-21 17:11:40	carbolymer	>(restore (thing a)) `onException` after a
2021-09-21 17:12:09	dminuoso	https://hackage.haskell.org/package/base-4.15.0.0/docs/src/Control-Exception-Base.html#bracket
2021-09-21 17:12:15	dminuoso	   r <- restore (thing a) `onException` after a
2021-09-21 17:12:27	carbolymer	what's the priority of operations?
2021-09-21 17:12:47	carbolymer	restore then onException?
2021-09-21 17:13:04	dminuoso	Not sure what you mean by priority
2021-09-21 17:13:27	carbolymer	which function is invoked last
2021-09-21 17:13:46	dminuoso	Why is the "order" relevant here?
2021-09-21 17:13:56	hpc	you mean fixity?
2021-09-21 17:14:00	carbolymer	yes
2021-09-21 17:14:15	carbolymer	dminuoso: because it answers the question if exceptions are masked in `after`
2021-09-21 17:14:27	dminuoso	Ah you're looking for how this is parsed.
2021-09-21 17:14:29	→	geekosaur has joined #haskell
2021-09-21 17:14:38	dminuoso	(restore (thing a)) `onException` after a
2021-09-21 17:14:39	hpc	prefix binds tighter than infix, so f x `op` g y is always (f x) `op` (g y)
2021-09-21 17:14:44	carbolymer	dminuoso: thank you
2021-09-21 17:14:52	carbolymer	hpc: thx
2021-09-21 17:14:57	carbolymer	coffee does not work today
2021-09-21 17:15:00	shapr	not YET
2021-09-21 17:15:07	⚡	shapr drinks much more coffee
2021-09-21 17:15:24	shapr	violence is like coffee
2021-09-21 17:15:30	shapr	neither of them type check
2021-09-21 17:15:37	hpc	english breakfast tea is the superior wakeup juice :D
2021-09-21 17:16:05	shapr	I choose four cups of death wish cold brew.
2021-09-21 17:16:22	dminuoso	carbolymer: Note, that `restore` does not unmask exceptions, it just restores the previous exception mask before `mask` 
2021-09-21 17:16:31	dminuoso	Just adding that side note, in case you're using `bracket` in strange places
2021-09-21 17:17:20	←	bitdex has quit (Ping timeout: 276 seconds)
2021-09-21 17:18:43	ldlework	check this out https://i.imgur.com/HkcUQo3.png
2021-09-21 17:18:50	carbolymer	dminuoso: my team is balls deep in a strange issue, "/dev/random: hClose: does not exist (No such file or directory)" - comes from warp-tls, and it freezes processing threads (some resource contention?), and we have no idea why, also we're using ancient linux kernel 3.10
2021-09-21 17:19:11	carbolymer	dminuoso: also profiling makes this bug irreproducible...
2021-09-21 17:19:25	→	bitdex has joined #haskell
2021-09-21 17:19:28	carbolymer	dminuoso: so yeah, we're probably onto some masking weirdness
2021-09-21 17:20:01	←	__monty__ has quit (Quit: Kernel woes : s)
2021-09-21 17:20:10	carbolymer	ldlework: plantuml?
2021-09-21 17:21:02	Cajun	Idlework: seeing UML diagrams for haskell is weeeeird, ive only seen those for lenses! really cool though, it would be interesting to have a really big one of these automatically generated for a given project
2021-09-21 17:21:40	ldlework	carbolymer: yep
2021-09-21 17:21:49	carbolymer	ldlework: written by hand or generated?
2021-09-21 17:21:59	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-21 17:22:05	ldlework	carbolymer: written by hand because many typeclasses don't have the proper relationships in code
2021-09-21 17:22:43	ldlework	awpr is going to help flesh it out, I'm just working out the plantuml conventions
2021-09-21 17:22:49	ldlework	i mean, anyone can help
2021-09-21 17:22:58	Cajun	although some parts are inconsistent with the parenthesis and tuples. Foldable as the tuple as `(,) a` and Monad as `((,) a)`
2021-09-21 17:23:03	ldlework	I just fixed that
2021-09-21 17:23:08	Cajun	:)
2021-09-21 17:23:19	ldlework	https://i.imgur.com/eplRSKd.png
2021-09-21 17:23:47	→	viluon has joined #haskell
2021-09-21 17:23:54	Cajun	far right of Functor has a weird > on it
2021-09-21 17:24:49	ldlework	nice
2021-09-21 17:25:26	ldlework	https://i.imgur.com/Ce1zOGK.png
2021-09-21 17:25:57	ldlework	oop missing a comma, guh
2021-09-21 17:26:17	ldlework	Anyway, I eventually want to see how Reader and other typeclasses fit in here
2021-09-21 17:28:25	←	juhp has quit (Quit: juhp)
2021-09-21 17:28:38	→	juhp has joined #haskell
2021-09-21 17:30:46	←	jonathanx has quit (Remote host closed the connection)
2021-09-21 17:31:02	→	jonathanx has joined #haskell
2021-09-21 17:36:30	→	lavaman has joined #haskell
2021-09-21 17:40:06	ldlework	If anyone wants to help add more typeclasses: https://github.com/dustinlacewell/haskell-typeclass-atlas
2021-09-21 17:40:50	←	lavaman has quit (Ping timeout: 252 seconds)
2021-09-21 17:41:26	ldlework	Cajun, [exa], Cale ^
2021-09-21 17:49:44	→	tromp has joined #haskell
2021-09-21 17:50:49	→	[itchyjunk] has joined #haskell
2021-09-21 17:51:16	⚡	dminuoso is absolutely unsure what the relationship between Foldable and Ord is supposed to be
2021-09-21 17:52:40	ldlework	dminuoso: One of Foldable's methods depends on Ord
2021-09-21 17:52:43	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-21 17:52:48	dminuoso	Ermm..
2021-09-21 17:52:48	ldlework	maximum/minimum
2021-09-21 17:53:06	ldlework	I'm new to haskell/category theory, so feel free to just chime in
2021-09-21 17:53:08	dminuoso	So?>
2021-09-21 17:53:22	ldlework	dminuoso: it's just meant to demonstrate such a relation
2021-09-21 17:53:24	dminuoso	That doesnt give any relationship between Foldable and Ord, really
2021-09-21 17:53:30	dminuoso	Any meaningful one, anyway
2021-09-21 17:54:03	dminuoso	But Im not sure what this diagram is trying to convey or help with
2021-09-21 17:54:04	ldlework	Like in another case you can easily see that you can use Foldable on Monoid objects
2021-09-21 17:54:32	ldlework	dminuoso: that's fine, others have expressed it could be useful, and personally I'm just looking for a nice reference
2021-09-21 17:54:41	dminuoso	What does "use Foldable on Monoid objects" even mean?
2021-09-21 17:55:05	ldlework	If you have a Monoid you can call `fold` on it
2021-09-21 17:55:12	dminuoso	No, you cant.
2021-09-21 17:55:21	dminuoso	% :t fold
2021-09-21 17:55:21	→	shriekingnoise has joined #haskell
2021-09-21 17:55:21	yahb	dminuoso: (Foldable t, Monoid m) => t m -> m
2021-09-21 17:55:30	ldlework	Well rather, if you have a Foldable holding a Monad
2021-09-21 17:55:38	ldlework	Monoid*
2021-09-21 17:55:41	dminuoso	`t m` is not "a monoid"
2021-09-21 17:55:52	dminuoso	It's rather the foldable of a monoid can be mappended together.
2021-09-21 17:55:53	ldlework	it's a foldable structuring a monoid
2021-09-21 17:55:56	dminuoso	Sure.
2021-09-21 17:56:04	ldlework	spoke too soon :)
2021-09-21 17:56:32	dminuoso	Like I said, that relationship seems overly arbitrary
2021-09-21 17:56:49	dminuoso	As Monoid is not part of Foldable's description
2021-09-21 17:56:56	←	bitdex has quit (Quit: = "")
2021-09-21 17:56:59	ldlework	Sure, that's a different arrow :P
2021-09-21 17:57:05	→	MQ-17J has joined #haskell
2021-09-21 17:57:09	dminuoso	It's rather that `an arbitrary Monoid` is used in some methods.
2021-09-21 17:57:23	ldlework	Foldable has a relation with Monoid that it doesn't have with, say, Applicative
2021-09-21 17:57:29	ldlework	dminuoso: yes
2021-09-21 17:57:40	←	benin036932301 has quit (Ping timeout: 264 seconds)
2021-09-21 17:58:34	dminuoso	Thing is, it's not really part of Foldable's identity
2021-09-21 17:58:44	ldlework	dminuoso: for context, awpr mentioned that there are some other relationships between typeclasses he wants to show, but as an ignorant neophyte, I don't know what they are - so in trying to accomplish my side of the goal of establishing some plantuml conventions, I just picked this arbitrary thing to test out alternative arrow styles on
2021-09-21 17:58:48	dminuoso	Foldable could be stripped to just `foldr` or `foldl`, or maybe `toListOf`
2021-09-21 17:59:01	dminuoso	So if you look at the *bare* minimum of a class, that's when you begin to realize its characteristics
2021-09-21 17:59:16	ldlework	dminuoso: I tried to think of a good place / good way to show the "minimal" functions but didn't think of anything good yet
2021-09-21 17:59:27	dminuoso	ldlework: you could perhaps make them bold?
2021-09-21 17:59:30	dminuoso	If that works 
2021-09-21 17:59:45	ldlework	Yeah, I tried that, but it weakens the bolding in the title
2021-09-21 17:59:56	ldlework	I could make the titles a bigger fontsize
2021-09-21 18:00:08	ldlework	i wonder how underline looks
2021-09-21 18:00:20	dminuoso	ldlework: Anyway. The thing is, the relationship to Monoid is sort of accidental - in the sense that there's a bunch of people that frequently use Monoid to fold something together.
2021-09-21 18:00:34	dminuoso	but Foldable without `fold` and `foldMap` would be just as legit
2021-09-21 18:00:41	ldlework	dminuoso: sure, we're not trying to show the minimal possible amount of information
2021-09-21 18:01:00	ldlework	just trying to demonstrate some useful information among the major typeclasses
2021-09-21 18:01:01	ldlework	btw
2021-09-21 18:01:03	dminuoso	Well, what if there was a *function* using both Foldable and Comonad. Would that mean there had to be an arrow too?
2021-09-21 18:01:06	→	yauhsien has joined #haskell
2021-09-21 18:01:12	ldlework	if you have any recommendations for other typeclasses you'd like to see on an atlas like this
2021-09-21 18:01:20	ldlework	i'd be very happy to take those
2021-09-21 18:01:34	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-21 18:01:36	dminuoso	ldlework: The key thing is, fold/foldMap being actual methods is rather a mechanism allowing for people to provide type specialized optimized versions.
2021-09-21 18:01:48	dminuoso	But its in no way some demonstration of a relationship
2021-09-21 18:01:55	dminuoso	Imagine if `fold` and `foldMap` were just top level functions
2021-09-21 18:01:59	dminuoso	Would you still draw that arrow?
2021-09-21 18:02:04	ldlework	dminuoso: it's just showing "there are some functions on this type, you can use with that type"
2021-09-21 18:02:06	ldlework	nothing more
2021-09-21 18:02:17	ldlework	so you can look at a glance, without inspecting all the functions first
2021-09-21 18:02:26	dminuoso	Sure. Would you draw the arrows if `fold/foldMap` were regular functions?
2021-09-21 18:02:37	ldlework	maybe?
2021-09-21 18:02:46	ldlework	it's not meant to reflect the platonic definition of the thing
2021-09-21 18:02:50	dminuoso	So do you intend to scrape the entirety of hackage to build that model?
2021-09-21 18:03:01	ldlework	no, as it says "subset"
2021-09-21 18:03:22	→	pbrisbin has joined #haskell
2021-09-21 18:03:45	ldlework	a difficulty with communicating the minimal function set, is that some of them are defined as OR operators
2021-09-21 18:03:59	ldlework	like for Eq, {-# MINIMAL (==) | (/=) #-}
2021-09-21 18:05:56	ldlework	Could just have a section above the example instances I guess
2021-09-21 18:06:04	←	yauhsien has quit (Ping timeout: 264 seconds)
2021-09-21 18:07:11	→	tromp has joined #haskell
2021-09-21 18:07:39	→	yauhsien has joined #haskell
2021-09-21 18:07:42	→	slowButPresent has joined #haskell
2021-09-21 18:16:26	→	ub has joined #haskell
2021-09-21 18:17:31	→	doyougnu has joined #haskell
2021-09-21 18:19:22	ldlework	Added the required functions https://raw.githubusercontent.com/dustinlacewell/haskell-typeclass-atlas/master/atlas.png
2021-09-21 18:20:03	→	wonko has joined #haskell
2021-09-21 18:21:04	←	ub has quit (Ping timeout: 264 seconds)
2021-09-21 18:22:14	←	jonathanx has quit (Remote host closed the connection)
2021-09-21 18:22:31	→	jonathanx has joined #haskell
2021-09-21 18:23:02	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-21 18:23:45	←	juhp has quit (Quit: juhp)
2021-09-21 18:23:58	→	juhp has joined #haskell
2021-09-21 18:26:46	→	waleee has joined #haskell
2021-09-21 18:34:05	←	juhp has quit (Quit: juhp)
2021-09-21 18:34:21	→	juhp has joined #haskell
2021-09-21 18:34:44	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-21 18:34:55	DigitalKiwi	ldlework: are you using haskell out of anger or joy (glad to see you here anyway)
2021-09-21 18:35:03	→	MQ-17J has joined #haskell
2021-09-21 18:35:08	ldlework	joy
2021-09-21 18:35:16	ldlework	i'm pretty confused overall, but i like MLs
2021-09-21 18:35:23	DigitalKiwi	\o/
2021-09-21 18:36:06	ldlework	it's going to take me a really long to meaningfully absorb the principled mathematical stuff behind the typeclasses, but i am working at it
2021-09-21 18:37:12	ldlework	long time*
2021-09-21 18:37:38	→	eggplantade has joined #haskell
2021-09-21 18:37:41	DigitalKiwi	have you https://github.com/hmemcpy/milewski-ctfp-pdf
2021-09-21 18:38:04	ldlework	no, still working through HFFP
2021-09-21 18:38:57	→	spruit11 has joined #haskell
2021-09-21 18:39:20	ldlework	thanks for the link though
2021-09-21 18:39:26	DigitalKiwi	do you mean HPFP or a different one i don't know
2021-09-21 18:39:34	←	yauhsien has quit (Remote host closed the connection)
2021-09-21 18:39:47	DigitalKiwi	oh a different one
2021-09-21 18:40:10	DigitalKiwi	or nvrm i have no idea lol
2021-09-21 18:40:46	→	yauhsien has joined #haskell
2021-09-21 18:40:47	ldlework	DigitalKiwi: Haskell From First Principles
2021-09-21 18:40:51	←	yauhsien has quit (Remote host closed the connection)
2021-09-21 18:41:46	←	eggplantade has quit (Ping timeout: 246 seconds)
2021-09-21 18:42:08	→	machinedgod has joined #haskell
2021-09-21 18:44:19	→	yauhsien has joined #haskell
2021-09-21 18:44:28	←	juhp has quit (Quit: juhp)
2021-09-21 18:44:36	DigitalKiwi	lol i think we're talking about the same book but i read it as Haskell Programming from First Principles
2021-09-21 18:44:41	→	juhp has joined #haskell
2021-09-21 18:45:37	viluon	hi, a couple minutes ago I sent an email to haskell-cafe titled "Optimising ReadP," if anyone wants to discuss it here, I'd be happy to
2021-09-21 18:45:48	→	tromp has joined #haskell
2021-09-21 18:47:37	kuribas	can't wait for merijn to comment :)
2021-09-21 18:49:27	←	yauhsien has quit (Remote host closed the connection)
2021-09-21 18:49:47	merijn	My main comment would be "don't bother, just nuke it from orbit" >.>
2021-09-21 18:50:02	→	yauhsien has joined #haskell
2021-09-21 18:52:18	→	chris has joined #haskell
2021-09-21 18:52:23	ℹ	chris is now known as Guest3409
2021-09-21 18:52:52	←	spruit11 has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-09-21 18:55:04	←	yauhsien has quit (Ping timeout: 252 seconds)
2021-09-21 18:59:48	←	juhp has quit (Quit: juhp)
2021-09-21 19:00:03	→	juhp has joined #haskell
2021-09-21 19:05:09	←	juhp has quit (Quit: juhp)
2021-09-21 19:05:20	merijn	viluon: Basically, ReadP having garbage performance is well known and it's less effort to just port your parser to another parser combinator library then it is to optimise ReadP
2021-09-21 19:05:23	→	juhp has joined #haskell
2021-09-21 19:06:05	viluon	merijn: thanks, would you happen to know why is the performance so poor?
2021-09-21 19:06:08	geekosaur	ReadP's only saving grace is that it can easily be implemented using only features from base, so it can be used to implement Read instances
2021-09-21 19:06:16	merijn	viluon: Because ReadP supports ambiguous grammars
2021-09-21 19:06:29	merijn	viluon: So it it keeps all possible parse traces around
2021-09-21 19:06:35	viluon	ah
2021-09-21 19:06:42	merijn	viluon: It also operates on String which is a terrible datatype for parsing
2021-09-21 19:06:53	viluon	yes, `String` is awful
2021-09-21 19:06:57	viluon	could you recommend an alternative?
2021-09-21 19:07:22	merijn	viluon: megaparsec is the most feature complete one. Attoparsec is more minimal in case you don't care about error message quality.
2021-09-21 19:07:35	merijn	viluon: Parsec if you need to support ridiculously old code
2021-09-21 19:07:41	→	gioyik has joined #haskell
2021-09-21 19:07:47	viluon	is there something even smaller than attoparsec?
2021-09-21 19:07:50	merijn	But in general megaparsec is the safe bet. Which also lets you parse Text directly
2021-09-21 19:07:55	merijn	viluon: Not really
2021-09-21 19:07:59	dminuoso	attoparsec already is fairly small
2021-09-21 19:08:16	dminuoso	It's dependency footprint is as limited as it can reasonably get
2021-09-21 19:08:56	merijn	But yeah, ReadP is mostly around for stuff like Read (which also has garbage performance >.>)
2021-09-21 19:10:43	merijn	viluon: Compare your numbers with stuff like: https://markkarpov.com/post/megaparsec-more-speed-more-power.html
2021-09-21 19:12:03	[itchyjunk]	wait, i confused myself. haskell functions can only ever take one argument. but i thought we said integers a functions that take no parameters?
2021-09-21 19:12:20	dminuoso	No, we never did.
2021-09-21 19:12:24	[itchyjunk]	oh..
2021-09-21 19:12:30	[itchyjunk]	weren't integers functions?
2021-09-21 19:12:31	dminuoso	And that statement is silly and nonsense.
2021-09-21 19:12:33	dminuoso	No.
2021-09-21 19:12:46	dminuoso	First, what do you mean by "integers" exactly?
2021-09-21 19:12:49	[itchyjunk]	1
2021-09-21 19:12:54	dminuoso	The expression 1?
2021-09-21 19:13:04	dminuoso	So the expression 1 is a polymorphic value, it's not a function.
2021-09-21 19:13:09	dminuoso	It's type is `Num a => a`
2021-09-21 19:13:36	[itchyjunk]	hmmm
2021-09-21 19:14:09	dminuoso	A function is one that maps values of its domain onto values onto its codomain. For instance, a function `f :: Int -> Char` maps every value of type Int to some value of type Char.
2021-09-21 19:14:15	→	wroathe has joined #haskell
2021-09-21 19:14:15	←	wroathe has quit (Changing host)
2021-09-21 19:14:15	→	wroathe has joined #haskell
2021-09-21 19:14:21	dminuoso	So you see, the phrase "function that takes no parameters" is nonsensical
2021-09-21 19:14:40	shapr	has anyone used dataflower at all?
2021-09-21 19:15:06	shapr	I see many opportunities for timely dataflow in my daily work, but probably would only try such a framework in Haskell
2021-09-21 19:15:21	merijn	[itchyjunk]: See also: http://conal.net/blog/posts/everything-is-a-function-in-haskell
2021-09-21 19:16:14	dminuoso	merijn is a manually driven car, just without any of the metal or plastic stuff.
2021-09-21 19:16:32	←	nvmd has quit (Ping timeout: 252 seconds)
2021-09-21 19:16:36	→	bontaq has joined #haskell
2021-09-21 19:18:11	→	nvmd has joined #haskell
2021-09-21 19:19:12	→	jokleinn has joined #haskell
2021-09-21 19:19:26	[itchyjunk]	merijn, the "7" being sugar notation for ()->7 being mentioned in that post, isn't that functional notation?
2021-09-21 19:19:42	←	zaquest has quit (Remote host closed the connection)
2021-09-21 19:20:46	[itchyjunk]	i'll read through this first
2021-09-21 19:21:25	merijn	[itchyjunk]: The post mentions that's nonsense too :p
2021-09-21 19:21:32	shapr	I have complaints about haddock, but hoogle still one of the most amazing things in Haskell
2021-09-21 19:22:52	←	favonia has quit (Ping timeout: 264 seconds)
2021-09-21 19:22:52	[itchyjunk]	I'll have to remembe who i discussed it with..
2021-09-21 19:23:01	[itchyjunk]	i thought for sure i talked to someone about this ..
2021-09-21 19:23:32	→	zaquest has joined #haskell
2021-09-21 19:25:34	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-21 19:26:28	←	jstolarek has quit (Ping timeout: 264 seconds)
2021-09-21 19:29:10	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-21 19:29:42	→	yauhsien has joined #haskell
2021-09-21 19:31:38	[itchyjunk]	This reminds me of something else i was thinking off and getting really confused about
2021-09-21 19:32:32	[itchyjunk]	someone had told me scalars are just 1 dimentional matrices like [1] and it kinda made snese. but matrix multiplication and scalar multiplication are different beasts..
2021-09-21 19:32:39	[itchyjunk]	maybe i got bamboozeled there too
2021-09-21 19:34:31	←	nfd has quit (Ping timeout: 265 seconds)
2021-09-21 19:34:49	opqdonut	but matrix multiplication for matrices of size 1x1 works exactly like scalar multiplication?
2021-09-21 19:35:19	→	Izem has joined #haskell
2021-09-21 19:36:12	←	alx741 has quit (Ping timeout: 252 seconds)
2021-09-21 19:36:22	opqdonut	even though matrix multiplication isn't commutative _in general_ there are classes of matrices where it is commutative. 1x1 matrices are one example. diagonal matrices are another
2021-09-21 19:36:32	[itchyjunk]	yes but i can take a scalar and multiply it to any sized matrix
2021-09-21 19:36:41	[itchyjunk]	but if 1 is [1], this stops working
2021-09-21 19:36:55	opqdonut	yeah scaling is different
2021-09-21 19:37:24	opqdonut	scaling shouldn't use the same symbol as multiplication, it doesn't even have the same type!
2021-09-21 19:37:58	opqdonut	and e.g. vector spaces have scaling but might not have multiplication
2021-09-21 19:40:08	←	nshepperd2 has quit (Quit: Ping timeout (120 seconds))
2021-09-21 19:40:21	→	nshepperd2 has joined #haskell
2021-09-21 19:40:53	←	Guest3409 has quit (Remote host closed the connection)
2021-09-21 19:41:10	→	SquidDev1 has joined #haskell
2021-09-21 19:41:49	→	Nahra` has joined #haskell
2021-09-21 19:42:15	←	ouroboros has quit (Ping timeout: 252 seconds)
2021-09-21 19:42:17	→	Philonous_ has joined #haskell
2021-09-21 19:42:18	→	ec has joined #haskell
2021-09-21 19:42:49	←	Nahra has quit (Ping timeout: 252 seconds)
2021-09-21 19:42:49	←	Philonous has quit (Ping timeout: 252 seconds)
2021-09-21 19:42:49	←	sweater has quit (Ping timeout: 252 seconds)
2021-09-21 19:43:19	→	joeyh_ has joined #haskell
2021-09-21 19:43:21	←	jlamothe has quit (Ping timeout: 252 seconds)
2021-09-21 19:43:21	←	jonatan has quit (Ping timeout: 252 seconds)
2021-09-21 19:43:21	←	clever has quit (Ping timeout: 252 seconds)
2021-09-21 19:43:21	←	SquidDev has quit (Ping timeout: 252 seconds)
2021-09-21 19:43:21	←	joeyh has quit (Ping timeout: 252 seconds)
2021-09-21 19:43:22	ℹ	SquidDev1 is now known as SquidDev
2021-09-21 19:43:54	→	jonatan has joined #haskell
2021-09-21 19:44:13	→	jlamothe has joined #haskell
2021-09-21 19:44:29	→	sweater has joined #haskell
2021-09-21 19:44:45	←	hendursa1 has quit (Quit: hendursa1)
2021-09-21 19:45:09	→	hendursaga has joined #haskell
2021-09-21 19:47:58	→	chris has joined #haskell
2021-09-21 19:48:02	ℹ	chris is now known as Guest250
2021-09-21 19:48:26	→	ouroboros has joined #haskell
2021-09-21 19:48:47	←	gioyik has quit (Ping timeout: 276 seconds)
2021-09-21 19:49:06	→	alx741 has joined #haskell
2021-09-21 19:49:39	→	clever has joined #haskell
2021-09-21 19:50:22	viluon	merijn: I switched to attoparsec, getting the total runtime from 100 ms to 80. 21% of allocations happen in `decimal.step` (from `Data.Attoparsec.Text`), again a generic definition I cannot specialise as it lacks an `INLINE(ABLE)` pragma
2021-09-21 19:50:50	merijn	Which optimisation level?
2021-09-21 19:51:04	←	acidjnk has quit (Ping timeout: 246 seconds)
2021-09-21 19:51:25	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-21 19:51:34	merijn	And why do you think 1) inlining will avoid allocations and 2) the allocations need to be avoided to speed things up?
2021-09-21 19:52:52	←	Guest250 has quit (Ping timeout: 264 seconds)
2021-09-21 19:53:23	→	gioyik has joined #haskell
2021-09-21 19:54:55	←	waleee has quit (Ping timeout: 246 seconds)
2021-09-21 19:54:58	→	Vajb has joined #haskell
2021-09-21 19:56:06	→	chris has joined #haskell
2021-09-21 19:56:10	ℹ	chris is now known as Guest9962
2021-09-21 19:57:09	→	waleee has joined #haskell
2021-09-21 19:57:20	→	maroloccio has joined #haskell
2021-09-21 19:57:51	lortabac	merijn: inlining in GHC includes beta reduction, so it can save allocations in some cases
2021-09-21 19:58:17	←	n3t has quit (Read error: Connection reset by peer)
2021-09-21 19:58:25	←	shapr has quit (Ping timeout: 246 seconds)
2021-09-21 19:58:35	viluon	merijn: oxygen (`-O2`). With `ReadP` (or rather the `Lex` utilities), specialising them to `Int` helped. Granted, `decimal.step` is only 8.9% of total time, bigger cost-centres are `>>=.\.succ'` (35.9% time, 30.5% alloc), `>>=.\` (16% time, 17.5% alloc), `fmap.\` (11.0% time, 9.6% alloc), and `fmap.\.succ'` (9.3% time, 11.1% alloc). These are all from `Data.Attoparsec.Internal.Types`. 
2021-09-21 19:58:35	viluon	I don't have a good model of what optimisations could help here, getting one is part of the motivation for this experiment. I'm surprised that the potentially very powerful specialisation and inlining directives are so limited in practical uses.
2021-09-21 19:59:22	→	n3t has joined #haskell
2021-09-21 20:00:21	viluon	in any case, I still think the parser creates a lot of garbage. I'd at least like to find out what that garbage is; I'll try heap profiling next.
2021-09-21 20:00:40	←	lbseale has quit (Ping timeout: 264 seconds)
2021-09-21 20:01:07	merijn	What's the problem with lots of garbage, though?
2021-09-21 20:01:10	merijn	Garbage is cheap
2021-09-21 20:01:28	merijn	So is allocation
2021-09-21 20:01:33	merijn	It's non-garbage you gotta worry about
2021-09-21 20:01:41	←	rond_ has quit (Quit: Client closed)
2021-09-21 20:02:34	viluon	I use `IntMap (Set Int)` to represent a directed graph
2021-09-21 20:03:23	merijn	Also, on what sorta input? You mention 80ms parse, why is that a problem?
2021-09-21 20:03:34	viluon	if the parser first builds the entirety of it as a `[(Int, Int)]` and then converts to the map with a `foldl'`, I wasted a lot of time allocating garbage and then traversing a cache-unfriendly data structure
2021-09-21 20:03:48	merijn	Like, there's a lot of missing information about what you're trying to optimise, with what goal
2021-09-21 20:04:15	merijn	viluon: Allocating garbage is cheap, though
2021-09-21 20:04:33	viluon	no it's not
2021-09-21 20:04:39	merijn	viluon: You gotta abandon any notion about cost of allocation you have from C/Rust
2021-09-21 20:04:44	viluon	the Rust implementation finishes this test case under 10ms
2021-09-21 20:04:50	merijn	GHC's alloation is *really* cheap
2021-09-21 20:05:16	merijn	The fact that the attoparsec parser is slower doesn't necessarily mean it's the allocation that's causing that
2021-09-21 20:05:34	merijn	Boxing alone will cost you a bunch of performance compared to Rust
2021-09-21 20:05:53	viluon	i don't really mind if it's allocation or some other thing, I just want to speed it up
2021-09-21 20:06:01	viluon	although I am interested in laziness pitfalls
2021-09-21 20:06:21	merijn	viluon: Well, you haven't pasted any code nor profiling output, so that's gonna limit how much useful feedback you get
2021-09-21 20:06:57	viluon	it's a topological sorting implementation that spends 80+% of the time loading input
2021-09-21 20:07:02	→	lbseale has joined #haskell
2021-09-21 20:07:39	merijn	That's nice. But that's entirely useless information for getting feedback on how you might speed things up
2021-09-21 20:07:51	→	Sgeo has joined #haskell
2021-09-21 20:08:11	viluon	alright, I'll share the code
2021-09-21 20:08:29	merijn	All I've seen is some random function names and allocation/time percentages. I mean, what do you expect people to comment on that?
2021-09-21 20:08:50	→	flouflou has joined #haskell
2021-09-21 20:08:56	←	ec has quit (Ping timeout: 276 seconds)
2021-09-21 20:09:11	merijn	If you wanna be fast, you probably wanna use a Vector based datatype that's filled incrementally from attoparsec, rather than IntMap (Set Int)
2021-09-21 20:09:14	viluon	not random: they come from a supposedly widely used library
2021-09-21 20:09:48	viluon	"These are all from `Data.Attoparsec.Internal.Types`"
2021-09-21 20:09:50	merijn	viluon: Allocation percentage of "fmap" is meaningless without code
2021-09-21 20:10:04	←	lbseale has quit (Remote host closed the connection)
2021-09-21 20:10:29	→	lbseale has joined #haskell
2021-09-21 20:10:41	viluon	here's the code: https://paste.tomsmeding.com/4G0bpLx7
2021-09-21 20:11:22	viluon	I don't want to sound ungrateful, I really appreciate you taking the time to answer my questions!
2021-09-21 20:12:49	merijn	viluon: Inst has boxed ints, which you probably don't want, that build in parse' also seems a candidate for a lot of blow up
2021-09-21 20:13:14	merijn	viluon: Can't you replace the Set with an (optionally) sorted unboxed Vector?
2021-09-21 20:13:43	viluon	it is inlined and uses a strict fold, `parse'` doesn't show up in top cost centres
2021-09-21 20:14:32	merijn	viluon: My point is that IntMap + Set is gonna be pretty horrible for accessing a static graph
2021-09-21 20:14:48	merijn	I'm pretty sure the Rust version doesn't do that and uses an array based representation like CSR
2021-09-21 20:15:20	merijn	And there's no real reason you couldn't use the same thing in Haskell
2021-09-21 20:15:28	viluon	sure, but does that matter?
2021-09-21 20:15:45	viluon	these are the top cost centres https://paste.tomsmeding.com/26S86CNo
2021-09-21 20:16:56	→	ec has joined #haskell
2021-09-21 20:17:01	merijn	viluon: btw, note that your use of strict state is mostly useless as all the elements in the tuple are still lazy
2021-09-21 20:17:51	viluon	tbf, the test case I'm running this on may be one where the interesting portion of the digraph lies in a small connected component, so time is spent when processing input but most of it is ignored by the DFS
2021-09-21 20:18:55	→	favonia has joined #haskell
2021-09-21 20:18:55	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-21 20:19:26	merijn	viluon: What's the output of running with: +RTS -sstderr
2021-09-21 20:19:46	←	jacks2 has quit (Quit: http://www.okay.uz/ (Session timeout))
2021-09-21 20:19:47	→	Vajb has joined #haskell
2021-09-21 20:19:59	←	gioyik has quit (Ping timeout: 276 seconds)
2021-09-21 20:20:48	←	Guest9962 has quit (Remote host closed the connection)
2021-09-21 20:22:50	viluon	here's the profiling result for a more comprehensive test case: https://paste.tomsmeding.com/RTMOuOID Rust 26.6 ms ±   1.7 ms, Haskell 1.058 s ±  0.054 s. Of course it's far from a fair comparison as both implementations use different approaches, but as the cost centres show, the majority of time is again spent in the parser
2021-09-21 20:23:12	viluon	I should profile the Rust implementation too I think
2021-09-21 20:24:07	merijn	Also, are you comparing apples-to-apples? Attoparsec Text does full unicode
2021-09-21 20:24:23	viluon	apples-to-apples? Definitely not
2021-09-21 20:24:25	merijn	If the Rust one is only doing ascii, you might wanna compare with the ByteString one
2021-09-21 20:24:46	merijn	Because a full unicode parser is obviously gonna be slower than a narrow ascii only one
2021-09-21 20:25:25	viluon	I don't care too much really, the Rust implementation isn't mine. A friend wrote it, then I wrote the Haskell one, and I'm embarrassed that mine is orders of magnitude slower
2021-09-21 20:25:59	viluon	but I also want to take this opportunity to investigate how often does laziness get in the way of productivity and get an idea of where could GHC improve its optimisation efforts 
2021-09-21 20:27:04	viluon	here's the RTS report as you requested. Again, thanks for all your feedback, questions and suggestions! https://paste.tomsmeding.com/sie584Ts
2021-09-21 20:27:31	←	Izem has quit (Quit: Izem)
2021-09-21 20:27:36	merijn	Who says the problem here is laziness, though? Or allocation, or inlining as you implied at the start
2021-09-21 20:27:39	merijn	ok
2021-09-21 20:27:43	merijn	So, that is a clear sign
2021-09-21 20:27:47	→	Izem has joined #haskell
2021-09-21 20:27:54	merijn	Productivity 57% <- this is garbage
2021-09-21 20:28:06	→	Guest6237 has joined #haskell
2021-09-21 20:28:10	→	hnOsmium0001 has joined #haskell
2021-09-21 20:28:16	→	ysh has joined #haskell
2021-09-21 20:28:20	merijn	Productivity should be 80-90%. So that means you're keeping data alive too long
2021-09-21 20:29:07	viluon	> Who says the problem here is laziness, though? Or allocation, or inlining as you implied at the start
2021-09-21 20:29:08	viluon	I didn't, I'm trying to find out
2021-09-21 20:29:09	lambdabot	 <hint>:1:38: error: parse error on input ‘,’
2021-09-21 20:29:17	viluon	whoops, sorry lambdabot
2021-09-21 20:30:03	merijn	viluon: anyway, so currently you're parsing the entire input into a list of Inst, then traversing the list with your solver
2021-09-21 20:30:34	merijn	That's a lot of data to be live, which would explain the garbage productivity
2021-09-21 20:31:10	merijn	So I would see what happens if you run the solver immediately when you finish parsing one Inst, so you only have 1 Inst at a time
2021-09-21 20:31:21	viluon	the list of problem instances (hence `Inst`) isn't longer than 100 elements
2021-09-21 20:31:24	merijn	i.e. parse Inst, solve, continue
2021-09-21 20:31:26	←	jonathanx has quit (Remote host closed the connection)
2021-09-21 20:31:46	merijn	viluon: But each of those elements has an "IntMap (Set Int)" they keep alive
2021-09-21 20:31:52	viluon	yes
2021-09-21 20:32:13	←	[itchyjunk] has quit (Read error: Connection reset by peer)
2021-09-21 20:32:22	←	Guest6237 has quit (Ping timeout: 246 seconds)
2021-09-21 20:32:25	merijn	viluon: In GHC GC cost is proportional to amount of live data
2021-09-21 20:32:54	→	ikex1 has joined #haskell
2021-09-21 20:32:57	merijn	So keeping those alive a long time increases the GC cost. If you can turn them into garbage asap (by solving immediately) GC cost goes down and productivity goes up
2021-09-21 20:33:42	merijn	Currently 40% of your runtime is running the GC
2021-09-21 20:33:57	←	ikex has quit (Ping timeout: 252 seconds)
2021-09-21 20:33:58	ℹ	ikex1 is now known as ikex
2021-09-21 20:34:08	merijn	So you wanna improve the rate at which you turn things into garbage
2021-09-21 20:34:17	viluon	hmm, concerning
2021-09-21 20:34:33	viluon	"So I would see what happens if you run the solver immediately when you finish parsing one Inst, so you only have 1 Inst at a time" <- is there a way to do that without modifying the code?
2021-09-21 20:35:20	viluon	is there anything in my implementation that requires GHC to produce code that first parses everything and then processes one-by-one?
2021-09-21 20:35:24	merijn	viluon: On line 38, instead of returning the Inst, just call your solve function there?
2021-09-21 20:35:34	merijn	viluon: Yes
2021-09-21 20:36:13	merijn	viluon: Your "parse" has to consume the entire input and turn it into a list to know if the parse succeeds
2021-09-21 20:36:56	merijn	viluon: Alternatively you'd want one of the streaming libraries to interleave parsing Inst instance and solving them, which would also enforce the "1 element at a time"
2021-09-21 20:37:14	→	x28girl has joined #haskell
2021-09-21 20:38:01	→	shapr has joined #haskell
2021-09-21 20:38:02	merijn	viluon: For cases like this where you're mostly parsing a stream of inputs and processing them, streaming libraries like conduit/pipes/etc. help interleave the IO/parsing and processing
2021-09-21 20:38:08	→	gioyik has joined #haskell
2021-09-21 20:38:50	←	ec has quit (Ping timeout: 276 seconds)
2021-09-21 20:39:16	merijn	(of course, that's a bit more boilerplate to set up)
2021-09-21 20:39:30	→	eggplantade has joined #haskell
2021-09-21 20:39:37	viluon	I changed the definition of `solve` to `solve = fromMaybe [] . maybeResult . Attoparsec.parse (fmap solve' <$> parse) <$> Text.getContents`
2021-09-21 20:40:15	←	yauhsien has quit (Remote host closed the connection)
2021-09-21 20:40:18	merijn	Not sure that's gonna help with the double fmap, but it might
2021-09-21 20:40:48	→	yauhsien has joined #haskell
2021-09-21 20:47:22	ℹ	irc: disconnected from server
2021-09-21 20:47:41	→	oxide has joined #haskell
2021-09-21 20:47:41	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-21 20:47:41	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-21 20:47:41	ℹ	Channel #haskell: 721 nicks (1 op, 0 voices, 720 normals)
2021-09-21 20:47:42	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-21 20:48:03	monochrom	The second point is I define "later (P f) = P (\s -> case f s of ~(s2, a) -> (s2, a))"
2021-09-21 20:48:32	monochrom	Note how it increases laziness at the right place.
2021-09-21 20:49:00	→	Guest70 has joined #haskell
2021-09-21 20:49:08	monochrom	And it is analogous to unsafeInterleaveIO.
2021-09-21 20:49:24	←	yauhsien has quit (Remote host closed the connection)
2021-09-21 20:50:27	monochrom	So now I can have my own lazier version of replicateM.  rep n p = do { x <- p; xs <- later (rep (n-1) p); pure (x:xs) }
2021-09-21 20:50:49	ldlework	nerd
2021-09-21 20:51:08	←	wroathe has quit (Ping timeout: 252 seconds)
2021-09-21 20:51:15	monochrom	This will run x<-p, jump ahead to "pure (x:xs)", and delay running rep (n-1) p until you force xs.
2021-09-21 20:52:14	←	ub has quit (Ping timeout: 252 seconds)
2021-09-21 20:52:16	←	merijn has quit (Ping timeout: 264 seconds)
2021-09-21 20:52:25	monochrom	Alternatively, you can decide to make this pervasive, and build the ~(s2, a) lazy pattern right in the definition of >>=.  This is what Control.Monad.Trans.State.Lazy does.
2021-09-21 20:52:55	monochrom	So every m>>=cb is effectively m>>=\a->later(cb a)
2021-09-21 20:53:14	→	gioyik has joined #haskell
2021-09-21 20:54:12	viluon	merijn: any other suggestions? I don't want to introduce a streaming library for something that should not have these performance issues in the first place and I don't like the idea of changing my input parser into a solver – I want reusable code, and I'd like it to perform well when I compose it with other code. Sadly the optimiser is a black box and its decisions are unknowable to me
2021-09-21 20:54:44	→	chris has joined #haskell
2021-09-21 20:54:48	ℹ	chris is now known as Guest8849
2021-09-21 20:56:12	viluon	oh wait, merijn is gone
2021-09-21 20:58:21	←	gioyik has quit (Ping timeout: 276 seconds)
2021-09-21 21:00:13	←	lortabac has quit (Quit: WeeChat 2.8)
2021-09-21 21:00:18	→	mikoto-chan has joined #haskell
2021-09-21 21:04:12	←	gehmehgeh has quit (Ping timeout: 276 seconds)
2021-09-21 21:05:18	→	gehmehgeh has joined #haskell
2021-09-21 21:05:33	←	jpds has quit (Remote host closed the connection)
2021-09-21 21:05:51	Izem	How do you say `reads :: (Read a) => ReadS a` in English? reads has type ...
2021-09-21 21:05:52	→	jpds has joined #haskell
2021-09-21 21:06:39	monochrom	ReadS a, but a has to be an instance of Read
2021-09-21 21:06:39	←	jpds has quit (Remote host closed the connection)
2021-09-21 21:06:53	monochrom	Frankly I wouldn't translate to English.
2021-09-21 21:06:59	→	jpds has joined #haskell
2021-09-21 21:07:03	←	Guest70 has quit (Quit: Client closed)
2021-09-21 21:07:07	←	cfricke has quit (Quit: WeeChat 3.2.1)
2021-09-21 21:07:25	←	jpds has quit (Remote host closed the connection)
2021-09-21 21:07:33	monochrom	It is fair to ask how to work with that type, and how to write your own.
2021-09-21 21:07:45	→	jpds has joined #haskell
2021-09-21 21:07:50	monochrom	"how to translate to English" is an XY problem.
2021-09-21 21:07:59	←	jpds has quit (Remote host closed the connection)
2021-09-21 21:08:03	→	wroathe has joined #haskell
2021-09-21 21:08:04	←	wroathe has quit (Changing host)
2021-09-21 21:08:04	→	wroathe has joined #haskell
2021-09-21 21:08:18	→	jpds has joined #haskell
2021-09-21 21:08:18	monochrom	If programming were better off in English, we would all be in a #cobol channel already.
2021-09-21 21:08:26	←	jpds has quit (Remote host closed the connection)
2021-09-21 21:09:04	→	jpds has joined #haskell
2021-09-21 21:09:20	monochrom	This is why I wrote http://www.vex.net/~trebla/haskell/prerequisite.xhtml
2021-09-21 21:10:00	monochrom	Use your algebra skills, so you are free of the clumsiness of English when code gets real.
2021-09-21 21:11:12	←	jpds has quit (Remote host closed the connection)
2021-09-21 21:11:29	monochrom	English is not compositional. Programming languages are. This is not just Haskell. You can also have "daunting" types and terms in Java and C.
2021-09-21 21:11:31	→	jpds has joined #haskell
2021-09-21 21:12:02	←	x28girl has quit (Remote host closed the connection)
2021-09-21 21:12:46	→	x28girl has joined #haskell
2021-09-21 21:13:00	←	wroathe has quit (Ping timeout: 252 seconds)
2021-09-21 21:13:05	←	jpds has quit (Remote host closed the connection)
2021-09-21 21:13:25	→	jpds has joined #haskell
2021-09-21 21:13:33	←	x28girl has quit (Remote host closed the connection)
2021-09-21 21:14:05	←	jakalx has left #haskell (Error from remote client)
2021-09-21 21:15:26	→	chronon has joined #haskell
2021-09-21 21:15:33	←	doyougnu has quit (Remote host closed the connection)
2021-09-21 21:15:50	→	doyougnu has joined #haskell
2021-09-21 21:19:45	viluon	is there a way to get a more detailed heap profile? the cost centres in the default `-hc` report just end with `...`
2021-09-21 21:19:55	→	merijn has joined #haskell
2021-09-21 21:20:09	viluon	wb merijn 
2021-09-21 21:20:50	←	jokleinn has quit (Ping timeout: 252 seconds)
2021-09-21 21:20:53	←	jpds has quit (Remote host closed the connection)
2021-09-21 21:21:12	→	jpds has joined #haskell
2021-09-21 21:21:26	→	jokleinn has joined #haskell
2021-09-21 21:21:46	←	xiongxin has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-09-21 21:21:48	←	jpds has quit (Remote host closed the connection)
2021-09-21 21:22:34	←	qbt has quit (Quit: Leaving)
2021-09-21 21:23:08	→	yauhsien has joined #haskell
2021-09-21 21:23:17	→	jakalx has joined #haskell
2021-09-21 21:23:27	→	jpds has joined #haskell
2021-09-21 21:24:31	→	yinghua has joined #haskell
2021-09-21 21:24:41	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-21 21:25:39	←	mikoto-chan has quit (Ping timeout: 252 seconds)
2021-09-21 21:26:13	→	mikoto-chan has joined #haskell
2021-09-21 21:26:45	→	__monty__ has joined #haskell
2021-09-21 21:28:32	←	yauhsien has quit (Ping timeout: 252 seconds)
2021-09-21 21:33:49	→	gioyik has joined #haskell
2021-09-21 21:34:28	←	chele has quit (Remote host closed the connection)
2021-09-21 21:35:13	←	Guest8849 has quit (Remote host closed the connection)
2021-09-21 21:35:59	←	pavonia has quit (Quit: Bye!)
2021-09-21 21:38:16	→	lavaman has joined #haskell
2021-09-21 21:42:42	→	chris has joined #haskell
2021-09-21 21:42:45	ℹ	chris is now known as Guest2529
2021-09-21 21:42:50	←	lavaman has quit (Ping timeout: 252 seconds)
2021-09-21 21:44:30	←	gioyik has quit (Ping timeout: 276 seconds)
2021-09-21 21:47:14	←	Guest2529 has quit (Ping timeout: 252 seconds)
2021-09-21 21:47:19	→	zebrag has joined #haskell
2021-09-21 21:47:27	→	tzh has joined #haskell
2021-09-21 21:49:06	→	gioyik has joined #haskell
2021-09-21 21:58:42	→	tommd has joined #haskell
2021-09-21 22:01:01	→	nfd has joined #haskell
2021-09-21 22:01:15	→	cfricke has joined #haskell
2021-09-21 22:04:50	←	nschoe has quit (Ping timeout: 265 seconds)
2021-09-21 22:05:13	→	nschoe has joined #haskell
2021-09-21 22:06:42	←	jokleinn has quit (Quit: WeeChat 3.2)
2021-09-21 22:15:05	→	rond_ has joined #haskell
2021-09-21 22:20:16	→	bonizzi has joined #haskell
2021-09-21 22:20:29	←	juhp has quit (Quit: juhp)
2021-09-21 22:20:43	→	juhp has joined #haskell
2021-09-21 22:21:00	←	on^ has quit (Remote host closed the connection)
2021-09-21 22:22:53	→	_ht has joined #haskell
2021-09-21 22:27:04	←	raehik has quit (Ping timeout: 265 seconds)
2021-09-21 22:27:44	→	raehik has joined #haskell
2021-09-21 22:27:51	←	Izem has quit (Quit: Izem)
2021-09-21 22:28:07	→	Izem has joined #haskell
2021-09-21 22:30:40	→	eggplantade has joined #haskell
2021-09-21 22:31:47	←	cfricke has quit (Ping timeout: 252 seconds)
2021-09-21 22:32:12	←	nschoe has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-09-21 22:32:17	→	dsrt^ has joined #haskell
2021-09-21 22:37:49	←	geekosaur has quit (Remote host closed the connection)
2021-09-21 22:40:00	→	geekosaur has joined #haskell
2021-09-21 22:46:40	dminuoso	monochrom: In English you can compose almost any two sentences, irrespective of whether it's sensible. There's also a man in the shadows with a gun in his eye.
2021-09-21 22:47:53	dminuoso	Izem: I would read that as: forall a, where Read a, reads has type ReadS a.
2021-09-21 22:49:15	dminuoso	monochrom: Im not sure how you teach Haskell, but I think having some uniform way to read out types can be useful at the beginning. It makes answering the question "what is the type of `xyz`" more sensible in a teaching scenario.
2021-09-21 22:49:54	monochrom	I teach how to break it up.
2021-09-21 22:50:14	dminuoso	I dont think of that above type signature as complicated enough to warrant breaking it up..
2021-09-21 22:50:39	monochrom	And the role of each part.
2021-09-21 22:50:41	Izem	dminuoso: Is a an instance of Read?
2021-09-21 22:50:52	dminuoso	Izem: It's *required* to have one.
2021-09-21 22:51:01	←	eggplantade has quit (Remote host closed the connection)
2021-09-21 22:51:21	dminuoso	Izem: The thing with type variables is, the caller/user picks them. They are free to pick *any* type they want for them, as long as the specified constraints are satisfied.
2021-09-21 22:51:58	dminuoso	So the user of `reads` can/has to pick any type they want, but their choice is limited to any type for which an `instance Read` exists.
2021-09-21 22:52:19	Izem	ok
2021-09-21 22:52:24	dminuoso	And its polymorphic. Hence my way of phrasing it "forall a, where Read a, reads has type ReadS a"
2021-09-21 22:52:32	dminuoso	similarly:
2021-09-21 22:52:33	dminuoso	% :t id
2021-09-21 22:52:34	yahb	dminuoso: a -> a
2021-09-21 22:53:04	dminuoso	Id say `id :: a -> a` as "forall a, id has type a to a"
2021-09-21 22:53:06	Izem	id is in the environment already?
2021-09-21 22:53:21	Izem	what does it do?
2021-09-21 22:53:26	monochrom	I teach =>-less types first.  That already is a long story on its own.  There is parametric polymorphism.  There is X->Y and X1->X2->Y, and I spend time showing that it means X1->(X2->Y), how it plays well with (f x1) x2, why it is useful.
2021-09-21 22:54:08	dminuoso	Izem: `id` is a function that is made available in Prelude. It's one of the most simplistic functions you can think of, it just returns its argument.
2021-09-21 22:54:19	Izem	ok
2021-09-21 22:54:25	monochrom	After that, one is ready for classes and instances.  After knowing classes and instances,  "Read a =>" is not a mystery.
2021-09-21 22:54:51	awpr	personally I pronounce the typeclass constraint arrow and the function arrow both as just "arrow".  they're almost the same thing anyway, just that => takes Constraints on the lhs, is invisible/auto-solved in expressions, and is very enthusiastic to specialize
2021-09-21 22:54:55	dminuoso	monochrom: Makes perfect sense. Perhaps I missed something, I had not conversed with Izem before.
2021-09-21 22:54:59	monochrom	My view is that a plea for "what is it in English" stems from having none of the above preparation at all.
2021-09-21 22:55:05	dminuoso	Judging by just that question, it seemed fair to ask.
2021-09-21 22:55:25	awpr	but admittedly for learning it's probably easier to think of constraints as restrictions on allowable types
2021-09-21 22:55:26	dminuoso	But if you have had prior interaction and knew their level of expertise (which perhaps is lower than I assumed)..
2021-09-21 22:55:49	monochrom	As I said, the real question behind is fair to ask.  The translation quesiton is an XY problem.  Lots of students do it.
2021-09-21 22:57:02	→	asivitz has joined #haskell
2021-09-21 22:57:26	dminuoso	awpr: Mmm, I dont think of the constraint arrow and function arrows as the same thing simply because they happen in different places.
2021-09-21 22:57:36	dminuoso	One is a type checker level thing, the other is a runtime thing.
2021-09-21 22:57:47	dminuoso	To equate them seems dangerously confusing.
2021-09-21 22:57:55	awpr	they're both a runtime thing, unless GHC optimizes the constraint away
2021-09-21 22:58:20	awpr	but GHC could equally well optimize away a function arrow, e.g. in spec-constr optimization
2021-09-21 22:58:27	dminuoso	No it's still a type checking thing.
2021-09-21 22:58:33	→	econo has joined #haskell
2021-09-21 22:58:40	awpr	deciding what value to pass is a type-checker thing
2021-09-21 22:59:07	monochrom	At any rate, I had already provided a translation before I explained why I objected.
2021-09-21 22:59:15	awpr	actually receiving the instance dictionary is a runtime thing
2021-09-21 22:59:23	dminuoso	monochrom: oh, I think I missed that singular line when I scrolled.
2021-09-21 22:59:28	←	Izem has quit (Quit: Izem)
2021-09-21 22:59:29	monochrom	But here is the thing.
2021-09-21 22:59:54	dminuoso	awpr: instance dictionary is an implementation detail.
2021-09-21 23:00:05	awpr	heap object is an implementation detail
2021-09-21 23:00:07	monochrom	If you don't have the prerequisite, the translation adds no predictive power. It is "helpful" only in the sense that it makes you feel good.
2021-09-21 23:00:12	dminuoso	Yes, and I dont talk about heap objects. Your point being?
2021-09-21 23:00:33	monochrom	If you have the prerequisite, you won't be asking in the first place.  My students certainly don't.
2021-09-21 23:00:34	awpr	they're still exactly the same construct at runtime, modulo optimizations
2021-09-21 23:01:08	awpr	the only difference is in how it's determined at a given callsite what argument is actually passed
2021-09-21 23:01:36	awpr	for (->) it's a visible argument, and for (=>) it's solved by constraint resolution
2021-09-21 23:01:37	monochrom	Even when they're lost, my students ask more to-the-point questions, such as "what does the 'Read a =>' thing mean" or "where can I find out more about Read".
2021-09-21 23:01:38	→	Izem has joined #haskell
2021-09-21 23:01:58	←	Izem has left #haskell
2021-09-21 23:02:33	dminuoso	awpr: It starts being wrong already because of MMR. 
2021-09-21 23:02:54	dminuoso	Which is not just some "modulo optimization", its a builtin language feature with defined semantics
2021-09-21 23:02:55	→	lavaman has joined #haskell
2021-09-21 23:03:55	awpr	monomorphism restriction just constrains inferred types, no?
2021-09-21 23:04:25	awpr	if the monomorphism restriction affects an expression, then its type doesn't involve a constraint anyway 
2021-09-21 23:04:27	dminuoso	It's to faciliate sharing
2021-09-21 23:04:39	dminuoso	hold on
2021-09-21 23:04:51	dminuoso	why doesnt it involve a constraint anyway?
2021-09-21 23:05:00	←	azimut has quit (Remote host closed the connection)
2021-09-21 23:05:01	awpr	because it's been monomorphized
2021-09-21 23:05:05	dminuoso	So?
2021-09-21 23:05:19	dminuoso	Num Int is a valid constraint to write, if you want.
2021-09-21 23:05:21	→	azimut has joined #haskell
2021-09-21 23:05:37	awpr	yes, but that constraint isn't part of the inferred type, it's solved immediately
2021-09-21 23:06:14	dminuoso	So MMR makes this imaginary function go away?
2021-09-21 23:06:14	→	ub has joined #haskell
2021-09-21 23:06:23	←	gioyik has quit (Ping timeout: 276 seconds)
2021-09-21 23:06:31	dminuoso	So `Num Int => ...` is not a "function" but `Num a => ...` is?
2021-09-21 23:06:53	awpr	there are two expressions that are relevant: the thing that causes the Num constraint, and the larger expression affected by MMR
2021-09-21 23:07:00	dminuoso	I dont know, not sure what valuable insights you can gain from thinking of => as a function arrow.
2021-09-21 23:07:26	→	MQ-17J has joined #haskell
2021-09-21 23:08:47	→	jstolarek has joined #haskell
2021-09-21 23:09:39	awpr	the effect of MMR is just that the inferred type is monomorphized, which usually results in the constraint solver being able to solve and immediately apply the inner term's constraint, so that it doesn't get propagated as a constraint on the inferred type
2021-09-21 23:09:58	monochrom	There was a GHC bug. It was an accidental abstraction leak. It lets you write one of "Read a => String => a" or "Read a -> String -> a", I forgot which, but it was funny.
2021-09-21 23:10:34	←	ub has quit (Ping timeout: 246 seconds)
2021-09-21 23:11:12	awpr	I guess that happened around the time GHC was changed to have Constraint be literally the same thing as Type internally?
2021-09-21 23:11:58	→	gioyik has joined #haskell
2021-09-21 23:12:59	monochrom	Yeah something like that.
2021-09-21 23:13:14	monochrom	ConstraintKind
2021-09-21 23:13:44	monochrom	along with "kind is type too" etc
2021-09-21 23:13:44	awpr	as for what insights: to me it seems to make parametricity clearer.  having a constraint doesn't reduce the strength of parametricity by "magic" because it "makes fewer types legal arguments", it just adds a record argument containing the instance methods to the polytype
2021-09-21 23:16:36	awpr	anyway I definitely think it's valuable to have the other view (constraints as limitations on polymorphism) as another angle, possibly even as the default way of looking at things, I just like to have both available
2021-09-21 23:17:03	←	kuribas has quit (Quit: ERC (IRC client for Emacs 26.3))
2021-09-21 23:20:22	awpr	oh, I missed a key part of one message: `Num Int => ...` is also (using the term loosely) a function.  it's just that GHC won't ever infer that type and make that function, instead it'll immediately solve `Num Int` and apply it to the subexpression that needed it.  if you spell out that constraint, I'm not sure whether GHC will actually do what you said or just optimize it out of existence; I should check
2021-09-21 23:20:45	→	merijn has joined #haskell
2021-09-21 23:20:49	←	juhp has quit (Quit: juhp)
2021-09-21 23:21:03	→	juhp has joined #haskell
2021-09-21 23:22:51	monochrom	I unify "static" and "dynamic" with hugs and ghci
2021-09-21 23:23:12	awpr	yes, it will let you make that into an actual function: paste.tomsmeding.com/9DPBxuwa
2021-09-21 23:23:21	monochrom	@quote lambdabot runghc
2021-09-21 23:23:22	lambdabot	No quotes match. Listen, broccoli brains, I don't have time to listen to this trash.
2021-09-21 23:23:34	monochrom	@quote monochrom runghc
2021-09-21 23:23:34	lambdabot	monochrom says: just add #! /usr/bin/runghc to your haskell file. then type errors occur at runtime only.
2021-09-21 23:23:55	tomsmeding	or -fdefer-type-errors
2021-09-21 23:24:06	←	favonia has quit (Ping timeout: 265 seconds)
2021-09-21 23:24:16	monochrom	Oh, it was a long time ago, -fdefer-type-errors did not exist.
2021-09-21 23:24:58	monochrom	Also, probably s/with/by/
2021-09-21 23:25:04	monochrom	This is why I hate English.
2021-09-21 23:25:53	→	yauhsien has joined #haskell
2021-09-21 23:25:55	→	cfricke has joined #haskell
2021-09-21 23:26:07	monochrom	awpr, did you need to turn on an extension, maybe FlexibleContext, to legalize Num Int?
2021-09-21 23:26:15	awpr	yep, exactly that
2021-09-21 23:26:28	awpr	++'s'
2021-09-21 23:26:58	monochrom	This is why I hate meaningful names cast in English.
2021-09-21 23:27:25	awpr	GHC proposal: rename all language extensions into Lojban
2021-09-21 23:27:38	monochrom	Chinese is a bit better in this regard, free of that kind of hair splitting.
2021-09-21 23:28:08	awpr	no singular/plural distinction on the basic forms of nouns?
2021-09-21 23:28:17	monochrom	None.
2021-09-21 23:28:26	monochrom	And no preposition madness either.
2021-09-21 23:28:26	awpr	cool, same reason I reached for Lojban
2021-09-21 23:29:14	awpr	but I think Chinese might just slightly take the edge w.r.t. number of fluent speakers
2021-09-21 23:30:40	←	yauhsien has quit (Ping timeout: 264 seconds)
2021-09-21 23:30:47	c_wraith	I've heard that Chinese has an issue with reading and writing not being symmetric. A lot more native speakers can read than can write. (It's much easier to recognize characters than to remember them without a visual prompt)
2021-09-21 23:31:21	gehmehgeh	Those Lojban language examples on Wikipedia look like something Cthulu would say :D
2021-09-21 23:31:35	→	Brumaire has joined #haskell
2021-09-21 23:31:39	gehmehgeh	(I hadn't heard about Lojban und thought I look it up)
2021-09-21 23:31:57	monochrom	I doubt it. I mean I doubt that it is more than other languages.
2021-09-21 23:32:56	geekosaur	it used to be called logban, iirc
2021-09-21 23:33:03	geekosaur	er, loglan
2021-09-21 23:33:22	monochrom	Any of you claim you have the same fluency in writing "zygomorphism" as you are fluent in reading it?
2021-09-21 23:33:32	c_wraith	synthetic words like that are easy to write
2021-09-21 23:33:52	⚡	geekosaur has less problem reading or writing it than understanding it
2021-09-21 23:33:54	c_wraith	the difficulty in writing in English is when you *don't* know where the loan words originate
2021-09-21 23:35:45	geekosaur	yoğurt
2021-09-21 23:36:17	monochrom	OK, people mix up "effect" and "affect".
2021-09-21 23:36:54	gehmehgeh	inapt and inept :D
2021-09-21 23:36:55	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-21 23:37:26	→	MQ-17J has joined #haskell
2021-09-21 23:37:27	gehmehgeh	(Tought, inapt and inept at least sound different)
2021-09-21 23:38:03	monochrom	You know, to someone like me with ESL background, they sound too similar.
2021-09-21 23:38:20	→	favonia has joined #haskell
2021-09-21 23:39:08	monochrom	Generally we have difficulty distinguishing, or reproducing the difference of, "at" and "et".
2021-09-21 23:39:30	monochrom	Some of us can't even draw a line between "name" and "nam".
2021-09-21 23:39:56	monochrom	You will hear some of us saying "my nam is monochrom, I like to play gams".
2021-09-21 23:41:04	Rembane	manachram! 
2021-09-21 23:41:06	⚡	Rembane nods 
2021-09-21 23:42:46	geekosaur	I find that interesting because, so far as English has reliable rules, that's one of them
2021-09-21 23:44:08	monochrom	But there is something about, it takes several years, and a very young and plastic brain, to train to recognize that there is a difference.
2021-09-21 23:44:16	monochrom	any difference.
2021-09-21 23:44:52	monochrom	I have trouble telling apart red hair and blonde hair.  This is why I didn't see enough examples when I was a child.
2021-09-21 23:45:02	gehmehgeh	monochrom: what dialect/variant of the English language are you speaking?
2021-09-21 23:45:26	monochrom	s/why/because/
2021-09-21 23:46:28	monochrom	You will have trouble telling apart, say, Chinese faces from Japanese faces from Korean faces.  This is because you didn't see enough examples when you were a child.  East Asian people like me can tell them apart, we saw enough examples.
2021-09-21 23:46:41	←	gioyik has quit (Ping timeout: 276 seconds)
2021-09-21 23:46:49	gehmehgeh	monochrom: I think I can tell them apart, too.
2021-09-21 23:46:52	gehmehgeh	monochrom: I'm from Germany
2021-09-21 23:47:18	gehmehgeh	That is, generally. Some people have faces that could come from anywhere
2021-09-21 23:47:18	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-21 23:47:19	monochrom	I don't know. I started in Hong Kong. I am in Canada. I have heard British, American, Canadian, perhaps also Singapore and Polish.
2021-09-21 23:47:41	ldlework	awpr: did you see the latest graph
2021-09-21 23:47:44	geekosaur	"American" has plenty of dialects all by itself
2021-09-21 23:47:59	gehmehgeh	Canadian being one of them ;)
2021-09-21 23:48:30	awpr	ldlework: I think so, with 14 classes and full method listings for them?
2021-09-21 23:48:36	monochrom	I had a prof from Singapore who pronouced "library" by putting the accent on the "y".
2021-09-21 23:48:44	→	MQ-17J has joined #haskell
2021-09-21 23:48:45	→	eggplantade has joined #haskell
2021-09-21 23:48:55	ldlework	yeah this one https://github.com/dustinlacewell/haskell-typeclass-atlas/blob/master/atlas.png?raw=true
2021-09-21 23:49:04	awpr	y
2021-09-21 23:49:15	→	gioyik has joined #haskell
2021-09-21 23:50:06	monochrom	So imagine "comprehend" applied to "library"
2021-09-21 23:54:17	monochrom	Nice class atlas.
2021-09-21 23:54:42	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-21 23:55:27	monochrom	Ugh where are Bounded, Enum, Show, Read? :)
2021-09-21 23:56:26	←	gehmehgeh has quit (Quit: Leaving)
2021-09-21 23:57:41	zzz	what's a good resource to learn about kind signatures?
2021-09-22 00:01:10	→	amahl has joined #haskell
2021-09-22 00:01:59	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-22 00:03:05	→	gehmehgeh has joined #haskell
2021-09-22 00:04:52	←	lavaman has quit (Ping timeout: 264 seconds)
2021-09-22 00:06:19	Franciman	is there a way to make cabal output Core code of the files in the project?
2021-09-22 00:07:01	awpr	does `ghc-options: -ddump-simpl` work?
2021-09-22 00:07:18	→	neurocyte013 has joined #haskell
2021-09-22 00:07:18	←	neurocyte013 has quit (Changing host)
2021-09-22 00:07:18	→	neurocyte013 has joined #haskell
2021-09-22 00:07:55	→	MQ-17J has joined #haskell
2021-09-22 00:11:48	←	neurocyte013 has quit (Client Quit)
2021-09-22 00:13:08	→	neurocyte013 has joined #haskell
2021-09-22 00:13:08	←	neurocyte013 has quit (Changing host)
2021-09-22 00:13:08	→	neurocyte013 has joined #haskell
2021-09-22 00:13:33	←	viluon has quit (Quit: Connection closed for inactivity)
2021-09-22 00:19:53	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-22 00:19:55	←	mikoto-chan has quit (Quit: mikoto-chan)
2021-09-22 00:20:14	→	MQ-17J has joined #haskell
2021-09-22 00:23:00	←	ubert has quit (Remote host closed the connection)
2021-09-22 00:26:21	←	gioyik has quit (Ping timeout: 276 seconds)
2021-09-22 00:26:44	←	cfricke has quit (Ping timeout: 252 seconds)
2021-09-22 00:27:20	→	ubert has joined #haskell
2021-09-22 00:30:03	ℹ	irc: disconnected from server
2021-09-22 16:29:24	→	oxide has joined #haskell
2021-09-22 16:29:24	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-22 16:29:24	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-22 16:29:24	ℹ	Channel #haskell: 708 nicks (1 op, 0 voices, 707 normals)
2021-09-22 16:29:24	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-22 16:30:19	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-22 16:30:57	→	merijn has joined #haskell
2021-09-22 16:33:19	←	nitrix has quit (Remote host closed the connection)
2021-09-22 16:33:40	←	eggplantade has quit (Ping timeout: 264 seconds)
2021-09-22 16:34:10	→	jespada has joined #haskell
2021-09-22 16:35:15	→	nitrix has joined #haskell
2021-09-22 16:35:31	←	nitrix has quit (Changing host)
2021-09-22 16:35:31	→	nitrix has joined #haskell
2021-09-22 16:36:27	←	michalz has quit (Remote host closed the connection)
2021-09-22 16:37:04	→	michalz has joined #haskell
2021-09-22 16:38:33	→	Cajun has joined #haskell
2021-09-22 16:39:06	←	max22- has quit (Ping timeout: 268 seconds)
2021-09-22 16:39:40	→	ubert has joined #haskell
2021-09-22 16:42:47	←	azeem has quit (Read error: Connection reset by peer)
2021-09-22 16:43:15	→	azeem has joined #haskell
2021-09-22 16:44:13	←	pooryorick has quit (Ping timeout: 265 seconds)
2021-09-22 16:46:11	←	azeem has quit (Read error: Connection reset by peer)
2021-09-22 16:46:36	→	chomwitt has joined #haskell
2021-09-22 16:47:11	→	azeem has joined #haskell
2021-09-22 16:50:35	→	__monty__ has joined #haskell
2021-09-22 16:50:39	←	betelgeuse has quit (Ping timeout: 260 seconds)
2021-09-22 16:51:13	→	betelgeuse has joined #haskell
2021-09-22 16:54:34	→	pbrisbin has joined #haskell
2021-09-22 16:56:30	→	Guest68 has joined #haskell
2021-09-22 16:58:59	←	Guest68 has quit (Client Quit)
2021-09-22 17:02:28	→	Guest07 has joined #haskell
2021-09-22 17:03:40	←	pbrisbin has quit (Ping timeout: 246 seconds)
2021-09-22 17:04:58	Guest07	Hello, I just installed stack and started a new project. But it locked base at >= 4.7 and < 5
2021-09-22 17:05:03	Guest07	Is this normal?
2021-09-22 17:05:39	dminuoso	Guest07: stack resolves packages using its resolvers, so everything is tied to whats in them anyway
2021-09-22 17:05:47	dminuoso	by default, anyhow
2021-09-22 17:06:29	merijn	Guest07: It's locked at *one* specific version of base
2021-09-22 17:06:49	merijn	Guest07: Base is hard-wired into GHC and any resolver only includes one GHC version anyway
2021-09-22 17:07:09	merijn	tbh, if it's generating ">= 4.7 && < 5" constraints on base that's bogus anyway
2021-09-22 17:08:05	Guest07	yes the base constraints are in my package.yaml. But stack.yaml references an lts resolver
2021-09-22 17:08:28	Guest07	specifically: https://raw.githubusercontent.com/commercialhaskell/stackage-snapshots/master/lts/18/10.yaml
2021-09-22 17:09:13	Guest07	merijn: so the contraints are redundant? Or are they there for when I upgrade the resolver?
2021-09-22 17:09:49	merijn	Guest07: Well, if you want anyone who doesn't use stack to have any hope of compiling/using your code, they're not redundant
2021-09-22 17:10:41	merijn	Guest07: My objection is that, unless you've tested code with other versions/ranges, your range should be "the PVP compatible range of what you're using *now*", so if stack is inserting wider ranges (like "4.7 >= && <5") that's just bogus
2021-09-22 17:13:04	Guest07	maybe there is something game breaking about base = 5, this is the latest lts afterall
2021-09-22 17:14:14	merijn	base 5 doesn't exist
2021-09-22 17:14:35	merijn	It's claiming the code works with "all future versions of base until version 5"
2021-09-22 17:14:48	Guest07	that can't be very sensible
2021-09-22 17:14:48	merijn	Which is obviously nonsense, since you dunno what will change in future versions of base
2021-09-22 17:15:00	merijn	It isn't
2021-09-22 17:15:31	merijn	Guest07: Incidentally, related to discussion of bounds: https://pvp.haskell.org/
2021-09-22 17:15:32	Guest07	merijn: thanks for the explanations
2021-09-22 17:16:36	←	azeem has quit (Ping timeout: 265 seconds)
2021-09-22 17:18:04	→	azeem has joined #haskell
2021-09-22 17:20:22	←	azeem has quit (Read error: Connection reset by peer)
2021-09-22 17:20:26	←	Guest07 has quit (Ping timeout: 256 seconds)
2021-09-22 17:20:30	→	azeem has joined #haskell
2021-09-22 17:23:36	merijn	Also, you should commit the generated cabal file from your package into the repository (and, personal opinion incoming: probably ditch package.yaml entirely and just use the cabal file directly)
2021-09-22 17:25:34	maerwald	burn package.yaml
2021-09-22 17:25:44	maerwald	the pain it has caused us
2021-09-22 17:31:34	←	michalz has quit (Remote host closed the connection)
2021-09-22 17:32:18	→	michalz has joined #haskell
2021-09-22 17:33:46	←	michalz has quit (Remote host closed the connection)
2021-09-22 17:34:26	→	michalz has joined #haskell
2021-09-22 17:38:08	→	yauhsien has joined #haskell
2021-09-22 17:39:54	→	shapr has joined #haskell
2021-09-22 17:44:31	←	yauhsien has quit (Remote host closed the connection)
2021-09-22 17:50:34	→	raehik has joined #haskell
2021-09-22 17:50:58	→	pooryorick has joined #haskell
2021-09-22 17:51:05	⚡	[exa] hands over a box of matches
2021-09-22 17:52:17	→	xiongxin has joined #haskell
2021-09-22 17:52:53	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-22 17:53:33	→	MQ-17J has joined #haskell
2021-09-22 17:53:45	→	[itchyjunk] has joined #haskell
2021-09-22 17:58:16	←	dextaa has quit (Ping timeout: 264 seconds)
2021-09-22 17:59:18	←	bitdex has quit (Quit: = "")
2021-09-22 18:02:08	←	chexum has quit (Remote host closed the connection)
2021-09-22 18:02:32	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-22 18:03:25	→	tj_allemaal has joined #haskell
2021-09-22 18:04:54	→	gehmehgeh has joined #haskell
2021-09-22 18:05:15	→	slowButPresent has joined #haskell
2021-09-22 18:05:20	→	chexum has joined #haskell
2021-09-22 18:06:53	Morrow	I think I've heard that stack includes the bogus bounds on base because Hackage requires it.
2021-09-22 18:07:09	maerwald	Morrow: I use base <100000
2021-09-22 18:07:11	maerwald	xD
2021-09-22 18:07:23	Morrow	lol
2021-09-22 18:07:26	merijn	Morrow: But why bogus bounds instead of just *actual* bounds
2021-09-22 18:07:56	Morrow	Because this is stack-land, where version bounds don't exist!
2021-09-22 18:07:58	merijn	i.e. "base ^>= 4.x" where x = base of the GHC in the resolver
2021-09-22 18:08:11	merijn	That's accepted by hackage and actually reasonable
2021-09-22 18:08:16	maerwald	merijn: meh, most packages work with more than one x
2021-09-22 18:08:36	→	MQ-17J has joined #haskell
2021-09-22 18:08:38	merijn	maerwald: Sure, but if people don't *test* that they shouldn't *specify* it
2021-09-22 18:08:56	maerwald	PVP failed
2021-09-22 18:09:21	merijn	And that's a solid argument for "failing even more stuff"?
2021-09-22 18:09:47	int-e	applying PVP to base is not worth the hassle
2021-09-22 18:10:49	merijn	int-e: And yet shit breaks every GHC release
2021-09-22 18:11:00	merijn	There are at most 2 GHC releases a year
2021-09-22 18:11:06	int-e	A lot of stuff just keeps working.
2021-09-22 18:11:15	merijn	Which means worst case scenario, relax your base constraint twice a year
2021-09-22 18:11:28	merijn	(you need to update your CI for the new GHC anyway...)
2021-09-22 18:11:32	merijn	"oh god, the horror"
2021-09-22 18:11:50	merijn	int-e: If it keeps working you just edit one number twice a year :O
2021-09-22 18:12:10	merijn	ez pz
2021-09-22 18:12:54	maerwald	merijn: lol
2021-09-22 18:13:02	maerwald	right... file an NMU that takes half a year to process
2021-09-22 18:13:22	merijn	maerwald: That says something about "unmaintained packages" not "how constraints are too hard"
2021-09-22 18:13:36	maerwald	idc what it says, it's annoying
2021-09-22 18:14:10	int-e	merijn: So I'd have 3 times the number of releases for this silly little thing: https://hackage.haskell.org/package/ivar-simple
2021-09-22 18:14:24	int-e	(package size and stability is clearly a factor)
2021-09-22 18:14:37	merijn	int-e: You don't even have to make a new release
2021-09-22 18:14:44	merijn	You can revise the bound
2021-09-22 18:15:01	int-e	I can also do that when things break
2021-09-22 18:15:03	⚡	int-e shrugs
2021-09-22 18:16:37	maerwald	int-e: exactly
2021-09-22 18:16:48	int-e	Personally I hate people having strict upper bounds on base because it makes it harder to try out a new version of ghc
2021-09-22 18:16:56	int-e	--allow-newer=base is too crude
2021-09-22 18:17:28	merijn	int-e: That's what ^>= is for? Then you can just relax all those bounds at once
2021-09-22 18:17:39	→	fendor_ has joined #haskell
2021-09-22 18:17:47	maerwald	merijn: ^>= isn't enough
2021-09-22 18:17:50	←	waleee has quit (Quit: WeeChat 3.2.1)
2021-09-22 18:18:43	maerwald	it's bad syntax... I want to express a) 4.7-4.9 is tested, below 4.7 is broken shite, above 4.9 may work
2021-09-22 18:19:55	merijn	^>= {4.7, 4.8, 4.9}
2021-09-22 18:20:00	maerwald	yeah, ugh
2021-09-22 18:20:04	→	waleee has joined #haskell
2021-09-22 18:20:19	←	fendor has quit (Ping timeout: 252 seconds)
2021-09-22 18:20:28	maerwald	get someone to use this
2021-09-22 18:20:36	→	pbrisbin has joined #haskell
2021-09-22 18:20:44	merijn	maerwald: Do you have better syntax?
2021-09-22 18:20:56	maerwald	probably if I thought hard enough
2021-09-22 18:21:09	maerwald	the point is... this is bolted on stuff that most ppl don't even know
2021-09-22 18:21:14	maerwald	and  came too late
2021-09-22 18:21:46	merijn	So instead of "better late than never and educating people" you're solution is "fuck it, let's throw in the towel and give up"
2021-09-22 18:21:48	maerwald	damage is done, we're going to add stackage resolvers to cabal and then move on
2021-09-22 18:22:04	maerwald	(well, more complex contraints, but ...)
2021-09-22 18:22:23	maerwald	so no one is gonna rely heavily on PVP anymore anyway
2021-09-22 18:22:57	maerwald	and have you ever seen a haskell maintainner backport bugfixes to a previous major version?
2021-09-22 18:23:22	maerwald	so to get the bugfix you gotta upgrade to new API anyway
2021-09-22 18:23:32	maerwald	what's the point of PVP here
2021-09-22 18:26:51	int-e	^>= {4.7, 4.8, 4.9} still doesn't allow people to *try* 4.10 without relaxing bounds.
2021-09-22 18:27:24	merijn	int-e: Except you can relax ^>= without relaxing regular bounds
2021-09-22 18:27:51	→	dextaa has joined #haskell
2021-09-22 18:27:52	merijn	int-e: The distinction is ^>= "not known to work with newer" whereas "<" says "known to not work with newer"
2021-09-22 18:28:26	merijn	int-e: The main problem with allow-newer was the inability to relax unknown bounds without immediately *also* breaking bounds known to not work
2021-09-22 18:29:23	int-e	So, the documentation is lying about ^>= being equivalent to >= ... <?
2021-09-22 18:29:46	merijn	int-e: It's equivalent in what it *does*, it's not equivalent in *meaning*
2021-09-22 18:29:56	merijn	int-e: i.e. it's equivalent in terms of what the solver will do
2021-09-22 18:30:11	merijn	It's not equivalent in terms of "supported operations on the commandline"
2021-09-22 18:30:50	merijn	int-e: You will get the same buildplans with ">= ... <" and "^>=", but you can choose to *only* relax ^>= bounds without touching < bounds on the cabal-install commandline
2021-09-22 18:31:07	←	dextaa has quit (Read error: Connection reset by peer)
2021-09-22 18:31:17	merijn	Else there'd be no point to having ^>=
2021-09-22 18:31:19	→	dextaa has joined #haskell
2021-09-22 18:31:31	maerwald	no, how many people know this? :)
2021-09-22 18:31:35	maerwald	s/no/now/
2021-09-22 18:31:53	maerwald	version policies only work if people understand them 
2021-09-22 18:32:04	int-e	Also, the documentation of that feature sucks. I looked around for a long time and finally found it described for cabal.project files.
2021-09-22 18:32:10	maerwald	yeah
2021-09-22 18:32:15	int-e	I didn't know.
2021-09-22 18:32:44	maerwald	bad syntax, bad documentation and too late... I think this feature isn't going to save us
2021-09-22 18:32:53	merijn	int-e: Maybe, but it was implemented during the time that all development and maintenance was basically just hvr and Oleg
2021-09-22 18:33:46	merijn	int-e: Lots of experienced Haskellers like to complain about the inadequacy of tool documentation, but not many step up and help...
2021-09-22 18:34:12	maerwald	I already have enough stuff to document :>
2021-09-22 18:34:26	merijn	So does everyone
2021-09-22 18:34:35	→	zardoz has joined #haskell
2021-09-22 18:34:53	maerwald	if you want me to redo cabal docs, I'm afraid that will be a paid job
2021-09-22 18:35:05	merijn	I just get tired of people "just pointing out problems". Everyone already knows they're problems
2021-09-22 18:35:19	merijn	Either you help address them, or stop complaining
2021-09-22 18:35:43	int-e	I know. I also know that documenting stuff is hard, because documentation often needs to be redundant to be useful, but it's hard to think of all the perspectives, and it's also hard to overcome the instinct of not repeating oneself.
2021-09-22 18:35:48	zardoz	hi. what are your thoughts of using Show/Read instance for config files? I have something like this: data Action = MoveWindow Int Int | ResizeWindow Int Int | MinimizeWindow | MaximizeWindow deriving (Show, Read)
2021-09-22 18:35:54	maerwald	I don't think anyone is complaining. I'm merely stating my opinion that a) upper bounds are  horrid and b) Caret operator isn't gonna solve it
2021-09-22 18:35:57	merijn	zardoz: Terrible
2021-09-22 18:35:59	dminuoso	zardoz: No.
2021-09-22 18:36:02	zardoz	why?
2021-09-22 18:36:08	dminuoso	So many reasons.
2021-09-22 18:36:13	merijn	zardoz: I only read the first sentence and I already know whatever else comes next is terrible
2021-09-22 18:36:16	←	cheater has quit (Ping timeout: 252 seconds)
2021-09-22 18:36:17	maerwald	zardoz: use ini
2021-09-22 18:36:19	zardoz	I'm listening :P
2021-09-22 18:36:26	dminuoso	There's essentially non-existent useful errors for Read
2021-09-22 18:36:29	maerwald	https://hackage.haskell.org/package/ini
2021-09-22 18:36:30	int-e	merijn: It's not so much a complaint as an explanation why this feature is probably hardly known at all.
2021-09-22 18:36:33	dminuoso	The format is horrid and hard to explain for non-haskellers
2021-09-22 18:36:35	zardoz	maerwald, I am actually using ini. this is "action" property of an ini file
2021-09-22 18:36:40	dminuoso	Show also risks leaking secrets in the wrong places
2021-09-22 18:36:41	merijn	Read has no errors, Read is slow, Read is implementation specific
2021-09-22 18:36:50	maerwald	ini is great
2021-09-22 18:36:52	merijn	Show is implementation specific too
2021-09-22 18:37:21	merijn	zardoz: Many people think "I know, I'll just tie my external format directly to my internal datatypes. It'll be easy"
2021-09-22 18:37:30	dminuoso	zardoz: Personally Im quite fond of config-schema
2021-09-22 18:37:32	int-e	> read ('"' : repeat ' ') :: Int
2021-09-22 18:37:35	merijn	These same people are in for lots of lots of pain in the medium to long future
2021-09-22 18:37:38	lambdabot	 mueval-core: Time limit exceeded
2021-09-22 18:38:08	dminuoso	It has a nice config format with an automatically derivable parser, good error diagnostics, and built-in documentation generation of expected format.
2021-09-22 18:38:16	dminuoso	With a mild dependency overhead.
2021-09-22 18:38:39	dminuoso	ini is also fine, but potentially too limiting depending on your needs
2021-09-22 18:38:40	zardoz	parsing this myself isn't too hard, but seems like a a double effort. and I like the syntax Show/Read gives me. though I didn't know Read is implementation specific (not that it matters at this point, but still)
2021-09-22 18:38:41	←	tj_allemaal has left #haskell
2021-09-22 18:38:44	merijn	zardoz: The number of times I've added an explicit conversion/parsing step between "external data format" and "internal data types" and regretted it, is zero. The number of times I *didn't* do that and regretted it is: literally every time
2021-09-22 18:39:04	dminuoso	zardoz: you have *no* useful error other than "Nope!" if there's any syntax error.
2021-09-22 18:39:17	dminuoso	take the extra time and set up proper parsing
2021-09-22 18:39:22	zardoz	dminuoso, error is easy to add. wrong action in section X at property Y
2021-09-22 18:39:26	dminuoso	nope, its not
2021-09-22 18:39:29	zardoz	wrong action syntax*
2021-09-22 18:39:38	dminuoso	`readMaybe` gives you Nothing.
2021-09-22 18:39:38	zardoz	well I did it :P
2021-09-22 18:39:39	dminuoso	That's it.
2021-09-22 18:39:46	zardoz	right. that's enough for error above
2021-09-22 18:40:05	dminuoso	"invalid config" is quite useless if you dont even know what's wrong.
2021-09-22 18:40:18	dminuoso	you dont have "wrong action in section X at property Y" with read.
2021-09-22 18:40:24	dminuoso	It's simply "
2021-09-22 18:40:26	dminuoso	"nope"
2021-09-22 18:40:35	zardoz	I am parsing ini file manually. read is just used to parse a single line of a single property in an ini file
2021-09-22 18:41:00	→	mikoto-chan has joined #haskell
2021-09-22 18:41:29	→	timCF has joined #haskell
2021-09-22 18:42:03	zardoz	(well, one line per property, and there's one action property in every ini section)
2021-09-22 18:43:15	→	machinedgod has joined #haskell
2021-09-22 18:43:52	zardoz	example of test ini file: https://pastebin.com/gegbbiP7
2021-09-22 18:43:58	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-22 18:44:36	→	cheater has joined #haskell
2021-09-22 18:44:39	zardoz	so I have to parse the ini file, get all the sections, get target/action properties, and then I send those lines to readMaybe. so I know exactly what failed
2021-09-22 18:44:47	zardoz	so error messages are not an issue. other things might be though
2021-09-22 18:47:49	→	yauhsien has joined #haskell
2021-09-22 18:48:16	→	MQ-17J has joined #haskell
2021-09-22 18:50:22	←	qbt has quit (Ping timeout: 265 seconds)
2021-09-22 18:50:41	←	dextaa has quit (Ping timeout: 260 seconds)
2021-09-22 18:50:52	→	favonia has joined #haskell
2021-09-22 18:51:05	→	wroathe has joined #haskell
2021-09-22 18:51:05	←	wroathe has quit (Changing host)
2021-09-22 18:51:05	→	wroathe has joined #haskell
2021-09-22 18:51:49	←	timCF has quit (Quit: leaving)
2021-09-22 18:52:01	←	chexum has quit (Remote host closed the connection)
2021-09-22 18:52:14	→	chexum has joined #haskell
2021-09-22 18:52:39	←	yauhsien has quit (Ping timeout: 252 seconds)
2021-09-22 18:52:52	←	acidjnk has quit (Ping timeout: 246 seconds)
2021-09-22 18:54:36	→	thyriaen has joined #haskell
2021-09-22 18:55:37	←	waleee has quit (Quit: WeeChat 3.3)
2021-09-22 18:55:52	→	zebrag has joined #haskell
2021-09-22 19:04:03	→	max22- has joined #haskell
2021-09-22 19:05:46	→	dextaa has joined #haskell
2021-09-22 19:06:39	←	hrnz has quit (Ping timeout: 240 seconds)
2021-09-22 19:07:09	←	noddy has quit (Ping timeout: 240 seconds)
2021-09-22 19:07:33	←	dyniec has quit (Ping timeout: 252 seconds)
2021-09-22 19:08:04	→	dyniec has joined #haskell
2021-09-22 19:08:07	→	noddy has joined #haskell
2021-09-22 19:08:40	←	sheddow has quit (Ping timeout: 256 seconds)
2021-09-22 19:08:54	→	robbert-vdh has joined #haskell
2021-09-22 19:12:00	→	hrnz has joined #haskell
2021-09-22 19:12:47	ldlework	"An astute reader might have noticed that the mapping from integers to adders follows from the second interpretation of the type signature of mappend as m->(m->m). It tells us that mappend maps an element of a monoid set to a function acting on that set."
2021-09-22 19:12:49	ldlework	huh
2021-09-22 19:14:05	robbert-vdh	Anyone know of some kind of trick to get some sort of default value with the ImplicitParameters extension? Basically, I have a function that evaluates a form with an implicit parameter set, and I'd like it to not do that when the parameter is already set. (kind of like how withFrozenCallStack doesn't do anything when the call stack is already frozen)
2021-09-22 19:14:33	←	geekosaur has quit (Killed (NickServ (GHOST command used by allbery_b)))
2021-09-22 19:14:33	→	allbery_b has joined #haskell
2021-09-22 19:14:36	ℹ	allbery_b is now known as geekosaur
2021-09-22 19:15:18	lortabac	robbert-vdh: maybe you can use a Maybe?
2021-09-22 19:15:18	robbert-vdh	I was hoping that using an overlapping type class with the parameter as a constraint would do the trick, but the type checker obviously doesn't like that :)
2021-09-22 19:16:26	robbert-vdh	lortabac: Is there some implementation detail that lets `(?foo :: Maybe Bar)` default to Nothing? (I'd also not want this all the time, I just need this fallback behaviour in a single function)
2021-09-22 19:19:30	→	Brumaire has joined #haskell
2021-09-22 19:19:48	→	mc47 has joined #haskell
2021-09-22 19:19:58	→	viluon has joined #haskell
2021-09-22 19:20:38	robbert-vdh	Basically, as an XY problem, if something along the lines of this would work (so, kinda like C++'s SFINAE) then that would be great https://hastebin.com/wobuvukubi.hs
2021-09-22 19:20:49	←	Morrow has quit (Ping timeout: 252 seconds)
2021-09-22 19:21:22	←	phma has quit (Read error: Connection reset by peer)
2021-09-22 19:22:25	lortabac	robbert-vdh: I would use a Reader and start the whole thing with runReader ... Nothing
2021-09-22 19:22:38	lortabac	then you can override the value with local
2021-09-22 19:24:30	→	phma has joined #haskell
2021-09-22 19:24:36	lortabac	what you want to achieve is probably doable but I wouldn't rely on such tricks
2021-09-22 19:25:43	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-22 19:26:00	dminuoso	ldlework: So this is the observation that functions take only a single argument.
2021-09-22 19:26:08	dminuoso	lortabac: mappend takes a single argument and returns a function.
2021-09-22 19:26:12	→	MQ-17J has joined #haskell
2021-09-22 19:26:13	dminuoso	Woah. This is confusing.
2021-09-22 19:26:16	dminuoso	% :t mappend
2021-09-22 19:26:16	yahb	dminuoso: Monoid a => a -> a -> a
2021-09-22 19:26:28	dminuoso	lortabac: ^- This parses as `Monoid a => a -> (a -> a)`
2021-09-22 19:26:47	dminuoso	And again. sorry. ldlework - somehow I expected weechat to do tabcompletion a particular way.
2021-09-22 19:26:48	→	shriekingnoise has joined #haskell
2021-09-22 19:27:27	ldlework	dminuoso: Sure, but I already knew that. It's the realization in that doing so there is a CT arrow in play.
2021-09-22 19:27:37	dminuoso	A CT arrow?
2021-09-22 19:28:04	←	Brumaire has quit (Ping timeout: 265 seconds)
2021-09-22 19:28:13	→	Brumaire has joined #haskell
2021-09-22 19:28:18	ldlework	 category theory arrow
2021-09-22 19:28:43	[exa]	I'm not sure if this arrow is that much abstract
2021-09-22 19:28:48	ldlework	I'm reading Milewski
2021-09-22 19:29:42	dminuoso	Good to see that beginners are still misdirected into the category theory trap.
2021-09-22 19:29:44	robbert-vdh	lortabac: It would need to be an implicit parameter, so that's not really an option. (without refactoring ~30k LoC to operate within a monad) We're currently hijacking HasCallStack and that works, but it would be much nicer to have a separate implicit parameter.
2021-09-22 19:30:07	dminuoso	Haskell has been losing its reputation as "being hard and requiring category theory" lately
2021-09-22 19:30:34	ldlework	dminuoso: HFFP very much gave me that exact impression. It is simply the fact that at this point I am merely curious now.
2021-09-22 19:30:54	lortabac	honestly I don't get why so many beginners want to learn Haskell and category theory at the same time
2021-09-22 19:31:01	lortabac	it makes their lives much harder
2021-09-22 19:31:19	→	eggplantade has joined #haskell
2021-09-22 19:31:29	dminuoso	With what I know of category theory now, I wouldn't reapproach it unless I happened to pick up some random fields of mathematics, just so category theory would make more sense..
2021-09-22 19:31:32	[exa]	ldlework: [*imperator voice:*] good, gooood.
2021-09-22 19:31:36	ldlework	I have been coding for a long time. It took about 6 days to consume Haskell as a normal ML and start writing graphical and network applications of it
2021-09-22 19:32:00	dminuoso	Merely learning CT for Haskell is as useful as learning group theory for adding numbers..
2021-09-22 19:32:12	ldlework	I have simply been hooked by learning about the abstract side of things. I come from a philosophy background so I'm interested in this more general structure.
2021-09-22 19:32:17	dminuoso	At least that's how I feel about it
2021-09-22 19:33:19	→	lavaman has joined #haskell
2021-09-22 19:33:23	ldlework	An aquaintance of mine tried to get me into Haskell for years, and simply could not help himself from presenting it in the verbiage of category theory which consistently put me off. I refused to believe I needed to know all this crap just to write programs.
2021-09-22 19:34:07	ldlework	But now that I've got the uptake of Haskell as just a programming language, I guess I'm finally at a place where I'm curious to find out about this other stuff for its own right.
2021-09-22 19:34:09	ldlework	Something like that
2021-09-22 19:35:00	←	wroathe has quit (Ping timeout: 252 seconds)
2021-09-22 19:35:19	[exa]	CT is sometimes great for discovering structures&relations that are not obvious at all, and haskell programming kinda encourages that
2021-09-22 19:35:40	lortabac	robbert-vdh: I think the sane way of doing it is to set the implicit parameter to Nothing before the whole computation starts
2021-09-22 19:35:57	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-22 19:36:16	lortabac	robbert-vdh: you probably need to add the constraint to a couple of signatures, but that's better than refactoring 30k lines
2021-09-22 19:36:46	[exa]	ldlework: as with the monoids, it might be useful to see they're isomorphic to functions tat paste tiny amount of stuff to the other stuff, sometimes later enjoying this fact by pasting the functions together with <> or mconcat without much extra thinking
2021-09-22 19:37:29	[exa]	but like, don't overdo it
2021-09-22 19:37:36	ldlework	[exa]: I do suspect that my struggle will being able to keep these generalizations in mind while actually writing code
2021-09-22 19:37:49	robbert-vdh	lortabac: That's sadly also not possible here. Or at least, not without refactoring thousands of functions. This is a library, so you'd need to set that default value at the start of every exposed library function, but the libraries functions tend to also call other library functions. So then you'd either need to do that refactor, or be left with the same problem.
2021-09-22 19:37:50	ldlework	And that I'll forget them and just code how I usually do
2021-09-22 19:38:01	[exa]	ldlework: yeah well, think about people who will read the code after you
2021-09-22 19:38:22	[exa]	anyway most of it becomes pretty intuitive after you actually use the concepts for a few times
2021-09-22 19:38:46	robbert-vdh	(so the actual end goal is to save call stack information in an implicit parameter so it can be accessed deep inside of some function calling chain)
2021-09-22 19:39:14	lortabac	robbert-vdh: https://blog.csongor.co.uk/global-implicit-parameters/
2021-09-22 19:39:29	lortabac	you can try this ↑
2021-09-22 19:41:49	lortabac	however I don't know what the rules are when overriding implicit parameters, and whether those rules are reliable
2021-09-22 19:41:54	→	Sgeo has joined #haskell
2021-09-22 19:42:07	→	hnOsmium0001 has joined #haskell
2021-09-22 19:42:21	lortabac	as I said, Reader is a better option for this kind of stuff
2021-09-22 19:42:39	→	haritz has joined #haskell
2021-09-22 19:42:39	←	haritz has quit (Changing host)
2021-09-22 19:42:39	→	haritz has joined #haskell
2021-09-22 19:42:45	→	Everything has joined #haskell
2021-09-22 19:42:53	←	haritz has quit (Remote host closed the connection)
2021-09-22 19:43:53	→	haritz has joined #haskell
2021-09-22 19:43:53	←	haritz has quit (Changing host)
2021-09-22 19:43:53	→	haritz has joined #haskell
2021-09-22 19:44:05	dminuoso	CT is something that's nice to sprinkle ontop *after* you've become a seasoned haskeller - but only if you enjoy CT.
2021-09-22 19:44:05	robbert-vdh	lortabac: Yeah I also found that one! But the issue there is that you'll end up with basically the same situation as with HasCallStack, while relying on even more GHC implementation details. The main benefit I envisioned when using some custom implicit parameter instead of HasCallStack would be that you'd get a type checker error if you forgot to either define or propagate it.
2021-09-22 19:44:19	dminuoso	Learning CT *before* or *while* learning Haskell is likely not going to be helpful and just confusing.
2021-09-22 19:44:21	robbert-vdh	Reader would be the better option, but that's just not going to be feasible
2021-09-22 19:44:21	dminuoso	I made that mistake.
2021-09-22 19:44:36	dminuoso	Wish I hadnt, it delayed my basic haskell competencies by nearly half a year.
2021-09-22 19:45:24	dminuoso	ldlework: Im not trying to dissuade you from learning CT, but when you're also new to Haskell, Im confident it's going to be more time efficient to look at CT after you've become acquianted with haskell
2021-09-22 19:50:26	jneira[m]	<maerwald> "if you want me to redo cabal..." <- https://github.com/haskell/cabal-userguide
2021-09-22 19:51:15	ldlework	I become confused when I read:
2021-09-22 19:51:17	ldlework	"Now I want you to forget that you are dealing with the set of natural numbers and just think of it as a single object, a blob with a bunch of morphisms — the adders. A monoid is a single object category. In fact the name monoid comes from Greek mono, which means single. Every monoid can be described as a single object category with a set of morphisms that follow appropriate rules of
2021-09-22 19:51:19	ldlework	composition.
2021-09-22 19:51:52	ldlework	Are the set of natural numbers, the single object? Or is the blob of morphisms, the adders, the functions, the object?
2021-09-22 19:52:11	ldlework	by "single object category" do they mean "a category with a single object"?
2021-09-22 19:52:20	ldlework	I have a hard time understanding what that single object is.
2021-09-22 19:54:52	ldlework	When I think morphism I think of transformation, and are the morphisms things that work on the "single object" or are morphisms things that work on the numbers, which are in the set of natural numbers, which is the single object in the category/monoid?
2021-09-22 19:56:39	←	jakalx has left #haskell (Error from remote client)
2021-09-22 19:57:16	→	flouflou has joined #haskell
2021-09-22 19:59:28	←	Brumaire has quit (Ping timeout: 264 seconds)
2021-09-22 20:04:41	→	jakalx has joined #haskell
2021-09-22 20:05:24	→	qbt has joined #haskell
2021-09-22 20:06:20	→	doyougnu has joined #haskell
2021-09-22 20:08:46	geekosaur	as I (possibly incorrectly) understand it, all the numbers in the category behave the same way because otherwise it wouldn't be a category, so you only need one of them
2021-09-22 20:09:09	←	pooryorick has quit (Ping timeout: 265 seconds)
2021-09-22 20:09:25	geekosaur	the other possibility being that we're operating at a level above the numbers themselves
2021-09-22 20:10:43	ldlework	Right, I had the intuition that the morphisms maybe work upon the "single object", the "set of natural numbers" like it works upon the set itself. But the "adders" here are like partially-applied addition functions.
2021-09-22 20:10:43	→	pooryorick has joined #haskell
2021-09-22 20:10:49	ldlework	One for each number in the natural set.
2021-09-22 20:11:45	←	azeem has quit (Read error: Connection reset by peer)
2021-09-22 20:12:02	dminuoso	ldlework: Consider a subcategory of Set. A single object might be the set of all natural numberrs.
2021-09-22 20:12:08	→	azeem has joined #haskell
2021-09-22 20:13:25	dminuoso	Morphisms are functions from set to set, but we consider not all such functions, but perhaps one that adds nothing, and one that adds one, one - both `f : Nat -> Nat`, `g : Nat -> Nat`
2021-09-22 20:13:33	dminuoso	That's it.
2021-09-22 20:14:09	dminuoso	These morphisms are valid, as they respect composition laws
2021-09-22 20:14:42	ldlework	But what is the single object that milewski refers to in the case at hand
2021-09-22 20:15:03	dminuoso	In my example, the set of natural numbers.
2021-09-22 20:15:24	Morrow[m]	It doesn't matter, any single-object category will do.
2021-09-22 20:15:40	dminuoso	The really magical part of category theory is that you no longer *care* about the internals of those objects.
2021-09-22 20:15:50	dminuoso	It's all about the morphisms. :)
2021-09-22 20:16:24	←	ubert has quit (Ping timeout: 265 seconds)
2021-09-22 20:16:51	dminuoso	The term `monoid` in category theory is terribly confusing since there's multiple (related) notions
2021-09-22 20:17:26	Morrow[m]	The power we get, is that since we don't examine the internals of objects, the theorems apply very generally, to a wide range of topics.
2021-09-22 20:17:38	→	Tuplanolla has joined #haskell
2021-09-22 20:18:41	Morrow[m]	So anything we prove about categorical monoids will apply to the natural numbers with id and (+1).
2021-09-22 20:19:30	dminuoso	Morrow[m]: Sure you meant categorical monoids here?
2021-09-22 20:19:40	dminuoso	That seems orthogonal
2021-09-22 20:20:22	Morrow[m]	I meant "monoids in CT"  by that, sorry. 
2021-09-22 20:29:27	→	ubert has joined #haskell
2021-09-22 20:33:19	←	MQ-17J has quit (Ping timeout: 265 seconds)
2021-09-22 20:33:30	→	MQ-17J has joined #haskell
2021-09-22 20:34:01	←	[itchyjunk] has quit (Read error: Connection reset by peer)
2021-09-22 20:34:40	monochrom	You can compose two morphisms. This can model adding two numbers. Note that both are associative, both have identities, this is a decent match.
2021-09-22 20:35:26	←	max22- has quit (Quit: Leaving)
2021-09-22 20:36:00	monochrom	If you use two objects for two numbers, what can you do to two objects? You can't even compose them. Your model of addition will be some kind of add-on that doesn't play to the strength of categories.
2021-09-22 20:37:14	→	dut has joined #haskell
2021-09-22 20:39:48	→	jcob has joined #haskell
2021-09-22 20:39:54	monochrom	And then you will want to use "f . f . f . f" to model "x + x + x + x". If you have so much as "f . f", type inference forces f to be an endomorphism. The eureka is then all numbers are endomorphisms and they all have the same domain. You need only one object to hang them on.
2021-09-22 20:40:04	jcob	Hi everyone! Here for a recc. Anybody know good communities for parsing and compiler construction?
2021-09-22 20:40:16	jcob	I have some questions on course material and I'm interested in the field as well.
2021-09-22 20:41:51	→	max22- has joined #haskell
2021-09-22 20:42:28	dolio	You could have objects be numbers, and + be tensor product. Then you can do something else with arrows.
2021-09-22 20:43:51	dolio	Arrows could be ordering. Then `3 ≤ 4` and `10 ≤ 15` gives rise to `3+10 ≤ 4+15`.
2021-09-22 20:44:27	monochrom	Yeah there will be times when you model something else, where using objects for numbers is advantageous.
2021-09-22 20:44:37	ldlework	I appreciate the answers. dminuoso, so if the object is the set of natural numbers, then the morphisms in a category must be things that work upon items within the set. Like adding 1 to a number in the set of all natural numbers. So I can get away from the idea that morphisms work upon categories. But rather, for a given category, it's specific morphisms work upon items inside the objects (sets?)
2021-09-22 20:44:38	ldlework	of the category. I'm anticipating eventually that there will be categories who's objects (sets) are comprised of items which are themselves categories, in which case the morphisms would be operating on categories. 
2021-09-22 20:44:41	ldlework	Did I get any of that right?
2021-09-22 20:45:33	←	dut has quit (Quit: Leaving)
2021-09-22 20:45:47	→	yauhsien has joined #haskell
2021-09-22 20:45:55	←	bontaq has quit (Ping timeout: 246 seconds)
2021-09-22 20:46:34	dolio	The object doesn't have to be the set of natural numbers. It doesn't really matter what the object is, there's just one of them.
2021-09-22 20:46:59	monochrom	Yeah in this model the homset is the set of numbers.
2021-09-22 20:47:13	monochrom	galaxy brain?
2021-09-22 20:47:38	monochrom	Note how I keep using the word "model" to prime a subtext.
2021-09-22 20:48:34	dolio	In cases like the category of sets, it's useful to say that the objects are sets, because you need one object for each possible set, so what else are you going to use. But for monoids-as-categories it doesn't really matter as much.
2021-09-22 20:50:01	monochrom	You are applying a piece of math. The measure of how right you are is based on what benefit you get out of it, whether it solves your problem (so it depends on your problem).  Not on whose authority it is.
2021-09-22 20:51:46	→	ub has joined #haskell
2021-09-22 20:54:19	←	yauhsien has quit (Ping timeout: 252 seconds)
2021-09-22 20:56:11	→	nschoe has joined #haskell
2021-09-22 20:56:19	→	asthasr has joined #haskell
2021-09-22 20:58:41	monochrom	Perhaps the problem of learning here is once again hoping that the object and the endomorphisms are defined in terms of things you already know, as opposed to simply axiomatizing that you have an object (no further definition), you have these endomorphisms that satisfy certain expectations (no further definition).
2021-09-22 20:58:41	→	eggplantade has joined #haskell
2021-09-22 20:58:43	←	ub has quit (Ping timeout: 252 seconds)
2021-09-22 21:02:25	→	timCF has joined #haskell
2021-09-22 21:02:30	←	jcob has quit (Quit: Client closed)
2021-09-22 21:04:24	ldlework	"In cases like the category of sets, it's useful to say that objects are sets, because you need one object for each possible set." So when we are talking about the set of natural numbers, is the category we're talking about "Natural Numbers" or "Monoids"? If it's the former, wouldnt' what you said imply that each natural number would be an object? If it's the latter, I suppose that means that
2021-09-22 21:04:26	ldlework	there's one object in the Category of Monoids, and that single object is a generic representation of anything that has an associative operator with identity where the set of natural numbers is merely an example of such an object?
2021-09-22 21:04:35	ldlework	(thank you all so much for your replied, srsly)
2021-09-22 21:04:39	ldlework	replies too
2021-09-22 21:05:22	timCF	Hello! Could anybody help me a bit with `Fixed a` type? A want a type signature `a :: Fixed 8` but for some reason GHC is saying "Expected a type, but 8 has kind Nat". At the same time `a :: Fixed E9` works fine.
2021-09-22 21:05:23	monochrom	Neither.  Here we use one category to model one monoid.
2021-09-22 21:05:26	c_wraith	I'm not sure what a "Category of Monoids" is.
2021-09-22 21:05:36	ldlework	c_wraith: me either clearly :P
2021-09-22 21:05:41	c_wraith	It doesn't make much sense.  I'm not sure how to connect arrows.
2021-09-22 21:05:52	dolio	'Category of monoids' would presumably have monoids as objects and monoid homomorphisms as arrows.
2021-09-22 21:05:53	ldlework	Well what category are we talking about, when talking about the natural numbers and monoids?
2021-09-22 21:06:23	c_wraith	I think as monochrom points out, you're looking for a slightly different idea - the fact that all monoids are the same thing as a single-object category
2021-09-22 21:06:28	geekosaur	timCF, the possible values for Fixed are defined in Data.Fixed
2021-09-22 21:06:31	monochrom	or one category to model all of the natural numbers, or rather, natural number addition.
2021-09-22 21:06:38	geekosaur	you probably want something like Fixed E8
2021-09-22 21:07:12	ldlework	OK so "there is a category of natural number addition and it is true of the monoid laws"
2021-09-22 21:07:14	ldlework	something like that?
2021-09-22 21:07:14	geekosaur	although I'm not sure that's predefined. there are some things for building your own iirc
2021-09-22 21:07:19	→	Null_A has joined #haskell
2021-09-22 21:08:15	ldlework	I'll just keep reading :P
2021-09-22 21:08:19	monochrom	Don't worry, there are also times when we need multiple objects and they carry information, and the morphisms are boring.  For example when modeling natural number order, like dolio's example but suppose I omit addition.
2021-09-22 21:09:18	ldlework	A difficulty with category theory I've always had is that I cannot help but to understand a category in the philosophical sense, of a set of objects who are true for a set of properties.
2021-09-22 21:09:23	timCF	geekosaur: seems like `E8` is not exported, but I do see that there is one instance (first which is supposed to give me any custom precision I want), but I don't have an idea how to use it https://hackage.haskell.org/package/base-4.15.0.0/docs/Data-Fixed.html#t:HasResolution
2021-09-22 21:09:34	ldlework	But my old acquaintance would always badger me that that is completely wrong.
2021-09-22 21:09:46	monochrom	Generally we can use one category to model one partial order. An object is an element. Each morphism X->Y is trivial, but it exists iff X<=Y.
2021-09-22 21:09:59	Cale	ldlework: One thing you might be a little confused about, I can't tell... there is a category of monoids, where the objects are monoids, and the arrows are monoid homomorphisms between them. But then you can also take any one monoid and turn it into a category having a single object, and where the arrows are the elements of that monoid, and composing arrows multiplies the elements according to that monoid's 
2021-09-22 21:09:59	Cale	multiplication.
2021-09-22 21:10:03	←	lavaman has quit (Remote host closed the connection)
2021-09-22 21:10:22	c_wraith	call it a mathegory in your head, if you need to distinguish the ideas. :P
2021-09-22 21:10:31	Cale	ldlework: A category in this setting has a particular technical definition which you ought to learn first :)
2021-09-22 21:10:52	monochrom	Ugh category theory is totally not about a collection of objects who are true for a collection of properties.
2021-09-22 21:11:04	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-22 21:11:12	monochrom	If anything the properties are for morphisms not objects.
2021-09-22 21:11:51	ldlework	Yeah I suspect this will be a hurdle for me. 
2021-09-22 21:11:52	geekosaur	hm, the docs I'm looking at suggest that shoulkd work, but the docs are for ghc 9.0
2021-09-22 21:11:53	→	MQ-17J has joined #haskell
2021-09-22 21:11:57	geekosaur	may not work in 8.10
2021-09-22 21:12:10	monochrom	If you don't secretly realize that each category is defined by its morphisms, that the objects are only there for type checking, you are doing it wrong.
2021-09-22 21:12:11	Cale	It's not just a collection of things having a common property, it's a particular sort of structure consisting of a collection of "objects" and a collection of "arrows" which are arranged in a particular way between the objects, and a definition for how to "compose" the arrows
2021-09-22 21:12:18	→	lavaman has joined #haskell
2021-09-22 21:12:48	ldlework	Cale: right so it seems to be a super-notion of the philosophical "category"
2021-09-22 21:12:52	Cale	(but you'll be better served by reading Wikipedia's definition) https://en.wikipedia.org/wiki/Category_(mathematics)#Definition
2021-09-22 21:13:04	c_wraith	it's just totally independent
2021-09-22 21:13:05	ldlework	because, there is still notion of objects that are in the category, and objects that are not
2021-09-22 21:13:05	sclv	what you're calling a philosophical "category" is just like... a "set"
2021-09-22 21:13:08	geekosaur	looks like data E8; instance HasResolution E8 where resolution _ = 8
2021-09-22 21:13:08	c_wraith	forget philosophy
2021-09-22 21:13:20	sclv	a category is a set _and_ structure about morphisms
2021-09-22 21:13:27	ldlework	sclv: right, it's hard for me not to see a category as a set with lawful constraints or something like that
2021-09-22 21:13:41	Cale	ldlework: Or a sub-notion, but only insofar as you have a collection of objects
2021-09-22 21:14:03	timCF	geekosaur: oh, so I just define my own resolution type locally? I'll try, thanks!
2021-09-22 21:14:11	geekosaur	seems like it
2021-09-22 21:14:29	monochrom	If you mix up the philosophy community and the math community, your next point of confusion is that they also use the same word "monad" for two unrelated definitions.
2021-09-22 21:14:41	ldlework	Cale: I guess a sub-notion because there's more baggage, and so more restrictive in definition. I was thinking in the sense that since all Javascript is valid Typescript but not the otherway around, Typescript is a superset of Javascript. But I think I see what you mean.
2021-09-22 21:14:41	←	xiongxin has quit (Remote host closed the connection)
2021-09-22 21:14:53	geekosaur	sadly the KnownNat entry for Fixed has no "Since:"
2021-09-22 21:14:54	sclv	think of a set as a "bag of marbles". there's no real difference between the set of five marbles and the set {a,b,c,d,e} and the set {1,2,3,4,5} because you can get between them by renaming
2021-09-22 21:15:00	Cale	But also those objects really needn't have anything to do with one another apart from being part of the category. What the objects "are" is almost entirely irrelevant to us, they mostly serve as labels to make sure we don't compose arrows that we shouldn't.
2021-09-22 21:15:07	←	cfricke has quit (Quit: WeeChat 3.2.1)
2021-09-22 21:15:09	sclv	but you can have different categories each of which have five objects, but have totally different morphism structures
2021-09-22 21:15:13	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-22 21:15:34	sclv	a good example is you can look at categories _only_ with one element, and they _still_ have a rich morphism structure
2021-09-22 21:15:36	ldlework	morphism sturctures "sounds like" a very abstracted notion of qualitative restrictions on membership
2021-09-22 21:15:57	→	xiongxin has joined #haskell
2021-09-22 21:15:59	→	dut has joined #haskell
2021-09-22 21:16:02	ldlework	IE a list of predicates that must be all true of an object for it to be in that set or category
2021-09-22 21:16:19	timCF	geekosaur: it worked, thanks!
2021-09-22 21:16:25	sclv	i.e. i pick the category with the object *, the identity arrow on * (which must exist) and also with morphisms generated by a single self map `i : * -> *` -- what is this category?
2021-09-22 21:16:34	→	merijn has joined #haskell
2021-09-22 21:16:58	monochrom	Yeah sets are a very poor way to explain categories to yourself.
2021-09-22 21:17:04	dolio	monochrom: But the next step is to realize that the objects do matter, and the arrows may not actually all matter. :)
2021-09-22 21:17:28	ldlework	monochrom: I'm only describing my current pathology not advocating for it :P
2021-09-22 21:17:31	sclv	my example above gives the category of natural numbers under addition
2021-09-22 21:17:33	monochrom	categories have so much more structure than sets.  You are only doing a forgetful thing.
2021-09-22 21:17:54	ldlework	sclv: I got lost at "and also with morphisms generated by a single self map `i : * -> *`
2021-09-22 21:18:07	monochrom	or rather s/structure/information/
2021-09-22 21:18:21	sclv	its a category that looks like one dot, the identity arrow that points to itself, and also an arrow from that dot to itself that is _not_ the identity
2021-09-22 21:18:38	←	timCF has quit (Quit: leaving)
2021-09-22 21:18:38	Cale	ldlework: Basically, we run out of words in mathematics for "collection of some sort with additional structure", and so there are dozens of special words that sound roughly like some sort of collection, but actually have a detailed technical meaning and lots of additional structure.
2021-09-22 21:18:44	ldlework	monochrom: in philosophy ontological categories are not just mathematical sets, they have qualitative constraints on them
2021-09-22 21:18:45	←	Cajun has quit (Quit: Client closed)
2021-09-22 21:18:45	←	MQ-17J has quit (Ping timeout: 265 seconds)
2021-09-22 21:18:48	←	lavaman has quit (Remote host closed the connection)
2021-09-22 21:18:59	ldlework	and i was saying it sounds like the morphisms of a category are a way of very abstractly encoding those qualitative constraints
2021-09-22 21:19:04	ldlework	formalizing them
2021-09-22 21:19:13	sclv	but of course, you also get generated by that the composition of that arrow `i . i` and `i . i . i` etc. (you can also throw in identities into the composition, but the laws say they don't do anything, so you can ignore them
2021-09-22 21:19:22	→	Brumaire has joined #haskell
2021-09-22 21:19:23	sclv	)
2021-09-22 21:19:29	ldlework	it mean in philosophy this is all rooted in predicate and propositional logics and certainly in some grander sense category theory is going to link up 
2021-09-22 21:19:41	sclv	not in any useful sense for you, though, just ignore that
2021-09-22 21:19:57	ldlework	Cale: yeah that makes sense
2021-09-22 21:20:06	sclv	again, put a dot on a piece of paper, and draw an arrow that's a loop going from that dot to itself, and think about it
2021-09-22 21:20:11	sclv	now draw two loops and think about that
2021-09-22 21:20:20	sclv	now draw one loop, but have it be invertible, and think about that
2021-09-22 21:20:34	sclv	these are all categories with one object, but representing very different mathematical strutures
2021-09-22 21:20:41	ldlework	sclv: i get the notion of identity
2021-09-22 21:20:43	ldlework	but like
2021-09-22 21:20:50	ldlework	you can a notion of identity for transofrmation on specific numbers
2021-09-22 21:20:53	ldlework	like (+0)
2021-09-22 21:20:55	←	merijn has quit (Ping timeout: 246 seconds)
2021-09-22 21:20:55	ldlework	or
2021-09-22 21:21:07	ldlework	you could have identity on some more general object like the set of all natural numbers
2021-09-22 21:21:09	ldlework	pointing back to itself
2021-09-22 21:21:16	→	MQ-17J has joined #haskell
2021-09-22 21:21:20	sclv	not in this setup. there's plenty of categories you can generate using numbers that have totally different morphism structures. there's not "one category of natural numbers"
2021-09-22 21:21:22	←	xiongxin has quit (Quit: No Ping reply in 180 seconds.)
2021-09-22 21:21:23	ldlework	where there could be "morphisms" from the set of natural numbers, to some other kind of objects
2021-09-22 21:21:33	monochrom	I have friends who are very fluent in C++.  Do they know functors?  Yes and no.
2021-09-22 21:21:35	ldlework	it's hard to understand at which level of abstraction we're really working
2021-09-22 21:21:35	→	merijn has joined #haskell
2021-09-22 21:22:03	ldlework	Like I can imagine 1 with a self loop, and a loop to 2, which also has a self loop, etc
2021-09-22 21:22:04	monochrom	They know C++'s functors.  They don't know Haskell's or math's functor.  Oh btw there is a 3rd functor, from SML.
2021-09-22 21:22:21	ldlework	but I can also imagine a graph where the first node is "the set of all natural numbers" with a self loop, and an arrow pointing to some other object
2021-09-22 21:22:28	ldlework	representing the set of all even natural numbers
2021-09-22 21:22:30	ldlework	or something like that
2021-09-22 21:22:36	sclv	sure. these are all possible categories
2021-09-22 21:22:37	→	xiongxin has joined #haskell
2021-09-22 21:22:46	ldlework	sclv: even the first example?
2021-09-22 21:22:53	ldlework	where the number 1 has a self loop?
2021-09-22 21:23:11	ldlework	and another arrow which points to the number 2, etc?
2021-09-22 21:23:14	←	_bin has quit (Quit: ZNC - https://znc.in)
2021-09-22 21:23:16	ldlework	is that a category?
2021-09-22 21:23:35	sclv	well it depends what you mean. you can create a discrete category where every natural corresponds to a different object. then _every_ object has an identity loop, by definition
2021-09-22 21:23:51	ldlework	that's what i'm imagining right now
2021-09-22 21:23:55	sclv	but also you can draw whatever other arrows you want. and then you get "for free" the compositions.
2021-09-22 21:23:56	dsal	I knew functors from O'Caml, which made Haskell functors confusing.
2021-09-22 21:24:08	sclv	this is known as the "free category generated by a graph" and any graph you can draw generates a category
2021-09-22 21:24:29	ldlework	sclv: right since we have the arrow that goes from 1 to 2
2021-09-22 21:24:35	ldlework	that means there will be an arrow going from 2 to 3
2021-09-22 21:24:37	→	_bin has joined #haskell
2021-09-22 21:24:37	sclv	it just so happens that categories may have _more rules for composition_ than those that come for free, so graphs don't capture that
2021-09-22 21:24:39	ldlework	so we can compose from 1 to 3
2021-09-22 21:24:42	ldlework	and everything else?
2021-09-22 21:24:56	→	timCF has joined #haskell
2021-09-22 21:24:57	sclv	no, if you have an arrow from 1 to 2, there's no reason you'd have an arrow from 2 to 3 if they're all distinct objects
2021-09-22 21:25:18	sclv	if you have 1 -> 2, and _also_ 2 -> 3 then you get the composition 1 -> 3 automatically
2021-09-22 21:25:19	→	wonko has joined #haskell
2021-09-22 21:25:27	ldlework	Right that's what I meant I think
2021-09-22 21:25:33	ldlework	But you're saying
2021-09-22 21:25:38	ldlework	If we're taking seriously that 1 is different than 2
2021-09-22 21:25:40	sclv	but you may have _another_ arrow 1 -> 3 not generated by that composition, and that's not equal to the composition
2021-09-22 21:25:46	ldlework	than we can't assume they have the same arrows or whatever
2021-09-22 21:25:50	ldlework	because they are truly distinct
2021-09-22 21:25:55	sclv	right -- they're different objects in that setup, yet
2021-09-22 21:25:57	sclv	yes
2021-09-22 21:26:02	ldlework	ok so
2021-09-22 21:26:15	ldlework	if we presumed that for every object in this category we're talking about where the objects are naturals
2021-09-22 21:26:23	ldlework	there was such an arrow between each of them, with the identity
2021-09-22 21:26:26	sclv	the best place to start with categories is not sets imho. instead start with partial orders, and then consider when more arrows may exist
2021-09-22 21:26:38	ldlework	is that just an arbitrary category we made up that has no generally known name?
2021-09-22 21:26:39	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-22 21:26:57	sclv	so all objects have an arrow to every other object?
2021-09-22 21:27:02	←	xiongxin has quit (Client Quit)
2021-09-22 21:27:03	ldlework	to their subsequent
2021-09-22 21:27:09	ldlework	i forget what math calls that
2021-09-22 21:27:12	ldlework	the next natural
2021-09-22 21:27:22	→	merijn has joined #haskell
2021-09-22 21:27:22	ldlework	like when you define them in peano arithmetic
2021-09-22 21:27:30	ldlework	ancestor... no
2021-09-22 21:27:37	ldlework	i forget, but hopefully you get what i mean
2021-09-22 21:27:41	sclv	that's often what people will call "the naturals as a preorder category"
2021-09-22 21:27:47	ldlework	each object has a self-arrow, and an arrow pointing to it's +1
2021-09-22 21:27:49	ldlework	I see
2021-09-22 21:27:55	←	hendursa1 has quit (Quit: hendursa1)
2021-09-22 21:27:57	ldlework	OK
2021-09-22 21:28:01	ldlework	So how does this differentiate
2021-09-22 21:28:02	sclv	the relationship shouldn't be thought of as addition, it should be thought of as <=
2021-09-22 21:28:14	ldlework	When the first object in our new graph is "the set of natural numbers"
2021-09-22 21:28:17	→	xiongxin has joined #haskell
2021-09-22 21:28:18	→	hendursaga has joined #haskell
2021-09-22 21:28:20	sclv	as in "every object has a unique morphism to every other object it is less than or equal to"
2021-09-22 21:28:20	←	dut has quit (Quit: Leaving)
2021-09-22 21:28:26	monochrom	sclv, that's how I started, and therefore I ended with being stuck at Galois connection for 20 years without wanting/needing/being capable of stepping up to adjunctions. >:)
2021-09-22 21:28:34	zardoz	I'm kind of shocked that this works flawlessly in windows.. cool library! https://hackage.haskell.org/package/concurrent-output
2021-09-22 21:28:57	sclv	monochrom: yeah i actually find order theory very powerful on its own -- especially when one considers richer lattices, etc
2021-09-22 21:30:20	timCF	I have one more question. Is there some standard class which I can use in type signature to declare that type `a` can be coerced to type `b` using `coerce` function? This might be useful for functions like `apply0 :: Coerce a b => (b -> b) -> a -> a` where `apply0 f = coerce . f . coerce`.
2021-09-22 21:30:24	→	akegalj has joined #haskell
2021-09-22 21:32:33	sclv	?ty coerce
2021-09-22 21:32:34	lambdabot	error:
2021-09-22 21:32:34	lambdabot	    • Variable not in scope: coerce
2021-09-22 21:32:34	lambdabot	    • Perhaps you meant ‘coerced’ (imported from Control.Lens)
2021-09-22 21:32:42	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-22 21:32:44	sclv	ah well: `coerce :: Coercible a b => a -> b `
2021-09-22 21:32:51	sclv	so that would be the type class?
2021-09-22 21:33:23	→	merijn has joined #haskell
2021-09-22 21:34:00	→	_ht has joined #haskell
2021-09-22 21:34:07	timCF	sclv: Interesting! I have used `coerce` many times, but never dealed with actual `Coercible` class instances, I'll try it, thanks!
2021-09-22 21:34:28	timCF	have never seen it be derived also
2021-09-22 21:34:42	←	xiongxin has quit (Quit: No Ping reply in 180 seconds.)
2021-09-22 21:34:45	monochrom	The :type command is underappreciated :)
2021-09-22 21:34:50	sclv	you can't derive it -- see the docs
2021-09-22 21:34:50	sclv	https://hackage.haskell.org/package/ghc-prim-0.7.0/docs/GHC-Types.html#t:Coercible
2021-09-22 21:35:49	timCF	Interesting :)
2021-09-22 21:35:57	→	xiongxin has joined #haskell
2021-09-22 21:36:28	akegalj	Hey. I was watching last years talk from skillsmatter by "Winter is comming even faster" by Joachim Breitner (https://skillsmatter.com/skillscasts/14903-winter-is-coming-even-faster) where at 11:18 he explains optimization technique/trick (Avoid the quadratic (++)). The trick/transformation explanation is about a minute long but I just can't seem to get it :/ If anyone is interested to have a look and 
2021-09-22 21:36:34	akegalj	give me some tips that would be great <3 
2021-09-22 21:37:58	monochrom	Is it when you replace x++y++z by (x++) . (y++) . (z++) ?
2021-09-22 21:38:07	←	pavonia has quit (Quit: Bye!)
2021-09-22 21:38:35	←	xiongxin has quit (Client Quit)
2021-09-22 21:38:45	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-22 21:38:45	←	jstolarek has quit (Ping timeout: 252 seconds)
2021-09-22 21:38:58	→	merijn has joined #haskell
2021-09-22 21:39:25	akegalj	monochrom: it might be. He is replacing ++ with . , but there are some transformations that I don't get...
2021-09-22 21:40:24	akegalj	monochrom: [t] replaced with [t] -> [t], [] with id, [x] with (x:), xs++ys with xs . ys
2021-09-22 21:40:59	akegalj	monochrom: do you think thats the same?
2021-09-22 21:42:27	sclv	consider what all the transformations he gives look like when applied to the one element list
2021-09-22 21:42:30	sclv	er to the empty list
2021-09-22 21:42:42	c_wraith	there was a good blog post about that trick a while back
2021-09-22 21:42:51	←	shapr has quit (Remote host closed the connection)
2021-09-22 21:43:14	sclv	https://en.wikipedia.org/wiki/Difference_list
2021-09-22 21:43:16	c_wraith	something about how it implicitly rewrites everything into a right-associated form
2021-09-22 21:44:22	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-22 21:44:40	akegalj	sclv: I think that's it, thanks!
2021-09-22 21:44:49	akegalj	c_wraith: monochrom: thanks both!
2021-09-22 21:44:52	→	merijn has joined #haskell
2021-09-22 21:48:05	kuribas	akegalj: https://hackage.haskell.org/package/dlist
2021-09-22 21:48:05	→	yauhsien has joined #haskell
2021-09-22 21:49:12	akegalj	kuribas: thanks, there is also link from wiki to haskell wiki explanation https://wiki.haskell.org/Difference_list
2021-09-22 21:49:58	←	merijn has quit (Ping timeout: 246 seconds)
2021-09-22 21:50:52	→	merijn has joined #haskell
2021-09-22 21:51:13	→	zachjs has joined #haskell
2021-09-22 21:52:15	→	maroloccio has joined #haskell
2021-09-22 21:53:28	←	yauhsien has quit (Ping timeout: 246 seconds)
2021-09-22 21:53:39	←	Null_A has quit (Ping timeout: 252 seconds)
2021-09-22 21:53:48	→	Null_A has joined #haskell
2021-09-22 21:56:45	→	Null_A_ has joined #haskell
2021-09-22 21:58:03	→	Null_A__ has joined #haskell
2021-09-22 21:58:56	←	kuribas has quit (Remote host closed the connection)
2021-09-22 21:59:04	←	alzgh has quit (Remote host closed the connection)
2021-09-22 21:59:13	←	Null_A has quit (Ping timeout: 260 seconds)
2021-09-22 21:59:25	→	alzgh has joined #haskell
2021-09-22 21:59:57	←	timCF has quit (Quit: leaving)
2021-09-22 22:00:09	←	lortabac has quit (Quit: WeeChat 2.8)
2021-09-22 22:00:17	→	Null_A has joined #haskell
2021-09-22 22:01:05	←	Null_A_ has quit (Ping timeout: 260 seconds)
2021-09-22 22:01:16	←	merijn has quit (Ping timeout: 264 seconds)
2021-09-22 22:02:16	→	merijn has joined #haskell
2021-09-22 22:03:25	←	Null_A__ has quit (Ping timeout: 260 seconds)
2021-09-22 22:03:45	←	eggplantade has quit (Remote host closed the connection)
2021-09-22 22:05:18	c_wraith	huh. do TH typed splices participate in bidirectional inference?
2021-09-22 22:06:41	←	Null_A has quit (Ping timeout: 260 seconds)
2021-09-22 22:07:28	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-22 22:07:36	←	mikoto-chan has quit (Read error: No route to host)
2021-09-22 22:08:03	→	merijn has joined #haskell
2021-09-22 22:09:50	→	mikoto-chan has joined #haskell
2021-09-22 22:10:27	c_wraith	looks like it does. you can generate a (TExp a) value by selecting an instance based on a
2021-09-22 22:10:50	→	amahl has joined #haskell
2021-09-22 22:10:55	c_wraith	that's probably a large part of why TExp was added.
2021-09-22 22:11:05	→	Null_A has joined #haskell
2021-09-22 22:11:06	c_wraith	but I hadn't thought about it.
2021-09-22 22:13:22	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-22 22:14:04	→	merijn has joined #haskell
2021-09-22 22:14:28	←	mikoto-chan has quit (Ping timeout: 246 seconds)
2021-09-22 22:16:08	→	mikoto-chan has joined #haskell
2021-09-22 22:19:22	←	merijn has quit (Ping timeout: 246 seconds)
2021-09-22 22:19:40	→	merijn has joined #haskell
2021-09-22 22:20:08	←	neo1 has quit (Ping timeout: 265 seconds)
2021-09-22 22:20:29	→	ub has joined #haskell
2021-09-22 22:21:37	←	cheater has quit (Ping timeout: 260 seconds)
2021-09-22 22:21:40	ℹ	fefufo[m] is now known as fcortesi
2021-09-22 22:21:41	→	cheater1__ has joined #haskell
2021-09-22 22:21:44	ℹ	cheater1__ is now known as cheater
2021-09-22 22:22:25	←	fcortesi has quit (Quit: Reconnecting)
2021-09-22 22:22:39	→	fcortesi has joined #haskell
2021-09-22 22:23:02	←	Brumaire has quit (Quit: ran away)
2021-09-22 22:23:29	←	fcortesi has quit (Client Quit)
2021-09-22 22:23:43	→	fcortesi has joined #haskell
2021-09-22 22:24:24	→	tzh has joined #haskell
2021-09-22 22:24:41	→	Yotta has joined #haskell
2021-09-22 22:25:04	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-22 22:25:05	Yotta	Howdy
2021-09-22 22:25:26	←	zaquest has quit (Remote host closed the connection)
2021-09-22 22:25:28	→	merijn has joined #haskell
2021-09-22 22:25:33	glguy	hi
2021-09-22 22:25:51	←	zachjs has quit (Quit: zachjs)
2021-09-22 22:25:53	→	Null_A_ has joined #haskell
2021-09-22 22:27:42	←	justsomeguy has quit (Ping timeout: 252 seconds)
2021-09-22 22:28:07	←	Null_A has quit (Ping timeout: 246 seconds)
2021-09-22 22:29:13	←	max22- has quit (Remote host closed the connection)
2021-09-22 22:29:37	Yotta	I'm struggling with a university task, anyone keen to lend a hand?
2021-09-22 22:30:55	→	zaquest has joined #haskell
2021-09-22 22:31:21	→	Null_A has joined #haskell
2021-09-22 22:33:11	dminuoso	Hi, good to let us know this is a homework assignment. Let us know how we can help
2021-09-22 22:33:42	→	mixfix41 has joined #haskell
2021-09-22 22:33:44	Yotta	Of course. So I created this function to check if a is a prefix of b
2021-09-22 22:33:52	→	waleee has joined #haskell
2021-09-22 22:33:57	Yotta	isPrefix                :: String -> String -> Bool
2021-09-22 22:33:57	Yotta	isPrefix [] _           = True
2021-09-22 22:33:58	Yotta	isPrefix _ []           = False
2021-09-22 22:33:58	Yotta	isPrefix (x:xs) (y:ys)  = x == y && isPrefix xs ys
2021-09-22 22:34:13	←	Null_A_ has quit (Ping timeout: 260 seconds)
2021-09-22 22:34:45	→	dut has joined #haskell
2021-09-22 22:34:51	Yotta	Now I'm trying create a function `locate` which should check if a exists in b, and output the index of the location (so not just prefix)
2021-09-22 22:35:10	⚡	awpr wonders if everyone asking very similar questions here and on the FP Discord is from the same course
2021-09-22 22:35:24	Yotta	locate                  :: String -> String -> [(Int, Int)]
2021-09-22 22:35:24	Yotta	locate [] _             = []
2021-09-22 22:35:25	Yotta	locate _ []             = []
2021-09-22 22:35:25	Yotta	locate   (x:xs) (y:ys)  = (
2021-09-22 22:35:29	Yotta	Haha probably awpr
2021-09-22 22:35:44	dsal	Pasting lots of lines of code here is a bad idea.  Try this:  Paste code/errors: https://paste.tomsmeding.com
2021-09-22 22:36:04	←	merijn has quit (Ping timeout: 264 seconds)
2021-09-22 22:36:22	Yotta	Okay cool
2021-09-22 22:36:23	Yotta	https://paste.tomsmeding.com/rsYIHdcz
2021-09-22 22:36:33	awpr	(no implied judgment there, just interesting that there's been a flurry of like 3-4 people struggling with nearly the same thing)
2021-09-22 22:36:47	→	max22- has joined #haskell
2021-09-22 22:36:47	→	lavaman has joined #haskell
2021-09-22 22:37:03	→	merijn has joined #haskell
2021-09-22 22:37:34	Yotta	Yeah sorry I'm sure, I just entered here
2021-09-22 22:38:06	dminuoso	No worries, cant expect newcomers to me familiar with the finer details of IRC.
2021-09-22 22:38:19	←	qbt has quit (Remote host closed the connection)
2021-09-22 22:38:35	Yotta	Haven't used IRC in 10+ years haha
2021-09-22 22:40:11	monochrom	Is it OK for locate to call isPrefix?
2021-09-22 22:40:27	dminuoso	Yotta: What is your question?
2021-09-22 22:40:32	dminuoso	Or are you still working on that?
2021-09-22 22:41:06	Yotta	So I'm thinking when a == b, add the position of b to the first index, and as the second index i just do ` b + length of a`
2021-09-22 22:41:14	→	eggplantade has joined #haskell
2021-09-22 22:41:38	Yotta	But I can't figure out how to write that in haskell
2021-09-22 22:41:54	awpr	so the expected result is pairs of (start index, end index)?
2021-09-22 22:42:26	awpr	by which I mean after-the-end
2021-09-22 22:42:31	monochrom	"a == b" is not a good special case to split on.
2021-09-22 22:42:44	Yotta	I phrased the question a bit poorly, the function should behave like this: `locate “oo” “foobarbarfoo” = [(1,3), (10,12)]` `locate “oo” “barbarbar” = [] `
2021-09-22 22:43:02	←	chele_ has quit (Remote host closed the connection)
2021-09-22 22:44:32	Yotta	So input a should be split into (x:xs), right? And if it doesn't match with y, then the function should recursively run `function xs` ?
2021-09-22 22:44:41	awpr	yep, that clears it up.  so, you made a point to mention you've written `isPrefix`.  does that mean you have an approach in mind to use it as part of `locate`?
2021-09-22 22:44:47	←	nschoe has quit (Ping timeout: 265 seconds)
2021-09-22 22:45:05	awpr	"yep" was re: the example inputs/outputs
2021-09-22 22:45:07	→	neo1 has joined #haskell
2021-09-22 22:45:10	Yotta	I understand
2021-09-22 22:45:44	Yotta	Well `isPrefix` was the previous task, idk if it's easier to use it in my next task here
2021-09-22 22:45:57	monochrom	Yes very much easier.
2021-09-22 22:45:58	←	dschrempf has quit (Ping timeout: 246 seconds)
2021-09-22 22:46:21	monochrom	"oo" occurs in "food" because "oo" is a prefix of "ood".
2021-09-22 22:46:30	monochrom	Not only that.
2021-09-22 22:46:43	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-22 22:46:47	awpr	have you internalized that String is the same as [Char], and what that means for what sub-structures exist in "foobarbarfoo"?
2021-09-22 22:47:04	monochrom	"oo" in "food" has index 1 because "oo" in "ood" has index 0, and the 'f' bumps that to 1.
2021-09-22 22:47:04	←	TDANG_ has quit (Ping timeout: 252 seconds)
2021-09-22 22:48:04	→	ksqsf has joined #haskell
2021-09-22 22:48:15	Yotta	I understand String is a list of char's
2021-09-22 22:48:24	Yotta	Yeah got it monochrom
2021-09-22 22:48:39	→	TDANG_ has joined #haskell
2021-09-22 22:49:21	Yotta	So I guess I should loop `locate` until `isPrefix` returns True, then add the current position to a list of Int's?
2021-09-22 22:49:24	monochrom	I should steal this assignment question :)
2021-09-22 22:49:34	Yotta	Haha, you a teacher?
2021-09-22 22:49:39	monochrom	Yes.
2021-09-22 22:49:44	Yotta	cool
2021-09-22 22:50:11	dminuoso	Who knows, perhaps monochrom is your professor even.
2021-09-22 22:50:19	dminuoso	:)
2021-09-22 22:50:20	Yotta	tell your students it's Prelude only
2021-09-22 22:50:32	monochrom	Nah I didn't know of this question.
2021-09-22 22:50:39	Yotta	if so, you gave us way too little time on this assigment monochrom!
2021-09-22 22:51:49	→	justsomeguy has joined #haskell
2021-09-22 22:53:39	awpr	I wonder if anyone will implement Knuth-Morris-Pratt for this
2021-09-22 22:54:30	monochrom	Fat chance. There are two barriers.
2021-09-22 22:54:39	monochrom	First is to learn KMP in the first place.
2021-09-22 22:54:46	←	raehik has quit (Ping timeout: 252 seconds)
2021-09-22 22:54:57	monochrom	Second is to re-express the imperative KMP you have learned in FP terms.
2021-09-22 22:55:40	c_wraith	Holy crap, template haskell changed completely in ghc 9
2021-09-22 22:55:51	awpr	yeah fair enough, probably not gonna happen unless someone already knew a lot of Haskell going into the course
2021-09-22 22:55:58	monochrom	A student in this course, by definition, has already great trouble re-expressing any easy imperative algorithm in FP terms.
2021-09-22 22:56:53	→	raehik has joined #haskell
2021-09-22 22:57:37	Yotta	word
2021-09-22 22:58:59	→	TDANG has joined #haskell
2021-09-22 22:59:11	c_wraith	ok, so.  typed applications aren't bidirectionally inferred.  I tried to do that and got a ghc panic
2021-09-22 22:59:35	c_wraith	err.  typed splices
2021-09-22 22:59:44	monochrom	Yikes. panic is not good. :)
2021-09-22 23:00:20	→	Morrow has joined #haskell
2021-09-22 23:01:13	←	TDANG_ has quit (Ping timeout: 265 seconds)
2021-09-22 23:01:55	→	shapr has joined #haskell
2021-09-22 23:03:10	c_wraith	ok, that's not a problem with bidirectional inference in general, just with partial type signatures
2021-09-22 23:03:57	c_wraith	that makes me think I should test in a newer ghc than 9.0.1
2021-09-22 23:05:26	←	alzgh has quit (Remote host closed the connection)
2021-09-22 23:05:46	→	alzgh has joined #haskell
2021-09-22 23:06:44	→	python476 has joined #haskell
2021-09-22 23:07:08	c_wraith	yeah, it's fixed in newer (pre-release) versions
2021-09-22 23:07:16	monochrom	nice
2021-09-22 23:08:20	c_wraith	it does give me the partial type signature warning *twice* for some reason, but whatever.
2021-09-22 23:08:44	←	eggplantade has quit (Remote host closed the connection)
2021-09-22 23:09:02	←	glguy has quit (Quit: Quit)
2021-09-22 23:10:07	→	glguy has joined #haskell
2021-09-22 23:12:19	c_wraith	is there a writeup on the new template-haskell somewhere?
2021-09-22 23:17:57	→	Brumaire has joined #haskell
2021-09-22 23:18:01	ℹ	fendor_ is now known as fendor
2021-09-22 23:18:57	→	eggplantade has joined #haskell
2021-09-22 23:20:37	←	neo1 has quit (Ping timeout: 246 seconds)
2021-09-22 23:24:40	←	raehik has quit (Ping timeout: 264 seconds)
2021-09-22 23:26:26	Yotta	https://paste.tomsmeding.com/kOJ2Hec7
2021-09-22 23:26:36	Yotta	Does this make sense at all (obviously it's not finished) ?
2021-09-22 23:26:55	←	akegalj has quit (Quit: leaving)
2021-09-22 23:27:00	monochrom	Yes.
2021-09-22 23:27:35	tomsmeding	locate [] _ = [] feels fishy to me
2021-09-22 23:27:40	←	waleee has quit (Ping timeout: 264 seconds)
2021-09-22 23:27:51	tomsmeding	clearly, the empty list appears in any list at position 0, doesn't it? :p
2021-09-22 23:27:53	Yotta	May I ask how I can add the indexes/position to become the return value?
2021-09-22 23:27:53	←	fendor has quit (Remote host closed the connection)
2021-09-22 23:27:59	monochrom	Right, I need second thoughts on that.
2021-09-22 23:28:08	Yotta	Aha
2021-09-22 23:28:49	awpr	but also if you're using isPrefix, you won't be tearing down the search term to the point of reaching an empty list
2021-09-22 23:28:50	monochrom	I think I would first and foremost test for prefixness first.
2021-09-22 23:28:59	tomsmeding	'isPrefix = (all (uncurry (==)) .) . zip' but please don't do that
2021-09-22 23:29:08	monochrom	Only when x is not a prefix of y do I care "OK is y empty then?"
2021-09-22 23:30:37	Yotta	tbh I don't understand what you mean
2021-09-22 23:31:01	Yotta	tomsmeding
2021-09-22 23:31:07	tomsmeding	don't try :p
2021-09-22 23:31:39	Yotta	haha ok
2021-09-22 23:31:45	tomsmeding	that uncurry thing is a deliberately complicated way to write a simple thing
2021-09-22 23:32:11	awpr	haskellers sometimes like to code-golf while avoiding naming any function arguments for fun.  an equivalent definition that might be more understandable is `isPrefix x = and . zipWith (==) x`
2021-09-22 23:32:33	⚡	tomsmeding always forgets the existence of 'and'
2021-09-22 23:32:50	→	fendor has joined #haskell
2021-09-22 23:33:02	monochrom	> ((all (uncurry (==)) .) . zip) "fooood" "foo"
2021-09-22 23:33:04	lambdabot	 True
2021-09-22 23:33:11	monochrom	That's your bug there.
2021-09-22 23:33:15	tomsmeding	ow
2021-09-22 23:33:16	awpr	oops
2021-09-22 23:33:23	tomsmeding	here, it's even wrong ;)
2021-09-22 23:33:50	monochrom	The difficult is that "isPrefix [] _" and "isPrefix _ []" are not both True. You lost a symmetry there.
2021-09-22 23:34:07	tomsmeding	yeah, I don't do non-symmetric problems
2021-09-22 23:35:24	dsal	It's unfair to ask if a long string is a prefix of a shorter string.
2021-09-22 23:35:49	monochrom	All assymetries are unfair. :)
2021-09-22 23:36:10	c_wraith	let's redefine "prefix" so that both inputs must be the same length.
2021-09-22 23:36:21	←	eggplantade has quit (Remote host closed the connection)
2021-09-22 23:36:32	dsal	isPrefix works in the zipWith case, it's just not picky about which is a prefix of which.
2021-09-22 23:36:51	→	yinghua has joined #haskell
2021-09-22 23:37:16	monochrom	I have a less radical redefinition.  Redefine "prefix" to be bidirectional.  x is a prefix of y or y is a prefix of x.
2021-09-22 23:37:24	monochrom	Yeah that.
2021-09-22 23:37:39	Yotta	how the hell do i do that
2021-09-22 23:38:28	awpr	step one: look up prefix on etymonline.com; step two: go back in time to that date and convince the originator of the word to choose a different definition
2021-09-22 23:38:42	Yotta	haha
2021-09-22 23:38:52	←	nvmd has quit (Quit: Later, nerds.)
2021-09-22 23:39:00	Yotta	or accept the bug...
2021-09-22 23:39:13	monochrom	The Teen Titans can help.
2021-09-22 23:39:33	c_wraith	I still don't understand why typed template haskell changed to introduce the Code type.  Anyone have any link to a discussion of this change?
2021-09-22 23:40:26	janus	is there a good overview of haskell linting tools? or should i just read through the hlint docs ?
2021-09-22 23:40:34	→	eggplantade has joined #haskell
2021-09-22 23:40:36	Yotta	may i ask what to put in `then() ` and `else` in order to output index of position?
2021-09-22 23:41:19	c_wraith	I suppose it gives a top-level constructor for things that would otherwise by polymorphic over a type variable.  If you want to create instances, that's a good thing.  Hmm.
2021-09-22 23:41:21	monochrom	the else branch is easier.
2021-09-22 23:41:49	c_wraith	polymorphic over their top-level type constructor, specifically
2021-09-22 23:41:51	monochrom	"oo" is not a prefix of "food".  What should you do next?
2021-09-22 23:41:52	awpr	do you have the present index in scope?  if not, I'd start with keeping track of that (or the else branch)
2021-09-22 23:41:59	glguy	Here's a contribution to the unrequested golfing: (. tails) . findIndices . isPrefixOf
2021-09-22 23:42:00	→	Guest47 has joined #haskell
2021-09-22 23:42:14	←	ksqsf has left #haskell (ERC (IRC client for Emacs 27.2))
2021-09-22 23:42:52	→	yauhsien has joined #haskell
2021-09-22 23:43:11	Yotta	monochrom run the same function with `x tail(y) `?
2021-09-22 23:43:40	←	mikoto-chan has quit (Read error: No route to host)
2021-09-22 23:44:19	dminuoso	Yotta: What is `x tail(y)` supposed to denote?
2021-09-22 23:44:26	Guest47	on a new install of OSX big sur running `stack install text-show` fails with  > ghc: couldn't find archive in `/usr/bin/iconv'at offset 16384; ghc: panic! (the 'impossible' happened); loadArchive "/usr/bin/iconv": failed  . Any ideas? 
2021-09-22 23:44:30	Yotta	Or wait, does that happen automatically? since i'm sending `x y` to `isPrefix `
2021-09-22 23:44:38	monochrom	awpr, at this point I think I am a fan of post-processing, i.e., OK so locate "oo" "ood" returns [(0,1)], but the answer I need for locate "oo" "food" is [(1,2)], how do I do some post-processing to fix up that difference?
2021-09-22 23:45:05	dminuoso	Guest47: Check the GHC bug tracker
2021-09-22 23:45:14	awpr	yeah, good point
2021-09-22 23:45:31	←	lavaman has quit (Remote host closed the connection)
2021-09-22 23:45:41	Yotta	dminuoso I'm thinking that if the inputs are "oo" and "foobar", then it's False, but if the next loop then is "oo" and "oobar", then we found position of the "prefix" ? so 
2021-09-22 23:45:51	→	nvmd has joined #haskell
2021-09-22 23:45:58	Yotta	if y = "foobar", then tail(y) = "oobar" no?
2021-09-22 23:45:59	dminuoso	Yotta: No I meant, syntactically, what is that supposed to even mean?
2021-09-22 23:46:13	dminuoso	Function application has no parens in Haskell
2021-09-22 23:46:15	←	dhouthoo has quit (Quit: WeeChat 3.2)
2021-09-22 23:46:33	Yotta	Oh right
2021-09-22 23:47:23	dminuoso	Guest47: Mmm, actually nothing up yet. Irrespective of what the solution is, please file a bug report. A panic is always a bug.
2021-09-22 23:47:48	dminuoso	That error looks almost like GHC could fail more graciously
2021-09-22 23:47:55	Guest47	dminuoso thanks dont see anything specifically 
2021-09-22 23:48:04	←	yauhsien has quit (Ping timeout: 264 seconds)
2021-09-22 23:48:35	Guest47	it almost seems like I am missing some dep in OSX but `/usr/bin/iconv` exists and is the same version as my other mac which works fine
2021-09-22 23:48:42	monochrom	Does tail y always exist?
2021-09-22 23:49:23	geekosaur	Guest47, it's not an archive though. in fact I'm kinda bewildered by it using loadArchive on it
2021-09-22 23:49:31	geekosaur	this does smell like a bug
2021-09-22 23:49:49	Yotta	https://paste.tomsmeding.com/k73xO9F0
2021-09-22 23:50:02	Guest47	your right - its just the binary
2021-09-22 23:50:16	←	Yotta has quit (Quit: Client closed)
2021-09-22 23:50:17	dminuoso	geekosaur: Do you know what GHC even means by "archive"?
2021-09-22 23:50:26	→	Yotta has joined #haskell
2021-09-22 23:50:30	Guest47	I assume .a or dylib? 
2021-09-22 23:50:35	dminuoso	Im staring at C code of this, and I cant quite make sense of it
2021-09-22 23:50:49	geekosaur	I'd expect "archive" to mena a .a
2021-09-22 23:51:02	Guest47	I can install libiconv with brew and it changes the path of iconv in the error but nothing much else
2021-09-22 23:51:34	dminuoso	geekosaur: ah indeed!
2021-09-22 23:51:47	dminuoso	Turns out .a archives start with the "!<arch>" magic header, which is what the C code probes for.
2021-09-22 23:52:10	dminuoso	Guest47: File a bug report. It's likely the GHC team might have some workaround 
2021-09-22 23:52:22	dminuoso	But this looks really strange
2021-09-22 23:52:23	glguy	Guest47: What version of GHC? What version of stack?
2021-09-22 23:52:38	Guest47	(.venv) ❱ stack --version
2021-09-22 23:52:38	Guest47	Version 2.7.3, Git revision 7927a3aec32e2b2e5e4fb5be76d0d50eddcc197f x86_64 hpack-0.34.4
2021-09-22 23:52:42	awpr	Yotta: GHC thinks you want to apply `[]` to that if-expression, because it's just stuck next to the list.  you've written the body of another clause without writing the function name and argument patterns
2021-09-22 23:52:53	janus	dminuoso: haha i thought <arch> was supposed be the actual architecture, but it is that literal string. weird
2021-09-22 23:53:05	glguy	Guest47: and is it an x86_64 or arm mac?
2021-09-22 23:53:15	monochrom	"Agh" :)
2021-09-22 23:53:22	Guest47	x86_64
2021-09-22 23:53:23	monochrom	or even, "Argh"
2021-09-22 23:53:46	geekosaur	nope, short for "archive"
2021-09-22 23:54:06	Guest47	so far it happens with every version of stack resolvers including nightly
2021-09-22 23:54:12	geekosaur	while making a 8-byte / 64-bit magic number
2021-09-22 23:54:23	janus	% file /usr/lib/libdb-4.8.a
2021-09-22 23:54:23	yahb	janus: ; <interactive>:66:1: error: Variable not in scope: file :: a -> c; <interactive>:66:7: error:; * Variable not in scope: usr :: a -> c; * Perhaps you meant `use' (imported from Control.Lens); <interactive>:66:11: error: Variable not in scope: lib :: a -> c; <interactive>:66:15: error: Variable not in scope: libdb :: a -> c; <interactive>:66:25: error: Variable not in scope: a :: a -> b0
2021-09-22 23:54:23	janus	/usr/lib/libdb-4.8.a: current ar archive
2021-09-22 23:54:30	janus	i wonder what "current" means
2021-09-22 23:54:57	tomsmeding	janus: you thoroughly confused ghci right there
2021-09-22 23:56:09	janus	yeah maybe i shouldn't use % in my PS1... i dunno, i just picked my favorite zsh preset.. why didn't they stick with $?
2021-09-22 23:56:19	geekosaur	janus, archives have had a number of different magic numbers over the years
2021-09-22 23:56:55	←	nvmd has quit (Quit: Later, nerds.)
2021-09-22 23:56:56	geekosaur	binary codes, then #!ar, then #!<arch>
2021-09-22 23:57:14	→	econo has joined #haskell
2021-09-22 23:57:26	janus	hmm when it was #!ar was it something like a linker script then?
2021-09-22 23:57:35	janus	never fiddled with linker scripts, don't know if i want to :P
2021-09-22 23:57:53	geekosaur	I don't thinl the concept of linker scripts existed at that time
2021-09-22 23:58:06	geekosaur	but linkers were just starting to become more complex
2021-09-22 23:58:22	dminuoso	geekosaur: Judging from the source code of `fil` "a number" means 2 total.
2021-09-22 23:58:28	geekosaur	and archoves were starting to change to "nobody uses them for anything but object files"
2021-09-22 23:58:35	dminuoso	There is `System V Release 1 ar archive` and `current ar archive`
2021-09-22 23:58:41	tomsmeding	what if we get a new .a file format that supersedes the current one? "new ar archive", and have "current" refer to the old one? :p
2021-09-22 23:59:04	awpr	`postmodern ar archive`
2021-09-22 23:59:06	→	SawyerBergeron[m has joined #haskell
2021-09-22 23:59:08	dminuoso	postcurrent.
2021-09-22 23:59:13	geekosaur	dminuoso, the binary ones were from V7 unix, I assume file just doesn't care about those
2021-09-22 23:59:22	dminuoso	Possibly, yeah
2021-09-22 23:59:30	tomsmeding	blackcurrant ar archive
2021-09-22 23:59:43	awpr	to catch up with anthropology, it needs to reach the point where "postcurrent" is a few generations back
2021-09-23 00:00:28	tomsmeding	there _should_ have been a better name than "current" to give to that file format
2021-09-23 00:00:29	dminuoso	A century from now, the term "current" will mean "back around 2000"
2021-09-23 00:00:30	Guest47	opened https://gitlab.haskell.org/ghc/ghc/-/issues/20407
2021-09-23 00:04:58	dminuoso	Mmm, this probably happens right in template haskell
2021-09-23 00:05:30	→	jstolarek has joined #haskell
2021-09-23 00:05:39	←	koolazer has quit (Ping timeout: 252 seconds)
2021-09-23 00:06:22	dminuoso	The number of strange linker bugs Ive had over the years in TH..
2021-09-23 00:07:52	←	favonia has quit (Ping timeout: 264 seconds)
2021-09-23 00:09:20	janus	dminuoso: haha kinda like 'modern' in architecture means 1910s and after :P ?
2021-09-23 00:09:48	monochrom	I thought that was "decca".
2021-09-23 00:10:23	monochrom	I have a decca style Monopoly set. :)
2021-09-23 00:11:36	janus	monochrom: i never heard that term, google doesn't seem to helpful. is it an architecture term? or something else?
2021-09-23 00:11:55	shapr	art deco?
2021-09-23 00:12:13	shapr	https://en.wikipedia.org/wiki/Art_Deco ?
2021-09-23 00:16:51	ℹ	irc: disconnected from server
2021-09-23 11:40:04	→	oxide has joined #haskell
2021-09-23 11:40:04	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-23 11:40:04	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-23 11:40:04	ℹ	Channel #haskell: 702 nicks (1 op, 0 voices, 701 normals)
2021-09-23 11:40:05	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-23 11:40:29	→	arpl has joined #haskell
2021-09-23 11:43:16	←	mikoto-chan has quit (Ping timeout: 264 seconds)
2021-09-23 11:44:51	←	vicfred has quit (Quit: Leaving)
2021-09-23 11:45:07	→	lortabac has joined #haskell
2021-09-23 11:46:07	←	xff0x has quit (Ping timeout: 246 seconds)
2021-09-23 11:48:23	←	leeb has quit (Quit: WeeChat 3.1)
2021-09-23 11:54:13	→	Gurkenglas has joined #haskell
2021-09-23 11:55:17	→	michalz has joined #haskell
2021-09-23 11:56:46	→	max22- has joined #haskell
2021-09-23 12:01:03	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-23 12:02:51	→	ubert has joined #haskell
2021-09-23 12:03:20	→	Vajb has joined #haskell
2021-09-23 12:13:56	→	dhouthoo has joined #haskell
2021-09-23 12:16:57	c_wraith	Oh hey, I finally found the documentation for what happened to typed template haskell in GHC 9:  https://github.com/mpickering/ghc-proposals/blob/code-texp/proposals/0000-code-texp.rst
2021-09-23 12:17:28	c_wraith	man, that wasn't even listed in the ghc release notes
2021-09-23 12:18:28	→	yauhsien has joined #haskell
2021-09-23 12:20:23	→	alzgh has joined #haskell
2021-09-23 12:26:57	→	xff0x has joined #haskell
2021-09-23 12:29:35	←	yauhsien has quit (Remote host closed the connection)
2021-09-23 12:30:12	→	yauhsien has joined #haskell
2021-09-23 12:30:33	→	wonko has joined #haskell
2021-09-23 12:32:41	←	yauhsien has quit (Remote host closed the connection)
2021-09-23 12:38:50	→	yauhsien has joined #haskell
2021-09-23 12:39:25	→	fendor has joined #haskell
2021-09-23 12:39:52	←	tomsmeding has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-09-23 12:40:43	→	cfricke has joined #haskell
2021-09-23 12:43:33	←	yauhsien has quit (Ping timeout: 260 seconds)
2021-09-23 12:43:33	←	Sgeo has quit (Read error: Connection reset by peer)
2021-09-23 12:44:03	←	jassob1 has quit (Ping timeout: 252 seconds)
2021-09-23 12:44:39	←	max22- has quit (Quit: Leaving)
2021-09-23 12:45:56	→	tomsmeding has joined #haskell
2021-09-23 12:47:49	→	max22- has joined #haskell
2021-09-23 12:52:17	←	econo has quit (Quit: Connection closed for inactivity)
2021-09-23 12:56:02	←	tzh has quit (Quit: zzz)
2021-09-23 13:01:03	←	Phantastes has quit (Quit: Client closed)
2021-09-23 13:02:25	←	xff0x has quit (Ping timeout: 246 seconds)
2021-09-23 13:05:33	←	max22- has quit (Remote host closed the connection)
2021-09-23 13:06:01	→	xff0x has joined #haskell
2021-09-23 13:06:47	→	jassob1 has joined #haskell
2021-09-23 13:12:58	ℹ	irc: disconnected from server
2021-09-23 13:13:16	→	oxide has joined #haskell
2021-09-23 13:13:16	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-23 13:13:16	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-23 13:13:16	ℹ	Channel #haskell: 706 nicks (1 op, 0 voices, 705 normals)
2021-09-23 13:13:17	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-23 13:13:45	←	dschrempf has quit (Ping timeout: 252 seconds)
2021-09-23 13:14:42	→	max22- has joined #haskell
2021-09-23 13:15:39	→	merijn has joined #haskell
2021-09-23 13:18:51	←	max22- has quit (Remote host closed the connection)
2021-09-23 13:29:44	→	deejaytee has joined #haskell
2021-09-23 13:35:06	→	acidjnk has joined #haskell
2021-09-23 13:35:39	→	hendursa1 has joined #haskell
2021-09-23 13:38:26	←	hendursaga has quit (Ping timeout: 276 seconds)
2021-09-23 13:38:55	→	max22- has joined #haskell
2021-09-23 13:44:43	←	max22- has quit (Remote host closed the connection)
2021-09-23 13:47:43	→	allbery_b has joined #haskell
2021-09-23 13:47:43	←	geekosaur has quit (Killed (NickServ (GHOST command used by allbery_b)))
2021-09-23 13:47:46	ℹ	allbery_b is now known as geekosaur
2021-09-23 13:53:11	ℹ	irc: disconnected from server
2021-09-23 14:04:43	→	oxide has joined #haskell
2021-09-23 14:04:43	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-23 14:04:43	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-23 14:04:43	ℹ	Channel #haskell: 708 nicks (1 op, 0 voices, 707 normals)
2021-09-23 14:04:43	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-23 14:05:45	→	madjestic has joined #haskell
2021-09-23 14:09:55	→	dschrempf has joined #haskell
2021-09-23 14:11:46	←	hnOsmium0001 has quit (Quit: Connection closed for inactivity)
2021-09-23 14:12:08	←	eggplantade has quit (Remote host closed the connection)
2021-09-23 14:12:34	→	jstolarek has joined #haskell
2021-09-23 14:13:31	←	pony has quit (Quit: WeeChat 3.0.1)
2021-09-23 14:19:15	←	jstolarek has quit (Quit: leaving)
2021-09-23 14:23:50	lortabac	imagine it was technically possible to have Functor and Traversable instances for Set, would such instances be lawful?
2021-09-23 14:24:45	dminuoso	No.
2021-09-23 14:25:13	dminuoso	`fmap (const 1)`
2021-09-23 14:25:16	dminuoso	What now?
2021-09-23 14:25:19	lortabac	technically the laws are not violated, but the documentation says "preserving the structure" and "same shape" in bold
2021-09-23 14:26:10	→	__monty__ has joined #haskell
2021-09-23 14:27:08	→	yauhsien has joined #haskell
2021-09-23 14:27:09	dminuoso	Or rather, if we had functor on fmap, we could modify the set structure
2021-09-23 14:27:21	dminuoso	functor on set, argh.
2021-09-23 14:29:26	lortabac	I agree with you that it's morally wrong, but a colleague of mine made me notice that the laws are not violated
2021-09-23 14:29:55	dminuoso	Is associativity preserved?>
2021-09-23 14:30:04	←	Teohehim[m] has quit (Quit: You have been kicked for being idle)
2021-09-23 14:30:13	dminuoso	I'd think not
2021-09-23 14:30:25	→	Teohehim[m] has joined #haskell
2021-09-23 14:32:17	dminuoso	But otoh, if we take free theorems, we just need to prove that `fmap id = id`
2021-09-23 14:32:20	dminuoso	So I guess you're right.
2021-09-23 14:32:28	lortabac	I don't actually know
2021-09-23 14:33:15	dminuoso	I mean composition of functions is associative, irrespective of whether they are injective or not.
2021-09-23 14:33:37	←	benin036932301 has quit (Ping timeout: 252 seconds)
2021-09-23 14:34:14	tomsmeding	I don't even see an associativity law in the Functor type class
2021-09-23 14:34:39	dminuoso	Oh sorry, I meant composition.
2021-09-23 14:34:46	dminuoso	Im going back to work now.
2021-09-23 14:35:13	tomsmeding	Things get hairy though when the ordering on your contained types doesn't have structural equality
2021-09-23 14:35:55	tomsmeding	like, data Thing a = Thing a Int ; instance Eq a => Eq (Thing a) where Thing x _ == Thing y _ = x == y ; instance Ord a => Ord (Thing a) where compare (Thing x _) (Thing y _) = compare x y
2021-09-23 14:36:37	dminuoso	Does it, though?
2021-09-23 14:37:03	tomsmeding	let f (Thing x y) = Thing y x
2021-09-23 14:37:06	dminuoso	Just to get that part away, there is a library on hackage with constrained typeclasses.
2021-09-23 14:37:15	dminuoso	So with that we could make a Functor-like typeclass for Set.
2021-09-23 14:37:21	dminuoso	Cant recall its name right now
2021-09-23 14:37:48	dminuoso	But we can relatively trivially make it ourselves, you just carry a set of constraints as an associated type in the typeclass.
2021-09-23 14:37:52	tomsmeding	fmap f (fmap f (Set.fromList [Thing 1 10, Thing 2 10, Thing 3 10])) = Set.fromList [Thing ? 10] for some non-deterministic value of ?
2021-09-23 14:38:07	tomsmeding	but f . f = id, so fmap (f . f) (Set.fromList [things]) = Set.fromList [things]
2021-09-23 14:38:15	→	tfeb has joined #haskell
2021-09-23 14:38:22	lortabac	thanks tomsmeding 
2021-09-23 14:38:45	dminuoso	tomsmeding: We only need to prove `fmap id = id`
2021-09-23 14:38:48	tomsmeding	this example presented by Thing 10 1 == Thing 10 2
2021-09-23 14:38:49	dminuoso	Free theorems.
2021-09-23 14:38:58	dminuoso	Though, do they even apply here?
2021-09-23 14:39:01	tomsmeding	well fmap id = id here!
2021-09-23 14:39:05	dminuoso	I think they do.
2021-09-23 14:39:07	dminuoso	Yes.
2021-09-23 14:39:14	tomsmeding	but the composition law doesn't hold :p
2021-09-23 14:39:51	tomsmeding	but really, the type of some 'ordfmap' would be (Ord a, Ord b) => (a -> b) -> f a -> f b
2021-09-23 14:40:02	dminuoso	tomsmeding: mmm, arguably thye are still the same.
2021-09-23 14:40:12	tomsmeding	meaning that it has two additional pieces of data, the Ord dictionaries; so I think the free theorem would get a lot more complicated
2021-09-23 14:40:25	⚡	tomsmeding doesn't know enough about free theorems to be able to say what they would become here
2021-09-23 14:40:32	dminuoso	So lets make it concrete
2021-09-23 14:40:34	→	lavaman has joined #haskell
2021-09-23 14:44:58	←	lavaman has quit (Ping timeout: 246 seconds)
2021-09-23 14:47:32	tomsmeding	dminuoso: https://paste.tomsmeding.com/dIxK0hCQ
2021-09-23 14:51:01	←	neo1 has quit (Remote host closed the connection)
2021-09-23 14:51:11	dminuoso	Ah.
2021-09-23 14:55:51	sshine	when 'data Foo f = Foo { fooBar :: f Bar }' cannot derive Eq, Ord, Show, is that because of an impossibility? I imagine that the instance would have to look like 'Show (f Bar) => Show (Foo f)'...
2021-09-23 14:56:03	←	dschrempf has quit (Ping timeout: 252 seconds)
2021-09-23 14:56:09	tomsmeding	also not when you set FlexibleContexts?
2021-09-23 14:56:45	tomsmeding	in any case, with FlexibleContexts, you can use StandaloneDeriving to write it yourself: deriving instance Show (f Bar) => Show (Foo f)
2021-09-23 14:56:46	merijn	sshine: You can standalone derive it
2021-09-23 14:56:56	merijn	ah, too late
2021-09-23 14:56:58	⚡	tomsmeding was first
2021-09-23 14:57:16	merijn	(Show1 f) might also work :p
2021-09-23 14:58:11	→	dschrempf has joined #haskell
2021-09-23 14:59:04	sshine	thanks :)
2021-09-23 15:01:56	sshine	then if I've got a whole bunch of fields prefixed with f, then that seems a little inconvenient. I guess I could derive my instances for particular f rather than all f.
2021-09-23 15:03:16	sshine	there's a bunch for which it doesn't make any sense anyways.
2021-09-23 15:06:02	←	tfeb has quit (Quit: died)
2021-09-23 15:12:39	→	eggplantade has joined #haskell
2021-09-23 15:13:41	←	yauhsien has quit (Remote host closed the connection)
2021-09-23 15:15:43	→	kuribas has joined #haskell
2021-09-23 15:16:23	kuribas	lens           > gcc: runInteractiveProcess: posix_spawnp: resource exhausted (Cannot allocate memory)
2021-09-23 15:16:30	kuribas	Why would lens require > 3 GB?
2021-09-23 15:16:37	kuribas	also, why does lens call gcc?
2021-09-23 15:16:47	kuribas	or is this during linking?
2021-09-23 15:17:28	←	eggplantade has quit (Ping timeout: 264 seconds)
2021-09-23 15:17:57	→	pera has joined #haskell
2021-09-23 15:19:16	→	yauhsien has joined #haskell
2021-09-23 15:20:44	←	yauhsien has quit (Remote host closed the connection)
2021-09-23 15:22:47	[exa]	kuribas: likely
2021-09-23 15:23:35	→	yauhsien has joined #haskell
2021-09-23 15:26:13	→	marmayr has joined #haskell
2021-09-23 15:28:25	←	wonko has quit (Changing host)
2021-09-23 15:28:25	→	wonko has joined #haskell
2021-09-23 15:28:40	←	yauhsien has quit (Ping timeout: 265 seconds)
2021-09-23 15:32:06	←	rond_ has quit (Ping timeout: 256 seconds)
2021-09-23 15:34:03	→	euandreh_ has joined #haskell
2021-09-23 15:34:43	→	gehmehgeh has joined #haskell
2021-09-23 15:35:15	→	mc47 has joined #haskell
2021-09-23 15:37:08	→	rond_ has joined #haskell
2021-09-23 15:39:37	←	Gurkenglas has quit (Ping timeout: 252 seconds)
2021-09-23 15:42:05	←	phma has quit (Read error: Connection reset by peer)
2021-09-23 15:42:46	→	phma has joined #haskell
2021-09-23 15:44:57	→	Nova_ has joined #haskell
2021-09-23 15:47:41	←	Nova_ has left #haskell
2021-09-23 15:48:44	→	Nova_ has joined #haskell
2021-09-23 15:51:55	←	Nova_ has left #haskell (Textual IRC Client: www.textualapp.com)
2021-09-23 15:56:17	←	cheater has quit (Ping timeout: 260 seconds)
2021-09-23 15:56:19	→	cheater1__ has joined #haskell
2021-09-23 15:56:22	ℹ	cheater1__ is now known as cheater
2021-09-23 16:00:53	tomsmeding	kuribas: compiling aeson takes >2GB, if I recall correctly the same holds for vector, perhaps to a slightly lesser degree
2021-09-23 16:00:58	tomsmeding	/me is not surprised
2021-09-23 16:01:37	←	dumbsharka has quit (Ping timeout: 252 seconds)
2021-09-23 16:01:47	kuribas	tomsmeding: I have 3 GB, (no swap).
2021-09-23 16:01:58	kuribas	we added 2 GB and 4 GB swap, now it compiles :)
2021-09-23 16:02:15	tomsmeding	haskell (tm)
2021-09-23 16:02:18	←	ulvarrefr has quit (Remote host closed the connection)
2021-09-23 16:02:29	→	dumbsharka has joined #haskell
2021-09-23 16:03:17	→	notzmv has joined #haskell
2021-09-23 16:03:56	maerwald	`module <...> cannot be linked; it is only available as a boot module`
2021-09-23 16:03:58	maerwald	uh
2021-09-23 16:04:06	→	Nova____________ has joined #haskell
2021-09-23 16:04:19	←	Nova____________ has left #haskell
2021-09-23 16:04:46	maerwald	this is a lie
2021-09-23 16:06:58	maerwald	I think TH breaks this
2021-09-23 16:07:06	tomsmeding	that's what you think
2021-09-23 16:07:57	→	yauhsien has joined #haskell
2021-09-23 16:08:13	←	dschrempf has quit (Ping timeout: 252 seconds)
2021-09-23 16:09:24	←	merijn has quit (Ping timeout: 268 seconds)
2021-09-23 16:10:46	→	pbrisbin has joined #haskell
2021-09-23 16:10:53	→	merijn has joined #haskell
2021-09-23 16:12:28	←	yauhsien has quit (Ping timeout: 246 seconds)
2021-09-23 16:15:33	←	frisbro_ has quit (Quit: Connection closed for inactivity)
2021-09-23 16:15:33	←	frisbro has quit (Quit: Connection closed for inactivity)
2021-09-23 16:15:58	←	merijn has quit (Ping timeout: 246 seconds)
2021-09-23 16:16:22	→	merijn has joined #haskell
2021-09-23 16:17:03	←	ishutin has quit (Ping timeout: 252 seconds)
2021-09-23 16:18:49	→	ishutin has joined #haskell
2021-09-23 16:21:50	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-23 16:22:09	→	merijn has joined #haskell
2021-09-23 16:22:17	→	\Nova has joined #haskell
2021-09-23 16:27:21	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-23 16:27:57	→	merijn has joined #haskell
2021-09-23 16:30:43	→	alx741 has joined #haskell
2021-09-23 16:32:58	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-23 16:33:39	→	merijn has joined #haskell
2021-09-23 16:34:52	←	pbrisbin has quit (Ping timeout: 246 seconds)
2021-09-23 16:38:37	→	dschrempf has joined #haskell
2021-09-23 16:40:59	→	AlexNoo_ has joined #haskell
2021-09-23 16:42:40	←	AlexZenon has quit (Ping timeout: 264 seconds)
2021-09-23 16:43:51	←	Alex_test has quit (Ping timeout: 252 seconds)
2021-09-23 16:44:21	←	AlexNoo has quit (Ping timeout: 260 seconds)
2021-09-23 16:47:04	→	AlexZenon has joined #haskell
2021-09-23 16:47:53	→	Alex_test has joined #haskell
2021-09-23 16:49:46	←	Teohehim[m] has quit (Quit: You have been kicked for being idle)
2021-09-23 16:51:19	←	\Nova has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-09-23 16:51:40	→	\Nova has joined #haskell
2021-09-23 16:51:40	←	\Nova has quit (Client Quit)
2021-09-23 16:53:25	→	\Nova has joined #haskell
2021-09-23 16:53:26	←	\Nova has quit (Client Quit)
2021-09-23 17:02:12	←	alzgh has quit (Ping timeout: 256 seconds)
2021-09-23 17:05:26	TDANG_	I want to learn Plutus. Where to get started?
2021-09-23 17:07:37	maerwald	TDANG_: https://plutus-pioneer-program.readthedocs.io/en/latest/index.html
2021-09-23 17:08:00	maerwald	if you've never done haskell, that won't be an easy experience
2021-09-23 17:08:25	maerwald	even for haskellers I'd say plutus is pretty advanced Haskell and has complicated API
2021-09-23 17:08:32	TDANG_	I learned basic Haskell already
2021-09-23 17:08:46	maerwald	maybe wait for Marlowe
2021-09-23 17:08:52	←	cfricke has quit (Quit: WeeChat 3.2.1)
2021-09-23 17:08:55	maerwald	Plutus isn't basic haskell, unfortunately
2021-09-23 17:09:07	TDANG_	Oh, I see 
2021-09-23 17:09:58	TDANG_	So I need to learn advance Haskell first
2021-09-23 17:10:00	TDANG_	Thanks
2021-09-23 17:11:25	sshine	TDANG_, I think you start here: https://docs.cardano.org/plutus/learn-about-plutus
2021-09-23 17:11:57	TDANG_	ya, thanks
2021-09-23 17:12:26	TDANG_	any source from Youtube?
2021-09-23 17:13:20	sshine	TDANG_, I don't know. I wish I knew of some way to discover what youtube videos existed given some set of keywords. :-D
2021-09-23 17:13:54	TDANG_	;-) thanks anyway
2021-09-23 17:14:43	→	eggplantade has joined #haskell
2021-09-23 17:19:42	←	eggplantade has quit (Ping timeout: 268 seconds)
2021-09-23 17:22:01	sshine	TDANG_, it seems that the main challenge in learning Plutus is understanding the domain model of the Cardano blockchain. even the simplest examples of a Plutus contract uses a bunch of terminology and what appears to be stubs.
2021-09-23 17:22:10	sshine	TDANG_, https://www.youtube.com/watch?v=IEn6jUo-0vU -- I think this is a good start on youtube.
2021-09-23 17:22:32	ℹ	AlexNoo_ is now known as AlexNoo
2021-09-23 17:23:06	→	neo1 has joined #haskell
2021-09-23 17:23:36	TDANG_	Ya, I watched that video series and it seems to be too complicated too
2021-09-23 17:23:51	maerwald	sshine: I think the only time when you actually submit a contract is when you *redeem*. The "control flow" isn't well documented imo.
2021-09-23 17:24:15	TDANG_	Ya
2021-09-23 17:24:37	maerwald	before that it's just addresses and hashes
2021-09-23 17:24:46	maerwald	a huge pile of those
2021-09-23 17:25:00	TDANG_	Phew
2021-09-23 17:25:16	maerwald	TDANG_: but you can try the plutus playground
2021-09-23 17:25:26	maerwald	https://playground.plutus.iohkdev.io/
2021-09-23 17:30:15	→	frisbro_ has joined #haskell
2021-09-23 17:32:19	→	bontaq has joined #haskell
2021-09-23 17:32:49	→	yauhsien has joined #haskell
2021-09-23 17:37:01	→	raehik has joined #haskell
2021-09-23 17:37:35	sshine	maerwald, good to know. I don't know much about how Cardano's runtime works.
2021-09-23 17:39:01	→	machinedgod has joined #haskell
2021-09-23 17:39:54	→	jespada has joined #haskell
2021-09-23 17:41:07	→	tommd has joined #haskell
2021-09-23 17:41:31	→	[itchyjunk] has joined #haskell
2021-09-23 17:55:21	←	deejaytee has quit (Ping timeout: 252 seconds)
2021-09-23 17:56:29	←	bitdex has quit (Quit: = "")
2021-09-23 17:56:49	→	yinghua has joined #haskell
2021-09-23 17:58:33	←	yauhsien has quit (Remote host closed the connection)
2021-09-23 17:59:08	→	yauhsien has joined #haskell
2021-09-23 18:01:57	→	lbseale has joined #haskell
2021-09-23 18:02:17	←	tinwood has quit (Remote host closed the connection)
2021-09-23 18:03:41	←	yauhsien has quit (Ping timeout: 260 seconds)
2021-09-23 18:05:15	←	dschrempf has quit (Ping timeout: 252 seconds)
2021-09-23 18:05:22	→	tinwood has joined #haskell
2021-09-23 18:05:23	←	tinwood has quit (Changing host)
2021-09-23 18:05:23	→	tinwood has joined #haskell
2021-09-23 18:06:31	←	arpl has quit (Quit: Client closed)
2021-09-23 18:11:38	→	arpl has joined #haskell
2021-09-23 18:12:16	←	arpl has quit (Client Quit)
2021-09-23 18:13:21	→	shapr has joined #haskell
2021-09-23 18:17:36	→	fendor_ has joined #haskell
2021-09-23 18:20:13	←	fendor has quit (Ping timeout: 252 seconds)
2021-09-23 18:21:05	→	yauhsien has joined #haskell
2021-09-23 18:24:18	←	Guest4896 has quit (Remote host closed the connection)
2021-09-23 18:26:08	→	biberu\ has joined #haskell
2021-09-23 18:27:40	→	waleee has joined #haskell
2021-09-23 18:29:36	←	biberu has quit (Ping timeout: 252 seconds)
2021-09-23 18:29:36	ℹ	biberu\ is now known as biberu
2021-09-23 18:32:09	→	slowButPresent has joined #haskell
2021-09-23 18:33:40	←	yauhsien has quit (Remote host closed the connection)
2021-09-23 18:35:58	→	yauhsien has joined #haskell
2021-09-23 18:36:49	→	deejaytee has joined #haskell
2021-09-23 18:37:39	←	MQ-17J has quit (Ping timeout: 265 seconds)
2021-09-23 18:37:58	→	MQ-17J has joined #haskell
2021-09-23 18:39:23	→	doyougnu has joined #haskell
2021-09-23 18:40:33	←	yauhsien has quit (Ping timeout: 260 seconds)
2021-09-23 18:44:02	←	wagle has quit (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
2021-09-23 18:44:35	→	wagle has joined #haskell
2021-09-23 18:45:45	←	cheater has quit (Ping timeout: 246 seconds)
2021-09-23 18:46:09	→	cheater has joined #haskell
2021-09-23 18:49:22	←	wagle has quit (Client Quit)
2021-09-23 18:49:54	→	wagle has joined #haskell
2021-09-23 18:53:05	→	cfricke has joined #haskell
2021-09-23 18:53:34	←	deejaytee has quit (Quit: Leaving)
2021-09-23 18:54:17	←	geekosaur has quit (Remote host closed the connection)
2021-09-23 18:54:42	→	geekosaur has joined #haskell
2021-09-23 18:56:36	→	Guest372 has joined #haskell
2021-09-23 18:57:45	dminuoso	Does someone know where in Haskell I can find IMF time/date serialization routines? Im already using servant/warp, so if there's something in my transitive dependency tree that'd be ideal
2021-09-23 18:58:20	dminuoso	If it helps, that's the same format as HTTP Expires or Last-Modified headers use.
2021-09-23 18:59:42	dminuoso	My concrete problem is, I want to encode a timestamp in an Expires header in a servant response.
2021-09-23 19:03:25	→	pbrisbin has joined #haskell
2021-09-23 19:08:28	←	waleee has quit (Ping timeout: 264 seconds)
2021-09-23 19:10:08	→	hexfive has joined #haskell
2021-09-23 19:10:25	←	hendursa1 has quit (Quit: hendursa1)
2021-09-23 19:10:55	→	hendursaga has joined #haskell
2021-09-23 19:11:49	→	Wolfe has joined #haskell
2021-09-23 19:13:13	→	zebrag has joined #haskell
2021-09-23 19:13:35	←	hexfive has quit (Client Quit)
2021-09-23 19:15:00	→	nschoe has joined #haskell
2021-09-23 19:16:09	←	fendor_ has quit (Remote host closed the connection)
2021-09-23 19:19:32	→	byorgey has joined #haskell
2021-09-23 19:20:31	→	wroathe has joined #haskell
2021-09-23 19:20:32	←	wroathe has quit (Changing host)
2021-09-23 19:20:32	→	wroathe has joined #haskell
2021-09-23 19:20:37	→	yauhsien has joined #haskell
2021-09-23 19:25:30	←	yauhsien has quit (Ping timeout: 265 seconds)
2021-09-23 19:31:07	→	shriekingnoise has joined #haskell
2021-09-23 19:33:45	←	MQ-17J has quit (Ping timeout: 260 seconds)
2021-09-23 19:34:21	←	neo1 has quit (Ping timeout: 252 seconds)
2021-09-23 19:35:15	←	Wolfe has quit (Quit: Client closed)
2021-09-23 19:36:52	←	alx741 has quit (Ping timeout: 246 seconds)
2021-09-23 19:38:33	←	kimjetwav has quit (Quit: logout)
2021-09-23 19:40:35	→	Everything has joined #haskell
2021-09-23 19:45:50	→	hnOsmium0001 has joined #haskell
2021-09-23 19:48:18	←	rond_ has quit (Quit: Client closed)
2021-09-23 19:49:57	→	alx741 has joined #haskell
2021-09-23 19:51:08	←	mjrosenb has quit (Remote host closed the connection)
2021-09-23 19:52:34	→	superstar64 has joined #haskell
2021-09-23 19:53:05	superstar64	Is `(forall m. Monad m => m a)` isomorphic to `a`?
2021-09-23 19:53:10	←	dextaa has quit (Ping timeout: 252 seconds)
2021-09-23 19:53:28	dminuoso	No.
2021-09-23 19:53:36	→	rond_ has joined #haskell
2021-09-23 19:54:04	←	acidjnk has quit (Ping timeout: 264 seconds)
2021-09-23 19:54:32	superstar64	what stops it from being isomorphic? Can't you instantiate `m` to Identity and convert Identity to any monad using pure?
2021-09-23 19:54:47	dminuoso	Mmm
2021-09-23 19:55:06	dminuoso	superstar64: impredicativity stops it.
2021-09-23 19:55:16	dminuoso	To instantiate `a` at a type involving a forall requires impredicative types
2021-09-23 19:55:26	→	Sgeo has joined #haskell
2021-09-23 19:55:42	dminuoso	Or maybe I misunderstand
2021-09-23 19:56:00	earthy	dminuoso: does hodatime not help?
2021-09-23 19:56:32	dminuoso	let's have a look
2021-09-23 19:58:01	superstar64	and if it is isomorphic, then this should be a valid definition for bind right? `(>>=) :: Monad m => m a -> ((forall m'. Monad m' => m' a) -> m b) -> m b`
2021-09-23 19:58:45	dminuoso	% to :: Monad m => (forall a m. Monad m => m a) -> (forall b. b); to x = runIdentity x
2021-09-23 19:58:45	yahb	dminuoso: 
2021-09-23 19:59:05	dminuoso	But going back - not sure how to do that without impredicativity
2021-09-23 20:00:01	dminuoso	% from :: (forall b. b) -> (forall a m. Monad m => m a); from x = x
2021-09-23 20:00:01	yahb	dminuoso: 
2021-09-23 20:00:02	dminuoso	Oh uh.
2021-09-23 20:00:16	dminuoso	I did not expect that
2021-09-23 20:00:28	earthy	but really, you probably want to just look at Data.Time.Format.ISO8601 from the time package.
2021-09-23 20:00:48	dminuoso	ericson2314: ISO8601 is not IMF time.
2021-09-23 20:00:57	dminuoso	So its not valid
2021-09-23 20:01:23	dminuoso	Can someone explain to me why `from` type checks and doesnt fail with an impredicativity error?
2021-09-23 20:01:31	ericson2314	bad tab complete? :)
2021-09-23 20:01:47	dminuoso	ericson2314: Seems like it. I swear weechat has some strange bugs with tab completion.
2021-09-23 20:02:04	superstar64	dminuoso, i think those definitions are wrong. the types are you want are: `from :: (forall m. Monad m => m a) -> a` and `to :: a -> forall m. Monad m => m a`
2021-09-23 20:02:20	superstar64	`to` here is just pure
2021-09-23 20:03:10	→	dextaa has joined #haskell
2021-09-23 20:03:14	dminuoso	Mmm yeah
2021-09-23 20:03:14	superstar64	and i think eta expanded runIdentity works for `from` here.
2021-09-23 20:03:16	ericson2314	no worries :)
2021-09-23 20:03:18	dminuoso	% from :: (forall m. Monad m => m a) -> a; from x = runIdentity x
2021-09-23 20:03:18	yahb	dminuoso: 
2021-09-23 20:03:39	dminuoso	% to :: Monad m => a -> m a; to = pure
2021-09-23 20:03:40	yahb	dminuoso: 
2021-09-23 20:03:55	dminuoso	superstar64: guess that's an isomorphism then.
2021-09-23 20:04:09	←	xff0x has quit (Ping timeout: 246 seconds)
2021-09-23 20:04:55	→	k`` has joined #haskell
2021-09-23 20:05:00	superstar64	The reason I'm asking is because I'm making my own language and I'm considering putting everything inside a monad.
2021-09-23 20:05:20	→	xff0x has joined #haskell
2021-09-23 20:05:41	superstar64	and I can use that definition of (>>=) I posted earlier to even have variables be inside monads
2021-09-23 20:07:30	earthy	ah. Data.Time.Format.HTTP from the time-http package, or explicitly use a format string with Data.Time.Format.formatTime
2021-09-23 20:08:41	superstar64	I'll require let generalization for every variable binding but I think I get imperative looking code where the type check can tell if it's pure or not.
2021-09-23 20:09:19	superstar64	I should probably look into effect systems to so if something like this exists yet or not.
2021-09-23 20:09:40	→	Lycurgus has joined #haskell
2021-09-23 20:10:25	→	amahl has joined #haskell
2021-09-23 20:10:32	k``	When you `SPECIALIZE` a class method, does it only specialise the definition given in the class's definition, or will it also specialise instance-specific definitions?
2021-09-23 20:14:00	k``	For a more concrete example, say `Foldable` specialized `foldMap` . Would that only apply to the 'default' `foldMap` defined with `foldr`, or any `foldMap` that an instance defines?
2021-09-23 20:16:53	→	eggplantade has joined #haskell
2021-09-23 20:20:24	←	theproffesor has left #haskell (Leaving)
2021-09-23 20:21:21	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-23 20:22:12	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-23 20:22:52	→	alzgh has joined #haskell
2021-09-23 20:24:44	←	FinnElija has quit (Quit: FinnElija)
2021-09-23 20:25:57	→	yauhsien has joined #haskell
2021-09-23 20:28:21	→	FinnElija has joined #haskell
2021-09-23 20:28:35	sshine	I'm using 'req' to create an authenticated HTTP request. but running my request, I don't get any output. I suspect an error isn't propagated. I tried changing the retry policy so I'm not waiting a long time, but I'm still not getting anything.
2021-09-23 20:30:12	sshine	I also tried to change 'jsonResponse' into 'bsResponse' just to see if it's taking a long time to decode, but still no response.
2021-09-23 20:30:27	←	yauhsien has quit (Ping timeout: 252 seconds)
2021-09-23 20:31:37	sshine	https://gist.github.com/sshine/fd27702785b50f401e088134dc77ca61
2021-09-23 20:31:57	→	neo1 has joined #haskell
2021-09-23 20:31:59	sshine	can anyone suggest a way for me to get debugging output?
2021-09-23 20:33:10	←	wonko has quit (Ping timeout: 265 seconds)
2021-09-23 20:33:39	←	jlamothe has quit (Quit: leaving)
2021-09-23 20:41:27	←	pera has quit (Ping timeout: 252 seconds)
2021-09-23 20:42:41	→	lavaman has joined #haskell
2021-09-23 20:43:11	→	pera has joined #haskell
2021-09-23 20:43:36	ℹ	pera is now known as Guest402
2021-09-23 20:43:52	sshine	pointing it to a netcat, it seems like it doesn't send anything.
2021-09-23 20:46:27	→	epolanski has joined #haskell
2021-09-23 20:47:11	←	lavaman has quit (Ping timeout: 265 seconds)
2021-09-23 20:49:21	→	neo2 has joined #haskell
2021-09-23 20:50:27	→	wonko has joined #haskell
2021-09-23 20:51:29	←	lortabac has quit (Quit: WeeChat 2.8)
2021-09-23 20:51:51	←	neo2 has quit (Read error: Connection reset by peer)
2021-09-23 20:53:00	←	neo1 has quit (Ping timeout: 252 seconds)
2021-09-23 20:54:29	→	merijn has joined #haskell
2021-09-23 20:54:45	carbolymer	any ideas how can I write a such function: MonadBaseControl b m => (a -> c) -> b (StM m a) -> b (StM m c)
2021-09-23 20:55:04	carbolymer	I can't wrap my head around MonadBaseControl and what can I assume about `StM m`
2021-09-23 20:56:10	c_wraith	Do you mean STM?
2021-09-23 20:56:17	carbolymer	no
2021-09-23 20:56:26	carbolymer	c_wraith: https://hackage.haskell.org/package/monad-control-1.0.3.1/docs/Control-Monad-Trans-Control.html#t:StM
2021-09-23 20:56:27	monochrom	Is b a Functor? Is StM m a Functor? This type looks like fmap . fmap
2021-09-23 20:57:12	carbolymer	monochrom: b is a Monad and Applicative, StM can be basically anything
2021-09-23 20:57:13	monochrom	I.e., fmap (fmap (f :: a->c)) :: b (StM m a) -> b (StM m c)
2021-09-23 20:57:16	carbolymer	probably usually a functor
2021-09-23 20:57:43	carbolymer	hmm
2021-09-23 20:58:08	carbolymer	I could add additional constraint that would make it work for `Functor (StM m)`
2021-09-23 20:58:13	c_wraith	StM is a type family.  that makes things complicated.
2021-09-23 20:58:34	carbolymer	s/complicated/interesting
2021-09-23 20:59:03	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-23 21:00:39	→	jlamothe has joined #haskell
2021-09-23 21:02:17	←	bjs has quit
2021-09-23 21:02:24	←	Chai-T-Rex has quit (Quit: Chai-T-Rex)
2021-09-23 21:02:31	→	bjs has joined #haskell
2021-09-23 21:03:00	←	bjs has quit (Client Quit)
2021-09-23 21:03:11	→	bjs has joined #haskell
2021-09-23 21:03:20	→	ChaiTRex has joined #haskell
2021-09-23 21:04:10	→	mikoto-chan has joined #haskell
2021-09-23 21:04:45	←	xff0x has quit (Ping timeout: 260 seconds)
2021-09-23 21:05:13	k``	I can never remember this: In error messages, which is the 'Expected type' and which is the 'Actual type'? (I.e. which one is from the signature and which is from the value?)
2021-09-23 21:05:34	→	xff0x has joined #haskell
2021-09-23 21:06:17	monochrom	I usually don't care. But it seems expected is from the outside, actual is from the inside.
2021-09-23 21:06:59	monochrom	> 'x' :: Bool
2021-09-23 21:07:01	lambdabot	 error:
2021-09-23 21:07:02	lambdabot	     • Couldn't match expected type ‘Bool’ with actual type ‘Char’
2021-09-23 21:07:02	lambdabot	     • In the expression: 'x' :: Bool
2021-09-23 21:07:11	→	yauhsien has joined #haskell
2021-09-23 21:07:12	monochrom	perhaps that helps
2021-09-23 21:07:16	k``	OK, so if I `foldr f` where `f :: b -> a -> b`, the expected type is `a -> b -> b` and the actual type is `b -> a -> b`?
2021-09-23 21:07:43	k``	> foldr (flip (:))
2021-09-23 21:07:45	lambdabot	 error:
2021-09-23 21:07:45	lambdabot	     • Occurs check: cannot construct the infinite type: a ~ [a]
2021-09-23 21:07:45	lambdabot	       Expected type: [a] -> [a] -> [a]
2021-09-23 21:07:55	→	max22- has joined #haskell
2021-09-23 21:08:30	monochrom	> (undefined :: Char) :: Bool
2021-09-23 21:08:32	lambdabot	 error:
2021-09-23 21:08:32	lambdabot	     • Couldn't match expected type ‘Bool’ with actual type ‘Char’
2021-09-23 21:08:32	lambdabot	     • In the expression: (undefined :: Char) :: Bool
2021-09-23 21:08:46	k``	Thanks, monochrom!
2021-09-23 21:08:53	monochrom	> (True :: Char) :: Bool
2021-09-23 21:08:55	lambdabot	 error:
2021-09-23 21:08:55	lambdabot	     • Couldn't match expected type ‘Char’ with actual type ‘Bool’
2021-09-23 21:08:55	lambdabot	     • In the expression: (True :: Char) :: Boolerror:
2021-09-23 21:11:50	←	cfricke has quit (Ping timeout: 265 seconds)
2021-09-23 21:17:21	←	nschoe has quit (Ping timeout: 260 seconds)
2021-09-23 21:22:26	→	ph88 has joined #haskell
2021-09-23 21:26:30	←	mc47 has quit (Remote host closed the connection)
2021-09-23 21:30:48	←	[itchyjunk] has quit (Remote host closed the connection)
2021-09-23 21:31:33	←	Guest402 has quit (Ping timeout: 252 seconds)
2021-09-23 21:32:06	←	hiepph[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:07	←	fcortesi has quit (Read error: Connection reset by peer)
2021-09-23 21:32:07	←	MatrixTravelerbo has quit (Read error: Connection reset by peer)
2021-09-23 21:32:08	←	the-coot[m] has quit (Read error: Connection reset by peer)
2021-09-23 21:32:08	←	aidy has quit (Read error: Connection reset by peer)
2021-09-23 21:32:08	←	jesser[m] has quit (Read error: Connection reset by peer)
2021-09-23 21:32:08	←	kar1 has quit (Read error: Connection reset by peer)
2021-09-23 21:32:08	←	srid[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:09	←	jophish has quit (Write error: Connection reset by peer)
2021-09-23 21:32:09	←	Deide has quit (Write error: Connection reset by peer)
2021-09-23 21:32:09	←	jneira[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:09	←	soft has quit (Write error: Connection reset by peer)
2021-09-23 21:32:09	←	reza[m] has quit (Read error: Connection reset by peer)
2021-09-23 21:32:09	←	yin[m] has quit (Read error: Connection reset by peer)
2021-09-23 21:32:09	←	hsek[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:09	←	sky_lounge[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:09	←	alexfmpe[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:09	←	schuelermine[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:09	←	fgaz has quit (Write error: Connection reset by peer)
2021-09-23 21:32:09	←	bb010g has quit (Read error: Connection reset by peer)
2021-09-23 21:32:09	←	asdofindia-m has quit (Write error: Connection reset by peer)
2021-09-23 21:32:10	←	afotgkmnzj7asv3r has quit (Read error: Connection reset by peer)
2021-09-23 21:32:10	←	SawyerBergeron[m has quit (Read error: Connection reset by peer)
2021-09-23 21:32:10	←	maralorn has quit (Write error: Connection reset by peer)
2021-09-23 21:32:10	←	Arathorn has quit (Read error: Connection reset by peer)
2021-09-23 21:32:10	←	jakefromstatefar has quit (Write error: Connection reset by peer)
2021-09-23 21:32:10	←	fendor[m] has quit (Read error: Connection reset by peer)
2021-09-23 21:32:10	←	moats has quit (Write error: Connection reset by peer)
2021-09-23 21:32:10	←	lwe[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:10	←	SimonWeiss[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:10	←	maerwald[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:10	←	bitonic has quit (Write error: Connection reset by peer)
2021-09-23 21:32:11	←	masaeedu[m] has quit (Read error: Connection reset by peer)
2021-09-23 21:32:11	←	quantum has quit (Write error: Connection reset by peer)
2021-09-23 21:32:11	←	stoicswe[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:11	←	carmysilna has quit (Read error: Connection reset by peer)
2021-09-23 21:32:11	←	Topik[m] has quit (Read error: Connection reset by peer)
2021-09-23 21:32:11	←	erinvanderveen[m has quit (Write error: Connection reset by peer)
2021-09-23 21:32:11	←	rednaZ[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:11	←	IgnatInsarov[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:11	←	ServerStatsDisco has quit (Write error: Connection reset by peer)
2021-09-23 21:32:11	←	Magnus[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:11	←	cdsmith has quit (Write error: Connection reset by peer)
2021-09-23 21:32:11	←	Deewiant has quit (Write error: Connection reset by peer)
2021-09-23 21:32:12	←	hsiktas[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:12	←	Las[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:12	←	infinisil has quit (Write error: Connection reset by peer)
2021-09-23 21:32:12	←	kevin[m]1 has quit (Write error: Connection reset by peer)
2021-09-23 21:32:12	←	Ollie[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:12	←	craige[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:12	←	unrooted has quit (Read error: Connection reset by peer)
2021-09-23 21:32:12	←	smichel17[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:12	←	reddishblue[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:12	←	ru0mad[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:12	←	siraben has quit (Write error: Connection reset by peer)
2021-09-23 21:32:12	←	commuswift[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:13	←	Drew[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:13	←	hughjfchen[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:13	←	PotatoHatsue has quit (Write error: Connection reset by peer)
2021-09-23 21:32:13	←	hjulle[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:13	←	thomasjm[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:13	←	Christoph[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:13	←	denbrahe[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:13	←	OndejSkup[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:13	←	Orbstheorem has quit (Write error: Connection reset by peer)
2021-09-23 21:32:13	←	justosophy[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:13	←	ormaaj has quit (Write error: Connection reset by peer)
2021-09-23 21:32:13	←	kadoban has quit (Write error: Connection reset by peer)
2021-09-23 21:32:13	←	vaibhavsagar[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:13	←	RohitGoswami[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:13	←	ixlun has quit (Write error: Connection reset by peer)
2021-09-23 21:32:13	←	peddie has quit (Write error: Connection reset by peer)
2021-09-23 21:32:13	←	rosariopulella[m has quit (Write error: Connection reset by peer)
2021-09-23 21:32:13	←	Morrow[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:13	←	cloudy has quit (Write error: Connection reset by peer)
2021-09-23 21:32:14	←	psydroid has quit (Write error: Connection reset by peer)
2021-09-23 21:32:14	←	fakehacker[m] has quit (Read error: Connection reset by peer)
2021-09-23 21:32:14	←	dualinverter[m] has quit (Read error: Connection reset by peer)
2021-09-23 21:32:14	←	monadfritz[m] has quit (Read error: Connection reset by peer)
2021-09-23 21:32:14	←	stites[m]1 has quit (Write error: Connection reset by peer)
2021-09-23 21:32:14	←	unclechu has quit (Write error: Connection reset by peer)
2021-09-23 21:32:14	←	ericson2314 has quit (Write error: Connection reset by peer)
2021-09-23 21:32:14	←	marinelli[m] has quit (Write error: Connection reset by peer)
2021-09-23 21:32:15	←	Tisoxin has quit (Read error: Connection reset by peer)
2021-09-23 21:32:15	←	sm has quit (Write error: Connection reset by peer)
2021-09-23 21:32:15	←	zfnmxt has quit (Write error: Connection reset by peer)
2021-09-23 21:32:15	←	oak- has quit (Read error: Connection reset by peer)
2021-09-23 21:32:15	←	bakinonion[m] has quit (Read error: Connection reset by peer)
2021-09-23 21:32:15	←	ManofLetters[m] has quit (Read error: Connection reset by peer)
2021-09-23 21:32:15	←	wysteriary[m] has quit (Read error: Connection reset by peer)
2021-09-23 21:32:15	←	amesgen[m] has quit (Read error: Connection reset by peer)
2021-09-23 21:32:15	←	jchia[m] has quit (Read error: Connection reset by peer)
2021-09-23 21:32:15	←	ongy[m] has quit (Read error: Connection reset by peer)
2021-09-23 21:33:11	→	Null_A has joined #haskell
2021-09-23 21:33:59	→	jakefromstatefar has joined #haskell
2021-09-23 21:34:02	←	chele has quit (Remote host closed the connection)
2021-09-23 21:34:55	→	eggplantade has joined #haskell
2021-09-23 21:35:05	←	chomwitt has quit (Ping timeout: 260 seconds)
2021-09-23 21:35:15	←	Everything has left #haskell
2021-09-23 21:36:00	→	merijn has joined #haskell
2021-09-23 21:36:01	←	wroathe has quit (Ping timeout: 252 seconds)
2021-09-23 21:36:28	awpr	sshine: when I was defining a bunch of those types, I ended up writing instances like `deriving stock instance (forall a. Eq a => Eq (f a), Eq x) => Eq (MyType x f)`
2021-09-23 21:36:29	→	maerwald[m] has joined #haskell
2021-09-23 21:36:41	→	jchia[m] has joined #haskell
2021-09-23 21:36:41	→	MatrixTravelerbo has joined #haskell
2021-09-23 21:36:41	→	dualinverter[m] has joined #haskell
2021-09-23 21:36:41	→	fgaz has joined #haskell
2021-09-23 21:36:41	→	peddie has joined #haskell
2021-09-23 21:36:41	→	Morrow[m] has joined #haskell
2021-09-23 21:36:41	→	cdsmith has joined #haskell
2021-09-23 21:36:41	→	thomasjm[m] has joined #haskell
2021-09-23 21:36:41	→	hsek[m] has joined #haskell
2021-09-23 21:36:41	→	ru0mad[m] has joined #haskell
2021-09-23 21:36:55	→	bb010g has joined #haskell
2021-09-23 21:36:55	→	vaibhavsagar[m] has joined #haskell
2021-09-23 21:36:55	→	Las[m] has joined #haskell
2021-09-23 21:36:55	→	ServerStatsDisco has joined #haskell
2021-09-23 21:36:55	→	amesgen[m] has joined #haskell
2021-09-23 21:36:55	→	the-coot[m] has joined #haskell
2021-09-23 21:36:55	→	moats has joined #haskell
2021-09-23 21:37:07	→	soft has joined #haskell
2021-09-23 21:37:13	awpr	when there are lots of fields and few `Type` type parameters, it saves a lot of typing out `Eq (f Int), Eq (f String), ......`
2021-09-23 21:37:15	→	zfnmxt has joined #haskell
2021-09-23 21:37:23	→	oak- has joined #haskell
2021-09-23 21:37:23	→	kadoban has joined #haskell
2021-09-23 21:37:23	→	bitonic has joined #haskell
2021-09-23 21:37:23	→	Arathorn has joined #haskell
2021-09-23 21:37:23	→	jophish has joined #haskell
2021-09-23 21:37:23	→	ericson2314 has joined #haskell
2021-09-23 21:37:23	→	Ollie[m] has joined #haskell
2021-09-23 21:37:23	→	PotatoHatsue has joined #haskell
2021-09-23 21:37:23	→	ixlun has joined #haskell
2021-09-23 21:37:23	→	unclechu has joined #haskell
2021-09-23 21:37:23	→	Deewiant has joined #haskell
2021-09-23 21:37:23	→	unrooted has joined #haskell
2021-09-23 21:37:35	→	RohitGoswami[m] has joined #haskell
2021-09-23 21:37:35	→	rednaZ[m] has joined #haskell
2021-09-23 21:37:35	→	maralorn has joined #haskell
2021-09-23 21:37:35	→	SimonWeiss[m] has joined #haskell
2021-09-23 21:37:36	→	denbrahe[m] has joined #haskell
2021-09-23 21:37:36	→	lwe[m] has joined #haskell
2021-09-23 21:37:49	→	jesser[m] has joined #haskell
2021-09-23 21:38:01	→	erinvanderveen[m has joined #haskell
2021-09-23 21:38:01	→	reza[m] has joined #haskell
2021-09-23 21:38:01	→	quantum has joined #haskell
2021-09-23 21:38:01	→	marinelli[m] has joined #haskell
2021-09-23 21:38:03	→	hsiktas[m] has joined #haskell
2021-09-23 21:38:15	→	craige[m] has joined #haskell
2021-09-23 21:38:16	→	Orbstheorem has joined #haskell
2021-09-23 21:38:29	→	afotgkmnzj7asv3r has joined #haskell
2021-09-23 21:38:29	→	reddishblue[m] has joined #haskell
2021-09-23 21:38:29	→	sm has joined #haskell
2021-09-23 21:38:29	→	schuelermine[m] has joined #haskell
2021-09-23 21:38:41	→	justosophy[m] has joined #haskell
2021-09-23 21:38:41	→	kevin[m]1 has joined #haskell
2021-09-23 21:38:41	→	Deide has joined #haskell
2021-09-23 21:38:53	→	fakehacker[m] has joined #haskell
2021-09-23 21:38:53	→	hughjfchen[m] has joined #haskell
2021-09-23 21:39:06	→	IgnatInsarov[m] has joined #haskell
2021-09-23 21:39:06	→	srid[m] has joined #haskell
2021-09-23 21:39:06	→	psydroid has joined #haskell
2021-09-23 21:39:07	→	seiryn has joined #haskell
2021-09-23 21:39:20	→	wysteriary[m] has joined #haskell
2021-09-23 21:39:23	→	Christoph[m] has joined #haskell
2021-09-23 21:39:42	→	stoicswe[m] has joined #haskell
2021-09-23 21:39:54	→	sam[m]1 has joined #haskell
2021-09-23 21:40:06	→	Topik[m] has joined #haskell
2021-09-23 21:40:06	→	alexfmpe[m] has joined #haskell
2021-09-23 21:40:06	→	yin[m] has joined #haskell
2021-09-23 21:40:06	→	asdofindia-m has joined #haskell
2021-09-23 21:40:06	→	OndejSkup[m] has joined #haskell
2021-09-23 21:40:07	→	kar1 has joined #haskell
2021-09-23 21:40:07	→	ongy[m] has joined #haskell
2021-09-23 21:40:07	→	ormaaj has joined #haskell
2021-09-23 21:40:07	→	hjulle[m] has joined #haskell
2021-09-23 21:40:21	→	infinisil has joined #haskell
2021-09-23 21:40:21	→	Drew[m] has joined #haskell
2021-09-23 21:40:21	→	jneira[m] has joined #haskell
2021-09-23 21:40:21	→	Magnus[m] has joined #haskell
2021-09-23 21:40:21	→	siraben has joined #haskell
2021-09-23 21:40:21	→	SawyerBergeron[m has joined #haskell
2021-09-23 21:40:34	→	sky_lounge[m] has joined #haskell
2021-09-23 21:40:35	→	smichel17[m] has joined #haskell
2021-09-23 21:40:35	→	Tisoxin has joined #haskell
2021-09-23 21:40:44	←	hendursaga has quit (Ping timeout: 276 seconds)
2021-09-23 21:40:52	→	monadfritz[m] has joined #haskell
2021-09-23 21:40:52	→	bakinonion[m] has joined #haskell
2021-09-23 21:41:04	→	rosariopulella[m has joined #haskell
2021-09-23 21:41:06	→	masaeedu[m] has joined #haskell
2021-09-23 21:41:06	→	fcortesi has joined #haskell
2021-09-23 21:41:28	→	hiepph[m] has joined #haskell
2021-09-23 21:41:28	→	ManofLetters[m] has joined #haskell
2021-09-23 21:41:28	→	cloudy has joined #haskell
2021-09-23 21:41:51	→	commuswift[m] has joined #haskell
2021-09-23 21:41:53	←	kuribas has quit (Remote host closed the connection)
2021-09-23 21:41:55	→	carmysilna has joined #haskell
2021-09-23 21:41:55	→	fendor[m] has joined #haskell
2021-09-23 21:41:55	→	aidy has joined #haskell
2021-09-23 21:42:15	→	hendursaga has joined #haskell
2021-09-23 21:47:18	ℹ	bgamari_ is now known as bgamari
2021-09-23 21:48:07	←	notzmv has quit (Ping timeout: 246 seconds)
2021-09-23 21:48:53	←	yauhsien has quit (Remote host closed the connection)
2021-09-23 21:49:29	→	yauhsien has joined #haskell
2021-09-23 21:50:00	→	python47` has joined #haskell
2021-09-23 21:51:40	←	python476 has quit (Ping timeout: 264 seconds)
2021-09-23 21:51:46	←	terrorjack has quit (Read error: Connection reset by peer)
2021-09-23 21:53:00	→	wroathe has joined #haskell
2021-09-23 21:53:00	←	wroathe has quit (Changing host)
2021-09-23 21:53:00	→	wroathe has joined #haskell
2021-09-23 21:54:04	←	yauhsien has quit (Ping timeout: 264 seconds)
2021-09-23 21:54:42	→	terrorjack has joined #haskell
2021-09-23 21:57:28	←	wroathe has quit (Ping timeout: 252 seconds)
2021-09-23 21:57:35	→	chomwitt has joined #haskell
2021-09-23 22:00:06	→	tzh has joined #haskell
2021-09-23 22:09:27	←	merijn has quit (Ping timeout: 250 seconds)
2021-09-23 22:09:52	←	seiryn has quit (Quit: WeeChat 3.2)
2021-09-23 22:10:06	→	seiryn has joined #haskell
2021-09-23 22:11:30	←	rond_ has quit (Quit: Client closed)
2021-09-23 22:12:01	awpr	sshine: also apparently I managed to get better results on this than I remembered: https://github.com/google/hs-ten/blob/e0cf34abb85a0df37f8bd2f4ba0270264455c58f/ten/src/Data/Ten/Ap.hs#L60
2021-09-23 22:12:18	awpr	wrapping fields in that, you get back the ability to say `deriving Eq` with no fanfare
2021-09-23 22:13:42	←	zaquest has quit (Quit: Leaving)
2021-09-23 22:16:55	←	superstar64 has quit (Quit: Leaving)
2021-09-23 22:17:49	→	mc47 has joined #haskell
2021-09-23 22:19:15	←	bgamari has quit (Ping timeout: 246 seconds)
2021-09-23 22:20:33	→	bgamari has joined #haskell
2021-09-23 22:24:06	→	notzmv has joined #haskell
2021-09-23 22:27:29	→	MQ-17J has joined #haskell
2021-09-23 22:27:58	sshine	awpr, awesome, thanks for replying!
2021-09-23 22:31:08	←	alzgh has quit (Remote host closed the connection)
2021-09-23 22:31:28	→	alzgh has joined #haskell
2021-09-23 22:34:13	←	Cajun has quit (Quit: Client closed)
2021-09-23 22:34:26	→	econo has joined #haskell
2021-09-23 22:36:29	→	yauhsien has joined #haskell
2021-09-23 22:36:58	carbolymer	awpr: you're using haskell at google?
2021-09-23 22:38:45	awpr	I used to work on a primarily-Haskell project.  I'm not anymore, though, the libraries are more of a side project for me atm
2021-09-23 22:40:19	→	pera has joined #haskell
2021-09-23 22:40:44	ℹ	pera is now known as Guest3253
2021-09-23 22:40:55	←	yauhsien has quit (Ping timeout: 252 seconds)
2021-09-23 22:43:28	←	turlando has quit (Ping timeout: 268 seconds)
2021-09-23 22:43:31	→	turlando_ has joined #haskell
2021-09-23 22:43:57	←	turlando_ has quit (Client Quit)
2021-09-23 22:44:15	→	turlando has joined #haskell
2021-09-23 22:45:11	←	seiryn has quit (Quit: WeeChat 3.2)
2021-09-23 22:47:19	→	seiryn has joined #haskell
2021-09-23 22:49:01	→	chris has joined #haskell
2021-09-23 22:49:05	ℹ	chris is now known as Guest2921
2021-09-23 22:49:32	carbolymer	I think I've solved it: https://bpa.st/4ZHQ
2021-09-23 22:52:32	→	\Nova has joined #haskell
2021-09-23 22:53:13	←	python47` has quit (Ping timeout: 250 seconds)
2021-09-23 22:53:18	←	Alex_test has quit (Quit: ;-)
2021-09-23 22:54:19	→	nschoe has joined #haskell
2021-09-23 22:54:28	←	AlexZenon has quit (Quit: ;-)
2021-09-23 22:58:39	→	TDANG has joined #haskell
2021-09-23 22:58:39	←	TDANG_ has quit (Read error: Connection reset by peer)
2021-09-23 22:58:51	→	Alex_test has joined #haskell
2021-09-23 22:58:51	←	TDANG has quit (Read error: Connection reset by peer)
2021-09-23 23:00:10	←	Guest3253 has quit (Ping timeout: 252 seconds)
2021-09-23 23:01:10	→	AlexZenon has joined #haskell
2021-09-23 23:04:41	←	\Nova has quit (Ping timeout: 260 seconds)
2021-09-23 23:05:46	←	alzgh has quit (Remote host closed the connection)
2021-09-23 23:05:58	→	lavaman has joined #haskell
2021-09-23 23:06:06	→	alzgh has joined #haskell
2021-09-23 23:06:24	←	lavaman has quit (Remote host closed the connection)
2021-09-23 23:18:21	←	fresheyeball has quit (Quit: WeeChat 2.9)
2021-09-23 23:20:05	←	k`` has quit (Quit: ERC (IRC client for Emacs 27.1))
2021-09-23 23:21:36	→	wroathe has joined #haskell
2021-09-23 23:21:36	←	wroathe has quit (Changing host)
2021-09-23 23:21:36	→	wroathe has joined #haskell
2021-09-23 23:22:10	→	lavaman has joined #haskell
2021-09-23 23:22:35	→	dyeplexer has joined #haskell
2021-09-23 23:24:14	←	gehmehgeh has quit (Quit: Leaving)
2021-09-23 23:24:45	←	pbrisbin has quit (Ping timeout: 260 seconds)
2021-09-23 23:25:48	→	pbrisbin has joined #haskell
2021-09-23 23:27:29	→	_ht has joined #haskell
2021-09-23 23:28:51	→	zaquest has joined #haskell
2021-09-23 23:32:29	←	lavaman has quit (Remote host closed the connection)
2021-09-23 23:43:40	→	lavaman has joined #haskell
2021-09-23 23:53:02	maerwald	So I'm planning to switch to another operating system/distro, because fedora is awful. Anything particularly haskell friendly? (e.g. runtime switchable gcc, ncurses compat symlinks, etc.)
2021-09-23 23:53:08	←	max22- has quit (Ping timeout: 268 seconds)
2021-09-23 23:53:49	←	lavaman has quit (Remote host closed the connection)
2021-09-23 23:53:58	→	yauhsien has joined #haskell
2021-09-23 23:54:04	←	dyeplexer has quit (Ping timeout: 252 seconds)
2021-09-23 23:55:33	carbolymer	maerwald: you want to install haskell deps on an os level?
2021-09-23 23:55:41	maerwald	no
2021-09-23 23:55:43	←	madjestic has quit (Ping timeout: 252 seconds)
2021-09-23 23:56:01	dsal	I've been enjoying nixos, but it's divisive.  :)
2021-09-23 23:56:16	maerwald	100% no
2021-09-23 23:56:38	monochrom	From "runtime switchable gcc" I think of nix or docker.
2021-09-23 23:56:53	maerwald	I know at least 2 distros that can do it, but they are source distros
2021-09-23 23:57:03	monochrom	I am speaking this in the sense of narrowing down to {nix, docker}
2021-09-23 23:57:09	carbolymer	maerwald: I'm using Arch and it's great so far, but a few caveats: I manage haskell packages through stack & cabal; it's better to install stack and cabal from packages statically linked (binaries)
2021-09-23 23:57:40	monochrom	I understand that other constraints will shrink that set further.  Possibly to {} and we throw the towel.
2021-09-23 23:58:31	monochrom	But let's look at the bright side!
2021-09-23 23:59:16	monochrom	From "fedora is awful" I think of a very large set, {ubuntu, gentoo, ... a lot of things are less bad than fedora} :)
2021-09-24 00:00:16	c_wraith	I get a lot of mileage from separating haskell from the OS entirely.
2021-09-24 00:00:23	c_wraith	pick an OS you like, then use ghcup
2021-09-24 00:00:31	←	yauhsien has quit (Ping timeout: 265 seconds)
2021-09-24 00:00:40	monochrom	I use ubuntu, and if I use ghcup instead of ubuntu's ghc packages, it's haskell friendly. I haven't needed to switch gcc at all though.
2021-09-24 00:00:57	maerwald	c2hs breakages sometimes require older gcc's
2021-09-24 00:00:58	monochrom	But we're answering the author of ghcup so there is a bit of irony here. :)
2021-09-24 00:01:02	maerwald	at least that happened on fedora
2021-09-24 00:01:33	maerwald	one morning, I couldn't build any of c2hs packages
2021-09-24 00:01:38	monochrom	Right?  "Hey maerwald! Have you tried ghcup?" hahaha
2021-09-24 00:01:59	maerwald	occasionally
2021-09-24 00:02:07	geekosaur	ubuntu often lets you select versions of things. no idea if that applies to gcc but gcc9 hasn't landed yet
2021-09-24 00:02:23	maerwald	I'm honestly leaning towards windows
2021-09-24 00:02:36	carbolymer	wat
2021-09-24 00:02:44	monochrom	Ah yeah you can co-install multiple versions of gcc on ubuntu, then say "gcc-x.y"
2021-09-24 00:02:50	maerwald	1. has great virtualization, 2. has WSL2, 3. suspend to ram and power/therml throttling actually works
2021-09-24 00:02:59	maerwald	but then... all of the rest is awful
2021-09-24 00:03:05	c_wraith	oh.  yes, I only use linux in wsl2
2021-09-24 00:03:13	→	Guest66 has joined #haskell
2021-09-24 00:03:18	c_wraith	mostly debian.
2021-09-24 00:03:22	geekosaur	hm, looks like we have 7-10 inm various places. then update-alternatives to switch
2021-09-24 00:03:31	monochrom	docker is analogous to wsl in this sense.
2021-09-24 00:04:05	→	elias_ has joined #haskell
2021-09-24 00:04:34	monochrom	Ironically my laptop is such that linux is better than windows in terms of hardware features working.
2021-09-24 00:04:37	yushyin	I have an anecdote, fedora is the distro that had once deleted some files in the user's home directory during texlive upgrade ... so i don't have the greatest faith in this distro.
2021-09-24 00:04:46	monochrom	windows is hotter than linux, firstly
2021-09-24 00:05:17	maerwald	suspend to ram is broken on my fedora box since a month
2021-09-24 00:05:43	monochrom	secondly, on windows it hangs upon screen sleep, on linux it used to but now fixed.
2021-09-24 00:05:49	→	merijn has joined #haskell
2021-09-24 00:05:58	Guest66	huh, my experience with fedora has been very positive. I found it be most polished. the devs are very attentive to details
2021-09-24 00:06:31	monochrom	I wouldn't be surprised if ubuntu works better than fedora for these hardware and sleep issues, but I haven't tried.
2021-09-24 00:06:37	awpr	tbf GHC is the compiler that had once deleted source files when there was a type error, so...
2021-09-24 00:06:43	geekosaur	suspend works fine here
2021-09-24 00:06:50	Guest66	though my thinkpad X1C has a weird issue on linux where the fans spin uncontrollably right after waking from suspend
2021-09-24 00:06:56	carbolymer	What are you saying people. I'm using windows at work and it's a world of pain, everything breaks. I need to reboot to make my peripherals work 1 in 5 times. 
2021-09-24 00:07:05	maerwald	Guest66: I have many such problems with my X1 Extreme
2021-09-24 00:07:07	maerwald	it's impossible
2021-09-24 00:07:12	Guest66	ironically hibernate works fine (and it's my only problem)
2021-09-24 00:07:16	geekosaur	I haven't tested hibernate, which is disabled by default since it works on relatively few machines, but it worked on my old laptop
2021-09-24 00:07:22	Guest66	maerwald: it's the 4th gen
2021-09-24 00:07:50	Guest66	why can't lenovo issue a BIOS update and solve my issues
2021-09-24 00:07:57	maerwald	so maybe windows is the only solution...
2021-09-24 00:08:21	Guest66	heresy! I have a windows partiton and I hate it 
2021-09-24 00:08:24	maerwald	ghc works fine on WSL2 afaih
2021-09-24 00:08:55	monochrom	WSL2 still doesn't solve the problem of "but which linux?"
2021-09-24 00:08:57	maerwald	in windows itself it works as far as antivirus scanner, windows defender and file locking allow
2021-09-24 00:09:08	maerwald	so half of the time
2021-09-24 00:09:09	Guest66	each time I boot into it I have to wait through 5mins of it burning my cpu running all kinds of weird things in the bg
2021-09-24 00:09:30	Guest66	"Antimalware Service Executable"
2021-09-24 00:09:31	→	arpl has joined #haskell
2021-09-24 00:09:33	Guest66	"System"
2021-09-24 00:09:34	monochrom	I bet that gcc on windows will give you more questions, not answers.
2021-09-24 00:09:47	maerwald	msys2 is a cluster...
2021-09-24 00:10:06	yushyin	My windows workstation wakes up from suspend at random times and goes back into suspend mode after a while, a bit annoying i must say.
2021-09-24 00:10:11	Guest66	I heard Peter Haskell say that they once has a bug on ghc for windows that made your src files get deleted
2021-09-24 00:10:49	→	landonf has joined #haskell
2021-09-24 00:11:19	Guest66	It's Simon Peyton Jones ... for some reason I thought it was Peter (it was a talk)
2021-09-24 00:11:57	←	Lycurgus has quit (Quit: Exeunt)
2021-09-24 00:12:55	geekosaur	yeh, it's not hard to find that bug in the gitlab issue tracker
2021-09-24 00:14:26	maerwald	OpenSUSE?
2021-09-24 00:15:00	monochrom	Are they still around?
2021-09-24 00:15:10	→	lavaman has joined #haskell
2021-09-24 00:15:35	Guest66	uhhh, yes they're a non-negligeable player in the commercial linux market
2021-09-24 00:15:38	monochrom	Distant memory of OpenSuSE, Caldera, OS/2
2021-09-24 00:15:51	monochrom	I still have a Caldera rubber penguin.
2021-09-24 00:16:55	Guest66	I think arch is good if you prefer the devs not mess with upstream too much
2021-09-24 00:17:35	maerwald	Guest66: the reason I wanna leave fedora is because maintainers push whatever upstream claims is stable
2021-09-24 00:17:42	maerwald	arch does the same, constantly breaking your system
2021-09-24 00:18:13	→	pretty_dumm_guy has joined #haskell
2021-09-24 00:18:31	monochrom	I think ubuntu is better in that regard. They actually have hired devs to vet things.
2021-09-24 00:18:55	Guest66	I think that's not very fair. What does breaking your system mean? if you have dev environemnts then yes I would agree (just use docker)
2021-09-24 00:19:11	geekosaur	https://gitlab.haskell.org/ghc/ghc/-/issues/163
2021-09-24 00:19:12	maerwald	Guest66: your desktop environment, kernel, suspend to ram etc etc
2021-09-24 00:19:18	yushyin	Guest66: this channel has a general dislike for arch, don't bother mentioning it here
2021-09-24 00:19:18	monochrom	At least unless you talk about the multiverse, but that one is vetted by the debian conservative people.
2021-09-24 00:19:25	maerwald	Guest66: I've used arch for 3 years or so, every update broke something
2021-09-24 00:19:35	Guest66	yushyin: hah, too late
2021-09-24 00:19:56	awpr	I use arch whenever I have a choice, and don't plan to change that, but I totally agree that stuff constantly breaks
2021-09-24 00:20:03	geekosaur	arch really messed up its ghc/haskell packaging
2021-09-24 00:20:13	carbolymer	geekosaur: yes
2021-09-24 00:20:17	Guest66	maerwald: I'm very curious about that, any examples of what broke?
2021-09-24 00:20:17	geekosaur	arch itself is okay but use ghcup
2021-09-24 00:20:26	carbolymer	geekosaur: yes
2021-09-24 00:20:32	maerwald	Guest66: your deskopt environment
2021-09-24 00:20:40	carbolymer	geekosaur: or static binaries of stack and cabal
2021-09-24 00:20:48	←	alzgh has quit (Remote host closed the connection)
2021-09-24 00:20:53	maerwald	you don't expect me to have logs from those 200 incidents 10 years ago? :)
2021-09-24 00:21:08	→	alzgh has joined #haskell
2021-09-24 00:21:16	maerwald	my KDE was constantly broken is all I know
2021-09-24 00:21:36	Guest66	no no I don't mean in that way, it's just that my experience (from 2020 years) was different
2021-09-24 00:22:11	geekosaur	10 years ago? I think they instituted rawhide to iron those kinds of issues out
2021-09-24 00:22:23	Guest66	oh yes KDE, they updated their _official_ themes and highlighted a bug as old as time: kwin can't handle rounded borders
2021-09-24 00:22:35	Guest66	it annoys me immeasurably
2021-09-24 00:22:43	←	arpl has left #haskell
2021-09-24 00:22:47	maerwald	changing processes and attitude takes 10 years (minimum)
2021-09-24 00:23:01	Guest66	but not enough to use GNOME, and def no where near going back to bspwm/xmonad
2021-09-24 00:23:03	maerwald	I'm pretty confident I don't want arch
2021-09-24 00:23:13	maerwald	it's sad that alpine linux abandoned desktop
2021-09-24 00:23:22	maerwald	too few musl based distros for desktop
2021-09-24 00:23:29	maerwald	building static haskell exes on the fly is nice
2021-09-24 00:23:36	Guest66	what about Nix?
2021-09-24 00:23:45	maerwald	Guest66: it's awful?
2021-09-24 00:23:58	Guest66	I used it for a couple months, ran away from the FHS incompatibility
2021-09-24 00:24:21	maerwald	Programmers not caring about complexity is when you should leave, yes
2021-09-24 00:24:51	Guest66	"hey here is this tar.gz, just run make on it" is hell when you're on Nix. If it's not in nixpkgs, your will suffer
2021-09-24 00:24:57	→	arpl has joined #haskell
2021-09-24 00:25:21	→	kimjetwav has joined #haskell
2021-09-24 00:25:31	Guest66	and my system was noticeably slower with all the symlinks
2021-09-24 00:26:09	←	shailangsa has quit (Remote host closed the connection)
2021-09-24 00:26:54	maerwald	everything is a file -> everything is a symlink
2021-09-24 00:27:14	←	eggplantade has quit (Remote host closed the connection)
2021-09-24 00:27:31	awpr	I want to see an "everything is a CAF" OS
2021-09-24 00:28:00	Clint	wht's a caf
2021-09-24 00:28:13	carbolymer	calf without leg
2021-09-24 00:28:37	awpr	Constant Applicative Form, a top-level Haskell binding that just applies something to some arguments
2021-09-24 00:29:29	Guest66	awpr: well how would you implement "files" that way?
2021-09-24 00:29:46	monochrom	Perhaps don't do files at all.
2021-09-24 00:29:58	awpr	unsafePerformIO :)
2021-09-24 00:30:01	monochrom	Have a different data model.
2021-09-24 00:30:38	monochrom	PalmOS did not have files for example.  It had a relational database.  The way I heard it.
2021-09-24 00:30:49	geekosaur	pick
2021-09-24 00:31:20	geekosaur	https://en.wikipedia.org/wiki/Pick_operating_system
2021-09-24 00:32:02	monochrom	Caldera and OS/2 and PalmOS.  Anyone wanna try out NeXT or CP/M?  Apple Integer BASIC?
2021-09-24 00:33:04	←	nitrix has quit (Quit: Genius is one percent inspiration and ninety-nine percent perspiration)
2021-09-24 00:33:21	Guest66	I still can't believe CP/M was lost QDOS
2021-09-24 00:33:27	Guest66	lost to*
2021-09-24 00:33:47	→	dschrempf has joined #haskell
2021-09-24 00:33:53	→	max22- has joined #haskell
2021-09-24 00:34:45	←	arpl has left #haskell
2021-09-24 00:35:22	monochrom	A lot of CP/M spirits still live today.  CRLF.  8-character filename plus 3-letter extension.
2021-09-24 00:37:51	geekosaur	com files (memeory images starting at $0100) held on for a remarkably long time
2021-09-24 00:38:09	monochrom	Yeah.
2021-09-24 00:40:09	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-24 00:40:49	←	ubert has quit (Ping timeout: 260 seconds)
2021-09-24 00:40:53	→	rond_ has joined #haskell
2021-09-24 00:40:59	monochrom	Interesting, the name "BIOS" may have come from CP/M too.
2021-09-24 00:41:27	geekosaur	probably
2021-09-24 00:41:50	←	nschoe has quit (Ping timeout: 252 seconds)
2021-09-24 00:43:09	←	kimjetwav has quit (Ping timeout: 260 seconds)
2021-09-24 00:43:27	→	python47` has joined #haskell
2021-09-24 00:44:39	Guest66	I really don't understand the author's two arguments for writing the Parser type synonym here: https://markkarpov.com/tutorial/megaparsec.html#parsect-and-parsec-monads
2021-09-24 00:45:39	Guest66	when they say "if your code stays polymorphic" do they mean I would write "Parsec Void Text Int" every time?
2021-09-24 00:46:49	Guest66	because to me it's just a matter of not repeating the some composition (for "code beauty" ...)
2021-09-24 00:46:57	geekosaur	no, when you reach that level Parser is just a shorthand. but lots of parser code doesn't refer to most of that so you'd just write an (unused) type variable, and then the excessive polymorphism bites
2021-09-24 00:47:13	monochrom	"GHC cannot do much in terms of optimization if your parsers stay polymorphic"
2021-09-24 00:47:48	monochrom	Type inference gives very polymorphic types.
2021-09-24 00:48:19	Guest66	I'm sorry what's an unused type variable. Could your give me an example where the code stays polymorphic because that's what I'm missing
2021-09-24 00:48:21	geekosaur	that too, if you just lket ghc infer the types it'll iinsert unused type vars
2021-09-24 00:48:52	monochrom	However, I come from another angle.
2021-09-24 00:49:35	monochrom	Most people who talk about code optimizations talk about of personal fantasy.
2021-09-24 00:49:51	monochrom	s/talk about of/talk out of/
2021-09-24 00:50:05	←	teddyc has quit (Ping timeout: 252 seconds)
2021-09-24 00:51:02	monochrom	Both kinds of fantasies: how code optimizations work, how much you actually need.
2021-09-24 00:51:59	←	notzmv has quit (Remote host closed the connection)
2021-09-24 00:52:06	→	vicfred has joined #haskell
2021-09-24 00:52:17	mrianbloom	Is anyone successfully using a Haskell binding to Tensorflow?
2021-09-24 00:52:35	←	dschrempf has quit (Quit: WeeChat 3.2.1)
2021-09-24 00:52:52	mrianbloom	Python is just causing so many problems, I've been hoping to phase it out.
2021-09-24 00:52:58	→	dschrempf has joined #haskell
2021-09-24 00:53:24	→	nschoe has joined #haskell
2021-09-24 00:53:38	jpds	Seems to be an official thing: https://github.com/tensorflow/haskell
2021-09-24 00:55:10	←	alzgh has quit (Remote host closed the connection)
2021-09-24 00:55:16	←	mikoto-chan has quit (Quit: mikoto-chan)
2021-09-24 00:55:30	→	alzgh has joined #haskell
2021-09-24 00:55:30	→	mikoto-chan has joined #haskell
2021-09-24 00:56:15	monochrom	I look at this whole thing from the points of view of getting things done, teaching, learning.
2021-09-24 00:57:00	←	python47` has quit (Remote host closed the connection)
2021-09-24 00:57:04	←	xff0x has quit (Ping timeout: 264 seconds)
2021-09-24 00:57:11	monochrom	If you're getting things done, the actual problem you're solving already determines how much/little polymorphism you should have.  You shouldn't even have a choice there.
2021-09-24 00:57:47	→	xff0x has joined #haskell
2021-09-24 00:58:04	monochrom	And then, in case you need much polymorphism, how to make it fast is a different issue, there are techniques.
2021-09-24 00:59:02	monochrom	And in case you need much monomorphism, and if it means you have to handwrite very long types with like 10 type parameters, how to manage it is also a different issue.
2021-09-24 01:00:57	monochrom	Type aliases shorten your type sigs but makes you remember more names.  You are trading reading "speed" vs brain memory recall.  The sweet spot depends on your actual code.
2021-09-24 01:01:10	monochrom	s/remember/memorize/
2021-09-24 01:01:48	→	\Nova has joined #haskell
2021-09-24 01:02:08	monochrom	If you're teaching or learning, Piaget's theory: concrete before abstract, special before general, monomorphic before polymorphic.
2021-09-24 01:02:15	monochrom	It's that simple.
2021-09-24 01:03:03	[exa]	tangible colorful motivation
2021-09-24 01:04:32	←	dschrempf has quit (Quit: WeeChat 3.3)
2021-09-24 01:05:54	→	eggplantade has joined #haskell
2021-09-24 01:06:29	←	nschoe has quit (Ping timeout: 260 seconds)
2021-09-24 01:09:34	c_wraith	you can often add bounded polymorphism to just about anything.
2021-09-24 01:09:44	c_wraith	So...  probably best not to. :)
2021-09-24 01:09:48	c_wraith	:t view
2021-09-24 01:09:49	lambdabot	MonadReader s m => Getting a s a -> m a
2021-09-24 01:09:57	c_wraith	I *still* don't like the type of that
2021-09-24 01:10:02	c_wraith	even though it's clearly useful
2021-09-24 01:11:29	c_wraith	or rather, I don't like that the MonadReader instance most frequently used with it is (->)
2021-09-24 01:11:53	awpr	don't look at `Control.Lens.Indexed` then
2021-09-24 01:12:23	c_wraith	I have on several occasions, because I made the mistake of thinking useful things were in that module
2021-09-24 01:12:37	awpr	that thing is so delicately balanced on the van laarhoven lens types that it just seems like an astonishing bit of luck that it was possible
2021-09-24 01:13:01	[exa]	I'm trying to get `llvm-hs` working in github ubuntu runner and it's telling me that it can't match `forall r1. ContT r1 m a` with `ContT r m a` during installation at some point (AnyCont.hs line 15). Did anyone see/solve that?
2021-09-24 01:13:13	c_wraith	IIRC, that mess was mostly "there are only ever going to be two instances, so we felt fine adding all these other things"
2021-09-24 01:15:05	awpr	[exa]: https://github.com/llvm-hs/llvm-hs/commit/227a33c183a4abc5dfbee50081ee793348e38355 perhaps?
2021-09-24 01:15:46	←	Guest66 has quit (Ping timeout: 256 seconds)
2021-09-24 01:15:55	[exa]	oh lovely that might be it
2021-09-24 01:18:11	←	nehsou^ has quit (Remote host closed the connection)
2021-09-24 01:18:44	←	rond_ has quit (Quit: Client closed)
2021-09-24 01:21:13	→	python476 has joined #haskell
2021-09-24 01:22:20	→	kayprish has joined #haskell
2021-09-24 01:24:18	→	Pickchea has joined #haskell
2021-09-24 01:27:55	ℹ	irc: disconnected from server
2021-09-24 10:30:14	→	oxide has joined #haskell
2021-09-24 10:30:14	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-24 10:30:14	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-24 10:30:14	ℹ	Channel #haskell: 695 nicks (1 op, 0 voices, 694 normals)
2021-09-24 10:30:15	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-24 10:32:04	←	MQ-17J has quit (Ping timeout: 260 seconds)
2021-09-24 10:35:41	→	MQ-17J has joined #haskell
2021-09-24 10:39:03	←	dumbsharka has quit (Ping timeout: 264 seconds)
2021-09-24 10:39:46	→	mikoto-chan has joined #haskell
2021-09-24 10:42:28	←	turlando has quit (Read error: Connection reset by peer)
2021-09-24 10:42:44	→	turlando has joined #haskell
2021-09-24 10:42:44	←	turlando has quit (Changing host)
2021-09-24 10:42:44	→	turlando has joined #haskell
2021-09-24 10:43:51	→	merijn has joined #haskell
2021-09-24 10:44:15	→	Vajb has joined #haskell
2021-09-24 10:46:30	←	slowButPresent has quit (Quit: leaving)
2021-09-24 10:49:55	→	aliosablack has joined #haskell
2021-09-24 10:55:37	←	aliosablack has quit (Quit: Leaving)
2021-09-24 10:55:51	→	aliosablack has joined #haskell
2021-09-24 10:56:45	←	aliosablack has quit (Client Quit)
2021-09-24 10:59:29	→	takuan has joined #haskell
2021-09-24 10:59:49	→	pfurla_ has joined #haskell
2021-09-24 11:02:19	←	pfurla has quit (Ping timeout: 252 seconds)
2021-09-24 11:08:50	←	Null_A has quit (Remote host closed the connection)
2021-09-24 11:14:32	ℹ	pfurla_ is now known as pfurla
2021-09-24 11:18:16	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-24 11:21:00	←	Guest1928 has quit (Remote host closed the connection)
2021-09-24 11:21:37	→	chomwitt has joined #haskell
2021-09-24 11:32:14	→	steven1 has joined #haskell
2021-09-24 11:33:37	←	mikoto-chan has quit (Ping timeout: 265 seconds)
2021-09-24 11:36:05	→	kimjetwav has joined #haskell
2021-09-24 11:36:27	steven1	hi, I saw this paper on using hyperfunctions to perform list fusion on calls to `zip`, has it ever been considered for GHC? It doesn't seem to be in use now and I don't see an issue for it https://arxiv.org/abs/1309.5135
2021-09-24 11:44:47	←	echoreply has quit (Quit: WeeChat 2.8)
2021-09-24 11:45:42	→	echoreply has joined #haskell
2021-09-24 11:48:41	←	lavaman has quit (Remote host closed the connection)
2021-09-24 11:50:16	←	pounce has quit (Quit: bye bye!)
2021-09-24 11:51:49	←	kimjetwav has quit (Remote host closed the connection)
2021-09-24 11:53:28	→	root1 has joined #haskell
2021-09-24 11:54:29	→	kimjetwav has joined #haskell
2021-09-24 11:55:41	→	mikoto-chan has joined #haskell
2021-09-24 12:02:15	→	Null_A has joined #haskell
2021-09-24 12:03:39	←	renzhi has quit (Ping timeout: 264 seconds)
2021-09-24 12:04:03	←	tzh has quit (Quit: zzz)
2021-09-24 12:04:04	→	vysn has joined #haskell
2021-09-24 12:06:09	←	Null_A has quit (Client Quit)
2021-09-24 12:16:26	→	yauhsien has joined #haskell
2021-09-24 12:16:30	→	renzhi has joined #haskell
2021-09-24 12:17:35	←	chomwitt has quit (Ping timeout: 252 seconds)
2021-09-24 12:20:57	←	yauhsien has quit (Ping timeout: 252 seconds)
2021-09-24 12:21:38	→	wonko has joined #haskell
2021-09-24 12:26:43	→	lavaman has joined #haskell
2021-09-24 12:28:49	→	chele has joined #haskell
2021-09-24 12:30:01	←	steven1 has quit (Quit: WeeChat 3.2)
2021-09-24 12:31:17	←	lavaman has quit (Ping timeout: 252 seconds)
2021-09-24 12:35:58	→	max22- has joined #haskell
2021-09-24 12:36:21	→	nschoe has joined #haskell
2021-09-24 12:37:11	→	ubert has joined #haskell
2021-09-24 12:37:31	←	ChaiTRex has quit (Remote host closed the connection)
2021-09-24 12:37:44	[exa]	stevenxl: 
2021-09-24 12:38:01	→	ChaiTRex has joined #haskell
2021-09-24 12:38:11	[exa]	whoops sorry I wanted to hilite steven1 with the hyperfunctions from above and it backfired. :]
2021-09-24 12:38:48	[exa]	re the paper, isn't that functionality present in the streaming libraries now?
2021-09-24 12:39:02	→	chomwitt has joined #haskell
2021-09-24 12:39:30	→	dhouthoo has joined #haskell
2021-09-24 12:42:22	←	phma has quit (Read error: Connection reset by peer)
2021-09-24 12:43:12	→	phma has joined #haskell
2021-09-24 12:43:21	←	Sgeo has quit (Read error: Connection reset by peer)
2021-09-24 12:52:50	→	evertedsphere has joined #haskell
2021-09-24 12:55:10	→	dschrempf has joined #haskell
2021-09-24 12:56:32	→	euandreh_ has joined #haskell
2021-09-24 13:03:48	→	lavaman has joined #haskell
2021-09-24 13:04:19	ℹ	euandreh_ is now known as euandreh
2021-09-24 13:05:08	←	hnOsmium0001 has quit (Quit: Connection closed for inactivity)
2021-09-24 13:09:13	→	everteds1here has joined #haskell
2021-09-24 13:09:13	←	everteds1here has quit (Client Quit)
2021-09-24 13:09:16	←	evertedsphere has quit (Quit: leaving)
2021-09-24 13:09:31	→	evertedsphere has joined #haskell
2021-09-24 13:12:40	→	cfricke has joined #haskell
2021-09-24 13:14:05	←	evertedsphere has quit (Client Quit)
2021-09-24 13:14:20	→	evertedsphere has joined #haskell
2021-09-24 13:14:31	→	fendor has joined #haskell
2021-09-24 13:14:37	→	merijn has joined #haskell
2021-09-24 13:15:27	←	eggplantade has quit (Remote host closed the connection)
2021-09-24 13:18:11	→	lortabac has joined #haskell
2021-09-24 13:19:51	→	madjestic has joined #haskell
2021-09-24 13:23:22	→	brsvh has joined #haskell
2021-09-24 13:28:08	→	acidjnk has joined #haskell
2021-09-24 13:32:17	→	arpl has joined #haskell
2021-09-24 13:35:17	→	hendursa1 has joined #haskell
2021-09-24 13:38:21	→	smarton has joined #haskell
2021-09-24 13:38:40	→	Gurkenglas has joined #haskell
2021-09-24 13:38:49	←	hendursaga has quit (Ping timeout: 276 seconds)
2021-09-24 13:42:48	←	arpl has left #haskell
2021-09-24 13:44:31	→	neo2 has joined #haskell
2021-09-24 13:47:17	←	geekosaur has quit (Remote host closed the connection)
2021-09-24 13:47:41	→	geekosaur has joined #haskell
2021-09-24 13:52:50	→	pera has joined #haskell
2021-09-24 13:53:13	ℹ	pera is now known as Guest1491
2021-09-24 13:55:35	←	neo2 has quit (Remote host closed the connection)
2021-09-24 13:57:27	←	lavaman has quit (Remote host closed the connection)
2021-09-24 14:06:51	ℹ	irc: disconnected from server
2021-09-24 14:07:10	→	oxide has joined #haskell
2021-09-24 14:07:10	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-24 14:07:10	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-24 14:07:10	ℹ	Channel #haskell: 710 nicks (1 op, 0 voices, 709 normals)
2021-09-24 14:07:10	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-24 14:10:19	→	mc47 has joined #haskell
2021-09-24 14:11:45	←	azeem has quit (Read error: Connection reset by peer)
2021-09-24 14:12:17	→	azeem has joined #haskell
2021-09-24 14:13:48	←	azeem has quit (Read error: Connection reset by peer)
2021-09-24 14:14:02	→	azeem has joined #haskell
2021-09-24 14:15:51	→	eggplantade has joined #haskell
2021-09-24 14:18:12	→	yauhsien has joined #haskell
2021-09-24 14:20:16	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-24 14:22:31	←	smarton has quit (Quit: Quit)
2021-09-24 14:22:36	←	yauhsien has quit (Ping timeout: 260 seconds)
2021-09-24 14:29:37	→	lavaman has joined #haskell
2021-09-24 14:30:41	←	neurocyte013 has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-24 14:32:26	→	dschrempf has joined #haskell
2021-09-24 14:32:55	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-24 14:34:16	←	lavaman has quit (Ping timeout: 260 seconds)
2021-09-24 14:37:30	←	Alex_test has quit (Quit: ;-)
2021-09-24 14:37:32	←	azeem has quit (Read error: Connection reset by peer)
2021-09-24 14:37:49	←	AlexZenon has quit (Quit: ;-)
2021-09-24 14:38:51	→	Guest|90 has joined #haskell
2021-09-24 14:40:49	←	Guest|90 has quit (Client Quit)
2021-09-24 14:40:49	←	Guest1491 has quit (Read error: Connection reset by peer)
2021-09-24 14:43:19	→	AlexZenon has joined #haskell
2021-09-24 14:44:57	←	brsvh has quit (Ping timeout: 256 seconds)
2021-09-24 14:45:52	←	phma has quit (Read error: Connection reset by peer)
2021-09-24 14:46:34	→	azeem has joined #haskell
2021-09-24 14:49:41	→	phma has joined #haskell
2021-09-24 14:51:32	←	mixfix41 has quit (Ping timeout: 260 seconds)
2021-09-24 14:52:58	→	notzmv has joined #haskell
2021-09-24 14:57:32	→	tromp has joined #haskell
2021-09-24 15:04:44	←	wonko has quit (Ping timeout: 252 seconds)
2021-09-24 15:07:57	←	ph88 has quit (Ping timeout: 246 seconds)
2021-09-24 15:11:38	→	ulvarrefr has joined #haskell
2021-09-24 15:12:36	→	Alex_test has joined #haskell
2021-09-24 15:13:42	→	arpl has joined #haskell
2021-09-24 15:14:47	←	arpl has quit (Client Quit)
2021-09-24 15:16:00	→	neurocyte0132 has joined #haskell
2021-09-24 15:16:01	←	neurocyte0132 has quit (Changing host)
2021-09-24 15:16:01	→	neurocyte0132 has joined #haskell
2021-09-24 15:16:20	←	xff0x has quit (Ping timeout: 252 seconds)
2021-09-24 15:19:38	←	acidjnk has quit (Ping timeout: 252 seconds)
2021-09-24 15:20:34	←	lortabac has quit (Quit: WeeChat 2.8)
2021-09-24 15:22:33	←	goepsilongo_ has quit (Quit: Textual IRC Client: www.textualapp.com)
2021-09-24 15:26:32	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-24 15:28:21	→	rond_ has joined #haskell
2021-09-24 15:28:32	→	tromp has joined #haskell
2021-09-24 15:37:11	←	azeem has quit (Read error: Connection reset by peer)
2021-09-24 15:37:39	→	alzgh has joined #haskell
2021-09-24 15:37:47	→	xff0x has joined #haskell
2021-09-24 15:37:50	←	jespada has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-09-24 15:38:45	→	azeem has joined #haskell
2021-09-24 15:43:51	←	ulvarrefr has quit (Remote host closed the connection)
2021-09-24 15:44:26	→	Guest57 has joined #haskell
2021-09-24 15:49:57	←	azeem has quit (Ping timeout: 252 seconds)
2021-09-24 15:53:10	←	dschrempf has quit (Ping timeout: 265 seconds)
2021-09-24 15:56:51	→	azeem has joined #haskell
2021-09-24 15:59:08	←	azeem has quit (Read error: Connection reset by peer)
2021-09-24 16:00:10	→	azeem has joined #haskell
2021-09-24 16:00:57	←	Gurkenglas has quit (Ping timeout: 252 seconds)
2021-09-24 16:01:47	←	econo has quit (Quit: Connection closed for inactivity)
2021-09-24 16:03:56	→	pbrisbin has joined #haskell
2021-09-24 16:08:18	→	arpl has joined #haskell
2021-09-24 16:10:01	→	Gurkenglas has joined #haskell
2021-09-24 16:11:03	→	yauhsien has joined #haskell
2021-09-24 16:11:19	←	Gurkenglas has quit (Read error: Connection reset by peer)
2021-09-24 16:11:40	→	Gurkenglas has joined #haskell
2021-09-24 16:15:52	←	yauhsien has quit (Ping timeout: 265 seconds)
2021-09-24 16:16:00	←	ubert has quit (Ping timeout: 260 seconds)
2021-09-24 16:17:53	←	Guest57 has quit (Ping timeout: 256 seconds)
2021-09-24 16:17:55	→	eggplantade has joined #haskell
2021-09-24 16:22:32	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-24 16:23:25	→	lortabac has joined #haskell
2021-09-24 16:23:59	←	xff0x has quit (Ping timeout: 252 seconds)
2021-09-24 16:24:36	←	mikoto-chan has quit (Ping timeout: 252 seconds)
2021-09-24 16:25:03	→	xff0x has joined #haskell
2021-09-24 16:25:52	→	xiongxin has joined #haskell
2021-09-24 16:26:00	→	alx741 has joined #haskell
2021-09-24 16:26:40	←	arpl has left #haskell
2021-09-24 16:29:59	→	dschrempf has joined #haskell
2021-09-24 16:30:52	→	merijn has joined #haskell
2021-09-24 16:31:44	→	mikoto-chan has joined #haskell
2021-09-24 16:32:39	→	__monty__ has joined #haskell
2021-09-24 16:33:17	←	pbrisbin has quit (Ping timeout: 252 seconds)
2021-09-24 16:41:44	←	VoidNoir0 has quit (Quit: Connection closed)
2021-09-24 16:43:29	→	Brumaire has joined #haskell
2021-09-24 16:44:15	→	Guest55 has joined #haskell
2021-09-24 16:44:24	←	azeem has quit (Ping timeout: 252 seconds)
2021-09-24 16:44:52	Guest55	is there a way to return another type from a bool depending on if its true or false?
2021-09-24 16:45:37	hpc	you mean like if p then "string" else 5?
2021-09-24 16:45:42	Guest55	yeah
2021-09-24 16:45:45	hpc	use Either
2021-09-24 16:45:52	hpc	if p then Left "string" else Right 5
2021-09-24 16:45:55	hpc	:t if p then Left "string" else Right 5
2021-09-24 16:45:56	lambdabot	error:
2021-09-24 16:45:56	lambdabot	    • Couldn't match expected type ‘Bool’ with actual type ‘Expr’
2021-09-24 16:45:56	lambdabot	    • In the expression: p
2021-09-24 16:46:02	hpc	:t \p -> if p then Left "string" else Right 5
2021-09-24 16:46:03	Guest55	Bool -> Either String Double
2021-09-24 16:46:03	lambdabot	Num b => Bool -> Either [Char] b
2021-09-24 16:46:13	hpc	yep
2021-09-24 16:46:16	Guest55	but then the datatype thats returned has to be the same length
2021-09-24 16:46:46	hpc	not quite, Either isn't like C unions
2021-09-24 16:46:52	hpc	the two Either types can be anything
2021-09-24 16:47:10	Guest55	i have a "parse" function, i had several, like parseOrder :: String -> Order, parseTrades :: String -> [Trade] ...
2021-09-24 16:47:36	Guest55	then i wrote parse "order" :: String -> String -> Order
2021-09-24 16:47:38	Guest55	and got stuck
2021-09-24 16:48:00	Guest55	i wanted to make a datatype like data Option = Order | Trade | ...
2021-09-24 16:48:12	Guest55	and have the type returned somehow calculated from this
2021-09-24 16:48:22	Guest55	i guess it would have to be in a class?
2021-09-24 16:48:31	Guest55	like an associated type family or something
2021-09-24 16:48:42	hpc	you probably don't want a class here
2021-09-24 16:48:57	hpc	imagine you wanted parseManyOptions sometime in the future
2021-09-24 16:48:59	Guest55	for the associated type?
2021-09-24 16:49:07	hpc	(or just anything that interacts with multiple Options)
2021-09-24 16:49:09	Guest55	oh, i was thinking maybe that the Options was singleton
2021-09-24 16:49:25	hpc	if you do a class, that list is going to have to all be orders, or all be trades
2021-09-24 16:49:36	→	azeem has joined #haskell
2021-09-24 16:49:38	Guest55	i mean, to calculate the type of the output from matching a sum datatype
2021-09-24 16:49:50	hpc	you'd do that with the data constructor
2021-09-24 16:50:04	Guest55	wouldnt the class resolution be able to choose the instance corresponding to the singleton sum option?
2021-09-24 16:50:04	hpc	data Option = OrderOption Order | TradeOption Trade | ...
2021-09-24 16:50:12	hpc	and then when you're using it
2021-09-24 16:50:17	hpc	foo :: Option -> something
2021-09-24 16:50:24	hpc	foo (OrderOption order) = something with order
2021-09-24 16:50:30	hpc	foo (TradeOption trade) = something with trade
2021-09-24 16:51:17	Guest55	you still have "something" not being polymorphic
2021-09-24 16:51:26	hpc	that's just a placeholder
2021-09-24 16:51:28	Guest55	i need the type to be determined by some type level calculation
2021-09-24 16:51:57	Guest55	hpc: i mean, it would throw an error if the different definitions tried to return different types
2021-09-24 16:52:07	Guest55	Either would be ok if it wast extensible
2021-09-24 16:52:24	←	vysn has quit (Ping timeout: 260 seconds)
2021-09-24 16:52:37	Guest55	and you seem to be saying something like creating a container for the results of the same length as the input options
2021-09-24 16:53:08	Guest55	and im asking, how, instead of doing that, do i use type families to calculate the result type?
2021-09-24 16:53:20	←	nschoe has quit (Ping timeout: 260 seconds)
2021-09-24 16:53:22	Guest55	im not sure why you thought using a class wasnt the way to go
2021-09-24 16:53:35	hpc	i didn't mention classes
2021-09-24 16:53:42	Guest55	i need a polymorphic output
2021-09-24 16:53:43	hpc	er, wasn't
2021-09-24 16:53:51	hpc	classes don't do polymorphism all that well
2021-09-24 16:54:01	hpc	at least, not in the way i suspect you want
2021-09-24 16:54:13	alzgh	I have `data myData = firstCons String | secondCons Int` and `az :: [myData]`. I want to filter all the `fistCons` and return the `String`s. I know how to write the `filter` or `foldr` but I'm not sure how to check for the type and extract the `String` out of that type.
2021-09-24 16:54:16	Guest55	well, i mean, if the class was parametric on the singleton options type level label
2021-09-24 16:54:16	hpc	like, (+) is polymorphic in that you can use it on many numeric types
2021-09-24 16:54:35	hpc	but once you're locked into one numeric type you don't get to mix them at all
2021-09-24 16:54:48	alzgh	O, I do a pattern match maybe?
2021-09-24 16:55:09	Guest55	i cant see a Maybe in your code?
2021-09-24 16:55:26	Guest55	:t maybe
2021-09-24 16:55:27	lambdabot	b -> (a -> b) -> Maybe a -> b
2021-09-24 16:55:56	Guest55	oh, you want to delete the other entries
2021-09-24 16:56:10	→	ubert has joined #haskell
2021-09-24 16:56:14	hpc	alzgh: yeah, you'd filter for FirstCons and then use map and pattern match to extract the strings
2021-09-24 16:56:31	hpc	map (\FirstCons s -> s) . filter isFirstCons
2021-09-24 16:56:33	hpc	or something like that
2021-09-24 16:56:34	Guest55	yes your just going to use filter and pattern matching to check if its the right part of the sum datatype, returning True if it is
2021-09-24 16:56:49	Guest55	:t filter isLeft
2021-09-24 16:56:50	lambdabot	[Either a b] -> [Either a b]
2021-09-24 16:57:05	Guest55	:t map fromLeft . filter isLeft
2021-09-24 16:57:07	lambdabot	[Either a b1] -> [Either (Either a b1) b2 -> Either a b1]
2021-09-24 16:57:10	Guest55	!?
2021-09-24 16:57:21	Guest55	nvm
2021-09-24 16:57:39	alzgh	thanks, I guess I have a rough idea. gonna come back if stuck :D
2021-09-24 16:57:49	tomsmeding	:t lefts
2021-09-24 16:57:49	Guest55	list comprehension syntax would be better
2021-09-24 16:57:50	lambdabot	[Either a b] -> [a]
2021-09-24 16:58:28	tomsmeding	:t \l -> [x | Left x <- l]
2021-09-24 16:58:29	lambdabot	[Either a b] -> [a]
2021-09-24 16:58:48	Guest55	:t \xs -> [y <- | a@(Left y) <- xs,isLeft a]
2021-09-24 16:58:49	lambdabot	error:
2021-09-24 16:58:49	lambdabot	    parse error on input ‘<-’
2021-09-24 16:58:49	lambdabot	    Perhaps this statement should be within a 'do' block?
2021-09-24 16:58:57	tomsmeding	why do you want the isLeft?
2021-09-24 16:58:58	Guest55	:t \xs -> [y | a@(Left y) <- xs,isLeft a]
2021-09-24 16:59:00	lambdabot	[Either a b] -> [a]
2021-09-24 16:59:04	Guest55	thats lefts
2021-09-24 16:59:16	tomsmeding	yuo don't need to check, list comprehensions already discard the elements that don't match the pattern
2021-09-24 16:59:25	Guest55	:t \xs -> [y | a@(Left y) <- xs]
2021-09-24 16:59:26	lambdabot	[Either a b] -> [a]
2021-09-24 16:59:28	tomsmeding	yeah
2021-09-24 16:59:29	Guest55	oh, awesome
2021-09-24 16:59:32	tomsmeding	also:
2021-09-24 16:59:34	tomsmeding	:t lefts
2021-09-24 16:59:34	lambdabot	[Either a b] -> [a]
2021-09-24 16:59:35	tomsmeding	;)
2021-09-24 16:59:46	hpc	> [y | (Left y) <- [Left "yes", Right "no"]]
2021-09-24 16:59:46	Guest55	anyway
2021-09-24 16:59:47	lambdabot	 ["yes"]
2021-09-24 17:00:31	Guest55	how do i have the output type of a function be determined by a type level calculation over the type level data stored in a singletons sum type input?
2021-09-24 17:00:50	tomsmeding	what exactly is the type of the input?
2021-09-24 17:00:52	←	azeem has quit (Read error: Connection reset by peer)
2021-09-24 17:01:04	Guest55	for example SBool
2021-09-24 17:01:18	Guest55	but generally i will be having to extend it as i find new things to parse
2021-09-24 17:01:48	→	azeem has joined #haskell
2021-09-24 17:01:55	Guest55	hmm, maybe ther ReadS hack would work, cant remember if that used Overlapping instances in some hackey way
2021-09-24 17:02:13	Guest55	like, thats basically the parsing function we normally use
2021-09-24 17:02:26	tomsmeding	Guest55: a type family?
2021-09-24 17:02:44	Guest55	but then your just writing read instances that resolve based on the type of the output rather than the "choice" input
2021-09-24 17:02:54	tomsmeding	type family RetType b where RetType 'True = MyTrueThing ; RetType 'False = MyFalseThing
2021-09-24 17:03:00	Guest55	tomsmedling: i was thinking maybe an associated type family
2021-09-24 17:03:05	tomsmeding	myfun :: SBool b -> other things -> RetType b
2021-09-24 17:03:13	Guest55	exactly!
2021-09-24 17:03:16	Guest55	thanks
2021-09-24 17:03:26	tomsmeding	this is a normal, closed type family, not an associated one though
2021-09-24 17:03:31	Guest55	i couldnt quite visualise that
2021-09-24 17:03:50	Guest55	ie, the `b' and how that parameter conveys the type level option
2021-09-24 17:03:55	tomsmeding	yeah
2021-09-24 17:04:14	Guest55	now im thinking to just make read instanes!
2021-09-24 17:04:40	tomsmeding	but you were so well on your way to type-level haskell enlightenment!
2021-09-24 17:04:42	Guest55	my singletons machinery is burried somewhere almost irritrivable  
2021-09-24 17:05:00	Guest55	tomsmeding: unfortunately not
2021-09-24 17:05:03	tomsmeding	:p
2021-09-24 17:05:10	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-24 17:05:15	⚡	tomsmeding jokes
2021-09-24 17:05:35	Guest55	the 8-fold path to a waste of lazyness
2021-09-24 17:06:12	hpc	heh, reminds me of http://thecodelesscode.com
2021-09-24 17:06:54	Guest55	"The target hardware, likewise, lies in ruin."
2021-09-24 17:06:55	Guest55	lol
2021-09-24 17:07:15	→	[itchyjunk] has joined #haskell
2021-09-24 17:08:04	Guest55	can anyone talk me through some code i have seen being shared recently?
2021-09-24 17:08:39	Guest55	a user called fog put together a "clock" library, but i cant find it, and i couldnt understand how it worked
2021-09-24 17:09:13	Guest55	i think it was something to do with traversing IO lists or something
2021-09-24 17:09:45	Guest55	basically, i want to filter a persistent ping, to only transmit when it change content
2021-09-24 17:10:02	←	__monty__ has quit (Quit: leaving)
2021-09-24 17:10:13	Guest55	like, if it just broadcast the time of day to the nearest minute, then i would expect only one item in the stream to arrive per minute 
2021-09-24 17:10:44	Guest55	but if the input is like, every second or something, idk how to write this IO filter so it streams through correctly without jamming or something
2021-09-24 17:11:54	tomsmeding	I think if you find the code in question, people will be able to help you better :)
2021-09-24 17:12:10	Guest55	https://github.com/fog-hs/clock-scanner
2021-09-24 17:13:23	Guest55	i guess its basically an IO streaming nearest-neighbour nub that im after
2021-09-24 17:13:41	tomsmeding	if that is what this code is doing, it's doing _vastly_ more complicated stuff than necessary
2021-09-24 17:13:47	Guest55	i think i understood how to write maps and folds using scanners, but not filters
2021-09-24 17:14:06	Guest55	could be a problem to do with traverse being shape preserving?
2021-09-24 17:14:11	tomsmeding	are you sure you want to work with ListT IO, and not just with channels from Control.Concurrent (perhaps STM) ?
2021-09-24 17:14:42	Guest55	the library is self contained readable and succinct and imo quite well designed
2021-09-24 17:14:48	Guest55	i wouldnt consider an alternative
2021-09-24 17:15:09	Guest55	i mean, if you have something cannonical...
2021-09-24 17:15:32	tomsmeding	a streaming library, or just a simple channel? :p
2021-09-24 17:15:59	⚡	tomsmeding doesn't know how to reason about comonads and hylomorphisms
2021-09-24 17:16:09	Guest55	its supposed to be a principled replacement for the ad-hoc construction (based on cursors) used by conduit/pipes appraoch to streaming
2021-09-24 17:16:22	Guest55	or the algebra of streaming functions
2021-09-24 17:16:25	←	max22- has quit (Ping timeout: 240 seconds)
2021-09-24 17:16:35	Guest55	it just uses the compositionality of the scanner state update functions
2021-09-24 17:17:08	Guest55	something like map f . map g = map (f . g)
2021-09-24 17:17:37	Guest55	idk if it handles branches or multiple output functions or anything like that
2021-09-24 17:17:47	Guest55	probably just have to use extensible records...
2021-09-24 17:18:18	Guest55	anyway, idk how to write a filter on the IOList using Scanner
2021-09-24 17:18:50	Guest55	i mean, its supposed to be "above" traverse in the class hierarchy, so maybe the shape preserving thing that would break a filter doesnt apply
2021-09-24 17:19:04	→	Lycurgus has joined #haskell
2021-09-24 17:19:51	Guest55	basically just working with;
2021-09-24 17:19:51	Guest55	scannerM         ::            Monad m  => (s -> a -> m (b,s)) -> s -> t m a -> m (t m b,s)
2021-09-24 17:20:22	Guest55	t m a, is then basically able to be MonadicList IO a
2021-09-24 17:20:52	→	shapr has joined #haskell
2021-09-24 17:20:54	Guest55	i guess i have to use the `s' portion of the output
2021-09-24 17:21:10	→	ph88 has joined #haskell
2021-09-24 17:21:13	Guest55	if the `t m b' is going to be the same shape
2021-09-24 17:21:23	Guest55	i think thats like the mapped part of the traverse
2021-09-24 17:21:41	Guest55	and the `s' is the carry, which i guess is where you accumulate the filtered list
2021-09-24 17:21:43	→	ubert1 has joined #haskell
2021-09-24 17:21:58	Guest55	sorry this is really compllicated, i have to take a break
2021-09-24 17:22:16	←	ubert has quit (Ping timeout: 260 seconds)
2021-09-24 17:22:17	ℹ	ubert1 is now known as ubert
2021-09-24 17:24:51	Guest55	i think a biparametric (eg monadic list) container that implements scannerM as above
2021-09-24 17:24:59	→	__monty__ has joined #haskell
2021-09-24 17:25:04	Guest55	wait, idk. sorry
2021-09-24 17:25:26	Guest55	er, i mean, thats basically the least sufficient interface right?
2021-09-24 17:25:31	Guest55	its one line...
2021-09-24 17:25:38	←	dschrempf has quit (Quit: WeeChat 3.3)
2021-09-24 17:26:26	Guest55	maybe filter needs its own class?
2021-09-24 17:26:35	Guest55	since it has to be able to reconstruct it?
2021-09-24 17:27:18	Guest55	and then it could just have the defaults in terms of get and set as this library seems to present
2021-09-24 17:27:24	←	Gurkenglas has quit (Ping timeout: 265 seconds)
2021-09-24 17:27:47	Guest55	but, with the possibility of not just being impllemented that way
2021-09-24 17:27:59	Guest55	like, anything that can implement a monadic filtering function
2021-09-24 17:28:05	Guest55	any container*
2021-09-24 17:28:17	Guest55	not sure what the type would be, going for a cig
2021-09-24 17:34:20	←	xiongxin has quit (Ping timeout: 252 seconds)
2021-09-24 17:35:00	Guest55	hmm, i guess the best i could hope for is a default implementation via get and set
2021-09-24 17:35:03	→	xiongxin has joined #haskell
2021-09-24 17:35:10	Guest55	since the type of filter itslef is uniformative
2021-09-24 17:35:18	Guest55	ie it wouldnt make a good class function
2021-09-24 17:35:35	Guest55	ok, im off, ciao
2021-09-24 17:36:30	←	Guest55 has quit (Quit: Client closed)
2021-09-24 17:50:41	→	wonko has joined #haskell
2021-09-24 17:55:52	←	euandreh has quit (Ping timeout: 260 seconds)
2021-09-24 17:57:09	→	machinedgod has joined #haskell
2021-09-24 17:57:10	←	Ranhir has quit (Read error: Connection reset by peer)
2021-09-24 17:59:04	→	euandreh has joined #haskell
2021-09-24 18:00:07	←	azimut has quit (Ping timeout: 276 seconds)
2021-09-24 18:02:26	→	acidjnk has joined #haskell
2021-09-24 18:05:12	←	azeem has quit (Ping timeout: 260 seconds)
2021-09-24 18:05:17	→	gehmehgeh has joined #haskell
2021-09-24 18:09:04	→	Ranhir has joined #haskell
2021-09-24 18:12:39	→	yauhsien has joined #haskell
2021-09-24 18:12:51	→	Guest|51 has joined #haskell
2021-09-24 18:13:04	←	Guest|51 has quit (Client Quit)
2021-09-24 18:14:17	←	mikoto-chan has quit (Ping timeout: 265 seconds)
2021-09-24 18:15:12	→	azeem has joined #haskell
2021-09-24 18:16:24	←	azeem has quit (Read error: Connection reset by peer)
2021-09-24 18:17:14	←	yauhsien has quit (Ping timeout: 252 seconds)
2021-09-24 18:17:41	→	fendor_ has joined #haskell
2021-09-24 18:18:02	→	azeem has joined #haskell
2021-09-24 18:19:31	→	eggplantade has joined #haskell
2021-09-24 18:20:34	←	fendor has quit (Ping timeout: 265 seconds)
2021-09-24 18:22:59	→	jespada has joined #haskell
2021-09-24 18:23:52	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-24 18:28:02	→	mikoto-chan has joined #haskell
2021-09-24 18:29:33	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-24 18:30:10	←	ddb has quit (Remote host closed the connection)
2021-09-24 18:30:32	→	ddb has joined #haskell
2021-09-24 18:32:08	→	pbrisbin has joined #haskell
2021-09-24 18:36:35	→	geranim0 has joined #haskell
2021-09-24 18:36:36	←	cfricke has quit (Ping timeout: 252 seconds)
2021-09-24 18:37:22	→	MQ-17J has joined #haskell
2021-09-24 18:41:03	→	raehik has joined #haskell
2021-09-24 18:44:15	←	bitdex has quit (Quit: = "")
2021-09-24 18:45:28	←	xiongxin has quit (Read error: Connection reset by peer)
2021-09-24 18:46:43	→	xiongxin has joined #haskell
2021-09-24 18:52:44	→	dumbsharka has joined #haskell
2021-09-24 19:01:45	→	merijn has joined #haskell
2021-09-24 19:06:39	ℹ	hololeap_ is now known as hololeap
2021-09-24 19:06:39	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-24 19:07:37	→	MQ-17J has joined #haskell
2021-09-24 19:07:50	←	azeem has quit (Ping timeout: 252 seconds)
2021-09-24 19:09:23	←	geranim0 has quit (Ping timeout: 265 seconds)
2021-09-24 19:11:05	→	azeem has joined #haskell
2021-09-24 19:11:25	→	Sgeo has joined #haskell
2021-09-24 19:12:04	→	wroathe has joined #haskell
2021-09-24 19:12:04	←	wroathe has quit (Changing host)
2021-09-24 19:12:04	→	wroathe has joined #haskell
2021-09-24 19:15:19	→	neurocyte01328 has joined #haskell
2021-09-24 19:15:19	←	neurocyte01328 has quit (Changing host)
2021-09-24 19:15:19	→	neurocyte01328 has joined #haskell
2021-09-24 19:17:51	←	neurocyte0132 has quit (Ping timeout: 252 seconds)
2021-09-24 19:17:51	ℹ	neurocyte01328 is now known as neurocyte0132
2021-09-24 19:18:07	→	doyougnu has joined #haskell
2021-09-24 19:23:29	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-24 19:27:57	←	terrorjack has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-24 19:33:39	→	Pickchea has joined #haskell
2021-09-24 19:35:24	→	ubert1 has joined #haskell
2021-09-24 19:36:03	→	max22- has joined #haskell
2021-09-24 19:36:27	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-24 19:36:59	←	ubert has quit (Ping timeout: 252 seconds)
2021-09-24 19:36:59	ℹ	ubert1 is now known as ubert
2021-09-24 19:39:51	←	xiongxin has quit (Ping timeout: 265 seconds)
2021-09-24 19:39:54	→	xiongxin_ has joined #haskell
2021-09-24 19:41:22	→	hammock has joined #haskell
2021-09-24 19:41:30	←	Brumaire has quit (Ping timeout: 252 seconds)
2021-09-24 19:41:48	←	xff0x has quit (Ping timeout: 260 seconds)
2021-09-24 19:42:32	→	waleee has joined #haskell
2021-09-24 19:44:36	→	vysn has joined #haskell
2021-09-24 19:44:41	←	chexum has quit (Remote host closed the connection)
2021-09-24 19:44:52	→	chexum has joined #haskell
2021-09-24 19:45:34	→	slowButPresent has joined #haskell
2021-09-24 19:48:17	→	tromp has joined #haskell
2021-09-24 19:50:53	→	xff0x has joined #haskell
2021-09-24 19:51:09	→	ubert1 has joined #haskell
2021-09-24 19:53:00	←	ubert has quit (Ping timeout: 260 seconds)
2021-09-24 19:53:01	ℹ	ubert1 is now known as ubert
2021-09-24 19:57:16	←	hololeap has quit (Remote host closed the connection)
2021-09-24 19:57:56	←	acidjnk has quit (Ping timeout: 252 seconds)
2021-09-24 19:58:21	→	terrorjack has joined #haskell
2021-09-24 19:58:37	→	hololeap has joined #haskell
2021-09-24 20:04:50	←	terrorjack has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-24 20:05:27	←	hpc has quit (Ping timeout: 264 seconds)
2021-09-24 20:05:39	←	xsperry has quit
2021-09-24 20:08:35	→	zebrag has joined #haskell
2021-09-24 20:09:01	←	azeem has quit (Read error: Connection reset by peer)
2021-09-24 20:09:10	→	azeem has joined #haskell
2021-09-24 20:09:14	←	ystael has quit (Read error: Connection reset by peer)
2021-09-24 20:10:04	→	Guest58 has joined #haskell
2021-09-24 20:11:48	←	hendursa1 has quit (Quit: hendursa1)
2021-09-24 20:12:13	→	hendursaga has joined #haskell
2021-09-24 20:12:53	→	bgamari_ has joined #haskell
2021-09-24 20:13:11	→	ystael has joined #haskell
2021-09-24 20:13:20	←	bgamari has quit (Ping timeout: 252 seconds)
2021-09-24 20:13:20	→	eggplantade has joined #haskell
2021-09-24 20:13:32	←	kimjetwav has quit (Ping timeout: 260 seconds)
2021-09-24 20:13:56	→	yauhsien has joined #haskell
2021-09-24 20:14:45	←	Guest58 has quit (Ping timeout: 256 seconds)
2021-09-24 20:14:59	→	kimjetwav has joined #haskell
2021-09-24 20:15:29	←	azeem has quit (Ping timeout: 252 seconds)
2021-09-24 20:16:27	→	hnOsmium0001 has joined #haskell
2021-09-24 20:18:42	→	terrorjack has joined #haskell
2021-09-24 20:18:54	←	yauhsien has quit (Ping timeout: 252 seconds)
2021-09-24 20:22:40	←	pavonia has quit (Quit: Bye!)
2021-09-24 20:23:12	←	lortabac has quit (Quit: WeeChat 2.8)
2021-09-24 20:26:21	→	azeem has joined #haskell
2021-09-24 20:28:27	→	bitdex has joined #haskell
2021-09-24 20:29:59	←	juhp has quit (Quit: juhp)
2021-09-24 20:30:15	→	juhp has joined #haskell
2021-09-24 20:32:20	←	terrorjack has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-24 20:32:41	→	azimut has joined #haskell
2021-09-24 20:33:41	←	bw has quit (Ping timeout: 252 seconds)
2021-09-24 20:33:41	←	cln has quit (Ping timeout: 252 seconds)
2021-09-24 20:33:45	←	scav has quit (Ping timeout: 250 seconds)
2021-09-24 20:33:45	←	kaychaks__ has quit (Ping timeout: 250 seconds)
2021-09-24 20:33:45	←	edmundnoble has quit (Ping timeout: 250 seconds)
2021-09-24 20:33:45	←	PotatoGim has quit (Ping timeout: 245 seconds)
2021-09-24 20:33:52	←	Firedancer has quit (Ping timeout: 268 seconds)
2021-09-24 20:33:52	←	amir has quit (Ping timeout: 268 seconds)
2021-09-24 20:33:52	←	SrPx has quit (Ping timeout: 268 seconds)
2021-09-24 20:33:54	→	edmundnoble has joined #haskell
2021-09-24 20:33:59	→	kaychaks__ has joined #haskell
2021-09-24 20:34:01	→	Firedancer has joined #haskell
2021-09-24 20:34:04	←	b20n has quit (Read error: Connection reset by peer)
2021-09-24 20:34:04	←	dmj` has quit (Ping timeout: 260 seconds)
2021-09-24 20:34:13	→	b20n has joined #haskell
2021-09-24 20:34:14	←	tapas has quit (Ping timeout: 252 seconds)
2021-09-24 20:34:15	←	eruditass has quit (Ping timeout: 264 seconds)
2021-09-24 20:34:15	←	meinside has quit (Ping timeout: 264 seconds)
2021-09-24 20:34:16	←	NiKaN has quit (Ping timeout: 268 seconds)
2021-09-24 20:34:16	←	acertain has quit (Ping timeout: 268 seconds)
2021-09-24 20:34:16	←	obviyus has quit (Ping timeout: 268 seconds)
2021-09-24 20:34:21	→	dmj` has joined #haskell
2021-09-24 20:34:29	←	pjlsergeant has quit (Ping timeout: 268 seconds)
2021-09-24 20:34:33	→	SrPx has joined #haskell
2021-09-24 20:34:33	←	JSharp has quit (Ping timeout: 260 seconds)
2021-09-24 20:34:35	→	amir has joined #haskell
2021-09-24 20:34:37	←	cbarrett has quit (Ping timeout: 250 seconds)
2021-09-24 20:34:49	→	scav has joined #haskell
2021-09-24 20:34:51	←	xiongxin_ has quit (Ping timeout: 252 seconds)
2021-09-24 20:35:14	→	meinside has joined #haskell
2021-09-24 20:35:14	→	PotatoGim has joined #haskell
2021-09-24 20:35:16	→	cbarrett has joined #haskell
2021-09-24 20:35:17	→	pjlsergeant has joined #haskell
2021-09-24 20:35:17	→	acertain has joined #haskell
2021-09-24 20:35:22	→	tapas has joined #haskell
2021-09-24 20:35:30	←	Lycurgus has quit (Quit: Exeunt)
2021-09-24 20:35:33	→	JSharp has joined #haskell
2021-09-24 20:35:33	→	xiongxin has joined #haskell
2021-09-24 20:35:38	→	NiKaN has joined #haskell
2021-09-24 20:36:03	→	eruditass has joined #haskell
2021-09-24 20:36:12	→	obviyus has joined #haskell
2021-09-24 20:36:28	→	cln has joined #haskell
2021-09-24 20:36:34	→	nschoe has joined #haskell
2021-09-24 20:36:39	→	bw has joined #haskell
2021-09-24 20:37:18	→	Guest8 has joined #haskell
2021-09-24 20:38:01	→	terrorjack has joined #haskell
2021-09-24 20:38:02	←	Guest8 has quit (Client Quit)
2021-09-24 20:38:59	→	Guest95 has joined #haskell
2021-09-24 20:39:49	Guest95	,
2021-09-24 20:39:54	→	merijn has joined #haskell
2021-09-24 20:40:31	←	Guest95 has quit (Client Quit)
2021-09-24 20:40:33	geekosaur	.
2021-09-24 20:40:43	geekosaur	o, they left
2021-09-24 20:40:48	←	xiongxin has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-09-24 20:42:13	→	zmt01 has joined #haskell
2021-09-24 20:42:57	→	yauhsien has joined #haskell
2021-09-24 20:43:16	→	chris has joined #haskell
2021-09-24 20:43:20	ℹ	chris is now known as Guest7402
2021-09-24 20:44:32	→	Guest97 has joined #haskell
2021-09-24 20:45:04	shapr	,
2021-09-24 20:46:06	←	Guest97 has quit (Client Quit)
2021-09-24 20:46:08	←	zmt00 has quit (Ping timeout: 240 seconds)
2021-09-24 20:52:20	→	vpan has joined #haskell
2021-09-24 20:53:10	←	terrorjack has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-24 20:54:59	→	terrorjack has joined #haskell
2021-09-24 20:55:04	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-24 20:55:20	←	bitdex has quit (Quit: = "")
2021-09-24 20:55:27	←	terrorjack has quit (Client Quit)
2021-09-24 20:57:30	→	terrorjack has joined #haskell
2021-09-24 20:58:50	[itchyjunk]	There was a really nice link posted here explaining why numbers are not functions. I wanted to share that link with someone but i can't find it again. 
2021-09-24 20:58:53	→	tnm has joined #haskell
2021-09-24 21:00:20	monochrom	And yet there will be a time when it is beneficial to admit numbers as functions.
2021-09-24 21:00:36	→	hexfive has joined #haskell
2021-09-24 21:00:46	monochrom	And in more than one way, too.
2021-09-24 21:00:47	[itchyjunk]	oh ohh.. i finally convinenced myself that numbers are not functions
2021-09-24 21:01:05	[itchyjunk]	/o\ disaster
2021-09-24 21:02:22	→	MQ-17J has joined #haskell
2021-09-24 21:02:29	[itchyjunk]	found the link : http://conal.net/blog/posts/everything-is-a-function-in-haskell
2021-09-24 21:04:23	monochrom	My understand is, for example, operator theory begins by saying this: you have a differential equation like "3*y(t) + y'(t) = 0".  Wouldn't it be nice to refactor that to "(3 + diff) y = 0".  For example Schrödinger's equation and Dirac's equations are in this form.
2021-09-24 21:05:15	monochrom	We can understand that to mean that diff is a higher-order function (now called "operator"), it maps a number function to its derivative.  We know how to extend "+" to mean adding two higher-order functions.
2021-09-24 21:05:17	[itchyjunk]	interesting..
2021-09-24 21:05:32	monochrom	But this also means "3" is a higher-order function of the same type as diff.
2021-09-24 21:06:26	monochrom	Everything is what you need it to be for the purpose at hand.
2021-09-24 21:07:35	monochrom	In Haskell, you can take the stance that if the type does not look like "X -> Y" then the term is not a function.  This fits Haskell's purpose.
2021-09-24 21:07:35	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-24 21:07:43	monochrom	But Haskell doesn't stand for the whole world.
2021-09-24 21:07:58	→	MQ-17J has joined #haskell
2021-09-24 21:08:39	←	eggplantade has quit (Remote host closed the connection)
2021-09-24 21:10:56	←	madjestic has quit (Ping timeout: 260 seconds)
2021-09-24 21:11:36	→	alaspeanutcheese has joined #haskell
2021-09-24 21:13:35	←	jakalx has left #haskell
2021-09-24 21:14:09	←	machinedgod has quit (Remote host closed the connection)
2021-09-24 21:14:27	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-24 21:15:31	←	hexfive has quit (Quit: WeeChat 3.0.1)
2021-09-24 21:16:56	→	machinedgod has joined #haskell
2021-09-24 21:17:33	[itchyjunk]	i see
2021-09-24 21:17:50	[itchyjunk]	i knew numbers were treated as function in lambda calculus in some sense
2021-09-24 21:18:15	→	tinhatcat has joined #haskell
2021-09-24 21:18:33	geekosaur	you can even treat numbers as functions in Haskell to some extent (literals, at least)
2021-09-24 21:19:01	←	tinhatcat has quit (Client Quit)
2021-09-24 21:19:05	→	jtomas has joined #haskell
2021-09-24 21:19:25	←	jtomas has left #haskell
2021-09-24 21:20:56	←	ubert has quit (Ping timeout: 252 seconds)
2021-09-24 21:21:40	←	ph88 has quit (Ping timeout: 260 seconds)
2021-09-24 21:25:15	→	eggplantade has joined #haskell
2021-09-24 21:26:18	Cale	If the right instances are in scope :)
2021-09-24 21:28:27	dminuoso	Or you can treat them as numbers on the basis of being polymorphic, a function taking a Num dictionary..
2021-09-24 21:29:02	Cale	fair, yeah
2021-09-24 21:29:03	dminuoso	Though, this line of thinking entertains the idea that the core idea of "X is just a function" is something useful, when in fact it's just particular mind models or perspectives that introduce this idea.
2021-09-24 21:30:01	←	[itchyjunk] has quit (Quit: Leaving)
2021-09-24 21:33:42	←	Guest7402 has quit (Remote host closed the connection)
2021-09-24 21:36:20	←	vpan has quit (Ping timeout: 265 seconds)
2021-09-24 21:38:29	←	zaquest has quit (Remote host closed the connection)
2021-09-24 21:38:34	→	chris has joined #haskell
2021-09-24 21:38:38	ℹ	chris is now known as Guest6764
2021-09-24 21:40:05	→	zaquest has joined #haskell
2021-09-24 21:42:14	←	yauhsien has quit (Remote host closed the connection)
2021-09-24 21:42:42	→	lbseale has joined #haskell
2021-09-24 21:43:05	←	Guest6764 has quit (Ping timeout: 265 seconds)
2021-09-24 21:43:33	→	yauhsien has joined #haskell
2021-09-24 21:44:38	→	tzh has joined #haskell
2021-09-24 21:46:24	→	chris has joined #haskell
2021-09-24 21:46:28	ℹ	chris is now known as Guest2952
2021-09-24 21:47:54	→	python47` has joined #haskell
2021-09-24 21:48:00	←	yauhsien has quit (Ping timeout: 252 seconds)
2021-09-24 21:49:02	→	jakalx has joined #haskell
2021-09-24 21:49:06	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-24 21:49:51	←	python476 has quit (Ping timeout: 265 seconds)
2021-09-24 21:50:40	→	vpan has joined #haskell
2021-09-24 21:51:40	→	_ht has joined #haskell
2021-09-24 21:57:57	←	python47` has quit (Quit: ERC (IRC client for Emacs 28.0.50))
2021-09-24 21:58:20	←	wroathe has quit (Ping timeout: 252 seconds)
2021-09-24 22:00:37	←	jpds has quit (Ping timeout: 276 seconds)
2021-09-24 22:01:20	←	_bin has quit (Ping timeout: 260 seconds)
2021-09-24 22:05:49	←	chexum has quit (Ping timeout: 276 seconds)
2021-09-24 22:06:17	→	chexum has joined #haskell
2021-09-24 22:06:18	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-24 22:07:08	→	Vajb has joined #haskell
2021-09-24 22:07:11	←	xff0x has quit (Ping timeout: 252 seconds)
2021-09-24 22:07:12	→	wroathe has joined #haskell
2021-09-24 22:07:13	←	wroathe has quit (Changing host)
2021-09-24 22:07:13	→	wroathe has joined #haskell
2021-09-24 22:09:07	→	xff0x has joined #haskell
2021-09-24 22:09:54	→	ubert has joined #haskell
2021-09-24 22:11:08	→	pfurla_ has joined #haskell
2021-09-24 22:11:30	→	_bin has joined #haskell
2021-09-24 22:14:01	←	pfurla has quit (Ping timeout: 265 seconds)
2021-09-24 22:14:45	←	terrorjack has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-24 22:15:36	→	python476 has joined #haskell
2021-09-24 22:19:30	←	chele has quit (Remote host closed the connection)
2021-09-24 22:23:25	→	geranim0 has joined #haskell
2021-09-24 22:25:05	→	tommd has joined #haskell
2021-09-24 22:26:31	→	tromp has joined #haskell
2021-09-24 22:29:31	→	pfurla has joined #haskell
2021-09-24 22:30:34	→	yauhsien has joined #haskell
2021-09-24 22:32:23	←	pfurla_ has quit (Ping timeout: 265 seconds)
2021-09-24 22:32:24	←	wroathe has quit (Ping timeout: 265 seconds)
2021-09-24 22:33:09	→	lavaman has joined #haskell
2021-09-24 22:34:00	→	terrorjack has joined #haskell
2021-09-24 22:35:17	←	yauhsien has quit (Ping timeout: 265 seconds)
2021-09-24 22:36:06	←	Pickchea has quit (Quit: Leaving)
2021-09-24 22:37:30	←	lavaman has quit (Ping timeout: 252 seconds)
2021-09-24 22:38:03	←	nschoe has quit (Ping timeout: 252 seconds)
2021-09-24 22:38:48	←	geranim0 has quit (Remote host closed the connection)
2021-09-24 22:39:10	→	geranim0 has joined #haskell
2021-09-24 22:39:42	→	jpds has joined #haskell
2021-09-24 22:43:29	←	geranim0 has quit (Ping timeout: 252 seconds)
2021-09-24 22:44:17	←	terrorjack has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-24 22:45:17	→	ph88 has joined #haskell
2021-09-24 22:47:16	→	wroathe has joined #haskell
2021-09-24 22:47:16	←	wroathe has quit (Changing host)
2021-09-24 22:47:16	→	wroathe has joined #haskell
2021-09-24 22:47:30	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-24 22:48:11	→	merijn has joined #haskell
2021-09-24 22:49:25	→	slep has joined #haskell
2021-09-24 22:54:29	→	Guest9 has joined #haskell
2021-09-24 22:54:31	←	jushur has quit (Quit:  ¯\_(ツ)_/¯)
2021-09-24 22:55:28	→	tfeb has joined #haskell
2021-09-24 23:04:09	←	tfeb has quit (Quit: died)
2021-09-24 23:05:56	→	TDANG_ has joined #haskell
2021-09-24 23:08:38	←	TDANG has quit (Ping timeout: 265 seconds)
2021-09-24 23:08:50	←	eggplantade has quit (Remote host closed the connection)
2021-09-24 23:10:54	←	dehhy^ has quit (Remote host closed the connection)
2021-09-24 23:11:47	→	sneedsfeed has joined #haskell
2021-09-24 23:12:08	sneedsfeed	what is the preferred way of sharing code in this community?
2021-09-24 23:12:57	dminuoso	@where paste
2021-09-24 23:12:57	lambdabot	Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
2021-09-24 23:13:04	dminuoso	But you can use whatever you fancy
2021-09-24 23:13:11	geekosaur	depends on what you mean by sharing code. snippets via gist or paste.tomsmeding.com, larger programs/libraries on hackage
2021-09-24 23:13:19	dminuoso	As long as its not offending in terms of requiring registration of full with advertisements.
2021-09-24 23:13:31	←	Guest9 has left #haskell
2021-09-24 23:14:11	sneedsfeed	https://paste.tomsmeding.com/ seems perfect. thanks. (y) 
2021-09-24 23:16:41	←	vpan has quit (Quit: Leaving.)
2021-09-24 23:18:52	→	lavaman has joined #haskell
2021-09-24 23:19:18	←	wroathe has quit (Ping timeout: 252 seconds)
2021-09-24 23:21:22	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-24 23:22:32	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-24 23:23:11	→	Vajb has joined #haskell
2021-09-24 23:23:56	←	opqdonut has quit (Remote host closed the connection)
2021-09-24 23:24:33	→	opqdonut has joined #haskell
2021-09-24 23:26:46	→	nrl^ has joined #haskell
2021-09-24 23:27:18	→	tromp has joined #haskell
2021-09-24 23:28:35	←	kimjetwav has quit (Ping timeout: 252 seconds)
2021-09-24 23:30:59	→	wroathe has joined #haskell
2021-09-24 23:30:59	←	wroathe has quit (Changing host)
2021-09-24 23:30:59	→	wroathe has joined #haskell
2021-09-24 23:32:04	←	rond_ has quit (Quit: Client closed)
2021-09-24 23:35:11	←	tnm has quit (Quit: leaving)
2021-09-24 23:35:32	→	econo has joined #haskell
2021-09-24 23:35:48	←	wroathe has quit (Ping timeout: 252 seconds)
2021-09-24 23:36:39	←	lavaman has quit (Remote host closed the connection)
2021-09-24 23:37:12	→	lavaman has joined #haskell
2021-09-24 23:37:35	←	lavaman has quit (Remote host closed the connection)
2021-09-24 23:37:48	←	werneta has quit (Remote host closed the connection)
2021-09-24 23:37:49	→	lavaman has joined #haskell
2021-09-24 23:37:51	←	lavaman has quit (Remote host closed the connection)
2021-09-24 23:38:19	→	justsomeguy has joined #haskell
2021-09-24 23:40:00	→	eggplantade has joined #haskell
2021-09-24 23:40:07	→	lavaman has joined #haskell
2021-09-24 23:41:26	→	werneta has joined #haskell
2021-09-24 23:48:23	←	sneedsfeed has quit (Ping timeout: 256 seconds)
2021-09-24 23:48:50	←	justsomeguy has quit (Quit: WeeChat 3.2)
2021-09-24 23:50:10	←	lavaman has quit (Remote host closed the connection)
2021-09-24 23:51:20	→	lavaman has joined #haskell
2021-09-24 23:51:23	←	lavaman has quit (Remote host closed the connection)
2021-09-24 23:51:35	→	lavaman has joined #haskell
2021-09-24 23:55:29	→	wroathe has joined #haskell
2021-09-24 23:55:29	←	wroathe has quit (Changing host)
2021-09-24 23:55:29	→	wroathe has joined #haskell
2021-09-25 00:08:40	←	jpds has quit (Ping timeout: 276 seconds)
2021-09-25 00:11:17	→	jpds has joined #haskell
2021-09-25 00:11:36	←	gehmehgeh has quit (Quit: Leaving)
2021-09-25 00:19:00	→	VoidNoir0 has joined #haskell
2021-09-25 00:19:35	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-25 00:24:26	→	yinghua has joined #haskell
2021-09-25 00:26:48	←	yinghua has quit (Read error: Connection reset by peer)
2021-09-25 00:27:06	→	yinghua has joined #haskell
2021-09-25 00:29:30	→	tromp has joined #haskell
2021-09-25 00:34:48	→	ubert1 has joined #haskell
2021-09-25 00:43:22	←	eggplantade has quit (Remote host closed the connection)
2021-09-25 00:45:56	ℹ	irc: disconnected from server
2021-09-25 13:16:03	→	oxide has joined #haskell
2021-09-25 13:16:03	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-25 13:16:03	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-25 13:16:03	ℹ	Channel #haskell: 702 nicks (1 op, 0 voices, 701 normals)
2021-09-25 13:16:03	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-25 13:16:05	←	hnOsmium0001 has quit (Quit: Connection closed for inactivity)
2021-09-25 13:19:34	→	vysn has joined #haskell
2021-09-25 13:20:40	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-25 13:22:30	→	waleee has joined #haskell
2021-09-25 13:29:33	→	acidjnk has joined #haskell
2021-09-25 13:36:37	→	_ht has joined #haskell
2021-09-25 13:41:53	←	hololeap has quit (Remote host closed the connection)
2021-09-25 13:42:09	→	nfd has joined #haskell
2021-09-25 13:43:19	→	xiongxin has joined #haskell
2021-09-25 13:45:53	→	eggplantade has joined #haskell
2021-09-25 13:46:01	←	qwedfg has quit (Ping timeout: 252 seconds)
2021-09-25 13:48:14	→	eggplant_ has joined #haskell
2021-09-25 13:48:49	→	Pickchea has joined #haskell
2021-09-25 13:49:16	→	ksqsf`` has joined #haskell
2021-09-25 13:50:32	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-25 13:50:58	←	ksqsf` has quit (Ping timeout: 252 seconds)
2021-09-25 13:51:36	→	merijn has joined #haskell
2021-09-25 13:51:42	→	kuribas has joined #haskell
2021-09-25 13:52:52	←	eggplant_ has quit (Ping timeout: 260 seconds)
2021-09-25 13:57:32	←	xff0x has quit (Ping timeout: 260 seconds)
2021-09-25 13:57:52	→	ksqsf``` has joined #haskell
2021-09-25 13:58:05	→	xff0x has joined #haskell
2021-09-25 13:58:28	←	waleee has quit (Ping timeout: 260 seconds)
2021-09-25 13:59:46	←	ksqsf`` has quit (Ping timeout: 252 seconds)
2021-09-25 14:07:11	→	Tuplanolla has joined #haskell
2021-09-25 14:09:42	←	nrl^ has quit (Remote host closed the connection)
2021-09-25 14:13:05	→	qwedfg has joined #haskell
2021-09-25 14:22:19	→	Brumaire has joined #haskell
2021-09-25 14:25:19	←	econo has quit (Quit: Connection closed for inactivity)
2021-09-25 14:26:07	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-25 14:30:01	←	masaeedu[m] has quit (Quit: You have been kicked for being idle)
2021-09-25 14:31:44	←	Sgeo has quit (Read error: Connection reset by peer)
2021-09-25 14:37:25	→	Skyfire has joined #haskell
2021-09-25 14:38:39	→	yauhsien has joined #haskell
2021-09-25 14:40:19	←	mousey has quit (Ping timeout: 276 seconds)
2021-09-25 14:41:34	←	ksqsf``` has quit (Ping timeout: 252 seconds)
2021-09-25 14:43:11	←	yauhsien has quit (Ping timeout: 252 seconds)
2021-09-25 14:50:09	→	acidjnk_new has joined #haskell
2021-09-25 14:53:40	←	acidjnk has quit (Ping timeout: 252 seconds)
2021-09-25 14:54:44	→	python476 has joined #haskell
2021-09-25 15:08:32	←	raehik has quit (Ping timeout: 265 seconds)
2021-09-25 15:08:56	←	xiongxin has quit (Ping timeout: 260 seconds)
2021-09-25 15:09:59	→	xiongxin has joined #haskell
2021-09-25 15:16:13	←	wonko has quit (Quit: See You Space Cowboy..)
2021-09-25 15:17:19	←	werneta has quit (Ping timeout: 252 seconds)
2021-09-25 15:28:26	→	python47` has joined #haskell
2021-09-25 15:30:17	←	python476 has quit (Ping timeout: 265 seconds)
2021-09-25 15:30:45	←	alaspeanutcheese has quit (Ping timeout: 240 seconds)
2021-09-25 15:32:27	→	__monty__ has joined #haskell
2021-09-25 15:34:03	Guest372	addOne x f = f x; addTwo x f = do { let r = f x; doSomething; return r }; could we say addOne and addTwo have same type signature?
2021-09-25 15:35:35	c_wraith	they don't have the same most-general type
2021-09-25 15:35:44	c_wraith	(also known as principle type)
2021-09-25 15:36:25	c_wraith	actually, they don't have the same type at all.  I think you get an infinite type error if you try to unify those
2021-09-25 15:37:16	c_wraith	yeah, you'd be trying to unify the type of (f x) with the type of (return (f x))
2021-09-25 15:37:31	c_wraith	those will never unify.  infinite type error
2021-09-25 15:41:26	tomsmeding	(for the sake of nitpicking: principal type, not principle type :) )
2021-09-25 15:41:44	c_wraith	It's the type I feel in my heart!
2021-09-25 15:41:53	tomsmeding	:D
2021-09-25 15:42:42	←	xiongxin has quit (Ping timeout: 252 seconds)
2021-09-25 15:42:42	←	fendor has quit (Remote host closed the connection)
2021-09-25 15:42:51	←	FragByte has quit (Quit: Quit)
2021-09-25 15:43:09	→	xiongxin has joined #haskell
2021-09-25 15:43:31	Guest372	that withFile :: FilePath -> IOMode -> (Handle -> IO r) -> IO r, withFile get (Handle -> IO r) result them close file, return result, what if we creat a withFileCPS that take (Handle -> IO r) in the last, they have the same type right?
2021-09-25 15:44:38	→	FragByte has joined #haskell
2021-09-25 15:45:01	→	mc47 has joined #haskell
2021-09-25 15:45:23	c_wraith	did you mean r <- f x in your addTwo?
2021-09-25 15:45:42	c_wraith	If you did, then you could at least unify the types of those two
2021-09-25 15:46:06	tomsmeding	:t \x f -> f x
2021-09-25 15:46:07	lambdabot	t1 -> (t1 -> t2) -> t2
2021-09-25 15:46:07	Guest372	kimd of
2021-09-25 15:46:19	tomsmeding	:t \x f -> do { r <- f x ; undefined ; return r }
2021-09-25 15:46:20	lambdabot	Monad m => t -> (t -> m b) -> m b
2021-09-25 15:46:59	c_wraith	those unify, though one is clearly more general than the other.
2021-09-25 15:47:02	kuribas	Guest372: did you mean addOne x f = pure $ f x?
2021-09-25 15:47:25	Guest372	no, just f x
2021-09-25 15:47:33	c_wraith	are you the same person who asked about withFile and CPS a few days ago?
2021-09-25 15:47:55	Guest372	I asked withFile a few days ago
2021-09-25 15:48:42	kuribas	Guest372: well, a -> (a -> b) -> b and Monad m => a -> (a -> b) -> m b are clearly different.
2021-09-25 15:51:48	←	Pickchea has quit (Quit: Leaving)
2021-09-25 15:51:52	←	xiongxin has quit (Ping timeout: 260 seconds)
2021-09-25 15:56:04	→	tfeb has joined #haskell
2021-09-25 15:57:12	→	chris has joined #haskell
2021-09-25 15:57:17	ℹ	chris is now known as Guest7748
2021-09-25 15:58:24	←	xff0x has quit (Ping timeout: 260 seconds)
2021-09-25 15:59:17	→	xff0x has joined #haskell
2021-09-25 16:00:19	→	fendor has joined #haskell
2021-09-25 16:01:50	←	Guest7748 has quit (Ping timeout: 252 seconds)
2021-09-25 16:03:14	←	tfeb has quit (Quit: died)
2021-09-25 16:08:43	maerwald	too  bad you can't use a where-clause function in a viewpattern of the top-level definitoin
2021-09-25 16:10:54	tomsmeding	that feels like an unnecessary restriction
2021-09-25 16:13:21	maerwald	it's simple sugar I guess
2021-09-25 16:13:42	maerwald	not refined carbs
2021-09-25 16:14:46	←	terrorjack has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-25 16:16:10	tomsmeding	perhaps they didn't want to deal with the situation where the where-bindings refer to the value being matched with the view pattern?
2021-09-25 16:16:28	tomsmeding	f (thing -> x) = ... where thing = .. x ..
2021-09-25 16:16:47	tomsmeding	there's no reason it _couldn't_ work I think
2021-09-25 16:17:05	→	terrorjack has joined #haskell
2021-09-25 16:21:11	→	ubert1 has joined #haskell
2021-09-25 16:22:21	→	merijn has joined #haskell
2021-09-25 16:23:05	→	[_] has joined #haskell
2021-09-25 16:24:30	wz1000	what goes wrong if you try to use this function? dne :: ((a -> Void) -> Void) -> a; dne k = absurd $ k (unsafeCoerce id)
2021-09-25 16:25:52	←	[itchyjunk] has quit (Ping timeout: 265 seconds)
2021-09-25 16:25:53	tomsmeding	wz1000: what are you going to call it with?
2021-09-25 16:28:05	→	evertedsphere has joined #haskell
2021-09-25 16:30:36	←	slep has quit (Quit: slep)
2021-09-25 16:30:55	→	alx741 has joined #haskell
2021-09-25 16:32:41	→	slep has joined #haskell
2021-09-25 16:32:47	tomsmeding	hm, I guess (\f -> f 42)
2021-09-25 16:33:06	kuribas	($ 42)
2021-09-25 16:33:27	tomsmeding	(`id` 42)
2021-09-25 16:34:15	kuribas	wz1000: coredump?
2021-09-25 16:34:44	kuribas	wz1000: I read "unsafeCoerce" as "coredump unless you know what you do".
2021-09-25 16:34:58	wz1000	but this isn't usafeCoerce
2021-09-25 16:35:15	evertedsphere	good day
2021-09-25 16:35:22	kuribas	wz1000: it uses unsafeCoerce
2021-09-25 16:35:46	←	evertedsphere has quit (Quit: Updating details, brb)
2021-09-25 16:35:56	→	evertedsphere has joined #haskell
2021-09-25 16:36:10	wz1000	Do you have a program which coredumps using dne?
2021-09-25 16:36:25	kuribas	wz1000: sorry, I was just guessing.
2021-09-25 16:36:25	evertedsphere	curious: what's dne
2021-09-25 16:36:30	←	evertedsphere has left #haskell
2021-09-25 16:36:32	kuribas	wz1000: let me try it then :)
2021-09-25 16:37:37	→	evertedsphere has joined #haskell
2021-09-25 16:38:00	tomsmeding	wz1000: well it's certainly behaving fishy
2021-09-25 16:38:21	tomsmeding	'print (dne ($ "abc"))' gives "abc" for me with -O0 and "abc with -O2
2021-09-25 16:38:42	tomsmeding	feels like a coredump is just some experimentation away
2021-09-25 16:40:11	kuribas	dne ($ 2) => 2
2021-09-25 16:40:11	kuribas	 
2021-09-25 16:42:49	tomsmeding	the core also looks _very_ fishy: 'print (dne ($ "hoi"))' prints a value 'GHC.Types.: @ Char GHC.Show.$fShow(,)3 Main.main2' (where that $fShow(,)3 is a `"`, presumably), where main2 is an empty case on the string to print unsafe-coerced to Void
2021-09-25 16:42:54	amirouche	re full-stack declarative webui, that is basically what hyperfiddle does
2021-09-25 16:42:55	amirouche	https://hyperfiddle.notion.site/Reactive-Clojure-You-don-t-need-a-web-framework-you-need-a-web-language-44b5bfa526be4af282863f34fa1cfffc
2021-09-25 16:43:02	Franciman	hi amirouche ^^
2021-09-25 16:43:12	tomsmeding	this probably half-works by accident due to the right values being in the right registers by accident
2021-09-25 16:43:21	amirouche	ref: https://github.com/hyperfiddle/hyperfiddle
2021-09-25 16:43:30	amirouche	Franciman: hey :)
2021-09-25 16:43:45	←	python47` has quit (Ping timeout: 252 seconds)
2021-09-25 16:44:54	tomsmeding	wz1000: and when I try to enlarge the program a bit, ghc just collapses the whole thing down to an empty case on void, and the final executable is a nop :p
2021-09-25 16:45:14	tomsmeding	nice try but ghc doesn't like your proof of DNE
2021-09-25 16:45:23	wz1000	don't use optimisation
2021-09-25 16:45:26	ℹ	[_] is now known as [itchyjunk]
2021-09-25 16:46:43	tomsmeding	right, so "what goes wrong if you try to use this function?" -- using optimisation is what goes wrong, perhaps among other things :p
2021-09-25 16:47:37	←	zaquest has quit (Remote host closed the connection)
2021-09-25 16:48:54	→	zaquest has joined #haskell
2021-09-25 16:49:01	←	__monty__ has quit (Quit: leaving)
2021-09-25 16:49:09	tomsmeding	if you want to out-law optimisation, you can pull similar tricks in C as well: int bar() { return 42; } int foo() { bar(); } int main() { printf("%d\n", foo()); }
2021-09-25 16:49:20	tomsmeding	that prints 42 without optimisations, but sensibly doesn't with optimisations
2021-09-25 16:49:22	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-25 16:50:19	wz1000	what is wrong with that C?
2021-09-25 16:50:28	→	ulvarrefr has joined #haskell
2021-09-25 16:50:44	wz1000	oh, is it the missing return?
2021-09-25 16:50:47	oak-	foo missing return?
2021-09-25 16:51:08	←	martin02 has quit (Ping timeout: 260 seconds)
2021-09-25 16:51:17	wz1000	I don't see what that has to do with optimisation
2021-09-25 16:52:19	→	hololeap has joined #haskell
2021-09-25 16:52:55	→	xiongxin has joined #haskell
2021-09-25 16:56:19	←	dumbsharka has quit (Ping timeout: 265 seconds)
2021-09-25 16:56:44	←	merijn has quit (Ping timeout: 260 seconds)
2021-09-25 16:58:53	→	martin02 has joined #haskell
2021-09-25 17:00:41	→	bontaq has joined #haskell
2021-09-25 17:03:53	→	__monty__ has joined #haskell
2021-09-25 17:06:04	→	slowButPresent has joined #haskell
2021-09-25 17:06:06	←	kuribas has quit (Remote host closed the connection)
2021-09-25 17:13:40	←	pavonia has quit (Quit: Bye!)
2021-09-25 17:14:17	tomsmeding	yeah foo missing return
2021-09-25 17:14:50	tomsmeding	what that has to do with optimisation is that _without_ optimisation, the call to bar() won't be elided, and because of C calling conventions (at least on x64) it will put the return value in $rax
2021-09-25 17:15:11	tomsmeding	so even though foo doesn't return (and hence doesn't write anything in $rax), the value from bar() will still be there, so main will print 42
2021-09-25 17:15:43	tomsmeding	_with_ optimisation, the compiler actually makes use of the language semantics as distinct from accidental leakage of machine semantics, and elides the call to bar
2021-09-25 17:16:03	tomsmeding	after which printf will print a value from a register that was never initialised, and that will probably not contain 42
2021-09-25 17:16:40	tomsmeding	optimisation enforces language semantics, while non-optimisation lets you make use of accidental properties of the translation to machine code, that you can't rely on in larger programs
2021-09-25 17:16:47	tomsmeding	same here :p
2021-09-25 17:16:52	→	raehik has joined #haskell
2021-09-25 17:17:27	tomsmeding	with respect to Haskell's language semantics you're doing nonsense of course, but some accidental properties of the translation to machine code might make the dne trick work when optimisations don't interfere
2021-09-25 17:17:36	wz1000	You can {- NOINLINE dne #-} and disable optimisation in that module so it acts as a primitive
2021-09-25 17:18:29	tomsmeding	yeah and that works until the next ghc point release where they made some changes to the machine code translation :p
2021-09-25 17:19:01	tomsmeding	it's fun to figure out what's going on, but it's not directly practically useful (but you knew that already)
2021-09-25 17:21:48	→	Guest68 has joined #haskell
2021-09-25 17:23:31	←	Guest68 has quit (Client Quit)
2021-09-25 17:28:00	→	merijn has joined #haskell
2021-09-25 17:31:29	→	eggplantade has joined #haskell
2021-09-25 17:34:51	→	korvos has joined #haskell
2021-09-25 17:35:57	←	eggplantade has quit (Ping timeout: 265 seconds)
2021-09-25 17:38:05	maerwald	HLS stopped working. Only checks some modules and ignores others
2021-09-25 17:38:16	tomsmeding	$ haskell-language-server-wrapper
2021-09-25 17:43:41	→	chris has joined #haskell
2021-09-25 17:43:44	ℹ	chris is now known as Guest2479
2021-09-25 17:46:47	→	jespada has joined #haskell
2021-09-25 17:48:31	←	Guest2479 has quit (Ping timeout: 265 seconds)
2021-09-25 17:48:40	→	tromp has joined #haskell
2021-09-25 17:57:10	→	Guest2517 has joined #haskell
2021-09-25 17:57:17	←	Guest2517 has quit (Client Quit)
2021-09-25 17:59:13	→	machinedgod has joined #haskell
2021-09-25 18:00:41	→	ack_inc has joined #haskell
2021-09-25 18:03:47	maerwald	hmm, how do you highjack the way ghci shows values again?
2021-09-25 18:04:04	maerwald	I wanna tweak my doctests  so that they use Pretty class for showing
2021-09-25 18:08:03	Taneb	I wasn't aware there was such an option!
2021-09-25 18:09:19	merijn	Taneb: You can overwrite the logic to render ghci output, yes
2021-09-25 18:09:37	merijn	Taneb: There's some snippets around the web for coloured output too
2021-09-25 18:09:56	merijn	ghci has surprisingly many sophisticated options almost no one knows about :p
2021-09-25 18:11:00	merijn	Here's a pro-tip for becoming a GHC/Haskell wizard using this "one weird trick", regardless of skill level: Make sure to skim the *entire* GHC user guide at least, like, once a year ;)
2021-09-25 18:11:36	merijn	Literally every time I find some new trick, re-discover something I forgot, etc.
2021-09-25 18:12:48	maerwald	doesn't work in doctests
2021-09-25 18:12:52	maerwald	just times out
2021-09-25 18:14:12	←	FragByte has quit (Ping timeout: 260 seconds)
2021-09-25 18:14:54	→	FragByte has joined #haskell
2021-09-25 18:16:13	maerwald	seems you can't redefine "show", just "putStrLn"
2021-09-25 18:16:15	maerwald	not that useful
2021-09-25 18:17:30	→	fendor_ has joined #haskell
2021-09-25 18:17:44	tomsmeding	maerwald: the -interactive-print option looks like it should be able to do what you want?
2021-09-25 18:17:53	tomsmeding	(just skimmed the manual lol)
2021-09-25 18:17:58	maerwald	doesn't seem so
2021-09-25 18:18:21	tomsmeding	because doctest does somethingw weird? ah
2021-09-25 18:18:29	tomsmeding	oh right, s/putStrLn/print/ in your message
2021-09-25 18:18:38	maerwald	I wanna redefine Show
2021-09-25 18:19:04	merijn	Why?
2021-09-25 18:19:11	merijn	Human readability?
2021-09-25 18:19:18	maerwald	doctests as said above
2021-09-25 18:19:30	→	qbt has joined #haskell
2021-09-25 18:19:53	merijn	You are skipping several steps of inference there if you think I understand why that should be an explanation :)
2021-09-25 18:20:00	←	fendor has quit (Ping timeout: 252 seconds)
2021-09-25 18:20:09	maerwald	I'm not too interested in debating the why
2021-09-25 18:20:36	merijn	maerwald: Well if the answer is "for readability of humans" I have a solution
2021-09-25 18:20:49	merijn	If the answer isn't that, than I dunno, RIP your sanity
2021-09-25 18:21:44	merijn	but "for doctests" tells me as much as "for love" about what you need :p
2021-09-25 18:21:46	maerwald	it's only partially about readability... it's making writing doctests sane
2021-09-25 18:22:01	merijn	@hackage pretty-show
2021-09-25 18:22:01	lambdabot	https://hackage.haskell.org/package/pretty-show
2021-09-25 18:22:05	merijn	if you need the readability
2021-09-25 18:22:19	maerwald	that doesn't solve the problem of me having to put that functoin everywhere
2021-09-25 18:23:06	merijn	maerwald: Well it can operate on the String output of Show even if you cannot replace the show call
2021-09-25 18:23:45	maerwald	that's not gonna help I think
2021-09-25 18:24:11	merijn	Well, then "RIP your sanity" :p
2021-09-25 18:24:25	maerwald	I don't know what that means
2021-09-25 18:25:19	merijn	maerwald: It means that any solution will probably a frustrating endeavour of obscure ill-documented workarounds that'll make you mad (in both meanings of the word) :p
2021-09-25 18:25:36	maerwald	I'm already mad. What are you talking about?
2021-09-25 18:25:59	⚡	maerwald eats part of his foot
2021-09-25 18:26:03	maerwald	oh wait, that was rms
2021-09-25 18:28:45	maerwald	o O ( somewhat delicious though )
2021-09-25 18:28:56	→	gehmehgeh has joined #haskell
2021-09-25 18:29:17	maerwald	there could be a TH hack to do this
2021-09-25 18:29:50	maerwald	but then again I believe doctest can easily support this
2021-09-25 18:29:54	←	hyiltiz has quit (Ping timeout: 252 seconds)
2021-09-25 18:29:55	→	sedeki has joined #haskell
2021-09-25 18:34:02	→	hyiltiz has joined #haskell
2021-09-25 18:35:58	←	sedeki has quit (Quit: Textual IRC Client: www.textualapp.com)
2021-09-25 18:45:10	←	hyiltiz has quit (Ping timeout: 252 seconds)
2021-09-25 18:47:45	→	hyiltiz has joined #haskell
2021-09-25 18:59:03	←	Vajb has quit (Ping timeout: 252 seconds)
2021-09-25 19:00:07	→	chris has joined #haskell
2021-09-25 19:00:10	ℹ	chris is now known as Guest8167
2021-09-25 19:03:29	←	jespada has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-09-25 19:04:33	←	Guest8167 has quit (Ping timeout: 252 seconds)
2021-09-25 19:05:21	→	ru0mad has joined #haskell
2021-09-25 19:05:48	→	jumper149 has joined #haskell
2021-09-25 19:11:15	→	Lycurgus has joined #haskell
2021-09-25 19:13:14	←	asthasr has quit (Quit: asthasr)
2021-09-25 19:17:06	←	ru0mad has left #haskell
2021-09-25 19:18:47	→	Guest90 has joined #haskell
2021-09-25 19:23:48	←	TDANG_ has quit (Ping timeout: 252 seconds)
2021-09-25 19:24:02	→	TDANG_ has joined #haskell
2021-09-25 19:27:06	→	Vajb has joined #haskell
2021-09-25 19:30:27	←	sneedsfeed has quit (Ping timeout: 256 seconds)
2021-09-25 19:33:14	→	eggplantade has joined #haskell
2021-09-25 19:37:44	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-25 19:38:46	→	fryguybob has joined #haskell
2021-09-25 19:40:14	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-25 19:40:18	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-25 19:43:48	←	MQ-17J has quit (Ping timeout: 260 seconds)
2021-09-25 19:44:09	←	cheater has quit (Ping timeout: 252 seconds)
2021-09-25 19:44:43	→	cheater has joined #haskell
2021-09-25 19:48:18	→	MQ-17J has joined #haskell
2021-09-25 19:49:07	←	Lycurgus has quit (Quit: Exeunt)
2021-09-25 19:50:54	→	Hanicef has joined #haskell
2021-09-25 19:52:38	tomsmeding	maerwald: parental guidance is recommended when acquiring traits from rms
2021-09-25 19:54:10	maerwald	lol
2021-09-25 19:58:44	[exa]	but freedom!!!111
2021-09-25 20:01:39	→	chris has joined #haskell
2021-09-25 20:01:42	ℹ	chris is now known as Guest6440
2021-09-25 20:09:22	←	acidjnk_new has quit (Ping timeout: 252 seconds)
2021-09-25 20:11:23	←	kimjetwav has quit (Remote host closed the connection)
2021-09-25 20:14:59	tomsmeding	[exa]: careful
2021-09-25 20:16:16	⚡	[exa] thinks "hey kids, careful with all that freedom"
2021-09-25 20:16:32	←	Guest6440 has quit (Remote host closed the connection)
2021-09-25 20:16:37	maerwald	xD
2021-09-25 20:17:04	⚡	maerwald makes a personal note: refrain from making rms jokes
2021-09-25 20:21:23	→	chris has joined #haskell
2021-09-25 20:21:26	ℹ	chris is now known as Guest4676
2021-09-25 20:22:45	→	mikoto-chan has joined #haskell
2021-09-25 20:25:48	←	Guest4676 has quit (Ping timeout: 260 seconds)
2021-09-25 20:30:43	→	waleee has joined #haskell
2021-09-25 20:30:55	→	wroathe has joined #haskell
2021-09-25 20:30:56	←	wroathe has quit (Changing host)
2021-09-25 20:30:56	→	wroathe has joined #haskell
2021-09-25 20:34:55	zzz	I want the State Monad. what's the import?
2021-09-25 20:35:06	tomsmeding	Control.Monad.State.Strict from mtl
2021-09-25 20:35:31	tomsmeding	or if you don't care about monad transformer lifting, Control.Monad.Trans.State.Strict from transformers
2021-09-25 20:36:16	tomsmeding	zzz: in general, the basic monad transformers are defined in 'transformers', and 'mtl' then defines those MonadState etc classes around that
2021-09-25 20:36:17	zzz	thank you
2021-09-25 20:43:02	←	terrorjack has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-25 20:44:58	→	terrorjack has joined #haskell
2021-09-25 20:46:21	→	merijn has joined #haskell
2021-09-25 20:49:27	→	eggplantade has joined #haskell
2021-09-25 20:52:01	←	terrorjack has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-25 20:54:35	→	yauhsien has joined #haskell
2021-09-25 20:54:58	←	fryguybob has quit (Ping timeout: 252 seconds)
2021-09-25 20:55:06	zzz	whoa. i have to relearn State
2021-09-25 20:55:37	zzz	i was used to data State s a = State { runState :: s -> (a,s) }
2021-09-25 20:55:45	zzz	what happened to that? :(
2021-09-25 20:55:48	shapr	what's it doing now?
2021-09-25 20:56:31	zzz	    • Data constructor not in scope:
2021-09-25 20:56:41	zzz	        State :: ([Bool] -> (Int, [Bool])) -> State
2021-09-25 20:56:48	zzz	    • Perhaps you meant one of these:
2021-09-25 20:56:58	zzz	        ‘StateT’ (imported from Control.Monad.State.St
2021-09-25 20:56:59	zzz	...
2021-09-25 20:57:04	→	boxscape_ has joined #haskell
2021-09-25 20:59:42	→	hexfive has joined #haskell
2021-09-25 20:59:58	←	hexfive has quit (Client Quit)
2021-09-25 21:00:21	cdsmith	Last-minute reminder that there's a virtual Haskell CoHack happening in 30 minutes.  Info, signups and zoom link at https://www.meetup.com/NY-Haskell/events/280727563/
2021-09-25 21:00:30	[exa]	zzz: use `state`
2021-09-25 21:01:10	←	shapr has quit (Remote host closed the connection)
2021-09-25 21:01:31	zzz	[exa]: that's it. thanks
2021-09-25 21:01:40	[exa]	zzz: using the constructor directly prevents the lower layer to actually have multiple (possibly better) implementations
2021-09-25 21:02:02	zzz	ok i see
2021-09-25 21:02:59	[exa]	in this case I guess you'd make it with something like `StateT \s -> Identity (a,s)` but well you see :]
2021-09-25 21:03:08	zzz	yes
2021-09-25 21:03:11	→	terrorjack has joined #haskell
2021-09-25 21:03:18	zzz	i'm not that into transformers
2021-09-25 21:03:47	[exa]	it's most useful when you later realize that you actually want full RWST, no need to change code then. :D
2021-09-25 21:05:10	→	shapr has joined #haskell
2021-09-25 21:05:36	Cajun	having recently learned RWST over IO, its very very nice to use. its basically magic (but it isnt!) how it lets you use any of the actions seamlessly 
2021-09-25 21:05:57	zzz	Read Write State Transformer?
2021-09-25 21:06:00	[exa]	yep
2021-09-25 21:06:15	dsal	That gets nasty if you need to unlift
2021-09-25 21:06:27	Cajun	theres also just RWS but i havent used it
2021-09-25 21:06:42	Cajun	seems very useful for a lot of stuff though
2021-09-25 21:06:52	[exa]	kinda fun how the RWST IO catches the essence of so many programs
2021-09-25 21:07:00	Cajun	dsal: why's that?
2021-09-25 21:07:17	dsal	Because you can't generally unliftio state.
2021-09-25 21:07:28	dsal	And that's the shape of most of my programs.
2021-09-25 21:07:51	dsal	(lots of concurrency and io and stuff)
2021-09-25 21:08:27	[exa]	dsal: that's for some stream processing I guess?
2021-09-25 21:08:44	dsal	Something like that.
2021-09-25 21:09:13	←	qbt has quit (Quit: Leaving)
2021-09-25 21:09:44	dsal	I've got a bit where I did that, but it's because the state portion wouldn't be changed during the part that would need the unlifting
2021-09-25 21:10:09	⚡	[exa] reads the readme
2021-09-25 21:10:12	[exa]	o cool
2021-09-25 21:10:13	→	gioyik has joined #haskell
2021-09-25 21:10:47	dsal	Putting TVars in the reader env works for my kind of junk.
2021-09-25 21:11:45	←	_ak_ has quit (Ping timeout: 240 seconds)
2021-09-25 21:14:41	yin[m]	can anyone explain to me the comcepts of lifting and unlifting? i keep reading that word and am not sure if it's always in the same context
2021-09-25 21:16:05	→	zmt01 has joined #haskell
2021-09-25 21:17:30	←	fjmorazan has quit (Quit: fjmorazan)
2021-09-25 21:18:11	→	_ak_ has joined #haskell
2021-09-25 21:18:11	←	_ak_ has quit (Changing host)
2021-09-25 21:18:11	→	_ak_ has joined #haskell
2021-09-25 21:18:41	←	terrorjack has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-25 21:19:48	cdsmith	yin: There are actually a few different things that are meant by "lift" and "unlift" in Haskell.  One is about data types, and the other is about monad transformers.  Do you know which you mean?
2021-09-25 21:20:06	←	korvos has left #haskell
2021-09-25 21:20:29	→	hnOsmium0001 has joined #haskell
2021-09-25 21:20:32	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-25 21:20:42	yin[m]	no
2021-09-25 21:20:49	cdsmith	Oh, the conversation above is about the monad transformer version.
2021-09-25 21:20:54	[exa]	yin[m]: lifting = converting an operation that would run somewhere deeper in the transformer stack to an operation that runs conveniently on top of that transformer stack (say you're in StateT IO, you need to lift all IO operations because they don't know how to go through StateT)
2021-09-25 21:21:24	yin[m]	i see
2021-09-25 21:21:42	[exa]	yin[m]: unlifting = a solution to a very subtle problem described here https://hackage.haskell.org/package/unliftio
2021-09-25 21:22:24	[exa]	kinda looks like reverse lifting, you have something that works on a transformer stack that's got IO down below, but you need to squeeze that operation into something that only understands plain IO
2021-09-25 21:23:18	[exa]	I might have made oversimplifications but I hope the idea makes sense
2021-09-25 21:23:27	→	TDANG has joined #haskell
2021-09-25 21:24:15	[exa]	compare with e.g. 'liftA2' which is almost the same concept (making something work in a "more complicated environment") but outside the transformer context
2021-09-25 21:24:29	yin[m]	i think it does. that's a bit too advanced for me yet but i think i get the gist of it
2021-09-25 21:24:50	→	nrl^ has joined #haskell
2021-09-25 21:25:29	[exa]	> liftA2 (,) (Just 1) (Just "phoo")   -- makes the simple (,) work through Just's
2021-09-25 21:25:30	cdsmith	Example of where you need unlifting:  I'm running in some monad stack (m IO), and I want to fork a new thread.  I want that new thread to run in the same monad transformer stack, so the code to run in that thread has type (m IO) as well.  But `forkIO` expects it to have type `IO`.  You can do it for *some* monad stacks, but not others
2021-09-25 21:25:31	lambdabot	 Just (1,"phoo")
2021-09-25 21:27:00	←	TDANG_ has quit (Ping timeout: 252 seconds)
2021-09-25 21:28:04	[exa]	> flip runStateT 3 $ do { x <- get; lift (print x); put (x+1)}
2021-09-25 21:28:05	lambdabot	 <IO ((),Integer)>
2021-09-25 21:29:29	[exa]	yin[m]: there ^ you have a monad that combines state with IO actions, of type `StateT Integer IO`. StateT actions (`get`, `put`) are accessible directly, but you need to lift the `print x` to make it work through StateT
2021-09-25 21:29:55	[exa]	(pity lambdabot didn't print much results tho.)
2021-09-25 21:30:33	→	chris has joined #haskell
2021-09-25 21:30:37	ℹ	chris is now known as Guest1847
2021-09-25 21:32:01	←	Guest90 has quit (Quit: Client closed)
2021-09-25 21:34:00	←	stiell has quit (Remote host closed the connection)
2021-09-25 21:34:14	←	hyiltiz has quit (Ping timeout: 265 seconds)
2021-09-25 21:34:23	→	stiell has joined #haskell
2021-09-25 21:34:27	→	pretty_dumm_guy has joined #haskell
2021-09-25 21:35:03	←	xiongxin has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-09-25 21:35:12	←	Guest1847 has quit (Ping timeout: 265 seconds)
2021-09-25 21:35:40	→	fjmorazan has joined #haskell
2021-09-25 21:38:29	→	Partmedia has joined #haskell
2021-09-25 21:43:22	→	tzh has joined #haskell
2021-09-25 21:51:21	←	darxun has quit
2021-09-25 21:52:00	→	tromp has joined #haskell
2021-09-25 21:52:05	→	hyiltiz has joined #haskell
2021-09-25 21:52:56	dsal	[exa]: yahb will
2021-09-25 21:53:09	dsal	% flip runStateT 3 $ do { x <- get; lift (print x); put (x+1)}
2021-09-25 21:53:10	yahb	dsal: ; <interactive>:88:35: error:; Ambiguous occurrence `lift'; It could refer to; either `Language.Haskell.TH.Syntax.lift', imported from `Language.Haskell.TH.Syntax'; or `Control.Monad.Cont.lift', imported from `Control.Monad.Cont' (and originally defined in `Control.Monad.Trans.Class')
2021-09-25 21:53:15	dsal	Except for that.
2021-09-25 21:53:36	dsal	% flip runStateT 3 $ do { x <- get; liftIO (print x); put (x+1)}
2021-09-25 21:53:36	yahb	dsal: 3; ((),4)
2021-09-25 21:59:45	←	_ak_ has quit (Ping timeout: 240 seconds)
2021-09-25 21:59:59	→	TDANG_ has joined #haskell
2021-09-25 22:00:20	←	TDANG has quit (Ping timeout: 265 seconds)
2021-09-25 22:00:52	→	_ak_ has joined #haskell
2021-09-25 22:00:52	←	_ak_ has quit (Changing host)
2021-09-25 22:00:52	→	_ak_ has joined #haskell
2021-09-25 22:01:11	[exa]	wow cool, there's even more lifts :]
2021-09-25 22:08:40	ℹ	irc: disconnected from server
2021-09-25 22:11:54	→	oxide has joined #haskell
2021-09-25 22:11:54	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-25 22:11:54	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-25 22:11:54	ℹ	Channel #haskell: 716 nicks (1 op, 0 voices, 715 normals)
2021-09-25 22:11:54	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-25 22:12:41	→	Vajb has joined #haskell
2021-09-25 22:15:17	→	chris has joined #haskell
2021-09-25 22:15:21	ℹ	chris is now known as Guest1795
2021-09-25 22:19:48	←	Guest1795 has quit (Ping timeout: 252 seconds)
2021-09-25 22:20:21	←	_ak_ has quit (Ping timeout: 252 seconds)
2021-09-25 22:20:31	←	boxscape_ has quit (Remote host closed the connection)
2021-09-25 22:20:39	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-25 22:21:21	→	ub has joined #haskell
2021-09-25 22:21:37	→	fryguybob has joined #haskell
2021-09-25 22:24:05	←	ubert has quit (Ping timeout: 252 seconds)
2021-09-25 22:24:05	ℹ	ub is now known as ubert
2021-09-25 22:24:19	←	ubert1 has quit (Ping timeout: 260 seconds)
2021-09-25 22:28:03	←	mjs2600 has quit (Ping timeout: 252 seconds)
2021-09-25 22:30:51	→	_ak_ has joined #haskell
2021-09-25 22:30:51	←	_ak_ has quit (Changing host)
2021-09-25 22:30:51	→	_ak_ has joined #haskell
2021-09-25 22:31:16	←	wroathe has quit (Ping timeout: 252 seconds)
2021-09-25 22:31:26	→	merijn has joined #haskell
2021-09-25 22:31:34	←	gioyik has quit (Ping timeout: 276 seconds)
2021-09-25 22:48:04	→	wroathe has joined #haskell
2021-09-25 22:48:04	←	wroathe has quit (Changing host)
2021-09-25 22:48:04	→	wroathe has joined #haskell
2021-09-25 22:53:01	←	wroathe has quit (Ping timeout: 265 seconds)
2021-09-25 22:56:23	←	Hanicef has quit (Quit: leaving)
2021-09-25 22:57:05	→	mjs2600 has joined #haskell
2021-09-25 22:59:22	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-25 22:59:35	→	MQ-17J has joined #haskell
2021-09-25 23:00:59	→	justsomeguy has joined #haskell
2021-09-25 23:03:45	→	gioyik has joined #haskell
2021-09-25 23:03:47	→	boxscape_ has joined #haskell
2021-09-25 23:05:51	←	merijn has quit (Ping timeout: 260 seconds)
2021-09-25 23:10:34	←	gioyik has quit (Ping timeout: 276 seconds)
2021-09-25 23:10:49	←	mikoto-chan has quit (Ping timeout: 252 seconds)
2021-09-25 23:21:01	←	boxscape_ has quit (Quit: Connection closed)
2021-09-25 23:22:10	→	sneedsfeed has joined #haskell
2021-09-25 23:22:31	←	yauhsien has quit (Remote host closed the connection)
2021-09-25 23:23:03	→	yauhsien has joined #haskell
2021-09-25 23:24:53	→	Guest80 has joined #haskell
2021-09-25 23:24:53	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-25 23:25:38	→	MQ-17J has joined #haskell
2021-09-25 23:28:00	←	yauhsien has quit (Ping timeout: 252 seconds)
2021-09-25 23:32:33	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-25 23:32:55	→	Vajb has joined #haskell
2021-09-25 23:34:16	←	gustik has quit (Quit: Leaving)
2021-09-25 23:34:35	←	machinedgod has quit (Ping timeout: 265 seconds)
2021-09-25 23:34:57	→	Pickchea has joined #haskell
2021-09-25 23:36:05	←	max22- has quit (Ping timeout: 240 seconds)
2021-09-25 23:41:12	→	merijn has joined #haskell
2021-09-25 23:48:17	ℹ	irc: disconnected from server
2021-09-25 23:48:37	→	oxide has joined #haskell
2021-09-25 23:48:37	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-25 23:48:37	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-25 23:48:37	ℹ	Channel #haskell: 710 nicks (1 op, 0 voices, 709 normals)
2021-09-25 23:48:38	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-25 23:48:38	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-25 23:48:51	→	MQ-17J has joined #haskell
2021-09-25 23:49:27	→	tromp has joined #haskell
2021-09-25 23:52:58	←	Guest80 has quit (Quit: Client closed)
2021-09-25 23:59:25	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-26 00:00:44	←	ack_inc has quit (Quit: Leaving.)
2021-09-26 00:01:10	→	werneta has joined #haskell
2021-09-26 00:02:10	→	lavaman has joined #haskell
2021-09-26 00:03:45	←	Lewky has left #haskell (WeeChat 2.8)
2021-09-26 00:04:37	→	tromp has joined #haskell
2021-09-26 00:06:18	→	gioyik has joined #haskell
2021-09-26 00:07:01	→	max22- has joined #haskell
2021-09-26 00:08:32	zzz	what's this about? https://wiki.haskell.org/Keywords#proc
2021-09-26 00:08:58	monochrom	Arrow, as it says and has links to.
2021-09-26 00:09:23	←	cheater has quit (Ping timeout: 265 seconds)
2021-09-26 00:09:27	→	Null_A has joined #haskell
2021-09-26 00:09:38	←	byorgey has quit (Quit: leaving)
2021-09-26 00:09:42	→	cheater has joined #haskell
2021-09-26 00:09:47	→	byorgey has joined #haskell
2021-09-26 00:10:08	c_wraith	I have never seen an explanation of why Arrow is worth learning all the special syntax for.  So I never have.
2021-09-26 00:10:17	→	Sgeo has joined #haskell
2021-09-26 00:10:39	←	byorgey has quit (Client Quit)
2021-09-26 00:10:46	→	byorgey has joined #haskell
2021-09-26 00:10:58	monochrom	If Applicative did not exist, or Lava still used Haskell, I would be able to refer to those use cases.
2021-09-26 00:11:04	c_wraith	I just learned about QualifiedDo and that makes me nervous enough
2021-09-26 00:11:40	←	gioyik has quit (Ping timeout: 276 seconds)
2021-09-26 00:12:47	monochrom	Arrow also had a chance with FRP, IIRC.
2021-09-26 00:13:08	c_wraith	didn't it turn out that Applicative worked just as well there, too?
2021-09-26 00:13:28	monochrom	I forgot. Wouldn't be surprised. :)
2021-09-26 00:14:49	sneedsfeed	whats the best way to handle a situation where I want to add a value to a list if a condition holds but not add anything to the list if it fails? haskell doesn't seem to like this kind of thing because I always need to specify an else and it has to be the right type so it kind of forces me to stick values in the list when I don't want to.
2021-09-26 00:15:33	awpr	`if cond then (thing:) else id $ restOfList`
2021-09-26 00:15:42	c_wraith	$ doesn't work there
2021-09-26 00:15:52	awpr	right, needs parens
2021-09-26 00:16:56	awpr	or `(guard cond >> [thing]) ++ restOfList`
2021-09-26 00:17:20	tomsmeding	`when cond thing ++ restOfList`
2021-09-26 00:17:35	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-26 00:17:40	awpr	or list comprehension abuse: `[thing | cond] ++ restOfList`
2021-09-26 00:17:54	sneedsfeed	my compiler is barking at me "pattern matches non exhaustive"
2021-09-26 00:18:03	sneedsfeed	er IDE is barking at me
2021-09-26 00:18:08	→	tromp has joined #haskell
2021-09-26 00:18:17	→	dexmad[m] has joined #haskell
2021-09-26 00:18:47	monochrom	What pattern?
2021-09-26 00:20:30	→	kjak has joined #haskell
2021-09-26 00:20:53	sneedsfeed	h/o i'll show you the function i'm trying to make, hopefully it will make enough sense out of context
2021-09-26 00:21:39	→	kayprish has joined #haskell
2021-09-26 00:23:20	sneedsfeed	https://paste.tomsmeding.com/vficPciN
2021-09-26 00:24:18	sneedsfeed	it doesnt work obviously.
2021-09-26 00:25:19	monochrom	> let n | 5>6 = 1 in n
2021-09-26 00:25:21	lambdabot	 *Exception: <interactive>:3:5-15: Non-exhaustive patterns in function n
2021-09-26 00:25:24	monochrom	Like that?
2021-09-26 00:26:54	→	chris has joined #haskell
2021-09-26 00:26:58	ℹ	chris is now known as Guest1560
2021-09-26 00:27:11	sneedsfeed	I mean yea. Except its worse because its actually going to evaluate the other way like half the time.
2021-09-26 00:27:21	→	gioyik has joined #haskell
2021-09-26 00:27:44	monochrom	So make a decision what should my n be if not(5>6).
2021-09-26 00:27:52	sneedsfeed	I'm testing if a given direction is a valid way to move in the maze, if it is I want to add it to a list, if its not I want to ignore it.
2021-09-26 00:27:53	←	brettgilio has quit (Quit: Leaving...)
2021-09-26 00:28:03	monochrom	And write down that decision as code.
2021-09-26 00:28:16	sneedsfeed	Sure of course I would use Maybe I assume
2021-09-26 00:28:31	awpr	the list you've written unconditionally has four elements, and some of them are just pattern-match failure errors
2021-09-26 00:28:32	sneedsfeed	but that seems inefficient compared to just ignoring the case
2021-09-26 00:28:38	monochrom	"ignore" ≠ "don't tell the computer what to do"
2021-09-26 00:29:15	monochrom	"say nothing" ≠ "tell the computer to do nothing"
2021-09-26 00:29:18	sneedsfeed	wait wait I think I know
2021-09-26 00:29:24	→	brettgilio has joined #haskell
2021-09-26 00:29:32	awpr	you could build a list of the four candidate directions and get rid of the ones that aren't valid using `filter`
2021-09-26 00:29:46	←	lavaman has quit (Remote host closed the connection)
2021-09-26 00:30:15	sneedsfeed	I can take the list as input, return an amended one if its valid, and just return the original list if its not
2021-09-26 00:30:15	monochrom	I would pretty much use the [x1 | cond1] ++ [x2 | cond2] ++ ... idea.
2021-09-26 00:30:21	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-26 00:30:44	tomsmeding	given the form of the conditions, awpr's idea seems nice
2021-09-26 00:30:56	awpr	in this case since `cond_i` is of the form `pred x_i`, `filter` is applicable
2021-09-26 00:31:05	←	Guest1560 has quit (Ping timeout: 240 seconds)
2021-09-26 00:32:28	←	gioyik has quit (Ping timeout: 276 seconds)
2021-09-26 00:33:10	monochrom	As for "efficiency" "performance" I only know two meanings.
2021-09-26 00:33:35	monochrom	One meaning is the big-O kind, which means this case doesn't matter.
2021-09-26 00:33:36	sneedsfeed	https://paste.tomsmeding.com/AGR2dfcx yep that is pretty good
2021-09-26 00:34:13	monochrom	The other meaning is real time on real computer, which means if you haven't seen what asm code GHC generates you're talking out of your *ss.
2021-09-26 00:34:30	tomsmeding	monochrom: I said "nice", not "fast" ;)
2021-09-26 00:34:55	monochrom	Oh, I'm just picking on "seems inefficient".
2021-09-26 00:35:30	sneedsfeed	no its a valid point mono, I have no idea what sort of bytecode GHC is really producing for a given input
2021-09-26 00:35:53	sneedsfeed	it may look at this filter situation and not actually assign the values to a list then remove them again
2021-09-26 00:36:06	sneedsfeed	it may be smart enough to know not to assign them in the first place for all i know
2021-09-26 00:37:07	tomsmeding	I suspect that in terms of actual cpu time, you're not going to get anything faster than this filter form, assuming you don't modify testMove
2021-09-26 00:37:43	←	shapr has quit (Ping timeout: 252 seconds)
2021-09-26 00:38:57	sneedsfeed	thanks everyone who took a look (y)  i'm happy with this filter form
2021-09-26 00:41:29	ℹ	irc: disconnected from server
2021-09-26 12:29:28	→	oxide has joined #haskell
2021-09-26 12:29:28	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-26 12:29:28	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-26 12:29:28	ℹ	Channel #haskell: 701 nicks (1 op, 0 voices, 700 normals)
2021-09-26 12:29:29	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-26 12:39:15	←	falafel_ has quit (Ping timeout: 260 seconds)
2021-09-26 12:41:24	←	jjhoo has quit (Changing host)
2021-09-26 12:41:24	→	jjhoo has joined #haskell
2021-09-26 12:44:02	→	tromp has joined #haskell
2021-09-26 12:53:11	←	nrl^ has quit (Ping timeout: 252 seconds)
2021-09-26 12:54:12	ℹ	CnnibisIndica is now known as CannabisIndica
2021-09-26 13:04:29	←	Sgeo has quit (Read error: Connection reset by peer)
2021-09-26 13:09:13	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-26 13:10:54	→	falafel has joined #haskell
2021-09-26 13:12:35	←	tzh has quit (Quit: zzz)
2021-09-26 13:19:53	←	hnOsmium0001 has quit (Quit: Connection closed for inactivity)
2021-09-26 13:20:31	→	nrl^ has joined #haskell
2021-09-26 13:21:13	→	tromp has joined #haskell
2021-09-26 13:21:17	→	ubert has joined #haskell
2021-09-26 13:30:17	→	Feuermagier has joined #haskell
2021-09-26 13:30:57	→	wroathe has joined #haskell
2021-09-26 13:30:57	←	wroathe has quit (Changing host)
2021-09-26 13:30:57	→	wroathe has joined #haskell
2021-09-26 13:35:32	←	wroathe has quit (Ping timeout: 252 seconds)
2021-09-26 13:38:47	←	eggplantade has quit (Remote host closed the connection)
2021-09-26 13:51:43	→	lavaman has joined #haskell
2021-09-26 13:56:21	←	lavaman has quit (Ping timeout: 265 seconds)
2021-09-26 13:58:34	→	_ht has joined #haskell
2021-09-26 14:11:34	→	bontaq has joined #haskell
2021-09-26 14:15:03	→	merijn has joined #haskell
2021-09-26 14:16:53	→	alzgh has joined #haskell
2021-09-26 14:20:19	→	acidjnk_new has joined #haskell
2021-09-26 14:23:12	→	madjestic has joined #haskell
2021-09-26 14:30:11	←	werneta has quit (Ping timeout: 265 seconds)
2021-09-26 14:40:58	→	eggplantade has joined #haskell
2021-09-26 14:44:30	→	jacks2 has joined #haskell
2021-09-26 14:45:10	←	qwedfg has quit (Ping timeout: 265 seconds)
2021-09-26 14:45:15	←	eggplantade has quit (Ping timeout: 250 seconds)
2021-09-26 14:49:14	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-26 14:52:45	→	yauhsien has joined #haskell
2021-09-26 14:53:06	→	qwedfg has joined #haskell
2021-09-26 14:54:34	←	jacks2 has quit (Quit: http://www.okay.uz/ (EOF))
2021-09-26 14:54:37	←	xsperry has quit (Read error: Connection reset by peer)
2021-09-26 14:55:38	→	nfd has joined #haskell
2021-09-26 14:57:55	←	yauhsien has quit (Ping timeout: 265 seconds)
2021-09-26 15:00:25	←	Megant has quit (Ping timeout: 250 seconds)
2021-09-26 15:01:56	←	econo has quit (Quit: Connection closed for inactivity)
2021-09-26 15:02:22	→	Megant has joined #haskell
2021-09-26 15:03:32	→	xsperry has joined #haskell
2021-09-26 15:03:40	←	severen has quit (Quit: WeeChat 3.2.1)
2021-09-26 15:04:54	←	xsperry has quit (Read error: Connection reset by peer)
2021-09-26 15:07:24	←	madjestic has quit (Ping timeout: 265 seconds)
2021-09-26 15:10:37	→	xsperry has joined #haskell
2021-09-26 15:11:23	←	xff0x has quit (Ping timeout: 260 seconds)
2021-09-26 15:12:15	→	xff0x has joined #haskell
2021-09-26 15:13:36	→	madjestic has joined #haskell
2021-09-26 15:13:50	→	pretty_dumm_guy has joined #haskell
2021-09-26 15:20:48	→	yauhsien has joined #haskell
2021-09-26 15:21:26	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-26 15:23:18	→	jacks2 has joined #haskell
2021-09-26 15:24:22	→	eggplantade has joined #haskell
2021-09-26 15:27:55	←	yauhsien has quit (Remote host closed the connection)
2021-09-26 15:29:07	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-26 15:30:28	→	yauhsien has joined #haskell
2021-09-26 15:31:31	→	tromp has joined #haskell
2021-09-26 15:46:51	←	yauhsien has quit (Remote host closed the connection)
2021-09-26 15:47:31	→	yauhsien has joined #haskell
2021-09-26 15:49:04	→	eggplantade has joined #haskell
2021-09-26 15:52:29	←	yauhsien has quit (Ping timeout: 252 seconds)
2021-09-26 15:53:37	←	eggplantade has quit (Ping timeout: 250 seconds)
2021-09-26 15:57:50	←	xsperry has quit (Read error: Connection reset by peer)
2021-09-26 15:58:03	←	falafel has quit (Ping timeout: 260 seconds)
2021-09-26 15:58:19	→	xsperry has joined #haskell
2021-09-26 16:03:43	→	ph88 has joined #haskell
2021-09-26 16:05:29	←	tcard has quit (Quit: Leaving)
2021-09-26 16:06:36	→	gehmehgeh has joined #haskell
2021-09-26 16:10:49	→	tcard has joined #haskell
2021-09-26 16:18:28	→	JeSCaLis23-F has joined #haskell
2021-09-26 16:20:46	←	JeSCaLis23-F has quit (Client Quit)
2021-09-26 16:21:50	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-26 16:30:44	→	alx741 has joined #haskell
2021-09-26 16:32:58	→	eggplantade has joined #haskell
2021-09-26 16:35:14	→	tfeb has joined #haskell
2021-09-26 16:35:34	→	merijn has joined #haskell
2021-09-26 16:36:21	←	tfeb has quit (Client Quit)
2021-09-26 16:37:04	←	eggplantade has quit (Ping timeout: 250 seconds)
2021-09-26 16:37:10	←	idnar has quit
2021-09-26 16:37:22	→	idnar has joined #haskell
2021-09-26 16:41:14	→	AlexNoo_ has joined #haskell
2021-09-26 16:41:23	←	xff0x has quit (Ping timeout: 250 seconds)
2021-09-26 16:42:26	→	xff0x has joined #haskell
2021-09-26 16:42:58	←	AlexZenon has quit (Ping timeout: 252 seconds)
2021-09-26 16:43:07	←	acidjnk_new has quit (Ping timeout: 250 seconds)
2021-09-26 16:44:19	←	Alex_test has quit (Ping timeout: 246 seconds)
2021-09-26 16:44:40	←	AlexNoo has quit (Ping timeout: 246 seconds)
2021-09-26 16:46:57	→	AlexZenon has joined #haskell
2021-09-26 16:48:10	→	Alex_test has joined #haskell
2021-09-26 16:48:46	→	Alex_test_ has joined #haskell
2021-09-26 16:50:46	→	AlexZenon_2 has joined #haskell
2021-09-26 17:03:10	→	acidjnk_new has joined #haskell
2021-09-26 17:09:48	→	eggplantade has joined #haskell
2021-09-26 17:10:12	→	yauhsien has joined #haskell
2021-09-26 17:11:08	←	madjestic has quit (Ping timeout: 252 seconds)
2021-09-26 17:14:35	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-26 17:20:00	←	phma has quit (Read error: Connection reset by peer)
2021-09-26 17:20:06	→	eggplantade has joined #haskell
2021-09-26 17:21:00	→	phma has joined #haskell
2021-09-26 17:22:39	←	Vajb has quit (Read error: Connection reset by peer)
2021-09-26 17:24:04	→	Vajb has joined #haskell
2021-09-26 17:24:58	←	eggplantade has quit (Ping timeout: 268 seconds)
2021-09-26 17:25:54	→	dschrempf has joined #haskell
2021-09-26 17:26:07	←	max22- has quit (Ping timeout: 265 seconds)
2021-09-26 17:26:28	→	gioyik has joined #haskell
2021-09-26 17:31:39	←	gioyik has quit (Ping timeout: 276 seconds)
2021-09-26 17:32:17	←	Lord_of_Life has quit (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
2021-09-26 17:33:53	→	Lord_of_Life has joined #haskell
2021-09-26 17:36:18	←	yauhsien has quit (Remote host closed the connection)
2021-09-26 17:38:09	→	yauhsien has joined #haskell
2021-09-26 17:39:08	←	xsperry has quit (Quit: quit)
2021-09-26 17:41:14	→	xiongxin has joined #haskell
2021-09-26 17:41:28	→	kuribas has joined #haskell
2021-09-26 17:42:55	←	yauhsien has quit (Ping timeout: 252 seconds)
2021-09-26 17:46:09	→	chris has joined #haskell
2021-09-26 17:46:13	ℹ	chris is now known as Guest260
2021-09-26 17:48:57	→	xsperry has joined #haskell
2021-09-26 18:00:58	←	Guest260 has quit (Remote host closed the connection)
2021-09-26 18:01:17	→	jushur has joined #haskell
2021-09-26 18:02:01	→	madjestic has joined #haskell
2021-09-26 18:05:48	→	chris has joined #haskell
2021-09-26 18:05:52	ℹ	chris is now known as Guest4156
2021-09-26 18:09:15	←	AlexZenon_2 has quit (Quit: ;-)
2021-09-26 18:09:19	←	madjestic has quit (Ping timeout: 252 seconds)
2021-09-26 18:10:21	←	AlexZenon has quit (Quit: ;-)
2021-09-26 18:10:25	←	Guest4156 has quit (Ping timeout: 252 seconds)
2021-09-26 18:10:50	←	Alex_test has quit (Quit: ;-)
2021-09-26 18:11:28	←	Alex_test_ has quit (Quit: ;-)
2021-09-26 18:12:48	→	AlexZenon has joined #haskell
2021-09-26 18:14:59	→	eggplantade has joined #haskell
2021-09-26 18:15:43	ℹ	AlexNoo_ is now known as AlexNoo
2021-09-26 18:16:21	→	arpl has joined #haskell
2021-09-26 18:16:24	→	Alex_test has joined #haskell
2021-09-26 18:17:45	←	arpl has quit (Client Quit)
2021-09-26 18:19:16	←	eggplantade has quit (Ping timeout: 252 seconds)
2021-09-26 18:21:00	←	dschrempf has quit (Quit: WeeChat 3.3)
2021-09-26 18:24:51	←	acidjnk_new has quit (Ping timeout: 250 seconds)
2021-09-26 18:32:32	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-26 18:34:10	→	merijn has joined #haskell
2021-09-26 18:39:31	←	merijn has quit (Ping timeout: 260 seconds)
2021-09-26 18:39:46	→	merijn has joined #haskell
2021-09-26 18:40:14	→	madjestic has joined #haskell
2021-09-26 18:44:33	→	raehik has joined #haskell
2021-09-26 18:45:23	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-26 18:45:42	→	merijn has joined #haskell
2021-09-26 18:46:25	→	eggplantade has joined #haskell
2021-09-26 18:50:57	←	eggplantade has quit (Ping timeout: 250 seconds)
2021-09-26 18:52:20	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-26 18:53:00	→	MQ-17J has joined #haskell
2021-09-26 19:01:07	→	jespada has joined #haskell
2021-09-26 19:13:24	→	chris has joined #haskell
2021-09-26 19:13:27	ℹ	chris is now known as Guest489
2021-09-26 19:21:54	→	lbseale has joined #haskell
2021-09-26 19:27:34	→	max22- has joined #haskell
2021-09-26 19:27:35	←	madjestic has quit (Ping timeout: 260 seconds)
2021-09-26 19:29:57	→	eggplantade has joined #haskell
2021-09-26 19:34:35	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-26 19:38:58	←	ubert has quit (Ping timeout: 252 seconds)
2021-09-26 19:40:15	→	__monty__ has joined #haskell
2021-09-26 19:44:41	←	spruit11 has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-09-26 19:48:57	→	spruit11 has joined #haskell
2021-09-26 19:53:54	→	lavaman has joined #haskell
2021-09-26 19:58:27	←	lavaman has quit (Ping timeout: 250 seconds)
2021-09-26 20:03:03	←	xiongxin has quit (Ping timeout: 260 seconds)
2021-09-26 20:03:55	→	xiongxin has joined #haskell
2021-09-26 20:07:03	→	machinedgod has joined #haskell
2021-09-26 20:08:24	←	Guest489 has quit (Remote host closed the connection)
2021-09-26 20:11:25	←	nrl^ has quit (Ping timeout: 265 seconds)
2021-09-26 20:13:17	→	chris has joined #haskell
2021-09-26 20:13:18	ℹ	chris is now known as Guest4810
2021-09-26 20:17:37	←	Guest4810 has quit (Ping timeout: 250 seconds)
2021-09-26 20:18:19	→	mc47 has joined #haskell
2021-09-26 20:19:10	→	Null_A has joined #haskell
2021-09-26 20:21:56	→	eggplantade has joined #haskell
2021-09-26 20:25:50	←	raehik has quit (Ping timeout: 252 seconds)
2021-09-26 20:26:23	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-09-26 20:27:55	→	raehik has joined #haskell
2021-09-26 20:30:47	←	hyiltiz has quit (Ping timeout: 252 seconds)
2021-09-26 20:31:28	←	raehik has quit (Client Quit)
2021-09-26 20:31:47	→	raehik has joined #haskell
2021-09-26 20:33:38	←	lbseale has quit (Read error: Connection reset by peer)
2021-09-26 20:36:55	→	timCF has joined #haskell
2021-09-26 20:37:24	timCF	Hello! Is there some standard integral type similar to `Natural` but which excludes zero?
2021-09-26 20:37:29	→	hyiltiz has joined #haskell
2021-09-26 20:37:29	janus	what is this instance useful for? instance Semigroup a => Semigroup (M a) where
2021-09-26 20:37:48	[exa]	janus: depending on what's M
2021-09-26 20:38:03	merijn	timCF: Probably not
2021-09-26 20:38:18	janus	aaah so it's just saying that the M is whatever type is being defined, the actual code is not like that
2021-09-26 20:38:23	timCF	merijn: thanks for reply anyway!
2021-09-26 20:38:44	merijn	timCF: Seems fairly obscure, so wouldn't expect a "standard"  type for that
2021-09-26 20:38:51	hpc	you can always newtype ZPlus = PlusOne {minusOne :: Natural} and define all the instances
2021-09-26 20:39:01	hpc	might be a lot of work though
2021-09-26 20:39:24	[exa]	janus: it says that you can make Semigroup functionality for M (probably a container of) a if `a` is already a semigroup (i.e. supports <> )
2021-09-26 20:39:25	merijn	janus: What it is saying is that "M a" is an instance of Semigroup *iff* 'a' is an instance of Semigroup
2021-09-26 20:40:00	→	nrl^ has joined #haskell
2021-09-26 20:40:08	←	nrl^ has quit (Remote host closed the connection)
2021-09-26 20:40:12	[exa]	janus: if substituing M for Maybe, you'd automatically have `Just x <> Just y` working if `x<>y` would be working
2021-09-26 20:40:39	merijn	> (Sum 1, Any True) <> (Sum 3, Any False)
2021-09-26 20:40:41	lambdabot	 (Sum {getSum = 4},Any {getAny = True})
2021-09-26 20:41:18	merijn	janus: This works because "instance (Semigroup a, Semigroup b) => Semigroup (a, b)" (i.e. "if both elements of a tuple are instances of Semigroup, the tuple is also an instance of Semigroup)
2021-09-26 20:43:29	janus	it's from a thread with Gabriella Gonzalez where they talk about preferring that over basing on Alternative: https://twitter.com/GabriellaG439/status/1436722080502849539
2021-09-26 20:44:29	janus	i am trying to understand the different directions one might go , e.g. Brian McKenna argues for not defining it since one can use Ap
2021-09-26 20:44:47	janus	i never used Ap, i always find people golfing with it
2021-09-26 20:46:36	merijn	janus: Ah, ok, yeah, I see what you're getting at (and I think Brian is wrong)
2021-09-26 20:46:54	→	[itchyjunk] has joined #haskell
2021-09-26 20:47:16	merijn	janus: Ok, so in theory, defining a universal "instance (Semigroup a, Applicative f) => Semigroup (f a)" is perfectly fine
2021-09-26 20:47:25	merijn	That is a lawful instance
2021-09-26 20:47:40	merijn	However, it has the downside that some Applicatives might want *different* monoidal behaviour
2021-09-26 20:48:15	merijn	And that generic instance overlaps (and thus makes impossible) any custom instances for specific applicatives. Which is why it doesn't exist
2021-09-26 20:48:39	←	kuribas has quit (Quit: ERC (IRC client for Emacs 26.3))
2021-09-26 20:49:00	merijn	The Ap newtype exists to implement that generic instance, without overlapping any (future/possible) custom instances for specific 'f'
2021-09-26 20:49:21	merijn	But, as Gabriella says, that's super verbose and annoying to use
2021-09-26 20:49:48	merijn	the only real reason *not* to define the "liftA2 (<>)" instance is "if another one makes more sense:
2021-09-26 20:50:48	merijn	"because it's much more convenient and pleasant to use" seems a pretty solid argument to rebuke Brian's "why reimplement the generic case"
2021-09-26 20:53:43	janus	ok, that does seem sensible
2021-09-26 20:54:07	janus	the reason we have to reason with ergonomics, is it because Alt/Alternative are underspecified like phadej argues?
2021-09-26 20:54:50	janus	visible in this thread: https://twitter.com/chrislpenner/status/1437113257920274440
2021-09-26 20:55:57	merijn	janus: Alternative and Monoid don't always correspond
2021-09-26 20:56:38	merijn	Simple example where lawful Alternative and Monoid do the different thing: Parsers (I think attoparsec has these instances?)
2021-09-26 20:57:00	merijn	"parser1 <> parser2" -> parse both and <> their results
2021-09-26 20:57:16	merijn	vs "parser1 <|> parser2" -> parse left, if it fails, try right
2021-09-26 20:58:50	→	eggplantade has joined #haskell
2021-09-26 20:59:16	←	juhp has quit (Ping timeout: 265 seconds)
2021-09-26 21:00:39	maerwald	question is whether <|> backtracks or not
2021-09-26 21:01:38	janus	so that is the 'underspecification' applied to parsers?
2021-09-26 21:02:26	→	juhp has joined #haskell
2021-09-26 21:02:42	maerwald	sometimes it may be better to roll your own combinators
2021-09-26 21:03:09	janus	right, that is the argument "I believe some other people think that these Semigroup/Monoid instances should not be added (to avoid potentially confusing errors)" mentioned by Gabriella
2021-09-26 21:03:10	←	eggplantade has quit (Ping timeout: 252 seconds)
2021-09-26 21:04:16	timCF	I'm having a difficult time trying to give a name for this function.. `Integral b => (a -> b) -> Ratio a -> Ratio b`
2021-09-26 21:04:27	→	tzh has joined #haskell
2021-09-26 21:07:34	janus	merijn: i gather you mention that Alternative and Monoid do not correspond because you think that situation is all right, rigght? it is a demonstration that when choosing whether the Semigroup should match Monoid or Alternative, better choose Monoid. correct?
2021-09-26 21:08:00	[exa]	timCF: ratioMap ?
2021-09-26 21:09:07	timCF	[exa]: thanks) Or `fromRatio` maybe
2021-09-26 21:09:31	[exa]	fromX sound a bit like auto-conversions always, this is not autoconversion
2021-09-26 21:10:07	[exa]	(like, I'd expect fromRatio to also produce floats)
2021-09-26 21:12:08	janus	i wonder if this whole discussion is very different in purescript since they have so much more granular type classes :P but that is off-topic for here :P
2021-09-26 21:12:54	merijn	janus: The thing is, there are many valid (as in lawful) Alternatives/Monoids for most types
2021-09-26 21:13:32	merijn	janus: Specifically, "Monoid a => Monoid (f a)" says something about 'f a' values
2021-09-26 21:13:47	merijn	Whereas "instance Alternative f" says something about type 'f'
2021-09-26 21:14:36	merijn	Alternative and Monoid have the same laws, but they are statements/properties of different things and so the only reason why they are sometimes the same as coincidence flowing from the fact that the laws are the same
2021-09-26 21:15:03	←	brettgilio has quit (Quit: Leaving...)
2021-09-26 21:15:47	merijn	Note that With "instance (Applicative f, Monoid a) => Monoid (f a) where mempty = pure mempty" we need the Monoid on 'a' to have a "default" value to lift via pure
2021-09-26 21:15:53	merijn	:t empty
2021-09-26 21:15:55	lambdabot	Alternative f => f a
2021-09-26 21:16:15	merijn	Whereas alternative says "I can create an empty, regardless of whether 'a' has some kinda monoidal operation"
2021-09-26 21:16:24	merijn	(i.e. something like Nothing)
2021-09-26 21:16:48	→	brettgilio has joined #haskell
2021-09-26 21:17:39	janus	right, so just the fact that they have the same laws but different names rub people the wrong way if they take the 'lawless classes are bad' religion to its extreme
2021-09-26 21:18:26	janus	but how does that interact with having smaller type classes, which i think phadej shows wouldn't make sense? the smaller type classes do not change the amount of laws, right?
2021-09-26 21:18:54	merijn	I didn't see phadej's comment about that?
2021-09-26 21:19:56	→	Guest71 has joined #haskell
2021-09-26 21:20:32	janus	if you scroll down on the last 'chrislpenner' link that i posted, it shows e.g. this tweet "That paves a road to adding [...] CommotativeMonoid" https://twitter.com/phadej/status/1440004818098065410
2021-09-26 21:20:54	janus	*Commutative
2021-09-26 21:22:08	merijn	It's not that they make sense, but adding infinitely many tiny classes makes it a pain in the ass to define custom datatypes since you need to define 50 billion instances
2021-09-26 21:22:36	merijn	So there is a cost-benefit relation to "have useful is a class" vs "the hassle of making everyone implement it"
2021-09-26 21:22:57	←	Brumaire has quit (Ping timeout: 265 seconds)
2021-09-26 21:23:00	merijn	purescript certainly moves into the direction of "more finegrained classes", but I'm not sure that's necessarily better for users
2021-09-26 21:23:11	merijn	More classes to learn, more classes to implement
2021-09-26 21:26:08	←	xiongxin has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-09-26 21:26:13	←	hyiltiz has quit (Ping timeout: 252 seconds)
2021-09-26 21:26:15	janus	yeah, i need to just write more purescript to find out, i guess (heathen!). not intuitively clear to me how e.g. "Apply for Maps" is useful like chrislpenner mentions
2021-09-26 21:27:41	→	hyiltiz has joined #haskell
2021-09-26 21:28:31	←	timCF has quit (Quit: leaving)
2021-09-26 21:29:45	←	Null_A has quit (Remote host closed the connection)
2021-09-26 21:30:41	←	Guest71 has left #haskell
2021-09-26 21:35:39	→	zmt00 has joined #haskell
2021-09-26 21:38:07	→	eggplantade has joined #haskell
2021-09-26 21:38:26	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-26 21:39:32	→	slowButPresent has joined #haskell
2021-09-26 21:42:52	←	eggplantade has quit (Ping timeout: 252 seconds)
2021-09-26 21:43:55	→	yauhsien has joined #haskell
2021-09-26 21:48:20	→	wroathe has joined #haskell
2021-09-26 21:48:20	←	wroathe has quit (Changing host)
2021-09-26 21:48:20	→	wroathe has joined #haskell
2021-09-26 21:48:22	←	yauhsien has quit (Ping timeout: 252 seconds)
2021-09-26 22:03:50	←	dajoer has quit (Quit: leaving)
2021-09-26 22:04:34	sshine	I think that if many more classes were the better option, those alternative mathy preludes would've prevailed more.
2021-09-26 22:11:25	←	shriekingnoise has quit (Quit: Quit)
2021-09-26 22:14:12	→	merijn has joined #haskell
2021-09-26 22:18:51	←	merijn has quit (Ping timeout: 260 seconds)
2021-09-26 22:26:15	→	Sgeo has joined #haskell
2021-09-26 22:28:29	←	hyiltiz has quit (Ping timeout: 252 seconds)
2021-09-26 22:28:53	←	jespada has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-09-26 22:29:26	→	nschoe has joined #haskell
2021-09-26 22:31:28	→	hyiltiz has joined #haskell
2021-09-26 22:31:41	→	hnOsmium0001 has joined #haskell
2021-09-26 22:32:57	→	Lorra has joined #haskell
2021-09-26 22:34:32	←	wroathe has quit (Ping timeout: 252 seconds)
2021-09-26 22:36:00	→	gioyik has joined #haskell
2021-09-26 22:36:36	→	econo has joined #haskell
2021-09-26 22:40:28	←	machinedgod has quit (Ping timeout: 252 seconds)
2021-09-26 22:40:35	←	hyiltiz has quit (Ping timeout: 252 seconds)
2021-09-26 22:42:49	←	gioyik has quit (Quit: WeeChat 3.1)
2021-09-26 22:42:50	→	waleee has joined #haskell
2021-09-26 22:43:25	←	jacks2 has quit (Quit: http://www.okay.uz/)
2021-09-26 22:43:29	←	xsperry has quit
2021-09-26 22:47:51	→	ryantrinkle has joined #haskell
2021-09-26 22:49:43	ryantrinkle	does anyone know how to get cabal to produce a plan.json file?
2021-09-26 22:50:00	sclv	i think it always does with v2 build??
2021-09-26 22:50:43	sclv	https://cabal.readthedocs.io/en/latest/nix-local-build.html#caching
2021-09-26 22:50:58	→	wroathe has joined #haskell
2021-09-26 22:50:58	←	wroathe has quit (Changing host)
2021-09-26 22:50:58	→	wroathe has joined #haskell
2021-09-26 22:51:25	→	eggplantade has joined #haskell
2021-09-26 22:51:57	ryantrinkle	nvm looks like --dry-run does it
2021-09-26 22:52:02	ryantrinkle	thanks :)
2021-09-26 22:54:10	[exa]	any users of llvm-hs-pure? is there any good way to construct complicated phi nodes without totally abusing `mdo`? Problem: I need to construct a `phi` instruction in the beginning of a block, but the Operand I need gets only created by the last instruction.
2021-09-26 22:55:24	←	wroathe has quit (Ping timeout: 240 seconds)
2021-09-26 22:55:48	←	eggplantade has quit (Ping timeout: 250 seconds)
2021-09-26 22:57:27	→	hyiltiz has joined #haskell
2021-09-26 22:59:47	→	tromp has joined #haskell
2021-09-26 23:03:09	[exa]	hm this might be IRBuilder specific
2021-09-26 23:05:55	c_wraith	that's...  not abusing mdo
2021-09-26 23:06:03	c_wraith	that's what it exists to do
2021-09-26 23:06:59	←	Partmedia has quit (Ping timeout: 252 seconds)
2021-09-26 23:09:43	→	machinedgod has joined #haskell
2021-09-26 23:09:59	←	nschoe has quit (Ping timeout: 250 seconds)
2021-09-26 23:15:13	[exa]	so something like
2021-09-26 23:15:44	[exa]	metadata <- traverse (buildBlockWithMetadata metadata) blockDescriptions
2021-09-26 23:15:53	[exa]	... should just work™ within a mdo ?
2021-09-26 23:16:56	c_wraith	depending on strictness, yes
2021-09-26 23:16:58	davean	Thats the point
2021-09-26 23:17:08	davean	But yes, strictness
2021-09-26 23:17:48	→	Partmedia has joined #haskell
2021-09-26 23:18:00	←	zaquest has quit (Quit: Leaving)
2021-09-26 23:18:17	[exa]	it's mostly for phi nodes so the result will mainly contain the autoincrement values of some variable counters
2021-09-26 23:18:41	[exa]	and they won't be really needed until much later the thing gets chewed by LLVM
2021-09-26 23:18:49	[exa]	so I guess this is safe?
2021-09-26 23:19:36	→	zaquest has joined #haskell
2021-09-26 23:22:47	→	lavaman has joined #haskell
2021-09-26 23:23:56	→	yinghua has joined #haskell
2021-09-26 23:25:25	→	xsperry has joined #haskell
2021-09-26 23:25:32	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-26 23:33:03	←	raehik has quit (Ping timeout: 260 seconds)
2021-09-26 23:38:11	←	teddyc has quit (Ping timeout: 260 seconds)
2021-09-26 23:45:32	→	yauhsien has joined #haskell
2021-09-26 23:46:50	←	joeyh_ has quit (Remote host closed the connection)
2021-09-26 23:47:10	→	brainfreeze has joined #haskell
2021-09-26 23:48:56	→	joeyh has joined #haskell
2021-09-26 23:49:53	←	yauhsien has quit (Ping timeout: 252 seconds)
2021-09-26 23:50:54	←	brainfreeze has quit (Remote host closed the connection)
2021-09-26 23:53:07	←	ph88 has quit (Ping timeout: 252 seconds)
2021-09-26 23:54:01	→	ph88 has joined #haskell
2021-09-26 23:56:54	→	eggplantade has joined #haskell
2021-09-27 00:00:19	→	tromp has joined #haskell
2021-09-27 00:02:53	←	obfusk has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-09-27 00:03:14	→	obfusk has joined #haskell
2021-09-27 00:07:08	→	merijn has joined #haskell
2021-09-27 00:15:06	→	CiaoSen has joined #haskell
2021-09-27 00:17:52	→	TranquilEcho has joined #haskell
2021-09-27 00:19:52	←	quantum has quit (Quit: Reconnecting)
2021-09-27 00:20:10	→	quantum has joined #haskell
2021-09-27 00:20:46	←	ph88 has quit (Quit: Leaving)
2021-09-27 00:35:32	→	chris has joined #haskell
2021-09-27 00:35:36	ℹ	chris is now known as Guest6489
2021-09-27 00:39:03	→	raehik has joined #haskell
2021-09-27 00:39:40	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-27 00:45:04	→	asgas has joined #haskell
2021-09-27 00:46:26	←	raehik has quit (Ping timeout: 265 seconds)
2021-09-27 00:47:06	→	yauhsien has joined #haskell
2021-09-27 00:48:25	→	raehik has joined #haskell
2021-09-27 00:53:04	←	yauhsien has quit (Ping timeout: 240 seconds)
2021-09-27 00:55:46	←	asgas has quit (Quit: Leaving)
2021-09-27 00:58:28	→	ubert has joined #haskell
2021-09-27 01:01:08	→	justsomeguy has joined #haskell
2021-09-27 01:03:28	←	nfd has quit (Ping timeout: 252 seconds)
2021-09-27 01:09:11	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-27 01:11:43	→	tromp has joined #haskell
2021-09-27 01:16:58	→	acidjnk_new has joined #haskell
2021-09-27 01:27:56	←	hendursaga has quit (Remote host closed the connection)
2021-09-27 01:28:22	→	hendursaga has joined #haskell
2021-09-27 01:33:21	→	hexfive has joined #haskell
2021-09-27 01:36:58	ℹ	irc: disconnected from server
2021-09-28 14:38:04	→	oxide has joined #haskell
2021-09-28 14:38:04	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-28 14:38:04	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-28 14:38:04	ℹ	Channel #haskell: 702 nicks (1 op, 0 voices, 701 normals)
2021-09-28 14:38:05	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-28 14:39:11	←	xff0x has quit (Ping timeout: 245 seconds)
2021-09-28 14:39:58	→	xff0x has joined #haskell
2021-09-28 14:40:41	kuribas	My basic idea is not to make something super generic, but rather give a lot of tools (parsers for parameters, etc..), so you can just roll your own solution that fits your API.
2021-09-28 14:53:02	←	amk has quit (Remote host closed the connection)
2021-09-28 14:53:09	→	yauhsien has joined #haskell
2021-09-28 14:53:12	→	amk has joined #haskell
2021-09-28 14:56:13	→	chomwitt has joined #haskell
2021-09-28 14:56:39	carbolymer	are call stacks somehow extractable from exceptions? I have a few functions with `HasCallStack` calling each other, in `catch` I'm calling `GHC.Stack.whoCreated` on exception, and I'm not getting anything
2021-09-28 14:57:14	kuribas	carbolymer: did you compile with profiling option?
2021-09-28 14:57:27	carbolymer	kuribas: HasCallStack does not require -prof
2021-09-28 14:57:31	←	yauhsien has quit (Ping timeout: 245 seconds)
2021-09-28 14:58:43	carbolymer	ah, but whoCreated requires...
2021-09-28 14:59:12	carbolymer	so I need to attach callStack to exceptions at the throw site manually, right?
2021-09-28 15:00:07	kuribas	AFAIK you have to add the constraint.
2021-09-28 15:00:11	kuribas	HasCallStack
2021-09-28 15:00:25	carbolymer	yes, but how can you extract call stack from exception?
2021-09-28 15:00:45	→	dunj3 has joined #haskell
2021-09-28 15:00:48	dminuoso	% :t callStack
2021-09-28 15:00:49	yahb	dminuoso: ; <interactive>:1:1: error: Variable not in scope: callStack
2021-09-28 15:00:56	dminuoso	% import GHC.Stack.HasCallStack
2021-09-28 15:00:56	yahb	dminuoso: ; <no location info>: error:; Could not find module `GHC.Stack.HasCallStack'; It is not a module in the current program, or in any known package.
2021-09-28 15:00:59	dminuoso	Oh well.
2021-09-28 15:01:02	dminuoso	carbolymer: Use callStack.
2021-09-28 15:01:12	dminuoso	https://hackage.haskell.org/package/base-4.15.0.0/docs/GHC-Stack.html#v:callStack
2021-09-28 15:01:34	carbolymer	dminuoso: but callStack returns call stack at the invocation place, I need the call stack from throwIO / throwM was used
2021-09-28 15:06:33	→	raehik has joined #haskell
2021-09-28 15:08:31	carbolymer	hmm that could work with ImplicitParams magic...
2021-09-28 15:10:24	carbolymer	can I use Implicit params with constructors? like:
2021-09-28 15:10:24	carbolymer	data SubAException = (?stacktrace :: CallStack) => SubAException { stacktrace :: !CallStack }
2021-09-28 15:10:55	carbolymer	but the problem is that SubAException is `CallStack -> SubAException`
2021-09-28 15:11:15	carbolymer	I guess I need a helper function to do that, don't I?
2021-09-28 15:12:11	carbolymer	https://hackage.haskell.org/package/base-4.15.0.0/docs/src/GHC-Err.html#error
2021-09-28 15:12:18	carbolymer	I think the answer is yes
2021-09-28 15:12:38	Franciman	I remember there was an haskell-numeric channel for numeric calculus in haskell
2021-09-28 15:12:51	Franciman	but i don't recall the name of the channel, any help?
2021-09-28 15:15:08	carbolymer	Franciman: #numerical-haskell
2021-09-28 15:15:09	carbolymer	?
2021-09-28 15:15:11	carbolymer	try /list
2021-09-28 15:16:03	→	mestre has joined #haskell
2021-09-28 15:16:15	Franciman	thanks carbolymer 
2021-09-28 15:25:42	→	max22- has joined #haskell
2021-09-28 15:32:09	→	benin036932301 has joined #haskell
2021-09-28 15:35:47	carbolymer	that does not look bad: https://bpa.st/A6LQ - now I need to figure out if I can combine `throwM` with `withStack`
2021-09-28 15:37:52	→	eggplantade has joined #haskell
2021-09-28 15:42:06	←	eggplantade has quit (Ping timeout: 245 seconds)
2021-09-28 15:43:25	←	fef has quit (Remote host closed the connection)
2021-09-28 15:45:09	←	dunj3 has quit (Quit: Leaving)
2021-09-28 15:45:26	←	Gurkenglas has quit (Ping timeout: 245 seconds)
2021-09-28 15:45:30	→	dunj3 has joined #haskell
2021-09-28 15:49:08	→	ubert1 has joined #haskell
2021-09-28 15:49:57	←	ubert has quit (Ping timeout: 252 seconds)
2021-09-28 15:49:57	ℹ	ubert1 is now known as ubert
2021-09-28 15:58:20	→	fef has joined #haskell
2021-09-28 16:01:08	←	fef has quit (Remote host closed the connection)
2021-09-28 16:02:31	→	gehmehgeh has joined #haskell
2021-09-28 16:15:20	←	jakalx has left #haskell
2021-09-28 16:15:22	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-28 16:15:36	→	fef has joined #haskell
2021-09-28 16:16:29	→	jakalx has joined #haskell
2021-09-28 16:16:42	→	merijn has joined #haskell
2021-09-28 16:21:50	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-28 16:22:16	→	merijn has joined #haskell
2021-09-28 16:30:00	ℹ	irc: disconnected from server
2021-09-28 16:30:19	→	oxide has joined #haskell
2021-09-28 16:30:19	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-28 16:30:19	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-28 16:30:19	ℹ	Channel #haskell: 708 nicks (1 op, 0 voices, 707 normals)
2021-09-28 16:30:20	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-28 16:30:48	→	alx741 has joined #haskell
2021-09-28 16:33:31	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-28 16:34:01	→	merijn has joined #haskell
2021-09-28 16:39:11	←	merijn has quit (Ping timeout: 245 seconds)
2021-09-28 16:40:09	→	merijn has joined #haskell
2021-09-28 16:43:46	→	enoq has joined #haskell
2021-09-28 16:45:30	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-28 16:46:00	→	merijn has joined #haskell
2021-09-28 16:50:01	←	azeem has quit (Read error: Connection reset by peer)
2021-09-28 16:50:16	→	azeem has joined #haskell
2021-09-28 16:51:07	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-28 16:51:50	→	merijn has joined #haskell
2021-09-28 16:54:55	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-28 16:57:15	←	fef has quit (Remote host closed the connection)
2021-09-28 17:07:51	→	eggplantade has joined #haskell
2021-09-28 17:10:36	←	xsperry has quit (Changing host)
2021-09-28 17:10:36	→	xsperry has joined #haskell
2021-09-28 17:12:06	←	eggplantade has quit (Ping timeout: 245 seconds)
2021-09-28 17:16:46	→	Heisen has joined #haskell
2021-09-28 17:18:16	→	xiongxin has joined #haskell
2021-09-28 17:18:37	Heisen	How come we return "again" and not the "My Shangri-La" in getX? https://paste.tomsmeding.com/ecU7GGtn
2021-09-28 17:21:47	dminuoso	Heisen: `return` is misleadingly named
2021-09-28 17:22:24	dminuoso	`return` does not short circuit some block of imperative code, instead it creates a "pure action that immediately returns the right hand side as its result"
2021-09-28 17:22:45	dminuoso	So for IO, `pure 1 :: IO Int` is a (pure) IO action that, as the result of its execution, would yield 1 instantly .
2021-09-28 17:22:51	dminuoso	Note that `pure == return`.
2021-09-28 17:22:56	←	peterhil has quit (Quit: Must not waste too much time here...)
2021-09-28 17:23:11	dminuoso	I tend to prefer `pure` over `return` simply because its better named. :)
2021-09-28 17:24:38	dminuoso	This is better observed if, instead of do-notation, we use explicit (>>=)
2021-09-28 17:25:24	dminuoso	Consider: getLine >>= (\str -> pure (str ++ "!"))
2021-09-28 17:26:26	←	mestre has quit (Quit: Lost terminal)
2021-09-28 17:29:22	←	jlamothe has quit (Quit: leaving)
2021-09-28 17:30:03	←	max22- has quit (Ping timeout: 240 seconds)
2021-09-28 17:33:20	xsperry	> do return 10; return 20 :: Maybe Int
2021-09-28 17:33:22	lambdabot	 Just 20
2021-09-28 17:33:57	←	[itchyjunk] has quit (Remote host closed the connection)
2021-09-28 17:34:02	Heisen	dminuoso We are returning "again" since the value of a sequence of IO actions is the same as the value of the last action in the sequence and what Return is doing is turning the String into an action? Is that correct?
2021-09-28 17:34:18	→	jespada has joined #haskell
2021-09-28 17:35:24	Heisen	If return isn't turning "again" into an action how can we do x <- getX, in particular <-, since that operator requires an IO of something right?
2021-09-28 17:37:02	xsperry	`return "foo"' just creates a NOP action that will, when run, produce "foo". it doesn't stop the execution of the rest of the do block
2021-09-28 17:40:04	←	hyiltiz has quit (Ping timeout: 252 seconds)
2021-09-28 17:41:10	→	hyiltiz has joined #haskell
2021-09-28 17:42:01	→	fef has joined #haskell
2021-09-28 17:45:18	←	Heisen has quit (Quit: Client closed)
2021-09-28 17:45:47	→	acidjnk_new has joined #haskell
2021-09-28 17:46:13	→	geranim0 has joined #haskell
2021-09-28 17:47:59	←	geranim0 has quit (Remote host closed the connection)
2021-09-28 17:48:19	←	hyiltiz has quit (Ping timeout: 252 seconds)
2021-09-28 17:49:03	→	slowButPresent has joined #haskell
2021-09-28 17:49:21	←	acidjnk has quit (Ping timeout: 252 seconds)
2021-09-28 17:49:51	←	bitdex has quit (Quit: = "")
2021-09-28 17:50:17	tdammers	it may be helpful to reason about `return` in terms of a different type, like Maybe, Either a, or []
2021-09-28 17:50:28	tdammers	> return 10 :: [Int]
2021-09-28 17:50:29	Cale	I think of it not as being that return is misleadingly named so much as that it just doesn't refer to the same thing as you might be familiar with from imperative languages. The action (return v) is an action which does nothing except to, well, return v
2021-09-28 17:50:30	lambdabot	 [10]
2021-09-28 17:51:22	Cale	In most imperative languages, it doesn't behave quite like any other procedure call you could put there -- it has a control effect that you couldn't otherwise obtain.
2021-09-28 17:52:43	→	lstor has joined #haskell
2021-09-28 17:52:54	Cale	But in Haskell, it's not magic, just a way of making a simple action that returns a given value when executed.
2021-09-28 17:54:28	→	geranim0 has joined #haskell
2021-09-28 17:54:50	→	jlamothe has joined #haskell
2021-09-28 17:55:32	→	Robin_Jadoul has joined #haskell
2021-09-28 17:56:01	→	kenran has joined #haskell
2021-09-28 17:56:31	→	brsvh has joined #haskell
2021-09-28 17:57:11	→	lbseale has joined #haskell
2021-09-28 17:58:44	Cale	(To put it another way, return v returns v from itself, not from the surrounding procedure definition or whatever.
2021-09-28 17:58:45	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-28 17:58:47	Cale	)
2021-09-28 17:58:53	→	MQ-17J has joined #haskell
2021-09-28 17:59:09	→	Psybur has joined #haskell
2021-09-28 18:00:06	→	machinedgod has joined #haskell
2021-09-28 18:04:06	→	lavaman has joined #haskell
2021-09-28 18:04:44	→	jumper149 has joined #haskell
2021-09-28 18:06:05	→	pbrisbin has joined #haskell
2021-09-28 18:08:31	→	hyiltiz has joined #haskell
2021-09-28 18:09:46	←	lavaman has quit (Ping timeout: 252 seconds)
2021-09-28 18:12:55	→	CiaoSen has joined #haskell
2021-09-28 18:15:36	←	fef has quit (Remote host closed the connection)
2021-09-28 18:15:42	→	tromp has joined #haskell
2021-09-28 18:16:01	→	fef has joined #haskell
2021-09-28 18:16:02	←	Robin_Jadoul has quit (Remote host closed the connection)
2021-09-28 18:17:27	→	desantra has joined #haskell
2021-09-28 18:19:10	←	geranim0 has quit (Remote host closed the connection)
2021-09-28 18:20:06	←	dschrempf has quit (Quit: WeeChat 3.3)
2021-09-28 18:20:20	→	eggplantade has joined #haskell
2021-09-28 18:24:36	←	kenran has quit (Quit: WeeChat info:version)
2021-09-28 18:24:37	←	eggplantade has quit (Ping timeout: 245 seconds)
2021-09-28 18:28:57	→	Robin_Jadoul has joined #haskell
2021-09-28 18:30:10	←	desantra has quit (Quit: WeeChat 3.3)
2021-09-28 18:30:47	→	zer0bitz has joined #haskell
2021-09-28 18:36:08	←	neurocyte0132 has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-28 18:38:47	ldlework	I just think of `return` as `pure` which i think of as `box` 
2021-09-28 18:39:12	merijn	I just don't think \o/
2021-09-28 18:39:32	ldlework	be the haskell
2021-09-28 18:39:53	merijn	I didn't switch to a strongly typed language because I wanna think about the stuff I write!
2021-09-28 18:40:02	ldlework	hah
2021-09-28 18:40:39	shapr	it is easier to write Haskell than other languages when really tired
2021-09-28 18:42:28	merijn	Haskell best-in-slot language for coding drunk :p
2021-09-28 18:43:29	→	Guest20 has joined #haskell
2021-09-28 18:44:22	←	brsvh has quit (Quit: Client closed)
2021-09-28 18:45:14	←	Guest20 has quit (Client Quit)
2021-09-28 18:48:48	→	max22- has joined #haskell
2021-09-28 18:51:26	→	vpan has joined #haskell
2021-09-28 18:57:18	→	chris has joined #haskell
2021-09-28 18:57:22	ℹ	chris is now known as Guest6083
2021-09-28 18:58:55	←	Guest6083 has quit (Remote host closed the connection)
2021-09-28 18:59:06	→	chris has joined #haskell
2021-09-28 18:59:10	ℹ	chris is now known as Guest6000
2021-09-28 18:59:13	←	Guest6000 has quit (Remote host closed the connection)
2021-09-28 19:00:43	→	chris has joined #haskell
2021-09-28 19:00:47	ℹ	chris is now known as Guest4408
2021-09-28 19:08:45	←	lbseale has quit (Ping timeout: 265 seconds)
2021-09-28 19:10:32	maerwald	merijn: I disagree
2021-09-28 19:10:40	maerwald	Java is the best language for drunken coding
2021-09-28 19:10:45	maerwald	in fact, I can only code java when drunk
2021-09-28 19:11:02	maerwald	for Haskell, I need to be awake
2021-09-28 19:11:58	→	shriekingnoise has joined #haskell
2021-09-28 19:12:05	merijn	If that was true I'd never have finished my thesis >.>
2021-09-28 19:12:11	maerwald	lol
2021-09-28 19:12:14	maerwald	did you?
2021-09-28 19:12:15	→	Morrow has joined #haskell
2021-09-28 19:12:18	←	azeem has quit (Read error: Connection reset by peer)
2021-09-28 19:13:25	merijn	maerwald: That's the kinda talk that gets men stabbed ;)
2021-09-28 19:14:20	merijn	2 chapters worth of comments left this week, although most of them so far are "slightly reword a sentence" and "fuck that, too much work, just gonna mark that as addressed and assume they won't notice on a 2nd read" :p
2021-09-28 19:14:24	→	azeem has joined #haskell
2021-09-28 19:14:32	←	CiaoSen has quit (Ping timeout: 252 seconds)
2021-09-28 19:17:35	maerwald	I have an Auchentoshan 3-wood left here. That would get you through half of the week, I guess.
2021-09-28 19:19:43	merijn	maerwald: The only good Auchentoshan :)
2021-09-28 19:19:54	merijn	I really like the Three Wood
2021-09-28 19:20:05	merijn	Not so easy to get here anymore, though
2021-09-28 19:20:33	merijn	maerwald: At this point the writing is more of an "Ardbeg Corryvreckan"-thing, then a Three Wood :p
2021-09-28 19:29:54	→	eggplantade has joined #haskell
2021-09-28 19:31:37	→	fvr has joined #haskell
2021-09-28 19:34:13	→	wroathe has joined #haskell
2021-09-28 19:34:14	←	wroathe has quit (Changing host)
2021-09-28 19:34:14	→	wroathe has joined #haskell
2021-09-28 19:34:31	←	eggplantade has quit (Ping timeout: 265 seconds)
2021-09-28 19:38:18	→	azimut_ has joined #haskell
2021-09-28 19:40:34	janus	can i make an instance that quantifies over type parameters supplied via DataKinds?
2021-09-28 19:41:05	janus	i have 'instance ToJSON (Foobar a) where' but the instance is not getting picked up on 9.0.1, on 8.6.5 it works fine
2021-09-28 19:41:08	←	azimut has quit (Ping timeout: 276 seconds)
2021-09-28 19:41:54	janus	so i was thinking it must be related to GHC prop 0055-instance-foralls which mentions some things that landed in 8.8.
2021-09-28 19:42:17	janus	it says that TypeInType makes it such that it is not possible to infer kinds of type variables
2021-09-28 19:42:44	janus	ok, so i tried changing the instance to 'instance forall (a :: Type). ToJSON (Foobar a) where' but that doesn't seem to work
2021-09-28 19:44:04	lortabac	janus: what do you mean by "type parameters supplied via DataKinds"?
2021-09-28 19:46:21	janus	lortabac: well i have "type MasterFoobar = Foobar 'Master" and "type HouseFoobar = Foobar 'House". they come from "data Designator = Master | House"
2021-09-28 19:46:45	→	yinghua has joined #haskell
2021-09-28 19:46:47	janus	so Foobar is supposed parameterized with values of the Designator type
2021-09-28 19:46:58	lortabac	janus: then your signature is not correct
2021-09-28 19:47:14	janus	aaah right cause that wouldn't be a type, ok, hmm
2021-09-28 19:47:15	lortabac	forall (a :: Type) means that 'a' is a type
2021-09-28 19:47:55	←	Guest4408 has quit (Remote host closed the connection)
2021-09-28 19:47:59	janus	right , ok, i have modelled the 'typical' case instead of the fancy ass case i have where values flow into the type system with datakinds
2021-09-28 19:49:27	lortabac	if you replace Type with Designator there is no reason it shouldn't work
2021-09-28 19:50:07	janus	i did replace it as you suggest. it doesn't seem to work, though. i get "No instance arising for (ToJSON (Foobar 'Master))" ... hmmm
2021-09-28 19:50:20	←	acidjnk_new has quit (Ping timeout: 252 seconds)
2021-09-28 19:50:34	janus	i could work around it and just make a function that works for both, and then make the two instances manually... surely that should work
2021-09-28 19:51:13	lortabac	there must be some other problem
2021-09-28 19:51:30	janus	yeah i'll try to make a minimal reproducible example :)
2021-09-28 19:52:23	lortabac	using other kinds than Type is certainly possible, if GHC 9 stops supporting it half of Hackage would break :D
2021-09-28 19:53:20	→	choucavalier has joined #haskell
2021-09-28 19:56:43	←	choucavalier has quit (Changing host)
2021-09-28 19:56:44	→	choucavalier has joined #haskell
2021-09-28 19:58:31	←	spruit11 has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-09-28 20:01:54	→	ec has joined #haskell
2021-09-28 20:04:56	→	geekosaur has joined #haskell
2021-09-28 20:07:32	→	chris has joined #haskell
2021-09-28 20:07:36	ℹ	chris is now known as Guest8402
2021-09-28 20:19:14	→	hnOsmium0001 has joined #haskell
2021-09-28 20:22:13	→	Sgeo has joined #haskell
2021-09-28 20:23:54	←	ubert has quit (Ping timeout: 252 seconds)
2021-09-28 20:24:19	←	Guest8402 has quit (Remote host closed the connection)
2021-09-28 20:25:20	←	ec has quit (Ping timeout: 276 seconds)
2021-09-28 20:27:22	→	chris has joined #haskell
2021-09-28 20:27:25	ℹ	chris is now known as Guest9854
2021-09-28 20:27:37	←	Guest9854 has quit (Remote host closed the connection)
2021-09-28 20:29:15	→	Null_A has joined #haskell
2021-09-28 20:31:33	←	wroathe has quit (Ping timeout: 265 seconds)
2021-09-28 20:32:32	→	Guest5827 has joined #haskell
2021-09-28 20:33:46	←	merijn has quit (Ping timeout: 245 seconds)
2021-09-28 20:35:44	←	troydm1 has quit (Quit: What is Hope? That all of your wishes and all of your dreams come true? To turn back time because things were not supposed to happen like that (C) Rau Le Creuset)
2021-09-28 20:36:56	←	Guest5827 has quit (Ping timeout: 250 seconds)
2021-09-28 20:39:23	→	ozzymcduff has joined #haskell
2021-09-28 20:48:47	→	wroathe has joined #haskell
2021-09-28 20:48:47	←	wroathe has quit (Changing host)
2021-09-28 20:48:47	→	wroathe has joined #haskell
2021-09-28 20:49:59	→	vysn has joined #haskell
2021-09-28 20:50:02	→	Tuplanolla has joined #haskell
2021-09-28 20:50:50	←	notzmv has quit (Ping timeout: 252 seconds)
2021-09-28 20:51:38	→	eggplantade has joined #haskell
2021-09-28 20:53:24	←	wroathe has quit (Ping timeout: 250 seconds)
2021-09-28 20:54:59	←	lortabac has quit (Quit: WeeChat 2.8)
2021-09-28 20:55:52	→	troydm has joined #haskell
2021-09-28 20:58:31	→	wroathe has joined #haskell
2021-09-28 20:58:31	←	wroathe has quit (Changing host)
2021-09-28 20:58:31	→	wroathe has joined #haskell
2021-09-28 20:59:29	ℹ	yin[m] is now known as zwro[m]
2021-09-28 21:01:37	→	yauhsien has joined #haskell
2021-09-28 21:02:24	←	theproffesor has left #haskell (Leaving)
2021-09-28 21:03:25	→	[itchyjunk] has joined #haskell
2021-09-28 21:03:28	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-28 21:04:01	→	merijn has joined #haskell
2021-09-28 21:05:33	→	werneta has joined #haskell
2021-09-28 21:06:05	←	eggplantade has quit (Remote host closed the connection)
2021-09-28 21:09:00	←	Null_A has quit (Remote host closed the connection)
2021-09-28 21:09:01	←	merijn has quit (Ping timeout: 264 seconds)
2021-09-28 21:12:45	→	mjrosenb has joined #haskell
2021-09-28 21:14:31	←	yauhsien has quit (Remote host closed the connection)
2021-09-28 21:15:04	←	wroathe has quit (Ping timeout: 250 seconds)
2021-09-28 21:15:55	→	yauhsien has joined #haskell
2021-09-28 21:15:59	→	eggplantade has joined #haskell
2021-09-28 21:17:10	←	eggplantade has quit (Remote host closed the connection)
2021-09-28 21:17:25	→	eggplantade has joined #haskell
2021-09-28 21:18:18	→	ec has joined #haskell
2021-09-28 21:18:30	→	tzh has joined #haskell
2021-09-28 21:19:37	←	xiongxin has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-09-28 21:24:10	→	Guest47 has joined #haskell
2021-09-28 21:26:33	Guest47	Given that Haskell makes quite a big use of recursion (correct me if I'm wrong), does GHC have any special optimizations against redundant calculations?
2021-09-28 21:26:43	→	ysavd^ has joined #haskell
2021-09-28 21:26:50	→	tromp has joined #haskell
2021-09-28 21:27:05	→	lbseale has joined #haskell
2021-09-28 21:27:42	←	justache has quit (Read error: Connection reset by peer)
2021-09-28 21:28:33	→	justache has joined #haskell
2021-09-28 21:29:17	c_wraith	I'm not seeing a connection between the premise (which is true) and the question
2021-09-28 21:29:35	←	[itchyjunk] has quit (Remote host closed the connection)
2021-09-28 21:30:07	←	RohitGoswami[m] has quit (Quit: You have been kicked for being idle)
2021-09-28 21:30:40	→	notzmv has joined #haskell
2021-09-28 21:30:52	Guest47	well as I see it, the premise is a good motivation to have opt-in memoization for example
2021-09-28 21:30:55	c_wraith	as for the question itself - GHC will do common subexpression elimination in limited circumstances, and it will do a transform called "full laziness" in slightly less limited circumstances. Both are quite likely to destroy performance when it guesses wrong.
2021-09-28 21:31:07	Franciman	Guest47: haskell uses call by need
2021-09-28 21:31:24	→	wroathe has joined #haskell
2021-09-28 21:31:25	←	wroathe has quit (Changing host)
2021-09-28 21:31:25	→	wroathe has joined #haskell
2021-09-28 21:31:26	c_wraith	memoization is not a performance improvement in general
2021-09-28 21:31:39	←	geekosaur has quit (Remote host closed the connection)
2021-09-28 21:31:51	→	econo has joined #haskell
2021-09-28 21:32:13	Guest47	c_wraith: could you please elaborate on that since I just left my lecture haha
2021-09-28 21:32:45	c_wraith	memoization only helps if the cost of storing and looking up results is cheaper than the cost of calculating them.
2021-09-28 21:32:50	c_wraith	That's very often not true.
2021-09-28 21:33:38	→	geekosaur has joined #haskell
2021-09-28 21:33:45	Guest47	like if you're doing IO over a network? Or does it take much less than that?
2021-09-28 21:34:01	c_wraith	It's not even *valid* to memoize IO in general
2021-09-28 21:34:23	c_wraith	the whole point of IO is that things can change.
2021-09-28 21:34:32	→	Lycurgus has joined #haskell
2021-09-28 21:35:03	c_wraith	your ntp client really should memoize server responses!
2021-09-28 21:35:09	tdammers	the way Haskell is evaluated means that typical recursions can be evaluated in constant space. depending on how you look at it, this can be interpreted as "Haskell does automatic TCO", or "Haskell doesn't need TCO"
2021-09-28 21:35:10	c_wraith	err.  +not
2021-09-28 21:35:10	Guest47	yes how very silly of me
2021-09-28 21:35:39	←	wroathe has quit (Ping timeout: 246 seconds)
2021-09-28 21:36:06	c_wraith	but, like..  even common subexpression elimination can be really bad for performance in haskell
2021-09-28 21:36:40	Guest47	I don't really see how you can do subexpression elimination in recursive calls
2021-09-28 21:36:54	c_wraith	as an example:  (sum [1..10000000000] + product [1..10000000000]) should not introduce sharing of the [1..10000000000] value
2021-09-28 21:37:13	c_wraith	It's a very long list.
2021-09-28 21:37:20	c_wraith	if it's shared, it's kept in memory
2021-09-28 21:37:23	mjrosenb	the CSE is separate from any form of recursion.
2021-09-28 21:37:29	c_wraith	and that adds quite a bit of drag on the garbage collector
2021-09-28 21:37:41	c_wraith	If it's not shared, it's streamed twice.
2021-09-28 21:37:50	c_wraith	And that's a lot more efficient
2021-09-28 21:37:59	Guest47	excuse me, what does streaming mean?
2021-09-28 21:38:02	←	azeem has quit (Ping timeout: 250 seconds)
2021-09-28 21:38:11	mjrosenb	c_wraith: the compiler could theoretically share it, and interleave the sum and product calculations
2021-09-28 21:38:17	mjrosenb	but that sounds like a lot of work
2021-09-28 21:38:20	Guest47	keeping only the required value in memory at any give time?
2021-09-28 21:38:29	c_wraith	it means that all that's ever in memory is the head of the list and a thunk to generate the rest of the list
2021-09-28 21:38:35	→	azeem has joined #haskell
2021-09-28 21:39:14	Guest47	so we're assuming something like: `sum x:xs = x + sum xs`?
2021-09-28 21:39:40	c_wraith	I was just assuming Prelude.sum
2021-09-28 21:40:25	c_wraith	which is really Data.Foldable.sum now, I suppose.
2021-09-28 21:41:59	c_wraith	But `sum [] = 0; sum (x:xs) = x + sum xs` is a good example of why memoization can be a huge performance loss.
2021-09-28 21:42:25	c_wraith	a memo table for that function would take lists as input
2021-09-28 21:42:37	←	Robin_Jadoul has quit (Ping timeout: 252 seconds)
2021-09-28 21:43:19	c_wraith	Just checking to see if a list is currently in the memo table would probably be slower than computing its sum
2021-09-28 21:44:17	c_wraith	Not to mention the incredible amount of memory it could end up using.
2021-09-28 21:44:19	Guest47	you would need to make sure that all the list's elements are in the memoization table I suppose
2021-09-28 21:44:48	←	enoq has quit (Quit: enoq)
2021-09-28 21:46:00	c_wraith	Memoization tends to only be a significant win if the problem structure is multiply-recursive
2021-09-28 21:46:13	c_wraith	And each recursive call needs to do overlapping work
2021-09-28 21:46:24	→	benin0369323019 has joined #haskell
2021-09-28 21:46:47	c_wraith	It's the latter part that's non-trivial to detect statically.
2021-09-28 21:46:58	c_wraith	It's also not really that common
2021-09-28 21:47:11	davean	Its trivial to detect *statistically* its difficult to detect algrithmicly
2021-09-28 21:47:12	c_wraith	So it's just left to the programmer to memoize when it does help
2021-09-28 21:47:31	davean	we have a serious lack of statistics driven optimization though
2021-09-28 21:47:35	Hecate	we do
2021-09-28 21:47:55	Guest47	Aha yes, my professor gave examples with factorial and Fibonacci so I got my hopes up
2021-09-28 21:48:17	c_wraith	factorial doesn't even memoize that well.
2021-09-28 21:48:40	←	benin036932301 has quit (Ping timeout: 252 seconds)
2021-09-28 21:48:40	ℹ	benin0369323019 is now known as benin036932301
2021-09-28 21:48:43	c_wraith	fibonacci, on the other hand, is a perfect example of multiply-recursive and overlapping.
2021-09-28 21:48:58	c_wraith	It's so perfect, though, that you only ever need two elements in the table. :)
2021-09-28 21:48:58	Guest47	yes it does 2^(n/2) additions
2021-09-28 21:49:02	mjrosenb	as it turns out, most problems don't share many properties with naieve implementations of fibonacci.
2021-09-28 21:49:05	Guest47	instead of n
2021-09-28 21:49:25	c_wraith	Fibonacci(n) does Fibonacci(n)-1 additions.
2021-09-28 21:49:26	mjrosenb	it does fib(n) additions
2021-09-28 21:49:38	→	waleee has joined #haskell
2021-09-28 21:49:58	Franciman	2*fib(n) - 1 recursions
2021-09-28 21:50:13	→	earthflax has joined #haskell
2021-09-28 21:50:49	←	werneta has quit (Ping timeout: 265 seconds)
2021-09-28 21:51:14	c_wraith	common memoization problems are things like "longest common subsequence"
2021-09-28 21:51:39	mjrosenb	c_wraith: if you're hand-unrolling it, you'll probably want more elements in the table :-)
2021-09-28 21:51:51	←	hgolden has quit (Remote host closed the connection)
2021-09-28 21:52:39	←	earthflax has quit (Client Quit)
2021-09-28 21:52:55	c_wraith	nah, 2 does the job when you work bottom-up.  Of course that's not really efficient either, but the really efficient solutions involve *math*
2021-09-28 21:53:38	→	hgolden has joined #haskell
2021-09-28 21:54:22	Guest47	the formula with the golden ratio?
2021-09-28 21:54:35	mjrosenb	right.  At least when I tried to do that, I needed memoization on random subsets of the fibonacci sequence
2021-09-28 21:54:37	davean	Generally if memoization is actually good, its part of the specification of the alg.
2021-09-28 21:54:59	c_wraith	Sort of.  If you use the golden ratio formula naively, you exceed the precision of floating-point pretty fast.
2021-09-28 21:55:01	Guest47	specification of the alg?
2021-09-28 21:55:09	mjrosenb	Guest47: that's fine if you have a fast infinite precision library.
2021-09-28 21:55:29	c_wraith	You need to do a change of base so you can use that formula with integers only
2021-09-28 21:55:32	geekosaur	algorithm
2021-09-28 21:55:37	c_wraith	and that's real math
2021-09-28 21:56:07	→	earthflax has joined #haskell
2021-09-28 21:56:07	Guest47	geekosaur: yes but spec of what algorithm?
2021-09-28 21:56:09	davean	Bah, if theres a concievable way to apply it to an actual problem, its applied math, not real math :(
2021-09-28 21:56:20	davean	Guest47: what ever one you're implimenting
2021-09-28 21:56:21	geekosaur	whichever one you're using memoization with
2021-09-28 21:57:07	mjrosenb	fib n = fib (n-1) + fib (n-2) => fib n = 2*fib(n-2) + fib(n-3) => fib n = 3*fib(n-3)+2*fib(n-4) =>...=> fib n = fib m * fib (n-m) + fib (m-1) * fib (n-m-1)
2021-09-28 21:57:10	Guest47	oh sorry I misread the original comment
2021-09-28 21:57:10	mjrosenb	or some such
2021-09-28 21:57:14	→	Robin_Jadoul has joined #haskell
2021-09-28 21:57:30	geekosaur	(this is not circular, the point is that memoization is best used in specific circumstances and those circumstances will usually specify memoization directly)
2021-09-28 21:58:05	davean	And the speciication of the memoization is critical - theres generally only 1 good way to memoize something
2021-09-28 22:00:13	←	hyiltiz has quit (Ping timeout: 252 seconds)
2021-09-28 22:01:27	→	hyiltiz has joined #haskell
2021-09-28 22:03:19	←	eggplantade has quit (Remote host closed the connection)
2021-09-28 22:04:01	→	ubert has joined #haskell
2021-09-28 22:04:07	→	Brumaire has joined #haskell
2021-09-28 22:05:36	→	eggplantade has joined #haskell
2021-09-28 22:07:47	→	geranim0 has joined #haskell
2021-09-28 22:09:21	→	benin0369323011 has joined #haskell
2021-09-28 22:11:36	←	benin036932301 has quit (Ping timeout: 265 seconds)
2021-09-28 22:11:36	ℹ	benin0369323011 is now known as benin036932301
2021-09-28 22:11:45	monochrom	Ugh I missed all the fun discussions!
2021-09-28 22:12:00	→	roboguy has joined #haskell
2021-09-28 22:12:16	Guest47	I struggle to understand what people mean when they say "Applicatives allow function application within a computational context"
2021-09-28 22:12:24	Guest47	what is a computational context?
2021-09-28 22:13:08	monochrom	Well yeah generally those "intuitive" wordings are people "explaining" to themselves after they have understood.
2021-09-28 22:13:23	Guest47	I understand that my function, its input and output are all wrapped in a type called f but what does that mean?
2021-09-28 22:13:23	monochrom	I.e., not before, not useful for those who haven't understood.
2021-09-28 22:13:37	zwro[m]	we can, however, abstract memorization patterns
2021-09-28 22:13:51	shapr	memoize memoization patterns?
2021-09-28 22:13:54	monochrom	Generally most blogs are like that. Making the authors feel so good about themselves.
2021-09-28 22:13:56	zwro[m]	s/memorization/memoization/
2021-09-28 22:14:11	maerwald	anyone has a template for creating blog with hakyll or whatever on github pages?
2021-09-28 22:14:31	→	zebrag has joined #haskell
2021-09-28 22:14:45	monochrom	Even the much revered dons wrote a sh*tty analogy on his blog.
2021-09-28 22:15:14	→	segfaultfizzbuzz has joined #haskell
2021-09-28 22:15:19	Guest47	I wrote some garbage on my blog too :^)
2021-09-28 22:15:26	Guest47	https://www.fuzzypixelz.com/2021/05/01/The-M-Word
2021-09-28 22:15:31	Guest47	(shameless plug)
2021-09-28 22:15:46	monochrom	The first monad analogy, and still the worst ever, second to none.
2021-09-28 22:15:51	shapr	maerwald: I copied mine from someone else, but I forget where: https://github.com/shapr/shapr.github.io/tree/develop
2021-09-28 22:16:22	Guest47	I recall people here telling me that starting with the monad laws was a bad idea
2021-09-28 22:17:02	monochrom	You should also recall people telling you that starting with blogger wordings is also a bad idea, and worse than the laws.
2021-09-28 22:17:21	shapr	I say do what you think is a good idea, and pay attention to any feedback you get
2021-09-28 22:17:25	monochrom	I say that starting with instances is the best.
2021-09-28 22:17:35	shapr	everything is imperfect, try to improve over time
2021-09-28 22:18:01	maerwald	shapr: you push to master manually?
2021-09-28 22:18:42	monochrom	And perhaps also with use cases, if you are one of those "practically minded" people who use "I don't understand" to mean "actually I understand, I am just not convinced it's useful".
2021-09-28 22:19:26	c_wraith	I started by spending a while understanding how to use IO. after I got that, I decided to learn how to use parsec. it was at that point I had my first understanding of what "monad" meant. it meant "things that work like those". it took quite a while longer to understand how to associate the definition and laws with "work like those"
2021-09-28 22:19:32	monochrom	Right? People use "I don't understand" to mean all sorts of things that have nothing to do with understanding.
2021-09-28 22:19:44	Guest47	well if you're not convinced it's useful, when it's clearly is, then you don't understand anything
2021-09-28 22:19:45	monochrom	Feynman pointed out another one. "I don't like it".
2021-09-28 22:20:24	←	geranim0 has quit (Ping timeout: 264 seconds)
2021-09-28 22:20:27	←	ysavd^ has quit (Ping timeout: 246 seconds)
2021-09-28 22:20:28	monochrom	You don't draw a line between "what it is" and "why I care"?  You lump them together?
2021-09-28 22:21:01	Guest47	I am surely guilty of that
2021-09-28 22:21:01	←	alzgh has quit (Remote host closed the connection)
2021-09-28 22:21:21	→	alzgh has joined #haskell
2021-09-28 22:21:24	Guest47	And I've never thought of that before
2021-09-28 22:21:31	→	ysavd^ has joined #haskell
2021-09-28 22:21:37	monochrom	Yeah c_wraith most people (me included) report that the parser monad is when it clicks. My students too.
2021-09-28 22:21:40	alzgh	yo, #haskell
2021-09-28 22:21:48	alzgh	hope, y'all doing great today
2021-09-28 22:22:17	monochrom	And once again perhaps it just means "finally an interesting example / use case".
2021-09-28 22:22:39	Guest47	monochrom: you mean MonadParsec right?
2021-09-28 22:23:03	monochrom	No, simply any of the old "monadic parser combinators" paper.
2021-09-28 22:23:08	monochrom	papers
2021-09-28 22:23:26	monochrom	"MonadParsec" did not exist.
2021-09-28 22:23:28	Guest47	could please elaborate
2021-09-28 22:25:09	c_wraith	I was working from a pdf that was... the parsec manual, maybe?
2021-09-28 22:25:13	monochrom	The papers have already elaborated.
2021-09-28 22:25:30	c_wraith	I just stepped through examples and modified them to see what would happen.
2021-09-28 22:25:34	Guest47	the way I see it that each parser you write is a Monad and you use bind to sequence them into more complex parsers
2021-09-28 22:26:04	c_wraith	and eventually I got to an example where I went "what if I wanted to look for this in parentheses, but not return them?"
2021-09-28 22:26:29	c_wraith	and I just tried using <- to bind the value I cared about.... and it worked.
2021-09-28 22:26:39	monochrom	:)
2021-09-28 22:26:56	←	vpan has quit (Quit: Leaving.)
2021-09-28 22:27:13	monochrom	Yeah my students have those moments too. Sometimes I hinted them, sometimes they thought it up themselves.
2021-09-28 22:27:18	c_wraith	I didn't understand why, exactly. but I knew that was the moment when I had caught on to the edge of something
2021-09-28 22:28:49	←	Guest47 has quit (Quit: Client closed)
2021-09-28 22:29:46	→	Guest47 has joined #haskell
2021-09-28 22:30:08	←	ec has quit (Ping timeout: 276 seconds)
2021-09-28 22:32:51	→	werneta has joined #haskell
2021-09-28 22:33:52	→	emf_ has joined #haskell
2021-09-28 22:35:39	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-28 22:35:51	←	xff0x has quit (Ping timeout: 245 seconds)
2021-09-28 22:39:30	→	koolazer has joined #haskell
2021-09-28 22:39:38	←	alzgh has quit (Remote host closed the connection)
2021-09-28 22:39:58	→	alzgh has joined #haskell
2021-09-28 22:46:28	→	xff0x has joined #haskell
2021-09-28 22:47:13	earthflax	alzgh: you too :)
2021-09-28 22:47:56	←	earthflax has left #haskell (Good Bye)
2021-09-28 22:48:16	→	tromp has joined #haskell
2021-09-28 22:51:44	→	Gurkenglas has joined #haskell
2021-09-28 22:53:46	←	raehik has quit (Ping timeout: 245 seconds)
2021-09-28 22:54:44	→	raehik has joined #haskell
2021-09-28 22:55:10	←	vysn has quit (Ping timeout: 250 seconds)
2021-09-28 23:00:34	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-28 23:03:40	←	Cajun has quit (Quit: Client closed)
2021-09-28 23:04:13	←	_xor has quit (Read error: Connection reset by peer)
2021-09-28 23:04:34	←	martin02 has quit (Ping timeout: 252 seconds)
2021-09-28 23:04:42	→	merijn has joined #haskell
2021-09-28 23:05:09	→	asgas has joined #haskell
2021-09-28 23:05:28	asgas	I've heard functional languages like haskell are slow compared to C or C++. Is this true?
2021-09-28 23:07:05	c_wraith	no.
2021-09-28 23:07:26	sclv	haskell is a garbage collected language. you should expect the cost of gc and automatic memory management to bring about a roughly 1.5x or so slowdown in idiomatic highly optimized code compared to one with manual memory, but nonetheless haskell is extremely efficient and competitive or better, compared to any comparable high level languages.
2021-09-28 23:07:49	monochrom	I've heard OOP languages like C++ are slow compared to Fortran. It is true.
2021-09-28 23:08:00	←	MQ-17J has quit (Ping timeout: 265 seconds)
2021-09-28 23:08:09	c_wraith	everything is slow compared to fortran
2021-09-28 23:08:15	monochrom	And pointer languages like C slow compared to Fortran, too.
2021-09-28 23:08:26	c_wraith	we'd better go back and rewrite operating systems in fortran
2021-09-28 23:08:30	monochrom	or rather, pointer arithmetic languages
2021-09-28 23:08:35	←	eggplantade has quit (Remote host closed the connection)
2021-09-28 23:09:01	robbert-vdh	Just implement your program in cmm with only unboxed types :)
2021-09-28 23:09:02	→	_xor has joined #haskell
2021-09-28 23:09:05	monochrom	Oh, that one would be unfair, an OS is not meant to be superfast, but it is meant to do pointer arithmetic.
2021-09-28 23:09:14	→	eggplantade has joined #haskell
2021-09-28 23:09:24	→	wroathe has joined #haskell
2021-09-28 23:09:25	←	wroathe has quit (Changing host)
2021-09-28 23:09:25	→	wroathe has joined #haskell
2021-09-28 23:09:34	Guest47	what does Fortran replace pointer arithmetic with?
2021-09-28 23:09:41	c_wraith	arrays
2021-09-28 23:09:42	monochrom	C compilers already do the best they can under random pointer arithmetic semantics.
2021-09-28 23:10:23	free_functor	Guest47, for reference, Fortran is the game engine that Fortnight is written in. V. fast langauge. V. Powerful.
2021-09-28 23:11:03	sclv	an important tradeoff to note is that languages like haskell make parallel and concurrent computation easy, while low level languages generally make it a pain. in settings (most) where you want to achieve more performance scaling through parallel computation, high level languages with easy parallelism will be wins over low level languages
2021-09-28 23:11:09	→	MQ-17J has joined #haskell
2021-09-28 23:11:15	sclv	free_functor: lmao
2021-09-28 23:11:20	Guest47	free_functor: that's a joke ... right?
2021-09-28 23:11:49	monochrom	I respect "C is fast under the constraint that I want C features" and "C++ is fast under the constraint that I want C++ features".
2021-09-28 23:12:01	monochrom	But "C/C++ is fast, unconditionally" is a joke.
2021-09-28 23:12:14	monochrom	But then, what's the fun in being honest?
2021-09-28 23:12:24	robbert-vdh	sclv: Rust would like a word with you :) (and presumably Erlang, but I've never used that)
2021-09-28 23:12:36	robbert-vdh	*Erlang isn't low level of course, ignore that part
2021-09-28 23:12:52	sclv	erlang is also very slow, relatively speaking, becaue it is interpreted
2021-09-28 23:12:59	monochrom	"C is fast under the constraint that I want C features" now can't be used as a critique on Haskell, because GHC-generated code is fast under the contraint that I want Haskell features, too.
2021-09-28 23:13:06	awpr	"high level language with easy parallelism" sounds like a good description of Rust to me
2021-09-28 23:13:34	Franciman	haskell making concurrency easier is mostly dependent on the situation
2021-09-28 23:13:38	sclv	rust is a low level language, its just very good at being one!!!
2021-09-28 23:13:52	Franciman	because you may need mutation nevertheless
2021-09-28 23:13:56	Franciman	and then nobody saves you from hell
2021-09-28 23:14:04	Franciman	not even STM in some cases
2021-09-28 23:14:11	Franciman	where you need less optimistic behaviours
2021-09-28 23:14:28	sclv	this is not true. you at least don't have to deal with a batshit memory model where you manually consider "volatile" declarations and write barriers
2021-09-28 23:14:42	←	kuribas has quit (Quit: ERC (IRC client for Emacs 26.3))
2021-09-28 23:14:45	Franciman	again, this depends
2021-09-28 23:15:08	Franciman	MVar can get really nasty, in my experience
2021-09-28 23:15:26	Franciman	and STM rerunning the same computation over and over until there is no conflict is not what you need
2021-09-28 23:15:28	monochrom	Someone on haskell-cafe recently wrote a great sentence. "You are trading off performance for the ability to preempt."
2021-09-28 23:15:59	sclv	if you're being this blase over the memory model in C, that can only be because you're not familiar with how utterly hopeless it is
2021-09-28 23:16:11	Franciman	wut
2021-09-28 23:16:17	Franciman	do you mean me, sclv ?
2021-09-28 23:16:27	monochrom	Yeah, about that.
2021-09-28 23:16:41	Franciman	you said: Haskell makes parallel and concurrent computations easy
2021-09-28 23:16:47	Franciman	easy is a great understatement
2021-09-28 23:16:52	Franciman	in many situations
2021-09-28 23:16:53	monochrom	https://queue.acm.org/detail.cfm?id=3212479
2021-09-28 23:16:57	dsal	sclv: erlang is slow at computation, but pretty hard to beat in terms of general application latency.
2021-09-28 23:16:59	→	Guest|33 has joined #haskell
2021-09-28 23:17:34	→	martin02 has joined #haskell
2021-09-28 23:17:34	sclv	https://bajamircea.github.io/coding/cpp/2019/11/05/cpp11-volatile.html
2021-09-28 23:18:06	free_functor	Guest47, I would never joke about important Game/Game-Engine pairings such as Fortnight/Fortran, Team Fortress/Tensor Flow, Minecraft/Malbolge, Halflife/Haskell98, and so on. Telling jokes about modern Games and the Game Engines that run them... is liable to start flame wars.
2021-09-28 23:18:19	→	YoungChiefBTW has joined #haskell
2021-09-28 23:18:55	←	Guest|33 has quit (Client Quit)
2021-09-28 23:19:19	monochrom	Do people still remember browser games and Flash games?
2021-09-28 23:19:32	sclv	"easy" as in you don't encounter situations where you said "look i literally said to do this thing in this order, and now its doing something else entirely!??" https://stackoverflow.com/questions/2484980/why-is-volatile-not-considered-useful-in-multithreaded-c-or-c-programming
2021-09-28 23:19:58	monochrom	So apparently nothing went wrong when game engines were writte in javascript or flash. And on 20-year-old hardware, no less.
2021-09-28 23:20:18	←	chele has quit (Remote host closed the connection)
2021-09-28 23:21:26	free_functor	what is a good example of clean, speed critical haskell code that does heavy numerical lifting of some sort?
2021-09-28 23:21:50	→	tromp has joined #haskell
2021-09-28 23:21:53	Guest47	I personally think CS/C# is the killer combo
2021-09-28 23:22:12	asgas	Something like a javascript engine would probably be in C or C++. Could haskell do something like what v8 can do from chrome?
2021-09-28 23:22:52	free_functor	hmm, it's not at all fair to ask that the speed critical code should also be clean. I apologize
2021-09-28 23:23:56	Franciman	with linear types
2021-09-28 23:24:01	Franciman	I think you can go a greater way
2021-09-28 23:24:05	sclv	there's a lot of classic highly-optimized (perhaps over-optimized) code in the benchmarks game: https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/haskell.html
2021-09-28 23:24:19	Franciman	the main problem of low latency things is the garbage collector, I don't see other problems
2021-09-28 23:24:25	asgas	I hope there's no misunderstanding. I'm not trying to start a flame war, I just want to know how haskell compares to more mainstream languages like C++ and why haskell isn't used as much.
2021-09-28 23:24:29	Franciman	I don't know enough about how to control the GC
2021-09-28 23:24:45	sclv	asgas: anyway the answer isn't performance. that's an old myth
2021-09-28 23:24:55	sclv	i write high performance haskell for a day job and its fine
2021-09-28 23:24:55	free_functor	Guest47, how many hundreds of lines of C# code do you currently maintain, and what is the total yearly commercial revenue of that code?
2021-09-28 23:25:33	Franciman	if you know well the execution model of haskell
2021-09-28 23:25:38	Franciman	and know how to wrestle with the GC
2021-09-28 23:25:44	Franciman	you can make it go SUUUUUUUUPER fast
2021-09-28 23:25:51	←	emf_ has quit (Ping timeout: 245 seconds)
2021-09-28 23:26:00	sclv	haskell is a fine language that can be used well for almost anything. its just different than other languages and has historically not had a Big Industry Player backing it, and also, the related ecosystem of tooling (ides, special purpose libraries, etc) is correspondingly less mature.
2021-09-28 23:26:06	Franciman	another cool thing is that GHC is SUUUUUUPER good at optimizing declarative code
2021-09-28 23:26:15	asgas	So even with garbage collection, you could write a fast javascript engine in pure haskell sclv?
2021-09-28 23:26:24	sclv	sure
2021-09-28 23:26:26	shiraeeshi[m]	Franciman: "and STM rerunning the same computation over and over until there is no conflict is not what you need"
2021-09-28 23:26:26	Franciman	so most of the time if you try to do lower level things, it gets slower. So you do your own high level thing
2021-09-28 23:26:38	→	spruit11 has joined #haskell
2021-09-28 23:26:43	Franciman	and GHC makes a lot of effort to make it fast, doing a great job, from my tests
2021-09-28 23:26:46	shiraeeshi[m]	I heard that STM does something more smart than literally rerunning
2021-09-28 23:26:48	monochrom	mainstream? In mainstream there are as many people preferring Java or Python or PHP as there are people preferring C++.  So first off proving that performance is not going to be a high priority.
2021-09-28 23:27:19	←	danso has quit (Quit: WeeChat 3.2)
2021-09-28 23:27:20	Franciman	asgas: imho the only problem of GC is when you want to do performance critical things, like real time systems like video games with ULTRA MEGA DETAILS
2021-09-28 23:27:30	Franciman	if you don't need to be within 10ms
2021-09-28 23:27:33	shiraeeshi[m]	STM tracks which TVars you read, then waits for them to change and then triggers your transaction
2021-09-28 23:27:35	Franciman	haskell is fine
2021-09-28 23:27:40	sclv	but note that most fast javascript engines are not interpreters -- they're actually hybrid JIT gadgets that compile on the fly to machine code. the hard part is not the performance of the surrounding language -- its that writing this engine, in any language at all, is a tremendous engineering task.
2021-09-28 23:27:54	monochrom	The priorities are, instead, personality, style, ecosystem, networking effect, and dumb luck in which one was your 1st language.
2021-09-28 23:28:07	monochrom	And you can see how Haskell can lose on all those fronts.
2021-09-28 23:28:08	Franciman	haskell's ecosystem is one of the poorest imho
2021-09-28 23:28:09	sclv	so i should qualify and say "very few people, and probably not me, are well equipped to write a fast JITter for js in _any_ language"
2021-09-28 23:28:15	←	cfricke has quit (Quit: WeeChat 3.2.1)
2021-09-28 23:28:17	Franciman	but it has great other things :)
2021-09-28 23:28:47	monochrom	Personally I am not excited about "what if Haskell were more popular". There is no need to fight into the mainstream.
2021-09-28 23:29:08	←	asgas has quit (Quit: Leaving)
2021-09-28 23:29:16	→	CiaoSen has joined #haskell
2021-09-28 23:29:17	←	fef has quit (Ping timeout: 276 seconds)
2021-09-28 23:29:22	monochrom	And here is my answer to what if Haskell were more popular: It would then drop Haskell values and adopt mainstream values, it would no longer be Haskell.
2021-09-28 23:29:32	tdammers	exactly
2021-09-28 23:29:48	←	zebrag has quit (Remote host closed the connection)
2021-09-28 23:29:50	Franciman	it is already happening monochrom 
2021-09-28 23:30:10	monochrom	Do not be naïve. "haskell become mainstream" does not imply "mainstream cherishes Haskell values". Far from it.
2021-09-28 23:30:12	maerwald	monochrom: I'm basically saying this all the time whenever HF is pushing for "lets increase adoption in industry" but I have the feeling I'm misunderstood most of the time
2021-09-28 23:30:19	Franciman	the time when haskell dropped away the old IO system to use monads
2021-09-28 23:30:21	Franciman	are gone
2021-09-28 23:30:25	Franciman	now we make thousands of extensions
2021-09-28 23:30:30	Franciman	because we also want to be backwords compatible
2021-09-28 23:30:34	Franciman	for the corps using haskell
2021-09-28 23:31:05	Franciman	now we have legacy and we value it 
2021-09-28 23:31:15	Franciman	I don't see haskell totally breaking any time soon
2021-09-28 23:31:31	Franciman	for example dependent types
2021-09-28 23:31:39	Franciman	they work hard to make them retrofit in haskell
2021-09-28 23:31:40	Franciman	it seems to me
2021-09-28 23:33:15	⚡	free_functor is thinking of porting a profunctorial lenses library to python
2021-09-28 23:33:57	←	werneta has quit (Ping timeout: 246 seconds)
2021-09-28 23:34:21	→	MoC has joined #haskell
2021-09-28 23:34:55	geekosaur	they're just barely started on dependent types. the later stages are likely to be more invasive
2021-09-28 23:35:38	free_functor	python has become my go-to language for quick and dirty notebook based computations, and even more complex domain driven designs - mainly because I can just throw open a colab notebook, pull in some numeric or AI libraries, and very quickly do heavy lifting and visualization
2021-09-28 23:36:02	monochrom	Perhaps ironically, invasive is good.  I complain that the current DataKind and singleton stuff is emulating, encoding, which means clumsy.
2021-09-28 23:36:32	free_functor	you can get haskell in colab, but I think it's currently pretty slow and painful
2021-09-28 23:38:26	shiraeeshi[m]	haskell should have dialects: industrial haskell, experimental haskell, haskell with memory management fixed, etc.
2021-09-28 23:38:30	←	martin02 has quit (Ping timeout: 250 seconds)
2021-09-28 23:39:03	shiraeeshi[m]	haskell with exceptions fixed
2021-09-28 23:39:04	→	martin02 has joined #haskell
2021-09-28 23:39:09	←	eggplantade has quit (Remote host closed the connection)
2021-09-28 23:39:14	tdammers	it already does
2021-09-28 23:39:23	tdammers	in much the same way as C++ does
2021-09-28 23:39:36	←	merijn has quit (Ping timeout: 264 seconds)
2021-09-28 23:39:52	shiraeeshi[m]	haskell that doesn't care about backwards compatibility and legasy
2021-09-28 23:40:27	shiraeeshi[m]	haskell that cares about backwards compatibility and legacy
2021-09-28 23:40:30	free_functor	shiraeeshi[m], that's kind of how I think of haskell within a project I'm reading lately. The author enables a couple dozen extensions, and some parts are like the hyper-modern space haskell that I don't fully understand
2021-09-28 23:42:16	→	myShoggoth has joined #haskell
2021-09-28 23:42:57	←	max22- has quit (Ping timeout: 265 seconds)
2021-09-28 23:44:19	→	eggplantade has joined #haskell
2021-09-28 23:45:08	free_functor	shiraeeshi[m], it would be nice to see a commercial distibution of haskell - I'm not sure if you can buy support licenses for haskell application servers
2021-09-28 23:45:33	free_functor	Does any company currently have the audacity to charge hefty bux for special, mission critical haskell runtimes and libraries?
2021-09-28 23:46:57	⚡	free_functor feels there must be some fintech offerings here... and I think there are other commercial haskel based DSLs like cryptol
2021-09-28 23:47:06	→	benin0369323017 has joined #haskell
2021-09-28 23:47:40	monochrom	I think yes. FP Complete. Galois.
2021-09-28 23:48:15	monochrom	Well, not literally runtimes and libraries.
2021-09-28 23:48:31	monochrom	They write Haskell programs for you.
2021-09-28 23:48:45	←	benin036932301 has quit (Ping timeout: 268 seconds)
2021-09-28 23:48:47	ℹ	benin0369323017 is now known as benin036932301
2021-09-28 23:48:50	←	yauhsien has quit (Remote host closed the connection)
2021-09-28 23:49:26	monochrom	Galois probably fulfills "mission critical" too because they care about verification, IIUC.
2021-09-28 23:49:37	geekosaur	well-typed?
2021-09-28 23:49:56	monochrom	Yeah, I forgot that one.
2021-09-28 23:51:08	monochrom	The Haskell Duality Theorem: The two questions "where can I find Haskell jobs?" and "where can I buy Haskell code from?" are reducible to each other. >:)
2021-09-28 23:51:19	←	darkstardevx has quit (Read error: Connection reset by peer)
2021-09-28 23:51:47	exarkun	The mainstream is very mediocre.  What would Haskell going mainstream mean, apart from being able to do very mediocre things with it?
2021-09-28 23:52:03	monochrom	consumerism and producerism form an adjunction >:)
2021-09-28 23:52:18	→	benin0369323011 has joined #haskell
2021-09-28 23:52:30	awpr	does that mean Western society forms a monad?
2021-09-28 23:53:09	monochrom	I think no.
2021-09-28 23:53:26	monochrom	My understanding is that Western society is consumerism, Eastern society is producerism.
2021-09-28 23:53:55	exarkun	I suspect that is ... reductive
2021-09-28 23:54:13	monochrom	Oh, very oversimplification, yes.
2021-09-28 23:54:36	←	benin036932301 has quit (Ping timeout: 264 seconds)
2021-09-28 23:54:37	ℹ	benin0369323011 is now known as benin036932301
2021-09-28 23:54:42	monochrom	But how is "Western society is consumerism and producerism" any less simplifying?
2021-09-28 23:55:09	monochrom	And what's with singling out Western society?
2021-09-28 23:55:17	exarkun	poor Western society, always picked on
2021-09-28 23:55:39	monochrom	Is there any society that's any different? Honestly? Not believing certain exotic government propanganda?
2021-09-28 23:56:11	exarkun	Only photosynthesizing communities truly embrace producerism
2021-09-28 23:56:21	monochrom	heh
2021-09-28 23:58:03	shiraeeshi[m]	well, they consume sunlight
2021-09-28 23:59:14	Rembane	Star communities.
2021-09-28 23:59:40	free_functor	monochrom, western per-capita carbon production is 20x higher than human per-capita carbon production, whereas a collapse of western society would reduce that number to merely 10x, if the collapse of the soviet union is a good model of carbon reduction effect of central collapse.
2021-09-29 00:00:39	free_functor	therefore it's ethical and good to dog on western civilization if you are indeed part of western civilization - this is the internal sabotage theorem
2021-09-29 00:01:59	exarkun	Should have known there would be sleepers from the stellar faction lurking
2021-09-29 00:02:46	←	CiaoSen has quit (Ping timeout: 265 seconds)
2021-09-29 00:04:05	Lycurgus	western society is still not not christendom, or vestigial islam if you like
2021-09-29 00:05:23	Lycurgus	things like consumerism, capitalism are way bigger than the west which is only even a thing because it was able to oversettle the americas
2021-09-29 00:05:46	Lycurgus	and with that dominate the planet for a while
2021-09-29 00:06:28	geekosaur	hasn't this discussion kinda slid off into offtopic-land?
2021-09-29 00:06:56	Lycurgus	yeah i thought I'd push it to a termination
2021-09-29 00:07:39	→	lavaman has joined #haskell
2021-09-29 00:07:59	→	darkstardevx has joined #haskell
2021-09-29 00:08:16	Lycurgus	but for profit hs shops is sure on topic
2021-09-29 00:10:30	Lycurgus	sfaict, their internal relations notwithstanding, being forced into FOSS culture, they are generally a good thing merging 
2021-09-29 00:10:47	Lycurgus	commercial standards with the standards of hs
2021-09-29 00:12:02	Lycurgus	the conjecture might be that they have some wonderful thing that they're not sharing 
2021-09-29 00:12:06	←	lavaman has quit (Ping timeout: 245 seconds)
2021-09-29 00:12:15	Lycurgus	but that's unlikely to be true
2021-09-29 00:12:43	free_functor	I am still not convinced that I can pay for someone to take my haskell platform woes off my hands so I can focus on writing teeny tiny haskell microservices that seamless run on both in house and cloud resources. Like, I think you could extend Serverless to support haskel, but really I want to pay for someone to have already done this thing
2021-09-29 00:13:16	ldlework	lol
2021-09-29 00:13:20	free_functor	and to deliver it to me for 30 bux a month or so
2021-09-29 00:13:40	ldlework	free_functor: if only there were enough of you
2021-09-29 00:13:45	geekosaur	I'd imagine it would cost more than that even if it was provided
2021-09-29 00:14:12	geekosaur	although I should note that people have written starts to such things… and then gotten hired away from working on them
2021-09-29 00:14:28	geekosaur	unless they've been developing them in-house
2021-09-29 00:14:37	geekosaur	(cloud haskell, anyone?)
2021-09-29 00:14:42	Lycurgus	30 usd is about a minimum for hosting service alone
2021-09-29 00:15:02	free_functor	geekosaur, I think bigger languages enjoy an economy of scale... once you solve certain scaling and API and interface design problems, I think it get very very cheap to offer that infrustructure to many tenants
2021-09-29 00:15:09	Lycurgus	with a few physical threads and TB of transfer 
2021-09-29 00:15:54	Lycurgus	double that for a hs service that was customer specific would be reasonable
2021-09-29 00:16:00	Lycurgus	*wasn't
2021-09-29 00:16:55	→	chris has joined #haskell
2021-09-29 00:17:00	ℹ	chris is now known as Guest2198
2021-09-29 00:17:16	Lycurgus	but haskell doesn't have mass appeal so it hits that when capital is being allocated
2021-09-29 00:17:21	free_functor	Lycurgus, I think it is not pretty reasonable to run a few lambda microservice for less than 5 bux a month, if the workloads are not heavy
2021-09-29 00:17:25	free_functor	err
2021-09-29 00:17:39	free_functor	s/not//
2021-09-29 00:18:10	Lycurgus	sure just a service
2021-09-29 00:18:33	Lycurgus	I was thinking more something that would bundle computing resources with it
2021-09-29 00:18:57	Lycurgus	but just use of an api, that's a order lower in price domains
2021-09-29 00:20:59	free_functor	I'm really interested in the whole idea of maintaining these tiny snippets of code. and the whole compilation, testing, and deployment basically happens automatically after a commit passes review
2021-09-29 00:22:00	free_functor	I believe it is pretty easy to build this in go, javascript, python, or java, and I think that's because the platforms have nice tooling for those languages specifically
2021-09-29 00:22:30	free_functor	but I haven't looked into what kind of extra trouble you might need to get amazon lambda running your haskell microservices, for example
2021-09-29 00:23:04	free_functor	so i would defer to someone with more combined cloud and haskell experience
2021-09-29 00:24:00	Lycurgus	and ofc the nature of the service provided by the API determines price
2021-09-29 00:24:23	Lycurgus	the crossing from the one domain to the other is when privisioning is undertaken
2021-09-29 00:24:29	→	emf has joined #haskell
2021-09-29 00:24:55	Lycurgus	and how that is handled between the customer and the actual provider of the provisioned inventory
2021-09-29 00:25:13	Lycurgus	for whom for me the defaults are AWS and linode
2021-09-29 00:26:00	→	max22- has joined #haskell
2021-09-29 00:26:10	shiraeeshi[m]	free_functor: I'm not sure I understand what are you willing to pay for. You can pay for a dedicated server and install anything you want. Unless you're talking about PAAS and IAAS companies creating haskell APIs.
2021-09-29 00:26:10	Lycurgus	i in general avoid branded solutions when generic ones are clear to me (i.e. aws lambda)
2021-09-29 00:26:31	→	farmfrmjakestate has joined #haskell
2021-09-29 00:27:06	free_functor	I will grant that the multi-cloud / hybrid cloud + baremetal story is currently a nightmare for both kubernetes and any "functions as a service" platform I've seen
2021-09-29 00:28:34	free_functor	nobody /really/ wants to write software that can provision and seamlessly integrate, for example, an AWS machine, a digital ocean node, and 4 local raspberry pi servers
2021-09-29 00:28:55	←	Guest2198 has quit (Remote host closed the connection)
2021-09-29 00:29:03	←	rtjure has quit (Ping timeout: 240 seconds)
2021-09-29 00:31:44	free_functor	Lycurgus, I hear there has enough standardization around lambda that now we have competing DIY faas systems like Knative and Serverless. And if I'm not mistaken, loading haskell into one of these custom FAAS engines would be a "easy" as writing a knative plugin for haskell, or what have you
2021-09-29 00:31:46	shiraeeshi[m]	free_functor: "nobody /really/ wants to write software that can provision and seamlessly integrate, for example, an AWS machine, a digital ocean node, and 4 local raspberry pi servers"
2021-09-29 00:32:10	shiraeeshi[m]	what are talking about? you make them talk through REST services, no?
2021-09-29 00:32:22	ldlework	free_functor: that's what i did at docker, before swarm or k8s were things
2021-09-29 00:32:26	free_functor	but at the end of the day who are your customers, I guess - we get back to ldlework's idea that there are not enough customers who would want this
2021-09-29 00:32:31	shiraeeshi[m]	you provision them using APIs
2021-09-29 00:32:34	ldlework	i was pretty hyped at the time
2021-09-29 00:33:55	→	Guest1162 has joined #haskell
2021-09-29 00:33:58	Lycurgus	free_functor, aknowledged
2021-09-29 00:34:42	Lycurgus	*acknowledged 
2021-09-29 00:36:36	←	hyiltiz has quit (Ping timeout: 264 seconds)
2021-09-29 00:38:21	←	Guest1162 has quit (Ping timeout: 246 seconds)
2021-09-29 00:41:20	free_functor	shiraeeshi[m], you have two bare metal nodes on premises, which can handle all your requests. If these nodes go down, don't worry, because lambda will run the same workloads with hot fail-over for your users. How do you set up the hot fail over? How do you ensure that the same code that runs on the machines also runs on lambda? Would you say your current solution let you do this with little to no pain? If so, I'm curious how
2021-09-29 00:41:22	←	emf has quit (Ping timeout: 252 seconds)
2021-09-29 00:41:24	→	hyiltiz has joined #haskell
2021-09-29 00:42:20	→	mei has joined #haskell
2021-09-29 00:43:32	free_functor	the closes multi-cloud + baremetal orchestration system that I know about is Redhat's OpenStack / OK4. But open stack is by no means a lightweight system that you deploy on some random hetergenous servers and raspberry pis
2021-09-29 00:43:47	→	emf has joined #haskell
2021-09-29 00:47:12	←	Lycurgus has quit (Quit: Exeunt)
2021-09-29 00:47:20	←	chomwitt has quit (Ping timeout: 252 seconds)
2021-09-29 00:47:25	←	Guest47 has quit (Quit: Client closed)
2021-09-29 00:48:27	free_functor	shiraeeshi[m], for example of multicloud code "nobody" wants to write, imagine a system that can refactor your deployment so that is uses more azure servers one month, more AWS servers another month, always choosing the deployment will perform the work cheapest
2021-09-29 00:49:29	free_functor	amazon certainly does not want to write that federation code, and neither does microsoft - so right there the two most competent candidates refuse to touch the project
2021-09-29 00:50:40	free_functor	who is left? well, people who are willing to write federation code for customers who are /so cheap/ they want to nickle and dime the spot rate across multiple clouds
2021-09-29 00:53:06	←	zer0bitz has quit (Ping timeout: 260 seconds)
2021-09-29 00:55:02	←	roboguy has quit
2021-09-29 00:58:42	←	emf has quit (Ping timeout: 260 seconds)
2021-09-29 01:04:54	←	qbt has quit (Remote host closed the connection)
2021-09-29 01:05:53	←	MoC has quit (Quit: Konversation terminated!)
2021-09-29 01:12:01	→	emf has joined #haskell
2021-09-29 01:15:52	←	farmfrmjakestate has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-09-29 01:21:24	←	wroathe has quit (Ping timeout: 246 seconds)
2021-09-29 01:32:38	→	acidjnk_new has joined #haskell
2021-09-29 01:33:29	ldlework	free_functor: what we did at docker was write a DSL that was backed by a "driver" system
2021-09-29 01:33:37	ldlework	basically just implementing an interface essentially
2021-09-29 01:34:03	ldlework	the most difficult part was not in implementing the interface but coming up with a useful common demoninator for our purposes at the time
2021-09-29 01:34:56	←	nfd has quit (Ping timeout: 265 seconds)
2021-09-29 01:35:01	←	juhp has quit (Ping timeout: 245 seconds)
2021-09-29 01:35:17	→	merijn has joined #haskell
2021-09-29 01:36:17	←	takuan has quit (Remote host closed the connection)
2021-09-29 01:36:40	→	juhp has joined #haskell
2021-09-29 01:42:15	→	acidjnk_new3 has joined #haskell
2021-09-29 01:45:33	←	acidjnk_new has quit (Ping timeout: 246 seconds)
2021-09-29 01:47:09	←	geekosaur has quit (Remote host closed the connection)
2021-09-29 01:47:28	→	geekosaur has joined #haskell
2021-09-29 01:50:39	←	fvr has quit (Quit: Connection closed for inactivity)
2021-09-29 01:55:27	ℹ	irc: disconnected from server
2021-09-29 10:12:31	→	oxide has joined #haskell
2021-09-29 10:12:40	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-29 10:12:40	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-29 10:13:00	ℹ	Channel #haskell: 708 nicks (1 op, 0 voices, 707 normals)
2021-09-29 10:13:07	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-29 10:14:36	←	Guest20 has quit (Quit: Textual IRC Client: www.textualapp.com)
2021-09-29 10:26:14	→	yauhsien has joined #haskell
2021-09-29 10:27:56	←	myShoggoth has quit (Ping timeout: 245 seconds)
2021-09-29 10:29:54	→	myShoggoth has joined #haskell
2021-09-29 10:30:23	←	fef has quit (Quit: Leaving)
2021-09-29 10:30:27	←	yauhsien has quit (Ping timeout: 245 seconds)
2021-09-29 10:30:30	→	iridium__ has joined #haskell
2021-09-29 10:34:45	←	notzmv has quit (Ping timeout: 246 seconds)
2021-09-29 10:46:34	←	wroathe has quit (Ping timeout: 265 seconds)
2021-09-29 10:47:45	→	MidAutumnMoon has joined #haskell
2021-09-29 10:52:53	→	Andrew_ has joined #haskell
2021-09-29 10:53:31	←	AndrewYu has quit (Ping timeout: 252 seconds)
2021-09-29 10:57:03	→	mei has joined #haskell
2021-09-29 11:08:02	→	sndr has joined #haskell
2021-09-29 11:08:22	←	sander has quit (Ping timeout: 252 seconds)
2021-09-29 11:08:43	ℹ	sndr is now known as sander
2021-09-29 11:16:05	→	takuan has joined #haskell
2021-09-29 11:26:38	←	fvr has quit (Quit: Connection closed for inactivity)
2021-09-29 11:29:28	←	Vajb has quit (Ping timeout: 265 seconds)
2021-09-29 11:30:04	←	vicfred has quit (Quit: Leaving)
2021-09-29 11:30:09	→	Vajb has joined #haskell
2021-09-29 11:31:21	→	yauhsien has joined #haskell
2021-09-29 11:35:54	→	ub has joined #haskell
2021-09-29 11:37:45	→	merijn has joined #haskell
2021-09-29 11:40:14	←	a6a45081-2b83 has quit (Remote host closed the connection)
2021-09-29 11:41:17	→	michalz has joined #haskell
2021-09-29 11:43:15	←	img has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-09-29 11:49:22	→	emf has joined #haskell
2021-09-29 11:49:36	→	img has joined #haskell
2021-09-29 11:56:09	←	emf has quit (Quit: emf)
2021-09-29 11:56:27	→	emf has joined #haskell
2021-09-29 11:59:15	→	qbt has joined #haskell
2021-09-29 12:02:42	→	lavaman has joined #haskell
2021-09-29 12:07:09	←	lavaman has quit (Ping timeout: 246 seconds)
2021-09-29 12:07:17	Axman6	Could you use pattern synonyms to make a pattern like foo (PrefixedBy "Hello" rest), that would be the same as 'H':'e':'l':'l':'o':rest?
2021-09-29 12:10:35	c_wraith	Should be able to.
2021-09-29 12:10:42	c_wraith	:t stripPrefix
2021-09-29 12:10:43	lambdabot	Eq a => [a] -> [a] -> Maybe [a]
2021-09-29 12:11:09	c_wraith	Should just be a view pattern involving that
2021-09-29 12:11:42	c_wraith	and if you want it to be bidirectional, it's ++ in the other direction
2021-09-29 12:11:53	→	JeSCaLis23-F has joined #haskell
2021-09-29 12:12:03	←	merijn has quit (Ping timeout: 250 seconds)
2021-09-29 12:13:00	←	yauhsien has quit (Remote host closed the connection)
2021-09-29 12:13:18	←	tzh has quit (Quit: zzz)
2021-09-29 12:15:59	←	JeSCaLis23-F has quit (Client Quit)
2021-09-29 12:17:46	←	phma has quit (Read error: Connection reset by peer)
2021-09-29 12:18:29	→	phma has joined #haskell
2021-09-29 12:19:57	iridium__	is there a way to change the "override" the show method for lists?
2021-09-29 12:20:05	iridium__	s/change the//
2021-09-29 12:20:30	c_wraith	Nope.  Your options are using a different type or using a different function
2021-09-29 12:22:12	iridium__	c_wraith: ok. thanks.
2021-09-29 12:27:02	→	cfricke has joined #haskell
2021-09-29 12:31:31	→	max22- has joined #haskell
2021-09-29 12:35:51	←	emf has quit (Ping timeout: 245 seconds)
2021-09-29 12:38:43	Axman6	@hoogle concapMapM
2021-09-29 12:38:43	lambdabot	No results found
2021-09-29 12:38:58	→	gehmehgeh has joined #haskell
2021-09-29 12:39:15	c_wraith	Axman6: guess not.  Looks like you can't use pattern arguments as inputs in pattern matches - they're outputs only
2021-09-29 12:39:22	Axman6	c_wraith: hmm, interesting. Mostly just a thought, but one day I reckon I might have a use for that
2021-09-29 12:39:33	Axman6	hmm, ok
2021-09-29 12:39:42	c_wraith	Axman6: I *almost* got there with DataKinds
2021-09-29 12:39:57	→	chele has joined #haskell
2021-09-29 12:39:57	c_wraith	But it turns out to be...  uh..  
2021-09-29 12:40:15	c_wraith	error: Type applications in patterns are not yet supported
2021-09-29 12:40:35	c_wraith	And without that...  Can't quite work.
2021-09-29 12:41:38	c_wraith	Hmm.  Maybe a different strategy can work.
2021-09-29 12:46:20	→	notzmv has joined #haskell
2021-09-29 12:47:25	c_wraith	Hmm, the other thing I wanted to try also doesn't work.  It feels like something should, I just haven't put it together.
2021-09-29 12:47:29	←	nehsou^ has quit (Remote host closed the connection)
2021-09-29 12:50:22	Axman6	Can pattern synonyms be recursive? =)
2021-09-29 12:51:41	←	xff0x has quit (Ping timeout: 245 seconds)
2021-09-29 12:52:49	→	xff0x has joined #haskell
2021-09-29 12:53:02	→	tromp has joined #haskell
2021-09-29 12:54:47	→	lortabac has joined #haskell
2021-09-29 12:56:03	→	rtjure has joined #haskell
2021-09-29 12:56:30	←	ub has quit (Ping timeout: 246 seconds)
2021-09-29 12:58:24	→	emf has joined #haskell
2021-09-29 12:58:41	→	nrl^ has joined #haskell
2021-09-29 13:05:53	→	yauhsien has joined #haskell
2021-09-29 13:10:48	←	yauhsien has quit (Ping timeout: 264 seconds)
2021-09-29 13:12:04	c_wraith	Axman6: here.  You can think of this as either performance art or a joke: https://paste.tomsmeding.com/KmOT6PZy
2021-09-29 13:15:26	→	merijn has joined #haskell
2021-09-29 13:26:47	→	acidjnk_new3 has joined #haskell
2021-09-29 13:26:50	←	Sgeo has quit (Read error: Connection reset by peer)
2021-09-29 13:28:57	←	jonathanx has quit (Ping timeout: 265 seconds)
2021-09-29 13:29:31	→	jonathanx has joined #haskell
2021-09-29 13:29:33	←	emf has quit (Ping timeout: 260 seconds)
2021-09-29 13:30:00	Axman6	=| amazing, but what did it cost?
2021-09-29 13:30:06	→	yauhsien has joined #haskell
2021-09-29 13:30:08	←	iridium__ has left #haskell
2021-09-29 13:30:41	→	dyeplexer has joined #haskell
2021-09-29 13:32:18	→	fvr has joined #haskell
2021-09-29 13:33:05	←	gehmehgeh has quit (Quit: Leaving)
2021-09-29 13:35:15	←	yauhsien has quit (Ping timeout: 250 seconds)
2021-09-29 13:35:45	→	acidjnk_new has joined #haskell
2021-09-29 13:35:50	→	hendursa1 has joined #haskell
2021-09-29 13:38:12	c_wraith	only sanity
2021-09-29 13:38:49	←	hendursaga has quit (Ping timeout: 276 seconds)
2021-09-29 13:39:09	←	acidjnk_new3 has quit (Ping timeout: 250 seconds)
2021-09-29 13:42:11	←	NinjaTrappeur has quit (Quit: WeeChat 3.1)
2021-09-29 13:43:02	→	NinjaTrappeur has joined #haskell
2021-09-29 13:46:23	→	gehmehgeh has joined #haskell
2021-09-29 13:46:32	→	Heisen has joined #haskell
2021-09-29 13:47:05	←	geekosaur has quit (Remote host closed the connection)
2021-09-29 13:47:28	→	geekosaur has joined #haskell
2021-09-29 13:48:49	←	hnOsmium0001 has quit (Quit: Connection closed for inactivity)
2021-09-29 13:51:37	←	econo has quit (Quit: Connection closed for inactivity)
2021-09-29 13:52:12	←	siraben has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:12	←	MatrixTravelerbo has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	kadoban has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	peddie has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	psydroid has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	Arathorn has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	Las[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	SimonWeiss[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	fgaz has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	jophish has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	vaibhavsagar[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	maralorn has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	kar1 has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	PotatoHatsue has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	marinelli[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	ericson2314 has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	zfnmxt has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	carmysilna has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	hsiktas[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	maerwald[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	Morrow[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	amesgen[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	Ollie[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	moats has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	SawyerBergeron[m has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:13	←	aidy has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:14	←	schuelermine[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:14	←	bitonic has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:14	←	soft has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:14	←	thomasjm[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:14	←	oak- has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:14	←	bakinonion[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:14	←	erinvanderveen[m has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:14	←	zwro[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:14	←	jchia[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:14	←	Magnus[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:14	←	wysteriary[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:14	←	Topik[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:15	←	cloudy has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:15	←	srid[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:15	←	dualinverter[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:15	←	ManofLetters[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:15	←	hjulle[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:15	←	unclechu has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:15	←	reza[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:16	←	fcortesi has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:19	←	shiraeeshi[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:19	←	commuswift[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:22	←	jesser[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:22	←	stoicswe[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:23	←	smichel17[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:23	←	craige[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:24	←	ixlun has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:24	←	alexfmpe[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:24	←	afotgkmnzj7asv3r has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:24	←	jakefromstatefar has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:24	←	unrooted has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:24	←	asdofindia-m has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:24	←	ongy[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:24	←	fendor[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:24	←	dexmad[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:24	←	hsek[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:24	←	hughjfchen[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:24	←	jneira[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:24	←	infinisil has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:24	←	Tisoxin has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:24	←	cdsmith has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:24	←	ormaaj has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:24	←	rednaZ[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:25	←	ServerStatsDisco has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:25	←	sm has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:25	←	Christoph[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:25	←	lwe[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:25	←	Drew[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:25	←	IgnatInsarov[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:28	←	ru0mad[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:28	←	OndejSkup[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:28	←	bb010g has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:28	←	denbrahe[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:28	←	Deewiant has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:28	←	sky_lounge[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:28	←	quantum has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:28	←	monadfritz[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:28	←	fakehacker[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:29	←	Orbstheorem has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:29	←	kevin[m]1 has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:29	←	YoungChiefBTW has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:29	←	reddishblue[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:29	←	justosophy[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:29	←	sam[m]1 has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:29	←	the-coot[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:29	←	Deide has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:29	←	rosariopulella[m has quit (Quit: Bridge terminating on SIGTERM)
2021-09-29 13:52:36	→	acidjnk_new3 has joined #haskell
2021-09-29 13:53:23	Heisen	Hello, I am trying to print out each element in my list with the same principles as I did with my for loop however I don't get it to work, could someone give me a helping hand?:]  https://paste.tomsmeding.com/p0LlFz2c
2021-09-29 13:54:41	c_wraith	you're testing to see if the tail of the list is empty
2021-09-29 13:55:21	c_wraith	Though more initially problematic, the type you provided doesn't match the type it has
2021-09-29 13:55:37	←	acidjnk_new has quit (Ping timeout: 250 seconds)
2021-09-29 13:55:39	→	jakefromstatefar has joined #haskell
2021-09-29 13:56:41	Heisen	oh wow, thank yo
2021-09-29 13:56:43	Heisen	-u
2021-09-29 13:56:54	→	maerwald[m] has joined #haskell
2021-09-29 13:57:06	→	jchia[m] has joined #haskell
2021-09-29 13:57:06	→	MatrixTravelerbo has joined #haskell
2021-09-29 13:57:18	→	dualinverter[m] has joined #haskell
2021-09-29 13:57:19	→	fgaz has joined #haskell
2021-09-29 13:57:19	→	peddie has joined #haskell
2021-09-29 13:57:19	→	cdsmith has joined #haskell
2021-09-29 13:57:19	→	Morrow[m] has joined #haskell
2021-09-29 13:57:31	→	thomasjm[m] has joined #haskell
2021-09-29 13:57:31	→	hsek[m] has joined #haskell
2021-09-29 13:57:31	→	ru0mad[m] has joined #haskell
2021-09-29 13:57:46	→	bb010g has joined #haskell
2021-09-29 13:57:46	→	vaibhavsagar[m] has joined #haskell
2021-09-29 13:57:46	→	Las[m] has joined #haskell
2021-09-29 13:57:46	→	ServerStatsDisco has joined #haskell
2021-09-29 13:57:46	→	amesgen[m] has joined #haskell
2021-09-29 13:57:46	→	the-coot[m] has joined #haskell
2021-09-29 13:57:46	→	moats has joined #haskell
2021-09-29 13:57:57	→	soft has joined #haskell
2021-09-29 13:57:57	→	zfnmxt has joined #haskell
2021-09-29 13:58:11	→	oak- has joined #haskell
2021-09-29 13:58:12	→	kadoban has joined #haskell
2021-09-29 13:58:12	→	bitonic has joined #haskell
2021-09-29 13:58:12	→	ericson2314 has joined #haskell
2021-09-29 13:58:12	→	jophish has joined #haskell
2021-09-29 13:58:12	→	Arathorn has joined #haskell
2021-09-29 13:58:12	→	Ollie[m] has joined #haskell
2021-09-29 13:58:12	→	PotatoHatsue has joined #haskell
2021-09-29 13:58:12	→	ixlun has joined #haskell
2021-09-29 13:58:12	→	unclechu has joined #haskell
2021-09-29 13:58:29	→	Deewiant has joined #haskell
2021-09-29 13:58:29	→	unrooted has joined #haskell
2021-09-29 13:58:29	→	rednaZ[m] has joined #haskell
2021-09-29 13:58:29	→	maralorn has joined #haskell
2021-09-29 13:58:29	→	SimonWeiss[m] has joined #haskell
2021-09-29 13:58:29	→	denbrahe[m] has joined #haskell
2021-09-29 13:58:29	→	lwe[m] has joined #haskell
2021-09-29 13:58:39	→	jesser[m] has joined #haskell
2021-09-29 13:58:55	→	erinvanderveen[m has joined #haskell
2021-09-29 13:59:15	→	reza[m] has joined #haskell
2021-09-29 13:59:15	→	quantum has joined #haskell
2021-09-29 13:59:15	→	marinelli[m] has joined #haskell
2021-09-29 13:59:15	→	hsiktas[m] has joined #haskell
2021-09-29 13:59:29	→	Orbstheorem has joined #haskell
2021-09-29 13:59:40	→	craige[m] has joined #haskell
2021-09-29 13:59:52	→	afotgkmnzj7asv3r has joined #haskell
2021-09-29 13:59:53	→	schuelermine[m] has joined #haskell
2021-09-29 13:59:54	→	sm has joined #haskell
2021-09-29 13:59:54	→	reddishblue[m] has joined #haskell
2021-09-29 14:00:07	→	justosophy[m] has joined #haskell
2021-09-29 14:00:07	→	kevin[m]1 has joined #haskell
2021-09-29 14:00:07	→	Deide has joined #haskell
2021-09-29 14:00:18	→	fakehacker[m] has joined #haskell
2021-09-29 14:00:18	→	hughjfchen[m] has joined #haskell
2021-09-29 14:00:30	→	IgnatInsarov[m] has joined #haskell
2021-09-29 14:00:31	→	srid[m] has joined #haskell
2021-09-29 14:00:31	→	psydroid has joined #haskell
2021-09-29 14:00:42	→	wysteriary[m] has joined #haskell
2021-09-29 14:00:42	→	Christoph[m] has joined #haskell
2021-09-29 14:00:42	→	zwro[m] has joined #haskell
2021-09-29 14:00:54	→	stoicswe[m] has joined #haskell
2021-09-29 14:01:06	→	sam[m]1 has joined #haskell
2021-09-29 14:01:18	→	Topik[m] has joined #haskell
2021-09-29 14:01:18	→	OndejSkup[m] has joined #haskell
2021-09-29 14:01:18	→	kar1 has joined #haskell
2021-09-29 14:01:18	→	ongy[m] has joined #haskell
2021-09-29 14:01:18	→	YoungChiefBTW has joined #haskell
2021-09-29 14:01:18	→	alexfmpe[m] has joined #haskell
2021-09-29 14:01:18	→	asdofindia-m has joined #haskell
2021-09-29 14:01:19	→	ormaaj has joined #haskell
2021-09-29 14:01:19	→	hjulle[m] has joined #haskell
2021-09-29 14:01:32	→	infinisil has joined #haskell
2021-09-29 14:01:33	→	Drew[m] has joined #haskell
2021-09-29 14:01:33	→	jneira[m] has joined #haskell
2021-09-29 14:01:33	→	Magnus[m] has joined #haskell
2021-09-29 14:01:33	→	siraben has joined #haskell
2021-09-29 14:01:44	→	dexmad[m] has joined #haskell
2021-09-29 14:01:45	→	smichel17[m] has joined #haskell
2021-09-29 14:01:45	→	SawyerBergeron[m has joined #haskell
2021-09-29 14:01:57	→	sky_lounge[m] has joined #haskell
2021-09-29 14:01:57	→	Tisoxin has joined #haskell
2021-09-29 14:02:11	→	monadfritz[m] has joined #haskell
2021-09-29 14:02:11	→	bakinonion[m] has joined #haskell
2021-09-29 14:02:21	→	rosariopulella[m has joined #haskell
2021-09-29 14:02:24	→	fcortesi has joined #haskell
2021-09-29 14:02:24	→	ManofLetters[m] has joined #haskell
2021-09-29 14:02:24	→	cloudy has joined #haskell
2021-09-29 14:02:35	→	commuswift[m] has joined #haskell
2021-09-29 14:02:35	→	carmysilna has joined #haskell
2021-09-29 14:02:35	→	fendor[m] has joined #haskell
2021-09-29 14:02:35	→	aidy has joined #haskell
2021-09-29 14:02:35	→	shiraeeshi[m] has joined #haskell
2021-09-29 14:03:51	←	werneta has quit (Ping timeout: 250 seconds)
2021-09-29 14:11:10	→	zincy_ has joined #haskell
2021-09-29 14:11:29	→	kuribas has joined #haskell
2021-09-29 14:13:16	←	jpds has quit (Ping timeout: 276 seconds)
2021-09-29 14:13:56	zincy_	What is the correct data structure to use if you have 2 grids of alphabetical chars and you want to flip and shift one of them  - essentially creating a caeser cipher but with a grid instead of a list
2021-09-29 14:14:31	kuribas	zincy_: list of lists?
2021-09-29 14:15:16	zincy_	Yeah
2021-09-29 14:15:20	Rembane	Data.Map! :D
2021-09-29 14:16:11	zincy_	Rembane: How then do you do a transformation on say the x rows of the grid?
2021-09-29 14:16:38	zincy_	[1,2][3,4]] -> [1,2][4,3]]
2021-09-29 14:16:59	zincy_	i.e map doesnt know about position
2021-09-29 14:17:03	Rembane	zincy_: One cell at the time. :: Data.Map (Int, Int) Int
2021-09-29 14:17:35	Rembane	But it seems like you have a dense matrix, so a list of lists or vector of vectors are probably better.
2021-09-29 14:18:41	zincy_	Rembane: Out of curiosity what do the keys and value types denote
2021-09-29 14:18:46	zincy_	in your type sig
2021-09-29 14:18:47	dminuoso	vector of vectors is always good :)
2021-09-29 14:18:54	zincy_	Yeah
2021-09-29 14:19:29	pavonia	Why not an MArray instead, which might be easier to handle for random access?
2021-09-29 14:19:48	←	merijn has quit (Ping timeout: 264 seconds)
2021-09-29 14:20:49	zincy_	pavonia: You mean nicer interface for random access?
2021-09-29 14:21:06	zincy_	Interesting never heard of MArray before
2021-09-29 14:21:09	pavonia	Also faster than Map, I guess
2021-09-29 14:21:42	dminuoso	pavonia: It's a French commune.
2021-09-29 14:21:46	dminuoso	Err, zincy_!
2021-09-29 14:22:49	Heisen	Is using head and tail always bad even though I know that the list isn't empty? Also why doesn't my second solution work? https://paste.tomsmeding.com/YvFHcd6N
2021-09-29 14:22:53	zincy_	dminuso: Is that surprise you are feeling?
2021-09-29 14:23:04	kuribas	Heisen: yes
2021-09-29 14:23:13	kuribas	Heisen: if you know it isn't empty, you can pattern match.
2021-09-29 14:23:33	Heisen	How would I go about pattern matching there?
2021-09-29 14:23:34	dminuoso	And since you're in IO, you can also simply use exitFailure or throw an exception in case the list is, unexpectedly, empty
2021-09-29 14:23:39	dminuoso	printList (x:xs) = ...
2021-09-29 14:23:42	dminuoso	printList [] = ...
2021-09-29 14:23:47	kuribas	Heisen: don't write "if length l > 0"
2021-09-29 14:24:07	kuribas	Heisen: instead, write: case l of [] -> ...; x:xs -> ...
2021-09-29 14:24:41	kuribas	Heisen: or better: printList [] = ...; printList (x:xs) = ...
2021-09-29 14:27:52	⚡	dminuoso always starts with the more likely condition first
2021-09-29 14:28:14	dminuoso	Just a very cheap force of habit that avoids unnecessary pattern matches in the general case. :)
2021-09-29 14:28:30	←	azeem has quit (Read error: Connection reset by peer)
2021-09-29 14:29:32	→	azeem has joined #haskell
2021-09-29 14:29:56	kuribas	ghc will warn about those, no?
2021-09-29 14:30:52	Heisen	This is good? =) https://paste.tomsmeding.com/whUMkJ6j
2021-09-29 14:31:01	Heisen	Also thank you for your time
2021-09-29 14:31:35	kuribas	Heisen: better, but I prefer matching in the function declaration.
2021-09-29 14:34:25	→	yauhsien has joined #haskell
2021-09-29 14:36:47	←	eggplantade has quit (Remote host closed the connection)
2021-09-29 14:48:04	→	arpl has joined #haskell
2021-09-29 14:56:36	→	nfd has joined #haskell
2021-09-29 14:57:00	→	norskalm has joined #haskell
2021-09-29 14:59:48	←	yauhsien has quit (Remote host closed the connection)
2021-09-29 15:00:51	→	yauhsien has joined #haskell
2021-09-29 15:02:52	→	zer0bitz has joined #haskell
2021-09-29 15:04:24	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-29 15:04:45	←	arpl has quit (Quit: Client closed)
2021-09-29 15:05:24	←	yauhsien has quit (Remote host closed the connection)
2021-09-29 15:05:31	→	dschrempf has joined #haskell
2021-09-29 15:06:50	→	yauhsien has joined #haskell
2021-09-29 15:08:37	→	tromp has joined #haskell
2021-09-29 15:09:36	←	tinwood has quit (Remote host closed the connection)
2021-09-29 15:10:10	→	goepsilongo has joined #haskell
2021-09-29 15:10:29	←	Guest557 has quit (Remote host closed the connection)
2021-09-29 15:11:27	←	yauhsien has quit (Ping timeout: 252 seconds)
2021-09-29 15:12:06	←	goepsilongo_ has quit (Ping timeout: 245 seconds)
2021-09-29 15:12:34	→	tinwood has joined #haskell
2021-09-29 15:12:34	←	tinwood has quit (Changing host)
2021-09-29 15:12:34	→	tinwood has joined #haskell
2021-09-29 15:15:25	→	eggplantade has joined #haskell
2021-09-29 15:16:11	←	Heisen has quit (Quit: Client closed)
2021-09-29 15:18:11	←	spruit11 has quit (Ping timeout: 265 seconds)
2021-09-29 15:19:36	←	eggplantade has quit (Ping timeout: 245 seconds)
2021-09-29 15:21:00	←	rtjure has quit (Ping timeout: 264 seconds)
2021-09-29 15:22:27	←	xff0x has quit (Ping timeout: 246 seconds)
2021-09-29 15:23:06	→	iridium__ has joined #haskell
2021-09-29 15:24:32	→	raehik has joined #haskell
2021-09-29 15:27:38	←	iridium__ has quit (Quit: leaving)
2021-09-29 15:27:42	→	spruit11 has joined #haskell
2021-09-29 15:31:08	←	phma has quit (Read error: Connection reset by peer)
2021-09-29 15:31:47	→	phma has joined #haskell
2021-09-29 15:33:38	→	xff0x has joined #haskell
2021-09-29 15:38:21	←	azeem has quit (Read error: Connection reset by peer)
2021-09-29 15:38:38	→	azeem has joined #haskell
2021-09-29 15:38:48	→	yauhsien has joined #haskell
2021-09-29 15:40:37	←	azeem has quit (Read error: Connection reset by peer)
2021-09-29 15:41:22	→	azeem has joined #haskell
2021-09-29 15:42:56	→	arpl has joined #haskell
2021-09-29 15:42:56	←	yauhsien has quit (Ping timeout: 245 seconds)
2021-09-29 15:43:07	→	Heisen has joined #haskell
2021-09-29 15:44:55	Heisen	When I type for example fold in GHCi and then tab, can I somehow choose which one I want with my arrow keys or something?
2021-09-29 15:47:09	→	img_ has joined #haskell
2021-09-29 15:47:29	→	jpds has joined #haskell
2021-09-29 15:48:17	←	img has quit (Ping timeout: 250 seconds)
2021-09-29 15:49:05	→	ubert1 has joined #haskell
2021-09-29 15:50:26	←	ubert has quit (Ping timeout: 245 seconds)
2021-09-29 15:50:26	ℹ	ubert1 is now known as ubert
2021-09-29 15:51:13	←	shriekingnoise has quit (Quit: Quit)
2021-09-29 15:51:15	←	azeem has quit (Read error: Connection reset by peer)
2021-09-29 15:51:24	←	cods has quit (Ping timeout: 265 seconds)
2021-09-29 15:51:41	←	dschrempf has quit (Ping timeout: 245 seconds)
2021-09-29 15:52:58	→	azeem has joined #haskell
2021-09-29 15:54:45	←	Heisen has quit (Quit: Client closed)
2021-09-29 15:57:37	→	eggplantade has joined #haskell
2021-09-29 16:01:26	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-29 16:02:01	→	goepsilongo_ has joined #haskell
2021-09-29 16:02:03	→	mikoto-chan has joined #haskell
2021-09-29 16:02:06	←	eggplantade has quit (Ping timeout: 245 seconds)
2021-09-29 16:03:05	→	tromp has joined #haskell
2021-09-29 16:03:32	→	cods has joined #haskell
2021-09-29 16:04:36	←	goepsilongo has quit (Ping timeout: 245 seconds)
2021-09-29 16:11:37	→	enoq has joined #haskell
2021-09-29 16:11:58	→	alzgh has joined #haskell
2021-09-29 16:13:14	→	ph88 has joined #haskell
2021-09-29 16:14:33	←	arpl has quit (Quit: Client closed)
2021-09-29 16:15:29	→	merijn has joined #haskell
2021-09-29 16:16:09	→	yauhsien has joined #haskell
2021-09-29 16:17:11	dminuoso	No.
2021-09-29 16:17:40	dminuoso	If you want this type of interactive writing, consider using haskell-language-server.
2021-09-29 16:17:56	dminuoso	Since it exposes LSP, it integrates with many editors well.
2021-09-29 16:18:05	dminuoso	Most offer some kind of "narrowing"
2021-09-29 16:18:35	→	hololeap has joined #haskell
2021-09-29 16:18:50	dminuoso	Strictly speaking this could also with just with just say hasktags, but the HLS experience is quite good in general.
2021-09-29 16:20:36	←	pavonia has quit (Quit: Bye!)
2021-09-29 16:20:45	←	yauhsien has quit (Ping timeout: 252 seconds)
2021-09-29 16:20:47	←	benin036932301 has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-29 16:20:49	→	iridium__ has joined #haskell
2021-09-29 16:21:41	→	benin036932301 has joined #haskell
2021-09-29 16:23:48	←	benin036932301 has quit (Client Quit)
2021-09-29 16:24:44	→	benin036932301 has joined #haskell
2021-09-29 16:26:54	←	benin036932301 has quit (Client Quit)
2021-09-29 16:27:05	→	dschrempf has joined #haskell
2021-09-29 16:28:23	→	benin036932301 has joined #haskell
2021-09-29 16:28:44	←	iridium__ has quit (Quit: leaving)
2021-09-29 16:29:59	←	azeem has quit (Ping timeout: 252 seconds)
2021-09-29 16:30:49	→	alx741 has joined #haskell
2021-09-29 16:32:57	→	azeem has joined #haskell
2021-09-29 16:36:54	←	benin036932301 has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-29 16:37:48	→	benin036932301 has joined #haskell
2021-09-29 16:38:14	←	nfd has quit (Ping timeout: 252 seconds)
2021-09-29 16:38:28	←	Las[m] has quit (Quit: Reconnecting)
2021-09-29 16:40:21	←	lortabac has quit (Ping timeout: 265 seconds)
2021-09-29 16:40:24	arahael	Do we have a library that, for a given dtd, can generate random xmls? (Eg, for testing with quickcheck)?
2021-09-29 16:40:42	←	dschrempf has quit (Ping timeout: 265 seconds)
2021-09-29 16:41:04	→	AlexNoo_ has joined #haskell
2021-09-29 16:41:12	sshine	I haven't seen that before.
2021-09-29 16:41:45	Cajun	there was a `random-data` package or something like that, but im not sure if it dealt with xml (and i dont know what a dtd is)
2021-09-29 16:42:37	←	benin036932301 has quit (Client Quit)
2021-09-29 16:42:54	sshine	Cajun, a DTD is a document type definition. sort of like JSON Schema, but from the W3C days.
2021-09-29 16:43:11	←	Alex_test has quit (Ping timeout: 252 seconds)
2021-09-29 16:43:19	→	Soanvig has joined #haskell
2021-09-29 16:43:21	←	raehik has quit (Ping timeout: 245 seconds)
2021-09-29 16:43:29	arahael	I'm thinking I'll just write it myself (though by manually interpreting the dtd).  This particular one is simple enough.
2021-09-29 16:43:41	sshine	Cajun, DTDs are written in SGML, which is a meta-syntax for specifying HTML and XML.
2021-09-29 16:43:43	arahael	(Ie, hardcoding it)
2021-09-29 16:43:47	←	AlexZenon has quit (Ping timeout: 252 seconds)
2021-09-29 16:44:24	←	AlexNoo has quit (Ping timeout: 252 seconds)
2021-09-29 16:45:37	Soanvig	Hello guys. I have question about Parsec in that case I cannot really solve by myself. So my application uses Parsec and I want to show Parsec errors to the user. However Parsec heavily relies on `show` to print it's errors (https://hackage.haskell.org/package/parsec-3.1.14.0/docs/src/Text.Parsec.Error.html#showErrorMessages), and I need normal,
2021-09-29 16:45:38	Soanvig	non-escaped String as error message. Any idea how to handle that (except creating error formatter by myself)?
2021-09-29 16:45:39	→	raehik has joined #haskell
2021-09-29 16:45:42	→	benin036932301 has joined #haskell
2021-09-29 16:46:21	sshine	Cajun, so the <!DOCTYPE ...> part of XML is the DTD header :) and the <!...> tags in general is SGML.
2021-09-29 16:46:50	Cajun	interesting, today i learned :)
2021-09-29 16:48:00	hpc	you'll wish you didn't learn - it means parsing xml is an impure operation, since the sgml lives behind an http url
2021-09-29 16:48:14	hpc	there have been some pretty entertaining CVEs based on that
2021-09-29 16:48:28	arahael	Not to mention entity expansion.
2021-09-29 16:48:47	sshine	Cajun, do you mean 'generic-random'? (can't find 'random-data')
2021-09-29 16:48:49	→	lortabac has joined #haskell
2021-09-29 16:49:20	→	AlexZenon has joined #haskell
2021-09-29 16:49:21	→	Alex_test has joined #haskell
2021-09-29 16:49:51	Cajun	that wasnt it, ill have to search for it. it used a dataset and generated random names and stuff but it may have also included file formats. didnt read into it beyond the readme 
2021-09-29 16:49:54	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-29 16:49:57	←	cunne has quit (Ping timeout: 246 seconds)
2021-09-29 16:50:12	hololeap	is it possible to coerce inside some container `f`, even if it isn't a Functor, specifically a TVar?
2021-09-29 16:50:14	←	benin036932301 has quit (Client Quit)
2021-09-29 16:51:00	hpc	does it need to be generic wrt f?
2021-09-29 16:51:09	hpc	the various *Vars have their own modify functions
2021-09-29 16:51:13	→	benin036932301 has joined #haskell
2021-09-29 16:51:35	Cajun	`fakedata` and `fakedata-quickcheck` sshine
2021-09-29 16:52:20	Cajun	seems its more for data than files sadly
2021-09-29 16:52:33	hololeap	newtype FunctorMap map f k a = FunctorMap { getFunctorMap :: map k (f a) }
2021-09-29 16:52:54	hololeap	newtype Trie map f k a = Trie { getTrie :: Cofree (FunctorMap map f k) a }
2021-09-29 16:53:11	→	CiaoSen has joined #haskell
2021-09-29 16:53:34	hololeap	unwrap :: Trie map f k a -> FunctorMap map f k (Trie map f k a)
2021-09-29 16:53:40	→	eggplantade has joined #haskell
2021-09-29 16:53:57	←	benin036932301 has quit (Client Quit)
2021-09-29 16:54:32	hololeap	i need this: FunctorMap map f k (Cofree (FunctorMap map f k) a) -> FunctorMap map f k (Trie map f k a)
2021-09-29 16:54:58	hololeap	the Cofree there should be coercable into a Trie
2021-09-29 16:55:09	→	benin036932301 has joined #haskell
2021-09-29 16:55:46	hololeap	but if `f` isn't a Functor (in the case of TVar) I stop being able to use `unwrap`
2021-09-29 16:56:36	hololeap	if I just `fmap` the Trie constructor into the FunctorMap
2021-09-29 16:57:56	←	eggplantade has quit (Ping timeout: 245 seconds)
2021-09-29 17:03:55	hololeap	http://sprunge.us/GAC2hR
2021-09-29 17:06:31	→	[itchyjunk] has joined #haskell
2021-09-29 17:08:50	arahael	Oh, I could use a RELAX NG schema instead.
2021-09-29 17:09:04	←	benin036932301 has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-29 17:09:58	→	benin036932301 has joined #haskell
2021-09-29 17:10:58	ℹ	AlexNoo_ is now known as AlexNoo
2021-09-29 17:10:59	sshine	Cajun, fakedata seems pretty nice. but it seems to generate predefined types, and generally not deeply nested stuff, even though those predefined types compose nicely.
2021-09-29 17:11:26	sshine	Cajun, I'll have to remember to use fakedata for something fun soon, or I'll forget it exists. there are too many interesting packages.
2021-09-29 17:12:06	→	dschrempf has joined #haskell
2021-09-29 17:12:23	←	CiaoSen has quit (Ping timeout: 252 seconds)
2021-09-29 17:13:04	→	CiaoSen has joined #haskell
2021-09-29 17:13:47	hololeap	hm, it looks like if I specify `map` as HashMap and `f` as TVar, it works. is there any way to constrain a type variable as "not nominal"?
2021-09-29 17:14:30	←	enoq has quit (Quit: enoq)
2021-09-29 17:17:57	←	mestre has quit (Quit: Lost terminal)
2021-09-29 17:20:51	←	jonathanx has quit (Ping timeout: 245 seconds)
2021-09-29 17:24:59	→	jonathanx has joined #haskell
2021-09-29 17:29:30	←	michalz has quit (Read error: No route to host)
2021-09-29 17:30:39	←	max22- has quit (Ping timeout: 268 seconds)
2021-09-29 17:31:16	←	CiaoSen has quit (Ping timeout: 245 seconds)
2021-09-29 17:31:26	hololeap	We cannot know what roles the parameters to ‘map k’ have; we must assume that the role is nominal
2021-09-29 17:31:42	←	benin036932301 has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-29 17:31:54	→	lavaman has joined #haskell
2021-09-29 17:32:34	→	benin036932301 has joined #haskell
2021-09-29 17:33:17	←	bitdex has quit (Quit: = "")
2021-09-29 17:34:11	←	mikoto-chan has quit (Ping timeout: 245 seconds)
2021-09-29 17:40:08	→	merijn has joined #haskell
2021-09-29 17:40:15	→	eggplantade has joined #haskell
2021-09-29 17:42:05	←	Soanvig has quit (Quit: Client closed)
2021-09-29 17:44:36	←	eggplantade has quit (Ping timeout: 245 seconds)
2021-09-29 17:44:47	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-29 17:46:19	→	xiongxin has joined #haskell
2021-09-29 17:58:45	→	mikoto-chan has joined #haskell
2021-09-29 18:00:44	→	waleee has joined #haskell
2021-09-29 18:02:31	→	goepsilongo has joined #haskell
2021-09-29 18:03:21	←	goepsilongo_ has quit (Ping timeout: 245 seconds)
2021-09-29 18:04:39	→	Psybur has joined #haskell
2021-09-29 18:04:44	⚡	hololeap . o (RoleAnnotations ?)
2021-09-29 18:07:23	←	dschrempf has quit (Quit: WeeChat 3.3)
2021-09-29 18:08:51	xerox	on mac do you have CTRL+arrows and CTRL+A or CTRL+E to move between words, to the beginning of the line, to the end of line work?
2021-09-29 18:10:20	geekosaur	hololeap, RoleAnnotations work when declaring types, but not when constraining them
2021-09-29 18:10:31	→	eggplantade has joined #haskell
2021-09-29 18:10:54	geekosaur	you can't say e.g. role t ~ nominal => ...
2021-09-29 18:11:33	←	mikoto-chan has quit (Ping timeout: 265 seconds)
2021-09-29 18:12:10	→	mikoto-chan has joined #haskell
2021-09-29 18:12:24	geekosaur	xerox, haskeline should work the same way on all platforms, which is part of why ghci uses it. same with readline or editline (Mac "built-in" line editing)
2021-09-29 18:12:53	geekosaur	none of them work with a bare getLine, except within ghci where I think haskeline is always used
2021-09-29 18:13:00	xerox	geekosaur: it is extremely broken here
2021-09-29 18:15:01	←	eggplantade has quit (Ping timeout: 245 seconds)
2021-09-29 18:17:01	→	pbrisbin has joined #haskell
2021-09-29 18:17:37	→	yauhsien has joined #haskell
2021-09-29 18:18:39	geekosaur	with getLine in Haskell you will get only very basic line editing (backspace for delete, ^W deletes previous word, ^U deletes back to the beginning of the line; no arrows or other control keys)
2021-09-29 18:19:17	geekosaur	you need to explicitly use haskeline or readline to get real line editing
2021-09-29 18:19:49	xerox	geekosaur: I'm not trying to make a prompt myself, I'm using ghci
2021-09-29 18:20:45	geekosaur	odd. do you have a haskeline config file (https://downloads.haskell.org/ghc/latest/docs/html/users_guide/ghci.html#the-haskeline-file) ?
2021-09-29 18:22:01	←	fvr has quit (Quit: Connection closed for inactivity)
2021-09-29 18:22:06	←	yauhsien has quit (Ping timeout: 245 seconds)
2021-09-29 18:22:28	→	jespada has joined #haskell
2021-09-29 18:24:23	→	machinedgod has joined #haskell
2021-09-29 18:25:39	geekosaur	in particular you might have (perhaps accidentally) switched haskeline to vi emulation mode (I think that works these days?)
2021-09-29 18:26:41	geekosaur	in which case it starts out in insert mode and you have to press esc to use commands
2021-09-29 18:27:19	xerox	hmm I have ghc 8.10.7 not 9
2021-09-29 18:27:43	geekosaur	you might not have noticed previously because iirc vi emulation was broken/ignored for a while
2021-09-29 18:28:12	xerox	ok, I do not have that file
2021-09-29 18:29:15	xerox	making one with editMode: Emacs does not change the brokennes
2021-09-29 18:29:21	←	hyiltiz has quit (Ping timeout: 246 seconds)
2021-09-29 18:29:28	xerox	it does work but the display of what is doing is rong
2021-09-29 18:29:30	xerox	*wrong
2021-09-29 18:30:12	geekosaur	weird. but that sounds more like a terminal issue than a ghci / editline issue
2021-09-29 18:30:52	geekosaur	do you have something like colors in the prompt?
2021-09-29 18:30:59	xerox	this is macos terminal.app
2021-09-29 18:31:14	xerox	nope
2021-09-29 18:31:37	→	michalz has joined #haskell
2021-09-29 18:32:06	xerox	for example ctrl+left arrow goes back 1 char visually, but functionally it seems to do the right thing and go back a word, or CTRL+A also goes back 1 char visually, but CTRL+K correctly functionally deletes the whole line such that if I type '2' and RET it evaluates to 2 no matter what was on the line before, does that make sense?
2021-09-29 18:32:24	geekosaur	this is sounding very bizarre
2021-09-29 18:32:42	geekosaur	actually this is starting to sound like a bad terminfo entry
2021-09-29 18:32:53	geekosaur	except it takes quite a lot of work to get that :)
2021-09-29 18:33:36	→	hyiltiz has joined #haskell
2021-09-29 18:34:02	geekosaur	even if you somehow selected the wrong terminfo entry it should mostly work as expected these days, since almost all terminals emulate VT240 / xterm
2021-09-29 18:34:24	←	lavaman has quit (Ping timeout: 252 seconds)
2021-09-29 18:34:59	xerox	geekosaur: https://i.imgur.com/HYJRDMC.mp4
2021-09-29 18:35:24	xerox	geekosaur: every other program that is not ghci has correct line editing, where these work as expected
2021-09-29 18:35:46	xerox	see how that CTRL+A goes back 1 char not all 3 of them
2021-09-29 18:36:04	geekosaur	yeh, I understood your description, that was what made me think terminfo
2021-09-29 18:36:18	xerox	wouldn't that mean the other line editing programs would also be broken?
2021-09-29 18:36:43	geekosaur	hm, yes
2021-09-29 18:37:19	geekosaur	except there's like 6 ways to do that particular positioning operation and other programs might use a different one from haskeline
2021-09-29 18:37:56	geekosaur	terminals are muy complicated
2021-09-29 18:38:17	geekosaur	lots of ways for things to go wrong :(
2021-09-29 18:39:42	←	jakefromstatefar has quit (Ping timeout: 240 seconds)
2021-09-29 18:40:48	←	maerwald[m] has quit (Ping timeout: 264 seconds)
2021-09-29 18:40:54	←	infinisil has quit (Ping timeout: 246 seconds)
2021-09-29 18:41:10	←	vaibhavsagar[m] has quit (Ping timeout: 268 seconds)
2021-09-29 18:41:24	←	ormaaj has quit (Ping timeout: 264 seconds)
2021-09-29 18:41:58	geekosaur	hm, I'm on 8.10.7 and it works here, so presumably not a haskeline bug
2021-09-29 18:42:05	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-29 18:42:40	xerox	darn! :)
2021-09-29 18:43:02	xerox	I cannot try 9.0.1 as it is not available on arm
2021-09-29 18:43:54	geekosaur	pretty sure it works under rosetta
2021-09-29 18:44:08	geekosaur	but yes, native awaits 9.2.1
2021-09-29 18:44:39	xerox	right but then I need a x64 ghcup in parallel if I want to manage nonnative bins as well
2021-09-29 18:45:16	maerwald	xerox: 9.0.1 is not available where?
2021-09-29 18:45:27	geekosaur	M1 Mac, native
2021-09-29 18:45:41	→	tromp has joined #haskell
2021-09-29 18:46:06	xerox	maerwald: https://i.imgur.com/8bIrzlz.png
2021-09-29 18:46:21	xerox	on M1 yes
2021-09-29 18:46:34	→	nvmd has joined #haskell
2021-09-29 18:46:53	maerwald	9.2.0.20210821 is though
2021-09-29 18:47:00	maerwald	it just appears to be missing from ghcup metadata
2021-09-29 18:47:03	→	Morrow has joined #haskell
2021-09-29 18:47:04	xerox	ah neat
2021-09-29 18:47:08	maerwald	I'll add it
2021-09-29 18:47:14	xerox	I'll give it a whirl
2021-09-29 18:49:07	maerwald	ghcup install ghc -u https://downloads.haskell.org/~ghc/9.2.1-rc1/ghc-9.2.0.20210821-aarch64-apple-darwin.tar.xz 9.2.0.20210821
2021-09-29 18:50:42	→	Organizers|Robin has joined #haskell
2021-09-29 18:51:40	←	Morrow has quit (Ping timeout: 265 seconds)
2021-09-29 18:51:54	xerox	hmpf, that one is broken on my system as well
2021-09-29 18:51:55	dminuoso	    • A_Lens cannot be composed with A_Lens
2021-09-29 18:52:00	dminuoso	Mmm, optics diagnostic fail. :(
2021-09-29 18:56:23	→	yinghua has joined #haskell
2021-09-29 19:03:46	←	jonathanx has quit (Ping timeout: 245 seconds)
2021-09-29 19:06:00	xerox	I wonder what can I bang my head against to fix this
2021-09-29 19:06:16	dminuoso	Concrete walls are good.
2021-09-29 19:07:07	→	doyougnu has joined #haskell
2021-09-29 19:07:10	Psybur	xerox, a button that when pressed gives me money
2021-09-29 19:07:18	⚡	shapr hugs xerox 
2021-09-29 19:07:26	xerox	hey shapr :-)
2021-09-29 19:07:33	shapr	how you doin xerox ?
2021-09-29 19:07:37	xerox	p good!!
2021-09-29 19:07:45	xerox	how about you
2021-09-29 19:07:45	shapr	Any cool projects lately?
2021-09-29 19:08:19	xerox	yeah I'm doing stuff, related to wood and agricolture, a whole other domain of things, it's good
2021-09-29 19:08:37	shapr	I'm writing small fun things for my own use: https://github.com/shapr/bloohm and https://github.com/shapr/sandwatch and https://github.com/shapr/takedouble
2021-09-29 19:08:44	⚡	xerox takes a look
2021-09-29 19:09:47	shapr	xerox: do you write about your wood / agriculture adventures? blog or place to post things?
2021-09-29 19:10:07	xerox	shapr: not yet, just started out, that's a good idea tho I'll see what I can do
2021-09-29 19:10:15	shapr	cool, I'd read for sure!
2021-09-29 19:11:02	shapr	I want to tune sandwatch and publish it, and I don't know how to publish bloohm so that many can use it.
2021-09-29 19:11:08	→	brandonh has joined #haskell
2021-09-29 19:11:42	shapr	xerox: will you visit north america anytime soon?
2021-09-29 19:11:47	shapr	would be nice to see you again
2021-09-29 19:12:11	xerox	shapr: I doubt it, but I would love to meet again for sure, you foresee coming to this side of the atlantic anytime in the future?
2021-09-29 19:12:30	shapr	hm, thinking of visiting scandinavia again
2021-09-29 19:12:35	shapr	might could visit the south too
2021-09-29 19:14:08	xerox	that'd be nice, how many years has it been, I think it was something like 2006-7-8 for the MSR meets
2021-09-29 19:14:19	shapr	might have been 2005
2021-09-29 19:14:23	xerox	!
2021-09-29 19:14:25	shapr	I think that's when AngloHaskell happened
2021-09-29 19:14:36	xerox	I have fond memories of that time
2021-09-29 19:14:38	shapr	so, fifteen or sixteen years?
2021-09-29 19:14:39	shapr	me too!
2021-09-29 19:15:00	→	eggplantade has joined #haskell
2021-09-29 19:15:08	xerox	Heffalump yelling "duck!!" and I could see no duck, only to learn it is also a verb and my head was saved from a hanging branch on the cam river
2021-09-29 19:15:28	shapr	:-D
2021-09-29 19:15:32	shapr	punting was fun
2021-09-29 19:15:56	xerox	with duncan bridge-hopping 
2021-09-29 19:16:23	shapr	yeah, good adventures!
2021-09-29 19:16:23	xerox	:)))
2021-09-29 19:16:47	xerox	have you been at other haskell related meets afterwards? I had some issues and fell off the map for a while afterwards
2021-09-29 19:19:11	←	eggplantade has quit (Ping timeout: 245 seconds)
2021-09-29 19:19:17	→	epolanski has joined #haskell
2021-09-29 19:24:09	shapr	I fell off the map for a few years myself, but I have a haskell job for the past two years, yay!
2021-09-29 19:26:24	→	Lycurgus has joined #haskell
2021-09-29 19:26:38	←	unmanbearpig has quit (Quit: unmanbearpig)
2021-09-29 19:27:07	→	unmanbearpig has joined #haskell
2021-09-29 19:27:34	→	merijn has joined #haskell
2021-09-29 19:28:34	→	wroathe has joined #haskell
2021-09-29 19:28:34	←	wroathe has quit (Changing host)
2021-09-29 19:28:34	→	wroathe has joined #haskell
2021-09-29 19:29:30	→	max22- has joined #haskell
2021-09-29 19:31:11	→	MQ-17J has joined #haskell
2021-09-29 19:32:28	→	Sgeo has joined #haskell
2021-09-29 19:32:35	←	xsperry has quit (Ping timeout: 252 seconds)
2021-09-29 19:32:57	←	brandonh has quit (Quit: brandonh)
2021-09-29 19:34:12	→	slack1256 has joined #haskell
2021-09-29 19:36:27	slack1256	I got the impression that TH made compilation slower and memory usage bigger. I remember some folk advice to control that, such as separating TH heavy modules in multiple submodule so GHC has an easier time. Is that still valid?
2021-09-29 19:37:25	slack1256	I am using multiple graphql queries/mutations and I am generating the corresponding ADTs via TH. But I am at the border where memory usage is too much.
2021-09-29 19:38:11	→	shriekingnoise has joined #haskell
2021-09-29 19:41:48	dminuoso	slack1256: It's really hard to say in general.
2021-09-29 19:42:08	dminuoso	Without knowing the details of what your TH code generates, and without GHC profiling options enabled.
2021-09-29 19:42:30	dminuoso	GHC has a bunch of flags that make it tell you a lot of information about its internals
2021-09-29 19:43:43	Lycurgus	really at the border or just ghc prealloced to the maz?
2021-09-29 19:43:50	Lycurgus	*max
2021-09-29 19:44:22	←	waleee has quit (Quit: WeeChat 3.3)
2021-09-29 19:44:23	Lycurgus	out the kazoo, or whatever quanta
2021-09-29 19:44:30	slack1256	No, border of what my machine and peers can give it. Which is 3Gb.
2021-09-29 19:45:09	dminuoso	3Gb is quite.. slim..
2021-09-29 19:45:15	Lycurgus	so you have 3GB RAM and it's swapping with nothing else running?
2021-09-29 19:45:25	←	hendursa1 has quit (Ping timeout: 276 seconds)
2021-09-29 19:45:34	dminuoso	For Haskell I wouldn't pick a machine without 8G of ram for non-trivial projects. It's so easy to blow up memory usage.. :(
2021-09-29 19:45:42	slack1256	Well it is a 4 gb machine.
2021-09-29 19:45:42	dminuoso	s/without/with less than/
2021-09-29 19:46:10	slack1256	I was thinking on advice in the line of https://www.parsonsmatt.org/2019/11/27/keeping_compilation_fast.html . There it shows that GHC is superlinear on module size respect to memory usage.
2021-09-29 19:46:21	Lycurgus	peers?
2021-09-29 19:46:28	slack1256	Given that TH expands before compilation, that can be a source of slowness.
2021-09-29 19:46:34	slack1256	Lycurgus: closed source project.
2021-09-29 19:46:40	Lycurgus	ah
2021-09-29 19:46:50	→	Flonk has joined #haskell
2021-09-29 19:46:50	Lycurgus	so the group has set a limit
2021-09-29 19:47:08	dminuoso	slack1256: But yes, module size has a notable impact on compilation time.
2021-09-29 19:47:15	→	hendursa1 has joined #haskell
2021-09-29 19:47:21	janus	lortabac: i found out my issue with DataKinds was due to TemplateHaskell and DataKinds somehow interacting
2021-09-29 19:47:26	dminuoso	It's part of why, for the code generator Im working on right now, carefully generates many small modules.
2021-09-29 19:47:42	dminuoso	(or rather, notable impact on memory usage)
2021-09-29 19:48:12	slack1256	More like, we are distributed through the world and everybody has different machines. They have in average around 4GB for compiling projects. If haskell uses more memory than that, people will try to avoid to compile it or use it. Which is a shame because is the interaction with the compiler while programming that is soo useful.
2021-09-29 19:48:48	dminuoso	slack1256: And in fact, this is why I dont use TH for code generation, but rather a separate haskell program with a bunch of tooling to make that task easier.
2021-09-29 19:49:00	Lycurgus	most phones have 4X that these days
2021-09-29 19:49:04	slack1256	dminuoso: So it seems reasonable to try to break the big TH module on a series of little one and see if it get better?
2021-09-29 19:49:15	slack1256	Lycurgus: in the US.
2021-09-29 19:49:16	dminuoso	slack1256: Yeah.
2021-09-29 19:49:22	dminuoso	slack1256: Or even just not doing this in TH at all.
2021-09-29 19:49:27	janus	slack1256: where did you get the 4gb figure from?
2021-09-29 19:49:43	⚡	Lycurgus suspects hs is first world thing
2021-09-29 19:49:44	slack1256	myself and my other peer in the philiphines.
2021-09-29 19:50:16	⚡	Lycurgus ... with outliers
2021-09-29 19:50:29	slack1256	I am develop on a phenom II from 2008 with 5.3 Gb, kill me.
2021-09-29 19:50:48	Lycurgus	janus e said it was an arbitrary group decided limit
2021-09-29 19:51:13	dminuoso	slack1256: Then perhaps indeed, consider a separate code generator program
2021-09-29 19:51:27	dminuoso	And generate smaller modules.
2021-09-29 19:51:33	slack1256	Arbitrary in the sense I don't decide the machine of the remote workers. Yet the usage should be reasonable even for them.
2021-09-29 19:51:47	slack1256	dminuoso: Awesome. Any tool I should be looking at?
2021-09-29 19:51:51	Lycurgus	hs, in general, is not the skinny
2021-09-29 19:51:56	janus	hmm so you have 5.3 gb, the average is 4gb though. so your buddy must have 2.7 gb. interesting
2021-09-29 19:52:04	dminuoso	slack1256: I use haskell-src-exts together with haskell-src-exts-qq
2021-09-29 19:52:06	Lycurgus	ghcjs and the like notwithstandig
2021-09-29 19:52:28	dminuoso	slack1256: oh and haskell-src-exts-simple
2021-09-29 19:52:30	slack1256	janus: There is other people. So far the one with problems is the one from the philiphines.
2021-09-29 19:52:36	dminuoso	these three fit nicely together, it's mostly similar to TH
2021-09-29 19:52:45	dminuoso	Except you dont have any ambient state, you have to manage that yourself
2021-09-29 19:52:51	slack1256	Awesome, thanks dminuoso !
2021-09-29 19:53:30	dminuoso	Note that the -qq package likely needs to used from https://github.com/bezirg/haskell-src-exts-qq
2021-09-29 19:53:40	dminuoso	Because the original package is no longer maintained, a really minor issue
2021-09-29 19:53:50	dminuoso	Someone ought to just take over the original package and push that update..
2021-09-29 19:53:55	Lycurgus	send the Phillipenes some memory
2021-09-29 19:54:22	Lycurgus	prolly cheaper
2021-09-29 19:54:22	slack1256	Instead of fixing what is broken on our project? come on Lycurgus.
2021-09-29 19:54:49	Lycurgus	yeah I wasn't clear if it was broken or normal ghc ops
2021-09-29 19:54:54	Lycurgus	on a big codebase
2021-09-29 19:55:43	dminuoso	slack1256: In case you're curious, https://github.com/bezirg/haskell-src-exts-qq/commit/226e1268c372b6b1f8ec807873f1df23383a1faa is the sole reason why. :)
2021-09-29 19:56:01	⚡	slack1256 reads
2021-09-29 19:57:15	dminuoso	So for our code generator I work inside some `StateT G IO` where G is a record that keeps track of a buch of things, like definitions, imports, pragmas, etc, and at certain points I have a monadic `flush` action that builds a haskell-src-exts module based on all the currently built stuff
2021-09-29 19:57:24	→	waleee has joined #haskell
2021-09-29 19:58:12	Lycurgus	there's ur solution slack1256 
2021-09-29 19:58:53	slack1256	Oh, you do the "buffering" yourself. Neat.
2021-09-29 20:00:11	→	ec has joined #haskell
2021-09-29 20:00:46	←	ec has quit (Remote host closed the connection)
2021-09-29 20:01:06	→	slowButPresent has joined #haskell
2021-09-29 20:01:10	→	ec has joined #haskell
2021-09-29 20:07:12	→	Null_A has joined #haskell
2021-09-29 20:08:14	→	ub has joined #haskell
2021-09-29 20:08:30	←	cheater has quit (Remote host closed the connection)
2021-09-29 20:08:48	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-29 20:09:45	→	MQ-17J has joined #haskell
2021-09-29 20:13:14	→	hnOsmium0001 has joined #haskell
2021-09-29 20:15:14	→	cheater has joined #haskell
2021-09-29 20:19:14	→	yauhsien has joined #haskell
2021-09-29 20:20:26	→	Morrow has joined #haskell
2021-09-29 20:21:48	←	ec has quit (Remote host closed the connection)
2021-09-29 20:22:42	→	goepsilongo_ has joined #haskell
2021-09-29 20:23:51	←	yauhsien has quit (Ping timeout: 252 seconds)
2021-09-29 20:24:11	←	goepsilongo has quit (Ping timeout: 245 seconds)
2021-09-29 20:25:04	←	dyeplexer has quit (Read error: Connection reset by peer)
2021-09-29 20:28:00	←	acidjnk_new3 has quit (Ping timeout: 265 seconds)
2021-09-29 20:29:23	←	Lycurgus has quit (Quit: Exeunt)
2021-09-29 20:34:37	←	azeem has quit (Ping timeout: 265 seconds)
2021-09-29 20:35:43	→	azeem has joined #haskell
2021-09-29 20:35:50	→	xsperry has joined #haskell
2021-09-29 20:35:50	←	xsperry has quit (Changing host)
2021-09-29 20:35:50	→	xsperry has joined #haskell
2021-09-29 20:36:05	→	Tuplanolla has joined #haskell
2021-09-29 20:36:48	→	gdhffd[m] has joined #haskell
2021-09-29 20:38:38	→	yauhsien has joined #haskell
2021-09-29 20:39:15	→	eggplantade has joined #haskell
2021-09-29 20:39:22	→	goepsilongo has joined #haskell
2021-09-29 20:41:41	←	goepsilongo_ has quit (Ping timeout: 245 seconds)
2021-09-29 20:43:21	←	eggplantade has quit (Ping timeout: 245 seconds)
2021-09-29 20:44:08	←	xff0x has quit (Ping timeout: 252 seconds)
2021-09-29 20:44:53	←	gdhffd[m] has left #haskell
2021-09-29 20:45:06	→	xff0x has joined #haskell
2021-09-29 20:45:51	←	xiongxin has quit (Ping timeout: 252 seconds)
2021-09-29 20:46:25	→	Guest2 has joined #haskell
2021-09-29 20:46:29	→	xiongxin has joined #haskell
2021-09-29 20:47:15	←	yauhsien has quit (Remote host closed the connection)
2021-09-29 20:49:24	←	ub has quit (Read error: Connection reset by peer)
2021-09-29 20:49:41	→	ub has joined #haskell
2021-09-29 20:49:46	→	yauhsien has joined #haskell
2021-09-29 20:52:13	→	eggplantade has joined #haskell
2021-09-29 20:52:21	→	ilkecan[m] has joined #haskell
2021-09-29 20:53:00	←	ub has quit (Read error: Connection reset by peer)
2021-09-29 20:53:00	←	wroathe has quit (Ping timeout: 252 seconds)
2021-09-29 20:53:06	→	ub1 has joined #haskell
2021-09-29 20:53:27	→	segfaultfizzbuzz has joined #haskell
2021-09-29 20:53:46	←	geekosaur has quit (Quit: Leaving)
2021-09-29 20:54:21	←	Guest2 has left #haskell
2021-09-29 20:54:36	←	yauhsien has quit (Ping timeout: 245 seconds)
2021-09-29 20:55:24	ℹ	ub1 is now known as ub
2021-09-29 20:56:16	→	geekosaur has joined #haskell
2021-09-29 21:04:27	←	hendursa1 has quit (Quit: hendursa1)
2021-09-29 21:04:53	→	hendursaga has joined #haskell
2021-09-29 21:05:14	←	xiongxin has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-09-29 21:06:22	←	byorgey has quit (Quit: leaving)
2021-09-29 21:06:29	←	lortabac has quit (Quit: WeeChat 2.8)
2021-09-29 21:06:29	→	byorgey has joined #haskell
2021-09-29 21:08:02	←	norskalm has quit (Ping timeout: 256 seconds)
2021-09-29 21:08:38	←	eggplantade has quit (Remote host closed the connection)
2021-09-29 21:10:38	←	doyougnu has quit (Remote host closed the connection)
2021-09-29 21:12:49	→	tzh has joined #haskell
2021-09-29 21:14:03	fryguybob	tabaqui, sclv: I have no idea if this is actually related to your problem, but the RTS does hang on to trec chunks to recycle them with the idea that they are hot in the cache.
2021-09-29 21:14:59	→	chris has joined #haskell
2021-09-29 21:15:03	ℹ	chris is now known as Guest3846
2021-09-29 21:16:06	fryguybob	If you touch *a lot* of TVars once and then not much after that, this is clearly not ideal.  We shouldn't be keeping more than would be resident in cache anyway.  Maybe a workaround would be to set the number of capabilities to 1, GC, then set it back up to N.
2021-09-29 21:21:04	←	cfricke has quit (Quit: WeeChat 3.2.1)
2021-09-29 21:27:56	←	merijn has quit (Ping timeout: 245 seconds)
2021-09-29 21:29:25	←	benin036932301 has quit (Quit: The Lounge - https://thelounge.chat)
2021-09-29 21:29:30	→	eggplantade has joined #haskell
2021-09-29 21:33:05	←	[itchyjunk] has quit (Remote host closed the connection)
2021-09-29 21:33:42	←	ub has quit (Remote host closed the connection)
2021-09-29 21:33:46	←	eggplantade has quit (Ping timeout: 245 seconds)
2021-09-29 21:34:51	→	yauhsien has joined #haskell
2021-09-29 21:36:55	→	slac42908 has joined #haskell
2021-09-29 21:39:05	←	slack1256 has quit (Ping timeout: 252 seconds)
2021-09-29 21:39:50	←	yauhsien has quit (Ping timeout: 250 seconds)
2021-09-29 21:41:04	←	max22- has quit (Quit: Leaving)
2021-09-29 21:41:54	→	max22- has joined #haskell
2021-09-29 21:43:33	→	slack1256 has joined #haskell
2021-09-29 21:44:39	←	Guest3846 has quit (Remote host closed the connection)
2021-09-29 21:45:26	←	slac42908 has quit (Ping timeout: 245 seconds)
2021-09-29 21:49:54	→	nfd has joined #haskell
2021-09-29 21:50:14	→	chris has joined #haskell
2021-09-29 21:50:18	ℹ	chris is now known as Guest1239
2021-09-29 21:54:47	→	merijn has joined #haskell
2021-09-29 21:54:51	←	Guest1239 has quit (Ping timeout: 265 seconds)
2021-09-29 21:54:54	→	eggplantade has joined #haskell
2021-09-29 21:57:10	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-29 21:59:12	←	eggplantade has quit (Ping timeout: 245 seconds)
2021-09-29 21:59:41	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-29 21:59:42	→	_ht has joined #haskell
2021-09-29 22:03:31	←	kuribas has quit (Remote host closed the connection)
2021-09-29 22:05:13	→	mc47 has joined #haskell
2021-09-29 22:06:43	→	boxscape_ has joined #haskell
2021-09-29 22:13:16	←	Null_A has quit (Remote host closed the connection)
2021-09-29 22:15:34	→	Null_A has joined #haskell
2021-09-29 22:20:46	←	Cajun has quit (Quit: Client closed)
2021-09-29 22:20:57	←	chele has quit (Remote host closed the connection)
2021-09-29 22:24:03	→	tromp has joined #haskell
2021-09-29 22:29:10	←	cheater has quit (Ping timeout: 265 seconds)
2021-09-29 22:29:47	→	eggplantade has joined #haskell
2021-09-29 22:30:44	←	eggplantade has quit (Remote host closed the connection)
2021-09-29 22:30:53	→	eggplantade has joined #haskell
2021-09-29 22:31:19	→	lavaman has joined #haskell
2021-09-29 22:31:20	→	merijn has joined #haskell
2021-09-29 22:32:15	←	notzmv has quit (Ping timeout: 246 seconds)
2021-09-29 22:35:26	←	lavaman has quit (Ping timeout: 245 seconds)
2021-09-29 22:35:51	→	cheater has joined #haskell
2021-09-29 22:47:06	←	MQ-17J has quit (Ping timeout: 245 seconds)
2021-09-29 22:47:24	←	ystael has quit (Ping timeout: 252 seconds)
2021-09-29 22:48:15	→	ystael has joined #haskell
2021-09-29 22:50:57	segfaultfizzbuzz	i have a bit of a philosophical question here, feel free to have me not ask this due to it being too fuzzy:
2021-09-29 22:52:04	segfaultfizzbuzz	when i was introduced to groups for the first time i felt that the concept of a group was fundamentally descriptive, and by this i mean that the group does not "exist" and is not "as real" as other mathematical objects
2021-09-29 22:52:27	segfaultfizzbuzz	in the same way that the color red does not exist, there are only red cars and red buildings and soforth
2021-09-29 22:53:07	segfaultfizzbuzz	i never had a mechanism to justify this view until recently, where i came across a discussion of the monster group
2021-09-29 22:53:38	segfaultfizzbuzz	and a clear presentation of the various "unnatural" objects which satisfy the laws of a group
2021-09-29 22:53:44	monochrom	Ah, if this will not involve Haskell, then #haskell-offtopic is a good place.
2021-09-29 22:53:51	segfaultfizzbuzz	okay i will jump over there
2021-09-29 22:54:26	→	econo has joined #haskell
2021-09-29 22:58:15	→	emf has joined #haskell
2021-09-29 22:59:50	→	MQ-17J has joined #haskell
2021-09-29 23:01:06	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-29 23:01:14	→	notzmv has joined #haskell
2021-09-29 23:02:07	→	MQ-17J has joined #haskell
2021-09-29 23:02:35	←	emf has quit (Quit: emf)
2021-09-29 23:03:43	←	Null_A has quit (Remote host closed the connection)
2021-09-29 23:03:56	→	emf has joined #haskell
2021-09-29 23:04:11	→	tommd has joined #haskell
2021-09-29 23:04:29	←	YoungChiefBTW has quit (Changing host)
2021-09-29 23:04:29	→	YoungChiefBTW has joined #haskell
2021-09-29 23:04:57	←	merijn has quit (Ping timeout: 265 seconds)
2021-09-29 23:05:51	←	nrl^ has quit (Ping timeout: 245 seconds)
2021-09-29 23:08:52	→	nrl^ has joined #haskell
2021-09-29 23:09:57	nf	> let 1 = 0 in ()
2021-09-29 23:09:59	lambdabot	 ()
2021-09-29 23:10:01	nf	how does this parse?
2021-09-29 23:11:48	←	lbseale has quit (Ping timeout: 246 seconds)
2021-09-29 23:12:04	Taneb	It parses because "1" is valid in pattern contexts. This is useful for things like case 0 -> 0; 1 -> 1; n -> n + 4
2021-09-29 23:12:58	boxscape_	nf it's desugared to `let x | x == 1 = 0 in ()`
2021-09-29 23:13:09	boxscape_	more or less
2021-09-29 23:13:17	nf	ooh, right
2021-09-29 23:13:38	←	YoungChiefBTW has quit (Quit: Reconnecting)
2021-09-29 23:13:41	Taneb	The more surprising thing is it executes. That's because (I believe) the pattern is only executed if a bound symbol is used, and there's no bound symbols to use
2021-09-29 23:13:52	→	YoungChiefBTW has joined #haskell
2021-09-29 23:13:53	boxscape_	> let !1 = 0 in ()
2021-09-29 23:13:55	lambdabot	 *Exception: <interactive>:3:5-10: Non-exhaustive patterns in 1
2021-09-29 23:13:59	←	YoungChiefBTW has quit (Changing host)
2021-09-29 23:13:59	→	YoungChiefBTW has joined #haskell
2021-09-29 23:14:24	boxscape_	> let Just x = Nothing in ()
2021-09-29 23:14:25	lambdabot	 ()
2021-09-29 23:15:20	→	BosonCollider has joined #haskell
2021-09-29 23:15:23	→	nilof has joined #haskell
2021-09-29 23:15:35	←	nilof has quit (Remote host closed the connection)
2021-09-29 23:16:00	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-09-29 23:21:16	monochrom	case 0 of ~1 -> ()
2021-09-29 23:21:35	boxscape_	hm I'm actually not sure what a good desugaring of `let !1 = 0 in ()` would be
2021-09-29 23:22:21	monochrom	case 0 of 1 -> ()
2021-09-29 23:22:21	monochrom	Everything is nicer with "case" and irrefutable patterns :)
2021-09-29 23:22:36	tomsmeding	boxscape_: let !x | x == 1 = 0 in () ? :p
2021-09-29 23:22:43	monochrom	Indeed the Haskell Report also has this inclination of reducing everything to "case".
2021-09-29 23:22:51	boxscape_	> let !x | x == 1 = 0 in ()
2021-09-29 23:22:53	lambdabot	 ()
2021-09-29 23:22:55	tomsmeding	oh
2021-09-29 23:23:07	tomsmeding	wut
2021-09-29 23:23:08	→	benin036932301 has joined #haskell
2021-09-29 23:23:15	tomsmeding	how does that even work
2021-09-29 23:23:21	boxscape_	er
2021-09-29 23:23:39	boxscape_	> let !x | x == 1 = 0 in x `seq` ()
2021-09-29 23:23:41	lambdabot	 *Exception: <<loop>>
2021-09-29 23:24:15	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-09-29 23:25:06	→	MQ-17J has joined #haskell
2021-09-29 23:25:16	boxscape_	not really sure where the loop there comes from either
2021-09-29 23:26:26	monochrom	You probably should desuger "x | x==1 = 0" first.
2021-09-29 23:26:49	monochrom	something equiv to "x = if x==1 then 0 else undefined"
2021-09-29 23:27:39	→	fresheyeball has joined #haskell
2021-09-29 23:27:48	monochrom	Mixing bang pattern with guard probably requires a very careful reading of the GHC user's guide.
2021-09-29 23:28:55	boxscape_	looks like it, yeah
2021-09-29 23:29:11	←	myShoggoth has quit (Ping timeout: 245 seconds)
2021-09-29 23:30:31	→	Guest41 has joined #haskell
2021-09-29 23:31:07	monochrom	Ugh why does the GHC user's guide still links to Haskell 98 not Haskell 2010 haha
2021-09-29 23:31:11	boxscape_	wait, I think I'm confused because I'm mixing up pattern and function bindings
2021-09-29 23:31:22	←	goepsilongo has quit (Quit: Textual IRC Client: www.textualapp.com)
2021-09-29 23:31:28	boxscape_	to have `x | x == 1 = 0`, you need to know what x is (for the guard), to find out what x is
2021-09-29 23:31:30	→	myShoggoth has joined #haskell
2021-09-29 23:31:33	boxscape_	which is the loop
2021-09-29 23:32:33	→	tabaqui has joined #haskell
2021-09-29 23:32:37	boxscape_	`let 1 = 0` should actually be desugared to something more like `let 1 | 1 == 0 = 0`
2021-09-29 23:32:40	boxscape_	I think
2021-09-29 23:33:02	boxscape_	er, `let _ | 1 == 0 = 0`
2021-09-29 23:33:05	→	Null_A has joined #haskell
2021-09-29 23:33:18	tabaqui	sort of
2021-09-29 23:33:47	boxscape_	% let !_ | 1 == 0 = 0 in () -- tomsmeding this does work
2021-09-29 23:33:47	yahb	boxscape_: *** Exception: <interactive>:99:5-19: Non-exhaustive guards in 
2021-09-29 23:34:52	Guest41	hello. I seem to be misunderstanding parser combinators in Megaparsec. I have a parser of the form `choice [pNumber, try pBool, pString], `
2021-09-29 23:34:58	tomsmeding	boxscape_: fascinating
2021-09-29 23:35:00	monochrom	No, it really is better to translate "let 1=0 in foo" to "case".
2021-09-29 23:35:01	Guest41	but even though I'm using the try primitive, the pBool parser keeps consuming input and triggering errors (eof not found) down the line
2021-09-29 23:35:20	tomsmeding	I shall continue to avoid ! in let bindings, and reach for a case or pattern guards or explicit seq
2021-09-29 23:35:27	boxscape_	monochrom but the part I'm interested in translating is the `1` pattern, your case desugaring still contains that
2021-09-29 23:35:44	monochrom	But it also has ~
2021-09-29 23:36:17	Guest41	I was following the pattern described here: https://markkarpov.com/tutorial/megaparsec.html#controlling-backtracking-with-try
2021-09-29 23:36:20	tomsmeding	Guest41: "eof not found" -- does pBool call eof?
2021-09-29 23:36:32	boxscape_	I do agree that with case it's easier to follow what happens than with bang patterns
2021-09-29 23:36:36	→	emf_ has joined #haskell
2021-09-29 23:36:40	boxscape_	in let
2021-09-29 23:36:56	Guest41	tomsmeding: no it's called after the parser as in: `myParser <* eof`
2021-09-29 23:36:58	←	fresheyeball has quit (Quit: WeeChat 2.9)
2021-09-29 23:36:58	tomsmeding	boxscape_: case also corresponds more closely to the form in Core, so there's less semantics translation going on
2021-09-29 23:37:07	boxscape_	right, yeah
2021-09-29 23:37:22	→	yauhsien has joined #haskell
2021-09-29 23:37:47	tomsmeding	Guest41: then are you sure it's pBool that's failing? If pBool fails properly, it shouldn't even reach that 'eof' parser
2021-09-29 23:38:03	Guest41	tomsmeding: I have it set that way because some strings are special, ie: "true" and "false", otherwise I want to fallback to parsing Text
2021-09-29 23:38:28	tomsmeding	(parsing yaml?)
2021-09-29 23:39:04	tomsmeding	Guest41: try putting 'getInput >>= \s -> traceIO ("Remaining: <" ++ s ++ ">")' right after that 'choice'
2021-09-29 23:39:09	tomsmeding	with 'import Debug.Trace'
2021-09-29 23:39:10	Guest41	tomsmeding: that makes sense, how would I make pBool fail if it parses something like "trueAAAAA"
2021-09-29 23:39:28	monochrom	"!var = e" and even "!(Ctor pat1 pat2) = e" are pretty unsurprising.  You don't have to avoid these use cases of bang patterns.
2021-09-29 23:39:29	tomsmeding	Guest41: what's the definition of pBool?
2021-09-29 23:39:43	tomsmeding	monochrom: true, I guess
2021-09-29 23:39:47	Guest41	you are right, pBool isn't failing: `pBool = True <$ string "true" <|> False <$ string "false"`
2021-09-29 23:39:57	←	emf has quit (Ping timeout: 260 seconds)
2021-09-29 23:40:02	monochrom	But "!var | cond = e" is the one that surprised me.  This one is reasonable to avoid.
2021-09-29 23:40:07	tomsmeding	Guest41: because of megaparsec's semantics of 'string', that shouldn't even need 'try' I think
2021-09-29 23:40:25	tomsmeding	it's parsec that has a 'string' that needs to be wrapped in 'try'; megaparsec changed that
2021-09-29 23:40:31	boxscape_	monochrom yes, I'm still trying to figure out why `let !x | x == 1 = 0` *doesn't* loop
2021-09-29 23:40:34	monochrom	Now I have to be a lawyer and follow the GHC user's guide and Haskell 2010 to desugar what's going on with that. :)
2021-09-29 23:41:50	Guest41	tomsmeding: yes you are right, "Note that as of Megaparsec 4.4.0, string backtracks automatically (see tokens), so it does not need try. However, the examples above demonstrate the idea behind try so well that it was decided to keep them. You still need to use try when your alternatives are complex, composite parsers."
2021-09-29 23:41:55	Guest41	https://hackage.haskell.org/package/megaparsec-9.2.0/docs/Text-Megaparsec.html
2021-09-29 23:42:09	←	yauhsien has quit (Ping timeout: 265 seconds)
2021-09-29 23:42:19	tomsmeding	ah, so I remembered correctly
2021-09-29 23:42:58	Guest41	I still can't see how to force pBool to fail, it should expect whitespace after a Bool
2021-09-29 23:43:03	boxscape_	FWIW, `f = () where !x | x == True = False` is desugared into Core as `f = case x_r1kw of { __DEFAULT -> break<2>() GHC.Tuple.() }`
2021-09-29 23:43:10	→	chris has joined #haskell
2021-09-29 23:43:14	ℹ	chris is now known as Guest2478
2021-09-29 23:43:17	tomsmeding	Guest41: what about that definition you gave forces whitespace?
2021-09-29 23:43:22	boxscape_	oh wait I guess that's only part of it
2021-09-29 23:43:58	Guest41	tomsmeding: nothing, I tried adding `<* space` at the end but it didn't change the behaviour
2021-09-29 23:44:45	boxscape_	(this is the full Core https://paste.tomsmeding.com/rsvN5Uml )
2021-09-29 23:44:47	Guest41	Wait, I was wrong, it does complain about expecting whitespace
2021-09-29 23:44:54	tomsmeding	Guest41: could you try: pBool = (True <$ string "true" <|> False <$ string "false") <* lookAhead space
2021-09-29 23:45:03	Guest41	but it doesn't move on to the _next_ choice
2021-09-29 23:45:21	boxscape_	oh but wait calling f *does* loop...
2021-09-29 23:45:27	tomsmeding	Guest41: yeah with that '<* space', with or without lookAhead, you do now need the 'try'
2021-09-29 23:46:05	boxscape_	% let !x | x == True = False
2021-09-29 23:46:11	yahb	boxscape_: [Timed out]
2021-09-29 23:46:11	boxscape_	% let !x | x == 1 = 0
2021-09-29 23:46:13	yahb	boxscape_: 
2021-09-29 23:46:17	boxscape_	it's a dictionary thing, apparently
2021-09-29 23:46:36	Guest41	tomsmeding: because combining primitives doesn't give auto-backtracking parsers, yes?
2021-09-29 23:46:37	boxscape_	x is a function that takes a dictionary, so the bang pattern only forces it to be a lambda (is my hypothesis)
2021-09-29 23:46:44	boxscape_	^ monochrom
2021-09-29 23:47:18	monochrom	> let !x = case () of () | x==1 -> 0 in ()   -- this is following Haskell 2010 4.4.3.2 to desugar guards in a pattern binding.
2021-09-29 23:47:20	lambdabot	 ()
2021-09-29 23:47:32	monochrom	Hrm
2021-09-29 23:47:40	tomsmeding	Guest41: indeed, nothing is backtracking by default except when explicitly made backtracking with 'try', or if it's a special case, of which 'string' is one
2021-09-29 23:47:53	monochrom	> let !x = case () of () | x==False -> True in ()   -- this is following Haskell 2010 4.4.3.2 to desugar guards in a pattern binding.
2021-09-29 23:47:55	lambdabot	 *Exception: <<loop>>
2021-09-29 23:48:22	tomsmeding	wonky
2021-09-29 23:48:23	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-09-29 23:48:32	monochrom	> let !x | x = False in ()
2021-09-29 23:48:35	lambdabot	 *Exception: <<loop>>
2021-09-29 23:48:42	→	MQ-17J has joined #haskell
2021-09-29 23:48:53	boxscape_	> !x | x == x in ()
2021-09-29 23:48:53	monochrom	That theory does hold water.
2021-09-29 23:48:55	lambdabot	 <hint>:1:4: error: parse error on input ‘|’
2021-09-29 23:48:59	boxscape_	> let !x | x == x in ()
2021-09-29 23:49:01	lambdabot	 <hint>:1:17: error: parse error on input ‘in’
2021-09-29 23:49:03	Guest41	tomsmeding: the parser /still/ doesn't refrain from consuming "true" in "trueAAAA". I will simply Paste the code now so you can see it :P
2021-09-29 23:49:05	←	epolanski has quit (Quit: Connection closed for inactivity)
2021-09-29 23:49:07	boxscape_	egh
2021-09-29 23:49:14	monochrom	!x | x==x = not x  ?
2021-09-29 23:49:32	boxscape_	> let !x | x == x = () in ()
2021-09-29 23:49:33	monochrom	!x | x = x ?
2021-09-29 23:49:35	lambdabot	 *Exception: <<loop>>
2021-09-29 23:49:49	boxscape_	> let !x | x == x = undefined in ()
2021-09-29 23:49:50	Guest41	tomsmeding: https://paste.tomsmeding.com/F8u1rsRa
2021-09-29 23:49:51	lambdabot	 ()
2021-09-29 23:49:58	Guest41	(forgive the use of parseTest)
2021-09-29 23:49:59	boxscape_	okay yeah this makes sense I think
2021-09-29 23:51:40	→	aegon has joined #haskell
2021-09-29 23:51:56	→	jlamothe has joined #haskell
2021-09-29 23:52:06	←	xff0x has quit (Ping timeout: 245 seconds)
2021-09-29 23:52:31	tomsmeding	Guest41: what's that L import?
2021-09-29 23:52:39	tomsmeding	oh Lexer
2021-09-29 23:52:48	Guest41	yes `import qualified Text.Megaparsec.Char.Lexer as L`
2021-09-29 23:52:57	→	xff0x has joined #haskell
2021-09-29 23:54:25	Guest41	what I don't understand is why doesn't choice fallback to the third parser when pBool fails
2021-09-29 23:54:29	tomsmeding	Guest41: when I give that trueAAAA I get back 'unexpected A, expecting end of input', which makes sense to me?
2021-09-29 23:54:34	tomsmeding	oh wait no it doesn't
2021-09-29 23:54:51	⚡	tomsmeding is confused
2021-09-29 23:54:52	←	Guest2478 has quit (Remote host closed the connection)
2021-09-29 23:55:09	→	kuribas has joined #haskell
2021-09-29 23:55:19	Guest41	it should get a `StringValue` right?
2021-09-29 23:55:33	→	werneta has joined #haskell
2021-09-29 23:55:50	←	emf_ has quit (Quit: emf_)
2021-09-29 23:55:54	→	tromp has joined #haskell
2021-09-29 23:58:38	tomsmeding	oooooooh
2021-09-29 23:58:45	tomsmeding	space: Skip zero or more white space characters.
2021-09-29 23:59:08	tomsmeding	Guest41: should use spaceChar
2021-09-29 23:59:24	←	qbt has quit (Ping timeout: 246 seconds)
2021-09-29 23:59:26	→	gensyst has joined #haskell
2021-09-29 23:59:29	→	chris has joined #haskell
2021-09-29 23:59:31	Guest41	*facepalm*
2021-09-29 23:59:33	ℹ	chris is now known as Guest4418
2021-09-29 23:59:38	tomsmeding	dumb megaparsec, shouldn't have changed the meaning of 'space' from the original parsec meaning
2021-09-29 23:59:47	→	emf has joined #haskell
2021-09-30 00:00:30	gensyst	Can someone quickly please do this? "mkdir testproj; cd testproj; cabal init; vim testproj.cabal", add "Chart-chairo" dependency, and "cabal build"? Do you also get the error "(conflict: pkg-config package cairo>=1.2.0, not found in the pkg-config database)" ? 
2021-09-30 00:00:34	gensyst	How to solve this?
2021-09-30 00:00:53	←	Guest4418 has quit (Remote host closed the connection)
2021-09-30 00:00:56	tomsmeding	gensyst: install cairo with your system package manager :p
2021-09-30 00:01:00	←	Null_A has quit (Remote host closed the connection)
2021-09-30 00:01:06	sclv	also possibly cairo-dev
2021-09-30 00:01:17	tomsmeding	apparently that has a dependency on the cairo C library that you don't have installed (or the pkg-config file isn't installed for some reason)
2021-09-30 00:01:19	→	Null_A has joined #haskell
2021-09-30 00:01:22	sclv	its not a haskell lib, its a c lib that the haskell lib depends on
2021-09-30 00:02:22	←	max22- has quit (Ping timeout: 240 seconds)
2021-09-30 00:03:26	→	acidjnk_new3 has joined #haskell
2021-09-30 00:03:34	Guest41	tomsmeding: thank you very much
2021-09-30 00:04:47	tomsmeding	Guest41: cheers :)
2021-09-30 00:06:08	→	chris has joined #haskell
2021-09-30 00:06:12	ℹ	chris is now known as Guest6556
2021-09-30 00:10:22	←	Guest6556 has quit (Ping timeout: 240 seconds)
2021-09-30 00:15:48	→	justsomeguy has joined #haskell
2021-09-30 00:16:17	→	MarsIronPI has joined #haskell
2021-09-30 00:17:35	←	MarsIronPI has quit (Client Quit)
2021-09-30 00:20:21	←	nfd has quit (Ping timeout: 252 seconds)
2021-09-30 00:21:03	c_wraith	I think it was too late last night when I unleashed my latest abomination upon this channel.
2021-09-30 00:21:24	c_wraith	So I present it again now.  Look upon my works, and despair: https://paste.tomsmeding.com/KmOT6PZy
2021-09-30 00:22:39	tomsmeding	c_wraith: should call that pattern synonym :++ instead
2021-09-30 00:23:20	c_wraith	I'm just "happy" that using it is more work than...  not.
2021-09-30 00:23:26	tomsmeding	c_wraith: you don't need the provided constraints () => to be listed explicitly, right?
2021-09-30 00:23:49	tomsmeding	I like it :p
2021-09-30 00:23:51	c_wraith	I'm not sure.  Didn't look at the grammar for pattern signatures too closely.
2021-09-30 00:24:03	tomsmeding	iirc provided constraints are optional
2021-09-30 00:24:20	c_wraith	On the other hand, it doesn't really hurt anything
2021-09-30 00:24:54	tomsmeding	how do you _use_ this though? 'f (PrefixedBy (Proxy @"prefix") suffix) = print suffix'?
2021-09-30 00:25:12	c_wraith	No, I had an earlier version that would work like that.
2021-09-30 00:25:14	monochrom	"is this dependent typing?" meme
2021-09-30 00:25:28	c_wraith	except ghc doesn't allow type applications inside patterns
2021-09-30 00:25:39	c_wraith	it even has a fun error message saying "yet"
2021-09-30 00:25:39	tomsmeding	rip
2021-09-30 00:25:42	tomsmeding	lol
2021-09-30 00:25:56	→	max22- has joined #haskell
2021-09-30 00:26:12	c_wraith	So this is like.... PrefixedBy (Proxy :: Proxy "prefix") suffix
2021-09-30 00:26:40	c_wraith	and even that requires enabling ScopedTypeVariables
2021-09-30 00:26:50	tomsmeding	blegh
2021-09-30 00:26:58	c_wraith	it's a horrible mess!
2021-09-30 00:27:01	c_wraith	I'm so proud!
2021-09-30 00:27:05	tomsmeding	:D
2021-09-30 00:30:59	→	wroathe has joined #haskell
2021-09-30 00:30:59	←	wroathe has quit (Changing host)
2021-09-30 00:30:59	→	wroathe has joined #haskell
2021-09-30 00:31:20	←	ircbrowse_tom has quit (Quit: ZNC 1.7.5+deb4 - https://znc.in)
2021-09-30 00:31:30	gensyst	tomsmeding, ah, thanks!!
2021-09-30 00:33:05	→	ircbrowse_tom has joined #haskell
2021-09-30 00:34:06	←	tabaqui has quit (Ping timeout: 252 seconds)
2021-09-30 00:35:06	←	gensyst has quit (Quit: Leaving)
2021-09-30 00:37:41	boxscape_	c_wraith neat, I was wondering if it's possible to write something like this without having to do `PrefixOf "prefix" -> Just suffix` when using the pattern synonym. Will be interesting to see if Proxy is still necessary once visible forall is a thing
2021-09-30 00:38:25	←	wroathe has quit (Ping timeout: 260 seconds)
2021-09-30 00:38:28	c_wraith	boxscape_: it almost works now, except for type applications not being allowed in patterns.
2021-09-30 00:39:09	c_wraith	err, works without the Proxy argument
2021-09-30 00:39:39	boxscape_	right, I suppose it's quite possible that that restriction will also extend to visible type applications
2021-09-30 00:39:55	boxscape_	or, "visible-by-default" type applications, not sure what the proper terminology is
2021-09-30 00:40:34	kuribas	c_wraith: what does that do?
2021-09-30 00:41:10	c_wraith	it's a pattern for matching a string with a specific prefix and binding the rest to a name
2021-09-30 00:41:42	c_wraith	kind of like Erlang's pattern matching on strings can do
2021-09-30 00:42:02	c_wraith	except the syntax for using it is atrocious
2021-09-30 00:42:17	boxscape_	there is/was some ongoing work (not sure if complete) that makes it possible to have patterns like (Just @Int 4), not sure if that applies to pattern synonyms as well
2021-09-30 00:43:06	c_wraith	if it does, it would allow using something like (PrefixedBy @"prefix" suffix) with no other changes
2021-09-30 00:43:35	c_wraith	err. no other ghc changes
2021-09-30 00:43:37	→	k has joined #haskell
2021-09-30 00:45:45	boxscape_	it's in 9.2.1, let me check if it works for synonyms
2021-09-30 00:46:04	→	fendor has joined #haskell
2021-09-30 00:46:16	←	mikoto-chan has quit (Ping timeout: 245 seconds)
2021-09-30 00:46:24	k	Say I have a class like `Monad m` with methods `(>>=)` and `(>>)` , and a default definition in terms of `(>>=)` is given for `(>>)`. Does GHC inline the default definition everywhere it appears? Or does it specialize the definition to the type of each instance, and then use its usual heuristic to decide whether to inline the specialized version? Or does it just use it's usual heuristic to decide whether to inline a fully polymorphic
2021-09-30 00:46:24	k	version?
2021-09-30 00:46:50	k	Sorry about the apostrophe in 'its'.
2021-09-30 00:48:27	kuribas	c_wraith: why not just: myFun pref s | Just rest <- stripPrefix pref s = rest | otherwise = ""
2021-09-30 00:48:27	→	mikoto-chan has joined #haskell
2021-09-30 00:49:37	c_wraith	because that's not a pattern. it is a lot easier to use right now, but it's sort of missing the point.
2021-09-30 00:50:12	boxscape_	c_wraith seems to work just fine with pattern synonyms in master
2021-09-30 00:50:37	c_wraith	yeah, 9.2 fixed some other type application bug I ran into recently.
2021-09-30 00:50:47	c_wraith	seems like it got improved a bunch.
2021-09-30 00:51:05	kuribas	c_wraith: ok, so obfuscation is the point...
2021-09-30 00:51:23	c_wraith	no, the point is that you can use it as pattern matching.
2021-09-30 00:51:33	→	chris has joined #haskell
2021-09-30 00:51:37	ℹ	chris is now known as Guest6826
2021-09-30 00:52:12	c_wraith	looks like in GHC 9.2 it will actually be useable sanely.
2021-09-30 00:52:22	←	Guest6826 has quit (Remote host closed the connection)
2021-09-30 00:52:23	c_wraith	instead of how you have to use that version
2021-09-30 00:53:04	boxscape_	I think there might be a bug though, since `f (PrefixedBy (Proxy @GHC.Types.Symbol @"prefix") suffix) = suffix` works
2021-09-30 00:53:13	boxscape_	whereas leaving out the @GHC.Types.Symbol doesn't
2021-09-30 00:53:24	boxscape_	but I think it should be the other way around, since Proxy only has one specified type argument?
2021-09-30 00:53:34	c_wraith	oh, it's the kind argument.
2021-09-30 00:53:44	c_wraith	can you just leave it at @_ ?
2021-09-30 00:53:47	boxscape_	yeah but it's inferred, you shouldn't be able to provide it via type application
2021-09-30 00:54:24	boxscape_	yes, @_ works, but I would expect to get the same error I get if I try `Proxy @_ @"test"` in an expression instead of in a pattern
2021-09-30 00:54:24	←	Guest41 has quit (Quit: Client closed)
2021-09-30 00:54:29	boxscape_	% Proxy @_ @"test"
2021-09-30 00:54:29	yahb	boxscape_: ; <interactive>:2:1: error:; * Cannot apply expression of type `Proxy w0'; to a visible type argument `"test"'; * In the expression: Proxy @_ @"test"; In an equation for `it': it = Proxy @_ @"test"
2021-09-30 00:54:53	←	myShoggoth has quit (Ping timeout: 252 seconds)
2021-09-30 00:54:55	kuribas	c_wraith: or do: myFun (stripPrefix "myPrefix" -> Just rest) = rest; myFun _ = ""
2021-09-30 00:55:00	c_wraith	hah, ok. that is certainly unexpected
2021-09-30 00:55:20	kuribas	c_wraith: I don't see what you gain with a Pattern...
2021-09-30 00:55:37	kuribas	unless it's some weird "challenge".
2021-09-30 00:55:38	c_wraith	you gain not having to write a view pattern 
2021-09-30 00:55:42	→	wroathe has joined #haskell
2021-09-30 00:55:42	←	wroathe has quit (Changing host)
2021-09-30 00:55:42	→	wroathe has joined #haskell
2021-09-30 00:55:49	boxscape_	kuribas if you have to do this a bunch of times for different prefixes it's a lot less visual clutter
2021-09-30 00:55:50	→	Guest41 has joined #haskell
2021-09-30 00:56:02	tomsmeding	and you gain the ability to say "my latest abomination"
2021-09-30 00:56:06	tomsmeding	which is clearly an advantage
2021-09-30 00:56:17	Guest41	any ideas on how one might write a test suite for a parser written in (mega)parsec ?
2021-09-30 00:56:27	c_wraith	like, the whole reason pattern synonyms were added to GHC is that view patterns are rerrible
2021-09-30 00:56:31	c_wraith	*terrible
2021-09-30 00:56:31	Guest41	I've never written a proper test suite before
2021-09-30 00:56:42	shapr	Guest41: property based tests?
2021-09-30 00:57:13	→	chris has joined #haskell
2021-09-30 00:57:17	ℹ	chris is now known as Guest816
2021-09-30 00:57:18	Guest41	shapr: I'll look it up
2021-09-30 01:34:37	ℹ	irc: disconnected from server
2021-09-30 01:34:56	→	oxide has joined #haskell
2021-09-30 01:34:56	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | tunes.org-style logging should be coming soon | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-09-30 01:34:56	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Mon, 14 Jun 2021 05:16:14
2021-09-30 01:34:56	ℹ	Channel #haskell: 732 nicks (1 op, 0 voices, 731 normals)
2021-09-30 01:34:57	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-09-30 01:35:23	←	juhp has quit (Ping timeout: 265 seconds)
2021-09-30 01:35:34	←	merijn has quit (Ping timeout: 252 seconds)
2021-09-30 01:37:16	→	juhp has joined #haskell
2021-09-30 01:40:09	→	dixie has joined #haskell
2021-09-30 01:41:36	→	yauhsien has joined #haskell
2021-09-30 01:42:48	→	acidjnk_new has joined #haskell
2021-09-30 01:43:38	→	acidjnk has joined #haskell
2021-09-30 01:44:30	←	Morrow has quit (Read error: Connection reset by peer)
2021-09-30 01:44:36	→	Morrow_ has joined #haskell
2021-09-30 01:45:50	←	yauhsien has quit (Ping timeout: 245 seconds)
2021-09-30 01:46:15	←	acidjnk_new3 has quit (Ping timeout: 245 seconds)
2021-09-30 01:46:52	←	mht has quit (Ping timeout: 260 seconds)
2021-09-30 01:47:04	←	connrs has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-09-30 01:47:25	→	connrs has joined #haskell
2021-09-30 01:47:48	←	acidjnk_new has quit (Ping timeout: 260 seconds)
2021-09-30 01:47:48	←	Morrow_ has quit (Read error: Connection reset by peer)
2021-09-30 01:47:55	→	Morrow has joined #haskell
2021-09-30 01:49:12	←	sshine has quit (Ping timeout: 260 seconds)
2021-09-30 01:49:12	←	zzz has quit (Ping timeout: 260 seconds)
2021-09-30 01:49:40	←	rookie101 has quit (Ping timeout: 260 seconds)
2021-09-30 01:49:41	←	janus has quit (Ping timeout: 240 seconds)
2021-09-30 01:51:14	←	nrl^ has quit (Remote host closed the connection)
2021-09-30 01:52:05	→	sshine has joined #haskell
2021-09-30 01:53:38	→	mht has joined #haskell
2021-09-30 01:53:39	→	zzz has joined #haskell
2021-09-30 01:58:48	←	justsomeguy has quit (Quit: WeeChat 3.2)
2021-09-30 01:59:22	Guest41	hmm, if I have a type like Int wrapped in some data constructor like Constructor Int, is there an "idiomatic" way to "flatten" it?
2021-09-30 02:00:05	Guest41	sometthing like `flatten :: AnyConstructor a -> a`
2021-09-30 02:00:44	Guest41	I know I can pattern match against what I need but I think this would be common (no?)
2021-09-30 02:00:45	geekosaur	look at the Data.Coerce module?
2021-09-30 02:01:12	geekosaur	otherwise no, there's no shortcut. but you can pattern match in more places than you might think
2021-09-30 02:01:27	→	janus has joined #haskell
2021-09-30 02:02:04	→	rookie101 has joined #haskell
2021-09-30 02:02:40	←	slack1256 has quit (Ping timeout: 252 seconds)
2021-09-30 02:04:18	Guest41	geekosaur: the doc is unreadable for me ... how should I use coerce exactly?
2021-09-30 02:05:11	←	Null_A has quit (Remote host closed the connection)
2021-09-30 02:05:22	geekosaur	given your example, a valid use of coerce would be coerce :: Constructor Int -> Int (not that you have to write the signature, that's just what a use of coerce under those circumstances would do)
2021-09-30 02:05:44	geekosaur	it would also be able to go the other way, coerce on an Int can produce a Constructor Int
2021-09-30 02:08:38	Guest41	oh no I made a silly mistake. Constructor isn't a type: `data Type = Constructor Int | Constructor1 String` ...
2021-09-30 02:09:03	geekosaur	no, you need to pattern match for that
2021-09-30 02:09:17	Guest41	no way to use coerce right?
2021-09-30 02:09:29	geekosaur	nope
2021-09-30 02:09:39	geekosaur	coerce operates on types, not data constructors
2021-09-30 02:10:05	geekosaur	what type would a hypothetical dataCoerce have with respect to type Type?
2021-09-30 02:10:48	awpr	you could make it a record constructor and use the field selector function.  but then it's a partial function, with all the associated issues (like, you need to already know it's the right constructor, which means you probably already pattern-matched it, and thus already have the contents from the pattern match and don't need the selector function)
2021-09-30 02:12:59	→	Null_A has joined #haskell
2021-09-30 02:13:32	←	alzgh has quit (Remote host closed the connection)
2021-09-30 02:13:54	→	alzgh has joined #haskell
2021-09-30 02:15:02	Guest41	awpr: well in fact I already pattern matched it to exclude unwanted constructors, which means a field selector is just the right thing for me
2021-09-30 02:15:37	Guest41	I hadn't written field selectors the first time I wrote the type definition and I seemingly forgot they exis
2021-09-30 02:15:48	geekosaur	if you pattern matched it, it's trivial to extract the value at the same time
2021-09-30 02:15:55	Guest41	it's always the simple things with haskell :^)
2021-09-30 02:15:56	awpr	but if you're inside a pattern match for that constructor, then the contents are already in scope, unless you _'d the
2021-09-30 02:15:57	awpr	m
2021-09-30 02:17:48	Guest41	geekosaur: I used `filter isRightConstructor list` where isRightConstructor x = case x of RightConstructor _ -> True ....
2021-09-30 02:17:52	→	Guest79 has joined #haskell
2021-09-30 02:17:54	Guest79	Howdy
2021-09-30 02:17:55	←	vysn has quit (Ping timeout: 245 seconds)
2021-09-30 02:17:55	←	mei has quit (Quit: mei)
2021-09-30 02:18:11	geekosaur	right, so just change the _ to a variable name and you have your value
2021-09-30 02:18:12	Guest41	wait yes
2021-09-30 02:18:23	Guest41	*facepalm*
2021-09-30 02:18:37	awpr	try `mapMaybe` in place of `filter`
2021-09-30 02:18:45	←	MQ-17J has quit (Ping timeout: 245 seconds)
2021-09-30 02:18:50	Guest79	Can I ask a noob question? I found " foldl " and according to zvon.org it is Prelude, but when I run the examples in ghci I just get errors
2021-09-30 02:18:54	Guest79	http://zvon.org/other/haskell/Outputprelude/foldl_f.html
2021-09-30 02:19:17	→	MQ-17J has joined #haskell
2021-09-30 02:20:32	Guest41	awpr: Amazing!
2021-09-30 02:20:38	→	geranim0 has joined #haskell
2021-09-30 02:20:52	Guest41	I should learn more about these functions
2021-09-30 02:21:20	geekosaur	> foldl (/) 64 [4,2,4]
2021-09-30 02:21:21	lambdabot	 2.0
2021-09-30 02:22:41	Guest79	https://i.imgur.com/RZDUpzi.png
2021-09-30 02:23:10	Guest79	oh god
2021-09-30 02:23:12	Guest79	nevermind...
2021-09-30 02:23:27	geekosaur	so what errors heh
2021-09-30 02:23:29	Guest79	i guess i redefined the function in my .hs file
2021-09-30 02:23:54	Guest79	hehe, ty tho
2021-09-30 02:24:08	monochrom	This is why remote tech support is impossible.
2021-09-30 02:24:18	←	Null_A has quit (Remote host closed the connection)
2021-09-30 02:24:34	Guest79	Well it helped me within 1 minute
2021-09-30 02:24:48	monochrom	That's just rubber duck working.
2021-09-30 02:25:21	Guest79	it's a bit cozier having cyber humans instead of rubber ducks tho
2021-09-30 02:25:30	←	zer0bitz has quit (Ping timeout: 265 seconds)
2021-09-30 02:25:41	monochrom	My TA and I came up with this crazy idea that we should distribute rubber ducks to our students.
2021-09-30 02:26:27	⚡	awpr wishes Haskell had a cute mascot like the Go-pher or the Rust crab
2021-09-30 02:27:06	monochrom	I then came up with this next idea that the rubber ducks should contain smart circuitry to automatically escalate their questions to me when appropriate.
2021-09-30 02:27:18	geekosaur	overengineered
2021-09-30 02:27:30	monochrom	My TA pointed out "therefore it just needs the null circuitry".
2021-09-30 02:28:10	monochrom	We had a Da Lamb mascot.
2021-09-30 02:28:19	monochrom	But it didn't take off.
2021-09-30 02:28:41	monochrom	We're now stuck with the bind-lambda logo.
2021-09-30 02:29:01	→	wroathe has joined #haskell
2021-09-30 02:29:01	←	wroathe has quit (Changing host)
2021-09-30 02:29:01	→	wroathe has joined #haskell
2021-09-30 02:29:18	awpr	because it's an infix of lambda or because it's a popular ingredient in curry
2021-09-30 02:29:58	monochrom	I think it began as simply the letter game of permuting "lambda"
2021-09-30 02:30:31	monochrom	But I used to say "applicative is curried burrito"
2021-09-30 02:30:39	monochrom	err "curry burrito"
2021-09-30 02:30:41	awpr	just brainstorming more potential mascots here: C++thulhu
2021-09-30 02:30:56	monochrom	https://currito.com/
2021-09-30 02:32:03	→	emf has joined #haskell
2021-09-30 02:32:53	→	lavaman has joined #haskell
2021-09-30 02:33:55	→	Null_A has joined #haskell
2021-09-30 02:34:31	boxscape_	awpr https://pbs.twimg.com/media/EXBVdPuWoAIt2K2?format=jpg&name=large
2021-09-30 02:34:56	monochrom	Nice.
2021-09-30 02:36:41	←	yinghua has quit (Ping timeout: 240 seconds)
2021-09-30 02:37:35	←	lavaman has quit (Ping timeout: 265 seconds)
2021-09-30 02:38:48	→	yinghua has joined #haskell
2021-09-30 02:39:39	→	jaitoon has joined #haskell
2021-09-30 02:40:19	Guest41	is that an unofficial mascot?
2021-09-30 02:40:44	boxscape_	there's a big wiki page with logo suggestions where that was one https://wiki.haskell.org/Haskell_logos/New_logo_ideas
2021-09-30 02:40:57	boxscape_	(before the current logo was chosen, though I believe it was born in that thread)
2021-09-30 02:43:34	monochrom	The radioactivity one came from the 1st and worst monad analogy.
2021-09-30 02:43:40	→	Lord_of_Life_ has joined #haskell
2021-09-30 02:44:07	monochrom	Perhaps it's time you young lads hear the long-forgotten cautionary tale.
2021-09-30 02:44:30	←	Lord_of_Life has quit (Ping timeout: 265 seconds)
2021-09-30 02:45:00	ℹ	Lord_of_Life_ is now known as Lord_of_Life
2021-09-30 02:45:38	←	emf has quit (Quit: emf)
2021-09-30 02:46:57	monochrom	Don Stewart (IRC nick dons) was a prominent contributor to Haskell libraries back then. You have him to thank for bytestring, plugins (not GHC plugin, rather the "can my haskell exe load a plugin dynamically?" kind), and others.
2021-09-30 02:48:27	Hecate	monochrom: what's the state of plugins anyway?
2021-09-30 02:48:52	←	myShoggoth has quit (Ping timeout: 252 seconds)
2021-09-30 02:49:00	monochrom	So one day he blogged that he finally thought up the perfect analogy for monad or the IO monad (I forgot which): a spacesuit with hazardous nuclear waste inside, you are outside so you are safe.
2021-09-30 02:49:12	→	emf has joined #haskell
2021-09-30 02:49:16	monochrom	I think miraculous it still builds today. I haven't really checked.
2021-09-30 02:49:36	ℹ	irc: disconnected from server
2021-10-03 15:39:03	→	oxide has joined #haskell
2021-10-03 15:39:03	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-10-03 15:39:03	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-10-03 15:39:03	ℹ	Channel #haskell: 712 nicks (1 op, 0 voices, 711 normals)
2021-10-03 15:39:03	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-10-03 15:39:16	angerman	tomsmeding: why wouldn’t it?
2021-10-03 15:39:23	tomsmeding	Hecate: you're saying that the arm work wasn't only for macos but also does the trick for android?
2021-10-03 15:39:39	→	chisui has joined #haskell
2021-10-03 15:39:40	tomsmeding	angerman: I'm going to try right now :p
2021-10-03 15:39:46	angerman	tomsmeding: yes. It’s been for Mach-o *and* ELF
2021-10-03 15:39:47	⚡	tomsmeding is excited
2021-10-03 15:40:13	angerman	No PE support though. So AArch64-windows is likely not an option.
2021-10-03 15:40:57	maerwald	tomsmeding: what's the error?
2021-10-03 15:40:57	angerman	tomsmeding: I hope you’ve got a 64bit device. Not sure how the 32bit quality is. The NCG is only AArch64
2021-10-03 15:41:00	→	akegalj has joined #haskell
2021-10-03 15:41:14	jneira[m]	eta worked in android fine 😢
2021-10-03 15:41:26	angerman	Yea. I’m still very sad about eta.
2021-10-03 15:41:31	tomsmeding	maerwald: no such file or directory when trying to run the downloaded ghcup executable; presumably some library missing
2021-10-03 15:41:44	tomsmeding	angerman: yeah 64 bit fortunately :)
2021-10-03 15:41:45	angerman	I have some hope we might be able to eventually resurrect it after the current STG work.
2021-10-03 15:41:46	maerwald	yeah, they're not static
2021-10-03 15:42:06	jneira[m]	there is any work in extending backends for ghc?
2021-10-03 15:42:45	angerman	jneira[m]: a little yes. Primarily to make Asterius easier. But with input form ghcjs experience as well.
2021-10-03 15:43:15	angerman	jneira[m]: there is also a ton of work being done by Sylvian to make targets in GHC easier.
2021-10-03 15:44:20	Hecate	jneira[m]: the idea is to bridge the gap between GHC & GHCJS so as to make JS & WASM targets of GHC (instead of forks)
2021-10-03 15:44:24	angerman	jneira[m]: GHC 9.6 will likely be pretty cool if we can get all this in.
2021-10-03 15:44:37	Hecate	JVM bytecode as well, although they had to fork in order to control more upstream bits of the pipeline, IIRC?
2021-10-03 15:45:00	jneira[m]	sound great
2021-10-03 15:45:22	angerman	Hecate: it’s most likely been the easier path. Fixing cabal upstream can be a pain. Getting patches into ghc can be a pain especially if you are experimenting a lot.
2021-10-03 15:45:55	jneira[m]	some link to take a look for the JVM part? not sure if I will have time to help but just in case
2021-10-03 15:47:05	angerman	IOHK has Luite working on merging ghcjs into ghc, (he’s been adding unboxed tuple and sums support to the interpreter a while back), and Sylvian is tasked with making plugins work with cross compilers.
2021-10-03 15:47:18	tomsmeding	bash: utils/ghc-cabal/dist-install/build/tmp/ghc-cabal: No such file or directory
2021-10-03 15:47:22	angerman	Tweag is working on Asterius and improving STG
2021-10-03 15:47:29	tomsmeding	:( also some missing lib for ghc; now to check what it is
2021-10-03 15:47:43	angerman	jneira[m]: other than the eta source, I don’t think I know of any.
2021-10-03 15:48:18	Hecate	angerman: Frege maybe?
2021-10-03 15:49:18	jneira[m]	it has no much activity and does not support ghc extensions afaik
2021-10-03 15:49:44	jneira[m]	I see it more similar to purescript
2021-10-03 15:50:07	Hecate	oké
2021-10-03 15:50:13	jneira[m]	the JVM backend of ETA could be the starting point for sure
2021-10-03 15:51:28	tomsmeding	Hm, 'find ../../usr -name libffi.so'*'' gives only '../../usr/lib/libffi.so', while ghc seems to refer to libffi.so.6.
2021-10-03 15:51:31	jneira[m]	but I think there were some tech issues to support all ghc extensions, specially related with dependent typed
2021-10-03 15:52:01	jneira[m]	but not sure I did not analyze them in deep
2021-10-03 15:55:59	←	xiongxin has quit (Ping timeout: 252 seconds)
2021-10-03 15:59:47	→	flukiluke has joined #haskell
2021-10-03 16:01:58	←	tfeb has quit (Quit: died)
2021-10-03 16:02:46	←	tcard_ has quit (Quit: Leaving)
2021-10-03 16:04:08	tomsmeding	What other ways than ldd are there to debug missing dynamically linked libraries on "linux"?
2021-10-03 16:04:57	tomsmeding	The binutils package in termux on android is a 5-line shell script that effectively calls objdump -p "$@" | grep NEEDED, meaning that it doesn't check any resolving
2021-10-03 16:05:17	tomsmeding	s/binutils/ldd executable in the binutils/
2021-10-03 16:09:41	→	tcard has joined #haskell
2021-10-03 16:10:23	←	Arsen has quit (Quit: Quit.)
2021-10-03 16:10:41	→	Arsen has joined #haskell
2021-10-03 16:11:32	←	akegalj has quit (Quit: leaving)
2021-10-03 16:12:36	←	ozzymcduff has quit (Remote host closed the connection)
2021-10-03 16:16:44	→	ozzymcduff has joined #haskell
2021-10-03 16:18:12	→	sagax has joined #haskell
2021-10-03 16:20:28	geekosaur	tomsmeding, there are environment variables you can set that cause the runtime loader to dump debug information as it loads stuff
2021-10-03 16:21:58	geekosaur	that said, it's not real smart about resolving. but you can watch its progress and the objects it loads and tries to resolve symbols from, including transitive dependencies
2021-10-03 16:22:40	ℹ	Alex_test_ is now known as Alex_test
2021-10-03 16:22:59	→	fusion86 has joined #haskell
2021-10-03 16:28:03	←	max22- has quit (Ping timeout: 252 seconds)
2021-10-03 16:31:42	→	ryantrinkle has joined #haskell
2021-10-03 16:33:22	→	mestre has joined #haskell
2021-10-03 16:33:57	fusion86	Quick question, which of these two is considered the "best" in haskell? 1. importing a whole module, or 2. importing only what you need from a module (e.g `import SDL.Font (Font)`). Or does this depend on how many things you import from a module?
2021-10-03 16:35:43	tomsmeding	geekosaur: LD_DEBUG doesn't seem to do anything unfortunately
2021-10-03 16:35:52	tomsmeding	(remember, android)
2021-10-03 16:35:56	byorgey	fusion86: I tend to use both depending on how many things I import.
2021-10-03 16:36:10	geekosaur	oh, I missed that part
2021-10-03 16:36:18	geekosaur	yeh, android does its own thing :(
2021-10-03 16:36:33	geekosaur	and sadly I suspect that means you lose any useful way to debug
2021-10-03 16:37:04	→	merijn has joined #haskell
2021-10-03 16:37:08	byorgey	fusion86: note that the best practice for writing "industrial-strength" code is probably for every import to either be qualified (import qualified SDL.Font as F) or list all the imports (import SDL.Font (Font)).  That way you can easily tell where every name comes from.
2021-10-03 16:37:21	geekosaur	fusion86, it also depends on the module. many modules expore more or less the same interface and expect to be imported either piece by piece or qualified
2021-10-03 16:38:08	←	merijn has quit (Client Quit)
2021-10-03 16:38:08	geekosaur	(for example, there is significant overlap between list operations and Data.Map)
2021-10-03 16:38:42	clever	byorgey: i also prefer writing code like that, it makes it trivial to trace imports down, without needing a full IDE
2021-10-03 16:38:48	geekosaur	byorgey, that may actually be changing because with HLS yoyu can just point at something to see where it came from
2021-10-03 16:39:01	geekosaur	and HLS is increasingly popular
2021-10-03 16:39:02	fusion86	Yeah that was confusing at first (overlay between Data.Map and Data.Set etc)
2021-10-03 16:39:15	geekosaur	there's enough stuff you already have to keep track of with e.g. types
2021-10-03 16:39:16	byorgey	geekosaur: good point, tool support helps a lot here.  I use HLS myself.
2021-10-03 16:39:22	fusion86	Do you also fully qualify your own modules (withing the same package)
2021-10-03 16:39:38	sm	isn't there an easy way to suppress or redirect stderr ? I'm not finding it 
2021-10-03 16:39:55	fusion86	Because usually you use a lot of exports from your own module
2021-10-03 16:40:46	byorgey	fusion86: in practice, no, I don't.  And as geekosaur points out, maybe I should stop feeling bad about it, because nice tools let us have nice things =)
2021-10-03 16:40:47	geekosaur	sm, not specifically. usually you do that from the shell outside your program. but if the first thing you do in your program is close stderr and then open a Handle on /dev/null or some other file, it should do the same thing
2021-10-03 16:40:50	clever	sm: https://hackage.haskell.org/package/silently-1.2.5.1
2021-10-03 16:41:04	clever	silently will replace the stdout or stderr handles
2021-10-03 16:41:17	sm	thanks!
2021-10-03 16:41:26	geekosaur	sadly we don't have freopen built in, but see that package
2021-10-03 16:41:48	sm	that looks perfect
2021-10-03 16:42:26	tomsmeding	geekosaur: too bad, so close to ghc on my phone
2021-10-03 16:42:27	clever	i think hDuplicateTo is the key bit of magic
2021-10-03 16:42:35	clever	it overwrites a Handle object
2021-10-03 16:42:47	clever	so you can modify what the stdout :: Handle points to
2021-10-03 16:44:40	geekosaur	fusion86, my answer to that question is: usually not because I have more control over naming. but sometimes I'm duplicating APIs as I described above and then I will qualify
2021-10-03 16:45:05	geekosaur	it entirely depends on the use case and what feels more "natural", imo
2021-10-03 16:45:27	fusion86	alright, thanks for the input :)
2021-10-03 16:46:10	→	xiongxin has joined #haskell
2021-10-03 16:46:21	→	eggplantade has joined #haskell
2021-10-03 16:51:02	←	eggplantade has quit (Ping timeout: 252 seconds)
2021-10-03 16:51:59	→	merijn has joined #haskell
2021-10-03 16:59:00	tomjaguarpaw	Is it possible to link to a section in Haddock?
2021-10-03 17:01:17	fusion86	I think that is what the hash does? (Next to source) 
2021-10-03 17:01:39	merijn	I think he means include a link to a section in the docs of a function
2021-10-03 17:01:47	merijn	Which, afaik, isn't possible atm
2021-10-03 17:02:00	merijn	But sounds like it shouldn't be too hard to add and fairly useful
2021-10-03 17:02:09	merijn	So I nominate tomjaguarpaw to shave that yak :p
2021-10-03 17:02:50	→	__monty__ has joined #haskell
2021-10-03 17:06:43	→	gustik has joined #haskell
2021-10-03 17:11:19	→	allbery_b has joined #haskell
2021-10-03 17:11:20	←	geekosaur has quit (Killed (NickServ (GHOST command used by allbery_b)))
2021-10-03 17:11:22	ℹ	allbery_b is now known as geekosaur
2021-10-03 17:18:03	→	slowButPresent has joined #haskell
2021-10-03 17:29:36	tomjaguarpaw	merijn: Yak shaved https://stackoverflow.com/questions/51572074/how-to-link-to-a-named-chunk-of-documentation-in-haddock/69424633#69424633
2021-10-03 17:32:26	←	stiell has quit (Ping timeout: 276 seconds)
2021-10-03 17:32:29	tomsmeding	Small yak
2021-10-03 17:35:02	[exa]	small yak but a welcome one
2021-10-03 17:36:20	merijn	oh, neat
2021-10-03 17:39:26	→	fef has joined #haskell
2021-10-03 17:44:57	→	stiell has joined #haskell
2021-10-03 17:47:55	←	jakalx has left #haskell
2021-10-03 18:07:54	→	[itchyjunk] has joined #haskell
2021-10-03 18:14:18	←	p3n has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-10-03 18:14:46	→	p3n has joined #haskell
2021-10-03 18:19:42	←	vysn has quit (Ping timeout: 252 seconds)
2021-10-03 18:20:06	→	terminerd has joined #haskell
2021-10-03 18:20:08	←	fusion86 has quit (Ping timeout: 252 seconds)
2021-10-03 18:20:40	←	terminerd has quit (Client Quit)
2021-10-03 18:20:59	←	p3n has quit (Remote host closed the connection)
2021-10-03 18:21:52	←	ryantrinkle has quit (Ping timeout: 245 seconds)
2021-10-03 18:27:35	←	xff0x has quit (Ping timeout: 250 seconds)
2021-10-03 18:28:46	→	jakalx has joined #haskell
2021-10-03 18:29:51	juri_	https://www.davidrevoy.com/data/images/blog/2021/2021-09-09_yak-shaving_by-david-revoy.jpg
2021-10-03 18:31:04	→	p3n has joined #haskell
2021-10-03 18:32:55	→	terminerd has joined #haskell
2021-10-03 18:33:40	hpc	https://www.youtube.com/watch?v=AbSehcT19u0
2021-10-03 18:36:12	→	MoC has joined #haskell
2021-10-03 18:36:35	←	terminerd has quit (Changing host)
2021-10-03 18:36:35	→	terminerd has joined #haskell
2021-10-03 18:38:17	→	xff0x has joined #haskell
2021-10-03 18:41:24	←	Vajb has quit (Read error: Connection reset by peer)
2021-10-03 18:44:23	←	p3n has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-10-03 18:44:54	→	p3n has joined #haskell
2021-10-03 18:45:40	→	Vajb has joined #haskell
2021-10-03 18:45:49	→	max22- has joined #haskell
2021-10-03 18:47:38	←	chomwitt has quit (Ping timeout: 252 seconds)
2021-10-03 18:47:39	←	Vajb has quit (Read error: Connection reset by peer)
2021-10-03 18:52:09	→	fusion86 has joined #haskell
2021-10-03 18:53:54	→	betelgeuse has joined #haskell
2021-10-03 18:54:47	←	xff0x has quit (Ping timeout: 252 seconds)
2021-10-03 18:55:08	→	Vajb has joined #haskell
2021-10-03 18:55:23	←	fusion86 has quit (Client Quit)
2021-10-03 18:55:29	→	xff0x has joined #haskell
2021-10-03 18:56:20	→	machinedgod has joined #haskell
2021-10-03 19:04:38	←	xiongxin has quit (Ping timeout: 252 seconds)
2021-10-03 19:04:51	→	xiongxin has joined #haskell
2021-10-03 19:05:38	→	pavonia has joined #haskell
2021-10-03 19:05:44	←	hololeap has quit (Remote host closed the connection)
2021-10-03 19:07:09	→	hololeap has joined #haskell
2021-10-03 19:08:22	←	terminerd has quit (Quit: WeeChat 3.2)
2021-10-03 19:10:45	←	Vajb has quit (Read error: Connection reset by peer)
2021-10-03 19:11:15	→	Morrow has joined #haskell
2021-10-03 19:11:22	→	Vajb has joined #haskell
2021-10-03 19:12:41	→	birne has joined #haskell
2021-10-03 19:13:27	birne	Hi! Is this the right channel for beginner questions, or is there a more suitable place?
2021-10-03 19:14:33	geekosaur	this one is fine
2021-10-03 19:14:36	merijn	Depends whether they're beginner *Haskell* questions or, like, beginner baking :p
2021-10-03 19:17:24	birne	Good point. Fortunately it's Haskell ;)
2021-10-03 19:17:42	spruit11	> 0
2021-10-03 19:17:43	lambdabot	 0
2021-10-03 19:18:29	spruit11	> let f = (\f -> f .  f) in f (\x -> x + 1) 0
2021-10-03 19:18:30	lambdabot	 2
2021-10-03 19:18:34	pavonia	Also, you can never be sure that an apparently innocent beginner question won't escalate to a complex category theory discussion :p
2021-10-03 19:18:41	spruit11	> let f = (\f -> f .  f) in f f f f (\x -> x + 1) 0
2021-10-03 19:18:42	lambdabot	 65536
2021-10-03 19:19:30	birne	I'm really confused by Applicative.. I think I get what it does, as I just tried re-implementing it for a DIY list type and it works just the same, but I don't get the point. I know this is a very unspecific question, but maybe someone could point me to a good explanation of what it's used/useful for?
2021-10-03 19:20:45	←	Gurkenglas has quit (Read error: Connection reset by peer)
2021-10-03 19:21:06	geekosaur	Applicative works well for parsers, for one thing
2021-10-03 19:21:08	→	Gurkenglas has joined #haskell
2021-10-03 19:21:28	birne	To pile onto the confusion, I'm doing an exercise which asks me to define a zipWith using <*>, and I feel like I'm really missing the point somewhere, as I just can't of a non-convoluted way to implement it
2021-10-03 19:22:37	spruit11	applicative is just another take on 'programming modulo a theory',  right?
2021-10-03 19:22:44	birne	Whoops, I meant to say I cant *think* of a way 
2021-10-03 19:22:47	→	chomwitt has joined #haskell
2021-10-03 19:23:03	merijn	birne: Oh, maybe you're stumbling over the fact that lists actually have *two* lawful Applicatives?
2021-10-03 19:23:29	merijn	birne: One that works like a generalised zip and one that works like Cartesian product
2021-10-03 19:24:29	→	lbseale has joined #haskell
2021-10-03 19:24:34	merijn	birne: I think one of the simpler ones is Maybe
2021-10-03 19:25:02	merijn	birne: Suppose you have two (optional) values and wanna combine them somehow if both exist (and detect if one is missing)
2021-10-03 19:25:16	merijn	> (+) <$> Just 2 <*> Just 3
2021-10-03 19:25:18	lambdabot	 Just 5
2021-10-03 19:25:22	merijn	> (+) <$> Just 2 <*> Nothing
2021-10-03 19:25:23	lambdabot	 Nothing
2021-10-03 19:25:31	merijn	> (+) <$> Nothing <*> Just 3
2021-10-03 19:25:33	lambdabot	 Nothing
2021-10-03 19:25:57	spruit11	when you look at the type of bind (M a) -> (a -> M b) -> (M b) and you switch the arguments you end up with (a -> M b) -> M a -> M b,  which suspiciously looks like function application with some hand waving.  applicative just takes it a bit more in that direction
2021-10-03 19:26:01	spruit11	my $.02
2021-10-03 19:26:05	merijn	birne: So I have a function on two values (the (+)), and 2 maybes where I may or may not have a value
2021-10-03 19:26:12	spruit11	take it as you will.  might be totally wrong
2021-10-03 19:26:25	merijn	birne: Applicative lets you combine values "in" the Maybe without manually checking if they exist first
2021-10-03 19:26:41	merijn	spruit11: That's Monad and not Applicative, though :)
2021-10-03 19:26:57	spruit11	sure.  I assume people understand that bind is of monad
2021-10-03 19:27:37	spruit11	it's just all 'programming modulo some theory'.  i.e.,  function application does a bit more than normal
2021-10-03 19:27:51	birne	merijn: That sounds like it could be the issue. I think I re-implemented the cartesian product one and was really confused about how this is useful for implementing a zip.
2021-10-03 19:27:51	geekosaur	well, "application with some hand waving" isn't wrong, it just takes you to one of the "parents" of Applicative (Arrow)
2021-10-03 19:28:33	merijn	birne: There is a newtype "newtype ZipList a = ZipList { getZipList :: [a] }" that implement the other applicative
2021-10-03 19:28:49	merijn	> (+) <$> [1..5] <*> [6..10]
2021-10-03 19:28:50	lambdabot	 [7,8,9,10,11,8,9,10,11,12,9,10,11,12,13,10,11,12,13,14,11,12,13,14,15]
2021-10-03 19:28:58	merijn	> (+) <$> ZipList [1..5] <*> ZipList [6..10]
2021-10-03 19:29:00	lambdabot	 ZipList {getZipList = [7,9,11,13,15]}
2021-10-03 19:29:14	merijn	> getZipList ((+) <$> ZipList [1..5] <*> ZipList [6..10])
2021-10-03 19:29:16	lambdabot	 [7,9,11,13,15]
2021-10-03 19:30:01	merijn	birne: The main reason that the default one is Cartesian product is that Cartesian product has a lawful Monad and ZipList does not have a lawful Monad instance
2021-10-03 19:35:04	ℹ	irc: disconnected from server
2021-10-03 19:35:23	→	oxide has joined #haskell
2021-10-03 19:35:23	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-10-03 19:35:23	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-10-03 19:35:23	ℹ	Channel #haskell: 726 nicks (1 op, 0 voices, 725 normals)
2021-10-03 19:35:24	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-10-03 19:37:51	→	desophos has joined #haskell
2021-10-03 19:39:17	→	mei has joined #haskell
2021-10-03 19:43:08	←	lbseale has quit (Ping timeout: 252 seconds)
2021-10-03 19:44:57	←	tubogram has quit (Ping timeout: 260 seconds)
2021-10-03 19:45:42	→	tubogram has joined #haskell
2021-10-03 19:45:53	←	snekism`` has quit (Ping timeout: 252 seconds)
2021-10-03 19:47:32	←	merijn has quit (Ping timeout: 252 seconds)
2021-10-03 19:48:23	←	birne has left #haskell
2021-10-03 19:48:45	→	eggplantade has joined #haskell
2021-10-03 19:50:01	→	Morrow_ has joined #haskell
2021-10-03 19:51:52	←	Morrow has quit (Ping timeout: 245 seconds)
2021-10-03 19:51:56	←	Morrow_ has quit (Read error: Connection reset by peer)
2021-10-03 19:53:05	←	eggplantade has quit (Ping timeout: 252 seconds)
2021-10-03 19:58:39	→	Vajb has joined #haskell
2021-10-03 19:59:21	←	Lord_of_Life has quit (Excess Flood)
2021-10-03 19:59:56	→	Lord_of_Life has joined #haskell
2021-10-03 20:05:09	←	Vajb has quit (Read error: Connection reset by peer)
2021-10-03 20:05:13	←	mrckndt has quit (Quit: mrckndt)
2021-10-03 20:05:48	→	Vajb has joined #haskell
2021-10-03 20:12:01	→	rembo10_ has joined #haskell
2021-10-03 20:15:55	→	merijn has joined #haskell
2021-10-03 20:19:03	←	acidjnk has quit (Ping timeout: 252 seconds)
2021-10-03 20:20:12	←	merijn has quit (Ping timeout: 245 seconds)
2021-10-03 20:20:16	→	bobajett has joined #haskell
2021-10-03 20:21:32	bobajett	hello, I have a noob question about (recursion?) I think.
2021-10-03 20:21:54	bobajett	I have a list xs = [104, 101, 108, 108, 111] 
2021-10-03 20:22:32	[exa]	bobajett: looks a bit like ascii "hello" right? :]
2021-10-03 20:23:04	bobajett	exa correct. But I have a function Char -> [Char] - say foo 104 will return ['h','H']
2021-10-03 20:23:35	bobajett	my problem is trying to do a for loop within a for loop
2021-10-03 20:23:45	bobajett	so I can't figure out how to write  a function that will
2021-10-03 20:24:55	[exa]	guessing -- you want the function output something like properly capitalized "Hello", right?
2021-10-03 20:25:22	[exa]	(or "HeLlO" or something :] )
2021-10-03 20:25:39	bobajett	exa, thank you for being patient, I'm struggling to figure out how to pose my question .. one sec
2021-10-03 20:26:21	→	wroathe has joined #haskell
2021-10-03 20:26:22	←	wroathe has quit (Changing host)
2021-10-03 20:26:22	→	wroathe has joined #haskell
2021-10-03 20:26:41	[exa]	ok (I'm doing laundry, might lag a bit)
2021-10-03 20:26:57	bobajett	if i map say toUpper over each item of xs, I get "HELLO". But I'd like to map over xs
2021-10-03 20:27:38	bobajett	ok let me put it this way. toGreek char = [returns lowercase greek char, uppercase greek char]
2021-10-03 20:27:51	→	rtjure has joined #haskell
2021-10-03 20:28:00	[exa]	yes
2021-10-03 20:28:29	[exa]	btw it's usually best to show a few examples of the outputs you want for various inputs
2021-10-03 20:28:40	bobajett	now I'd like to write a function foo that returns ['h'//greek, 'e','l','l',o//english], ['H'//upper greek, 'e','l','l','o], 
2021-10-03 20:28:58	bobajett	and then similarly for each letter in hello, while keeping the rest of "hello" intact.
2021-10-03 20:29:30	bobajett	in python it would be easy to index into the original list while for looping over it
2021-10-03 20:29:48	[exa]	the 'h'//greek is "how 'h' would look in greek" right? something like χ say
2021-10-03 20:29:57	bobajett	Correct
2021-10-03 20:30:01	[exa]	ok perfect
2021-10-03 20:31:17	[exa]	so the easiest haskell solution is to just 1] make a complete translations, say "hello" all in upper greek and lower greek 2] paste it together with something like `head upperGreekTranslation ++ tail lowerGreekTranslation` 3] rely on the laziness to remove the unnecessary evaluation for you for free
2021-10-03 20:31:35	[exa]	*make both complete translations
2021-10-03 20:32:30	[exa]	or, in your case, `head upperGreekTranslation ++ tail lowerEnglishTranslation`
2021-10-03 20:34:15	bobajett	sorry let me try again, I'll paste this into a gist
2021-10-03 20:37:06	←	fef has quit (Remote host closed the connection)
2021-10-03 20:40:35	bobajett	https://paste.tomsmeding.com/JEmQ244f
2021-10-03 20:41:23	←	ByronJohnson has quit (Remote host closed the connection)
2021-10-03 20:43:35	→	timCF has joined #haskell
2021-10-03 20:43:46	[exa]	aah okay
2021-10-03 20:45:09	timCF	Hello! Does anybody have an idea why I can't `mapM` over `Set a`? Compiler say the formal reason is that `Traversable` instance is not there, but I can't see the reason "why not".
2021-10-03 20:45:40	[exa]	bobajett: so what if you add an accumulator to your function there that remembers what should be in the beginning of the string?
2021-10-03 20:46:24	bobajett	exa! yes that makes sense! I think that's the pointer I needed! 
2021-10-03 20:46:42	[exa]	bobajett: in the list comprehension, you would return something like `accum ++ y:xs`
2021-10-03 20:46:57	bobajett	Thank you thank you!!
2021-10-03 20:47:00	[exa]	and for the call you'd just add the `x` to the end of `accum`
2021-10-03 20:47:04	[exa]	but!
2021-10-03 20:47:10	bobajett	aha a catch?
2021-10-03 20:47:19	[exa]	there might be a better possibility!
2021-10-03 20:47:21	←	Vajb has quit (Read error: Connection reset by peer)
2021-10-03 20:47:44	[exa]	if you look at your output, the first pair is basically right, while the others lack the 'h' on the beginning right?
2021-10-03 20:48:04	bobajett	right
2021-10-03 20:48:16	[exa]	so what about just adding the 'h' to the beginning of the result of `primitiveRecursion xs` ?
2021-10-03 20:48:26	→	Vajb has joined #haskell
2021-10-03 20:48:28	[exa]	(you'll probably need double `map` )
2021-10-03 20:48:48	dsal	:t mapM
2021-10-03 20:48:49	lambdabot	(Traversable t, Monad m) => (a -> m b) -> t a -> m (t b)
2021-10-03 20:49:13	bobajett	ok I'll try to wrestle with that now, thanks!
2021-10-03 20:49:48	dsal	timCF: You mean you don't know why Set isn't Traversable?
2021-10-03 20:50:25	timCF	dsal: Yeah. My intuition say it should be, but it's not
2021-10-03 20:50:27	dsal	timCF: Traversable is a subclass of Functor, and a Set can't be a Functor.
2021-10-03 20:50:41	[exa]	bobajett: if lost, perhaps check out the type of `map (map (+1))`
2021-10-03 20:50:49	←	lambdap has quit (Quit: lambdap)
2021-10-03 20:50:53	bobajett	Thank you!
2021-10-03 20:50:56	timCF	dsal: because of the ordering issue?
2021-10-03 20:51:11	→	lambdap has joined #haskell
2021-10-03 20:51:23	dsal	Not so much ordering, but because a functor has to retain shape on transform, and that's not generally possible with a Set.
2021-10-03 20:51:36	dsal	> even <$> [1, 2, 3, 4]
2021-10-03 20:51:38	lambdabot	 [False,True,False,True]
2021-10-03 20:51:44	[exa]	timCF: `fmap (const ())` would kinda destroy the structure, and you'd need to have Ord on the fmap to be able to implement that
2021-10-03 20:51:49	←	lambdap has quit (Client Quit)
2021-10-03 20:51:49	dsal	If you did that with a Set instead of a List, you'd end up with something that has a different size.
2021-10-03 20:51:55	→	fef has joined #haskell
2021-10-03 20:52:36	[exa]	bobajett: yw, let us know how it ended up. :D
2021-10-03 20:52:58	timCF	dsal: [exa]: oh, I got it. It's probably just because of how Set is represented in memory. Thanks!
2021-10-03 20:53:09	→	lambdap has joined #haskell
2021-10-03 20:53:13	dsal	It's not about how it's represented in memory.  It's about what it *means*.
2021-10-03 20:53:29	[exa]	yep, literal Clash Of Invariants
2021-10-03 20:54:04	←	thyriaen__ has quit (Remote host closed the connection)
2021-10-03 20:54:08	dsal	Set can't have duplicate elements and fmap can't change structure.
2021-10-03 20:54:50	[exa]	(even if it could, it wouldn't know how to)
2021-10-03 20:55:42	timCF	aaah
2021-10-03 20:55:45	timCF	got it
2021-10-03 20:56:25	timCF	if result of `f x` inside of `f <$> xs` will duplicate - it can not produce new set
2021-10-03 20:57:03	[exa]	even `fmap id` is dangerous there-- how does it check there are no duplicates?
2021-10-03 20:57:17	dsal	Yeah, you can think of   `f <$> [a, b, c]` as `[f a, f b, f c]` and not be able to tell the difference.  :)
2021-10-03 20:57:18	[exa]	(except for deconstructing `id`, which it can't)
2021-10-03 20:58:18	→	mortemeur has joined #haskell
2021-10-03 20:59:56	[exa]	anyway, if you just want to do a single action on each element, you can `traverse.toList`
2021-10-03 21:00:47	[exa]	and given you know you're e.g. not messing up the ordering, you can build the new map in O(1) with `fromAscendingList` or what was that called
2021-10-03 21:01:29	[exa]	s/O(1)/O(n)/ whoops
2021-10-03 21:01:30	dsal	*if* you're not messing up the ordering.  The function can do anything.
2021-10-03 21:04:54	timCF	In my case I just discovered that resulting value after traverse contains MVar and can not have Ord instance at all, so I guess I'll just use a list)
2021-10-03 21:05:30	bobajett	exa I got it to work with the accumulator: https://paste.tomsmeding.com/mCeqfNp2 perhaps you provide the map (map) solution? :-)
2021-10-03 21:05:40	dsal	using `toList` feels like giving up sometimes. heh
2021-10-03 21:06:23	dsal	bobajett: Things get easier if you started putting type annotations on all your toplevel definitions.
2021-10-03 21:07:17	dsal	You get to think in a higher level abstraction and see the patterns.  Plus, people reading the code (like you) later can know what kinds of things are being done.
2021-10-03 21:07:37	bobajett	dsal, yes, you're right! I'll start following that discipline. The initial frustration of hitting into the type error does pay off in a better understanding of the function later
2021-10-03 21:09:22	dsal	e.g., I don't understand what `result2` is here.
2021-10-03 21:09:46	[exa]	bobajett: o nice
2021-10-03 21:10:35	[exa]	bobajett: in the prefixing solution, you'd just do `map (map (x:)) (foo' xs)`
2021-10-03 21:10:54	timCF	bobajett: in some cases you **need** type annotation to make code work. Haskell type inference is good, but still limited.
2021-10-03 21:10:58	[exa]	(assuming the accumulator isn't there ofc)
2021-10-03 21:12:48	bobajett	dsal I was confused about how to do a sort of for loop within a for loop in haskell. using my basic knowledge of primitive recursive functions I would lose the beginning of the list
2021-10-03 21:13:03	bobajett	until exa pointed out I should keep an accumulator to "remember" the front of the list
2021-10-03 21:13:32	dsal	 One nice thing about haskell is that it doesn't have any loops.
2021-10-03 21:13:42	dsal	Another nice thing is how many loops it has.
2021-10-03 21:13:51	[exa]	bobajett: anyway, the double map is technically a for-in-a-for-loop, just kinda more data-driven
2021-10-03 21:14:39	→	son0p has joined #haskell
2021-10-03 21:15:50	←	timCF has quit (Quit: leaving)
2021-10-03 21:16:10	→	zmt00 has joined #haskell
2021-10-03 21:18:04	←	hrnz has quit (Quit: das ist mir zu bld hier; bb)
2021-10-03 21:18:18	→	hrnz has joined #haskell
2021-10-03 21:18:47	dsal	The cool thing is you can stop thinking about "loops" at some point and just start thinking about transformations.  If you're using something like `map` then you only have to think about one thing at a time.  If the one thing you're doing also needs a similar transformation, you can just think about *that* one thing at a time.
2021-10-03 21:19:05	→	ByronJohnson has joined #haskell
2021-10-03 21:22:51	←	alx741 has quit (Quit: alx741)
2021-10-03 21:24:10	→	alx741 has joined #haskell
2021-10-03 21:29:52	←	xiongxin has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-10-03 21:30:56	←	machinedgod has quit (Ping timeout: 252 seconds)
2021-10-03 21:33:36	←	hololeap has quit (Quit: Bye)
2021-10-03 21:35:30	→	jaitoon1 has joined #haskell
2021-10-03 21:36:24	Cajun	and transformations dont typically have off-by-one errors, its super nice
2021-10-03 21:36:28	→	tzh has joined #haskell
2021-10-03 21:38:12	dsal	Yeah, most of the "loop" like things wouldn't have off-by-one errors.  maps, folds, etc...   The exception is those partial folds on non-monoidal values that go poorly.
2021-10-03 21:38:16	←	mortemeur has quit (Quit: Leaving)
2021-10-03 21:38:19	ℹ	notzmv- is now known as notzmv
2021-10-03 21:39:00	←	jaitoon has quit (Ping timeout: 240 seconds)
2021-10-03 21:39:03	→	econo has joined #haskell
2021-10-03 21:39:12	→	eggplantade has joined #haskell
2021-10-03 21:39:26	dsal	In Haskell, you get to get different things wrong! :)
2021-10-03 21:40:37	←	Vajb has quit (Read error: Connection reset by peer)
2021-10-03 21:41:51	→	Vajb has joined #haskell
2021-10-03 21:44:12	hpc	in haskell you don't get off-by-one errors, you get off-by-infinity errors :D
2021-10-03 21:45:00	dsal	Or off-by-bottom
2021-10-03 21:45:13	bobajett	off-by-one errors are oh so mundance, off-by-infinity is much more exotic!
2021-10-03 21:45:38	bobajett	s/mundance/mundane/
2021-10-03 21:46:20	←	hyiltiz has quit (Ping timeout: 252 seconds)
2021-10-03 21:46:42	←	chisui has quit (Ping timeout: 256 seconds)
2021-10-03 21:46:51	←	bobajett has quit (Remote host closed the connection)
2021-10-03 21:46:58	int-e	. o O ( STG question: what happens if you ENTER a bottom-less pit... )
2021-10-03 21:47:05	→	hyiltiz has joined #haskell
2021-10-03 21:50:22	→	machinedgod has joined #haskell
2021-10-03 21:51:44	Digit	has anyone made "Roll your own IRC bot" tutorial bot multi-chan capable?  (and besides copying the code, even... is there a tutorial for that too?)
2021-10-03 21:52:10	→	werneta has joined #haskell
2021-10-03 21:53:23	spruit11	as far as I can see irc doesn't even make a big difference between channels
2021-10-03 21:53:30	spruit11	at least,  the protocol
2021-10-03 21:53:54	←	waleee has quit (Quit: WeeChat 3.3)
2021-10-03 21:54:05	spruit11	it's just a field in a general message.  it's the front end which presents it as multiple channels
2021-10-03 21:54:29	spruit11	and the server won't send messages to you from other channels of course
2021-10-03 21:55:02	spruit11	*make that the front-end of the client
2021-10-03 21:55:27	⚡	Digit gives his brain a go at trying to make the tutorial's mono-chan example bot join more chans, optimistically, but experience teaches him to expect fail.
2021-10-03 21:56:19	→	waleee has joined #haskell
2021-10-03 21:58:16	←	dajoer has quit (Quit: leaving)
2021-10-03 21:59:39	int-e	clean = drop 1 . dropWhile (/= ':') . drop 1 <-- that's *not* clean at all
2021-10-03 22:03:24	int-e	(This turns ":dons!i=dons@my.net PRIVMSG #tutbot-testing :hello" into just  "hello", but that means it ignores the source (dons...), the command (PRIVMSG), and the target (#tutbot-testing), all of which is pretty relevant informaiton.)
2021-10-03 22:04:29	←	machinedgod has quit (Ping timeout: 252 seconds)
2021-10-03 22:05:24	→	MQ-17J has joined #haskell
2021-10-03 22:11:08	←	wroathe has quit (Ping timeout: 252 seconds)
2021-10-03 22:14:34	→	CiaoSen has joined #haskell
2021-10-03 22:16:02	←	mbuf has quit (Quit: Leaving)
2021-10-03 22:29:17	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-10-03 22:30:17	←	jakalx has left #haskell
2021-10-03 22:32:08	←	mikoto-chan has quit (Quit: mikoto-chan)
2021-10-03 22:34:33	→	MQ-17J has joined #haskell
2021-10-03 22:34:57	←	ByronJohnson has quit (Remote host closed the connection)
2021-10-03 22:37:29	→	jakalx has joined #haskell
2021-10-03 22:37:49	→	rekahsoft has joined #haskell
2021-10-03 22:38:34	→	wroathe has joined #haskell
2021-10-03 22:38:35	←	wroathe has quit (Changing host)
2021-10-03 22:38:35	→	wroathe has joined #haskell
2021-10-03 22:38:47	→	hnOsmium0001 has joined #haskell
2021-10-03 22:43:17	Cajun	oh and while "off by infinity" is still relevant, what does it mean when GHC says "cannot construct the infinite type [something]"? ive never really understood what that means
2021-10-03 22:43:35	←	wroathe has quit (Ping timeout: 252 seconds)
2021-10-03 22:44:35	ℹ	spruit11 is now known as sprout
2021-10-03 22:44:36	pavonia	It tries to infer something like a = [a] which would give an infinte type
2021-10-03 22:48:02	Cajun	i guess that makes sense, thanks :)
2021-10-03 22:48:04	[exa]	Cajun: take a function with 2 branches: `f 0 a = a; f 1 a = [a]`. GHC assumes that the return types must be same outside (because both are returned from the same function) and also same inside (because they share `a`). That gives you equation `a = [a]` and the only valid solution to that is to substitute `a` with infinite nested lists, because, mathematically, `[[[[[[...]]]]]] == [[[[[[...]]]]]]`, right? :]
2021-10-03 22:49:00	←	geekosaur has quit (Remote host closed the connection)
2021-10-03 22:49:03	←	sprout has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-10-03 22:49:09	→	ByronJohnson has joined #haskell
2021-10-03 22:49:24	→	geekosaur has joined #haskell
2021-10-03 22:49:28	→	sprout has joined #haskell
2021-10-03 22:49:54	Cajun	so it always means your resulting type (or whatever the term for the rightmost type in the signature is) is messed up in one of the branches?
2021-10-03 22:51:24	c_wraith	it is an error attempting to unify the types of something somewhere.  You can manage it without any branches.
2021-10-03 22:52:26	Taneb	:t \x -> x ++ [x]
2021-10-03 22:52:27	lambdabot	error:
2021-10-03 22:52:27	lambdabot	    • Occurs check: cannot construct the infinite type: a ~ [a]
2021-10-03 22:52:27	lambdabot	    • In the expression: x
2021-10-03 22:55:04	c_wraith	I remember hearing that there was an experimental version of ML that allowed infinite types, and it turned out that a surprising number of type errors were infinite types.
2021-10-03 22:55:27	Cajun	how would you even compute an infinite type?
2021-10-03 22:55:36	hpc	same way you compute an infinite value
2021-10-03 22:55:38	hpc	lazily
2021-10-03 22:55:51	c_wraith	you can have infinite types in Haskell, you just need to hide that fact from the compiler.
2021-10-03 22:56:25	hpc	if you have the type [[[...]]], you know what the data constructors for that type are because [] is the "constructor" of the type
2021-10-03 22:57:19	hpc	and yeah, take a look at Fix for one way to break the loop for ghc
2021-10-03 22:58:41	c_wraith	after all, if you went to the trouble of creating a non-infinite wrapper for an infinite type, you probably actually meant to
2021-10-03 22:59:12	c_wraith	It's only when it discovers an infinite type that it reports a bug.
2021-10-03 22:59:36	c_wraith	I recall exactly once when it wasn't a program bug, and the solution was a wrapper to make the types finite.
2021-10-03 22:59:46	c_wraith	(in the stuff I've done)
2021-10-03 22:59:55	→	wroathe has joined #haskell
2021-10-03 22:59:55	←	wroathe has quit (Changing host)
2021-10-03 22:59:55	→	wroathe has joined #haskell
2021-10-03 23:02:03	→	snekism has joined #haskell
2021-10-03 23:02:31	zincy_	If I am writing a compiler which outputs Javascript how should I output the Javascript code?
2021-10-03 23:03:10	c_wraith	the only answer possible from that level of detail is "as javascript code"
2021-10-03 23:03:21	←	ByronJohnson has quit (Remote host closed the connection)
2021-10-03 23:03:58	zincy_	Yeah bad question
2021-10-03 23:04:04	zincy_	Let me think
2021-10-03 23:04:22	←	wroathe has quit (Ping timeout: 245 seconds)
2021-10-03 23:05:40	→	justsomeguy has joined #haskell
2021-10-03 23:05:50	←	poljar has quit (Remote host closed the connection)
2021-10-03 23:06:03	→	poljar has joined #haskell
2021-10-03 23:08:20	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-10-03 23:11:47	→	vysn has joined #haskell
2021-10-03 23:13:23	→	MQ-17J has joined #haskell
2021-10-03 23:16:51	→	Guest1372 has joined #haskell
2021-10-03 23:18:30	[exa]	zincy_: write a prettifier and just prettyprint it ?
2021-10-03 23:20:48	zincy_	So there isn't a clever way of generating JS it usually just comes down to writing the JS to some degree out explicitly? 
2021-10-03 23:21:05	zincy_	Was thinking perhaps there is a library where you could use data constructors to create JS exprs
2021-10-03 23:21:45	zincy_	So I am thinking DslAST -> jsAST -> Text
2021-10-03 23:22:06	[exa]	you might actually steal something battle-tested from GHCJS
2021-10-03 23:23:30	zincy_	Yeah
2021-10-03 23:23:37	→	hololeap has joined #haskell
2021-10-03 23:24:17	zincy_	So even if you target a backend like LLVM is a compiler always mapping an AST from one language into another language's AST?
2021-10-03 23:24:40	zincy_	Or does it ever make sense to skip the AST transformation and just go straight to Text
2021-10-03 23:24:52	zincy_	Hmm optimisations I guess is the point
2021-10-03 23:25:06	[exa]	I just found `JMacro` which seems to be the base for what ghcjs does
2021-10-03 23:25:52	zincy_	wow nice find
2021-10-03 23:25:55	zincy_	Looks perfect
2021-10-03 23:26:43	→	Sgeo has joined #haskell
2021-10-03 23:26:54	[exa]	anyway these decisions usually depend on how complicated the compiler is; the general advice for compilers is to keep the IR as long as possible because you'll inevitably be adding one other final compile pass for like 20 times
2021-10-03 23:27:08	←	neurocyte0132 has quit (Read error: Connection reset by peer)
2021-10-03 23:27:36	[exa]	and having a solid prettyprinter allows you to inspect the stuff in the middle, which is priceless
2021-10-03 23:27:37	→	neurocyte0132 has joined #haskell
2021-10-03 23:27:37	←	neurocyte0132 has quit (Changing host)
2021-10-03 23:27:37	→	neurocyte0132 has joined #haskell
2021-10-03 23:28:33	→	mrckndt has joined #haskell
2021-10-03 23:28:34	monochrom	Whenever you have parentheses and precedence to worry about, going directly to string is less manageable.
2021-10-03 23:29:32	[exa]	(((((or just play it safe)))))
2021-10-03 23:30:10	→	ByronJohnson has joined #haskell
2021-10-03 23:30:40	[exa]	wow actually JMacro structure looks pretty much straightforward
2021-10-03 23:30:45	→	neurocyte01328 has joined #haskell
2021-10-03 23:30:46	←	neurocyte01328 has quit (Changing host)
2021-10-03 23:30:46	→	neurocyte01328 has joined #haskell
2021-10-03 23:31:44	zincy_	Yeah thanks for finding it :)
2021-10-03 23:32:02	zincy_	monochrom: Cool, so direct to string is more for trivial compilers
2021-10-03 23:32:19	[exa]	I expected dark magicks but the AST is just there, which is cool
2021-10-03 23:33:07	←	neurocyte0132 has quit (Ping timeout: 245 seconds)
2021-10-03 23:33:07	ℹ	neurocyte01328 is now known as neurocyte0132
2021-10-03 23:33:36	[exa]	zincy_: re strings, perhaps that's more like for languages where making the intermediate structure right is PITA, like perl, java, pythons, C's, ...
2021-10-03 23:34:50	zincy_	[exa]: So those langs are where you dont want strings right?
2021-10-03 23:35:05	←	justsomeguy has quit (Quit: WeeChat 3.2)
2021-10-03 23:35:10	[exa]	no these langs are generally where you don't want to manage large ASTs
2021-10-03 23:35:28	zincy_	oh
2021-10-03 23:35:59	[exa]	like, defining a nice working AST in haskell is magically simple in haskell, you've got all the tools to do it right in the most naive way imaginable
2021-10-03 23:36:32	zincy_	Ah sorry I think I misunderstood you are talking about the lang the compiler is implemented in not the target of the compiler
2021-10-03 23:36:53	→	wroathe has joined #haskell
2021-10-03 23:36:54	←	wroathe has quit (Changing host)
2021-10-03 23:36:54	→	wroathe has joined #haskell
2021-10-03 23:37:00	[exa]	in OOP languages you start with some kind of an abstract class, visitor which is insufficiently polymorphic, recursion-simulating traversal engine, ...
2021-10-03 23:37:17	[exa]	and in perl you just smash the regexes together™
2021-10-03 23:37:41	→	hiruji` has joined #haskell
2021-10-03 23:37:52	→	eggplant_ has joined #haskell
2021-10-03 23:37:56	zincy_	So is compiler structure the same high level across OOP vs functional but the implementation is just different
2021-10-03 23:38:13	←	mestre has quit (Quit: Lost terminal)
2021-10-03 23:38:21	←	hiruji has quit (Ping timeout: 264 seconds)
2021-10-03 23:38:25	zincy_	As in if I did a compilers undergrad course would that all be pretty applicable to Haskell (assuming course is OOP)
2021-10-03 23:38:31	[exa]	yeah, compilers are usually just functions from some AST/IR to another AST/IR
2021-10-03 23:38:51	[exa]	yep, generally
2021-10-03 23:39:25	[exa]	compilers are about battling the complexity of the language you're compiling, the complexity of the language used for implementation of the compiler kinda abstracts out usually
2021-10-03 23:39:51	zincy_	ok thats good to hear
2021-10-03 23:39:53	[exa]	that said, many undergrad courses spend like 50% of the time with "how not to do the parsing wrong"
2021-10-03 23:40:16	[exa]	which is cool and people at least unlearn to write parsers by hand
2021-10-03 23:40:24	zincy_	and the answer is use Megaparsec and you can't :D
2021-10-03 23:40:26	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-10-03 23:41:35	[exa]	and the second half-or-less is a straightforward "let's translate to SSA, then to stack-ish machine and then to assembly, and think about how cool it would be to have simple optimizations"
2021-10-03 23:42:40	[exa]	which is technically nice because 90% of the students then become kinda self sufficient with the ability to reimplement some useful subset of C
2021-10-03 23:42:43	←	sprout has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-10-03 23:42:56	←	hiruji` has quit (Remote host closed the connection)
2021-10-03 23:43:01	→	sprout has joined #haskell
2021-10-03 23:43:03	[exa]	no idea about your particular course though, ymmv :]
2021-10-03 23:43:32	←	neurocyte0132 has quit (Ping timeout: 252 seconds)
2021-10-03 23:43:44	monochrom	Wait, I think it's easier to AST->stackmachine first, then stackmachine->SSA, then SSA-ASM.
2021-10-03 23:44:10	[exa]	ah, likely
2021-10-03 23:44:36	monochrom	Or skip stackmachine. At any rate I think SSA->stackmachine->ASM is counterproductive.
2021-10-03 23:44:59	←	p3n has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-10-03 23:45:29	sprout	uh,  if any I would assume ast->ssa->stack->asm
2021-10-03 23:45:37	→	neurocyte01328 has joined #haskell
2021-10-03 23:45:37	sprout	why stack first?
2021-10-03 23:45:38	←	neurocyte01328 has quit (Changing host)
2021-10-03 23:45:38	→	neurocyte01328 has joined #haskell
2021-10-03 23:45:57	monochrom	I once did ast->stack and it was too easy.
2021-10-03 23:46:17	[exa]	depends on the language I'd say
2021-10-03 23:46:23	monochrom	It's just like implementing an RPN calculator.
2021-10-03 23:46:26	[exa]	but yeah good point. :]
2021-10-03 23:46:29	→	hiruji has joined #haskell
2021-10-03 23:47:29	monochrom	Hutton also kept doing ast->stack for like 20 years. Only recently dared to try register machine.
2021-10-03 23:47:50	[exa]	thinking about that now, on the C sample
2021-10-03 23:48:09	[exa]	you can do pretty well with just ast->stackmachine->asm
2021-10-03 23:50:18	[exa]	then you go for SSA as optimization, then a stack+register machine (for spilling stuff), then asm
2021-10-03 23:51:13	[exa]	otoh direct ast->ssa isn't that hard for C either, or am I missing something?
2021-10-03 23:51:47	monochrom	Yeah I'm OK with skipping the stack machine.
2021-10-03 23:52:12	[exa]	so many possibilities. :]
2021-10-03 23:54:01	→	merijn has joined #haskell
2021-10-03 23:54:07	←	vicfred__ has quit (Quit: Leaving)
2021-10-03 23:54:32	←	wroathe has quit (Ping timeout: 252 seconds)
2021-10-03 23:54:32	→	neurocyte013288 has joined #haskell
2021-10-03 23:54:33	←	neurocyte013288 has quit (Changing host)
2021-10-03 23:54:33	→	neurocyte013288 has joined #haskell
2021-10-03 23:56:41	←	neurocyte01328 has quit (Ping timeout: 252 seconds)
2021-10-03 23:56:41	ℹ	neurocyte013288 is now known as neurocyte01328
2021-10-03 23:59:14	→	jokleinn has joined #haskell
2021-10-04 00:01:21	←	max22- has quit (Ping timeout: 250 seconds)
2021-10-04 00:01:28	←	neurocyte01328 has quit (Quit: The Lounge - https://thelounge.chat)
2021-10-04 00:02:44	→	tfeb has joined #haskell
2021-10-04 00:03:01	→	geranim0 has joined #haskell
2021-10-04 00:05:06	ℹ	Athas_ is now known as Athas
2021-10-04 00:05:09	→	neurocyte013288 has joined #haskell
2021-10-04 00:05:09	←	neurocyte013288 has quit (Changing host)
2021-10-04 00:05:09	→	neurocyte013288 has joined #haskell
2021-10-04 00:05:41	→	lavaman has joined #haskell
2021-10-04 00:08:11	←	Guest1372 has left #haskell
2021-10-04 00:13:41	→	Guest5 has joined #haskell
2021-10-04 00:19:18	←	lavaman has quit (Remote host closed the connection)
2021-10-04 00:19:32	→	lavaman has joined #haskell
2021-10-04 00:19:39	←	lavaman has quit (Remote host closed the connection)
2021-10-04 00:20:58	→	max22- has joined #haskell
2021-10-04 00:23:22	→	p3n has joined #haskell
2021-10-04 00:24:32	←	fef has quit (Ping timeout: 276 seconds)
2021-10-04 00:25:20	←	merijn has quit (Ping timeout: 252 seconds)
2021-10-04 00:26:19	←	tfeb has quit (Quit: died)
2021-10-04 00:28:28	→	jespada has joined #haskell
2021-10-04 00:34:40	→	yinghua has joined #haskell
2021-10-04 00:38:17	→	hatds has joined #haskell
2021-10-04 00:42:22	←	[itchyjunk] has quit (Remote host closed the connection)
2021-10-04 00:43:59	hatds	How should cabal and shake be combined for a single project?  I have an old project (written in Haskell & C) that uses a shake file to build everything.  I want to create a cabal file to track the package dependencies, but first I need to wrap my head around how cabal would know how to build it.
2021-10-04 00:48:33	sm	hatds, make a cabal project (cabal init, see docs), where Main-is: Shake.hs, I'm guessing
2021-10-04 00:49:13	hatds	sm: ah
2021-10-04 00:49:57	sclv	i'm rather dubious of that approach?
2021-10-04 00:51:11	←	fizzsegfaultbuzz has quit (Ping timeout: 268 seconds)
2021-10-04 00:51:49	sm	I make my shake files stack scripts, so they specify deps in the header
2021-10-04 00:51:55	sm	you can do similar with cabal
2021-10-04 00:53:06	sclv	right you can use cabal to manage the deps for the _shake file_
2021-10-04 00:53:19	←	MoC has quit (Quit: Konversation terminated!)
2021-10-04 00:53:38	sclv	but this is about using cabal to manage the deps for the whole project that shake builds
2021-10-04 00:53:38	sclv	I think?
2021-10-04 00:53:46	hatds	yeah
2021-10-04 00:54:00	hatds	just the haskell dependencies, but yes for the whole project
2021-10-04 00:54:45	sclv	i would suggest instead creating a cabal file with a dummy target and all the deps, and then building it with the ghc-env file creation flag on
2021-10-04 00:55:06	sclv	then ghc as invoked from shake can pick up and use that env file to have all deps in scope
2021-10-04 00:56:31	zincy_	Say I have a FromJSON instance for Person and I have a JSON object of people where each person is an object. How would I write the [Person] parser in Aeson?
2021-10-04 00:57:02	hatds	sclv: didn't know about ghc-env files, it sounds exactly like the missing piece I need
2021-10-04 00:57:22	clever	zincy_: i think Generic can auto-generate that
2021-10-04 00:57:40	sclv	they're a bit underdocumented and advertised, so its a bit fiddly to make em work (the auto-discovery path logic is sort of confusing to people to) but they're super handy!
2021-10-04 00:58:40	clever	zincy_: https://hackage.haskell.org/package/aeson-1.5.6.0/docs/Data-Aeson.html#v:genericParseJSON i think
2021-10-04 01:00:57	clever	zincy_: although, reading more, it looks like you dont have to do anything, check the instances of https://hackage.haskell.org/package/aeson-1.5.6.0/docs/Data-Aeson.html#t:FromJSON
2021-10-04 01:01:19	clever	instance (FromJSON a) => FromJSON [a] where parseJSON = parseJSON1
2021-10-04 01:01:27	clever	its a default instance
2021-10-04 01:02:28	←	mei has quit (Read error: Connection reset by peer)
2021-10-04 01:03:00	zincy_	Cheers yeah seems you get a parser for the [a] by default
2021-10-04 01:03:12	zincy_	But that parser expects Array not Object
2021-10-04 01:03:16	zincy_	in the json
2021-10-04 01:03:38	c_wraith	Um..  yes?
2021-10-04 01:04:31	zincy_	haha no suprises there
2021-10-04 01:04:53	←	jinsun has quit (Ping timeout: 252 seconds)
2021-10-04 01:05:17	←	Guest5 has quit (Quit: Client closed)
2021-10-04 01:22:06	ℹ	irc: disconnected from server
2021-10-04 01:22:27	→	oxide has joined #haskell
2021-10-04 01:22:27	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-10-04 01:22:27	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-10-04 01:22:27	ℹ	Channel #haskell: 726 nicks (1 op, 0 voices, 725 normals)
2021-10-04 01:22:27	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-10-04 01:22:47	zincy_	Got there in the end - Aeson objects are hash maps who would have thought
2021-10-04 01:23:17	Hecate	zincy_: yes they are
2021-10-04 01:23:30	Hecate	https://hackage.haskell.org/package/aeson-1.5.6.0/docs/Data-Aeson.html#t:Object
2021-10-04 01:24:32	←	rekahsoft has quit (Remote host closed the connection)
2021-10-04 01:24:55	→	rekahsoft has joined #haskell
2021-10-04 01:28:51	←	_ht has quit (Remote host closed the connection)
2021-10-04 01:33:18	→	acidjnk has joined #haskell
2021-10-04 01:35:08	←	juhp has quit (Ping timeout: 252 seconds)
2021-10-04 01:35:11	←	hyiltiz has quit (Ping timeout: 252 seconds)
2021-10-04 01:36:37	→	juhp has joined #haskell
2021-10-04 01:38:04	→	hyiltiz has joined #haskell
2021-10-04 01:41:58	←	jrm has quit (Ping timeout: 268 seconds)
2021-10-04 01:42:05	←	rekahsoft has quit (Remote host closed the connection)
2021-10-04 01:42:58	→	rekahsoft has joined #haskell
2021-10-04 01:49:09	←	rekahsoft has quit (Remote host closed the connection)
2021-10-04 01:50:58	→	rekahsoft has joined #haskell
2021-10-04 01:52:14	←	mrckndt has quit (Ping timeout: 252 seconds)
2021-10-04 01:52:40	←	desophos has quit (Quit: Leaving)
2021-10-04 01:54:26	→	jrm has joined #haskell
2021-10-04 01:55:30	←	yinghua has quit (Read error: Connection reset by peer)
2021-10-04 01:55:48	→	yinghua has joined #haskell
2021-10-04 02:01:06	←	sm2n has quit (Ping timeout: 246 seconds)
2021-10-04 02:02:40	→	raehik has joined #haskell
2021-10-04 02:05:55	←	gehmehgeh has quit (Ping timeout: 276 seconds)
2021-10-04 02:07:42	→	gehmehgeh has joined #haskell
2021-10-04 02:08:31	←	wroathe has quit (Ping timeout: 245 seconds)
2021-10-04 02:10:56	←	pretty_dumm_guy has quit (Quit: WeeChat 3.3)
2021-10-04 02:10:59	→	wroathe has joined #haskell
2021-10-04 02:10:59	←	wroathe has quit (Changing host)
2021-10-04 02:10:59	→	wroathe has joined #haskell
2021-10-04 02:12:02	←	neurocyte013288 has quit (Ping timeout: 252 seconds)
2021-10-04 02:19:58	←	hatds has quit (Quit: Leaving)
2021-10-04 02:21:51	→	merijn has joined #haskell
2021-10-04 02:24:02	←	Lord_of_Life has quit (Read error: Connection reset by peer)
2021-10-04 02:24:05	←	raehik has quit (Ping timeout: 252 seconds)
2021-10-04 02:27:45	→	Lord_of_Life has joined #haskell
2021-10-04 02:30:05	→	sm2n has joined #haskell
2021-10-04 02:31:02	→	Pickchea has joined #haskell
2021-10-04 02:33:29	→	Guest4 has joined #haskell
2021-10-04 02:37:42	←	gehmehgeh has quit (Quit: Leaving)
2021-10-04 02:37:59	←	CiaoSen has quit (Ping timeout: 252 seconds)
2021-10-04 02:39:47	→	CiaoSen has joined #haskell
2021-10-04 02:40:38	→	Morrow has joined #haskell
2021-10-04 02:42:20	←	rekahsoft has quit (Remote host closed the connection)
2021-10-04 02:43:01	→	rekahsoft has joined #haskell
2021-10-04 02:43:01	←	rekahsoft has quit (Remote host closed the connection)
2021-10-04 02:43:26	→	kayprish has joined #haskell
2021-10-04 02:44:03	→	rekahsoft has joined #haskell
2021-10-04 02:45:15	Hecate	I feel like I'm in Hell
2021-10-04 02:45:20	Hecate	crypto-api doesn't have tests
2021-10-04 02:45:30	Hecate	someone kidnap me from this reality plz
2021-10-04 02:46:34	⚡	Rembane hands Hecate a fuzzer
2021-10-04 02:47:12	→	Lord_of_Life_ has joined #haskell
2021-10-04 02:47:14	←	Lord_of_Life has quit (Ping timeout: 252 seconds)
2021-10-04 02:49:52	ℹ	Lord_of_Life_ is now known as Lord_of_Life
2021-10-04 02:50:05	←	__monty__ has quit (Quit: leaving)
2021-10-04 02:51:16	→	lavaman has joined #haskell
2021-10-04 02:52:31	[exa]	Hecate: crypto-api is just an interface right?
2021-10-04 02:53:11	[exa]	oh noes they do padding
2021-10-04 02:53:38	←	rekahsoft has quit (Remote host closed the connection)
2021-10-04 02:54:06	→	rekahsoft has joined #haskell
2021-10-04 02:54:22	←	rekahsoft has quit (Remote host closed the connection)
2021-10-04 02:55:03	→	rekahsoft has joined #haskell
2021-10-04 02:55:59	←	lavaman has quit (Ping timeout: 252 seconds)
2021-10-04 02:56:02	←	merijn has quit (Ping timeout: 252 seconds)
2021-10-04 02:56:04	Hecate	[exa]: well there is an implem for SystemRandom that could use some testing I imagine?
2021-10-04 02:56:07	Hecate	https://github.com/TomMD/crypto-api/blob/7e63e97886b8948bf88401e1497e15040ac2500e/Crypto/Random.hs#L184-L191
2021-10-04 02:56:32	c_wraith	what's there to test in that?  It just relays to the entropy library
2021-10-04 02:56:53	←	rekahsoft has quit (Remote host closed the connection)
2021-10-04 02:56:55	ℹ	n3t1 is now known as n3t
2021-10-04 02:57:01	←	n3t has quit (Changing host)
2021-10-04 02:57:01	→	n3t has joined #haskell
2021-10-04 02:57:16	→	rekahsoft has joined #haskell
2021-10-04 02:58:20	Hecate	c_wraith: yeah… speaking about that…
2021-10-04 02:58:20	Hecate	https://github.com/TomMD/entropy
2021-10-04 02:58:24	Hecate	no tests either 🙃
2021-10-04 02:58:40	Hecate	maybe there is nothing to be tested there as well
2021-10-04 02:58:46	←	rekahsoft has quit (Remote host closed the connection)
2021-10-04 02:59:15	→	rekahsoft has joined #haskell
2021-10-04 03:04:07	janus	how would a test for an entropy fetching library look like?
2021-10-04 03:04:11	←	rekahsoft has quit (Remote host closed the connection)
2021-10-04 03:04:33	janus	just pass if it doesn't segfault?
2021-10-04 03:04:35	→	rekahsoft has joined #haskell
2021-10-04 03:06:51	Hecate	I am not a cryptographer /o\
2021-10-04 03:06:51	←	takuan has quit (Remote host closed the connection)
2021-10-04 03:07:03	Hecate	that being said, other people have some opinion about this: https://fuchsia.dev/fuchsia-src/concepts/testing/entropy_quality_tests
2021-10-04 03:07:18	Hecate	https://www.johndcook.com/blog/2020/02/04/entropy-extractor-nist-sts/
2021-10-04 03:11:06	→	fkaSleeper_ has joined #haskell
2021-10-04 03:12:18	→	[itchyjunk] has joined #haskell
2021-10-04 03:12:41	→	Psybur has joined #haskell
2021-10-04 03:14:43	→	cjb has joined #haskell
2021-10-04 03:16:30	←	rekahsoft has quit (Remote host closed the connection)
2021-10-04 03:16:53	→	rekahsoft has joined #haskell
2021-10-04 03:17:47	←	rekahsoft has quit (Remote host closed the connection)
2021-10-04 03:18:21	→	rekahsoft has joined #haskell
2021-10-04 03:19:55	←	kmein has quit (Quit: ciao kakao)
2021-10-04 03:21:52	alzgh	hello, how can I reset GHCi without quitting?
2021-10-04 03:21:54	→	kmein has joined #haskell
2021-10-04 03:22:31	c_wraith	:reload will clear any local definitions, but it won't reset what extensions are in use or what modules are loaded
2021-10-04 03:23:01	alzgh	OK, thanks
2021-10-04 03:23:06	geekosaur	:load will reset modules and local definitions but not top level
2021-10-04 03:23:24	geekosaur	I don't think there's a single reset thing, they just expect you to quit and start over
2021-10-04 03:23:30	geekosaur	ghci really could use some UX love
2021-10-04 03:23:49	alzgh	what do you mean with top level? geekosaur
2021-10-04 03:23:58	geekosaur	specifically including someone(s) sitting down and figuring out what a good UX would be
2021-10-04 03:24:14	geekosaur	same thing as what c_wraith meant by local definitions
2021-10-04 03:24:21	←	Guest4 has quit (Quit: Client closed)
2021-10-04 03:25:13	geekosaur	(this is actually a little obscure as you might not bve at top level if you are currently debugging an expression; I'm not sure how well ghci handles a :r or :l under those conditions
2021-10-04 03:25:18	geekosaur	)
2021-10-04 03:27:05	→	mestre has joined #haskell
2021-10-04 03:27:05	←	jespada has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-10-04 03:29:41	←	sprout has quit (Ping timeout: 252 seconds)
2021-10-04 03:34:44	→	Lycurgus has joined #haskell
2021-10-04 03:35:30	←	mestre has quit (Quit: leaving)
2021-10-04 03:35:36	←	wroathe has quit (Ping timeout: 245 seconds)
2021-10-04 03:35:44	→	mestre has joined #haskell
2021-10-04 03:39:04	→	acidsys has joined #haskell
2021-10-04 03:40:36	←	kayprish has quit (Remote host closed the connection)
2021-10-04 03:41:33	←	xlei has quit (Ping timeout: 246 seconds)
2021-10-04 03:41:34	→	sprout has joined #haskell
2021-10-04 03:42:17	←	Pickchea has quit (Quit: Leaving)
2021-10-04 03:46:05	←	sprout has quit (Ping timeout: 252 seconds)
2021-10-04 03:50:15	←	mestre has quit (Quit: leaving)
2021-10-04 03:50:28	→	mestre has joined #haskell
2021-10-04 03:51:06	→	wroathe has joined #haskell
2021-10-04 03:51:06	←	wroathe has quit (Changing host)
2021-10-04 03:51:06	→	wroathe has joined #haskell
2021-10-04 03:52:08	←	chomwitt has quit (Ping timeout: 252 seconds)
2021-10-04 03:54:50	←	nfd has quit (Ping timeout: 252 seconds)
2021-10-04 03:55:54	←	Tuplanolla has quit (Quit: Leaving.)
2021-10-04 03:57:56	←	Kabouik has quit (Remote host closed the connection)
2021-10-04 03:58:33	→	Kabouik has joined #haskell
2021-10-04 03:58:33	←	Kabouik has quit (Changing host)
2021-10-04 03:58:33	→	Kabouik has joined #haskell
2021-10-04 04:00:04	→	raehik has joined #haskell
2021-10-04 04:00:38	←	hendursa1 has quit (Quit: hendursa1)
2021-10-04 04:00:50	←	hrnz has quit (Ping timeout: 260 seconds)
2021-10-04 04:02:30	→	hendursaga has joined #haskell
2021-10-04 04:02:42	→	abrantesasf has joined #haskell
2021-10-04 04:09:41	←	natechan has quit (Ping timeout: 252 seconds)
2021-10-04 04:13:45	→	hrnz has joined #haskell
2021-10-04 04:21:22	←	vysn has quit (Ping timeout: 260 seconds)
2021-10-04 04:25:45	←	Morrow has quit (Read error: Connection reset by peer)
2021-10-04 04:26:09	→	Morrow has joined #haskell
2021-10-04 04:26:11	←	raehik has quit (Ping timeout: 252 seconds)
2021-10-04 04:28:22	→	raehik has joined #haskell
2021-10-04 04:32:17	←	rtjure has quit (Ping timeout: 252 seconds)
2021-10-04 04:32:29	→	natechan has joined #haskell
2021-10-04 04:34:18	→	jespada has joined #haskell
2021-10-04 04:35:59	←	shriekingnoise has quit (Quit: Quit)
2021-10-04 04:36:15	→	machinedgod has joined #haskell
2021-10-04 04:36:26	←	raehik has quit (Ping timeout: 245 seconds)
2021-10-04 04:37:45	→	shriekingnoise has joined #haskell
2021-10-04 04:38:41	→	raehik has joined #haskell
2021-10-04 04:42:16	←	max22- has quit (Remote host closed the connection)
2021-10-04 04:45:46	→	sprout has joined #haskell
2021-10-04 04:47:08	←	raehik has quit (Ping timeout: 252 seconds)
2021-10-04 04:51:42	←	sprout has quit (Ping timeout: 260 seconds)
2021-10-04 04:52:33	→	merijn has joined #haskell
2021-10-04 04:59:43	←	ChaiTRex has quit (Quit: ChaiTRex)
2021-10-04 05:00:02	ℹ	irc: disconnected from server
2021-10-04 19:14:58	→	oxide has joined #haskell
2021-10-04 19:14:58	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-10-04 19:14:58	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-10-04 19:14:58	ℹ	Channel #haskell: 727 nicks (1 op, 0 voices, 726 normals)
2021-10-04 19:14:58	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-10-04 19:15:42	←	eggplantade has quit (Ping timeout: 252 seconds)
2021-10-04 19:15:52	→	Sgeo has joined #haskell
2021-10-04 19:20:58	→	ByronJohnson has joined #haskell
2021-10-04 19:21:35	←	geekosaur has quit (Remote host closed the connection)
2021-10-04 19:23:07	→	max22- has joined #haskell
2021-10-04 19:23:24	→	geekosaur has joined #haskell
2021-10-04 19:25:46	→	zebrag has joined #haskell
2021-10-04 19:26:21	←	tv1 has quit (Quit: derp)
2021-10-04 19:26:33	→	tv has joined #haskell
2021-10-04 19:27:17	→	neurocyte013288 has joined #haskell
2021-10-04 19:27:18	←	neurocyte013288 has quit (Changing host)
2021-10-04 19:27:18	→	neurocyte013288 has joined #haskell
2021-10-04 19:30:21	←	hendursa1 has quit (Remote host closed the connection)
2021-10-04 19:30:28	←	neurocyte013288 has quit (Client Quit)
2021-10-04 19:30:48	→	hendursa1 has joined #haskell
2021-10-04 19:31:20	→	lbseale has joined #haskell
2021-10-04 19:33:40	→	lbseale_ has joined #haskell
2021-10-04 19:34:33	→	wroathe has joined #haskell
2021-10-04 19:34:34	←	wroathe has quit (Changing host)
2021-10-04 19:34:34	→	wroathe has joined #haskell
2021-10-04 19:35:50	→	geranim0 has joined #haskell
2021-10-04 19:36:11	→	neurocyte013288 has joined #haskell
2021-10-04 19:36:12	←	neurocyte013288 has quit (Changing host)
2021-10-04 19:36:12	→	neurocyte013288 has joined #haskell
2021-10-04 19:36:29	←	acidjnk has quit (Ping timeout: 252 seconds)
2021-10-04 19:36:52	←	lbseale has quit (Ping timeout: 245 seconds)
2021-10-04 19:41:44	sshine	does anyone know of a library that handles rate limits when doing batch requests?
2021-10-04 19:41:59	sshine	oh. 'rate-limit'.
2021-10-04 19:44:30	←	dajoer has quit (Quit: leaving)
2021-10-04 19:45:19	→	Morrow has joined #haskell
2021-10-04 19:45:52	←	kenran has quit (Quit: WeeChat info:version)
2021-10-04 19:46:54	←	Lord_of_Life has quit (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
2021-10-04 19:47:14	→	ksqsf has joined #haskell
2021-10-04 19:47:47	→	Lord_of_Life has joined #haskell
2021-10-04 19:53:23	→	mastarija has joined #haskell
2021-10-04 19:54:03	→	azeem has joined #haskell
2021-10-04 19:57:13	tdammers	sshine: that's like learning Dutch as a German native speaker. each time you need to know the Dutch word for some German word, it turns out to be the exact equivalent, except when you expect it to, then it's suddenly something completely different
2021-10-04 19:57:30	←	waleee has quit (Ping timeout: 260 seconds)
2021-10-04 19:57:35	geekosaur	heh
2021-10-04 19:57:48	kuribas	tdammers: zee = mer, meer = see
2021-10-04 19:57:49	lieven	zee meer
2021-10-04 19:57:58	merijn	"bellen" :p
2021-10-04 19:58:33	lieven	I don't really know what zeemeermin is in German
2021-10-04 19:59:21	merijn	lol
2021-10-04 19:59:34	merijn	tdammers: I've found an easy lifehack
2021-10-04 19:59:45	merijn	Just only communicate with people speaking Low German :p
2021-10-04 20:04:35	←	cfricke has quit (Quit: WeeChat 3.2.1)
2021-10-04 20:04:54	←	xiongxin has quit (Quit: No Ping reply in 180 seconds.)
2021-10-04 20:05:05	←	wroathe has quit (Ping timeout: 252 seconds)
2021-10-04 20:06:10	→	xiongxin has joined #haskell
2021-10-04 20:10:06	←	hendursa1 has quit (Quit: hendursa1)
2021-10-04 20:11:06	tdammers	merijn: case in point, having grown up near the border, I have an easier time understanding Limburgian than the average non-Limburgian Dutch person
2021-10-04 20:11:36	→	hendursaga has joined #haskell
2021-10-04 20:11:38	tdammers	in fact, it's basically the same language on either side of the border, you just use Dutch-based spelling on the Dutch side, and German-based spelling on the German side
2021-10-04 20:12:27	merijn	Nedersaksisch and all that :p
2021-10-04 20:12:39	merijn	I wonder if that will survive for much longer, tbh
2021-10-04 20:12:41	tdammers	that would be further North
2021-10-04 20:13:27	merijn	Yeah, Limburgian is different again, but I'm not familiar with that
2021-10-04 20:15:02	tdammers	Limburgian kind of forms a continuum with the Ripuarian dialects, via the Lower Rhine area where the two meet. Cologne is already firmly in the Ripuarian group, Venlo is clearly Limburgian; the transition happens somewhere in the Viersen / Krefeld / Mönchengladbach / Düsseldorf area
2021-10-04 20:20:30	→	hnOsmium0001 has joined #haskell
2021-10-04 20:21:38	→	wroathe has joined #haskell
2021-10-04 20:21:38	←	wroathe has quit (Changing host)
2021-10-04 20:21:38	→	wroathe has joined #haskell
2021-10-04 20:22:09	→	danso has joined #haskell
2021-10-04 20:23:02	alzgh	Koelle Alaaf!
2021-10-04 20:23:51	←	ChaiTRex has quit (Remote host closed the connection)
2021-10-04 20:24:14	→	ChaiTRex has joined #haskell
2021-10-04 20:26:01	←	wroathe has quit (Ping timeout: 245 seconds)
2021-10-04 20:26:23	←	ec has quit (Ping timeout: 276 seconds)
2021-10-04 20:30:21	←	Lord_of_Life has quit (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
2021-10-04 20:32:14	lortabac	is there a unification library that doesn't rely on recursion schemes?
2021-10-04 20:32:42	lortabac	unification-fd is great but hard to work with, especially if you have mutually-recursive types
2021-10-04 20:36:40	→	eggplantade has joined #haskell
2021-10-04 20:40:07	←	hpc has quit (Ping timeout: 265 seconds)
2021-10-04 20:40:20	→	hpc has joined #haskell
2021-10-04 20:43:25	→	fendor_ has joined #haskell
2021-10-04 20:45:45	←	fendor has quit (Ping timeout: 252 seconds)
2021-10-04 20:46:51	←	akegalj has quit (Quit: leaving)
2021-10-04 20:47:15	→	phma_ has joined #haskell
2021-10-04 20:47:42	←	alx741 has quit (Ping timeout: 245 seconds)
2021-10-04 20:47:46	←	phma has quit (Read error: Connection reset by peer)
2021-10-04 20:48:17	←	Morrow has quit (Read error: Connection reset by peer)
2021-10-04 20:55:05	←	benin0369323016 has quit (Ping timeout: 252 seconds)
2021-10-04 20:56:19	→	lavaman has joined #haskell
2021-10-04 20:56:33	→	benin0369323016 has joined #haskell
2021-10-04 20:57:56	←	eggplantade has quit (Remote host closed the connection)
2021-10-04 20:58:26	←	ksqsf has quit (Ping timeout: 252 seconds)
2021-10-04 20:59:48	→	jokleinn has joined #haskell
2021-10-04 21:00:35	←	lavaman has quit (Ping timeout: 252 seconds)
2021-10-04 21:00:48	→	alx741 has joined #haskell
2021-10-04 21:01:08	→	eggplantade has joined #haskell
2021-10-04 21:01:41	←	Kaipi has quit (Ping timeout: 252 seconds)
2021-10-04 21:04:10	→	CiaoSen has joined #haskell
2021-10-04 21:04:28	←	lortabac has quit (Quit: WeeChat 2.8)
2021-10-04 21:04:41	michalz	hello I've question about getting list of interfaces from haskell under Freebsd. I couldn't find any on hackage. Maybe I missed something obvious and it is easy task.
2021-10-04 21:05:43	Hecate	michalz: network interfaces?
2021-10-04 21:05:58	geekosaur	what do you mean by "list of interfaces"?
2021-10-04 21:06:16	⚡	geekosaur is actually thinking it's some OOish thing
2021-10-04 21:06:35	Hecate	under Freebsd, sounds like a network interface thingy
2021-10-04 21:06:52	←	hyiltiz has quit (Ping timeout: 245 seconds)
2021-10-04 21:08:17	Hecate	michalz: test this https://hackage.haskell.org/package/network-info-0.2.0.1
2021-10-04 21:08:20	←	raehik has quit (Ping timeout: 252 seconds)
2021-10-04 21:12:01	→	mc47 has joined #haskell
2021-10-04 21:14:21	←	azeem has quit (Read error: Connection reset by peer)
2021-10-04 21:14:32	←	eggplantade has quit (Remote host closed the connection)
2021-10-04 21:15:04	→	raehik has joined #haskell
2021-10-04 21:15:52	←	raehik has quit (Client Quit)
2021-10-04 21:16:29	→	raehik has joined #haskell
2021-10-04 21:17:37	→	eggplantade has joined #haskell
2021-10-04 21:17:54	→	azeem has joined #haskell
2021-10-04 21:18:09	→	ec has joined #haskell
2021-10-04 21:19:06	→	ksqsf has joined #haskell
2021-10-04 21:20:32	ℹ	phma_ is now known as phma
2021-10-04 21:21:59	→	sbmsr has joined #haskell
2021-10-04 21:23:51	←	ksqsf has quit (Ping timeout: 252 seconds)
2021-10-04 21:25:09	←	sm has quit (Ping timeout: 264 seconds)
2021-10-04 21:25:35	→	myShoggoth has joined #haskell
2021-10-04 21:25:36	→	sm has joined #haskell
2021-10-04 21:25:39	myShoggoth	It is Haskell Foundation Office Hours time again, come join us in a few minutes at https://www.twitch.tv/myshoggoth
2021-10-04 21:25:58	←	snekism`` has quit (Remote host closed the connection)
2021-10-04 21:26:15	ℹ	fendor_ is now known as fendor
2021-10-04 21:28:05	←	merijn has quit (Ping timeout: 252 seconds)
2021-10-04 21:28:47	sprout	> :t 0
2021-10-04 21:28:49	lambdabot	 <hint>:1:1: error: parse error on input ‘:’
2021-10-04 21:28:56	sprout	> :type 0
2021-10-04 21:28:57	lambdabot	 <hint>:1:1: error: parse error on input ‘:’
2021-10-04 21:29:03	sprout	hmpf.  okay
2021-10-04 21:29:14	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-10-04 21:29:17	←	xiongxin has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-10-04 21:29:47	→	MQ-17J has joined #haskell
2021-10-04 21:29:54	←	[itchyjunk] has quit (Quit: Leaving)
2021-10-04 21:31:03	→	jaitoon has joined #haskell
2021-10-04 21:31:18	←	Arathorn has quit (Ping timeout: 268 seconds)
2021-10-04 21:31:24	geekosaur	:t 0
2021-10-04 21:31:25	lambdabot	Num p => p
2021-10-04 21:31:32	→	Arathorn has joined #haskell
2021-10-04 21:31:49	→	jaitoon2 has joined #haskell
2021-10-04 21:32:22	←	sbmsr has quit (Quit: WeeChat 2.3)
2021-10-04 21:32:40	←	tzh has quit (Quit: dfllkl)
2021-10-04 21:32:55	→	sbmsr has joined #haskell
2021-10-04 21:33:27	←	SimonWeiss[m] has quit (Ping timeout: 250 seconds)
2021-10-04 21:33:27	←	sbmsr has quit (Client Quit)
2021-10-04 21:33:33	←	bb010g has quit (Ping timeout: 264 seconds)
2021-10-04 21:33:43	→	SimonWeiss[m] has joined #haskell
2021-10-04 21:33:47	→	bb010g has joined #haskell
2021-10-04 21:33:48	→	sbmsr has joined #haskell
2021-10-04 21:34:11	→	Kaiepi has joined #haskell
2021-10-04 21:34:18	←	schuelermine[m] has quit (Ping timeout: 246 seconds)
2021-10-04 21:34:22	←	jaitoon1 has quit (Ping timeout: 245 seconds)
2021-10-04 21:34:22	michalz	Hecate: exactly about this kind package I was asking. Thank you very much
2021-10-04 21:34:32	→	schuelermine[m] has joined #haskell
2021-10-04 21:34:35	←	sbmsr has quit (Client Quit)
2021-10-04 21:34:51	←	ikex has quit (Quit: ZNC - https://znc.in)
2021-10-04 21:35:05	→	sbmsr has joined #haskell
2021-10-04 21:35:17	←	jaitoon has quit (Ping timeout: 252 seconds)
2021-10-04 21:35:29	→	ikex has joined #haskell
2021-10-04 21:37:22	sprout	:t let f = (
2021-10-04 21:37:23	lambdabot	error:
2021-10-04 21:37:23	lambdabot	    parse error (possibly incorrect indentation or mismatched brackets)
2021-10-04 21:37:24	sprout	oops
2021-10-04 21:37:45	←	cloudy has quit (Ping timeout: 264 seconds)
2021-10-04 21:38:00	→	cloudy has joined #haskell
2021-10-04 21:38:12	sprout	:t let f = (\f -> f . f) in let d = (\x -> (x,x)) in f f f f d 0
2021-10-04 21:38:13	lambdabot	error:
2021-10-04 21:38:13	lambdabot	    • Occurs check: cannot construct the infinite type: b ~ (b, b)
2021-10-04 21:38:13	lambdabot	      Expected type: b -> b
2021-10-04 21:38:13	→	ksqsf has joined #haskell
2021-10-04 21:38:21	sprout	heh
2021-10-04 21:38:44	sprout	:t let f = (\f -> f . f) in let d = (\x -> (x,x)) in f d 0
2021-10-04 21:38:45	lambdabot	error:
2021-10-04 21:38:45	lambdabot	    • Occurs check: cannot construct the infinite type: b ~ (b, b)
2021-10-04 21:38:45	lambdabot	      Expected type: (b, b) -> (b, b)
2021-10-04 21:38:51	←	alexfmpe[m] has quit (Ping timeout: 246 seconds)
2021-10-04 21:39:07	sprout	:t let f = (\f -> f . f) in let d = (\x -> x + 1) in f d 0
2021-10-04 21:39:08	lambdabot	Num b => b
2021-10-04 21:39:19	sprout	hmm.  ah well
2021-10-04 21:39:57	←	smichel17[m] has quit (Ping timeout: 250 seconds)
2021-10-04 21:40:20	←	neurocyte013288 has quit (Quit: The Lounge - https://thelounge.chat)
2021-10-04 21:40:33	→	smichel17[m] has joined #haskell
2021-10-04 21:40:57	←	Ollie[m] has quit (Ping timeout: 246 seconds)
2021-10-04 21:41:40	→	Ollie[m] has joined #haskell
2021-10-04 21:41:44	←	kuribas has quit (Remote host closed the connection)
2021-10-04 21:41:59	monochrom	"f . f" requires f's domain and codomain to match.
2021-10-04 21:42:05	→	zmt00 has joined #haskell
2021-10-04 21:42:09	→	neurocyte013288 has joined #haskell
2021-10-04 21:42:10	←	neurocyte013288 has quit (Changing host)
2021-10-04 21:42:10	→	neurocyte013288 has joined #haskell
2021-10-04 21:42:10	sprout	:t let f = (\f -> f . f) in let d = (\x -> x + 1) in f f d 0
2021-10-04 21:42:11	lambdabot	Num b => b
2021-10-04 21:42:21	sprout	ah,  right
2021-10-04 21:42:33	→	alexfmpe[m] has joined #haskell
2021-10-04 21:42:51	sprout	monochrom: thanks
2021-10-04 21:42:53	→	_ht has joined #haskell
2021-10-04 21:44:21	←	SimonWeiss[m] has quit (Ping timeout: 264 seconds)
2021-10-04 21:44:27	←	amesgen[m] has quit (Ping timeout: 246 seconds)
2021-10-04 21:44:40	→	SimonWeiss[m] has joined #haskell
2021-10-04 21:44:57	→	chisui has joined #haskell
2021-10-04 21:44:57	←	xosdy[m] has quit (Ping timeout: 264 seconds)
2021-10-04 21:45:03	→	amesgen[m] has joined #haskell
2021-10-04 21:45:09	←	rosariopulella[m has quit (Ping timeout: 246 seconds)
2021-10-04 21:45:13	→	xosdy[m] has joined #haskell
2021-10-04 21:46:59	←	ec has quit (Ping timeout: 276 seconds)
2021-10-04 21:46:59	←	azeem has quit (Read error: Connection reset by peer)
2021-10-04 21:47:31	←	jumper149 has quit (Quit: WeeChat 3.2)
2021-10-04 21:48:29	→	rosariopulella[m has joined #haskell
2021-10-04 21:49:29	←	ilkecan[m] has quit (Ping timeout: 250 seconds)
2021-10-04 21:49:57	→	ilkecan[m] has joined #haskell
2021-10-04 21:49:58	←	jaitoon2 has quit (Ping timeout: 260 seconds)
2021-10-04 21:50:03	←	bitonic1 has quit (Ping timeout: 246 seconds)
2021-10-04 21:50:20	→	ec has joined #haskell
2021-10-04 21:50:24	←	bakinonion[m] has quit (Ping timeout: 246 seconds)
2021-10-04 21:50:53	→	bakinonion[m] has joined #haskell
2021-10-04 21:51:06	←	smichel17[m] has quit (Ping timeout: 246 seconds)
2021-10-04 21:52:09	←	carmysilna has quit (Ping timeout: 264 seconds)
2021-10-04 21:52:19	→	azeem has joined #haskell
2021-10-04 21:52:30	←	fgaz has quit (Ping timeout: 246 seconds)
2021-10-04 21:52:32	→	smichel17[m] has joined #haskell
2021-10-04 21:52:51	→	carmysilna has joined #haskell
2021-10-04 21:54:12	→	fgaz has joined #haskell
2021-10-04 21:54:20	→	hyiltiz has joined #haskell
2021-10-04 21:55:07	←	denbrahe[m] has quit (Ping timeout: 250 seconds)
2021-10-04 21:55:23	→	ubert has joined #haskell
2021-10-04 21:55:45	←	Topik[m] has quit (Ping timeout: 264 seconds)
2021-10-04 21:55:55	→	denbrahe[m] has joined #haskell
2021-10-04 21:56:44	←	azeem has quit (Ping timeout: 252 seconds)
2021-10-04 21:56:54	→	Topik[m] has joined #haskell
2021-10-04 21:57:33	←	sky_lounge[m] has quit (Ping timeout: 264 seconds)
2021-10-04 21:58:59	→	sky_lounge[m] has joined #haskell
2021-10-04 21:59:29	←	CiaoSen has quit (Ping timeout: 252 seconds)
2021-10-04 22:01:45	←	ericson23141 has quit (Ping timeout: 264 seconds)
2021-10-04 22:02:05	→	azeem has joined #haskell
2021-10-04 22:03:02	←	MQ-17J has quit (Ping timeout: 260 seconds)
2021-10-04 22:03:30	→	MQ-17J has joined #haskell
2021-10-04 22:03:33	←	reza[m] has quit (Ping timeout: 264 seconds)
2021-10-04 22:03:33	←	rednaZ[m] has quit (Ping timeout: 264 seconds)
2021-10-04 22:04:45	←	afotgkmnzj7asv3r has quit (Ping timeout: 264 seconds)
2021-10-04 22:04:45	←	ru0mad[m] has quit (Ping timeout: 264 seconds)
2021-10-04 22:05:50	←	wysteriary[m] has quit (Ping timeout: 268 seconds)
2021-10-04 22:06:09	→	ericson23141 has joined #haskell
2021-10-04 22:06:33	←	PotatoHatsue has quit (Ping timeout: 264 seconds)
2021-10-04 22:06:43	→	bitonic1 has joined #haskell
2021-10-04 22:07:44	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-10-04 22:08:08	→	rednaZ[m] has joined #haskell
2021-10-04 22:08:15	→	reza[m] has joined #haskell
2021-10-04 22:08:19	→	pavonia has joined #haskell
2021-10-04 22:08:41	←	eggplantade has quit (Remote host closed the connection)
2021-10-04 22:08:57	←	shiraeeshi[m] has quit (Ping timeout: 246 seconds)
2021-10-04 22:08:57	←	ManofLetters[m] has quit (Ping timeout: 264 seconds)
2021-10-04 22:09:33	←	bb010g has quit (Ping timeout: 264 seconds)
2021-10-04 22:09:35	→	afotgkmnzj7asv3r has joined #haskell
2021-10-04 22:11:02	←	ec has quit (Ping timeout: 276 seconds)
2021-10-04 22:11:09	←	smichel17[m] has quit (Ping timeout: 250 seconds)
2021-10-04 22:11:54	→	rond_ has joined #haskell
2021-10-04 22:11:55	→	wysteriary[m] has joined #haskell
2021-10-04 22:12:06	←	monadfritz[m] has quit (Ping timeout: 246 seconds)
2021-10-04 22:12:27	←	oak- has quit (Ping timeout: 250 seconds)
2021-10-04 22:12:48	←	lwe[m] has quit (Ping timeout: 246 seconds)
2021-10-04 22:14:13	→	ru0mad[m] has joined #haskell
2021-10-04 22:14:37	←	Christoph[m] has quit (Ping timeout: 250 seconds)
2021-10-04 22:15:15	←	the-coot[m] has quit (Ping timeout: 246 seconds)
2021-10-04 22:15:17	←	abrantesasf has quit (Quit: Leaving)
2021-10-04 22:15:20	→	ManofLetters[m] has joined #haskell
2021-10-04 22:15:21	→	shiraeeshi[m] has joined #haskell
2021-10-04 22:15:38	→	ec has joined #haskell
2021-10-04 22:15:43	→	lavaman has joined #haskell
2021-10-04 22:15:58	ℹ	glguy is now known as ghoulguy
2021-10-04 22:15:59	zzz	i'm having trouble understanding why my solution to https://www.codewars.com/kata/550756a881b8bdba99000348 isn't performant enough: https://paste.jrvieira.com/1633363625990
2021-10-04 22:16:02	→	python476 has joined #haskell
2021-10-04 22:16:19	←	sam[m]1 has quit (Ping timeout: 268 seconds)
2021-10-04 22:16:42	→	bb010g has joined #haskell
2021-10-04 22:17:02	←	fjmorazan has quit (Quit: fjmorazan)
2021-10-04 22:17:03	zzz	i'm using a Map to memoize, i've tried Strict and Lazy. execution time always exceeds the limit
2021-10-04 22:17:04	zzz	what am i missing?
2021-10-04 22:17:27	Hecate	zzz: Yeah, about that… http://h2.jaguarpaw.co.uk/posts/data-map-strict-map-not-strict-map/
2021-10-04 22:18:05	→	fjmorazan has joined #haskell
2021-10-04 22:18:46	→	smichel17[m] has joined #haskell
2021-10-04 22:19:39	Hecate	zzz: did you try using a Text instead of a String?
2021-10-04 22:19:57	→	oak- has joined #haskell
2021-10-04 22:20:02	←	hyiltiz has quit (Ping timeout: 268 seconds)
2021-10-04 22:20:21	←	stoicswe[m] has quit (Ping timeout: 264 seconds)
2021-10-04 22:20:29	→	monadfritz[m] has joined #haskell
2021-10-04 22:21:04	zzz	Hecate: not sure what you mean
2021-10-04 22:21:19	→	lwe[m] has joined #haskell
2021-10-04 22:22:09	←	Topik[m] has quit (Ping timeout: 264 seconds)
2021-10-04 22:22:09	←	raym has quit (Ping timeout: 264 seconds)
2021-10-04 22:22:17	geekosaur	String is a linked list oif Char; Text is much more optimal
2021-10-04 22:22:17	Hecate	oh sorry, zzz, with all the primed variables I thought I was reading character literals  :')
2021-10-04 22:22:27	geekosaur	heh
2021-10-04 22:22:34	→	raym has joined #haskell
2021-10-04 22:22:41	←	raehik has quit (Ping timeout: 245 seconds)
2021-10-04 22:22:49	→	Christoph[m] has joined #haskell
2021-10-04 22:23:21	←	Ollie[m] has quit (Ping timeout: 264 seconds)
2021-10-04 22:23:43	←	ru0mad[m] has quit (Ping timeout: 250 seconds)
2021-10-04 22:23:43	←	quantum has quit (Ping timeout: 268 seconds)
2021-10-04 22:23:57	→	the-coot[m] has joined #haskell
2021-10-04 22:23:58	→	hyiltiz has joined #haskell
2021-10-04 22:24:47	←	azeem has quit (Ping timeout: 252 seconds)
2021-10-04 22:24:53	→	sam[m]1 has joined #haskell
2021-10-04 22:25:30	→	azeem has joined #haskell
2021-10-04 22:26:07	dsal	zzz: Have you tried profiling?
2021-10-04 22:26:14	ℹ	synthmeat1 is now known as synthmeat
2021-10-04 22:26:40	zzz	ah yes sorry. that's not my most elegant style :p
2021-10-04 22:27:04	→	awschnap has joined #haskell
2021-10-04 22:27:11	→	PotatoHatsue has joined #haskell
2021-10-04 22:28:42	→	stoicswe[m] has joined #haskell
2021-10-04 22:28:48	←	rond_ has quit (Quit: Client closed)
2021-10-04 22:29:16	←	lavaman has quit (Ping timeout: 268 seconds)
2021-10-04 22:29:28	←	awschnap has quit (Remote host closed the connection)
2021-10-04 22:30:35	→	Topik[m] has joined #haskell
2021-10-04 22:31:19	→	quantum has joined #haskell
2021-10-04 22:31:53	→	emf has joined #haskell
2021-10-04 22:32:35	←	geekosaur has quit (Remote host closed the connection)
2021-10-04 22:33:04	←	doyougnu has quit (Remote host closed the connection)
2021-10-04 22:33:18	→	werneta has joined #haskell
2021-10-04 22:33:19	→	jaitoon has joined #haskell
2021-10-04 22:34:05	→	Tuplanolla has joined #haskell
2021-10-04 22:34:39	monochrom	zzz: Where do you ever use Map.insert or equiv?
2021-10-04 22:34:49	→	nfd has joined #haskell
2021-10-04 22:35:11	←	jokleinn has quit (Ping timeout: 252 seconds)
2021-10-04 22:35:13	→	vladomiro has joined #haskell
2021-10-04 22:35:26	←	Topik[m] has quit (Ping timeout: 268 seconds)
2021-10-04 22:35:35	→	geekosaur has joined #haskell
2021-10-04 22:36:07	→	Topik[m] has joined #haskell
2021-10-04 22:36:47	→	Ollie[m] has joined #haskell
2021-10-04 22:36:51	→	ru0mad[m] has joined #haskell
2021-10-04 22:37:54	→	zero has joined #haskell
2021-10-04 22:38:21	←	justosophy[m] has quit (Ping timeout: 264 seconds)
2021-10-04 22:38:34	→	justosophy[m] has joined #haskell
2021-10-04 22:39:03	←	zzz has quit (Ping timeout: 246 seconds)
2021-10-04 22:39:37	→	econo has joined #haskell
2021-10-04 22:42:20	←	ec has quit (Remote host closed the connection)
2021-10-04 22:42:27	int-e	. o O ( a pastebin with a websocket... eek )
2021-10-04 22:43:03	←	yahb has quit (Ping timeout: 252 seconds)
2021-10-04 22:43:18	→	yahb has joined #haskell
2021-10-04 22:44:01	→	ec has joined #haskell
2021-10-04 22:51:29	zero	int-e: random experiences :p
2021-10-04 22:51:43	→	raehik has joined #haskell
2021-10-04 22:52:05	←	shiraeeshi[m] has quit (Ping timeout: 268 seconds)
2021-10-04 22:52:19	→	shiraeeshi[m] has joined #haskell
2021-10-04 22:52:40	←	werneta has quit (Remote host closed the connection)
2021-10-04 22:53:25	→	merijn has joined #haskell
2021-10-04 22:54:34	←	Ollie[m] has quit (Ping timeout: 268 seconds)
2021-10-04 22:54:35	←	ec has quit (Ping timeout: 276 seconds)
2021-10-04 22:54:42	→	werneta has joined #haskell
2021-10-04 22:55:19	→	Ollie[m] has joined #haskell
2021-10-04 22:55:27	←	python476 has quit (Remote host closed the connection)
2021-10-04 22:55:35	tomsmeding	oh too bad zzz is gone
2021-10-04 22:55:38	tomsmeding	it's a fun exercise
2021-10-04 22:56:22	tomsmeding	@tell zzz re your recurrence relations kata: try sequencing all evaluations of f, that is to say: make sure that evaluations lower in the tree are cached when performing later evaluations higher up in the tree
2021-10-04 22:56:22	lambdabot	Consider it noted.
2021-10-04 22:56:49	⚡	tomsmeding is happy with a 13-line solution (excluding imports)
2021-10-04 22:56:52	←	neurocyte013288 has quit (Ping timeout: 245 seconds)
2021-10-04 22:59:09	tomsmeding	everyone on that site going wild with the state monads, even one person using STRefs
2021-10-04 22:59:15	←	zwro[m] has quit (Ping timeout: 250 seconds)
2021-10-04 22:59:18	→	ec has joined #haskell
2021-10-04 22:59:27	→	zwro[m] has joined #haskell
2021-10-04 22:59:28	⚡	tomsmeding just using boring old passing around of values
2021-10-04 22:59:35	ℹ	carbolymer_ is now known as carbolymer
2021-10-04 22:59:56	→	lavaman has joined #haskell
2021-10-04 23:01:53	←	mbuf has quit (Quit: Leaving)
2021-10-04 23:02:44	→	wroathe has joined #haskell
2021-10-04 23:02:44	←	wroathe has quit (Changing host)
2021-10-04 23:02:44	→	wroathe has joined #haskell
2021-10-04 23:02:51	←	raehik has quit (Ping timeout: 246 seconds)
2021-10-04 23:03:20	→	slac97577 has joined #haskell
2021-10-04 23:04:15	←	lavaman has quit (Ping timeout: 246 seconds)
2021-10-04 23:04:29	→	xsperry has joined #haskell
2021-10-04 23:05:26	←	slack1256 has quit (Ping timeout: 252 seconds)
2021-10-04 23:08:32	←	emf has quit (Read error: Connection reset by peer)
2021-10-04 23:08:33	→	emf_ has joined #haskell
2021-10-04 23:09:12	→	eggplantade has joined #haskell
2021-10-04 23:10:31	←	santiagopim[m] has quit (Ping timeout: 250 seconds)
2021-10-04 23:10:44	→	santiagopim[m] has joined #haskell
2021-10-04 23:13:00	←	ongy[m] has quit (Ping timeout: 246 seconds)
2021-10-04 23:13:30	→	k`` has joined #haskell
2021-10-04 23:13:41	→	ongy[m] has joined #haskell
2021-10-04 23:14:17	←	eggplantade has quit (Ping timeout: 268 seconds)
2021-10-04 23:15:47	→	timCF has joined #haskell
2021-10-04 23:17:46	timCF	Hello! Does anybody know the real reason why Cabal can not work with multiple versions of the same package at the same time (like for example Nix does)? It's such an inconvenience..
2021-10-04 23:18:03	→	mei has joined #haskell
2021-10-04 23:18:09	k``	I'm trying to define a simple type for tracking whether changes have been made to something, but I'm running into problems with the `Functor` instance. The type is `data Altered a = Altered Bool a` , and `fmap` is defined as `fmap f (Altered _ x) = Altered True x` , since `f` may alter `x`. But that violates the law `fmap id = id` . Is there any way around this, or is it just not a `Functor` ?
2021-10-04 23:20:19	sclv	almost certainly you’ll want the multiple versions to interact and then you’re in a world of pain. also the semantics of managing which package your code refers to become confusing and fragile. plus static compilation with pervasive inlining make it complicated beyond belief
2021-10-04 23:20:35	monochrom	I very much doubt that nix enables using multiple versions of the same C lib in the same exe in the first place.
2021-10-04 23:20:42	[exa]	k``: I hit that problem once, generally it is _not_ a functor. I ended up making my own version of a lensy `set`
2021-10-04 23:22:45	←	fendor[m] has quit (Ping timeout: 264 seconds)
2021-10-04 23:22:59	→	fendor[m] has joined #haskell
2021-10-04 23:23:52	monochrom	OTOH if you just need "different projects use different versions, just that my file system stores all versions disjointly", cabal already does that, and it's aptly called "nix-style local builds".
2021-10-04 23:23:55	→	doyougnu has joined #haskell
2021-10-04 23:23:55	ℹ	zero is now known as zzz
2021-10-04 23:24:08	←	zzz has left #haskell
2021-10-04 23:24:08	k``	[exa]: Thanks. You've saved me some wasted effort. I think it can't actually be a lens, since the lens laws are basically the `Functor` laws, but having a little specialized combinator should work.
2021-10-04 23:24:13	timCF	monochrom: well, Nix is mostly build system, not a compiler. So whatever C lib version is needed for compiled executable - it's there. But the thing is, if there is another executable which wants slightly different C lib version - it's there as well.
2021-10-04 23:24:16	→	zzz has joined #haskell
2021-10-04 23:24:36	monochrom	Sure.
2021-10-04 23:25:04	monochrom	So "at the same time" has not communicated what you mean.
2021-10-04 23:25:08	←	ec has quit (Ping timeout: 276 seconds)
2021-10-04 23:25:14	monochrom	because it means to me "the same exe".
2021-10-04 23:26:36	tomsmeding	and if you mean: one version for executable A and another version for executable B, then cabal can do that :)
2021-10-04 23:26:54	→	echoone has joined #haskell
2021-10-04 23:27:08	zzz	tomsmeding: thanks for the tip!
2021-10-04 23:27:34	tomsmeding	oh wait zzz = zero
2021-10-04 23:27:51	←	merijn has quit (Ping timeout: 268 seconds)
2021-10-04 23:28:52	zzz	tomsmeding: yes sorry. znc changed it on server reboot
2021-10-04 23:29:33	→	ec has joined #haskell
2021-10-04 23:29:42	←	robosexual has quit (Quit: Konversation terminated!)
2021-10-04 23:30:17	timCF	tomsmeding: yes, I see) But mostly I have a problems where there are multiple dependencies in my package - A wants C1 and B wants C2. And then it goes deeper into dependency tree. I wonder - why dependency A just can not use code from C1 and dependency B code from the C2?
2021-10-04 23:31:10	timCF	Why C1 always shold be equal to C2 eventually when I brute force versions to make it compile
2021-10-04 23:31:12	←	sam[m]1 has quit (Ping timeout: 246 seconds)
2021-10-04 23:31:28	→	sam[m]1 has joined #haskell
2021-10-04 23:32:04	tomsmeding	timCF: what are A, B, C1 and C2 here? executables/libraries? modules?
2021-10-04 23:33:04	←	fkaSleeper_ has quit (Remote host closed the connection)
2021-10-04 23:33:18	←	wroathe has quit (Ping timeout: 246 seconds)
2021-10-04 23:35:14	[exa]	k``: yeah to make it work I needed to have a functor like ((,) Bool) and then postprocess the whole thing to sink the changes in. And it was clunky.
2021-10-04 23:35:40	→	justsomeguy has joined #haskell
2021-10-04 23:35:55	timCF	tomsmeding: cabal/stack packages
2021-10-04 23:36:00	←	geekosaur has quit (Quit: Leaving)
2021-10-04 23:36:05	←	sam[m]1 has quit (Ping timeout: 250 seconds)
2021-10-04 23:36:17	→	sam[m]1 has joined #haskell
2021-10-04 23:36:42	justsomeguy	Can Numeric.Natural be arbitrarily large? When a Natural exceedes the amount of physical memory, can it still increase, but just go to swap?
2021-10-04 23:36:44	→	eggplantade has joined #haskell
2021-10-04 23:36:50	tomsmeding	timCF: like, there's A.cabal, B.cabal, C1.cabal, C2.cabal?
2021-10-04 23:37:03	→	lavaman has joined #haskell
2021-10-04 23:37:04	timCF	tomsmeding: yes
2021-10-04 23:37:20	zzz	monochrom: you are right, i was in the middle of an edit. here's the correct version: https://paste.jrvieira.com/1633370807371
2021-10-04 23:37:22	tomsmeding	I don't see what would go wrong with multiple versions of dependencies at that level
2021-10-04 23:37:23	timCF	C1 and C2 just different versions of package C
2021-10-04 23:37:46	tomsmeding	new cabal should be able to handle multiple versions of the same package in the same store just fien
2021-10-04 23:37:49	tomsmeding	*fine
2021-10-04 23:38:19	awpr	swapping is the OS' concern, if parts of the Natural are in pages that haven't been used for a long time, they could end up getting swapped out.  you probably don't want that to happen though -- I'm not sure how the GC would cope with having enough BigNat chunks to exhaust physical memory
2021-10-04 23:38:27	timCF	interesting.. which version of cabal? Maybe I don't need to struggle then)
2021-10-04 23:38:47	tomsmeding	timCF: >= 3.0
2021-10-04 23:38:57	tomsmeding	or earlier with v2- prefix to commands (cabal v2-build, etc.)
2021-10-04 23:39:44	tomsmeding	historically many people complained that cabal did lots of stuff wrong; 99% of that, if not more, is fixed since the new style cabal
2021-10-04 23:39:59	tomsmeding	(not 100% because no software is perfect)
2021-10-04 23:40:06	timCF	hmm.. Then probably I'm using it wrong way, will try to read more docs)
2021-10-04 23:40:08	timCF	Thanks!
2021-10-04 23:40:22	tomsmeding	timCF: are you running 'cabal install'?
2021-10-04 23:40:25	tomsmeding	if so, probably don't
2021-10-04 23:40:34	tomsmeding	unless it is to install the final executable
2021-10-04 23:41:43	←	justsomeguy has quit (Ping timeout: 250 seconds)
2021-10-04 23:42:02	←	lavaman has quit (Ping timeout: 268 seconds)
2021-10-04 23:42:35	awpr	looks like the chunks are actually stored in a contiguous array, so no GC problems, but then you have the problem that that's one outrageously large allocation, and if it's large enough to exhaust physical memory, then anything that "updates" it means allocating another one of the same size, i.e. swapping the entire memory to disk and thrashing everything as it copies one to the other
2021-10-04 23:43:19	awpr	so in theory yes, it can be large enough to swap without breaking, but in practice that would be pretty disastrous
2021-10-04 23:43:36	tomsmeding	taking "breaking" in the technically correct sense
2021-10-04 23:43:51	awpr	the best kind of not-breaking
2021-10-04 23:44:27	timCF	No, I'm jsut using stack/nix. But usually my issue looks like "dependency A wants C < 1.1 but dependency B wants C > 2.0 and cabal build plan failed". I just was wondering what's the fundamental problem of dependency A using C-1.0 and dependency B using C-2.1.
2021-10-04 23:44:43	←	max22- has quit (Ping timeout: 268 seconds)
2021-10-04 23:44:59	sclv	timCF: imagine C defines a data structure
2021-10-04 23:45:10	tomsmeding	oh you're having A and B dependencies of the same executable? right, then you want two versions of the same package inside the same executable
2021-10-04 23:45:25	sclv	now you have two versions of the data structure that are incompatible in scope, and different parts of the code end up using different versions of the structure
2021-10-04 23:45:30	tomsmeding	monochrom's point was that gcc doesn't support that even :p
2021-10-04 23:45:32	sclv	and none of the code from one version can make use of the other version
2021-10-04 23:45:38	sclv	its a nightmare
2021-10-04 23:46:15	←	razor[m] has quit (Ping timeout: 246 seconds)
2021-10-04 23:46:15	tomsmeding	you'd get niceties like "Cannot match type 'FooStructure' with type 'FooStructure'"
2021-10-04 23:46:26	tomsmeding	where one comes from C-1.0 and the other from C-2.0
2021-10-04 23:46:28	→	razor[m] has joined #haskell
2021-10-04 23:46:41	tomsmeding	actually didn't merijn at some point complain about an error like that in the channel
2021-10-04 23:47:14	zzz	tomsmeding: "try sequencing all evaluations of f" <- isn't that what i'm doing? note how i'm folding f': https://paste.jrvieira.com/1633370807371
2021-10-04 23:47:16	int-e	timCF: It may be the case that A (or B) never exposes any detail of C, and that C has no global state, in which case this may be fine. I don't think we have a way of expressing this kind of purely internal dependency though.
2021-10-04 23:47:20	monochrom	Interesting, GHC is more relaxed about that than cabal-install is.
2021-10-04 23:47:25	→	tput has joined #haskell
2021-10-04 23:47:32	monochrom	err, s/Interesting/Interestingly/ !
2021-10-04 23:47:44	int-e	So the conservative approach is to disallow this scenario completely.
2021-10-04 23:48:21	sclv	right -- you can sort of have fully version qualified imports if you turn em on. but that fixes you to a _precise_ specification of the versions, which cuts against the whole "code works across a range of versions" thing you get from cabal specs
2021-10-04 23:48:25	→	Pickchea has joined #haskell
2021-10-04 23:48:31	monochrom	But this still doesn't mean GHC always allows it. GHC takes a look at "do A and B exchange C data?" and can still reject.
2021-10-04 23:48:32	sclv	so cabal just has a hard "no" rule
2021-10-04 23:48:39	monochrom	So, here is your choice.
2021-10-04 23:48:54	monochrom	A. cabal-install plays it safe and just bans it up front.
2021-10-04 23:48:57	sclv	because it wants to give you an answer that always works ahead of time instead of just trying to compile even if it might fail
2021-10-04 23:49:06	sclv	or, er, what was just said above :-)
2021-10-04 23:49:14	tomsmeding	zzz: you're using a left fold but pushing results on using :. Your result list will be reversed.
2021-10-04 23:49:14	←	k`` has quit (Quit: ERC (IRC client for Emacs 27.1))
2021-10-04 23:49:19	monochrom	B. cabal-install looks the other way so build success/failure is non-deterministic.
2021-10-04 23:49:24	int-e	oh "global state" isn't the whole story... if there are C bits, those may result in clashing symbol names when linking
2021-10-04 23:49:41	zzz	tomsmeding: oh
2021-10-04 23:49:54	int-e	which is bad news if the implementation changed (say, extra arguments were added) between C-1.0 and C-2.0
2021-10-04 23:50:02	monochrom	Oh yeah, c bits too, that's a guaranteed failure.
2021-10-04 23:50:43	tomsmeding	zzz: otherwise it does indeed look fine
2021-10-04 23:50:48	←	ongy[m] has quit (Ping timeout: 246 seconds)
2021-10-04 23:51:02	→	ongy[m] has joined #haskell
2021-10-04 23:51:25	tomsmeding	zzz: note that mapAccumL exists; makes that foldl' a bit nicer
2021-10-04 23:52:37	timCF	Yeah, seems like if A and B are not related to each other in any way - using different verisons of C might be fine? But kinda hard to implement that verification I guess
2021-10-04 23:54:23	←	ec has quit (Ping timeout: 276 seconds)
2021-10-04 23:56:20	monochrom	<troll>Perhaps dependent typing can solve this problem.</troll>
2021-10-04 23:57:07	tomsmeding	well, dependency typing can solve this
2021-10-04 23:57:28	monochrom	zzz: I have trouble seeing how this memoizes anything other than the base cases.
2021-10-04 23:57:29	tomsmeding	like, typing out your dependencies' source and fixing the incompatibility issues along the way
2021-10-04 23:58:20	tomsmeding	oh right
2021-10-04 23:58:32	tomsmeding	zzz: as monochrom says, in the final otherwise line, you need some more Map.insert
2021-10-04 23:58:51	→	ec has joined #haskell
2021-10-04 23:58:51	←	monadfritz[m] has quit (Ping timeout: 246 seconds)
2021-10-04 23:59:03	→	monadfritz[m] has joined #haskell
2021-10-05 00:00:10	zzz	tomsmeding: i see it now. thanks
2021-10-05 00:01:55	timCF	Yeah, I just was really amazed by Nix and how it allows to compose literally **any** stuff, and was again frustrated by Cabal trying to upgrade to GHC901. Thanks for replies)
2021-10-05 00:02:38	→	slack1256 has joined #haskell
2021-10-05 00:03:03	←	slac97577 has quit (Ping timeout: 246 seconds)
2021-10-05 00:03:21	←	renzhi has quit (Ping timeout: 252 seconds)
2021-10-05 00:03:31	monochrom	Ugh if you don't need the new-fangled linear types, please stay with 8.10.7 or something, you will have much better library compatibility.
2021-10-05 00:04:10	monochrom	Or the new-fangled record-dot syntax, or something.
2021-10-05 00:04:24	c_wraith	And I'm waiting on 9.2 to finally get released to fix several bugs I've personally hit in the last month
2021-10-05 00:04:45	c_wraith	9.2 is almost 6 months behind schedule now.  yikes.
2021-10-05 00:04:54	monochrom	Yeah I will be pretty quick to adopt 9.2 too, but not 9.0.
2021-10-05 00:05:07	⚡	awpr is most excited about Quick Look ATM
2021-10-05 00:06:21	→	mjs2600 has joined #haskell
2021-10-05 00:06:22	c_wraith	like..  The raw features of the 9.2 release candidate are really nice, but library compatibility is..  well, what you'd expect for a pre-release version.
2021-10-05 00:06:25	←	quantum has quit (Ping timeout: 250 seconds)
2021-10-05 00:09:35	→	quantum has joined #haskell
2021-10-05 00:09:42	→	Guest75 has joined #haskell
2021-10-05 00:10:23	→	wroathe has joined #haskell
2021-10-05 00:10:23	←	wroathe has quit (Changing host)
2021-10-05 00:10:23	→	wroathe has joined #haskell
2021-10-05 00:10:30	←	eggplantade has quit (Remote host closed the connection)
2021-10-05 00:10:48	→	geekosaur has joined #haskell
2021-10-05 00:11:52	→	vicfred has joined #haskell
2021-10-05 00:13:50	←	ksqsf has quit (Remote host closed the connection)
2021-10-05 00:14:00	→	ksqsf has joined #haskell
2021-10-05 00:14:50	←	synthmeat has quit (Quit: WeeChat 3.2)
2021-10-05 00:15:05	←	wroathe has quit (Ping timeout: 250 seconds)
2021-10-05 00:16:12	→	renzhi has joined #haskell
2021-10-05 00:18:59	←	ksqsf has quit (Ping timeout: 250 seconds)
2021-10-05 00:21:11	→	raehik has joined #haskell
2021-10-05 00:24:17	←	ec has quit (Ping timeout: 276 seconds)
2021-10-05 00:26:01	→	max22- has joined #haskell
2021-10-05 00:26:34	←	max22- has quit (Remote host closed the connection)
2021-10-05 00:27:20	→	max22- has joined #haskell
2021-10-05 00:27:24	→	waleee has joined #haskell
2021-10-05 00:28:27	→	ec has joined #haskell
2021-10-05 00:29:18	←	raehik has quit (Ping timeout: 246 seconds)
2021-10-05 00:31:18	→	wroathe has joined #haskell
2021-10-05 00:31:18	←	wroathe has quit (Changing host)
2021-10-05 00:31:18	→	wroathe has joined #haskell
2021-10-05 00:34:14	←	myShoggoth has quit (Ping timeout: 260 seconds)
2021-10-05 00:35:28	←	jespada has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-10-05 00:35:43	→	myShoggoth has joined #haskell
2021-10-05 00:35:50	→	synthmeat has joined #haskell
2021-10-05 00:35:56	→	jespada has joined #haskell
2021-10-05 00:40:45	←	jespada has quit (Ping timeout: 252 seconds)
2021-10-05 00:42:28	→	merijn has joined #haskell
2021-10-05 00:42:38	→	quasisyntaxed has joined #haskell
2021-10-05 00:47:42	←	merijn has quit (Ping timeout: 245 seconds)
2021-10-05 00:47:55	→	mortemeur has joined #haskell
2021-10-05 00:48:08	→	fef has joined #haskell
2021-10-05 00:50:28	→	justsomeguy has joined #haskell
2021-10-05 00:52:15	→	ksqsf has joined #haskell
2021-10-05 00:57:07	←	ksqsf has quit (Ping timeout: 250 seconds)
2021-10-05 00:57:44	←	fef has quit (Remote host closed the connection)
2021-10-05 00:59:05	→	ksqsf has joined #haskell
2021-10-05 01:07:10	mortemeur	can someone help me with this?: https://gist.github.com/mortemeur/eb1888135c11a66f36ab5dca913afc36
2021-10-05 01:07:46	dminuoso	Hi mortemeur. What question/problem do you have?
2021-10-05 01:08:22	mortemeur	I am getting the error parse error on input = for filter
2021-10-05 01:08:29	←	ec has quit (Ping timeout: 276 seconds)
2021-10-05 01:08:39	dminuoso	mortemeur: Can you perhaps gist the entirety of the error?
2021-10-05 01:08:45	dminuoso	Include it in a separate file of the same gist, perhaps
2021-10-05 01:08:50	→	kayprish has joined #haskell
2021-10-05 01:09:19	mortemeur	dminuoso: how do I do that in emacs? right now I move the cursor over the offending line and it pops up
2021-10-05 01:09:25	mortemeur	it doesn't seem to be in *Messages*
2021-10-05 01:09:47	dminuoso	mortemeur: Are you using HLS?
2021-10-05 01:09:54	mortemeur	dminuoso: yes
2021-10-05 01:11:01	→	eggplantade has joined #haskell
2021-10-05 01:11:20	dminuoso	Interesting mmm.
2021-10-05 01:12:29	←	mestre has quit (Quit: Lost terminal)
2021-10-05 01:12:49	→	ec has joined #haskell
2021-10-05 01:13:05	dminuoso	mortemeur: Do you use flycheck? You can also get the errors via `C-c ! l`
2021-10-05 01:13:26	dminuoso	But either way, did you forget to save your buffer perhaps?
2021-10-05 01:13:29	dminuoso	This is valid haskell
2021-10-05 01:13:33	→	bitdex has joined #haskell
2021-10-05 01:13:53	monochrom	Yeah loads fine with me, both as euler1.hs and as Lib.hs
2021-10-05 01:14:16	monochrom	BTW if you say "module Lib" you should not be calling it euler1.hs.
2021-10-05 01:14:17	dminuoso	And if this really doesnt help, Id restart the HLS 
2021-10-05 01:14:28	dminuoso	Perhaps something got bugged the wrong way
2021-10-05 01:14:33	→	tzh has joined #haskell
2021-10-05 01:15:19	←	eggplantade has quit (Ping timeout: 250 seconds)
2021-10-05 01:15:27	mortemeur	Okay, thank you guys
2021-10-05 01:19:59	←	echoone has quit (Quit: Client closed)
2021-10-05 01:20:03	→	merijn has joined #haskell
2021-10-05 01:20:04	←	bsima has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-10-05 01:20:35	→	bsima has joined #haskell
2021-10-05 01:21:48	←	Guest75 has quit (Quit: Connection closed)
2021-10-05 01:24:20	mortemeur	I get "Precedenc parsing error: Cannot mix '<' and '==' in the same infix expression for this
2021-10-05 01:24:26	mortemeur	euler1 = filter (\x -> (x < 100) && (x `mod` 3 == 0) && (x `mod` 5 == 0)) numbers1
2021-10-05 01:25:01	←	merijn has quit (Ping timeout: 268 seconds)
2021-10-05 01:25:58	dminuoso	% x `mod` 3 == 0
2021-10-05 01:26:03	yahb	dminuoso: [Timed out]
2021-10-05 01:26:27	dminuoso	mortemeur: Mmm, Im thinking you have something really bugged over there.
2021-10-05 01:26:43	dminuoso	Maybe something in your emacs config
2021-10-05 01:27:07	awpr	`<` and `==` are not mixed in the same infix expression, in that code.  must be an error from a stale build, or the file hasn't been written, or something like that
2021-10-05 01:27:11	dminuoso	There seems to be a discrepancy between what your buffer displays and what HLS thinks
2021-10-05 01:27:17	dminuoso	Have you restarted HLS?
2021-10-05 01:27:28	mortemeur	no, I have been closing and reopening the file
2021-10-05 01:27:38	mortemeur	I will follow your advice and restart, thank you
2021-10-05 01:29:08	→	neurocyte013288 has joined #haskell
2021-10-05 01:29:09	←	neurocyte013288 has quit (Changing host)
2021-10-05 01:29:09	→	neurocyte013288 has joined #haskell
2021-10-05 01:29:15	←	neurocyte013288 has quit (Client Quit)
2021-10-05 01:31:40	→	lavaman has joined #haskell
2021-10-05 01:32:36	→	bi_functor has joined #haskell
2021-10-05 01:32:42	←	chisui has quit (Ping timeout: 256 seconds)
2021-10-05 01:32:59	ℹ	bi_functor is now known as cigsender
2021-10-05 01:33:06	←	hyiltiz has quit (Ping timeout: 245 seconds)
2021-10-05 01:33:32	→	acidjnk_new has joined #haskell
2021-10-05 01:33:56	←	mortemeur has quit (Quit: Leaving)
2021-10-05 01:34:41	→	hyiltiz has joined #haskell
2021-10-05 01:34:46	←	juhp has quit (Ping timeout: 245 seconds)
2021-10-05 01:35:04	←	_ht has quit (Remote host closed the connection)
2021-10-05 01:35:48	←	lavaman has quit (Ping timeout: 246 seconds)
2021-10-05 01:36:48	→	neurocyte013288 has joined #haskell
2021-10-05 01:36:48	←	neurocyte013288 has quit (Changing host)
2021-10-05 01:36:48	→	neurocyte013288 has joined #haskell
2021-10-05 01:37:14	vladomiro	Hi. I'm having problems updating stack in a 32 bits PC, with devuan (a debian fork) installed
2021-10-05 01:37:33	vladomiro	I installed from repositories, and following the instructions from the web page I update stack, but after a very long time appear a very long error
2021-10-05 01:37:59	geekosaur	@where paste
2021-10-05 01:37:59	lambdabot	Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
2021-10-05 01:38:03	→	juhp has joined #haskell
2021-10-05 01:38:15	←	soft has quit (Ping timeout: 246 seconds)
2021-10-05 01:38:16	vladomiro	The rror is in here: https://bin.disroot.org/?1c6266d3356b1d70#FpMRbjfrqbTLG16fkFc9th6N67uMasvb2CiLQJymZJuG
2021-10-05 01:39:02	←	ec has quit (Ping timeout: 276 seconds)
2021-10-05 01:39:25	maerwald	I don't think there are 32bit binaries anymore anyway
2021-10-05 01:39:45	maerwald	https://github.com/commercialhaskell/stack/releases/tag/v2.7.3
2021-10-05 01:40:04	maerwald	although I have some
2021-10-05 01:40:27	→	lavaman has joined #haskell
2021-10-05 01:41:12	maerwald	try `stack upgrade --source-only`
2021-10-05 01:41:23	geekosaur	I'm getting a 404 (not found) as well for the URL it's trying to load
2021-10-05 01:41:25	→	w-spc-gir has joined #haskell
2021-10-05 01:41:38	geekosaur	sadly stack chooses a verbose and cryptic way to report those kinds of errors
2021-10-05 01:43:14	←	bsima has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-10-05 01:43:15	←	albet70 has quit (Remote host closed the connection)
2021-10-05 01:43:28	maerwald	well, that looks like the upgrade path is simply broken
2021-10-05 01:43:36	vladomiro	maerwald I'll try it, just it will take like an hour
2021-10-05 01:43:47	geekosaur	actually iirc this means they have a very old version of stack and it's fetching from the wrong place
2021-10-05 01:43:48	maerwald	vladomiro: you can try my binaries if you like
2021-10-05 01:43:53	geekosaur	it was last updated in 2019
2021-10-05 01:44:03	maerwald	yeah, broken upgrade path
2021-10-05 01:44:14	⚡	geekosaur just converted the url to a github.com url to check
2021-10-05 01:44:22	→	albet70 has joined #haskell
2021-10-05 01:45:05	dminuoso	Is there a way to get the stack trace for just a particular exception I care about? `+RTS xc -RTS` just overloads my terminal with information.
2021-10-05 01:45:30	←	mei has quit (Read error: Connection reset by peer)
2021-10-05 01:45:42	dminuoso	Like, can GHC instrument my code with HasCallStack constraints similar to how it would set up cost centers?
2021-10-05 01:45:50	→	ec has joined #haskell
2021-10-05 01:47:24	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-05 01:48:00	←	ec has quit (Remote host closed the connection)
2021-10-05 01:48:24	→	ec has joined #haskell
2021-10-05 01:50:51	clever	dminuoso: i think HasCallStack does ~3 magic things
2021-10-05 01:51:08	clever	1: it adds a special argument to every function
2021-10-05 01:51:19	→	soft has joined #haskell
2021-10-05 01:51:36	←	FinnElija has quit (Quit: FinnElija)
2021-10-05 01:51:40	clever	2: when calling any function that wants it, it will run a special `f` on the input arg it has in the local scope, and pass `f x` on down
2021-10-05 01:51:58	clever	3: if there is nothing in the local scope, it has a default to feed into `f default`
2021-10-05 01:52:26	clever	`f` then appends the call-site onto a list, so it forms a stack
2021-10-05 01:52:53	dminuoso	Yes. So? :)
2021-10-05 01:53:42	clever	personally, i just add `HasCallStack` to the function that prints an error msg, and it will show the top most callsite that lacks it
2021-10-05 01:53:49	clever	and then just recursively keep adding it, and crashing
2021-10-05 01:54:08	clever	but adding it does increase function call overhead, because it has one extra arg to deal with
2021-10-05 01:54:36	dminuoso	I think we're at cross-purposes here.
2021-10-05 01:54:57	→	w-spc-gir has joined #haskell
2021-10-05 01:55:27	→	FinnElija has joined #haskell
2021-10-05 01:55:32	←	lavaman has quit (Remote host closed the connection)
2021-10-05 01:55:35	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-05 01:55:45	geekosaur	dminuoso wants the adding to hapopen automagically, I think
2021-10-05 01:55:52	geekosaur	which I don't think ghc will do
2021-10-05 01:56:03	clever	yeah, i dont know of any way to do it either
2021-10-05 01:56:37	dminuoso	Ah I think I figured out how
2021-10-05 01:56:41	dminuoso	https://hackage.haskell.org/package/base-4.15.0.0/docs/GHC-Exts.html#v:currentCallStack
2021-10-05 01:56:45	→	shapr has joined #haskell
2021-10-05 01:57:06	←	neurocyte013288 has quit (Quit: The Lounge - https://thelounge.chat)
2021-10-05 01:57:09	→	w-spc-gir has joined #haskell
2021-10-05 01:57:12	dminuoso	Yes! It works like a charm
2021-10-05 01:57:19	clever	nice
2021-10-05 01:57:57	←	fendor has quit (Remote host closed the connection)
2021-10-05 01:58:33	dminuoso	Mmm, it doesn't quite do the same thing though.
2021-10-05 01:58:53	dminuoso	darn.
2021-10-05 01:58:54	←	wroathe has quit (Ping timeout: 246 seconds)
2021-10-05 01:59:00	Franciman	is there any proposal to change the layout rules of haskell?
2021-10-05 01:59:07	maerwald	wat
2021-10-05 01:59:14	Franciman	I think they are really awkward for almost no reason
2021-10-05 01:59:14	geekosaur	why?
2021-10-05 01:59:18	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-05 01:59:30	Franciman	they are really hard, and make writing an indenter by hand really hard.
2021-10-05 01:59:34	maerwald	you can fix that sort of stuff in a new language
2021-10-05 01:59:36	Franciman	Furthermore there are some strange cases happening
2021-10-05 01:59:40	Franciman	like
2021-10-05 01:59:47	maerwald	ships have sailed
2021-10-05 02:00:04	dminuoso	Even miniscule things like monad-of-no-return takes like a decade to pull through.
2021-10-05 02:00:10	dminuoso	Backward breaking changes are really unpopular.
2021-10-05 02:00:17	←	mc47 has quit (Remote host closed the connection)
2021-10-05 02:00:19	geekosaur	yeh, they're not going to risk breaking a bunch of existing progranms to make an indenter author's life easier
2021-10-05 02:00:50	Franciman	https://gist.github.com/jabberabbe/8232002cb9ddc7d7a4a404a2c3939b48
2021-10-05 02:01:03	awpr	personally I don't find layout to be awkward in a way that affects me; but to be fair, this is the kind of thing that you can also fix with a new surface syntax
2021-10-05 02:01:24	awpr	wasn't there discussion of a new syntax relating to the Dependent Haskell work?
2021-10-05 02:01:42	dminuoso	Honestly, record updating syntax seems like a way more relevant thing than the difficulty of an indenter author. :p
2021-10-05 02:01:57	Franciman	haskell is becoming a dead language
2021-10-05 02:02:01	Franciman	taking the road of C++
2021-10-05 02:02:05	myShoggoth	oh no
2021-10-05 02:02:07	dminuoso	Ok.
2021-10-05 02:02:09	awpr	lmao
2021-10-05 02:03:07	maerwald	Franciman: C++ at least has a standard that's up to date :p
2021-10-05 02:03:30	→	w-spc-gir has joined #haskell
2021-10-05 02:03:31	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-05 02:03:40	yushyin	no risk anyway, since it was never alive :p
2021-10-05 02:03:51	dminuoso	maerwald: By that measure Haskell wins hands down. GHC's source code is the most up-to-date standard you could possibly have.
2021-10-05 02:03:52	Franciman	oh actually haskell is becoming very alive
2021-10-05 02:03:56	Franciman	at the cost of losing its real life
2021-10-05 02:03:59	maerwald	dminuoso: lel
2021-10-05 02:04:03	Franciman	becoming a mainstream soulless language
2021-10-05 02:04:24	awpr	"not wantonly breaking millions of lines of code" = "soulless"
2021-10-05 02:04:37	maerwald	Franciman: linear types and dependent types aren't really "mainstream" :D
2021-10-05 02:05:01	maerwald	I wouldn't mind a bit less funky GHC extensions and higher quality libraries :p
2021-10-05 02:05:04	geekosaur	I'm afraid to ask what Franciman thinks its "real life" is.
2021-10-05 02:05:27	Franciman	its real life is fading into mainstream irrelevance
2021-10-05 02:05:39	Hecate	Franciman: who are you by the way?
2021-10-05 02:06:17	Franciman	a person saying his opinion about: not wanting to break things
2021-10-05 02:06:19	Franciman	because
2021-10-05 02:06:22	Franciman	of reasons
2021-10-05 02:06:30	→	w-spc-gir has joined #haskell
2021-10-05 02:06:44	Franciman	who are you Hecate?
2021-10-05 02:06:51	maerwald	I don't mind breaking things... but they should pay off
2021-10-05 02:07:03	maerwald	e.g. if someones breaks Aeson to fix a security bug? Hell yes
2021-10-05 02:07:16	maerwald	if we break FilePath in all of base to make a proper representation? Yes
2021-10-05 02:07:18	Hecate	Franciman: board member of the HF, notorious community member working on improving documentation, the base library, and GHC
2021-10-05 02:07:24	dminuoso	Franciman: If you want a *special* language, you can always write all your programs in APL.
2021-10-05 02:07:25	→	wroathe has joined #haskell
2021-10-05 02:07:26	←	wroathe has quit (Changing host)
2021-10-05 02:07:26	→	wroathe has joined #haskell
2021-10-05 02:07:37	awpr	look, I get frustrated by legacies sticking around for compatibility reasons as much as the next guy.  but that doesn't mean "screw everyone who's already written any Haskell code" is a better choice
2021-10-05 02:07:38	dminuoso	You never have to worry about your language becoming APL because its nearly inaccessible by anyone else.
2021-10-05 02:07:47	Franciman	:D
2021-10-05 02:08:03	dminuoso	*about your language becoming mainstream
2021-10-05 02:08:04	Franciman	Hecate: good
2021-10-05 02:08:08	Franciman	thanks
2021-10-05 02:08:14	awpr	and it REALLY doesn't mean "any language that doesn't break everything on the whims of a beginner complaining about it is a dead language"
2021-10-05 02:09:54	maerwald	Franciman: instead of fighting haskell layout rules, why don't you finish implementing your ghcup patch :p
2021-10-05 02:10:14	←	ec has quit (Ping timeout: 276 seconds)
2021-10-05 02:10:45	Franciman	maerwald: I am close to finishing my exams, then I'll be all available
2021-10-05 02:10:46	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-05 02:10:47	Franciman	!
2021-10-05 02:10:51	dminuoso	I have the following problem domain: There's a bunch of tasks I wanna run (they could run in parallel or sequence, I dont care), and each one might fork of more tasks - but in a way that tasks are identifiable by some string, so if a particular task is already registered, it wont run twice. There might be some extraordinary conditions by which additional tasks might only fire off, if some
2021-10-05 02:10:53	dminuoso	condition based on some compositite task result is done.
2021-10-05 02:11:21	dminuoso	All this sort of task dispatching logic I can write myself. Is there some toolkit on hackage that would take off the work for me here?
2021-10-05 02:11:26	←	wroathe has quit (Ping timeout: 245 seconds)
2021-10-05 02:11:33	awpr	Haskell could do what BlueSpec did: have two surface syntax styles for the same underlying language.  there are a lot of pent-up syntactic infelicities that could do with changing, and if it's a separate frontend, then it doesn't break existing code.  it'd have some costs in the form of needing to learn two different syntax styles, but it's at least not blocked by legacy
2021-10-05 02:11:36	timCF	dminuoso: async?
2021-10-05 02:12:02	dminuoso	timCF: It's not the asynchronous part Im thinking of, it's just this sort of "task management" thing.
2021-10-05 02:12:11	Franciman	Hecate: sad you have no plans for cabal :<
2021-10-05 02:12:14	Franciman	I hope the HF has some
2021-10-05 02:12:33	→	wroathe has joined #haskell
2021-10-05 02:12:34	←	wroathe has quit (Changing host)
2021-10-05 02:12:34	→	wroathe has joined #haskell
2021-10-05 02:12:42	maerwald	Franciman: I've been working on stack lately :>
2021-10-05 02:12:50	Franciman	oh ohhhhhh
2021-10-05 02:12:53	Franciman	lol
2021-10-05 02:12:55	Franciman	what'd you do?
2021-10-05 02:13:07	dminuoso	But maybe its actually haxl that I want. 
2021-10-05 02:13:32	maerwald	Franciman: trying to integrate with it better and then bugs popped up here and there
2021-10-05 02:13:51	Franciman	nice
2021-10-05 02:14:08	←	ubert has quit (Ping timeout: 252 seconds)
2021-10-05 02:14:10	maerwald	the codebase (in part) is actually quite nice
2021-10-05 02:14:18	maerwald	except for pantry
2021-10-05 02:14:27	timCF	dminuoso: Well, this part I missed a lot since left Erlang in favor of Haskell) Erlang/OTP and BEAM VM is the best in terms of ideas how to organize complex mutithreading programs. But many other aspects unfortunately completely suck(
2021-10-05 02:14:48	dminuoso	timCF: Fun fact, elixir was my gateway drug to Haskell. :)
2021-10-05 02:14:50	→	ec has joined #haskell
2021-10-05 02:15:44	→	w-spc-gir has joined #haskell
2021-10-05 02:16:11	timCF	dminuoso: hey bro! I've used Elixir a lot as well, "emulating" proper compile-time safe sum types with macro, but at some point metaprogramming went too far, and my co-workers can not understand my ideas anymore
2021-10-05 02:16:30	→	ubert has joined #haskell
2021-10-05 02:17:01	dminuoso	timCF: The thing that really annoyed me most, is the lack of a type system (strangely enough I craved for one from my C++ days) and how even rudimentary core things like |> were macros that led to a lot of extremely annoying debugging sessions.
2021-10-05 02:17:27	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-05 02:17:47	→	w-spc-gir has joined #haskell
2021-10-05 02:17:57	justsomeguy	Your description is kind of reminiscent of a situation I ran into when troubleshooting service dependencies with systemd (an init system).
2021-10-05 02:37:46	ℹ	irc: disconnected from server
2021-10-05 02:38:07	→	oxide has joined #haskell
2021-10-05 02:38:07	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-10-05 02:38:07	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-10-05 02:38:07	ℹ	Channel #haskell: 739 nicks (1 op, 0 voices, 738 normals)
2021-10-05 02:38:08	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-10-05 02:38:21	geekosaur	only half tested, less than half documented, nobody can use it because it doesn't work with stack, ...
2021-10-05 02:38:50	sclv	backpack is something that was great in theory, but yeah it never got  enough institutional support to be fully implemented :-/
2021-10-05 02:39:01	Cale	RecordDotSyntax should have been rejected, rather than picking between 8 different proposed means of disambiguating a dozen or so expressions by Condorcet voting
2021-10-05 02:39:06	sclv	i'm not even sure of the full inventory of whats missing to make it really pleasant to use
2021-10-05 02:39:16	sclv	edward seems to have the biggest list of complaints :-)
2021-10-05 02:39:27	←	ec has quit (Ping timeout: 276 seconds)
2021-10-05 02:39:30	maerwald	sclv: here's one thing that's missing: people understanding what it is, lol
2021-10-05 02:39:44	monochrom	I like backpack, but I reckon that to a lot of haskeller's, an advanced module system is not needed, they have found workarounds.
2021-10-05 02:39:44	geekosaur	see "less than halfdocumented"
2021-10-05 02:40:20	maerwald	and not getting redirected to a PhD thesis
2021-10-05 02:40:43	geekosaur	and while I dislike stack personally, a mechanism that can't be used with stack is a pretty serious drawback
2021-10-05 02:41:38	awpr	speaking of module systems, the only gripe I can think of with Haskell's current one is the orphan instances situation: if there's an instance `A B`, then either A depends on B, or B depends on A, or it lives in an orphans package that's not always discoverable and pollutes everything downstream with orphan exports
2021-10-05 02:41:59	dminuoso	maerwald: that put me off the most about it. I really want to like backpack, but the only documentation is really that phd thesis...
2021-10-05 02:42:11	Cale	awpr: Orphan instances are a pretty important possibility though, if you're into writing executables.
2021-10-05 02:42:13	dminuoso	or the bunch of libraries that edwardk uses it in..
2021-10-05 02:42:48	monochrom	Ah, so it comes down to my fault, I still haven't written my much promised backpack tutorial... >:)
2021-10-05 02:42:52	dminuoso	awpr: Oh I have a clear winner for whats wrong with the module system. We dont have circular imports!
2021-10-05 02:43:04	awpr	sure, I don't have any problem with them in that context.  the issue is that introducing a new typeclass to Hackage requires buy-in from everyone before it can be useful
2021-10-05 02:43:04	dminuoso	If we had circular imports, we could freely structure modules the right way.
2021-10-05 02:43:12	Cale	But yeah, it's a bit of a hassle -- sometimes it's awkward to induce a dependency one way or the other between the package defining an instance and the package defining the data type
2021-10-05 02:43:21	Cale	er, the package defining the class, I mean
2021-10-05 02:43:22	monochrom	(Now this is a good time to ask "monochrom: who the hell do you think you are?" >:) )
2021-10-05 02:43:55	dolio	You can do circular imports. You just need to do extra work.
2021-10-05 02:44:03	→	ec has joined #haskell
2021-10-05 02:44:09	awpr	right, more than just awkward IMO: it introduces an undesirable conflict between "make dependencies small" and "be compatible with XYZ"
2021-10-05 02:44:29	awpr	which is usually resolved by "oh well, I guess we'll have an orphans package"
2021-10-05 02:44:32	monochrom	I seriously begin to think that the Haskell committee was very wrong in specifying circular imports.  The GHC user's guide has explained why it can't be done automatically, as a matter of principle.
2021-10-05 02:44:43	dolio	I'm pretty skeptical that circular imports are actually the right way of structuring things, though.
2021-10-05 02:44:52	←	chomwitt has quit (Ping timeout: 252 seconds)
2021-10-05 02:44:54	monochrom	Note that circular imports "works" for SML because you always have to write module sigs.
2021-10-05 02:45:31	monochrom	So now GHC asks you to write the equiv of module sigs, in fact even less than that, and all of you are complaining.
2021-10-05 02:45:35	Cale	I still haven't really looked into why we can't essentially infer hs-boot files.
2021-10-05 02:45:52	dolio	Having worked on a project that used a language that freely allows circular imports, it turned the entire project into a giant tangle where almost any change required rebuilding everything, slowly.
2021-10-05 02:46:01	Cale	I guess it's a problem in the case that your module doesn't have top-level signatures for the things it defines
2021-10-05 02:46:30	→	mirai67 has joined #haskell
2021-10-05 02:46:42	Cale	But yeah, that's true. Usually need for circular module dependencies is almost a problem in and of itself
2021-10-05 02:47:00	←	mirai67 has left #haskell
2021-10-05 02:47:27	dminuoso	Im not sure about that. In a way I trained myself to a particular module structure for no reason other than to avoid circular imports. In languages like C you have these simple loop breaker macros that just work.
2021-10-05 02:47:46	edwardk	dminuoso: i want to like using backpack, but i admit the status quo around haddock and backpack just makes me sad and i stop writing code entirely
2021-10-05 02:48:03	Cale	I guess that kind of gets at why I'm always so upset with nix. It doesn't have a module system, they just use big associative mappings containing the entire universe, and then transform and manipulate and take fixed points of those things.
2021-10-05 02:48:04	awpr	in C and C++ you're also writing the equivalent of the entire .hi file by hand
2021-10-05 02:48:34	Cale	and it becomes impossible to figure out how individual entries in that mapping are defined, because the definition is spread out through so many files
2021-10-05 02:48:41	Cale	(and you don't even know what those files are)
2021-10-05 02:48:45	dminuoso	Cale: to be fair, nix *does* have a module system
2021-10-05 02:49:01	Cale	In the sense of Haskell's module system?
2021-10-05 02:49:16	dminuoso	Cale: Sure, Im talking about the stuff driving the nixos modules
2021-10-05 02:49:37	dminuoso	i.e. <nixpkgs>/lib/modules.nix
2021-10-05 02:49:43	sclv	this reminds me of the famous story about cyclic dependencies on collateralized securities
2021-10-05 02:49:46	edwardk	haskell's module system is basically a glorified namespacing system. its the least offensive and least effective thing that could be offered and called modules
2021-10-05 02:49:56	Cale	I want something where if I can tell which import was responsible for bringing something into scope, I have a pretty strong hint about where to go look for it on disk.
2021-10-05 02:50:07	⚡	awpr wonders if edwardk was subconsciously summoned by me mentioning the exact problem that inspired creating a whole new language (IIUC)
2021-10-05 02:50:16	dminuoso	awpr: I highlighted him
2021-10-05 02:50:26	sclv	when a debt obligation has some things fall out (like a mortgage that goes into default) then there's specs for it getting replaced by something else -- often shares of some other tranched cdo
2021-10-05 02:50:35	edwardk	the edwardk signal was lit
2021-10-05 02:50:44	Cale	This is a thing that fancier module systems start to erode, usually.
2021-10-05 02:51:08	sclv	and at one point one cdo ended up with shares of a cdo that in turn had shares in it
2021-10-05 02:51:14	←	albet70 has quit (Read error: Connection reset by peer)
2021-10-05 02:51:17	sclv	so the banks had to solve a fixpoint equation to price it
2021-10-05 02:51:18	edwardk	sclv: hahaha
2021-10-05 02:51:39	dminuoso	Sure. I mean the nixos module system does not give you that traceability, and in fact exposing artifacts works by registering inside this global fixed point, and that introduces a bunch of issues wrt to conflicts/merging, or even understanding the origin of something.
2021-10-05 02:51:41	Cale	But it's pretty important: equational reasoning only does you any good if you can *find* the relevant equations defining the things you're using!
2021-10-05 02:51:46	edwardk	sclv: i really want a reference to this for use when folks ask what the point of fixed points is
2021-10-05 02:52:08	←	NotIndonesian has quit (Ping timeout: 264 seconds)
2021-10-05 02:52:21	→	albet70 has joined #haskell
2021-10-05 02:52:27	→	NotIndonesian has joined #haskell
2021-10-05 02:52:29	edwardk	sclv: the real question is what to do when the security is outside of its own modulus of convergence. infinite money!
2021-10-05 02:53:09	←	emf_ has quit (Read error: Connection reset by peer)
2021-10-05 02:53:22	int-e	valueless money
2021-10-05 02:53:26	→	emf has joined #haskell
2021-10-05 02:53:28	sclv	edwardk: pretty sure the story is in Das' "Traders, Guns and Money"
2021-10-05 02:53:37	sclv	it might be in dermain's "my life as a quant" tho
2021-10-05 02:53:44	monochrom	sclv: Sometimes I joke that it was SPJ's work on the financial contract monad in Haskell that caused it. Sometimes I wonder if that's seriously true...
2021-10-05 02:53:52	edwardk	sclv: roger
2021-10-05 02:54:02	sclv	both rollicking good reads
2021-10-05 02:54:05	←	slack1256 has quit (Remote host closed the connection)
2021-10-05 02:54:14	monochrom	Or perhaps s/caused/enabled/
2021-10-05 02:54:27	←	chele has quit (Remote host closed the connection)
2021-10-05 02:54:30	→	slack1256 has joined #haskell
2021-10-05 02:54:36	sclv	not sure how much spj's work had made it into most of the firms doing the models. it was in a few, but certainly not all
2021-10-05 02:54:45	gehmehgeh	I know somebody who works at a reinsurance company (insurance that insures insurance). I wonder if they've ever insured one another in a circle
2021-10-05 02:54:55	sclv	certainly it wasn't used in the valuation models, at most the trading models
2021-10-05 02:54:56	→	w-spc-gir has joined #haskell
2021-10-05 02:54:59	gehmehgeh	Have to ask him :D
2021-10-05 02:55:00	→	lavaman has joined #haskell
2021-10-05 02:55:19	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-05 02:55:51	←	emf has quit (Remote host closed the connection)
2021-10-05 02:55:55	←	slack1256 has quit (Remote host closed the connection)
2021-10-05 02:57:05	monochrom	Yikes reinsurance haha.
2021-10-05 02:57:15	monochrom	Both terrifying and funny.
2021-10-05 02:57:49	gehmehgeh	There's the Munich Re and the Hanover Re ("Hannover Rück"). Those insurance companies that insure other insurances copmanies
2021-10-05 02:57:57	gehmehgeh	and I think they themselves are insured, too :D
2021-10-05 02:58:13	gehmehgeh	(There are also other reinsurance companies, but those are two I know)
2021-10-05 02:58:20	gehmehgeh	My friend works for one of them
2021-10-05 02:59:09	gehmehgeh	Who insures the insurers? eh? ;)
2021-10-05 02:59:54	→	w-spc-gir has joined #haskell
2021-10-05 03:00:09	←	jaitoon has quit (Ping timeout: 250 seconds)
2021-10-05 03:00:50	→	emf has joined #haskell
2021-10-05 03:01:48	←	noircode has left #haskell
2021-10-05 03:01:49	←	lavaman has quit (Remote host closed the connection)
2021-10-05 03:03:34	maerwald	Mafia
2021-10-05 03:03:40	→	lavaman has joined #haskell
2021-10-05 03:03:44	←	lavaman has quit (Remote host closed the connection)
2021-10-05 03:03:54	maerwald	they visit the insurred in case of insurance claim :D
2021-10-05 03:04:46	gehmehgeh	How reassuring. :D
2021-10-05 03:04:53	gehmehgeh	I mean, reinsuring :D
2021-10-05 03:06:22	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-05 03:11:37	→	w-spc-gir has joined #haskell
2021-10-05 03:12:25	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-05 03:12:50	←	Lycurgus has quit (Quit: Exeunt)
2021-10-05 03:14:36	←	michalz has quit (Remote host closed the connection)
2021-10-05 03:18:14	→	w-spc-gir has joined #haskell
2021-10-05 03:19:34	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-05 03:21:02	→	w-spc-gir has joined #haskell
2021-10-05 03:21:35	→	merijn has joined #haskell
2021-10-05 03:23:39	←	ec has quit (Ping timeout: 276 seconds)
2021-10-05 03:26:47	←	vladomiro has quit (Quit: Leaving)
2021-10-05 03:28:18	→	ec has joined #haskell
2021-10-05 03:30:35	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-05 03:35:39	→	w-spc-gir has joined #haskell
2021-10-05 03:37:09	←	eggplantade has quit (Remote host closed the connection)
2021-10-05 03:40:10	→	yielduck has joined #haskell
2021-10-05 03:43:58	sm	Franciman: this is boring to read
2021-10-05 03:44:21	Franciman	what did I do, now?
2021-10-05 03:44:49	monochrom	Ugh please don't raise the dead horse!
2021-10-05 03:45:17	Franciman	oh you refer to the previous statements
2021-10-05 03:45:34	geekosaur	sounds like they were catching up n backscroll
2021-10-05 03:45:40	geekosaur	people do that
2021-10-05 03:45:56	Franciman	sorry if i am too stupid
2021-10-05 03:48:33	←	gehmehgeh has quit (Quit: Leaving)
2021-10-05 03:50:04	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-05 03:50:46	→	w-spc-gir has joined #haskell
2021-10-05 03:52:13	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-05 03:52:43	→	w-spc-gir has joined #haskell
2021-10-05 03:52:53	→	jaitoon has joined #haskell
2021-10-05 03:52:55	→	abrantesasf has joined #haskell
2021-10-05 03:53:33	←	ec has quit (Ping timeout: 276 seconds)
2021-10-05 03:54:46	←	merijn has quit (Ping timeout: 245 seconds)
2021-10-05 03:54:59	→	gay has joined #haskell
2021-10-05 03:55:03	←	Pickchea has quit (Quit: Leaving)
2021-10-05 03:55:18	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-05 03:55:24	sm	+1 for no circular imports, it seems to force a certain clarity of structure
2021-10-05 03:56:03	→	ec has joined #haskell
2021-10-05 03:56:10	dminuoso	sm: Would you say the same if we had no letrec?
2021-10-05 03:56:11	→	eggplantade has joined #haskell
2021-10-05 03:56:14	dminuoso	And no whererec?
2021-10-05 03:56:35	Franciman	does Core have letrec too?
2021-10-05 03:56:46	→	w-spc-gir has joined #haskell
2021-10-05 03:56:47	monochrom	Yes.
2021-10-05 03:56:50	Franciman	or is it desugared into a particular form?
2021-10-05 03:56:58	monochrom	No.
2021-10-05 03:57:01	Franciman	I see, and uhm
2021-10-05 03:57:12	Franciman	I think I already asked this, but
2021-10-05 03:57:33	Franciman	I don't remember actually. Is there a paper explaining how core is executed?
2021-10-05 03:57:35	Franciman	in ghc
2021-10-05 03:57:41	←	wroathe has quit (Ping timeout: 245 seconds)
2021-10-05 03:57:56	monochrom	https://github.com/takenobu-hs/haskell-ghc-illustrated
2021-10-05 03:59:04	Franciman	ty very much
2021-10-05 03:59:19	←	Tuplanolla has quit (Quit: Leaving.)
2021-10-05 04:00:08	awpr	this isn't a direct answer, but here's an entire book devoted to explaining the whole field in detail, which gives a ton of background and intuition for GHC: https://www.microsoft.com/en-us/research/publication/the-implementation-of-functional-programming-languages/
2021-10-05 04:00:21	awpr	obviously a lot of progress has been made since 1987 that's not in that book :)
2021-10-05 04:00:25	geekosaur	https://gitlab.haskell.org/ghc/ghc/-/wikis/reading-list#code-generation-and-virtual-machine
2021-10-05 04:00:47	geekosaur	stg instead of core, but stg is what core compiles to
2021-10-05 04:00:53	Franciman	great ty
2021-10-05 04:01:03	Franciman	I was interested in how recursion is treated
2021-10-05 04:01:13	Franciman	in my language I just leverage haskell's laziness
2021-10-05 04:01:15	Franciman	and use fix
2021-10-05 04:01:18	dminuoso	sm: Personally I feel too constrained, the style of making dedicated Types modules just to avoid having to write boot hs files.. it's a constant source of annoyance to me.
2021-10-05 04:01:22	←	gay has quit (Ping timeout: 252 seconds)
2021-10-05 04:01:26	Franciman	but I think this is a bit slow
2021-10-05 04:01:50	geekosaur	stg doesn't know about recursion /per se/; it just jumps into machine code which might jump back to where things started
2021-10-05 04:02:00	Franciman	knowing that a recursive call calls itself, maybe can be optimized away, instead of running a normal function call
2021-10-05 04:02:22	geekosaur	there aren't really any "normal function calls" at the stg level
2021-10-05 04:02:23	Franciman	hmm makes much sense, geekosaur 
2021-10-05 04:02:29	Franciman	they all jumps, right?
2021-10-05 04:02:34	Franciman	jumps + push stack things
2021-10-05 04:02:38	geekosaur	you could say everything is already a tail call
2021-10-05 04:02:45	dminuoso	Franciman: This is a tricky proposition. Optimization recursive functions is difficult, since the bread-and-butter (at least for GHC) is inlining.
2021-10-05 04:03:16	geekosaur	you might want to start with the original stg paper to see how and why things work
2021-10-05 04:03:43	geekosaur	there have been some modifications and optimizations since then, but they won't make much sense without an understanding of the original
2021-10-05 04:03:49	dminuoso	After/during the paper, you might also find this helpful https://hackage.haskell.org/package/stgi
2021-10-05 04:04:00	monochrom	At a low level like this, there is no need to avoid self-references, in fact it is clearer to let self-references be self-references.  And TCO is also pretty easy at this level.
2021-10-05 04:04:29	Franciman	thanks for that, dminuoso 
2021-10-05 04:04:45	monochrom	Whereas, by contrast, for example, if you "compile" self-references to the Y combinator, you are making things worse for all purposes.
2021-10-05 04:05:12	monochrom	Right? Machine codes aren't afraid of self-references.
2021-10-05 04:05:24	Franciman	I feel a bit lost
2021-10-05 04:05:25	dminuoso	monochrom: Reminds me of how recursion schemes tend to make a real dent in performance. :)
2021-10-05 04:05:30	geekosaur	(said original stg paper being "the spineless tagless g-machine"_
2021-10-05 04:05:37	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-05 04:05:40	→	cjb has joined #haskell
2021-10-05 04:06:00	→	w-spc-gir has joined #haskell
2021-10-05 04:06:16	geekosaur	and evaluation in haskell is more about graph reduction (the "g" in stg) than function calls
2021-10-05 04:06:34	Franciman	because of laziness, I reckon
2021-10-05 04:06:39	geekosaur	yes
2021-10-05 04:06:53	geekosaur	this is basically how you have to implement laziness
2021-10-05 04:06:55	awpr	(the SPJ book I linked gives a good intuition for how this sort of graph reduction works and what drives it, without some of the complexities of current Haskell)
2021-10-05 04:06:56	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-05 04:07:23	Franciman	thank you all for the interesting details you shared
2021-10-05 04:07:33	Franciman	I am getting furiously mad, because my interpreter is slower than PHP lol
2021-10-05 04:07:41	←	hyiltiz has quit (Ping timeout: 245 seconds)
2021-10-05 04:07:43	Franciman	so I was trying to understand how real functional languages do recursion
2021-10-05 04:08:06	Franciman	what I implemented is a SECD machine
2021-10-05 04:08:30	monochrom	"interpreter" vs "compiler" also makes a big difference.
2021-10-05 04:08:31	→	w-spc-gir has joined #haskell
2021-10-05 04:08:55	monochrom	I dare say that for recursion, compiling is easier.
2021-10-05 04:09:19	monochrom	Way easier. ASM already supports it natively.
2021-10-05 04:09:39	dminuoso	Franciman: In a way, Haskell was a test bed on how to make a lazy functional programming language. It took decades and the combined efforts of many dozens of people to make it fast.
2021-10-05 04:09:44	monochrom	Both cyclic data and cyclic jumps and cyclic jsrs.
2021-10-05 04:10:38	monochrom	But interpreter? My http://www.cs.utoronto.ca/~trebla/CSCC24-2021-Summer/09-semantics-1.html#letrec is my simplest attempt, and it is still not simple.
2021-10-05 04:11:10	dminuoso	monochrom: Question: what is the distinction between a compiler and interpreter in Haskell?
2021-10-05 04:11:31	dminuoso	Is the spineless tagless G machine not a conceptual interpreter?
2021-10-05 04:11:59	Franciman	monochrom: if you use haskell's laziness you can get better than that
2021-10-05 04:12:15	→	wroathe has joined #haskell
2021-10-05 04:12:16	←	wroathe has quit (Changing host)
2021-10-05 04:12:16	→	wroathe has joined #haskell
2021-10-05 04:12:25	Franciman	by creating this: https://github.com/Franciman/ellipse/blob/stable/src/Eval.hs#L78
2021-10-05 04:12:31	Franciman	you can bind yourself 
2021-10-05 04:12:34	Franciman	when creating yourself
2021-10-05 04:12:43	Franciman	thanks to laziness, so you don't have to do it at each app :)
2021-10-05 04:12:56	monochrom	Oh, my previous version did that. Students had much trouble.
2021-10-05 04:13:26	Franciman	a simpler way requires mutation
2021-10-05 04:13:38	Franciman	you put a Loop argument as first bound value
2021-10-05 04:13:40	Franciman	it means loop forever
2021-10-05 04:13:45	Franciman	after evaluating the body
2021-10-05 04:13:50	Franciman	you change that first argument to itself
2021-10-05 04:14:11	Franciman	where itself is a pointer to the evaluated body, now
2021-10-05 04:14:12	Franciman	ol
2021-10-05 04:14:19	←	mastarija has quit (Quit: Leaving)
2021-10-05 04:14:29	Franciman	that's the way I learnt in the little schemer
2021-10-05 04:14:32	Franciman	i think
2021-10-05 04:15:26	Franciman	+1 to dminuoso question
2021-10-05 04:15:44	Franciman	dminuoso: my understanding was that after the STG you compile to Cmm
2021-10-05 04:15:50	Franciman	and then to code
2021-10-05 04:15:55	Franciman	that's the only additional step
2021-10-05 04:16:00	monochrom	Yeah I think that there is a big difference but I have to think how to articulate it.
2021-10-05 04:16:19	Franciman	what you compile is the evaluation process of the STG
2021-10-05 04:16:54	geekosaur	I think that's not actually the question. dminuoso is asking is whether the code that implements the STG representation of the program is in some sense interpreted
2021-10-05 04:17:04	geekosaur	and one can indeed argue for that virewpoint
2021-10-05 04:17:14	geekosaur	it's interpreting a graph, by reducing it
2021-10-05 04:17:16	awpr	to me a compiler is about translating a language to another (usually lower-level) one.  if you suppose STG were interpreting bytecode, GHC would still be a compiler, it would just be compiling to an  interpreted target
2021-10-05 04:17:21	monochrom	Perhaps my answer is asking back "have you written an STG interpreter?"
2021-10-05 04:17:40	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-05 04:17:59	←	dhouthoo has quit (Quit: WeeChat 3.2)
2021-10-05 04:18:23	dminuoso	geekosaur: Indeed, that was my thought.
2021-10-05 04:19:08	→	w-spc-gir has joined #haskell
2021-10-05 04:19:28	dolio	Does that mean that a compiler that outputs x86 isn't a compiler, because you could make an x86 interpreter?
2021-10-05 04:19:55	geekosaur	is javac a compiler?
2021-10-05 04:19:59	shapr	ed wrote one of those once
2021-10-05 04:20:17	geekosaur	for that matter, there's the reduceron. so is ghc a compiler?
2021-10-05 04:20:29	awpr	dolio: is that responding to my comment?  I was suggesting exactly the opposite, that a compiler is still a compiler regardless of whether its target is or can be interpreted
2021-10-05 04:20:38	geekosaur	(kinda reverse logic there)
2021-10-05 04:21:09	→	hyiltiz has joined #haskell
2021-10-05 04:21:11	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-05 04:21:25	Franciman	a compiler is something that can't say a program terminates every time it does
2021-10-05 04:21:29	Franciman	while an interpreter can do it
2021-10-05 04:21:31	dolio	awpr: I don't think so.
2021-10-05 04:21:32	geekosaur	the question of "compiler or interpreter?" has become a lot more nuanced since the 90s
2021-10-05 04:21:37	ℹ	irc: disconnected from server
2021-10-06 15:05:36	→	oxide has joined #haskell
2021-10-06 15:05:36	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-10-06 15:05:36	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-10-06 15:05:36	ℹ	Channel #haskell: 719 nicks (1 op, 0 voices, 718 normals)
2021-10-06 15:05:37	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-10-06 15:05:41	←	cfricke has quit (Client Quit)
2021-10-06 15:05:54	→	cfricke has joined #haskell
2021-10-06 15:06:37	kuribas	yes, one can.  By pushing complexity around.
2021-10-06 15:06:45	ℹ	sm2n_ is now known as sm2n
2021-10-06 15:08:16	kuribas	then you get a seemingly very simple solution, only you have to deal later with the consequences.
2021-10-06 15:08:22	merijn	I mean it seems weird to demand "more precise" natural language about subjective statements
2021-10-06 15:08:54	kuribas	Like in clojure requiring a huge testsuite if you want to get some degree of robustness.
2021-10-06 15:09:27	←	werneta has quit (Ping timeout: 252 seconds)
2021-10-06 15:10:36	kuribas	or like using nil everywhere, look we got rid of those pesky Maybe's!
2021-10-06 15:14:39	dminuoso	I think a major issue is that programmers in general have a misconception about what abstraction is, and when to use it.
2021-10-06 15:14:46	dminuoso	To quote Dijkstra "The purpose of abstraction is not to be vague, but to create a new semantic level in which one can be absolutely precise"
2021-10-06 15:14:57	→	lavaman has joined #haskell
2021-10-06 15:15:22	dminuoso	More often than not, programmers make vague things and label it "an abstraction" for an increase in perceived professionality
2021-10-06 15:15:34	→	benin03693230163 has joined #haskell
2021-10-06 15:16:15	kuribas	OO design patterns...
2021-10-06 15:17:14	←	benin0369323016 has quit (Ping timeout: 245 seconds)
2021-10-06 15:17:15	ℹ	benin03693230163 is now known as benin0369323016
2021-10-06 15:17:31	←	bitdex has quit (Remote host closed the connection)
2021-10-06 15:18:24	→	bitdex has joined #haskell
2021-10-06 15:19:26	←	libertyprime has quit (Quit: leaving)
2021-10-06 15:19:49	←	lavaman has quit (Ping timeout: 265 seconds)
2021-10-06 15:20:47	←	chomwitt has quit (Ping timeout: 265 seconds)
2021-10-06 15:22:57	→	robosexual has joined #haskell
2021-10-06 15:24:38	→	koishi_ has joined #haskell
2021-10-06 15:25:02	koishi_	Is it possible to enable 'RebindableSyntax' locally?
2021-10-06 15:27:19	koishi_	Hmm, I have to move some functions into a separate module anyways due to 'import'...
2021-10-06 15:27:52	→	raehik has joined #haskell
2021-10-06 15:28:21	ℹ	koishi_ is now known as koishi`
2021-10-06 15:28:51	←	gehmehgeh has quit (Remote host closed the connection)
2021-10-06 15:29:08	←	koishi` has left #haskell
2021-10-06 15:30:31	→	gehmehgeh has joined #haskell
2021-10-06 15:30:40	Guest20	Is it normal for https://hackage.haskell.org/package/megaparsec-9.2.0/docs/Text-Megaparsec-Char-Lexer.html#v:charLiteral
2021-10-06 15:30:43	→	ormaaj has joined #haskell
2021-10-06 15:30:52	Guest20	to error out on parsing "\/" ?
2021-10-06 15:31:02	Guest20	lexical error in string/character literal at character '/'
2021-10-06 15:31:36	Guest20	there are no issues with other escape chars like \n, \t ...
2021-10-06 15:32:11	Guest20	is there something specific about haskell conventions that makes this possible?
2021-10-06 15:35:00	←	cfricke has quit (Quit: WeeChat 3.3)
2021-10-06 15:43:07	←	xff0x has quit (Ping timeout: 264 seconds)
2021-10-06 15:43:41	←	azeem has quit (Ping timeout: 245 seconds)
2021-10-06 15:46:28	→	jtomas has joined #haskell
2021-10-06 15:47:35	→	ub has joined #haskell
2021-10-06 15:49:06	←	hyiltiz has quit (Ping timeout: 245 seconds)
2021-10-06 15:49:47	→	hyiltiz has joined #haskell
2021-10-06 15:50:47	dminuoso	Guest20: I dont quite understand the problem.
2021-10-06 15:50:55	dminuoso	Can you provide the input and the code you're using?
2021-10-06 15:51:30	Guest20	the code is simply `parseTest charLiteral "\/"`
2021-10-06 15:51:36	Guest20	on ghci
2021-10-06 15:51:49	←	ub has quit (Ping timeout: 245 seconds)
2021-10-06 15:52:29	→	azeem has joined #haskell
2021-10-06 15:52:52	←	azeem has quit (Read error: Connection reset by peer)
2021-10-06 15:53:29	→	azeem has joined #haskell
2021-10-06 15:53:37	Guest20	dminuoso: trying `parseTest charLiteral "\n" doesn't throw a parse error
2021-10-06 15:53:50	Guest20	(this is Megaparsec)
2021-10-06 15:55:03	dminuoso	% import Data.Char
2021-10-06 15:55:03	yahb	dminuoso: 
2021-10-06 15:55:20	dminuoso	% readLitChar "\/"
2021-10-06 15:55:20	yahb	dminuoso: ; <interactive>:6:15: error: lexical error in string/character literal at character '/'
2021-10-06 15:55:41	dminuoso	Guest20: So yeah, megaparsec ends up using readLitChar as per note:
2021-10-06 15:55:59	dminuoso	"The literal character is parsed according to the grammar rules defined in the Haskell report."
2021-10-06 15:56:42	dminuoso	What this essentially means is:
2021-10-06 15:56:48	dminuoso	"\/" is not a valid haskell string.
2021-10-06 15:57:24	dminuoso	Because \/ is not considered a valid character according to the grammar rules defined in the Haskell report.
2021-10-06 15:57:38	dminuoso	More to the point:
2021-10-06 15:57:49	dminuoso	% '\/' -- is not a valid haskell character
2021-10-06 15:57:49	yahb	dminuoso: ; <interactive>:9:3: error: lexical error in string/character literal at character '/'
2021-10-06 15:57:53	dminuoso	Guest20: Does this make sense?
2021-10-06 15:58:27	→	olibiera has joined #haskell
2021-10-06 15:58:30	Guest20	is makes perfect sense but the implications scare me
2021-10-06 15:58:43	Guest20	how would replace readLitCHar
2021-10-06 15:58:59	Guest20	s/would/would I
2021-10-06 15:59:25	dminuoso	Well you have to define what this would even mean to you.
2021-10-06 15:59:38	dminuoso	But really, you can simply do this yourself.
2021-10-06 15:59:40	dminuoso	Use lookahead
2021-10-06 16:00:03	dminuoso	*lookAhead
2021-10-06 16:00:13	Guest20	Alright I have some reading to do
2021-10-06 16:00:32	olibiera	is there any function that takes a list and divides it? for example [1,2,3,4,5,6] turns into ([1,2,3],[4,5,6])
2021-10-06 16:01:13	dminuoso	olibiera: You mean something like https://hackage.haskell.org/package/split-0.2.3.4/docs/Data-List-Split.html#v:chunksOf ?
2021-10-06 16:01:27	dminuoso	You can find variations of it on hackage, or you can just roll it yourself.
2021-10-06 16:01:35	dminuoso	It's a relatively straight forward 4-5 liner
2021-10-06 16:01:56	→	cfricke has joined #haskell
2021-10-06 16:02:44	olibiera	not really i needed it in tuple
2021-10-06 16:03:01	←	Guest20 has quit (Quit: Client closed)
2021-10-06 16:04:18	→	chomwitt has joined #haskell
2021-10-06 16:05:46	←	dschrempf has quit (Ping timeout: 245 seconds)
2021-10-06 16:08:22	ℹ	rosariopulella[m is now known as Rosuavio[m]
2021-10-06 16:08:39	←	cfricke has quit (Quit: WeeChat 3.3)
2021-10-06 16:09:36	ℹ	edro is now known as edr
2021-10-06 16:23:14	→	Lord_of_Life has joined #haskell
2021-10-06 16:24:02	→	xff0x has joined #haskell
2021-10-06 16:25:09	←	darkstardevx has quit (Ping timeout: 245 seconds)
2021-10-06 16:25:23	kuribas	olibiera: span?
2021-10-06 16:25:25	kuribas	or splitAt?
2021-10-06 16:25:27	kuribas	:t span
2021-10-06 16:25:28	lambdabot	(a -> Bool) -> [a] -> ([a], [a])
2021-10-06 16:25:31	kuribas	:t splitAt
2021-10-06 16:25:32	lambdabot	Int -> [a] -> ([a], [a])
2021-10-06 16:25:39	→	darkstardevx has joined #haskell
2021-10-06 16:27:33	kuribas	> splitAt 3 [1..6]
2021-10-06 16:27:35	lambdabot	 ([1,2,3],[4,5,6])
2021-10-06 16:27:44	kuribas	> span (< 4) [1..6]
2021-10-06 16:27:46	lambdabot	 ([1,2,3],[4,5,6])
2021-10-06 16:27:55	olibiera	ty!
2021-10-06 16:28:59	←	olibiera has quit (Quit: Client closed)
2021-10-06 16:29:25	←	azeem has quit (Ping timeout: 265 seconds)
2021-10-06 16:29:46	→	azeem has joined #haskell
2021-10-06 16:30:42	→	alx741 has joined #haskell
2021-10-06 16:32:17	←	azeem has quit (Read error: Connection reset by peer)
2021-10-06 16:32:34	→	azeem has joined #haskell
2021-10-06 16:34:32	←	azeem has quit (Read error: Connection reset by peer)
2021-10-06 16:34:55	→	dschrempf has joined #haskell
2021-10-06 16:35:03	→	azeem has joined #haskell
2021-10-06 16:42:07	→	alzgh has joined #haskell
2021-10-06 16:42:08	→	ub has joined #haskell
2021-10-06 16:44:32	←	acidjnk_new has quit (Ping timeout: 265 seconds)
2021-10-06 16:48:26	←	hiruji has quit (Read error: Connection reset by peer)
2021-10-06 16:48:40	→	hiruji has joined #haskell
2021-10-06 16:49:50	←	int-e has quit (Remote host closed the connection)
2021-10-06 16:50:34	→	int-e has joined #haskell
2021-10-06 16:52:08	←	vinstre has quit (Remote host closed the connection)
2021-10-06 16:52:40	←	lambdabot has quit (Quit: ...)
2021-10-06 16:53:13	→	lambdabot has joined #haskell
2021-10-06 16:53:13	←	lambdabot has quit (Changing host)
2021-10-06 16:53:13	→	lambdabot has joined #haskell
2021-10-06 16:56:29	→	zer0bitz has joined #haskell
2021-10-06 16:57:34	←	Lord_of_Life has quit (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
2021-10-06 16:57:49	→	ftzm[m] has joined #haskell
2021-10-06 17:03:28	←	mestre has quit (Quit: Lost terminal)
2021-10-06 17:04:36	→	Amras has joined #haskell
2021-10-06 17:06:04	→	CiaoSen has joined #haskell
2021-10-06 17:06:32	←	aidy has quit (Quit: Reconnecting)
2021-10-06 17:06:32	←	fef has quit (Remote host closed the connection)
2021-10-06 17:06:47	→	aidy has joined #haskell
2021-10-06 17:09:43	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-10-06 17:11:36	←	ub has quit (Ping timeout: 245 seconds)
2021-10-06 17:12:06	→	cfricke has joined #haskell
2021-10-06 17:12:43	←	Everything has quit (Ping timeout: 268 seconds)
2021-10-06 17:14:12	→	Everything has joined #haskell
2021-10-06 17:16:32	←	vjoki has quit (Quit: ...)
2021-10-06 17:16:42	→	acidjnk_new has joined #haskell
2021-10-06 17:16:46	→	vjoki has joined #haskell
2021-10-06 17:17:12	→	DNH has joined #haskell
2021-10-06 17:19:44	→	mmhat has joined #haskell
2021-10-06 17:24:24	→	machinedgod has joined #haskell
2021-10-06 17:29:25	←	max22- has quit (Ping timeout: 246 seconds)
2021-10-06 17:29:50	←	hyiltiz has quit (Ping timeout: 265 seconds)
2021-10-06 17:31:50	→	jespada has joined #haskell
2021-10-06 17:33:54	←	dschrempf has quit (Ping timeout: 245 seconds)
2021-10-06 17:42:29	→	[itchyjunk] has joined #haskell
2021-10-06 17:42:58	←	[itchyjunk] has quit (Remote host closed the connection)
2021-10-06 17:43:21	→	[itchyjunk] has joined #haskell
2021-10-06 17:44:41	→	hyiltiz has joined #haskell
2021-10-06 17:49:36	→	fendor has joined #haskell
2021-10-06 17:57:10	→	Guest87 has joined #haskell
2021-10-06 17:57:17	Guest87	halve :: [a] -> ([a],[a])
2021-10-06 17:57:17	Guest87	halve [] = ([],[])
2021-10-06 17:57:18	Guest87	halve [x] = ([x],[])
2021-10-06 17:57:18	Guest87	halve xs = ([x | x <- take (length xs `div` 2) xs], [y | y <- ys])
2021-10-06 17:57:19	Guest87	            where ys = if (length xs `div` 2 /= 0)
2021-10-06 17:57:19	Guest87	                        then drop (length xs `div` 2) + 1
2021-10-06 17:57:20	Guest87	                        else drop (length xs `div` 2)
2021-10-06 17:57:32	Guest87	can someone tell me what is wrong with this code?
2021-10-06 17:58:43	→	Guest8747 has joined #haskell
2021-10-06 17:59:11	merijn	Aside from the list comprehensions being redundant and the repeat length calls being super slow?
2021-10-06 17:59:32	merijn	"[ y | y <- ys]" <- why not just write "ys"?
2021-10-06 17:59:58	Guest8747	right
2021-10-06 18:00:07	merijn	Same for "[x | x <- take (length xs `div` 2) xs]", that's just "take (length xs `div` 2) xs" with extra steps...
2021-10-06 18:01:01	hpc	you might also consider using mod, instead of that if
2021-10-06 18:01:04	merijn	Oh
2021-10-06 18:01:04	hpc	> 5 `mod` 2
2021-10-06 18:01:06	lambdabot	 1
2021-10-06 18:01:17	merijn	I have questions about your if condition
2021-10-06 18:01:29	merijn	Ah, no, I guess that if it typechecks it's fine
2021-10-06 18:01:47	merijn	But also, it's useless because that branch is only taken if xs has at least 2 elements, so it's always true
2021-10-06 18:02:31	←	Guest87 has quit (Ping timeout: 256 seconds)
2021-10-06 18:02:44	Guest8747	halve :: [a] -> ([a],[a])
2021-10-06 18:02:44	Guest8747	halve [] = ([],[])
2021-10-06 18:02:45	Guest8747	halve [x] = ([x],[])
2021-10-06 18:02:45	Guest8747	halve xs = (take (length xs `div` 2) xs, ys)
2021-10-06 18:02:46	Guest8747	            where ys = if (length xs `div` 2 /= 0)
2021-10-06 18:02:46	Guest8747	                        then drop (length xs `div` 2) + 1
2021-10-06 18:02:47	Guest8747	                        else drop (length xs `div` 2)
2021-10-06 18:03:03	Guest8747	it still doesnt compile
2021-10-06 18:03:27	merijn	because: 1) the "then" case isn't correctly parenthesised
2021-10-06 18:03:36	merijn	2) you forgot to give a list argument to drop
2021-10-06 18:03:53	merijn	"drop ((length xs `div` 2) + 1)"
2021-10-06 18:04:13	merijn	Your current version parses as "(drop (length xs `div` 2)) + 1"
2021-10-06 18:05:20	→	geranim0 has joined #haskell
2021-10-06 18:05:22	maerwald	@hoogle (k -> a -> m Bool) -> Map k a -> Map k a
2021-10-06 18:05:23	lambdabot	No results found
2021-10-06 18:05:25	maerwald	srsly...
2021-10-06 18:05:28	maerwald	oops
2021-10-06 18:05:32	Guest8747	can u explain 2)?
2021-10-06 18:05:40	maerwald	@hoogle (k -> a -> m Bool) -> Map k a -> m (Map k a)
2021-10-06 18:05:41	lambdabot	No results found
2021-10-06 18:05:43	maerwald	...
2021-10-06 18:05:58	Guest8747	are u saying it should be where ys xs...
2021-10-06 18:05:59	Guest8747	?
2021-10-06 18:06:12	merijn	Guest8747: "drop f list"
2021-10-06 18:06:25	merijn	Guest8747: In your code "ys" is a function
2021-10-06 18:06:29	merijn	i.e. partially applied drop
2021-10-06 18:08:56	Guest8747	halve :: [a] -> ([a],[a])
2021-10-06 18:08:56	Guest8747	halve [] = ([],[])
2021-10-06 18:08:57	Guest8747	halve [x] = ([x],[])
2021-10-06 18:08:57	Guest8747	halve xs = (take (length xs `div` 2) xs, ys)
2021-10-06 18:08:58	Guest8747	            where ys xs = if (length xs `div` 2 /= 0)
2021-10-06 18:08:58	Guest8747	                        then drop ((length xs `div` 2) + 1)
2021-10-06 18:08:59	Guest8747	                        else drop (length xs `div` 2)
2021-10-06 18:09:03	Guest8747	so what do i change here?
2021-10-06 18:09:15	Guest8747	merijn
2021-10-06 18:09:36	sshine	> let halve xs = splitAt (length xs `quot` 2) xs in halve [1,2,3] -- it rounds the wrong way, but other than that...?
2021-10-06 18:09:37	lambdabot	 ([1],[2,3])
2021-10-06 18:10:13	→	dschrempf has joined #haskell
2021-10-06 18:10:26	merijn	Change it to "drop (length xs `div` 2) xs"
2021-10-06 18:10:33	sshine	https://hackage.haskell.org/package/base-4.15.0.0/docs/Prelude.html#v:splitAt
2021-10-06 18:10:58	merijn	splitAt and length is still inefficient!
2021-10-06 18:11:20	merijn	Clearly the way to go: https://gist.github.com/merijn/c163cc106fd245d1cf2e :p
2021-10-06 18:11:35	Guest8747	merijn but if the list has an odd number of elements?
2021-10-06 18:12:02	merijn	Guest8747: You need to add "xs" to both calls to drop
2021-10-06 18:12:14	merijn	Guest8747: Also, your currentl logic doesn't check for odd number of elements
2021-10-06 18:12:21	merijn	Guest8747: It checks for "less than 2" elements
2021-10-06 18:12:31	merijn	> 3 `div` 2
2021-10-06 18:12:32	lambdabot	 1
2021-10-06 18:18:36	ℹ	irc: disconnected from server
2021-10-06 18:18:57	→	oxide has joined #haskell
2021-10-06 18:18:57	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-10-06 18:18:57	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-10-06 18:18:57	ℹ	Channel #haskell: 731 nicks (1 op, 0 voices, 730 normals)
2021-10-06 18:18:58	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-10-06 18:19:06	←	vysn has quit (Ping timeout: 245 seconds)
2021-10-06 18:19:19	←	lavaman has quit (Ping timeout: 245 seconds)
2021-10-06 18:19:44	←	lbseale has quit (Ping timeout: 245 seconds)
2021-10-06 18:20:38	→	hexfive has joined #haskell
2021-10-06 18:21:25	←	hexfive has quit (Client Quit)
2021-10-06 18:21:26	→	sleblanc has joined #haskell
2021-10-06 18:24:26	Guest8747	> let halve xs = (take (length xs `div` 2) xs, ys)
2021-10-06 18:24:26	Guest8747	            where ys = if (length xs `mod` 2 /= 0)
2021-10-06 18:24:27	Guest8747	                        then drop ((length xs `div` 2) + 1) xs
2021-10-06 18:24:27	←	pavonia has quit (Quit: Bye!)
2021-10-06 18:24:27	lambdabot	 <no location info>: error:
2021-10-06 18:24:27	lambdabot	     not an expression: ‘let halve xs = (take (length xs `div` 2) xs, ys)’
2021-10-06 18:24:27	Guest8747	                        else drop (length xs `div` 2) xs
2021-10-06 18:24:55	merijn	You can't do multiline code in lambdabot
2021-10-06 18:25:12	Guest8747	halve xs = (take (length xs `div` 2) xs, ys)
2021-10-06 18:25:13	Guest8747	 where ys = if (length xs `mod` 2 /= 0) then drop ((length xs `div` 2) + 1) xs else drop (length xs `div` 2) xs
2021-10-06 18:25:24	Guest8747	> halve xs = (take (length xs `div` 2) xs, ys)
2021-10-06 18:25:25	Guest8747	 where ys = if (length xs `mod` 2 /= 0) then drop ((length xs `div` 2) + 1) xs else drop (length xs `div` 2) xs
2021-10-06 18:25:26	lambdabot	 <hint>:1:10: error: parse error on input ‘=’
2021-10-06 18:25:52	→	Psybur has joined #haskell
2021-10-06 18:26:09	Guest8747	> let halve xs = (take (length xs `div` 2) xs, ys)
2021-10-06 18:26:09	Guest8747	 where ys = if (length xs `mod` 2 /= 0) then drop ((length xs `div` 2) + 1) xs else drop (length xs `div` 2) xs
2021-10-06 18:26:10	lambdabot	 <no location info>: error:
2021-10-06 18:26:10	lambdabot	     not an expression: ‘let halve xs = (take (length xs `div` 2) xs, ys)’
2021-10-06 18:26:17	Guest8747	nvm
2021-10-06 18:27:24	Guest8747	i want [1,2,3,4] to turn in ([1,2],[3,4]) for exemple
2021-10-06 18:27:33	Guest8747	halve :: [a] -> ([a],[a])
2021-10-06 18:27:34	Guest8747	halve [] = ([],[])
2021-10-06 18:27:34	Guest8747	halve [x] = ([x],[])
2021-10-06 18:27:35	Guest8747	halve xs = (take (length xs `div` 2) xs, ys)
2021-10-06 18:27:35	Guest8747	            where ys = if (length xs `mod` 2 /= 0)
2021-10-06 18:27:36	Guest8747	                        then drop ((length xs `div` 2) + 1) xs
2021-10-06 18:27:36	Guest8747	                        else drop (length xs `div` 2) xs
2021-10-06 18:27:41	→	ub has joined #haskell
2021-10-06 18:28:26	Guest8747	like this it turns in ([1,2],[4])
2021-10-06 18:28:38	Guest8747	cant tell why
2021-10-06 18:29:59	Guest8747	its working nvm
2021-10-06 18:30:21	robosexual	try this instead of reinventing splitting algorithm: https://hackage.haskell.org/package/base-4.15.0.0/docs/src/GHC-List.html#splitAt
2021-10-06 18:31:09	merijn	Nothing wrong with reinventing algorithms
2021-10-06 18:31:14	←	Alex_test has quit (Quit: ;-)
2021-10-06 18:31:24	merijn	The problem is that, as I said before, your code *always* picks the true branch
2021-10-06 18:31:27	←	AlexZenon has quit (Quit: ;-)
2021-10-06 18:31:34	merijn	And thus drops 3 items, not 2
2021-10-06 18:31:35	←	AlexNoo has quit (Quit: Leaving)
2021-10-06 18:32:34	tdammers	(technically this isn't even reinventing an algorithm, just reimplementing it)
2021-10-06 18:32:53	merijn	tdammers: Nothing wrong with that either :p
2021-10-06 18:33:03	tdammers	indeed
2021-10-06 18:33:11	tdammers	just need to be aware of the pros and cons
2021-10-06 18:33:14	Guest8747	halve [1,2,3,4,5] is returning ([1,2],[4,5]) for some reason :(
2021-10-06 18:33:22	merijn	Guest8747: Same as my previous answer
2021-10-06 18:33:29	→	shapr has joined #haskell
2021-10-06 18:33:38	←	ub has quit (Quit: ub)
2021-10-06 18:33:40	Guest8747	instead of ([1,2],[3,4,5])
2021-10-06 18:34:00	→	ub has joined #haskell
2021-10-06 18:34:06	Hecate	:9
2021-10-06 18:34:45	Guest8747	merijn can u tell why?
2021-10-06 18:34:54	Guest8747	i thought adding +1 would solve it
2021-10-06 18:35:10	merijn	What is the if/else supposed to do?
2021-10-06 18:36:19	Guest8747	if the length is an odd number it would drop length/2 + 1
2021-10-06 18:36:28	merijn	Well, it doesn't do that
2021-10-06 18:36:32	Guest8747	if its even just the other half
2021-10-06 18:36:40	merijn	Because, as stated before, you're not checking if the length is odd
2021-10-06 18:36:52	merijn	You're checking if the length is less than 2
2021-10-06 18:37:34	Guest8747	 if (length xs `mod` 2 /= 0)
2021-10-06 18:38:10	Guest8747	how isnt this checking the length being odd
2021-10-06 18:38:11	Guest8747	?
2021-10-06 18:38:52	merijn	oh, wait, it's mod now, in one of the original version it was div >.>
2021-10-06 18:39:02	merijn	Anyway, you drop 1 more
2021-10-06 18:39:10	→	yinghua has joined #haskell
2021-10-06 18:39:10	merijn	But you don't take 1 more when that happens
2021-10-06 18:39:26	merijn	So if it's true, you drop 1 extra, but don't take 1 more
2021-10-06 18:39:36	←	rkrishnan has quit (Ping timeout: 252 seconds)
2021-10-06 18:41:03	←	gehmehgeh has quit (Remote host closed the connection)
2021-10-06 18:41:04	←	jpds has quit (Remote host closed the connection)
2021-10-06 18:41:30	→	jpds has joined #haskell
2021-10-06 18:41:52	→	gehmehgeh has joined #haskell
2021-10-06 18:42:09	Guest8747	ohhh i was looking at drop the wrong way!
2021-10-06 18:42:13	Guest8747	ty
2021-10-06 18:45:16	→	zebrag has joined #haskell
2021-10-06 18:50:37	→	AlexZenon has joined #haskell
2021-10-06 18:50:46	←	Guest8747 has quit (Quit: Client closed)
2021-10-06 18:50:54	→	AlexNoo has joined #haskell
2021-10-06 18:51:31	→	slowButPresent has joined #haskell
2021-10-06 18:52:08	→	Alex_test has joined #haskell
2021-10-06 18:52:51	ℹ	lbseale_ is now known as lbseale
2021-10-06 18:53:16	←	CiaoSen has quit (Ping timeout: 245 seconds)
2021-10-06 18:55:02	→	sneedsfeed has joined #haskell
2021-10-06 18:56:27	→	fendor_ has joined #haskell
2021-10-06 18:57:24	sneedsfeed	can this be written as a pure composition? sndMapAccumL a b c = snd $ mapAccumL a b c 
2021-10-06 18:58:01	→	ec has joined #haskell
2021-10-06 18:58:04	Franciman	sneedsfeed: you mean like
2021-10-06 18:58:10	Franciman	sndMapAccumL a b = snd . mapAccumL a b
2021-10-06 18:58:13	Franciman	?
2021-10-06 18:58:18	Franciman	sorry I can't do better :<
2021-10-06 18:58:39	sneedsfeed	Well I couldnt even figure that out!
2021-10-06 18:59:01	Franciman	when you have multivalued functions
2021-10-06 18:59:08	sneedsfeed	but yea it does beg the question still now how better.
2021-10-06 18:59:09	Franciman	:t (.)
2021-10-06 18:59:10	lambdabot	(b -> c) -> (a -> b) -> a -> c
2021-10-06 18:59:15	←	fendor has quit (Ping timeout: 265 seconds)
2021-10-06 18:59:23	Franciman	if you have multiparam functions
2021-10-06 18:59:26	Franciman	in this case
2021-10-06 18:59:28	Franciman	:t mapAccumL
2021-10-06 18:59:29	lambdabot	Traversable t => (a -> b -> (a, c)) -> a -> t b -> (a, t c)
2021-10-06 18:59:38	Franciman	the b in there becomes
2021-10-06 18:59:39	byorgey	anything can always be written in "point-free" style, with no parameters, though it's often not worth it.
2021-10-06 18:59:50	Franciman	a -> t b -> (a, t c)
2021-10-06 19:00:10	Franciman	wait so you can do
2021-10-06 19:00:16	Franciman	no nothing
2021-10-06 19:00:44	byorgey	:t ((.).(.).(.)) snd mapAccumL
2021-10-06 19:00:45	lambdabot	Traversable t => (a -> b -> (a, c)) -> a -> t b -> t c
2021-10-06 19:01:00	Franciman	byorgey: you blowed my mind
2021-10-06 19:02:05	sneedsfeed	byorgey yea but... and i'm a noob I know... but i've always been operating under the assumption that these "not worth it" cases are not situations where the parameter applications come at the end of the function in the same order. its weird to me to have sndMapAccumL a b = snd . mapAccumL a b... why cant I just take off the a and the b???
2021-10-06 19:03:06	sneedsfeed	and yea i know just type :t and the answer is always right there in the type signature... but i'm not smart enough to just figure everything out like that...
2021-10-06 19:03:22	merijn	sneedsfeed: Because "snd . mapAccumL a b" is "snd . (mapAccumL a b)"
2021-10-06 19:03:24	byorgey	sneedsfeed: yeah, if they are not in the same order then that is even worse, then you need some applications of 'flip' in there
2021-10-06 19:03:32	Franciman	sneedsfeed: i think you can get a tast of what's happening by looking at this:
2021-10-06 19:03:34	Franciman	:t (.)
2021-10-06 19:03:35	lambdabot	(b -> c) -> (a -> b) -> a -> c
2021-10-06 19:03:38	Franciman	:t (.).(.)
2021-10-06 19:03:39	lambdabot	(b -> c) -> (a1 -> a2 -> b) -> a1 -> a2 -> c
2021-10-06 19:03:42	merijn	sneedsfeed: If you remove a b you make it "(snd . mapAccumL) a b"
2021-10-06 19:03:46	byorgey	sneedsfeed: it's a good question, but yeah,  snd . mapAccumL a b   is not the same as   (snd . mapAccumL) a b
2021-10-06 19:04:35	byorgey	(f . g x) y = f (g x y),  but   ((f . g) x) y = (f . g) x y = f (g x) y
2021-10-06 19:05:24	byorgey	sneedsfeed: you are smart enough, you just don't have enough experience.  Big difference. =)
2021-10-06 19:05:37	sneedsfeed	"snd . mapAccumL a b   is not the same as   (snd . mapAccumL) a b o" okay that makes sense
2021-10-06 19:05:52	sneedsfeed	byorgey would that I were 23 coming into this and not 33 :D
2021-10-06 19:06:42	byorgey	hah, well, we work with what we've got
2021-10-06 19:07:39	merijn	sneedsfeed: The key insight is that (.) and ($) aren't magical "braces-away" notation, but simply function that take two arguments and what those two arguments are, matters.
2021-10-06 19:07:51	byorgey	sneedsfeed: you still probably have at least another 40 years of productive Haskell use ahead of you =D
2021-10-06 19:08:01	Franciman	will my language ever be better than haskell? Surely no, because I am not as smart as people here. Will I have lots of fun doing it? HELL YEAH, sneedsfeed 
2021-10-06 19:08:04	Franciman	so don't worry
2021-10-06 19:08:07	Franciman	just have fun
2021-10-06 19:10:04	shapr	I joined a small Haskell chat group, we meet weekly. This week we're going to wander through this new game swarm
2021-10-06 19:11:31	←	cfricke has quit (Quit: WeeChat 3.3)
2021-10-06 19:12:07	shapr	byorgey: glad you published swarm, the source code is fun to read!
2021-10-06 19:12:10	byorgey	=D
2021-10-06 19:12:52	shapr	I haven't played it yet, but I joined a text user interface group that's planning to host a whole bunch of TUI games, it might end up on there.
2021-10-06 19:13:02	shapr	specifically https://bluebird.sh/
2021-10-06 19:14:25	←	hrdl has quit (Remote host closed the connection)
2021-10-06 19:14:26	←	jakalx has left #haskell (Error from remote client)
2021-10-06 19:14:26	byorgey	shapr: cool!
2021-10-06 19:15:48	←	neurocyte0132889 has quit (Quit: The Lounge - https://thelounge.chat)
2021-10-06 19:16:07	→	Lord_of_Life has joined #haskell
2021-10-06 19:16:07	byorgey	shapr: I mean maybe wait a bit until it is more feature-complete, but it'll get there
2021-10-06 19:16:51	→	jakalx has joined #haskell
2021-10-06 19:22:50	→	hrdl has joined #haskell
2021-10-06 19:25:58	←	acidjnk_new has quit (Ping timeout: 265 seconds)
2021-10-06 19:27:56	→	geekosaur has joined #haskell
2021-10-06 19:31:28	←	sprout has quit (Ping timeout: 268 seconds)
2021-10-06 19:35:05	→	max22- has joined #haskell
2021-10-06 19:36:19	←	xsperry has quit (Remote host closed the connection)
2021-10-06 19:36:48	→	xsperry has joined #haskell
2021-10-06 19:36:49	←	xsperry has quit (Excess Flood)
2021-10-06 19:38:25	ℹ	fendor_ is now known as fendor
2021-10-06 19:40:20	→	shriekingnoise has joined #haskell
2021-10-06 19:40:44	→	concrete-houses has joined #haskell
2021-10-06 19:40:55	concrete-houses	anyone here try happstack.com?
2021-10-06 19:41:08	→	azimut_ has joined #haskell
2021-10-06 19:41:51	→	Sgeo has joined #haskell
2021-10-06 19:42:38	→	cfricke has joined #haskell
2021-10-06 19:42:56	←	azimut has quit (Ping timeout: 276 seconds)
2021-10-06 19:44:00	→	waleee has joined #haskell
2021-10-06 19:45:48	→	sprout has joined #haskell
2021-10-06 19:47:35	←	sleblanc has quit (Ping timeout: 265 seconds)
2021-10-06 19:50:21	←	sprout has quit (Ping timeout: 245 seconds)
2021-10-06 19:56:45	←	Lord_of_Life has quit (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
2021-10-06 19:57:44	←	hyiltiz has quit (Ping timeout: 265 seconds)
2021-10-06 20:01:28	→	sprout has joined #haskell
2021-10-06 20:03:04	←	bitdex has quit (Quit: = "")
2021-10-06 20:15:08	→	Lord_of_Life has joined #haskell
2021-10-06 20:15:08	←	Lord_of_Life has quit (Changing host)
2021-10-06 20:15:08	→	Lord_of_Life has joined #haskell
2021-10-06 20:15:36	←	dschrempf has quit (Quit: WeeChat 3.3)
2021-10-06 20:17:40	→	hyiltiz has joined #haskell
2021-10-06 20:18:17	→	betelgeuse has joined #haskell
2021-10-06 20:19:32	kuribas	Franciman: it's possible to make a language better than haskell.  It's not easy to make people use it :)
2021-10-06 20:20:14	dminuoso	Is it easy to make a *performant* better version of Haskell? That's going to be extremely tricky now.
2021-10-06 20:20:27	kuribas	dminuoso: maybe using GRIN + LLVM?
2021-10-06 20:20:36	kuribas	though GRIN is still lacking optimizations.
2021-10-06 20:20:37	dminuoso	Just tossing GRIN or LLVM at it will not make it magically go fast.
2021-10-06 20:20:58	kuribas	dminuoso: it helps :)
2021-10-06 20:21:13	→	hnOsmium0001 has joined #haskell
2021-10-06 20:21:22	Franciman	kuribas: not for me :P
2021-10-06 20:21:35	kuribas	Franciman: what are you doing then?
2021-10-06 20:21:43	Franciman	I just enjoy writing things
2021-10-06 20:21:43	kuribas	what kind of language is it?
2021-10-06 20:21:51	Franciman	now I copied an idea from a langjam winner
2021-10-06 20:21:56	kuribas	Franciman: in that case you don't care about going fast.
2021-10-06 20:21:57	Franciman	Debug.trace in comments
2021-10-06 20:21:58	Franciman	i love the idea
2021-10-06 20:22:03	dminuoso	kuribas: And LLVM is very incompatible with the type of code that GHC produces, for instance.
2021-10-06 20:22:09	dminuoso	Which is why the LLVM is regularly slower
2021-10-06 20:22:12	dminuoso	Which is why the LLVM backend is regularly slower
2021-10-06 20:22:14	Franciman	kuribas: it's a strict functional language with System F types
2021-10-06 20:22:16	kuribas	dminuoso: yeah, that's the usecase of GRIN.
2021-10-06 20:22:43	Franciman	I wanted to add: a more ML like module system, that would help in whishful thinking, i.e. you declar eyour module as wishful
2021-10-06 20:22:53	kuribas	dminuoso: it's true that GRIN is lacking useful optimizations.
2021-10-06 20:22:55	Franciman	so you don't have to provide implementations and the compiler can only go as far as typechecking
2021-10-06 20:23:01	Franciman	then I want to add codata
2021-10-06 20:23:07	Franciman	as an explicit construction
2021-10-06 20:23:10	←	geekosaur has quit (Killed (NickServ (GHOST command used by allbery_b)))
2021-10-06 20:23:10	→	allbery_b has joined #haskell
2021-10-06 20:23:12	Franciman	later linear logic, when I learn about it
2021-10-06 20:23:14	ℹ	allbery_b is now known as geekosaur
2021-10-06 20:23:29	kuribas	wishful?
2021-10-06 20:23:42	Franciman	wishful module Vector where
2021-10-06 20:23:51	Franciman	and you only define its interface, without implementing it
2021-10-06 20:23:56	kuribas	you mean putting holes for functions?
2021-10-06 20:24:00	Franciman	in haskell I usually do it by writing functionName = undefined
2021-10-06 20:24:01	dminuoso	kuribas: My experience with GRIN is fairly limited, so I cant speak much about it.
2021-10-06 20:24:02	Franciman	yep
2021-10-06 20:24:38	kuribas	dminuoso: it doesn't do extensive inlining or specialization (yet).  But it removes higher order functions and lazyness.
2021-10-06 20:24:50	←	Lord_of_Life has quit (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
2021-10-06 20:24:51	kuribas	dminuoso: so it can be better compiled by a lower level backend, like LLVM.
2021-10-06 20:25:25	dminuoso	kuribas: Is it comparably fast to the GHC core>simpl>cmm pipeline?
2021-10-06 20:25:39	kuribas	dminuoso: I have no idea...
2021-10-06 20:25:42	dminuoso	(not in terms of produced code, but its own execution time)
2021-10-06 20:26:06	kuribas	fast as in compilation times, or as in runtime performance?
2021-10-06 20:26:13	Franciman	can you use grinn for an interpreter too? or does it only do compilation?
2021-10-06 20:26:16	dminuoso	Did someone try to bolt GRIN onto GHC already?
2021-10-06 20:26:27	Franciman	dminuoso: there is JHC using GRIN iiuc
2021-10-06 20:26:37	dminuoso	https://github.com/grin-compiler/ghc-grin
2021-10-06 20:26:39	dminuoso	Interesting
2021-10-06 20:26:59	merijn	dminuoso: There's a guy working on it
2021-10-06 20:27:08	merijn	Franciman: Use typed holes!
2021-10-06 20:27:15	merijn	Franciman: Undefined is strictly inferior
2021-10-06 20:27:41	dminuoso	GRIN seems like a really cool idea then. :)
2021-10-06 20:27:44	merijn	"functionName = _"
2021-10-06 20:27:50	Franciman	merijn: oh cool
2021-10-06 20:28:04	Franciman	do I have to put some extension on?
2021-10-06 20:28:07	merijn	No
2021-10-06 20:28:14	Franciman	n-nice, thank you!
2021-10-06 20:28:16	Franciman	TIL
2021-10-06 20:28:24	dminuoso	GRIN kind of reminds me of the Truffle Language Implementation framework.
2021-10-06 20:28:35	merijn	Franciman: Typed holes produce an error saying "found typed hole of type: Type that should go there"
2021-10-06 20:29:01	Franciman	this may be better than my wishful moduels
2021-10-06 20:29:04	Franciman	nice!
2021-10-06 20:29:04	merijn	Franciman: There's -fdefer-typed-holes" which turns the error into a warning, which means you can run the code (like you could with undefined)
2021-10-06 20:29:25	Franciman	I see
2021-10-06 20:29:26	Franciman	useful
2021-10-06 20:29:34	merijn	But unlike "undefined" you can delete -fdefer-typed-holes from your GHC flags and get a compile error if you forgot any :p
2021-10-06 20:29:47	Franciman	yaaap! it's really nice, thanks merijn 
2021-10-06 20:29:52	merijn	With undefined you gotta hope you remember to implement all them :p
2021-10-06 20:30:00	tomsmeding	merijn: HLS feedback seems to take a little longer to appear in my editor whenever there's a typed hole in the file. It feels like GHC proceeds until a later stage of compilation than normal or something, due to which it takes longer, but this is just a feeling, not based on anything. Do you have any idea why this happens?
2021-10-06 20:30:01	lortabac	Franciman: similarly, there is also an extension to enable partial type signatures, when you want to put holes in types
2021-10-06 20:30:30	merijn	tomsmeding: longer than compared to what?
2021-10-06 20:30:35	lortabac	PartialTypeSignatures
2021-10-06 20:30:50	tomsmeding	compared to if there are no typed holes, but only other type errors
2021-10-06 20:30:57	Franciman	ty lortabac 
2021-10-06 20:31:10	tomsmeding	it's not a problem or anything, just seems weird to me
2021-10-06 20:31:51	tomsmeding	hm can't really reproduce it now, but it was certainly there earlier (on a slower machine, maybe that's the reason)
2021-10-06 20:32:07	lortabac	tomsmeding: I guess it takes time because it looks for possible matches
2021-10-06 20:32:15	tomsmeding	oooooooo yes
2021-10-06 20:32:19	tomsmeding	that makes total sense
2021-10-06 20:32:20	merijn	tomsmeding: I'm not up to date on the current implementation :)
2021-10-06 20:32:28	tomsmeding	lortabac++
2021-10-06 20:32:28	merijn	oh, you can disable the possible matches
2021-10-06 20:33:12	merijn	I'm just shilling typed holes, because I don't want my effort to get -fdefer-typed-holes to go to waste :p
2021-10-06 20:33:16	←	albet70 has quit (Read error: Connection reset by peer)
2021-10-06 20:33:29	tomsmeding	I know :p
2021-10-06 20:33:50	tomsmeding	but that makes you the typed holes man for me in this channel
2021-10-06 20:34:23	→	albet70 has joined #haskell
2021-10-06 20:34:43	shapr	tritlo wrote some nice papers on typed holes
2021-10-06 20:35:01	shapr	at least, I think that's the right person
2021-10-06 20:35:17	←	albet70 has quit (Read error: Connection reset by peer)
2021-10-06 20:36:23	→	albet70 has joined #haskell
2021-10-06 20:37:05	→	cigsender has joined #haskell
2021-10-06 20:44:16	→	_ht has joined #haskell
2021-10-06 20:48:04	←	alx741 has quit (Ping timeout: 245 seconds)
2021-10-06 20:48:58	←	kenran has quit (Ping timeout: 265 seconds)
2021-10-06 20:51:30	→	zmt00 has joined #haskell
2021-10-06 20:51:37	→	vysn has joined #haskell
2021-10-06 20:58:05	→	doyougnu has joined #haskell
2021-10-06 20:59:29	zzz	what's the default fixity for infix data constructors?
2021-10-06 21:00:04	←	lbseale has quit (Ping timeout: 265 seconds)
2021-10-06 21:00:07	merijn	infixl 9
2021-10-06 21:00:17	merijn	Or rather, that's the default fixity, period :p
2021-10-06 21:00:21	→	myShoggoth has joined #haskell
2021-10-06 21:00:23	cigsender	pretty sure everything defaults to infixl 9, like merijn said
2021-10-06 21:00:38	→	mc47 has joined #haskell
2021-10-06 21:00:47	→	alx741 has joined #haskell
2021-10-06 21:00:57	zzz	ok just checking
2021-10-06 21:01:04	←	alzgh has quit (Remote host closed the connection)
2021-10-06 21:01:14	→	alzgh has joined #haskell
2021-10-06 21:02:36	→	xsperry has joined #haskell
2021-10-06 21:02:53	←	jonathanx has quit (Remote host closed the connection)
2021-10-06 21:09:14	←	lortabac has quit (Quit: WeeChat 2.8)
2021-10-06 21:09:56	→	Guest3130 has joined #haskell
2021-10-06 21:10:20	tomsmeding	in an error message stating that a particular constraint 'C a' cannot be satisfied, if applicable, ghc says that one could fix the error by adding that constraint in the GADT that you're matching, or somewhere else. But this type variable 'a' is derived from some random type signature somewhere, which is sometimes a completely different one than it tells you to put the constraint on
2021-10-06 21:10:29	←	Guest3130 has quit (Client Quit)
2021-10-06 21:10:53	tomsmeding	so you have like 'data T b where Constr :: Bool -> T Int', and it tells you to add 'C a' to the context of Constr
2021-10-06 21:10:58	tomsmeding	like, that ain't going to work, ghc :p
2021-10-06 21:11:10	geekosaur	ghc's suggestions are usually lousy in my experience
2021-10-06 21:11:19	tomsmeding	in general ghc seems to confuse type variable names in error messages all over the place
2021-10-06 21:11:45	geekosaur	like it will tell you to enable some extension iunstead of fixing the realproblem
2021-10-06 21:11:48	tomsmeding	in fact the suggestion is completely valid in this case, and even what I wanted to do, but for the incorrect variable name :p
2021-10-06 21:12:17	←	azeem has quit (Read error: Connection reset by peer)
2021-10-06 21:12:26	←	merijn has quit (Ping timeout: 245 seconds)
2021-10-06 21:12:37	←	dajoer has quit (Quit: leaving)
2021-10-06 21:12:40	→	azeem has joined #haskell
2021-10-06 21:14:02	→	econo has joined #haskell
2021-10-06 21:14:15	zzz	it ain't easy being ghc
2021-10-06 21:14:19	monochrom	I too confuse type variables between parametric polymorphism, GADTs, and type families. :)
2021-10-06 21:15:27	tomsmeding	it definitely ain't easy being ghc
2021-10-06 21:17:17	←	eggplantade has quit (Remote host closed the connection)
2021-10-06 21:19:03	←	cfricke has quit (Quit: WeeChat 3.3)
2021-10-06 21:19:06	←	wonko has quit (Ping timeout: 245 seconds)
2021-10-06 21:19:24	←	myShoggoth has quit (Ping timeout: 265 seconds)
2021-10-06 21:19:53	←	azeem has quit (Ping timeout: 265 seconds)
2021-10-06 21:20:04	→	azeem has joined #haskell
2021-10-06 21:23:42	←	azeem has quit (Read error: Connection reset by peer)
2021-10-06 21:24:26	→	azeem has joined #haskell
2021-10-06 21:24:27	←	enoq has quit (Quit: enoq)
2021-10-06 21:26:08	→	eggplantade has joined #haskell
2021-10-06 21:26:44	ggVGc	I think we might be due a GHC fork with an extension purge
2021-10-06 21:26:55	ggVGc	and get rid of all the ones that turned out not super great ideas
2021-10-06 21:27:11	→	Null_A has joined #haskell
2021-10-06 21:28:19	→	tzh has joined #haskell
2021-10-06 21:28:47	ProofTechnique	Also with Alexis King's delimited continuations work so I can finally use `eff` 🥺
2021-10-06 21:29:52	monochrom	Which extensions actually turned out to be not super great ideas?
2021-10-06 21:30:01	→	myShoggoth has joined #haskell
2021-10-06 21:30:13	c_wraith	PolymorphicComponents. :P
2021-10-06 21:30:35	monochrom	Yeah that's superseded by RankNTypes, no?
2021-10-06 21:31:02	c_wraith	yeah.  They're just different names for the same thing now
2021-10-06 21:31:14	monochrom	I am going for "all of them are already obsoleted or replaced".
2021-10-06 21:32:32	←	[itchyjunk] has quit (Read error: Connection reset by peer)
2021-10-06 21:32:45	ggVGc	I don't have concrete suggestions right now... But, I'm sure I've read quite a lot about some extensions not working well with others, and we have some tackling quite similar issues from different angles, right?
2021-10-06 21:32:56	monochrom	i.e., a cry for "fork GHC to purge them" is basically vacuous.
2021-10-06 21:33:15	ggVGc	I wasn't being entirely serious :)
2021-10-06 21:36:49	←	xiongxin has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-10-06 21:41:19	→	Tuplanolla has joined #haskell
2021-10-06 21:41:24	→	__monty__ has joined #haskell
2021-10-06 21:43:17	→	vicfred has joined #haskell
2021-10-06 21:46:44	←	ub has quit (Quit: ub)
2021-10-06 21:47:01	dolio	PolymorphicComponents came after RankNTypes, I think, as a way to have certain data types without turning on the whole extended type system.
2021-10-06 21:47:02	→	ub has joined #haskell
2021-10-06 21:47:05	←	ec has quit (Ping timeout: 276 seconds)
2021-10-06 21:47:58	geekosaur	iirc it came after Rank2Types; RankNTypes came later and subsumed Rank2Types
2021-10-06 21:48:21	→	ec has joined #haskell
2021-10-06 21:48:27	geekosaur	and PolymorphicComponents
2021-10-06 21:48:40	c_wraith	but these days Rank2Types and PolymorphicComponents both just enable RankNTypes
2021-10-06 21:48:51	geekosaur	right
2021-10-06 21:49:04	dolio	Ah.
2021-10-06 21:49:21	→	bsima has joined #haskell
2021-10-06 21:49:22	←	dibblego has quit (Ping timeout: 250 seconds)
2021-10-06 21:50:02	→	neurocyte0132889 has joined #haskell
2021-10-06 21:50:02	←	neurocyte0132889 has quit (Changing host)
2021-10-06 21:50:02	→	neurocyte0132889 has joined #haskell
2021-10-06 21:50:03	dolio	It seems kind of pointless to just remove another name for the same extension. It will just break programs.
2021-10-06 21:52:52	←	chele has quit (Remote host closed the connection)
2021-10-06 21:53:30	→	dibblego has joined #haskell
2021-10-06 21:53:31	←	dibblego has quit (Changing host)
2021-10-06 21:53:31	→	dibblego has joined #haskell
2021-10-06 21:55:09	←	hyiltiz has quit (Ping timeout: 245 seconds)
2021-10-06 21:56:23	→	hyiltiz has joined #haskell
2021-10-06 21:56:50	←	hendursa1 has quit (Ping timeout: 276 seconds)
2021-10-06 22:05:19	→	hendursaga has joined #haskell
2021-10-06 22:06:58	→	Hanicef has joined #haskell
2021-10-06 22:08:58	→	justsomeguy has joined #haskell
2021-10-06 22:11:24	←	cheater has quit (Ping timeout: 245 seconds)
2021-10-06 22:13:31	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-10-06 22:18:00	→	werneta has joined #haskell
2021-10-06 22:18:17	←	ec has quit (Ping timeout: 276 seconds)
2021-10-06 22:21:55	←	robosexual has quit (Quit: Konversation terminated!)
2021-10-06 22:27:26	→	lavaman has joined #haskell
2021-10-06 22:27:52	←	mbuf has quit (Quit: Leaving)
2021-10-06 22:28:27	←	Null_A has quit
2021-10-06 22:28:31	←	yinghua has quit (Read error: Connection reset by peer)
2021-10-06 22:28:50	→	yinghua has joined #haskell
2021-10-06 22:30:21	→	merijn has joined #haskell
2021-10-06 22:31:54	←	lavaman has quit (Ping timeout: 265 seconds)
2021-10-06 22:32:14	←	hyiltiz has quit (Ping timeout: 245 seconds)
2021-10-06 22:35:48	←	mc47 has quit (Remote host closed the connection)
2021-10-06 22:36:04	→	DNH has joined #haskell
2021-10-06 22:36:06	→	pavonia has joined #haskell
2021-10-06 22:37:51	←	justsomeguy has quit (Quit: WeeChat 3.2)
2021-10-06 22:39:16	kuribas	is using the `Ap` Monoid fancy haskell?
2021-10-06 22:39:39	vaibhavsagar[m]	fancy haskell is whatever i don't know
2021-10-06 22:39:41	vaibhavsagar[m]	so yes
2021-10-06 22:39:53	kuribas	I have "Validation (ann, Text) (DeviceTables ann -> DeviceTables ann)"
2021-10-06 22:40:16	kuribas	if I use Endo and Ap, I can more easily compose them.
2021-10-06 22:40:31	vaibhavsagar[m]	I was being facetious
2021-10-06 22:40:47	vaibhavsagar[m]	there is no definition of "fancy haskell" that makes sense
2021-10-06 22:41:05	vaibhavsagar[m]	if it makes your code better then it's probably good
2021-10-06 22:41:14	vaibhavsagar[m]	it it makes your code worse then it's probably bad
2021-10-06 22:41:26	kuribas	it makes it better if you know what Ap and Endo do...
2021-10-06 22:41:46	vaibhavsagar[m]	I looked it up just now, seems reasonable to me
2021-10-06 22:41:53	kuribas	ok, thanks :)
2021-10-06 22:42:26	←	Hanicef has quit (Quit: leaving)
2021-10-06 22:42:42	vaibhavsagar[m]	IME when people talk about "fancy haskell" it involves type-level programming, lens, etc
2021-10-06 22:42:54	vaibhavsagar[m]	but again, there is no consistent definition
2021-10-06 22:43:00	kuribas	lens also :-(
2021-10-06 22:43:10	kuribas	I think basic lenses should be ok.
2021-10-06 22:43:25	vaibhavsagar[m]	but that's the thing, sometimes lenses are simpler than the alternative
2021-10-06 22:43:28	awpr	hmm, I need to delete my own reimplementation of `Ap`.  didn't know that existed in `base`
2021-10-06 22:43:29	kuribas	like view, set, over
2021-10-06 22:43:43	vaibhavsagar[m]	I wrote some code to update JSON without lenses that is incredibly ugly
2021-10-06 22:43:44	monochrom	:)
2021-10-06 22:44:14	vaibhavsagar[m]	so it might actually be an improvement to rewrite that
2021-10-06 22:44:21	kuribas	I've found the more fancy lenses are easy to avoid.
2021-10-06 22:45:03	kuribas	For example (view (#field % to f)) => (f . view #field)
2021-10-06 22:45:06	→	cheater has joined #haskell
2021-10-06 22:46:15	vaibhavsagar[m]	I don't have a good grasp of lenses but I believe you
2021-10-06 22:46:22	→	ec has joined #haskell
2021-10-06 22:46:44	awpr	this is at least vaguely on-topic: I don't think you need to lose (.) composition to have a sensible OverloadedLabels instance for optics
2021-10-06 22:47:24	awpr	the instance head can just be `OpticWrapper p f a b -> OpticWrapper p f s t`
2021-10-06 22:47:31	←	Everything has quit (Quit: leaving)
2021-10-06 22:47:58	kuribas	awpr: for optics the composition operator is `%`
2021-10-06 22:48:06	awpr	that's what I was responding to
2021-10-06 22:48:18	kuribas	You don't loose it, it's just a different operator
2021-10-06 22:48:28	→	Null_A has joined #haskell
2021-10-06 22:48:35	awpr	"(.) composition" is different from "any form of composition"
2021-10-06 22:48:46	awpr	I mean literally the ability to use (.) for composition
2021-10-06 22:48:57	kuribas	awpr: are you refering to Control.Category?
2021-10-06 22:49:07	awpr	no, literally (Prelude..)
2021-10-06 22:49:22	kuribas	in that case, not using (.) is a good thing.
2021-10-06 22:49:32	awpr	I don't agree with that
2021-10-06 22:49:49	kuribas	because Optics are a concept, a function is an implementation detail.
2021-10-06 22:50:02	→	hyiltiz has joined #haskell
2021-10-06 22:50:03	kuribas	you don't want to leak implementation into your API.
2021-10-06 22:50:25	kuribas	(.) for lenses is quite confusing.
2021-10-06 22:50:57	dminuoso	awpr: The point of using % rather than . has nothing to do with not being able to.
2021-10-06 22:51:01	awpr	*shrug* it doesn't confuse me.  it's not objectively confusing
2021-10-06 22:51:09	←	sprout has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-10-06 22:51:50	dminuoso	awpr: It's about being able to generate legible diagnostics at composition time, rather than deferring illegible diagnostics to consumption time.
2021-10-06 22:52:10	dminuoso	(%) :: forall k l m is js ks s t u v a b . (JoinKinds k l m, AppendIndices is js ks) => Optic k is s t u v -> Optic l js u v a b -> Optic m ks s t a b
2021-10-06 22:52:21	dminuoso	So the magic juice is JoinKinds and AppendIndices
2021-10-06 22:52:57	awpr	yeah, I guess that makes sense.  I still prefer `.` and error messages relating to what's actually going on, myself
2021-10-06 22:54:16	dminuoso	Me personally I prefer if GHC produces a type error that says "A Getter cannot be composed with a Setter", rather than being able to satisfy some cryptic constraints.
2021-10-06 22:54:31	dminuoso	I dont need to understand what profunctor typeclasses are used
2021-10-06 22:54:47	awpr	yeah, I'm the opposite.  different libraries for different preferences, I guess
2021-10-06 22:54:51	dminuoso	Absolutely. :)
2021-10-06 22:56:04	dminuoso	It's also quite possibly relating to the fact that if you're already familiar with the involved constraints, you might not care much.
2021-10-06 22:56:17	dminuoso	For a new user who really doesn't care about the implementation, it might be different.
2021-10-06 22:56:54	dminuoso	I know some do think that being forced to understand the inner workings is preferrable, but as long as the optics involved have clear semantics, is that really necessary?
2021-10-06 22:57:01	dminuoso	But this is definitely personal preference
2021-10-06 22:57:04	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-10-06 22:57:12	awpr	yeah, definitely curated error messages are more newcomer-friendly
2021-10-06 22:57:19	monochrom	I haven't used lens and optics, but I have a related philosophy comparing C++ operator overloading and Haskell type classes.
2021-10-06 22:58:21	←	Null_A has quit (Remote host closed the connection)
2021-10-06 22:58:28	awpr	part of the downside to me though is that it turns the internally-consistent mechanism into what looks like an ad-hoc set of specific rules
2021-10-06 22:58:47	→	Null_A has joined #haskell
2021-10-06 22:58:49	dminuoso	awpr: these ad-hoc rules are formalized though.
2021-10-06 22:59:12	dminuoso	awpr: In lens you simply have https://i.imgur.com/ALlbPRa.png
2021-10-06 22:59:15	awpr	and for me it's easier to internalize the profunctor workings than to memorize the table of composition rules
2021-10-06 22:59:31	dminuoso	So (%) isnt some adhoc nonsense, it's just an implementation of that very hierarchy. :)
2021-10-06 22:59:39	dminuoso	(or equivalent for profunctors)
2021-10-06 22:59:41	monochrom	If you make the mistake of using a polymorphic function that needs (+) on a type, say T, that doesn't support (+), ...
2021-10-06 22:59:47	sshine	as long as they provide an ergonomic, internally-consistent DSL, I don't mind that some parts are opaque. in fact, I prefer it, until I suddenly find that I don't. I guess you always reach a point where you wanna knock down a wall.
2021-10-06 23:00:08	awpr	right, I'm not saying it _is_ ad-hoc, just that if you're approaching from a new learner perspective, it looks ad-hoc and nobody ever lets you see the underlying principle
2021-10-06 23:00:13	dminuoso	awpr: Perhabs the ideal library would be backpack driven, such that you could pick your flavour.
2021-10-06 23:00:23	monochrom	C++ be like "at line 1023 in the polymorphic function, it uses (+), which is not supported"
2021-10-06 23:00:32	dminuoso	Assuming we had a working and documented backpack.
2021-10-06 23:00:36	monochrom	Haskell be like "T is not an instance of Num".
2021-10-06 23:00:58	dminuoso	Such that some users could use say `optics` in the raw profunctor style, and others could use it in the newtype style.
2021-10-06 23:01:07	monochrom	I prefer the Haskell way. It's clearly more modular. Why do I need to know that it's line 1023 in the function I'm calling.
2021-10-06 23:01:45	awpr	that would be pretty nice.  I prefer the profunctor-only presentation over the weird hybrid van laarhoven +  profunctors thing of `lens`, so I think a "veil-lifted" `optics` might be my ideal choice
2021-10-06 23:03:04	awpr	C++ concepts have been around for ... *looks at standardization progress* ...oh.
2021-10-06 23:03:05	dminuoso	awpr: Out of curiosity, what do you find to be "in the way" or "annoying" with the newtype style?
2021-10-06 23:03:25	monochrom	C++ concept is very recent.
2021-10-06 23:03:33	dminuoso	So far I haven't found anything that was arbitrarily constrained by it, everything that seems legal is also supported/allowed by optics.
2021-10-06 23:03:51	dminuoso	With some minor bits like being unable to view through a traversal (which lens supports), that I absolutely loathe.
2021-10-06 23:04:06	dminuoso	Oh that was poorly phrased. I absolutely loathe that lens does this.
2021-10-06 23:04:07	←	waleee has quit (Quit: WeeChat 3.3)
2021-10-06 23:04:12	dminuoso	but that too is personal opinion
2021-10-06 23:04:12	awpr	I don't have any actual experience with `optics`, it's just a philosophical preference
2021-10-06 23:04:19	←	merijn has quit (Ping timeout: 245 seconds)
2021-10-06 23:04:22	awpr	I'm sure it works great in practice
2021-10-06 23:05:04	dminuoso	awpr: If that's even a philosophical preference, shouldn't we just abandon data and newtype entirely?
2021-10-06 23:05:22	dminuoso	Or is there a limit to that philosophy?
2021-10-06 23:06:18	dminuoso	In my experience, hiding implementation details behind a veil that you cant accidentally pierce is generally a good thing. 
2021-10-06 23:06:37	→	waleee has joined #haskell
2021-10-06 23:06:41	awpr	it's specific to optics: IMO there isn't a need for that to be a protected abstraction, because as far as I'm concerned the underlying mechanism is a clean enough thing to merit having a library for
2021-10-06 23:07:24	dminuoso	Yeah, I guess I can sympathize with that.
2021-10-06 23:07:49	dminuoso	profunctor optics is incredibly interesting, it has a certain mathematical beauty and it arises just naturally
2021-10-06 23:08:04	awpr	I guess the laws for the various optic types contradict that position, though.  I've often wanted to export "a thing that has the type of a lens but isn't a lens", which doesn't fit into the un-newtyped view very well
2021-10-06 23:08:29	→	fef has joined #haskell
2021-10-06 23:08:33	awpr	like, it is a bit weird that `lens` imposes laws on types that exist independently of the `lens` package
2021-10-06 23:08:42	←	Null_A has quit (Remote host closed the connection)
2021-10-06 23:08:45	awpr	(modulo type aliases)
2021-10-06 23:09:06	→	Null_A has joined #haskell
2021-10-06 23:09:23	c_wraith	optics lets you create unlawful lenses
2021-10-06 23:09:46	→	ThatsWhatIDo has joined #haskell
2021-10-06 23:10:14	awpr	hmm, I suppose that's a pragmatic choice.  but it doesn't really change the situation
2021-10-06 23:10:32	dminuoso	Yeah I think this is a bit orthogonal, c_wraith.
2021-10-06 23:10:35	awpr	it's not that it's /possible/ to break the laws, it's that breaking the laws is a no-op
2021-10-06 23:11:31	awpr	as far as `lens` and GHC's type checker are concerned, my `forall f. Functor f => (a -> f b) -> s -> f t` that doesn't claim to uphold the lens laws /is/ a `Lens`, even though I didn't say it was
2021-10-06 23:11:50	dminuoso	awpr: I just dont see what real value you gain by having these details exposed. In my experience, it does somewhat frequently (depending your level of expertise and complexity of code) generate horrible to decipher diagnostics.
2021-10-06 23:12:24	c_wraith	well, trivially, you gain the ability to do things the library authors did not divine that you'd need
2021-10-06 23:12:31	dminuoso	About the only thing I can think of is that (.) is visually less annoying than (%), but emacs + font locking can address that if its a real issue...
2021-10-06 23:13:06	dminuoso	c_wraith: But that's not true. The Optic data constructor is exported.
2021-10-06 23:13:19	dminuoso	So you can break optics open or repackage them to construct anything of your chosing.
2021-10-06 23:13:33	dminuoso	The entire set of possible compositions is already built
2021-10-06 23:13:46	awpr	`view` being polymorphic over `Traversal`s would be one example of that.  it's a fair point that it's error-prone, but I prefer less hand-holding over more
2021-10-06 23:14:09	c_wraith	I don't see any way to use optics combinators with new things that aren't already in the library
2021-10-06 23:14:14	dminuoso	awpr: you can still use foldOf mmm.
2021-10-06 23:14:27	awpr	I'm not trying to convince anyone to ditch `optics`, just explaining my personal preference
2021-10-06 23:14:38	→	emf has joined #haskell
2021-10-06 23:14:42	dminuoso	You just have to be explicit here, with `view` the behavior is completely hidden and relies on you ambiently knowing what a given composition even is
2021-10-06 23:14:46	dminuoso	Absolutely!
2021-10-06 23:14:59	dminuoso	Im not convincing you anyway, I really want to understand your position.
2021-10-06 23:15:10	awpr	totally valid to prefer `optics`, too, and perhaps even a truly better choice for codebases that frequently get newcomers
2021-10-06 23:15:25	←	myShoggoth has quit (Ping timeout: 265 seconds)
2021-10-06 23:15:29	←	ec has quit (Ping timeout: 276 seconds)
2021-10-06 23:16:15	maerwald	I don't think this is about newcomers
2021-10-06 23:16:47	awpr	I feel the same way as with `instance Foldable ((,) a)`: it's a perfectly valid thing to have and use, and removing it is only desirable inasmuch as you want the compiler to second-guess you when you might have unintentionally used it
2021-10-06 23:17:14	dminuoso	awpr: The difference with that instance though, is that it's very easy to see that the argument to some fold happens to be a tuple.,
2021-10-06 23:17:21	→	myShoggoth has joined #haskell
2021-10-06 23:17:25	awpr	okay, s/newcomers/non-ivory-tower-elitists/ :)
2021-10-06 23:17:34	dminuoso	awpr: but realizing that your composition is suddenly no longer a lens but an (affine) traversal because there's a prism you didnt quite see... that's very hard
2021-10-06 23:17:41	dminuoso	because as long as there's a monoid instance, it will just work
2021-10-06 23:17:44	maerwald	awpr: I still don't understand
2021-10-06 23:18:36	maerwald	optics isn't a watered down version of lens for newcomers or noobs
2021-10-06 23:18:42	dminuoso	awpr: So with `view` you dont readily know whether this will fold a traversal, or view a singular point. That's my take on it.
2021-10-06 23:18:45	maerwald	it's a drop-in replacement
2021-10-06 23:19:02	dminuoso	maerwald: I dont think its their position that optics is for newcomers.
2021-10-06 23:19:02	←	Null_A has quit (Remote host closed the connection)
2021-10-06 23:19:12	awpr	no, but it adds complexity for the sake of better error messages, and I don't find that necessary for my own preferences
2021-10-06 23:19:24	maerwald	sure
2021-10-06 23:19:27	→	Null_A has joined #haskell
2021-10-06 23:19:40	awpr	so, if it's just me working on something, I'd rather have an un-newtyped form
2021-10-06 23:19:45	maerwald	but your preferences have little to do with newcomers
2021-10-06 23:19:56	dminuoso	awpr: to be fair, optics does have its problems. at times the type machinery for the diagnostics fails, and I get *truly* cryptic errors involving the helper typefamilies that are designed to help me.
2021-10-06 23:20:09	dminuoso	So yeah, rarely diagnostics get tons worse
2021-10-06 23:20:38	maerwald	the main reason I use optics is because `view` is stricter and the lens Monoid constraint caused a pretty bad production bug for me
2021-10-06 23:20:55	→	ec has joined #haskell
2021-10-06 23:21:06	awpr	must just be an issue of poor wording.  I just meant to acknowledge that for codebases with multiple contributors who aren't me or who don't share my admittedly eccentric preference, it's probably better to just use `optics`
2021-10-06 23:21:07	dminuoso	maerwald: My thought of, you can easily just use foldOf, and make the monoid folding an explicit choice!
2021-10-06 23:22:04	dminuoso	awpr: But perhaps you've already hilighted the core essence of what Im trying to understand.
2021-10-06 23:22:09	awpr	hmm.  "this caused a real bug" is usually a convincing argument for me
2021-10-06 23:22:18	dminuoso	Your preference is based on a personal philosophical view
2021-10-06 23:22:35	maerwald	my coding preferences are mainly shaped by PTSD experiences
2021-10-06 23:22:55	awpr	er, "multiple contributors who aren't me" <- not to suggest there are multiple of me
2021-10-06 23:23:37	awpr	notwithstanding any Champaign meteorologist, UK storm photographer, or former UK drug lord who might share my name
2021-10-06 23:23:40	dminuoso	My personal story behind optics is, I never used lens becaue I could never translate these magical constraint compositions into what type of optic they were. And I like putting things like optics into bindings, but that conflicted with my other rule of annotating almost every binding.
2021-10-06 23:23:58	dminuoso	And `optics` allowed me to do this, so `optics` is when I started using this DSL. :P
2021-10-06 23:25:33	maerwald	I still haven't found a real use case for optics... it's more like convenience, being cool or having too much time on your hands. If you don't use them a lot, the intelectual complexity penalty isn't worth it most of the time
2021-10-06 23:25:43	maerwald	because I can't understand then lens code I wrote a couple months ago
2021-10-06 23:25:53	dminuoso	maerwald: yeah, we only use them extensively in one project
2021-10-06 23:25:58	geekosaur	same here
2021-10-06 23:25:59	dminuoso	but we really go bold with optics in that one. :)
2021-10-06 23:26:25	geekosaur	every so often I look lens/optics over again and decide I don't really have a use for them yet
2021-10-06 23:26:44	awpr	for me the only highly compelling use case is compositions of traversals, especially over things that don't fit the kind signature of `Traversable`
2021-10-06 23:26:55	c_wraith	Man, optics really doesn't support most of the things I do with lenses.  (trivial data access is boring. concise expression of complex data access is where it's at)
2021-10-06 23:27:06	c_wraith	optics doesn't even have universeOf.  :(
2021-10-06 23:28:00	c_wraith	err.  cosmosOf is the one I was thinking of.  But optics doesn't have that, either
2021-10-06 23:28:50	dminuoso	Mmm, why was I thinking optics had Plated
2021-10-06 23:30:01	ProofTechnique	My main use of optics lately has been dealing with responses from really terribly designed GraphQL schemas. Nested optional data is _gross_
2021-10-06 23:30:22	dminuoso	c_wraith: In some way this actually hilights how lenses/optics are sometimes used really well. You have this particular usage pattern you can best describe with this style.
2021-10-06 23:30:28	dminuoso	And nothing else comes close.
2021-10-06 23:30:41	c_wraith	yeah, that's true
2021-10-06 23:33:05	dminuoso	https://gist.github.com/dminuoso/38033cec207a51cf191fad8976e69a40
2021-10-06 23:33:17	dminuoso	This is the kind of pattern we use in our sdn compiler very often
2021-10-06 23:38:07	←	hyiltiz has quit (Ping timeout: 265 seconds)
2021-10-06 23:39:24	→	hyiltiz has joined #haskell
2021-10-06 23:41:12	←	Null_A has quit (Remote host closed the connection)
2021-10-06 23:41:36	→	Null_A has joined #haskell
2021-10-06 23:42:34	←	ThatsWhatIDo has quit (Quit: Leaving)
2021-10-06 23:42:48	←	ubert has quit (Remote host closed the connection)
2021-10-06 23:42:49	ℹ	ub is now known as ubert
2021-10-06 23:43:16	←	emf has quit (Ping timeout: 245 seconds)
2021-10-06 23:43:43	→	mortemeur has joined #haskell
2021-10-06 23:47:42	→	emf has joined #haskell
2021-10-06 23:49:56	←	ec has quit (Ping timeout: 276 seconds)
2021-10-06 23:50:13	→	ec has joined #haskell
2021-10-06 23:51:32	←	Null_A has quit (Remote host closed the connection)
2021-10-06 23:51:57	→	Null_A has joined #haskell
2021-10-06 23:56:56	←	kuribas has quit (Remote host closed the connection)
2021-10-06 23:57:10	←	kaol has quit (Remote host closed the connection)
2021-10-06 23:57:39	→	ThatsWhatIDo has joined #haskell
2021-10-06 23:57:44	←	ec has quit (Ping timeout: 276 seconds)
2021-10-07 00:00:49	←	kimjetwav has quit (Remote host closed the connection)
2021-10-07 00:01:17	←	eggplantade has quit (Remote host closed the connection)
2021-10-07 00:07:36	←	ThatsWhatIDo has quit (Quit: Leaving)
2021-10-07 00:08:14	→	emf_ has joined #haskell
2021-10-07 00:10:04	→	wonko has joined #haskell
2021-10-07 00:10:21	←	emf has quit (Ping timeout: 245 seconds)
2021-10-07 00:11:09	→	ub has joined #haskell
2021-10-07 00:11:49	←	ubert has quit (Ping timeout: 245 seconds)
2021-10-07 00:11:50	ℹ	ub is now known as ubert
2021-10-07 00:12:01	←	hyiltiz has quit (Ping timeout: 245 seconds)
2021-10-07 00:12:51	←	emf_ has quit (Ping timeout: 245 seconds)
2021-10-07 00:14:49	→	ec has joined #haskell
2021-10-07 00:14:57	→	hyiltiz has joined #haskell
2021-10-07 00:15:19	←	jespada has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-10-07 00:15:56	←	fef has quit (Ping timeout: 276 seconds)
2021-10-07 00:16:50	→	emf has joined #haskell
2021-10-07 00:18:08	→	mmohammadi9812 has joined #haskell
2021-10-07 00:25:06	←	NinjaTrappeur has quit (Ping timeout: 252 seconds)
2021-10-07 00:26:01	←	yinghua has quit (Remote host closed the connection)
2021-10-07 00:26:24	→	DNH has joined #haskell
2021-10-07 00:27:34	→	yinghua has joined #haskell
2021-10-07 00:32:57	←	sneedsfeed has quit (Ping timeout: 256 seconds)
2021-10-07 00:33:04	←	hyiltiz has quit (Ping timeout: 245 seconds)
2021-10-07 00:33:52	→	Pickchea has joined #haskell
2021-10-07 00:36:51	←	ChaiTRex has quit (Remote host closed the connection)
2021-10-07 00:37:24	→	ChaiTRex has joined #haskell
2021-10-07 00:37:46	→	NinjaTrappeur has joined #haskell
2021-10-07 00:39:38	←	ubert has quit (Quit: ubert)
2021-10-07 00:39:39	→	jespada has joined #haskell
2021-10-07 00:39:47	←	raoul has quit (Quit: Ping timeout (120 seconds))
2021-10-07 00:42:10	←	abhixec has quit (Remote host closed the connection)
2021-10-07 00:43:29	←	unmanbearpig has quit (Ping timeout: 245 seconds)
2021-10-07 00:43:56	→	wroathe has joined #haskell
2021-10-07 00:43:57	←	wroathe has quit (Changing host)
2021-10-07 00:43:57	→	wroathe has joined #haskell
2021-10-07 00:45:18	←	myShoggoth has quit (Ping timeout: 265 seconds)
2021-10-07 00:45:53	→	ubert has joined #haskell
2021-10-07 00:46:22	←	kawpuh has quit (Quit: Ping timeout (120 seconds))
2021-10-07 00:46:38	→	eggplantade has joined #haskell
2021-10-07 00:48:12	→	CiaoSen has joined #haskell
2021-10-07 00:48:54	←	eggplantade has quit (Remote host closed the connection)
2021-10-07 00:53:48	→	myShoggoth has joined #haskell
2021-10-07 00:59:03	←	elcaro has quit (Ping timeout: 252 seconds)
2021-10-07 00:59:52	←	Andrew has quit (Remote host closed the connection)
2021-10-07 01:00:17	←	ubert has quit (Ping timeout: 265 seconds)
2021-10-07 01:00:47	←	ec has quit (Ping timeout: 276 seconds)
2021-10-07 01:01:31	→	merijn has joined #haskell
2021-10-07 01:03:58	→	ec has joined #haskell
2021-10-07 01:04:18	←	doyougnu has quit (Remote host closed the connection)
2021-10-07 01:04:36	←	byorgey has quit (Ping timeout: 252 seconds)
2021-10-07 01:05:28	→	tfeb has joined #haskell
2021-10-07 01:06:16	→	byorgey has joined #haskell
2021-10-07 01:07:28	→	raoul has joined #haskell
2021-10-07 01:10:20	→	AndrewYu has joined #haskell
2021-10-07 01:10:38	→	elcaro has joined #haskell
2021-10-07 01:11:04	→	kawpuh has joined #haskell
2021-10-07 01:11:12	→	Morrow has joined #haskell
2021-10-07 01:15:54	→	hyiltiz has joined #haskell
2021-10-07 01:17:12	←	zer0bitz has quit (Ping timeout: 265 seconds)
2021-10-07 01:17:15	→	unmanbearpig has joined #haskell
2021-10-07 01:17:28	ℹ	irc: disconnected from server
2021-10-07 15:54:22	→	oxide has joined #haskell
2021-10-07 15:54:22	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-10-07 15:54:22	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-10-07 15:54:22	ℹ	Channel #haskell: 735 nicks (1 op, 0 voices, 734 normals)
2021-10-07 15:54:23	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-10-07 15:55:25	←	nschoe has quit (Ping timeout: 265 seconds)
2021-10-07 15:57:27	ℹ	fendor_ is now known as fendor
2021-10-07 15:59:31	←	dschrempf has quit (Ping timeout: 245 seconds)
2021-10-07 16:03:09	←	jakalx has left #haskell
2021-10-07 16:03:35	→	nl3dee has joined #haskell
2021-10-07 16:06:15	→	jakalx has joined #haskell
2021-10-07 16:07:30	←	benin03693230163 has quit (Ping timeout: 265 seconds)
2021-10-07 16:10:37	←	geekosaur has quit (Remote host closed the connection)
2021-10-07 16:11:51	←	merijn has quit (Ping timeout: 265 seconds)
2021-10-07 16:12:22	→	olibiera has joined #haskell
2021-10-07 16:12:27	→	geekosaur has joined #haskell
2021-10-07 16:13:03	→	merijn has joined #haskell
2021-10-07 16:13:43	→	rtjure has joined #haskell
2021-10-07 16:14:16	←	hyiltiz has quit (Ping timeout: 265 seconds)
2021-10-07 16:14:20	olibiera	raizes a b c = (r1, r2)
2021-10-07 16:14:21	olibiera	 where r1 = ((-b) + sqrt(b * b - 4 * a * c)) / (2 * a) r2 = ((-b) - sqrt(b * b - 4 * a * c)) / (2 * a)  
2021-10-07 16:14:29	olibiera	raizes 1.0 1.0 1.0
2021-10-07 16:14:30	→	hiruji` has joined #haskell
2021-10-07 16:14:43	olibiera	how can i use the bot
2021-10-07 16:14:52	maerwald	PM
2021-10-07 16:14:59	_________	> "How to use bot?"
2021-10-07 16:15:02	lambdabot	 "How to use bot?"
2021-10-07 16:15:03	←	hiruji has quit (Read error: Connection reset by peer)
2021-10-07 16:15:06	olibiera	oh
2021-10-07 16:15:14	maerwald	please don't post random code in the channel, use PM for it
2021-10-07 16:15:25	olibiera	i have a question
2021-10-07 16:15:45	→	hyiltiz has joined #haskell
2021-10-07 16:15:55	olibiera	why doing raizes 1.0 1.0 1.0 it returns (NaN,NaN)?
2021-10-07 16:16:43	olibiera	> raizes a b c = (r1, r2)
2021-10-07 16:16:44	olibiera	 where r1 = ((-b) + sqrt(b * b - 4 * a * c)) / (2 * a) r2 = ((-b) - sqrt(b * b - 4 * a * c)) / (2 * a)  
2021-10-07 16:16:45	lambdabot	 <hint>:1:14: error: parse error on input ‘=’
2021-10-07 16:18:16	←	merijn has quit (Ping timeout: 245 seconds)
2021-10-07 16:18:41	←	hiruji` has quit (Ping timeout: 245 seconds)
2021-10-07 16:18:42	_________	olibiera: because b²-4ac is less than 0
2021-10-07 16:19:14	→	merijn has joined #haskell
2021-10-07 16:19:19	olibiera	> got it thx
2021-10-07 16:19:21	lambdabot	 error:
2021-10-07 16:19:21	lambdabot	     • Variable not in scope: got :: t0 -> t1 -> t
2021-10-07 16:19:21	lambdabot	     • Perhaps you meant one of these:
2021-10-07 16:24:54	←	merijn has quit (Ping timeout: 265 seconds)
2021-10-07 16:25:04	→	merijn has joined #haskell
2021-10-07 16:26:11	←	Morrow has quit (Ping timeout: 245 seconds)
2021-10-07 16:30:09	←	merijn has quit (Ping timeout: 245 seconds)
2021-10-07 16:30:29	→	geranim0 has joined #haskell
2021-10-07 16:30:32	→	merijn has joined #haskell
2021-10-07 16:36:01	←	merijn has quit (Ping timeout: 265 seconds)
2021-10-07 16:36:15	→	merijn has joined #haskell
2021-10-07 16:41:29	→	echoone has joined #haskell
2021-10-07 16:41:49	←	merijn has quit (Ping timeout: 265 seconds)
2021-10-07 16:41:50	→	dschrempf has joined #haskell
2021-10-07 16:41:58	echoone	In the language of recursion schemes, catamorphisms correspond to Church encodings and paramorphisms correspond to Parigot encodings. There does not seems to a recursion scheme corresponding to Scott encodings though. Why is that?
2021-10-07 16:42:15	→	merijn has joined #haskell
2021-10-07 16:43:39	←	olibiera has quit (Ping timeout: 256 seconds)
2021-10-07 16:43:54	opqdonut	scott-encodings are non-recursive
2021-10-07 16:44:47	echoone	That's true.
2021-10-07 16:44:59	opqdonut	church encodind represents a recursive datatype with its catamorphism, scott encodig represents a recursive datatype with its destructor
2021-10-07 16:45:16	opqdonut	church/catamorphism is fold, scott is uncons/case-of
2021-10-07 16:45:17	←	phma has quit (Read error: Connection reset by peer)
2021-10-07 16:45:22	echoone	That's right.
2021-10-07 16:45:52	→	phma has joined #haskell
2021-10-07 16:45:59	echoone	Maybe if we had something called "elimantor schemes", it would show up there.
2021-10-07 16:46:07	echoone	*eliminator
2021-10-07 16:46:09	opqdonut	yeah
2021-10-07 16:46:30	opqdonut	haskell has some eliminators like maybe and either but it's not a commonly used pattern
2021-10-07 16:47:01	opqdonut	case-of is usually more ergonomic
2021-10-07 16:47:14	echoone	Yes. I find that also to be the case.
2021-10-07 16:47:28	echoone	Except when I want to write something point-free.
2021-10-07 16:47:32	opqdonut	:)
2021-10-07 16:48:17	echoone	Alright. Thanks for the input.
2021-10-07 16:49:54	←	Teacup has quit (Remote host closed the connection)
2021-10-07 16:50:21	→	Heisen has joined #haskell
2021-10-07 16:50:27	←	phma has quit (Read error: Connection reset by peer)
2021-10-07 16:51:02	←	Heisen has quit (Client Quit)
2021-10-07 16:51:41	→	phma has joined #haskell
2021-10-07 16:51:44	→	jmfcomo1 has joined #haskell
2021-10-07 16:51:53	←	phma has quit (Read error: Connection reset by peer)
2021-10-07 16:52:27	←	Vajb has quit (Read error: Connection reset by peer)
2021-10-07 16:52:27	←	dschrempf has quit (Ping timeout: 265 seconds)
2021-10-07 16:52:56	←	merijn has quit (Ping timeout: 265 seconds)
2021-10-07 16:53:02	→	phma has joined #haskell
2021-10-07 16:53:30	←	jmfcomo1 has left #haskell
2021-10-07 16:53:47	→	merijn has joined #haskell
2021-10-07 16:53:59	→	Vajb has joined #haskell
2021-10-07 16:57:24	→	vysn has joined #haskell
2021-10-07 16:58:54	←	merijn has quit (Ping timeout: 245 seconds)
2021-10-07 16:59:14	→	merijn has joined #haskell
2021-10-07 17:00:27	libertyprime	"catamorphism" reminded me that my cat isnt home yet :'( i hope she's ok
2021-10-07 17:02:51	←	darkstardevx has quit (Ping timeout: 245 seconds)
2021-10-07 17:03:29	echoone	Does anyone know of attempts of doing recursion schemes using containers?
2021-10-07 17:03:34	→	darkstardevx has joined #haskell
2021-10-07 17:04:11	→	raehik has joined #haskell
2021-10-07 17:05:40	merijn	Not quite sure what you mean by that?
2021-10-07 17:10:31	maerwald	how do you check what code TH produces again?
2021-10-07 17:10:46	←	bitdex has quit (Remote host closed the connection)
2021-10-07 17:11:34	→	bitdex has joined #haskell
2021-10-07 17:11:46	merijn	-ddump-splices
2021-10-07 17:11:46	echoone	By containers, I mean these guys: https://en.wikipedia.org/wiki/Container_(type_theory)
2021-10-07 17:11:51	→	chomwitt has joined #haskell
2021-10-07 17:11:52	merijn	Or something along those lines
2021-10-07 17:12:08	merijn	echoone: Ah...probably helps to clarify you're not referring to
2021-10-07 17:12:11	merijn	@hackage containers
2021-10-07 17:12:11	lambdabot	https://hackage.haskell.org/package/containers
2021-10-07 17:12:13	merijn	:p
2021-10-07 17:12:25	echoone	Indeed. Sorry about that.
2021-10-07 17:12:36	merijn	I was very confused for a bit
2021-10-07 17:12:52	merijn	I am, possibly, even more confused looking at that wikipedia page, but hey!
2021-10-07 17:13:42	maerwald	merijn: where do they get dumped?
2021-10-07 17:14:38	merijn	maerwald: In the build dir, so if you're using cabal under dist-newstyle. I think there's a flag to override the output dir in GHC, though
2021-10-07 17:24:25	maerwald	if you put it as GHC_OPTIONS in the module, it's stderr
2021-10-07 17:24:31	maerwald	can't be bothered to look for the files
2021-10-07 17:25:39	←	mmhat has quit (Quit: WeeChat 3.3)
2021-10-07 17:26:50	←	echoone has quit (Quit: Client closed)
2021-10-07 17:27:01	→	machinedgod has joined #haskell
2021-10-07 17:27:35	→	Teacup has joined #haskell
2021-10-07 17:30:09	←	max22- has quit (Ping timeout: 265 seconds)
2021-10-07 17:34:04	←	neurocyte0132889 has quit (Quit: The Lounge - https://thelounge.chat)
2021-10-07 17:37:47	→	neurocyte0132889 has joined #haskell
2021-10-07 17:37:47	←	neurocyte0132889 has quit (Changing host)
2021-10-07 17:37:47	→	neurocyte0132889 has joined #haskell
2021-10-07 17:40:34	→	hiruji has joined #haskell
2021-10-07 17:42:45	←	phma has quit (Read error: Connection reset by peer)
2021-10-07 17:43:09	→	phma has joined #haskell
2021-10-07 17:44:35	←	vinstre has quit (Remote host closed the connection)
2021-10-07 17:45:27	→	lavaman has joined #haskell
2021-10-07 17:47:47	←	Maxdamantus has quit (Ping timeout: 268 seconds)
2021-10-07 17:52:21	→	argento has joined #haskell
2021-10-07 17:52:39	←	argento has quit (Client Quit)
2021-10-07 17:53:29	→	argento has joined #haskell
2021-10-07 17:57:03	←	argento has quit (Client Quit)
2021-10-07 17:57:54	←	byorgey has quit (Quit: leaving)
2021-10-07 18:00:02	→	lbseale has joined #haskell
2021-10-07 18:03:08	→	tfeb has joined #haskell
2021-10-07 18:06:58	→	dextaa has joined #haskell
2021-10-07 18:07:40	→	dschrempf has joined #haskell
2021-10-07 18:09:47	←	chomwitt has quit (Ping timeout: 265 seconds)
2021-10-07 18:10:15	→	Psybur has joined #haskell
2021-10-07 18:15:06	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-10-07 18:20:19	ℹ	irc: disconnected from server
2021-10-07 18:20:39	→	oxide has joined #haskell
2021-10-07 18:20:39	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-10-07 18:20:39	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-10-07 18:20:39	ℹ	Channel #haskell: 737 nicks (1 op, 0 voices, 736 normals)
2021-10-07 18:20:39	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-10-07 18:23:19	→	Maxdamantus has joined #haskell
2021-10-07 18:25:54	→	xff0x has joined #haskell
2021-10-07 18:28:56	kuribas	is there an easy permutations function that I can copy?
2021-10-07 18:29:31	kuribas	oh Data.List.permutations :)
2021-10-07 18:29:34	kuribas	:t permutations
2021-10-07 18:29:35	lambdabot	[a] -> [[a]]
2021-10-07 18:30:08	→	ec has joined #haskell
2021-10-07 18:32:05	→	Amras has joined #haskell
2021-10-07 18:32:10	→	Inoperable has joined #haskell
2021-10-07 18:33:12	maerwald	dminuoso: https://gitlab.haskell.org/haskell/ghcup-hs/-/jobs/811151 nix-cache busted (for whatever reason) and now it's compiling random stuff, probably for hours ;)
2021-10-07 18:33:42	maerwald	it's a plague
2021-10-07 18:34:17	→	fuzzypixelz has joined #haskell
2021-10-07 18:34:18	→	chomwitt has joined #haskell
2021-10-07 18:37:18	maerwald	oddly, never happened on ubuntu :p
2021-10-07 18:39:33	jackdk	I am trying to test some amazonka patches against https://github.com/gilt/kms-s3 . I created a cabal.project file, listed my commit sha in source-repository-package stanzas, and despite `cabal build` downloading and building the amazonka libs, they aren't found when it starts compiling files from `kms-s3`. This is despite `amazonka` being listed in`build-depends`
2021-10-07 18:40:38	jackdk	This is the cabal.project I'm using. https://www.irccloud.com/pastebin/9q3l4xUX/cabal.project
2021-10-07 18:42:09	Hecate	maerwald: do you think it's time to revive cabal-cache maybe?
2021-10-07 18:42:14	←	MQ-17J has quit (Ping timeout: 245 seconds)
2021-10-07 18:42:36	maerwald	this is a problem with darwin sucking so hard that no one knows how to make it work without nix
2021-10-07 18:44:47	→	MQ-17J has joined #haskell
2021-10-07 18:45:32	←	__monty__ has quit (Quit: leaving)
2021-10-07 18:45:45	←	dschrempf has quit (Ping timeout: 245 seconds)
2021-10-07 18:45:59	←	Morrow has quit (Ping timeout: 245 seconds)
2021-10-07 18:48:41	←	lavaman has quit (Ping timeout: 245 seconds)
2021-10-07 18:49:59	←	xiongxin has quit (Ping timeout: 252 seconds)
2021-10-07 18:51:30	maerwald	dminuoso: and now I bumped nixpkgs because the cache is busted and guess what... my entire config is broken
2021-10-07 18:51:45	maerwald	so already an hour wasted
2021-10-07 18:52:09	←	libertyprime has quit (Ping timeout: 252 seconds)
2021-10-07 18:54:47	→	alzgh has joined #haskell
2021-10-07 18:55:16	dminuoso	maerwald: Which nixpkgs do you use exactly?
2021-10-07 18:55:37	maerwald	some random hash?
2021-10-07 18:55:41	dminuoso	https://gitlab.haskell.org/haskell/ghcup-hs/-/blob/master/.gitlab/shell.nix contains a commented out reference to angerman/nixpkgs, is that the one?
2021-10-07 18:56:01	dminuoso	No I meant, is this the official nixpkgs, or some fork of it?
2021-10-07 18:56:03	maerwald	https://gitlab.haskell.org/haskell/ghcup-hs/-/blob/master/.gitlab-ci.yml#L169
2021-10-07 18:57:29	vaibhavsagar[m]	looks like a fork
2021-10-07 18:57:50	←	Gurkenglas has quit (Ping timeout: 245 seconds)
2021-10-07 18:58:10	angerman	It’s a fork with a binary AArch64 ghc. Recent nixpkgs have those as well thanks to domen.
2021-10-07 18:58:13	dminuoso	Yeah no clue, you're using someone elses nixpkgs - so its hard to say why cachix might be missing store paths for this fork..
2021-10-07 18:58:19	dminuoso	Ah
2021-10-07 18:58:59	dminuoso	Well, you're probably better off using the official nixpkgs because then you have the guaranteed hydra > cachix workflow.
2021-10-07 18:59:00	→	dschrempf has joined #haskell
2021-10-07 19:03:09	←	bitdex has quit (Quit: = "")
2021-10-07 19:04:18	→	xiongxin has joined #haskell
2021-10-07 19:05:17	dminuoso	maerwald: but presumably the cache was hit before. I just checked on matrix and mailing lists, it seems there's no cache retention
2021-10-07 19:05:21	dminuoso	So this is curious indeed.
2021-10-07 19:05:40	→	max22- has joined #haskell
2021-10-07 19:07:38	angerman	maerwald: is building this on the ghc ci infra. The M1s are fairly disk space constrained and GC fairly often. they also reboot once a day to clear out apples x86_64 Rosetta caches.
2021-10-07 19:08:36	dminuoso	Ah yes, I recall that story about rosetta caches..
2021-10-07 19:09:06	dminuoso	angerman: So what you're saying is, you need some big 16TiB disks connected via USB 3.0 to run the store on?
2021-10-07 19:09:26	→	waleee has joined #haskell
2021-10-07 19:09:28	dminuoso	Maybe 16TiB is a bit overkill, evenb
2021-10-07 19:09:31	angerman	Something like that.
2021-10-07 19:10:25	angerman	It’s probably going to be some NAS for caching. But it’s probably going to take a few weeks to have that all sorted.
2021-10-07 19:12:17	maerwald[m]	And now the nix build failed
2021-10-07 19:12:18	maerwald[m]	Gg
2021-10-07 19:12:26	maerwald[m]	Such reproducible 
2021-10-07 19:14:42	←	lbseale has quit (Ping timeout: 265 seconds)
2021-10-07 19:15:12	←	chomwitt has quit (Ping timeout: 252 seconds)
2021-10-07 19:16:58	→	shriekingnoise has joined #haskell
2021-10-07 19:19:35	→	slowButPresent has joined #haskell
2021-10-07 19:20:19	←	ishutin has quit (Ping timeout: 264 seconds)
2021-10-07 19:21:00	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-10-07 19:21:10	→	Codaraxis has joined #haskell
2021-10-07 19:21:17	→	MQ-17J has joined #haskell
2021-10-07 19:21:49	→	ishutin has joined #haskell
2021-10-07 19:23:36	Drew[m]	I'm trying to revive a dead library. Is there any reason not to jump directly to cabal file spec 3.0 or above?
2021-10-07 19:24:30	Drew[m]	If a user's tools are up to date, they should all be compatible, right?
2021-10-07 19:25:11	fendor[m]	you can lower if someone complains, but otherwise I start at a high cabal file spec version, too
2021-10-07 19:25:17	fendor[m]	you get such nice features
2021-10-07 19:25:36	Drew[m]	Yeah I really want that sweet set notation
2021-10-07 19:26:15	dminuoso	maerwald[m]: honestly, you're not even using nix to build it.. 
2021-10-07 19:26:33	dminuoso	So not sure why you feel entitled to deterministic builds if you just build inside a shell.. :p
2021-10-07 19:26:46	→	Lorra has joined #haskell
2021-10-07 19:26:58	Drew[m]	Doesn't the latest version of cabal (for now) still support GHC versions since before GHC 8?
2021-10-07 19:27:15	→	wroathe has joined #haskell
2021-10-07 19:27:15	←	wroathe has quit (Changing host)
2021-10-07 19:27:15	→	wroathe has joined #haskell
2021-10-07 19:27:22	merijn	Yes
2021-10-07 19:27:36	merijn	Cabal supports everything from something like early 7.x onwards
2021-10-07 19:27:40	merijn	7.2 or 7.4 I think?
2021-10-07 19:28:40	merijn	Drew[m]: Cabal only drops support for (using) old GHCs when forced
2021-10-07 19:29:11	→	norias has joined #haskell
2021-10-07 19:29:14	maerwald[m]	dminuoso: what?
2021-10-07 19:29:15	Drew[m]	Yeah I found the RFC on dropping support for GHC 7
2021-10-07 19:29:37	maerwald[m]	dminuoso: creating the nix shell failed
2021-10-07 19:29:38	merijn	Drew[m]: Note there's 2 forms of support
2021-10-07 19:29:49	maerwald[m]	So yes, it's nix
2021-10-07 19:29:50	merijn	Drew[m]: 1) "can you build Cabal with old GHCs?"
2021-10-07 19:29:59	merijn	Drew[m]: 2) "can you use Cabal to build stuff with old GHCs"
2021-10-07 19:30:18	merijn	Drew[m]: There was recently an accepted proposal to drop GHC 7 support for case 1
2021-10-07 19:30:28	merijn	i.e. you won't be able to compile Cabal using old GHCs
2021-10-07 19:30:41	merijn	There is (currently) no plan to drop support for 7 for case 2
2021-10-07 19:30:46	Drew[m]	Ah, makes sense
2021-10-07 19:30:54	dminuoso	maerwald[m]: in a gitlab ci job there?
2021-10-07 19:31:03	merijn	Since there's no reason why Cabal should be build with the GHC version it uses
2021-10-07 19:31:22	→	doyougnu has joined #haskell
2021-10-07 19:32:58	maerwald[m]	dminuoso: yes
2021-10-07 19:33:16	dminuoso	maerwald[m]: Which one? 
2021-10-07 19:33:52	→	yinghua has joined #haskell
2021-10-07 19:34:22	dminuoso	Are you talking about this one? https://gitlab.haskell.org/haskell/ghcup-hs/-/jobs/811215#L31
2021-10-07 19:36:35	←	robosexual has quit (Quit: Konversation terminated!)
2021-10-07 19:36:49	maerwald[m]	No
2021-10-07 19:37:15	maerwald[m]	That's the one where the config is busted after update 
2021-10-07 19:37:30	→	Morrow has joined #haskell
2021-10-07 19:39:27	→	timCF has joined #haskell
2021-10-07 19:39:42	→	[itchyjunk] has joined #haskell
2021-10-07 19:41:35	→	Heisen has joined #haskell
2021-10-07 19:43:00	←	Heisen has quit (Client Quit)
2021-10-07 19:43:04	→	Sgeo has joined #haskell
2021-10-07 19:43:45	←	Psybur has quit (Remote host closed the connection)
2021-10-07 19:44:46	→	Farzad has joined #haskell
2021-10-07 19:45:42	kuribas	who do you run ghci on the test directory?
2021-10-07 19:48:45	←	agoraphobic_ has quit (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
2021-10-07 19:49:14	←	fuzzypixelz has quit (Quit: Client closed)
2021-10-07 19:51:03	→	agoraphobic has joined #haskell
2021-10-07 19:51:24	dminuoso	kuribas: Think that english is slightly garbled.
2021-10-07 19:51:25	→	Psybur has joined #haskell
2021-10-07 19:51:36	kuribas	s/who/how
2021-10-07 19:52:04	←	timCF has quit (Quit: leaving)
2021-10-07 19:52:07	maerwald	cabal repl --enable-tests?
2021-10-07 19:54:12	Drew[m]	Is it reasonable to write a constraint like this?
2021-10-07 19:54:13	Drew[m]	some-package (>= 0.15 && < 0.18) || ^>= 0.18
2021-10-07 19:54:16	Drew[m]	I want the semantics of ^>= without having to mention every version between the earliest tested version and the latest.
2021-10-07 19:54:37	kuribas	maerwald: thanks that works :)  Now only if emacs had a way to run that...
2021-10-07 19:54:42	→	timCF has joined #haskell
2021-10-07 19:55:58	→	Gurkenglas has joined #haskell
2021-10-07 19:56:20	timCF	Hello! I have a question about `bracket` function. There are multiple versions of it from different packages, for example `base` or `safe-exceptions` or `unliftio`. What's the difference and which one I should use?
2021-10-07 19:56:43	→	chomwitt has joined #haskell
2021-10-07 19:57:00	←	xff0x has quit (Ping timeout: 245 seconds)
2021-10-07 19:58:10	→	xff0x has joined #haskell
2021-10-07 19:58:23	merijn	the unliftio and safe-exceptions function try to deal with async exceptions and lifting monad stacks through it. Whether their way of dealing with those is sensible...depends on your point of view and what you want
2021-10-07 20:00:14	←	abarbu has quit (Read error: No route to host)
2021-10-07 20:03:30	timCF	merijn: so it's basically `base` version, but it just can run in any monad which implements some classes (for example UnliftIO class)?
2021-10-07 20:04:11	←	acidjnk_new has quit (Ping timeout: 252 seconds)
2021-10-07 20:04:35	timCF	maybe you know is there some principle difference between `safe-exceptions` version and `unliftio` version (except different class monad should implement)?
2021-10-07 20:05:29	→	dfg has joined #haskell
2021-10-07 20:05:29	←	dfg has quit (Changing host)
2021-10-07 20:05:29	→	dfg has joined #haskell
2021-10-07 20:05:45	←	hyiltiz has quit (Ping timeout: 245 seconds)
2021-10-07 20:05:48	←	dysfigured has quit (Ping timeout: 252 seconds)
2021-10-07 20:06:43	←	enoq has quit (Quit: enoq)
2021-10-07 20:08:18	→	byorgey has joined #haskell
2021-10-07 20:09:21	merijn	timCF: safe-exceptions handles async exceptions differently
2021-10-07 20:09:30	merijn	Whether it should is a matter of personal opinion
2021-10-07 20:09:32	merijn	Or rather
2021-10-07 20:09:43	merijn	It *tries* to handle async exceptions differently
2021-10-07 20:09:53	merijn	but that only really works if you use the safe-exceptions library everywhere
2021-10-07 20:10:31	→	dudek has joined #haskell
2021-10-07 20:11:47	→	hyiltiz has joined #haskell
2021-10-07 20:13:19	timCF	Ehh, I'm writing in Haskell more than a year, but async exceptions are still pain in a butt. As far as I understood from the source code `unliftio` catches async exception, doing uninterrupable cleanup and then throwing it again. Not so sure about other 2 bracket versions.
2021-10-07 20:17:48	merijn	async exception are always a pain in the butt
2021-10-07 20:18:09	merijn	We haven't found any way (in any language) to do async exceptions well
2021-10-07 20:18:58	dminuoso	timCF: The mind model of unliftio is that you cannot recover from an async exception using its interface.
2021-10-07 20:19:14	dminuoso	Not that its not possible, but you have to be very explicit should you ever want this.
2021-10-07 20:21:35	dminuoso	The state with `mask` is even more annoying
2021-10-07 20:23:17	dminuoso	Rather than calling it `interruptibleMask` and `mask`, they called them `mask` and `uninterruptibleMask`, such that it's not dead obvious from `mask` that its still interruptible in some situations.
2021-10-07 20:23:25	ldlework	i mean try { await foo(); } catch () { //... } is ok
2021-10-07 20:23:59	dminuoso	ldlework: Its not okay in any language. The moment you allow for this, resource management becomes near impossible to do right.
2021-10-07 20:24:12	dminuoso	Or with the right masking you risk dead locking
2021-10-07 20:24:35	timCF	dminuoso: so to do cleanup **and** recovery I should do something like `catch (bracket x y z) h`?
2021-10-07 20:24:47	dminuoso	timCF: well no. so here's the thing:
2021-10-07 20:25:12	←	cfricke has quit (Quit: WeeChat 3.3)
2021-10-07 20:25:19	merijn	ldlework: THat's not really async exceptions
2021-10-07 20:25:29	merijn	ldlework: async exceptions are more like posix signals
2021-10-07 20:25:43	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-10-07 20:25:45	dminuoso	Except posix signals require cooperation to receive them... :p
2021-10-07 20:26:04	dminuoso	And the ones that dont, you cant recover from anyway
2021-10-07 20:26:04	merijn	ldlework: Your example is just "an exception that happened in a primitive that happens to be called async"
2021-10-07 20:27:15	dminuoso	timCF: bracket before after thing = mask $ \restore -> do a <- before; r <- restore (thing a) `onException` after a; _ <- after a; return r
2021-10-07 20:27:40	dminuoso	timCF: So if you just stare at it, naively you might say "oh this is great. so my resource acquisition and release is in a critical section, I cant get interrupted" right?
2021-10-07 20:28:29	←	rtjure has quit (Ping timeout: 245 seconds)
2021-10-07 20:28:43	dminuoso	That is, if we assume mask to mask async exceptions.
2021-10-07 20:28:52	timCF	dminuoso: looks ok then, yes
2021-10-07 20:28:58	dminuoso	timCF: Except it's not true!
2021-10-07 20:29:10	dminuoso	You *can* get interrupted by async exceptions in some situations.
2021-10-07 20:30:01	dminuoso	Which makes for a hilarious mind model. Once you're in whats called "an interruptible operation", async exceptions can pierce your mask and interrupt you.
2021-10-07 20:30:21	dminuoso	So whether brackets protects you from async exceptions really depends on what you're doing inside the resource/release stage.
2021-10-07 20:30:38	→	hnOsmium0001 has joined #haskell
2021-10-07 20:30:47	timCF	dminuoso: So `unliftio` version fixes this?
2021-10-07 20:31:06	dminuoso	Well "fixes" fsvo of fixes.
2021-10-07 20:31:08	→	DNH has joined #haskell
2021-10-07 20:31:08	←	DNH has quit (Client Quit)
2021-10-07 20:31:12	dminuoso	timCF: Lets have a look at why this is
2021-10-07 20:31:38	dminuoso	The main concern now is: what is an "interruptible" action. Well, most IO for starters.
2021-10-07 20:31:54	dminuoso	Or rather some IO.
2021-10-07 20:33:13	dminuoso	There are places where receiving async exceptions is needed due to the internal implementation. Say `takeMVar`
2021-10-07 20:33:56	dminuoso	So if you had something like `mask $ \restore -> do { a <- takeMVar m; .... }` this could actually dead lock if `mask` fully masked off async exceptions.
2021-10-07 20:34:08	dminuoso	But due to the way things work, a lot of things happen to be "interruptible"
2021-10-07 20:35:35	timCF	dminuoso: So if I'm using `unliftio` version - I should be extremely aware of things I'm using on cleanup function?
2021-10-07 20:36:17	dminuoso	timCF: Heh well so unliftio uses uninterruptibleMask, which properly masks async exceptions.. except now you have to be extremely careful to not deadlock!
2021-10-07 20:36:29	dminuoso	Say if you used unliftio mask/bracket, and used takeMVar, you'd deadlock
2021-10-07 20:36:55	timCF	dminuoso: but with `safe-exceptions` version it's not the case I guess, as well as `base` version?
2021-10-07 20:37:24	dminuoso	timCF: the safe-exceptions version is the same
2021-10-07 20:38:36	dminuoso	or at least in that respect.
2021-10-07 20:38:56	timCF	dminuoso: ok, so unliftio and safe-exceptions are full-masked (just using different monad classes) and base version - is not fully masked
2021-10-07 20:38:59	dminuoso	That is, both unliftio and safe-exceptions use the interruptibleMask inside bracket
2021-10-07 20:39:05	dminuoso	well they're not fully masked
2021-10-07 20:39:21	dminuoso	its rather, that some of their primitives use uninterruptibleMask rather than mask
2021-10-07 20:39:26	dminuoso	See following issues:
2021-10-07 20:39:35	dminuoso	https://github.com/fpco/safe-exceptions/issues/3
2021-10-07 20:39:36	dminuoso	https://gitlab.haskell.org/ghc/ghc/-/issues/18899
2021-10-07 20:40:09	←	hyiltiz has quit (Ping timeout: 245 seconds)
2021-10-07 20:41:10	←	merijn has quit (Ping timeout: 245 seconds)
2021-10-07 20:42:04	→	hyiltiz has joined #haskell
2021-10-07 20:42:53	dminuoso	timCF: A far more pressing difference is that base lets you accidentally recover from async exceptions.
2021-10-07 20:43:03	timCF	dminuoso: thanks! But anyway, if I really know that cleanup function is safe, but I still want to recover, is `catch (bracket a c x) h` way to go? As far as I understood all brackets by design should re-throw exception? It's a bit confusing because not reflected in a types
2021-10-07 20:44:47	dminuoso	timCF: and both safe-exceptions, and in the "newer version of it" in unliftio, both by design dont let you recover from async exceptions implicitly/by accident. All the primitives that allow you to do cleanup (say onException) will still operate on async exceptions, but something like catch will not.
2021-10-07 20:46:15	dminuoso	timCF: And yes, this would work.
2021-10-07 20:48:27	←	lortabac has quit (Quit: WeeChat 2.8)
2021-10-07 20:48:41	→	tzh has joined #haskell
2021-10-07 20:52:23	→	Guest12 has joined #haskell
2021-10-07 20:52:44	←	nshepperd has quit (Quit: quit)
2021-10-07 20:52:53	→	nshepperd has joined #haskell
2021-10-07 20:54:01	←	superbil has quit (Ping timeout: 268 seconds)
2021-10-07 20:54:10	timCF	dminuoso: this a bit remings me Erlang process exit signals, like :kill will allow process to terminate, but :brutal_kill signal will not. Brobably similar way it works in Linux in general
2021-10-07 20:55:46	←	euandreh has quit (Ping timeout: 245 seconds)
2021-10-07 20:56:33	←	Morrow has quit (Read error: Connection reset by peer)
2021-10-07 20:56:51	→	euandreh has joined #haskell
2021-10-07 20:57:00	→	benin03693230163 has joined #haskell
2021-10-07 20:59:12	←	eggplantade has quit (Remote host closed the connection)
2021-10-07 21:03:18	→	zebrag has joined #haskell
2021-10-07 21:03:26	←	MidAutumnMoon has quit (Quit: Ping timeout (120 seconds))
2021-10-07 21:03:40	→	MidAutumnMoon has joined #haskell
2021-10-07 21:04:40	→	werneta has joined #haskell
2021-10-07 21:04:43	→	superbil has joined #haskell
2021-10-07 21:06:53	←	jonathanx has quit (Ping timeout: 252 seconds)
2021-10-07 21:07:15	→	rtjure has joined #haskell
2021-10-07 21:07:24	←	benin03693230163 has quit (Quit: The Lounge - https://thelounge.chat)
2021-10-07 21:09:00	→	eggplantade has joined #haskell
2021-10-07 21:11:03	→	Null_A has joined #haskell
2021-10-07 21:13:16	←	eggplantade has quit (Ping timeout: 245 seconds)
2021-10-07 21:14:44	→	arjun has joined #haskell
2021-10-07 21:15:16	arjun	so i've been helping a friend, and that involves me writing clojure
2021-10-07 21:15:39	←	wroathe has quit (Ping timeout: 252 seconds)
2021-10-07 21:15:44	arjun	didn't realize how much i missed the type system untill it's gone
2021-10-07 21:16:01	←	m1dnight has quit (Quit: WeeChat 3.1)
2021-10-07 21:16:36	→	m1dnight has joined #haskell
2021-10-07 21:16:45	maerwald	clojure will never die out I think
2021-10-07 21:16:57	maerwald	not many people love it
2021-10-07 21:17:02	maerwald	but those who do, do so radically
2021-10-07 21:17:09	maerwald	it's scary
2021-10-07 21:17:11	arjun	so, like emacs
2021-10-07 21:18:51	arjun	you know any scary people maerwald ? : O
2021-10-07 21:19:29	arjun	scary clojure people&
2021-10-07 21:19:33	arjun	people*
2021-10-07 21:19:34	arjun	ffs
2021-10-07 21:21:00	←	phma has quit (Read error: Connection reset by peer)
2021-10-07 21:21:54	→	phma has joined #haskell
2021-10-07 21:21:59	←	dschrempf has quit (Quit: WeeChat 3.3)
2021-10-07 21:22:25	←	MQ-17J has quit (Ping timeout: 245 seconds)
2021-10-07 21:22:40	←	timCF has quit (Quit: leaving)
2021-10-07 21:23:58	kuribas	What's the command to load a test file into ghci using cabal or stack?
2021-10-07 21:24:46	sclv	`:load` or `:add`
2021-10-07 21:25:03	sclv	that's just a straight ghci command, regardless of cabal or stack or whatever invokes it
2021-10-07 21:25:20	←	rkrishnan has quit (Ping timeout: 245 seconds)
2021-10-07 21:26:26	←	Guest12 has quit (Quit: Client closed)
2021-10-07 21:26:45	←	dajoer has quit (Quit: leaving)
2021-10-07 21:27:21	←	[itchyjunk] has quit (Remote host closed the connection)
2021-10-07 21:27:59	←	chele has quit (Remote host closed the connection)
2021-10-07 21:28:27	→	MQ-17J has joined #haskell
2021-10-07 21:29:11	kuribas	sclv: how would that know I want the test modules?
2021-10-07 21:29:25	sclv	well you have to pass it explicitly those modules
2021-10-07 21:29:40	sclv	i'm not sure what exactly you're asking to do
2021-10-07 21:29:54	sclv	load all the modules of the test stanza from a cabal file if you don't have them loaded?
2021-10-07 21:30:06	kuribas	:l tests/ActList.hs worked...
2021-10-07 21:30:13	sclv	great
2021-10-07 21:30:40	kuribas	sadly not from emacs...
2021-10-07 21:32:13	→	Guest62 has joined #haskell
2021-10-07 21:32:18	←	xiongxin has quit (Ping timeout: 265 seconds)
2021-10-07 21:32:28	→	xiongxin has joined #haskell
2021-10-07 21:32:30	←	Guest62 has quit (Client Quit)
2021-10-07 21:32:57	→	fuzzypixelz has joined #haskell
2021-10-07 21:33:00	←	xiongxin has quit (Read error: Connection reset by peer)
2021-10-07 21:33:59	→	kupi has joined #haskell
2021-10-07 21:34:23	kupi	hi, is there a way in haskell to generate code like this: https://gist.github.com/theqp/9a450ffdc6dbb3de77a275c8debfb1eb
2021-10-07 21:34:26	kupi	to this: https://gist.github.com/theqp/bf5061b6e9202b70a97133888e770550
2021-10-07 21:34:31	kupi	at compile time?
2021-10-07 21:35:11	kuribas	ugh, why is the documentation for hspec smallcheck so terrible?
2021-10-07 21:35:20	kuribas	Nothing on how to change the depth.
2021-10-07 21:35:39	→	shapr` has joined #haskell
2021-10-07 21:35:43	kuribas	Not even a google search shows anything useful.
2021-10-07 21:36:45	←	Vajb has quit (Read error: Connection reset by peer)
2021-10-07 21:36:55	→	wroathe has joined #haskell
2021-10-07 21:36:55	←	wroathe has quit (Changing host)
2021-10-07 21:36:55	→	wroathe has joined #haskell
2021-10-07 21:37:11	←	dmwit has quit (Ping timeout: 268 seconds)
2021-10-07 21:37:13	→	Vajb has joined #haskell
2021-10-07 21:37:17	←	shapr has quit (Ping timeout: 265 seconds)
2021-10-07 21:37:32	←	hyiltiz has quit (Remote host closed the connection)
2021-10-07 21:37:42	→	eggplantade has joined #haskell
2021-10-07 21:38:27	→	dmwit has joined #haskell
2021-10-07 21:38:41	→	hyiltiz has joined #haskell
2021-10-07 21:39:26	kuribas	"The packages http://hackage.haskell.org/package/tasty-smallcheck and http://hackage.haskell.org/package/hspec-smallcheck provide integration with Tasty and HSpec, two popular testing frameworks."
2021-10-07 21:39:33	kuribas	Not even a little example of how to use it.
2021-10-07 21:40:23	←	phma has quit (Read error: Connection reset by peer)
2021-10-07 21:42:24	→	phma has joined #haskell
2021-10-07 21:42:28	→	benin03693230163 has joined #haskell
2021-10-07 21:43:11	←	wonko has quit (Ping timeout: 252 seconds)
2021-10-07 21:43:15	→	DNH has joined #haskell
2021-10-07 21:45:31	←	kuribas has quit (Remote host closed the connection)
2021-10-07 21:46:47	←	kawpuh has quit (Quit: Ping timeout (120 seconds))
2021-10-07 21:47:01	→	kawpuh has joined #haskell
2021-10-07 21:47:58	→	ridcully has joined #haskell
2021-10-07 21:48:01	←	berberman_ has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-10-07 21:48:40	←	NotIndonesian has quit (Ping timeout: 246 seconds)
2021-10-07 21:48:42	←	wroathe has quit (Ping timeout: 252 seconds)
2021-10-07 21:48:51	←	phma has quit (Read error: Connection reset by peer)
2021-10-07 21:49:33	←	Andrew has quit (Remote host closed the connection)
2021-10-07 21:49:43	←	nitrix has quit (Ping timeout: 246 seconds)
2021-10-07 21:49:50	→	phma has joined #haskell
2021-10-07 21:50:11	←	jjhoo has quit (Ping timeout: 265 seconds)
2021-10-07 21:50:19	←	bbear has quit (Ping timeout: 250 seconds)
2021-10-07 21:50:19	←	ridcully_ has quit (Ping timeout: 264 seconds)
2021-10-07 21:50:38	→	bbear has joined #haskell
2021-10-07 21:50:57	→	nitrix has joined #haskell
2021-10-07 21:51:08	→	pierrot_ has joined #haskell
2021-10-07 21:51:10	←	ormaaj has quit (Ping timeout: 260 seconds)
2021-10-07 21:51:14	→	AndrewYu has joined #haskell
2021-10-07 21:51:18	←	pierrot has quit (Ping timeout: 265 seconds)
2021-10-07 21:51:22	←	voldial has quit (Ping timeout: 268 seconds)
2021-10-07 21:51:24	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-10-07 21:51:28	←	Franciman has quit (Ping timeout: 246 seconds)
2021-10-07 21:51:29	→	NotIndonesian has joined #haskell
2021-10-07 21:51:45	→	MQ-17J has joined #haskell
2021-10-07 21:51:45	←	hjulle[m] has quit (Ping timeout: 260 seconds)
2021-10-07 21:51:45	←	soft has quit (Ping timeout: 260 seconds)
2021-10-07 21:51:46	←	Christoph[m] has quit (Ping timeout: 260 seconds)
2021-10-07 21:51:46	←	oak- has quit (Ping timeout: 260 seconds)
2021-10-07 21:51:46	←	wysteriary[m] has quit (Ping timeout: 260 seconds)
2021-10-07 21:51:46	←	reza[m] has quit (Ping timeout: 260 seconds)
2021-10-07 21:51:46	←	xosdy[m] has quit (Ping timeout: 260 seconds)
2021-10-07 21:51:46	←	sm has quit (Ping timeout: 260 seconds)
2021-10-07 21:51:47	←	Tavi[m] has quit (Ping timeout: 260 seconds)
2021-10-07 21:51:47	←	fcortesi has quit (Ping timeout: 260 seconds)
2021-10-07 21:51:47	←	reddishblue[m] has quit (Ping timeout: 260 seconds)
2021-10-07 21:51:47	←	hsek[m] has quit (Ping timeout: 260 seconds)
2021-10-07 21:51:47	←	ixlun has quit (Ping timeout: 260 seconds)
2021-10-07 21:51:47	←	zfnmxt has quit (Ping timeout: 260 seconds)
2021-10-07 21:51:47	←	peddie has quit (Ping timeout: 260 seconds)
2021-10-07 21:51:47	←	ServerStatsDisco has quit (Ping timeout: 260 seconds)
2021-10-07 21:51:47	←	Tisoxin has quit (Ping timeout: 260 seconds)
2021-10-07 21:51:59	←	[exa] has quit (Ping timeout: 268 seconds)
2021-10-07 21:52:07	←	benin03693230163 has quit (Ping timeout: 265 seconds)
2021-10-07 21:52:16	←	typedfern_ has quit (Ping timeout: 265 seconds)
2021-10-07 21:52:20	←	kevin[m]1 has quit (Ping timeout: 260 seconds)
2021-10-07 21:52:23	→	berberman has joined #haskell
2021-10-07 21:53:54	←	Cajun has quit (Quit: Client closed)
2021-10-07 21:54:28	→	[exa] has joined #haskell
2021-10-07 21:58:14	ℹ	absence_ is now known as absence
2021-10-07 21:59:31	←	MQ-17J has quit (Ping timeout: 265 seconds)
2021-10-07 22:01:34	absence	anyone know how i can make this TH code compile? https://pastebin.com/zEjN3TiL
2021-10-07 22:02:02	→	jjhoo has joined #haskell
2021-10-07 22:02:16	←	azeem has quit (Ping timeout: 265 seconds)
2021-10-07 22:03:22	→	ormaaj has joined #haskell
2021-10-07 22:04:10	→	xosdy[m] has joined #haskell
2021-10-07 22:04:18	→	ub has joined #haskell
2021-10-07 22:04:37	→	MQ-17J has joined #haskell
2021-10-07 22:04:39	ℹ	shapr` is now known as shapr
2021-10-07 22:04:42	→	typedfern_ has joined #haskell
2021-10-07 22:04:59	→	wroathe has joined #haskell
2021-10-07 22:04:59	←	wroathe has quit (Changing host)
2021-10-07 22:04:59	→	wroathe has joined #haskell
2021-10-07 22:05:05	→	Tisoxin has joined #haskell
2021-10-07 22:05:36	dsal	Does anyone here use persistent and can help convince me it's a good idea?
2021-10-07 22:05:42	→	Franciman has joined #haskell
2021-10-07 22:05:48	→	zfnmxt has joined #haskell
2021-10-07 22:06:05	→	reza[m] has joined #haskell
2021-10-07 22:07:03	→	voldial has joined #haskell
2021-10-07 22:09:09	→	reddishblue[m] has joined #haskell
2021-10-07 22:09:40	←	wroathe has quit (Ping timeout: 265 seconds)
2021-10-07 22:09:41	→	azeem has joined #haskell
2021-10-07 22:09:49	byorgey	absence: does it help if you add A(..) to the import list on line 12?
2021-10-07 22:10:00	→	hjulle[m] has joined #haskell
2021-10-07 22:10:18	→	slack1256 has joined #haskell
2021-10-07 22:11:17	absence	byorgey: unfortunately not
2021-10-07 22:11:25	→	ServerStatsDisco has joined #haskell
2021-10-07 22:11:55	byorgey	absence: hmm, I don't know then
2021-10-07 22:12:47	→	sm has joined #haskell
2021-10-07 22:13:07	→	peddie has joined #haskell
2021-10-07 22:13:07	monochrom	I wonder if it is one of those TH's "declaration groups" business.
2021-10-07 22:13:15	absence	i can work around it by pattern matching on the A instead of using the accessor, but it seems weird that it shouldn't work
2021-10-07 22:13:39	→	ixlun has joined #haskell
2021-10-07 22:13:42	→	wysteriary[m] has joined #haskell
2021-10-07 22:13:48	→	soft has joined #haskell
2021-10-07 22:14:04	→	oak- has joined #haskell
2021-10-07 22:14:08	int-e	meh, missing extensions, missing imports
2021-10-07 22:14:26	→	Christoph[m] has joined #haskell
2021-10-07 22:14:27	→	fcortesi has joined #haskell
2021-10-07 22:15:03	monochrom	And yeah it's a bit difficult to reproduce the error given non-self-contained example. :)
2021-10-07 22:15:05	→	hsek[m] has joined #haskell
2021-10-07 22:15:46	→	wonko has joined #haskell
2021-10-07 22:16:25	absence	sorry about that, i copied it out from a bigger project
2021-10-07 22:16:27	int-e	absence: it compiles with 8.10 and 9.0?
2021-10-07 22:18:09	absence	int-e: oh really? i'm on 8.10.7.. perhaps there's some unfortunate interaction with any of the other stuff in the project i copied the code from
2021-10-07 22:18:35	int-e	*checks* 8.10 is 8.10.7
2021-10-07 22:19:28	→	Tavi[m] has joined #haskell
2021-10-07 22:20:27	←	Codaraxis has quit (Remote host closed the connection)
2021-10-07 22:20:27	absence	int-e: thanks for the info, it's good to know it should've worked. must be something weird about the project, i'll fiddle around with it
2021-10-07 22:20:28	←	Vajb has quit (Read error: Connection reset by peer)
2021-10-07 22:20:43	→	wroathe has joined #haskell
2021-10-07 22:20:43	←	wroathe has quit (Changing host)
2021-10-07 22:20:43	→	wroathe has joined #haskell
2021-10-07 22:21:01	int-e	absence: I shouldn't be upset but I am a little... I mean, your paste lies.
2021-10-07 22:21:21	monochrom	On bad days I would be upset too.
2021-10-07 22:21:32	→	Vajb has joined #haskell
2021-10-07 22:21:56	←	ec has quit (Ping timeout: 276 seconds)
2021-10-07 22:22:03	monochrom	Whenever you see me harping again "see, programmers are unscientific", that's when I'm upset about this. :)
2021-10-07 22:22:13	→	kevin[m]1 has joined #haskell
2021-10-07 22:31:02	danso	i find gabriel gonzalez's post "scrap your typeclasses" really informative and compelling: https://www.haskellforall.com/2012/05/scrap-your-type-classes.html 
2021-10-07 22:31:12	danso	has there been much follow-up discussion to this, beyond the comments there? 
2021-10-07 22:31:37	danso	specifically, i'm wondering how haskell could support polymorphic operators without typeclasses 
2021-10-07 22:32:36	monochrom	I think "Edit: My opinion on type classes has mellowed since I wrote this post" sums it up.
2021-10-07 22:33:16	danso	i saw that line, but there's no information there
2021-10-07 22:33:46	monochrom	In practice, only beginners, and only the subset of beginners coming from OOP, go overboard with classes, and would need to know this alternative.
2021-10-07 22:34:49	monochrom	Ah, I guess I have a life-long experience to help me understand the weight of that one single sentence.
2021-10-07 22:34:57	→	emf has joined #haskell
2021-10-07 22:35:29	dminuoso	Honestly typeclasses are weird in that it's not quite obvious how or when they are useful.
2021-10-07 22:35:45	dminuoso	And it's really difficult to give precise advise to newcomers when to use them or when not.
2021-10-07 22:35:57	monochrom	When I was young and arrogant and thought I knew it all, I wrote similar articles too.  Articles that say "this thing that everyone does is overrated. here is the simpler better alternative I use."
2021-10-07 22:36:46	dminuoso	So now you are old, grumpy, still think you know better than your students, but instead you hold lectures now?
2021-10-07 22:36:47	int-e	danso: if your code relies in instantiation a lot (as printf type of things do) it'll be a minor nightmare to use
2021-10-07 22:36:53	int-e	danso: you'll be like  _printf (make'PrintF'Double (make'PrintF'Float (make'PrintF'String (make'PrintF'Base)))) "%s %f %f" "abc" 1.0 42.0
2021-10-07 22:37:03	int-e	Which is kind of what GHC does under the hood when finding the PrintFArg (or whatever that class is called) instance to use for  printf "%s %f %f" "abc" 1.0 42.0 :: IO ()
2021-10-07 22:37:14	dminuoso	monochrom: Seems like not much has changed. :p
2021-10-07 22:37:18	monochrom	Haha
2021-10-07 22:37:41	monochrom	I don't think I know better than my students.
2021-10-07 22:37:49	←	fuzzypixelz has quit (Ping timeout: 256 seconds)
2021-10-07 22:38:01	monochrom	I have observed cases when I outwit my students, and cases when they outwit me.
2021-10-07 22:38:01	int-e	. o O ( Back in my days we respected our elders. )
2021-10-07 22:38:06	dminuoso	I know, but I had to sound snarky for the humor.
2021-10-07 22:38:22	monochrom	Statistically the former is more frequent but I no longer assume. I listen.
2021-10-07 22:38:32	monochrom	Yeah heehee
2021-10-07 22:40:07	monochrom	Here is an example of young arrogant dismissive me: https://www.vex.net/~trebla/stuff/TeX.html
2021-10-07 22:41:05	int-e	dvips, have not seen that in a long long time
2021-10-07 22:42:14	[exa]	dvips the mark of elders
2021-10-07 22:43:11	dminuoso	Backslash is a elegant weapon for a more civilized age.
2021-10-07 22:43:26	int-e	there were dedicated dvi viewers too :)
2021-10-07 22:44:09	Franciman	monochrom: how do you deal with the cases when you get outwitted?
2021-10-07 22:44:41	monochrom	At any rate, Gonzalez's article can be understood from the technical POV as rediscovering that classes can be implemented by dictionary passing. Dictionary passing is well-known, so no further discussion.
2021-10-07 22:44:59	int-e	. o O ( and direct dvi to dot matrix printing )
2021-10-07 22:45:28	monochrom	"hahaha beautiful/cool/awesome"
2021-10-07 22:45:36	←	mbuf has quit (Quit: Leaving)
2021-10-07 22:45:37	[exa]	dotmatrix printer the music of the elders
2021-10-07 22:45:52	geekosaur	and indirecting through gs for the cases there wasn't a direct dvi to dot matrix for
2021-10-07 22:46:15	→	lavaman has joined #haskell
2021-10-07 22:46:36	int-e	well, gs survived and is still part of modern printing pipelines
2021-10-07 22:46:45	Skyfire	int-e: Does GHC has hardcoded magic to handle “printf”, just like OCaml?
2021-10-07 22:46:55	int-e	Skyfire: no
2021-10-07 22:47:47	geekosaur	and there's several printf implementations, from the arcane to the truly complex
2021-10-07 22:47:47	int-e	Skyfire: there's a type-classed based implementation in Text.Printf which is driven by the types of the printed values; it checks the format string at runtime.
2021-10-07 22:47:49	[exa]	Skyfire: you can utilize typeclasses to make a function that swallows a variable number of arguments, which is basically the haskell `printf`.
2021-10-07 22:48:09	Skyfire	Oh, the format string is checked at runtime. I see.
2021-10-07 22:48:13	int-e	There's probably a couple of TemplateHaskell based ones that check types statically.
2021-10-07 22:48:17	Skyfire	Thanks, int-e and [exa].
2021-10-07 22:49:50	[exa]	honestly this is one of the few usecases where TH makes sense for me, there's even a nice package called roughly "string interpolation" that does this stuff.. (The other major usecase is the codegen for lenses)
2021-10-07 22:50:32	[exa]	uh seems like it's just `interpolate`. Skyfire that might be a nice alternative to printf.
2021-10-07 22:50:40	←	lavaman has quit (Ping timeout: 260 seconds)
2021-10-07 22:51:38	int-e	[exa]: Oh I wasn't judging. I just never investigated the situation because usually either Text.Printf is good enough or I want fully fledged pretty-printing anyway.
2021-10-07 22:52:44	[exa]	int-e: ah I didn't want to imply you were judging :] sorry if it looked so
2021-10-07 22:54:01	mortemeur	is it normal for haskell-language-server to cause issues?
2021-10-07 22:54:27	geekosaur	yes, it's still a bit unstable at times
2021-10-07 22:54:38	geekosaur	still under heavy development
2021-10-07 22:54:59	geekosaur	sometimes you just have to kill and restart it because it becomes very confused
2021-10-07 22:55:05	[exa]	int-e: (probably mixed too much of my dislike of TH and like of the interpolate package together :D )
2021-10-07 22:55:10	dminuoso	[exa]: TH is in my opinion underused.
2021-10-07 22:55:28	int-e	[exa]: yeah we should stop apologizing to each other then :)
2021-10-07 22:55:34	dminuoso	There's too much Generic code that should either have received a regular code generator or TH instead. Or if TH helpers do exist like in aeson, they're weirdly never used.
2021-10-07 22:55:35	mortemeur	geekosaur: thank you. do you use it? are you used to restarting it?
2021-10-07 22:55:36	[exa]	:]
2021-10-07 22:56:44	geekosaur	I don't use it because I don't have  alot of Haskell code and it's all simple enough that I don't need it, plus I come from a time before IDEs (see /nick :) I have seen people here who are fighting with a confused HLS and end up needing to kill and restart it
2021-10-07 22:56:46	[exa]	dminuoso: likely true, actually I might be biased by the sight of historical misuses
2021-10-07 22:57:27	geekosaur	my biggest code base is xmonad-contrib and I know it well enough that I don't really need an IDE at this point
2021-10-07 22:57:50	geekosaur	it's large but mostly simple
2021-10-07 22:58:09	int-e	I wish TH could separate compile time and runtime dependencies, but it's a hard problem.
2021-10-07 22:59:59	[exa]	that's more of a cabal job right?
2021-10-07 23:00:17	[exa]	ah no, you actually need a special include for that
2021-10-07 23:00:22	dminuoso	int-e: Yeah, Ive stumbled over linker bugs that could not clearly be attributed to GHC or Cabal, things that would simply panic GHC, and its simply because of the way TH works..
2021-10-07 23:00:30	int-e	[exa]: A bit of both
2021-10-07 23:02:14	←	arjun has quit (Ping timeout: 245 seconds)
2021-10-07 23:04:46	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-10-07 23:05:13	int-e	[exa]: what I meant is that you easily end up with heavy dependencies (say you want to support some custom splices, so you need to do your own parsing of Haskell code (using a quasi-quoter) and that means depending on haskell-src-exts or ghc-as-a-library...) and while that stuff is only needed at compile time, these dependencies will be linked with the final program
2021-10-07 23:05:20	→	MQ-17J has joined #haskell
2021-10-07 23:06:20	dminuoso	int-e: I think this could be avoided if GHC had an additional TH mode, one that would splice into the AST, modify the source files, and then be done.
2021-10-07 23:06:28	int-e	So we'd need a variant of `import` just for compile time, for TH.
2021-10-07 23:06:40	dminuoso	Which is something I'd really want for a couple reasons.
2021-10-07 23:06:42	geekosaur	sadly zeroth turned out to be unmaintainable
2021-10-07 23:06:53	←	emf has quit (Read error: Connection reset by peer)
2021-10-07 23:06:55	int-e	dminuoso: that's not addressing the root cause
2021-10-07 23:07:01	geekosaur	(TH as a preprocessor)
2021-10-07 23:07:11	→	emf has joined #haskell
2021-10-07 23:07:17	c_wraith	int-e: there's already a proposal for that in the works
2021-10-07 23:07:29	c_wraith	wait, you're the one implementing it, aren't you?
2021-10-07 23:07:29	int-e	c_wraith: yeah I think I saw at least one of those
2021-10-07 23:07:53	sclv	is there a proposal for exposing ghc being able to directly parse to and emit th ast?
2021-10-07 23:07:55	int-e	and it'll be exciting if it ever manifests :P
2021-10-07 23:07:57	c_wraith	Or am I misremembering the discussion badly? :)
2021-10-07 23:08:04	sclv	that's what I'd _really_ like
2021-10-07 23:08:14	int-e	c_wraith: I'm not. Maybe int-index?
2021-10-07 23:08:21	c_wraith	ah, yes.  that's it.
2021-10-07 23:09:19	c_wraith	sclv: Well, there's a project in the works to unify the template-haskell AST with the AST ghc uses internally
2021-10-07 23:09:36	←	eggplantade has quit (Remote host closed the connection)
2021-10-07 23:09:53	c_wraith	sclv: though IIUC that is sort of on pause due to performance issues with the approach they were trying
2021-10-07 23:09:55	←	wroathe has quit (Ping timeout: 260 seconds)
2021-10-07 23:10:05	int-e	oh https://hackage.haskell.org/package/derive looks pretty dead :/
2021-10-07 23:10:09	←	Skyfire has quit (Quit: WeeChat 3.3)
2021-10-07 23:10:38	→	merijn has joined #haskell
2021-10-07 23:11:03	int-e	pointing to generics as an alternative, which kind of brings this discussion around a full circle
2021-10-07 23:15:36	→	ec has joined #haskell
2021-10-07 23:16:42	→	Skyfire has joined #haskell
2021-10-07 23:17:42	←	bontaq has quit (Ping timeout: 268 seconds)
2021-10-07 23:20:43	←	max22- has quit (Ping timeout: 246 seconds)
2021-10-07 23:21:16	→	eggplantade has joined #haskell
2021-10-07 23:21:40	←	Flonk has quit (Quit: Ping timeout (120 seconds))
2021-10-07 23:22:05	→	Flonk has joined #haskell
2021-10-07 23:23:43	→	timCF has joined #haskell
2021-10-07 23:23:51	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-10-07 23:27:25	←	Gurkenglas has quit (Ping timeout: 245 seconds)
2021-10-07 23:28:36	←	jpds has quit (Remote host closed the connection)
2021-10-07 23:29:01	→	jpds has joined #haskell
2021-10-07 23:39:50	ℹ	irc: disconnected from server
2021-10-07 23:40:10	→	oxide has joined #haskell
2021-10-07 23:40:10	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-10-07 23:40:10	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-10-07 23:40:10	ℹ	Channel #haskell: 741 nicks (1 op, 0 voices, 740 normals)
2021-10-07 23:40:10	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-10-07 23:40:16	←	myShoggoth has quit (Read error: Connection reset by peer)
2021-10-07 23:40:35	→	myShoggoth has joined #haskell
2021-10-07 23:40:35	←	ec has quit (Ping timeout: 276 seconds)
2021-10-07 23:44:44	←	merijn has quit (Ping timeout: 245 seconds)
2021-10-07 23:44:44	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-10-07 23:45:19	→	MQ-17J has joined #haskell
2021-10-07 23:45:59	→	ec has joined #haskell
2021-10-07 23:49:30	←	alzgh has quit (Remote host closed the connection)
2021-10-07 23:49:51	→	alzgh has joined #haskell
2021-10-07 23:52:26	←	Alex_test has quit (Ping timeout: 245 seconds)
2021-10-07 23:53:25	←	_xor has quit (Read error: Connection reset by peer)
2021-10-07 23:53:45	→	_xor has joined #haskell
2021-10-07 23:55:03	→	max22- has joined #haskell
2021-10-07 23:56:49	←	AlexZenon has quit (Ping timeout: 245 seconds)
2021-10-07 23:57:42	→	econo has joined #haskell
2021-10-07 23:58:08	→	pavonia has joined #haskell
2021-10-07 23:58:41	→	Alex_test has joined #haskell
2021-10-07 23:59:37	→	AlexZenon has joined #haskell
2021-10-08 00:00:31	zwro[m]	is there a class for "unliftable" types? eg: class Unliftable w where unlift :: w a -> a
2021-10-08 00:00:59	dminuoso	What would "unlift" even mean?
2021-10-08 00:01:04	dminuoso	What does that do?
2021-10-08 00:01:10	int-e	"extract" ala comonads?
2021-10-08 00:01:23	dminuoso	There is Copointed I guess then.
2021-10-08 00:01:30	dminuoso	https://hackage.haskell.org/package/pointed-5.0.2/docs/Data-Copointed.html#t:Copointed
2021-10-08 00:02:46	zwro[m]	nice, thanks!
2021-10-08 00:05:39	←	Null_A has quit (Ping timeout: 252 seconds)
2021-10-08 00:07:40	←	myShoggoth has quit (Ping timeout: 260 seconds)
2021-10-08 00:08:25	←	hyiltiz has quit (Ping timeout: 265 seconds)
2021-10-08 00:10:42	←	yinghua has quit (Read error: Connection reset by peer)
2021-10-08 00:11:00	→	yinghua has joined #haskell
2021-10-08 00:14:14	→	wroathe has joined #haskell
2021-10-08 00:14:14	←	wroathe has quit (Changing host)
2021-10-08 00:14:14	→	wroathe has joined #haskell
2021-10-08 00:15:46	←	_xor has quit (Read error: Connection reset by peer)
2021-10-08 00:16:12	→	_xor has joined #haskell
2021-10-08 00:24:08	←	ec has quit (Ping timeout: 276 seconds)
2021-10-08 00:25:44	→	dschrempf has joined #haskell
2021-10-08 00:27:56	←	dschrempf has quit (Client Quit)
2021-10-08 00:29:36	→	ec has joined #haskell
2021-10-08 00:43:12	→	hyiltiz has joined #haskell
2021-10-08 00:43:19	←	hendursa1 has quit (Quit: hendursa1)
2021-10-08 00:43:37	←	geekosaur has quit (Remote host closed the connection)
2021-10-08 00:43:51	→	hendursaga has joined #haskell
2021-10-08 00:44:31	←	norias has quit (Ping timeout: 245 seconds)
2021-10-08 00:45:58	→	geekosaur has joined #haskell
2021-10-08 00:47:39	←	hyiltiz has quit (Ping timeout: 245 seconds)
2021-10-08 00:54:40	→	DNH has joined #haskell
2021-10-08 00:56:05	←	neurocyte0132889 has quit (Quit: The Lounge - https://thelounge.chat)
2021-10-08 00:56:22	→	myShoggoth has joined #haskell
2021-10-08 00:57:11	→	hyiltiz has joined #haskell
2021-10-08 01:07:14	←	hyiltiz has quit (Ping timeout: 245 seconds)
2021-10-08 01:09:28	←	wonko has quit (Ping timeout: 265 seconds)
2021-10-08 01:10:18	←	ec has quit (Ping timeout: 276 seconds)
2021-10-08 01:11:12	→	Gurkenglas has joined #haskell
2021-10-08 01:13:50	→	Tuplanolla has joined #haskell
2021-10-08 01:14:14	→	ec has joined #haskell
2021-10-08 01:24:38	→	hatds has joined #haskell
2021-10-08 01:26:46	←	hatds has quit (Client Quit)
2021-10-08 01:34:44	→	vicfred has joined #haskell
2021-10-08 01:34:45	←	xff0x has quit (Ping timeout: 252 seconds)
2021-10-08 01:34:56	←	juhp has quit (Ping timeout: 245 seconds)
2021-10-08 01:35:39	→	xff0x has joined #haskell
2021-10-08 01:35:41	→	hatds has joined #haskell
2021-10-08 01:37:55	→	juhp has joined #haskell
2021-10-08 01:38:30	←	hatds has quit (Client Quit)
2021-10-08 01:39:29	→	bdaed has joined #haskell
2021-10-08 01:41:16	→	tfeb has joined #haskell
2021-10-08 01:41:46	→	merijn has joined #haskell
2021-10-08 01:44:55	←	tfeb has quit (Client Quit)
2021-10-08 01:48:02	←	raehik has quit (Quit: WeeChat 3.3)
2021-10-08 01:48:42	→	raehik has joined #haskell
2021-10-08 01:50:36	→	jtomas_ has joined #haskell
2021-10-08 01:52:22	Athas	Is there a good way to write megaparsec-based parsers that parse text where every line has a certain prefix?
2021-10-08 01:52:36	←	kupi has quit (Quit: Connection closed for inactivity)
2021-10-08 01:52:39	←	jtomas has quit (Ping timeout: 245 seconds)
2021-10-08 01:52:46	Athas	For example, consider parsing markup inside blocks of Haskell line comments.
2021-10-08 01:53:26	Athas	(Assuming for simplicity that the line comments all start in the first column.)
2021-10-08 01:56:00	→	_ht has joined #haskell
2021-10-08 01:56:26	←	ec has quit (Ping timeout: 276 seconds)
2021-10-08 01:56:40	←	mc47 has quit (Remote host closed the connection)
2021-10-08 01:56:47	jackdk	can someone please help me fetch an updated version of a package using cabal.project? I checked out https://github.com/gilt/kms-s3 , added  https://www.irccloud.com/pastebin/9q3l4xUX/cabal.project and ran `cabal build`. After fetching the repository and building the packages in cabal.project, it claims to be unable to find modules provided by those packages (which are definitely listed in build-depends)
2021-10-08 01:57:35	dsal	Athas: thats just `parsePrefix *> parsething`
2021-10-08 01:57:57	Athas	dsal: I want the main part of the parser to be ignorant of the fact that a prefix might exist.
2021-10-08 01:58:23	Athas	E.g. I want to write an expression parser that just skips "whitespace" or whatever, which also transparently would skip the prefix, if any.
2021-10-08 01:58:41	Athas	Also, I want the parser to be configurable in whether there is a prefix or not.
2021-10-08 01:58:57	dsal	I'm sure you could make that part of your whitespace consumer.  It seems slightly weird.
2021-10-08 01:59:22	dsal	Any horizontal spaces or a newline and an optional prefix and any horizontal whitespace.
2021-10-08 01:59:36	Athas	What I have done now is parameterise my parser on what it considers whitespace, but this is verbose and clumsy.
2021-10-08 01:59:56	sclv	c_wraith: even without that approach, just being able to get the th ast directly would bypass the need for haskell-src-meta, which would obviate the biggest source of why people have huge TH-time deps not linked in
2021-10-08 02:00:03	dsal	Sure, but that's exactly what you're asking for.  "whitespace" just means "the part you shouldn't pay attention to"
2021-10-08 02:00:03	←	chomwitt has quit (Ping timeout: 252 seconds)
2021-10-08 02:00:09	sclv	and furthermore, it would make the whole quoting ecosystem much more robust
2021-10-08 02:00:33	←	slack1256 has quit (Ping timeout: 265 seconds)
2021-10-08 02:00:49	→	ec has joined #haskell
2021-10-08 02:01:56	→	lavaman has joined #haskell
2021-10-08 02:02:43	Athas	Maybe the easiest solution is to write a separate parser that reads the entire block, strips the prefixes, passes the result to megaparsec, and then messes with any parse errors that occur to add back the prefix.
2021-10-08 02:02:47	c_wraith	I mean, that's what I was getting at.  When those are unified, the GHC parser could in theory be used directly in TH code, which would be nicer than having separate packages that need to be kept in sync with ghc and TH
2021-10-08 02:03:02	Athas	Looks like megaparsec has a pstateLinePrefix in PosState to help with this.
2021-10-08 02:03:24	→	acidjnk_new has joined #haskell
2021-10-08 02:04:06	sclv	right, i don't disagree. i'm just suggesting that well short of unification we could still have a win :-)
2021-10-08 02:04:36	sclv	although maybe without unification the code bloat to ghc would be too high (if it implmemented the translation internally while keeping two asts)
2021-10-08 02:06:24	←	lavaman has quit (Ping timeout: 245 seconds)
2021-10-08 02:06:24	→	libertyprime has joined #haskell
2021-10-08 10:36:33	ℹ	irc: disconnected from server
2021-10-08 10:36:53	→	oxide has joined #haskell
2021-10-08 10:36:53	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-10-08 10:36:53	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-10-08 10:36:53	ℹ	Channel #haskell: 710 nicks (1 op, 0 voices, 709 normals)
2021-10-08 10:36:54	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-10-08 10:38:08	→	Null_A has joined #haskell
2021-10-08 10:42:40	←	Null_A has quit (Ping timeout: 265 seconds)
2021-10-08 10:45:03	←	alzgh has quit (Remote host closed the connection)
2021-10-08 10:49:53	→	michalz has joined #haskell
2021-10-08 10:54:18	←	sleblanc has quit (Ping timeout: 245 seconds)
2021-10-08 11:00:03	sm	yes fix.. and used trace to get around the need for IO. https://github.com/simonmichael/games/blob/main/caverunner/caverunner.hs#L257:L285
2021-10-08 11:00:26	sm	but I think it's not good
2021-10-08 11:00:34	→	takuan has joined #haskell
2021-10-08 11:03:16	←	[itchyjunk] has quit (Remote host closed the connection)
2021-10-08 11:03:47	→	Amras has joined #haskell
2021-10-08 11:04:11	→	chomwitt has joined #haskell
2021-10-08 11:08:40	→	rkrishnan has joined #haskell
2021-10-08 11:08:41	←	amk has quit (Ping timeout: 268 seconds)
2021-10-08 11:09:18	←	hyiltiz has quit (Ping timeout: 245 seconds)
2021-10-08 11:10:19	→	amk has joined #haskell
2021-10-08 11:10:58	⚡	sm swiftly replaces that with a custom IO recursion
2021-10-08 11:11:58	→	vysn has joined #haskell
2021-10-08 11:13:48	→	hyiltiz has joined #haskell
2021-10-08 11:17:21	←	MQ-17J has quit (Remote host closed the connection)
2021-10-08 11:17:34	→	MQ-17J has joined #haskell
2021-10-08 11:17:55	→	ubert has joined #haskell
2021-10-08 11:31:29	→	bdaed has joined #haskell
2021-10-08 11:44:07	→	Vajb has joined #haskell
2021-10-08 11:44:13	→	mei has joined #haskell
2021-10-08 11:44:16	→	merijn has joined #haskell
2021-10-08 11:48:23	→	rtjure has joined #haskell
2021-10-08 11:49:10	→	lortabac has joined #haskell
2021-10-08 11:49:22	Axman6	TDANG: = and <- do different things, x = y says that x is the same as y, whereas x <- y says (roughly) for each x that y produces, do something with that x. the precise meaning of <- depends on which monad you're using. for lists is means for each x in y, for IO, y :: IO a and x :: a, and it means give the value that y returns the name a
2021-10-08 11:50:33	←	cheater has quit (Ping timeout: 245 seconds)
2021-10-08 11:54:21	→	cheater has joined #haskell
2021-10-08 12:00:22	→	cfricke has joined #haskell
2021-10-08 12:03:00	→	wonko has joined #haskell
2021-10-08 12:04:43	←	bdaed has quit (Ping timeout: 245 seconds)
2021-10-08 12:09:10	→	ubert1 has joined #haskell
2021-10-08 12:12:08	→	benin03693230163 has joined #haskell
2021-10-08 12:17:12	←	Cajun has quit (Ping timeout: 256 seconds)
2021-10-08 12:18:39	←	merijn has quit (Ping timeout: 245 seconds)
2021-10-08 12:20:35	→	chele has joined #haskell
2021-10-08 12:22:27	→	dyeplexer has joined #haskell
2021-10-08 12:24:58	←	timCF has quit (Ping timeout: 260 seconds)
2021-10-08 12:30:25	→	bdaed has joined #haskell
2021-10-08 12:33:39	←	NinjaTrappeur has quit (Ping timeout: 245 seconds)
2021-10-08 12:34:06	→	NinjaTrappeur has joined #haskell
2021-10-08 12:34:10	→	tzh_ has joined #haskell
2021-10-08 12:34:10	←	xff0x has quit (Ping timeout: 252 seconds)
2021-10-08 12:35:01	→	xff0x has joined #haskell
2021-10-08 12:36:19	←	tzh has quit (Ping timeout: 252 seconds)
2021-10-08 12:37:04	→	tzh has joined #haskell
2021-10-08 12:38:11	←	Vajb has quit (Read error: Connection reset by peer)
2021-10-08 12:38:24	→	mikoto-chan has joined #haskell
2021-10-08 12:38:53	←	tzh_ has quit (Ping timeout: 245 seconds)
2021-10-08 12:39:40	←	motherfsck has quit (Ping timeout: 252 seconds)
2021-10-08 12:39:42	←	libertyprime has quit (Read error: Connection reset by peer)
2021-10-08 12:41:15	←	aplainzetakind has quit (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
2021-10-08 12:42:02	→	aplainzetakind has joined #haskell
2021-10-08 12:42:38	←	vysn has quit (Quit: WeeChat 3.2)
2021-10-08 12:42:49	←	bdaed has quit (Ping timeout: 245 seconds)
2021-10-08 12:43:45	→	fendor has joined #haskell
2021-10-08 12:44:10	→	motherfsck has joined #haskell
2021-10-08 12:46:38	Amras	is there a library that handles parsec-style parsing alongside pickling?
2021-10-08 12:50:55	Amras	ie. where I can define `do; staticString '{'; x' <- (varInt, x myData); staticString '}'` and have it both work to parse `{12}` and to generate `{12}`
2021-10-08 12:54:23	awpr	that's a bit of a difficult thing to achieve, largely because Monad isn't a suitable typeclass for it: it involves jointly building up and tearing down the "result type", whereas Monad can only talk about producing the "result type"; things like Divisible/Decidable are for tearing down their type parameter, but they go _only_ that direction too
2021-10-08 12:55:39	←	cheater has quit (Quit: (BitchX) Wouldn't it be great if the dog could walk itself?)
2021-10-08 12:55:45	awpr	just looking around, I found https://hackage.haskell.org/package/bidirectional-0.1.0.0/docs/Data-IParser.html, based on profunctors, but I'm not sure whether it's any good
2021-10-08 12:55:48	←	tzh has quit (Quit: zzz)
2021-10-08 12:59:39	awpr	this looks more promising: https://hackage.haskell.org/package/roundtrip
2021-10-08 13:04:36	←	a6a45081-2b83 has quit (Remote host closed the connection)
2021-10-08 13:07:17	→	cheater has joined #haskell
2021-10-08 13:07:27	→	ub has joined #haskell
2021-10-08 13:07:38	←	ubert has quit (Ping timeout: 245 seconds)
2021-10-08 13:07:38	ℹ	ub is now known as ubert
2021-10-08 13:07:40	←	ubert1 has quit (Ping timeout: 252 seconds)
2021-10-08 13:10:40	→	pavonia_ has joined #haskell
2021-10-08 13:11:01	←	pavonia has quit (Ping timeout: 252 seconds)
2021-10-08 13:11:14	ℹ	pavonia_ is now known as pavonia
2021-10-08 13:15:17	awpr	wait I knew there was a reason this problem sounded familiar: I took a shot at the binary serialization version of it a while ago and was fairly content with the results.  if you stick a parser and an encoder into a record together, you can write combinators that compose them on sums and products.  for a textual version, they should be able to have "sequencing" with static text easily enough, too
2021-10-08 13:15:21	→	merijn has joined #haskell
2021-10-08 13:16:04	←	Sgeo has quit (Read error: Connection reset by peer)
2021-10-08 13:16:57	→	libertyprime has joined #haskell
2021-10-08 13:16:59	Amras	right; that seems to be the principle behind most solutions I've seen
2021-10-08 13:18:42	→	jtomas_ has joined #haskell
2021-10-08 13:23:48	jackdk	Amras: an abstraction worth looking at is the idea of a monoidal functor, which can generalise applicative/alternative/divisible/decidable, depending on whether you're using Either or (,) as your product and whether you're dealing with co- or contravariant functors
2021-10-08 13:25:04	jackdk	Amras: George WIlson's talk Contravariant Functors: the Other Side of the Coin https://www.youtube.com/watch?v=IJ_bVVsQhvc explains the Divisible and Decidable typeclasses using prettyprinters as an example
2021-10-08 13:26:31	jackdk	Amras: You can then do something like `data PP a = PP (PrettyPrinter a) (Parser a)`and build up many operations using the monoidal functor abstraction. You can get an fmaplike operation by stealing imap from the Invariant class in the invariant package, but the more mathematically-literate people told me it was a bodge when I suggested it
2021-10-08 13:27:44	awpr	the thing that constituted a breakthrough for me was realizing that `newtype PP a b = PP (PrettyPrinter b) (Parser a)` was the solution to needing invariant mapping
2021-10-08 13:27:51	jackdk	Amras: Otherwise, it's possible better to treat it as a profunctor: `data PP a b = PP (PrettyPrinter a) (Parser b)`
2021-10-08 13:27:56	jackdk	yeah that
2021-10-08 13:27:58	awpr	;)
2021-10-08 13:28:42	awpr	because then the weird invariant mapping is replaced by normal `dimap`, and you gain the flexibility to mess with both sides separately
2021-10-08 13:28:42	→	Vajb has joined #haskell
2021-10-08 13:29:04	jackdk	You can then get sum/productish instances from the `product-profunctors` package, which I've been meaning to wrangle into a better hierarchy: https://github.com/tomjaguarpaw/product-profunctors/pull/54
2021-10-08 13:29:45	→	baruch has joined #haskell
2021-10-08 13:31:09	jackdk	from there, you can recreate applicative and maybe monad operations on `b`, and divisible and decideable operations on the `a`. Can't write an `(<|>)` equivalent on the `b` though
2021-10-08 13:33:12	jackdk	generics-eot also gives you good tools to split things into Either and (,)
2021-10-08 13:33:24	jackdk	http://jackkelly.name/blog/archives/2020/08/19/abstracting_over_applicative_alternative_divisible_and_decidable/index.html has links if you want to explore the `PP a = PP (Pretty a) (Parser a)` approach, but I consider it a dead end
2021-10-08 13:34:25	←	Vajb has quit (Read error: Connection reset by peer)
2021-10-08 13:35:26	→	Vajb has joined #haskell
2021-10-08 13:36:23	→	barzo has joined #haskell
2021-10-08 13:36:23	→	timCF has joined #haskell
2021-10-08 13:37:08	→	max22- has joined #haskell
2021-10-08 13:37:23	←	econo has quit (Quit: Connection closed for inactivity)
2021-10-08 13:38:14	→	hendursa1 has joined #haskell
2021-10-08 13:38:15	jackdk	I think the profunctor that has a pair of parser and prettyprinter (note that you can create it as a `Product` of a `Clown` and a `Joker`) is "better" because it lets you vary the type variables independently if you need to go from `PP a a` to `PP b b` in a non-obvious way.
2021-10-08 13:38:19	jackdk	anyway, braindump over
2021-10-08 13:41:01	←	hendursaga has quit (Ping timeout: 276 seconds)
2021-10-08 13:45:06	→	gehmehgeh has joined #haskell
2021-10-08 13:46:56	→	acidjnk_new3 has joined #haskell
2021-10-08 13:48:37	←	werneta has quit (Ping timeout: 265 seconds)
2021-10-08 13:48:55	←	timCF has quit (Ping timeout: 252 seconds)
2021-10-08 13:51:31	←	libertyprime has quit (Ping timeout: 265 seconds)
2021-10-08 13:58:27	→	libertyprime has joined #haskell
2021-10-08 14:01:02	→	DNH has joined #haskell
2021-10-08 14:01:49	Amras	thanks
2021-10-08 14:04:22	←	rkrishnan has quit (Ping timeout: 252 seconds)
2021-10-08 14:06:45	→	lavaman has joined #haskell
2021-10-08 14:11:14	←	lavaman has quit (Ping timeout: 260 seconds)
2021-10-08 14:19:33	←	merijn has quit (Ping timeout: 265 seconds)
2021-10-08 14:20:49	←	azeem has quit (Read error: Connection reset by peer)
2021-10-08 14:21:40	→	azeem has joined #haskell
2021-10-08 14:23:36	→	vpan has joined #haskell
2021-10-08 14:23:37	←	azeem has quit (Read error: Connection reset by peer)
2021-10-08 14:25:23	←	hnOsmium0001 has quit (Quit: Connection closed for inactivity)
2021-10-08 14:26:39	→	azeem has joined #haskell
2021-10-08 14:27:31	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-10-08 14:27:58	→	fendor_ has joined #haskell
2021-10-08 14:30:48	←	fendor has quit (Ping timeout: 265 seconds)
2021-10-08 14:34:11	←	beka has quit (Ping timeout: 265 seconds)
2021-10-08 14:38:28	←	mikoto-chan has quit (Ping timeout: 252 seconds)
2021-10-08 14:40:08	→	mikoto-chan has joined #haskell
2021-10-08 14:55:28	←	eggplantade has quit (Remote host closed the connection)
2021-10-08 14:56:17	→	Gurkenglas has joined #haskell
2021-10-08 14:56:59	→	kuribas has joined #haskell
2021-10-08 15:05:16	←	jonatan_ has quit (Remote host closed the connection)
2021-10-08 15:06:19	→	wei2912 has joined #haskell
2021-10-08 15:07:25	→	DNH has joined #haskell
2021-10-08 15:13:24	kuribas	Found how to write hspec smallcheck tests, and change the depth.  Not hard when you know it.  Just difficult to navigate through the polymorphic functions and orphan instances...
2021-10-08 15:14:18	←	mikoto-chan has quit (Ping timeout: 245 seconds)
2021-10-08 15:16:24	→	mikoto-chan has joined #haskell
2021-10-08 15:17:14	←	barzo has quit (Remote host closed the connection)
2021-10-08 15:21:58	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-10-08 15:23:15	→	barzo has joined #haskell
2021-10-08 15:23:51	←	barzo has quit (Client Quit)
2021-10-08 15:24:05	→	barzo has joined #haskell
2021-10-08 15:32:26	→	mestre has joined #haskell
2021-10-08 15:35:44	←	chomwitt has quit (Ping timeout: 245 seconds)
2021-10-08 15:40:04	kuribas	Is haskell + extensions a *big* language?
2021-10-08 15:40:07	kuribas	compared to java say?
2021-10-08 15:40:32	kuribas	it seems to me most language "accumulate" features as they evolve.
2021-10-08 15:42:21	mestre	Its hard removing a feature.
2021-10-08 15:42:54	kuribas	or, like in scheme, the language keeps small, but implementations get big, and each implementation has it's own ways of doing things.
2021-10-08 15:44:04	kuribas	it's just because I heard people complain that haskell is big with all extensions...
2021-10-08 15:45:10	ℹ	fendor_ is now known as fendor
2021-10-08 15:45:31	mestre	It is big, don't get me wrong. But the language extensions are great.
2021-10-08 15:46:20	mestre	Can't compare with Java, though, never used it.
2021-10-08 15:49:12	fendor	I think my biggest issue with how big haskell is the accumulation of new syntax over time that seems to not interact nicely
2021-10-08 15:49:19	fendor	or at least not visually nice
2021-10-08 15:50:14	mestre	Interesting. Can you give me an example of a weird interaction?
2021-10-08 15:50:16	kuribas	fendor: like what?
2021-10-08 15:50:20	fendor	for example, while I love patternguards, their syntax is really weird with case expressions
2021-10-08 15:50:27	fendor	> case () | () <- () -> ()
2021-10-08 15:50:29	lambdabot	 <hint>:1:9: error: parse error on input ‘|’
2021-10-08 15:50:36	fendor	> case () of | () <- () -> ()
2021-10-08 15:50:38	lambdabot	 <hint>:1:12: error: parse error on input ‘|’
2021-10-08 15:50:45	fendor	wait
2021-10-08 15:50:54	fendor	> case () of () | () <- () -> ()
2021-10-08 15:50:56	lambdabot	 ()
2021-10-08 15:52:33	fendor	contrived example, but maybe illustrates a bit what I mean by "not visually nice"
2021-10-08 15:53:00	kuribas	yeah, that can be hard to read.
2021-10-08 15:54:06	mestre	Guess you have to limit yourself to a subset that plays well together :/
2021-10-08 15:55:00	kuribas	ugh, does hspec-junit-formatter really restricts to base (>=4.14.1.0)?
2021-10-08 15:55:12	fendor	it is not like this is "bad", but if we designed the grammar from the start, I doubt we would use "->" in case expressions and have pattern guards use "<-"
2021-10-08 15:55:33	→	DNH has joined #haskell
2021-10-08 15:55:37	fendor	*re-designed
2021-10-08 15:56:01	→	eggplantade has joined #haskell
2021-10-08 15:56:58	mestre	'case Foo of True do undefined; False do undefined' maybe
2021-10-08 15:57:38	←	ubert has quit (Ping timeout: 245 seconds)
2021-10-08 15:57:38	fendor	idk, why not reuse `=` since we have that in guard expressions and function definitions?
2021-10-08 15:58:04	fendor	however, that ship has sailed
2021-10-08 15:58:24	mestre	yeah
2021-10-08 16:00:56	←	zincy_ has quit (Remote host closed the connection)
2021-10-08 16:00:59	←	eggplantade has quit (Ping timeout: 268 seconds)
2021-10-08 16:04:35	←	barzo has quit (Read error: Connection reset by peer)
2021-10-08 16:05:09	kuribas	fendor: yeah, a new language could use '=' instead of '->'
2021-10-08 16:05:11	→	barzo has joined #haskell
2021-10-08 16:05:25	→	ubert has joined #haskell
2021-10-08 16:05:27	→	chomwitt has joined #haskell
2021-10-08 16:08:02	→	timCF has joined #haskell
2021-10-08 16:12:39	←	timCF has quit (Ping timeout: 265 seconds)
2021-10-08 16:14:57	→	__monty__ has joined #haskell
2021-10-08 16:15:24	→	merijn has joined #haskell
2021-10-08 16:32:40	←	Vajb has quit (Read error: Connection reset by peer)
2021-10-08 16:35:58	←	ikex has quit (Ping timeout: 245 seconds)
2021-10-08 16:36:27	→	ikex has joined #haskell
2021-10-08 16:41:27	→	Vajb has joined #haskell
2021-10-08 16:41:40	→	AlexNoo_ has joined #haskell
2021-10-08 16:43:23	←	AlexZenon has quit (Ping timeout: 260 seconds)
2021-10-08 16:43:45	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-10-08 16:44:04	←	Alex_test has quit (Ping timeout: 265 seconds)
2021-10-08 16:45:08	←	AlexNoo has quit (Ping timeout: 245 seconds)
2021-10-08 16:45:11	→	DNH has joined #haskell
2021-10-08 16:47:09	→	AlexZenon has joined #haskell
2021-10-08 16:47:36	→	Alex_test has joined #haskell
2021-10-08 16:49:43	←	merijn has quit (Ping timeout: 245 seconds)
2021-10-08 16:57:49	←	libertyprime has quit (Ping timeout: 245 seconds)
2021-10-08 16:59:04	←	APic has quit (Quit: leaving)
2021-10-08 16:59:44	→	APic has joined #haskell
2021-10-08 17:00:45	→	mbuf has joined #haskell
2021-10-08 17:00:59	←	wei2912 has quit (Quit: Lost terminal)
2021-10-08 17:02:04	←	Vajb has quit (Read error: Connection reset by peer)
2021-10-08 17:02:04	←	azeem has quit (Read error: Connection reset by peer)
2021-10-08 17:02:53	→	Vajb has joined #haskell
2021-10-08 17:03:03	→	azeem has joined #haskell
2021-10-08 17:03:33	←	Vajb has quit (Read error: Connection reset by peer)
2021-10-08 17:03:42	←	azeem has quit (Read error: Connection reset by peer)
2021-10-08 17:05:16	→	azeem has joined #haskell
2021-10-08 17:07:07	kuribas	ugh, it doesn't look like flycheck-haskell supports tests :-(
2021-10-08 17:13:03	←	kuribas has quit (Quit: ERC (IRC client for Emacs 26.3))
2021-10-08 17:14:08	→	Vajb has joined #haskell
2021-10-08 17:15:01	lortabac	is there some easy way to get a constructor index with Generic instead of Data.Data?
2021-10-08 17:28:04	→	machinedgod has joined #haskell
2021-10-08 17:30:51	→	thyriaen has joined #haskell
2021-10-08 17:31:56	→	ub has joined #haskell
2021-10-08 17:32:53	→	[itchyjunk] has joined #haskell
2021-10-08 17:33:51	←	max22- has quit (Ping timeout: 265 seconds)
2021-10-08 17:34:13	→	sleblanc has joined #haskell
2021-10-08 17:35:04	→	shapr has joined #haskell
2021-10-08 17:36:59	←	phma has quit (Read error: Connection reset by peer)
2021-10-08 17:38:28	←	wonko has quit (Ping timeout: 245 seconds)
2021-10-08 17:45:03	→	phma has joined #haskell
2021-10-08 17:45:41	→	lavaman has joined #haskell
2021-10-08 17:46:21	→	geranim0 has joined #haskell
2021-10-08 17:47:04	←	barzo has quit (Ping timeout: 252 seconds)
2021-10-08 17:49:31	→	barzo has joined #haskell
2021-10-08 17:57:11	←	mbuf has quit (Quit: Leaving)
2021-10-08 18:11:17	→	Guest65 has joined #haskell
2021-10-08 18:11:47	←	jlamothe has quit (Ping timeout: 245 seconds)
2021-10-08 18:15:11	Guest65	in GHCi, this works:  let f x = x :: Int, but this doesn't: let f x = x :: Num a => a.  any idea why?
2021-10-08 18:18:49	lortabac	Guest65: because the right signature should be f :: Num a => a -> a
2021-10-08 18:19:11	lortabac	the (Num a) constraint should apply to both arguments
2021-10-08 18:19:27	Guest65	why does it in the `Int` case?
2021-10-08 18:19:40	Guest65	why does it work in the `Int` case?
2021-10-08 18:19:42	lortabac	the Int case is correct
2021-10-08 18:19:45	→	xiongxin has joined #haskell
2021-10-08 18:19:47	lortabac	x is an Int
2021-10-08 18:19:49	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-10-08 18:20:22	Guest65	I am not sure I understand the reason.
2021-10-08 18:20:32	lortabac	your definitions are parsed as f x = (x :: Int)
2021-10-08 18:20:38	Guest65	ok
2021-10-08 18:20:40	lortabac	and f x = (x :: Num a => a)
2021-10-08 18:20:40	pavonia	It's not clear to me either why it can infer the final type in one case but not in the other
2021-10-08 18:23:04	→	waleee has joined #haskell
2021-10-08 18:23:25	lortabac	I guess (f x = x :: Num a => a) is interpreted as (f x = x :: forall a. Num a => a)
2021-10-08 18:23:32	pavonia	> :t let f x = x == (123 :: Num a => a) in f
2021-10-08 18:23:34	lambdabot	 <hint>:1:1: error: parse error on input ‘:’
2021-10-08 18:23:46	pavonia	%> :t let f x = x == (123 :: Num a => a) in f
2021-10-08 18:23:51	lortabac	which is wrong, because the argument should have the same type as the result
2021-10-08 18:24:03	pavonia	Bah, what was the command for the other bot?
2021-10-08 18:24:17	lortabac	> 1 :: Num a => a
2021-10-08 18:24:19	lambdabot	 1
2021-10-08 18:24:47	lortabac	in this case we are saying that the type of 1 can be any type as long as it is an instance of Num
2021-10-08 18:25:10	lortabac	> f x = (x :: Num a => a)
2021-10-08 18:25:11	lambdabot	 <hint>:1:5: error: parse error on input ‘=’
2021-10-08 18:25:30	Guest65	the type inference works differently for `Int` than it does for `Num a => a`.  why is that?
2021-10-08 18:25:33	lortabac	in this case we are trying to say the same thing about the second x
2021-10-08 18:25:38	lortabac	which is false
2021-10-08 18:25:50	→	raehik has joined #haskell
2021-10-08 18:25:50	lortabac	the second x cannot be any type, it must be the same as the argument
2021-10-08 18:26:03	Guest65	I am sorry?
2021-10-08 18:26:08	←	Vajb has quit (Read error: Connection reset by peer)
2021-10-08 18:26:58	→	Vajb has joined #haskell
2021-10-08 18:27:06	→	CiaoSen has joined #haskell
2021-10-08 18:27:39	lortabac	(Num a => a) means "this can be any type as long as it os an instance of Num"
2021-10-08 18:27:41	lortabac	ok?
2021-10-08 18:27:47	Guest65	correct
2021-10-08 18:27:56	←	sleblanc has quit (Quit: Leaving)
2021-10-08 18:27:59	Guest65	i know the reason, i think
2021-10-08 18:28:04	lortabac	this is true in the case of a literal, like 1 or 42
2021-10-08 18:28:26	lortabac	you can use 1 for Ints, Floats etc.
2021-10-08 18:28:49	→	jlamothe has joined #haskell
2021-10-08 18:28:58	lortabac	now, if you try to define f x = (x :: Num a => a)
2021-10-08 18:29:14	Guest65	the `Num a => a` doesn't quantify across both argument and result, which is why it fails.
2021-10-08 18:30:24	lortabac	yes, I guess it is interpreted as (x :: forall a. Num a => a)
2021-10-08 18:30:57	Guest65	you say, the type checker infers f (x :: Num a => a) = x :: Num a => a, which doesn't restrict both the argument and result to the same type, so it fails.
2021-10-08 18:31:20	lortabac	yes I think so
2021-10-08 18:31:42	Guest65	thanks, you can see it from the error message.
2021-10-08 18:31:49	Guest65	one other question.
2021-10-08 18:32:49	Guest65	how can i join haskell libera chat channel from an irc client, say LimeChat?  I mean any idea what the configurations would be?
2021-10-08 18:32:49	←	Vajb has quit (Read error: Connection reset by peer)
2021-10-08 18:33:27	→	Vajb has joined #haskell
2021-10-08 18:33:43	ℹ	AlexNoo_ is now known as AlexNoo
2021-10-08 18:35:50	yushyin	Guest65: did you see https://libera.chat/guides/connect ?
2021-10-08 18:36:53	→	DNH has joined #haskell
2021-10-08 18:37:27	→	ga has joined #haskell
2021-10-08 18:37:43	←	acidjnk_new3 has quit (Ping timeout: 252 seconds)
2021-10-08 18:38:43	Guest65	yeah, i saw that.  for some reason, libera is not recognizing my login.  it says "failed login" without giving any more details.
2021-10-08 18:41:03	→	geekosaur has joined #haskell
2021-10-08 18:41:49	→	max22- has joined #haskell
2021-10-08 18:42:31	→	kuribas has joined #haskell
2021-10-08 18:43:34	→	Hydrazer has joined #haskell
2021-10-08 18:43:35	←	juhp has quit (Read error: Connection reset by peer)
2021-10-08 18:43:49	→	juhp has joined #haskell
2021-10-08 18:43:57	←	kuribas has quit (Remote host closed the connection)
2021-10-08 18:44:23	←	Hydrazer has quit (Client Quit)
2021-10-08 18:44:55	→	Guest33 has joined #haskell
2021-10-08 18:45:01	yushyin	Guest65: you should be able to connect without a login, if you already have a registered nick on libera check out https://libera.chat/guides/limechat
2021-10-08 18:45:32	←	bitdex has quit (Quit: = "")
2021-10-08 18:46:19	yushyin	Guest65: if nothing works, maybe ask in #libera
2021-10-08 18:46:32	Guest65	ok
2021-10-08 18:47:00	←	Guest33 has quit (Client Quit)
2021-10-08 18:47:45	←	pavonia has quit (Quit: Bye!)
2021-10-08 18:49:15	←	lavaman has quit (Ping timeout: 265 seconds)
2021-10-08 18:49:54	←	MatrixTravelerb4 has quit (Write error: Connection reset by peer)
2021-10-08 18:49:54	←	vaibhavsagar[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:49:54	←	maralorn has quit (Read error: Connection reset by peer)
2021-10-08 18:49:54	←	ftzm[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:49:54	←	kevin[m]1 has quit (Read error: Connection reset by peer)
2021-10-08 18:49:54	←	lwe[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:49:54	←	Christoph[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:49:54	←	Rosuavio[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:49:54	←	jophish has quit (Write error: Connection reset by peer)
2021-10-08 18:49:54	←	ericson23141 has quit (Write error: Connection reset by peer)
2021-10-08 18:49:54	←	ServerStatsDisco has quit (Read error: Connection reset by peer)
2021-10-08 18:49:54	←	sm has quit (Read error: Connection reset by peer)
2021-10-08 18:49:54	←	dexmad[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:54	←	wysteriary[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:49:54	←	fendor[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:54	←	razor[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:54	←	shiraeeshi[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:54	←	Morrow[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:49:54	←	Tisoxin has quit (Write error: Connection reset by peer)
2021-10-08 18:49:54	←	ilkecan[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:54	←	Orbstheorem has quit (Write error: Connection reset by peer)
2021-10-08 18:49:54	←	jesser[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:54	←	ixlun has quit (Read error: Connection reset by peer)
2021-10-08 18:49:54	←	Drew[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:49:54	←	maerwald[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:49:54	←	hjulle[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:49:54	←	soft has quit (Read error: Connection reset by peer)
2021-10-08 18:49:54	←	ormaaj has quit (Read error: Connection reset by peer)
2021-10-08 18:49:54	←	bb010g has quit (Write error: Connection reset by peer)
2021-10-08 18:49:54	←	cloudy has quit (Read error: Connection reset by peer)
2021-10-08 18:49:55	←	PotatoHatsue has quit (Read error: Connection reset by peer)
2021-10-08 18:49:55	←	oak- has quit (Read error: Connection reset by peer)
2021-10-08 18:49:55	←	bakinonion[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:49:55	←	reza[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:49:55	←	santiagopim[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:49:55	←	stoicswe[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:49:55	←	psydroid has quit (Read error: Connection reset by peer)
2021-10-08 18:49:55	←	marinelli[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:55	←	smichel17[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:55	←	moats has quit (Write error: Connection reset by peer)
2021-10-08 18:49:55	←	xosdy[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:55	←	denbrahe[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:55	←	codygman[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:55	←	asdofindia-m has quit (Write error: Connection reset by peer)
2021-10-08 18:49:55	←	hsiktas[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:49:55	←	unrooted has quit (Write error: Connection reset by peer)
2021-10-08 18:49:55	←	carmysilna has quit (Write error: Connection reset by peer)
2021-10-08 18:49:55	←	Topik[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:55	←	quantum has quit (Write error: Connection reset by peer)
2021-10-08 18:49:55	←	monadfritz[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:55	←	ongy[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:56	←	amesgen[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:56	←	thomasjm[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:56	←	commuswift[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:56	←	fakehacker[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:56	←	YoungChiefBTW has quit (Write error: Connection reset by peer)
2021-10-08 18:49:56	←	schuelermine[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:56	←	fgaz has quit (Write error: Connection reset by peer)
2021-10-08 18:49:56	←	Arathorn has quit (Write error: Connection reset by peer)
2021-10-08 18:49:56	←	ru0mad[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:56	←	jneira[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:49:56	←	aidy has quit (Read error: Connection reset by peer)
2021-10-08 18:49:56	←	bitonic1 has quit (Write error: Connection reset by peer)
2021-10-08 18:49:56	←	siraben has quit (Write error: Connection reset by peer)
2021-10-08 18:49:56	←	Magnus[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:49:56	←	srid[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:49:56	←	mekeor[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	peddie has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	SawyerBergeron[m has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	dualinverter[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	fcortesi has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	zfnmxt has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	alexfmpe[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	tsmc[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	craige[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:49:57	←	SimonWeiss[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:49:57	←	OndejSkup[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	Tavi[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	the-coot[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	hughjfchen[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	jchia[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	reddishblue[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	Deewiant has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	Deide has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	kadoban has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	sam[m]1 has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	kar1 has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	rednaZ[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:49:57	←	unclechu has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	cdsmith has quit (Read error: Connection reset by peer)
2021-10-08 18:49:57	←	IgnatInsarov[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:49:57	←	zwro[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	Ollie[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:49:57	←	hsek[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	ManofLetters[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	gdhffd[m] has quit (Write error: Connection reset by peer)
2021-10-08 18:49:57	←	afotgkmnzj7asv3r has quit (Read error: Connection reset by peer)
2021-10-08 18:49:57	←	justosophy[m] has quit (Read error: Connection reset by peer)
2021-10-08 18:51:48	←	ga has quit (Quit: Leaving)
2021-10-08 18:52:50	→	jchia[m] has joined #haskell
2021-10-08 18:54:28	→	kuribas has joined #haskell
2021-10-08 18:54:35	yushyin	Guest65: you can also register a nickname while using the webchat https://libera.chat/guides/registration#registering and use the limechat guide afterwards
2021-10-08 18:54:36	→	MatrixTravelerbo has joined #haskell
2021-10-08 18:54:48	→	dualinverter[m] has joined #haskell
2021-10-08 18:54:49	→	fgaz has joined #haskell
2021-10-08 18:54:49	→	peddie has joined #haskell
2021-10-08 18:54:49	→	cdsmith has joined #haskell
2021-10-08 18:54:49	→	Morrow[m] has joined #haskell
2021-10-08 18:54:49	→	thomasjm[m] has joined #haskell
2021-10-08 18:54:49	→	hsek[m] has joined #haskell
2021-10-08 18:55:03	→	ru0mad[m] has joined #haskell
2021-10-08 18:55:15	→	gdhffd[m] has joined #haskell
2021-10-08 18:55:29	→	bb010g has joined #haskell
2021-10-08 18:55:29	→	ServerStatsDisco has joined #haskell
2021-10-08 18:55:29	→	amesgen[m] has joined #haskell
2021-10-08 18:55:30	→	the-coot[m] has joined #haskell
2021-10-08 18:55:30	→	moats has joined #haskell
2021-10-08 18:55:43	→	soft has joined #haskell
2021-10-08 18:55:44	→	zfnmxt has joined #haskell
2021-10-08 18:55:59	→	oak- has joined #haskell
2021-10-08 18:56:00	→	kadoban has joined #haskell
2021-10-08 18:56:00	→	bitonic has joined #haskell
2021-10-08 18:56:00	→	jophish has joined #haskell
2021-10-08 18:56:00	→	ericson2314 has joined #haskell
2021-10-08 18:56:00	→	Arathorn has joined #haskell
2021-10-08 18:56:00	→	Ollie[m] has joined #haskell
2021-10-08 18:56:00	→	PotatoHatsue has joined #haskell
2021-10-08 18:56:00	→	ixlun has joined #haskell
2021-10-08 18:56:00	→	unclechu has joined #haskell
2021-10-08 18:56:01	→	Deewiant has joined #haskell
2021-10-08 18:56:01	→	unrooted has joined #haskell
2021-10-08 18:56:01	→	rednaZ[m] has joined #haskell
2021-10-08 18:56:01	→	maralorn has joined #haskell
2021-10-08 18:56:13	→	SimonWeiss[m] has joined #haskell
2021-10-08 18:56:14	→	denbrahe[m] has joined #haskell
2021-10-08 18:56:14	→	lwe[m] has joined #haskell
2021-10-08 18:56:28	→	jesser[m] has joined #haskell
2021-10-08 18:56:31	→	reza[m] has joined #haskell
2021-10-08 18:56:32	→	quantum has joined #haskell
2021-10-08 18:56:32	→	marinelli[m] has joined #haskell
2021-10-08 18:56:33	→	hsiktas[m] has joined #haskell
2021-10-08 18:56:48	→	Orbstheorem has joined #haskell
2021-10-08 18:57:03	←	ubert has quit (Remote host closed the connection)
2021-10-08 18:57:03	ℹ	ub is now known as ubert
2021-10-08 18:57:14	→	craige[m] has joined #haskell
2021-10-08 18:57:29	→	afotgkmnzj7asv3r has joined #haskell
2021-10-08 18:57:29	→	schuelermine[m] has joined #haskell
2021-10-08 18:57:29	→	razor[m] has joined #haskell
2021-10-08 18:57:29	→	sm has joined #haskell
2021-10-08 18:57:29	→	reddishblue[m] has joined #haskell
2021-10-08 18:57:41	→	justosophy[m] has joined #haskell
2021-10-08 18:57:42	→	kevin[m]1 has joined #haskell
2021-10-08 18:57:42	→	Deide has joined #haskell
2021-10-08 18:57:54	→	fakehacker[m] has joined #haskell
2021-10-08 18:57:54	→	hughjfchen[m] has joined #haskell
2021-10-08 18:58:06	→	srid[m] has joined #haskell
2021-10-08 18:58:06	→	IgnatInsarov[m] has joined #haskell
2021-10-08 18:58:07	→	psydroid has joined #haskell
2021-10-08 18:58:07	→	Christoph[m] has joined #haskell
2021-10-08 18:58:18	→	wysteriary[m] has joined #haskell
2021-10-08 18:58:18	→	zwro[m] has joined #haskell
2021-10-08 18:58:26	←	waleee has quit (Ping timeout: 246 seconds)
2021-10-08 18:58:30	→	stoicswe[m] has joined #haskell
2021-10-08 18:58:43	→	sam[m]12 has joined #haskell
2021-10-08 18:58:43	→	Topik[m] has joined #haskell
2021-10-08 18:58:43	→	OndejSkup[m] has joined #haskell
2021-10-08 18:58:58	→	kar1 has joined #haskell
2021-10-08 18:58:58	→	ongy[m] has joined #haskell
2021-10-08 18:58:58	→	YoungChiefBTW has joined #haskell
2021-10-08 18:58:58	→	alexfmpe[m] has joined #haskell
2021-10-08 18:58:58	→	asdofindia-m has joined #haskell
2021-10-08 18:58:58	→	hjulle[m] has joined #haskell
2021-10-08 18:58:58	→	Drew[m] has joined #haskell
2021-10-08 18:58:58	→	jneira[m] has joined #haskell
2021-10-08 18:58:58	→	Magnus[m] has joined #haskell
2021-10-08 18:58:59	→	siraben has joined #haskell
2021-10-08 18:59:11	→	dexmad[m] has joined #haskell
2021-10-08 18:59:11	→	smichel17[m] has joined #haskell
2021-10-08 18:59:11	→	SawyerBergeron[m has joined #haskell
2021-10-08 18:59:11	→	Tisoxin has joined #haskell
2021-10-08 18:59:23	→	monadfritz[m] has joined #haskell
2021-10-08 18:59:23	→	bakinonion[m] has joined #haskell
2021-10-08 18:59:23	→	alex[m]1234567 has joined #haskell
2021-10-08 18:59:23	→	fcortesi has joined #haskell
2021-10-08 18:59:24	→	ManofLetters[m] has joined #haskell
2021-10-08 18:59:36	→	commuswift[m] has joined #haskell
2021-10-08 18:59:36	→	cloudy has joined #haskell
2021-10-08 18:59:36	→	carmysilna has joined #haskell
2021-10-08 18:59:36	→	fendor[m] has joined #haskell
2021-10-08 18:59:37	→	aidy has joined #haskell
2021-10-08 18:59:37	→	shiraeeshi[m] has joined #haskell
2021-10-08 18:59:50	→	ilkecan[m] has joined #haskell
2021-10-08 18:59:50	→	tsmc[m] has joined #haskell
2021-10-08 18:59:54	→	jtomas has joined #haskell
2021-10-08 19:00:03	→	codygman[m] has joined #haskell
2021-10-08 19:00:15	→	xosdy[m] has joined #haskell
2021-10-08 19:00:16	→	vaibhavsagar[m] has joined #haskell
2021-10-08 19:00:17	→	santiagopim[m] has joined #haskell
2021-10-08 19:00:28	→	Tavi[m] has joined #haskell
2021-10-08 19:00:28	→	mekeor[m] has joined #haskell
2021-10-08 19:00:28	→	maerwald[m] has joined #haskell
2021-10-08 19:00:28	→	ormaaj has joined #haskell
2021-10-08 19:00:40	→	RosarioPulella[m has joined #haskell
2021-10-08 19:00:53	→	ftzm[m] has joined #haskell
2021-10-08 19:01:40	←	jtomas_ has quit (Ping timeout: 268 seconds)
2021-10-08 19:04:29	←	xff0x has quit (Ping timeout: 245 seconds)
2021-10-08 19:05:18	←	kuribas has quit (Remote host closed the connection)
2021-10-08 19:09:48	←	spider has quit (Ping timeout: 260 seconds)
2021-10-08 19:11:06	→	waleee has joined #haskell
2021-10-08 19:12:52	→	gaff has joined #haskell
2021-10-08 19:14:50	←	gaff has quit (Quit: Leaving...)
2021-10-08 19:15:10	→	gaff has joined #haskell
2021-10-08 19:15:39	←	gaff has quit (Client Quit)
2021-10-08 19:16:49	→	xff0x has joined #haskell
2021-10-08 19:23:00	ℹ	irc: disconnected from server
2021-10-08 19:23:25	→	oxide has joined #haskell
2021-10-08 19:23:25	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-10-08 19:23:25	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-10-08 19:23:25	ℹ	Channel #haskell: 728 nicks (1 op, 0 voices, 727 normals)
2021-10-08 19:23:26	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-10-08 19:29:20	ℹ	irc: disconnected from server
2021-10-08 19:29:39	→	oxide has joined #haskell
2021-10-08 19:29:39	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-10-08 19:29:39	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-10-08 19:29:39	ℹ	Channel #haskell: 729 nicks (1 op, 0 voices, 728 normals)
2021-10-08 19:29:39	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-10-08 19:32:52	→	kuribas has joined #haskell
2021-10-08 19:33:08	→	wroathe has joined #haskell
2021-10-08 19:33:08	←	wroathe has quit (Changing host)
2021-10-08 19:33:08	→	wroathe has joined #haskell
2021-10-08 19:33:19	←	jtomas has quit (Ping timeout: 250 seconds)
2021-10-08 19:33:37	→	TDANG_ has joined #haskell
2021-10-08 19:34:23	kuribas	when I do ":l tests/test.hs" in ghci, I get "Could not find module ‘Test.ActList’".  But that's a module in my test.
2021-10-08 19:34:31	→	gaff has joined #haskell
2021-10-08 19:34:42	kuribas	in my cabal under test-suite test: other-modules: Test.ActList
2021-10-08 19:35:11	→	boxscape_ has joined #haskell
2021-10-08 19:35:15	maerwald	did you run `cabal repl --enable-tests`?
2021-10-08 19:35:25	kuribas	no, just ghci
2021-10-08 19:35:26	←	michalz has quit (Remote host closed the connection)
2021-10-08 19:35:29	maerwald	well
2021-10-08 19:35:49	←	ubert has quit (Quit: ubert)
2021-10-08 19:35:58	←	TDANG has quit (Ping timeout: 252 seconds)
2021-10-08 19:36:00	kuribas	but I am trying to make flycheck work with my test-suite.
2021-10-08 19:36:20	←	gaff has quit (Client Quit)
2021-10-08 19:36:45	kuribas	apparently that runs:  stack runghc tests/test.hs
2021-10-08 19:37:21	maerwald	cabal run ghci -- tests/test.hs
2021-10-08 19:37:33	maerwald	or: cabal run ghc -- --interactive tests/test.hs
2021-10-08 19:38:35	kuribas	and with stack?
2021-10-08 19:38:53	←	waleee has quit (Quit: WeeChat 3.3)
2021-10-08 19:38:55	maerwald	stack ghci?
2021-10-08 19:40:17	→	waleee has joined #haskell
2021-10-08 19:44:30	←	vpan has quit (Quit: Leaving.)
2021-10-08 19:46:40	→	gaff has joined #haskell
2021-10-08 19:47:38	kuribas	maerwald: https://github.com/flycheck/flycheck-haskell/blob/master/flycheck-haskell.el#L81
2021-10-08 19:50:23	→	Sgeo has joined #haskell
2021-10-08 19:50:33	→	waywardmessiah has joined #haskell
2021-10-08 19:51:02	→	jtomas has joined #haskell
2021-10-08 19:51:28	←	jinsun has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-10-08 19:52:05	→	jinsun has joined #haskell
2021-10-08 19:52:37	→	ec has joined #haskell
2021-10-08 19:55:57	←	merijn has quit (Ping timeout: 245 seconds)
2021-10-08 20:01:26	←	cfricke has quit (Quit: WeeChat 3.3)
2021-10-08 20:09:38	→	ocramz_ has joined #haskell
2021-10-08 20:09:39	ocramz_	ell
2021-10-08 20:09:43	ocramz_	o
2021-10-08 20:10:04	shapr	hi
2021-10-08 20:10:05	shapr	there
2021-10-08 20:10:20	ocramz_	any unfortunate souls who have to deal with typesetting code in LaTex ? 
2021-10-08 20:11:03	ocramz_	I find tweaking 'lstlistings' particularly cumbersome so was wondering whether I can steal some nice defaults from someone
2021-10-08 20:11:57	ocramz_	I'm reading https://cs.brynmawr.edu/~rae/papers/2018/stitch/stitch.pdf which has nice keyword highliting
2021-10-08 20:12:59	ocramz_	waiting for the PLDI or ICFP gang to show u
2021-10-08 20:13:16	⚡	tomsmeding subscribes to the conversation
2021-10-08 20:13:32	tomsmeding	isn't this some kind of agda export though?
2021-10-08 20:14:38	ocramz_	no I think the \forall is just a stylistic flair, looks like plain haskell to me
2021-10-08 20:18:11	→	TDANG has joined #haskell
2021-10-08 20:18:58	←	mestre has quit (Quit: Lost terminal)
2021-10-08 20:18:58	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-10-08 20:19:29	→	MQ-17J has joined #haskell
2021-10-08 20:20:19	←	gaff has quit (Remote host closed the connection)
2021-10-08 20:20:22	←	TDANG_ has quit (Ping timeout: 260 seconds)
2021-10-08 20:21:53	→	amahl has joined #haskell
2021-10-08 20:22:05	←	geekosaur has quit (Remote host closed the connection)
2021-10-08 20:23:17	←	waywardmessiah has left #haskell
2021-10-08 20:23:44	→	geekosaur has joined #haskell
2021-10-08 20:24:08	→	wonko has joined #haskell
2021-10-08 20:27:37	tomsmeding	yeah I know, was referring to the formatting
2021-10-08 20:27:57	tomsmeding	this looks like Haskell, but I think this formatting looks very similar to what you see in papers that use agda I think
2021-10-08 20:30:07	←	baruch has quit (Quit: WeeChat 3.4-dev)
2021-10-08 20:31:56	kuribas	The problem with LaTeX is that is tries to hide TeX weirdness, but that is impossible.  Better to embrace it (plant TeX :) )
2021-10-08 20:32:07	kuribas	(erm plain TeX)
2021-10-08 20:36:21	amirouche	plant TeX x')
2021-10-08 20:38:41	→	slowButPresent has joined #haskell
2021-10-08 20:39:21	Franciman	you could try markdown
2021-10-08 20:39:24	Franciman	and use pandoc to convert
2021-10-08 20:39:28	←	[itchyjunk] has quit (Read error: Connection reset by peer)
2021-10-08 20:39:36	Franciman	it also allows syntax highlighting
2021-10-08 20:41:28	←	wroathe has quit (Ping timeout: 252 seconds)
2021-10-08 20:44:00	←	lortabac has quit (Quit: WeeChat 2.8)
2021-10-08 20:47:41	←	geekosaur has quit (Remote host closed the connection)
2021-10-08 20:47:56	→	geekosaur has joined #haskell
2021-10-08 20:48:50	→	eggplantade has joined #haskell
2021-10-08 20:49:59	→	alzgh has joined #haskell
2021-10-08 20:50:06	monochrom	ocramz_: I use lstlistings but with \lstset{language={}, basicstyle=\ttfamily}.  Henceforth the only tweaking I ever need is basicstyle=\ttfamily\small
2021-10-08 20:52:43	monochrom	(That is, until I use that for online exam questions. The generated PDF is such that if a student does a text copy-paste, there are spurrious spaces. I don't know the exact pathway or who's to blame.)
2021-10-08 20:53:26	monochrom	(I "fixed" it by using pandoc to generate html for online exams.)
2021-10-08 20:53:30	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-10-08 20:54:00	→	gaff has joined #haskell
2021-10-08 20:55:24	→	neurocyte0132889 has joined #haskell
2021-10-08 20:55:25	←	neurocyte0132889 has quit (Changing host)
2021-10-08 20:55:25	→	neurocyte0132889 has joined #haskell
2021-10-08 20:56:04	→	eggplantade has joined #haskell
2021-10-08 20:56:50	←	kuribas has quit (Remote host closed the connection)
2021-10-08 20:56:51	→	zebrag has joined #haskell
2021-10-08 20:58:31	→	wroathe has joined #haskell
2021-10-08 20:58:31	←	wroathe has quit (Changing host)
2021-10-08 20:58:31	→	wroathe has joined #haskell
2021-10-08 20:59:17	←	azeem has quit (Ping timeout: 245 seconds)
2021-10-08 20:59:59	←	jtomas has quit (Ping timeout: 250 seconds)
2021-10-08 21:00:08	absence	int-e: FYI, that TH problem you tested for me yesterday turned out to be caused by DuplicateRecordFields being enabled for the file that defines the DecsQ. probably a variant of this: https://gitlab.haskell.org/ghc/ghc/-/issues/14848
2021-10-08 21:00:40	←	boxscape_ has quit (Ping timeout: 252 seconds)
2021-10-08 21:00:54	←	gaff has quit (Remote host closed the connection)
2021-10-08 21:01:09	→	gaff has joined #haskell
2021-10-08 21:01:18	←	chele has quit (Remote host closed the connection)
2021-10-08 21:01:56	→	kimjetwav has joined #haskell
2021-10-08 21:02:37	←	wroathe has quit (Ping timeout: 245 seconds)
2021-10-08 21:04:09	int-e	absence: I see, thanks for the update
2021-10-08 21:04:39	tomsmeding	monochrom: I guess, but am not sure, that another way to avoid spurious spaces is to put the code in a verbatim environment
2021-10-08 21:05:17	tomsmeding	under the assumption that what's going wrong is that lstlisting doesn't actually set that basicstyle for the entire block, only for the keywords themselves, so the spaces in between are in a proportional font and thus too narrow
2021-10-08 21:05:58	←	ocramz_ has quit (Ping timeout: 245 seconds)
2021-10-08 21:06:25	→	lbseale has joined #haskell
2021-10-08 21:06:44	→	ocramz_ has joined #haskell
2021-10-08 21:06:54	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-10-08 21:07:21	←	eggplantade has quit (Remote host closed the connection)
2021-10-08 21:07:56	→	azeem has joined #haskell
2021-10-08 21:15:30	→	zer0bitz has joined #haskell
2021-10-08 21:15:48	→	mc47 has joined #haskell
2021-10-08 21:16:52	ocramz_	Franciman : pandoc is a good idea. Do you know if it supports latex style files ? (.sty)
2021-10-08 21:17:02	Franciman	yes
2021-10-08 21:17:05	Franciman	but only if it outputs to latex
2021-10-08 21:17:10	Franciman	you can add verbatim latex
2021-10-08 21:17:15	Franciman	in the preamble
2021-10-08 21:17:22	Franciman	and it gets added to the preamble of the output latex
2021-10-08 21:17:26	Franciman	wait
2021-10-08 21:17:30	ocramz_	that's great, I'll try this route then
2021-10-08 21:17:56	monochrom	tomsmeding: Yeah verbatim is reliable, just uncustomizable :)
2021-10-08 21:18:24	→	eggplantade has joined #haskell
2021-10-08 21:19:01	tomsmeding	sure :p
2021-10-08 21:19:30	Franciman	https://pandoc.org/MANUAL.html#creating-a-pdf this may be helpful
2021-10-08 21:19:32	Franciman	and also
2021-10-08 21:19:49	monochrom	I enjoy \lstMakeShortInline` so now I just have to say `f x = x + 1` instead of \verb... I forgot the exact \verb syntax for the inline thing.
2021-10-08 21:20:52	Franciman	https://pandoc.org/MANUAL.html#variables-for-latex <- this one
2021-10-08 21:20:57	Franciman	but really you can put your custom preamble
2021-10-08 21:21:04	Franciman	if I can find an example
2021-10-08 21:21:06	monochrom	To be sure, I don't need every-thing-customizable, but as said I sometimes need a smaller font size, verbatim is rigid on that.
2021-10-08 21:21:12	←	mc47 has quit (Quit: Leaving)
2021-10-08 21:21:30	Franciman	ocramz_: https://pandoc.org/MANUAL.html#syntax-highlighting <- this is for syntax highlighting
2021-10-08 21:21:31	→	mc47 has joined #haskell
2021-10-08 21:22:16	monochrom	On an exam paper for on-site exams, I want some code (part of the question) to be smaller, and some other code (part of the answer space) to be bigger (to match student writing).
2021-10-08 21:22:35	Franciman	https://superuser.com/questions/356032/markdown-to-latex-conversion-with-a-custom-preamble-using-pandoc and this helped me putting thins in the preamble
2021-10-08 21:23:06	Franciman	monochrom: does verbatim support colors?
2021-10-08 21:23:16	Franciman	i.e. syntax highlighting
2021-10-08 21:23:19	monochrom	I think no. I never needed colours.
2021-10-08 21:23:21	ocramz_	awesome thanks for the links Franciman
2021-10-08 21:23:36	monochrom	Hell, look at my nick, do I look like I appreciate colours? :)
2021-10-08 21:23:40	Franciman	ahah
2021-10-08 21:23:44	Franciman	np ocramz_ 
2021-10-08 21:24:25	Franciman	yeah black and white gives better definition to objects in photography, too
2021-10-08 21:24:30	Franciman	but color gives emotion
2021-10-08 21:24:34	geekosaur	verbatim supports basically nothing
2021-10-08 21:24:45	geekosaur	except, well, verbatim text
2021-10-08 21:24:58	Franciman	well nice black and white photos give emotions too
2021-10-08 21:25:28	←	myShoggoth has quit (Ping timeout: 252 seconds)
2021-10-08 21:26:20	tomsmeding	monochrom: what about https://mirror.lyrahosting.com/CTAN/macros/latex/contrib/fancyvrb/doc/fancyvrb-doc.pdf ?
2021-10-08 21:26:44	tomsmeding	seems to support defining an inline shortcut like your `` thing (\DefineShortVerb)
2021-10-08 21:26:57	tomsmeding	and also fontsize :)
2021-10-08 21:27:04	tomsmeding	haven't tested copyability though
2021-10-08 21:29:55	geekosaur	(verbatim also scares me, I looked at the impl once and the way they detect \end{verbatim} is hacky as all hell even for TeX
2021-10-08 21:29:56	←	OndejSkup[m] has quit (Quit: You have been kicked for being idle)
2021-10-08 21:30:07	geekosaur	)
2021-10-08 21:30:08	monochrom	I haven't tried. But looks like worth trying.
2021-10-08 21:30:08	→	OndejSkup[m] has joined #haskell
2021-10-08 21:30:09	←	OndejSkup[m] has left #haskell
2021-10-08 21:30:25	→	Null_A has joined #haskell
2021-10-08 21:30:59	→	Psybur has joined #haskell
2021-10-08 21:31:00	monochrom	Oh, \end{verbatim} is like The Dark Lord Who Must Not Be Named in programming anyway, so I'm fine with that. :)
2021-10-08 21:31:27	⚡	tomsmeding invents a programming language where "\end{verbatim}" at the start of a line is meaningful and occurs in many programs
2021-10-08 21:31:37	←	neurocyte0132889 has quit (Read error: Connection reset by peer)
2021-10-08 21:31:48	←	jle` has quit (Quit: WeeChat 2.7)
2021-10-08 21:32:49	→	neurocyte0132889 has joined #haskell
2021-10-08 21:32:49	←	neurocyte0132889 has quit (Changing host)
2021-10-08 21:32:49	→	neurocyte0132889 has joined #haskell
2021-10-08 21:34:34	→	hnOsmium0001 has joined #haskell
2021-10-08 21:35:07	→	econo has joined #haskell
2021-10-08 21:36:43	←	jakalx has left #haskell
2021-10-08 21:36:46	←	xiongxin has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-10-08 21:39:56	→	jtomas has joined #haskell
2021-10-08 21:40:09	←	Null_A has quit (Remote host closed the connection)
2021-10-08 21:40:35	→	Null_A has joined #haskell
2021-10-08 21:43:06	gaff	In GHCi, this compiles: f x = x :: Int, but this doesn't: f x = x :: Num a => a.  Any idea why?
2021-10-08 21:46:05	←	gaff has quit (Quit: Leaving...)
2021-10-08 21:46:23	→	gaff has joined #haskell
2021-10-08 21:46:38	gaff	In GHCi, this compiles: f x = x :: Int, but this doesn't: f x = x :: Num a => a.  Any idea why?
2021-10-08 21:47:03	Hecate	uh
2021-10-08 21:47:05	Hecate	no idea
2021-10-08 21:47:14	Hecate	but 'f (x :: Num a => a) = x' works with a couple of extensions
2021-10-08 21:47:42	→	wroathe has joined #haskell
2021-10-08 21:47:42	←	wroathe has quit (Changing host)
2021-10-08 21:47:42	→	wroathe has joined #haskell
2021-10-08 21:47:45	gaff	Hecate: ok, what are the extensions?
2021-10-08 21:48:09	Hecate	RankNTypes & ScopedTypeVariables
2021-10-08 21:48:10	tomsmeding	gaff: not ghci specific, in a file it also doesn't work
2021-10-08 21:48:27	tomsmeding	I expect this is due to some kind of impredicativity?
2021-10-08 21:48:31	Hecate	tomsmeding: yeah but you're more likely to inline the type signatures in ghci :P
2021-10-08 21:48:48	gaff	tomsmeding: yeah, i just tested in GHCi so far.  thanks
2021-10-08 21:48:56	tomsmeding	> f :: Num a => a -> a ; f x = x
2021-10-08 21:48:56	→	hololeap has joined #haskell
2021-10-08 21:48:57	lambdabot	 <hint>:1:22: error: parse error on input ‘;’
2021-10-08 21:49:04	tomsmeding	% f :: Num a => a -> a ; f x = x
2021-10-08 21:49:04	yahb	tomsmeding: 
2021-10-08 21:49:06	Franciman	gaff: it does not work because then, f would have type (Num a => a) -> (Num a => a)
2021-10-08 21:49:09	Franciman	i think
2021-10-08 21:49:24	Franciman	that requires the haskell extensions above mentioned
2021-10-08 21:49:32	Franciman	err
2021-10-08 21:49:41	Franciman	(forall a. Num a => a) -> (forall a. Num a => a)
2021-10-08 21:49:55	gaff	Franciman: actually from the error reported, haskell refuses to infer the type of the argument to `f`
2021-10-08 21:50:36	tomsmeding	the error with that rigid type variable p is very much like what happens if you let an existential variable escape
2021-10-08 21:50:42	Hecate	% f (x :: Num a => a) = x
2021-10-08 21:50:42	yahb	Hecate: 
2021-10-08 21:50:44	Hecate	boo
2021-10-08 21:50:52	Hecate	% :t f (x :: Num a => a) = x
2021-10-08 21:50:52	yahb	Hecate: ; <interactive>:1:21: error: parse error on input `='
2021-10-08 21:50:58	Hecate	curse
2021-10-08 21:51:02	tomsmeding	% :t f
2021-10-08 21:51:03	yahb	tomsmeding: Num a => (Num a => a) -> a
2021-10-08 21:51:07	tomsmeding	cool
2021-10-08 21:51:08	gaff	Franciman: even with those extensions, `f x = x :: Num a => a` does not work
2021-10-08 21:51:49	Franciman	hmm you are right
2021-10-08 21:52:50	→	merijn has joined #haskell
2021-10-08 21:53:21	←	gustik has quit (Quit: Leaving)
2021-10-08 21:53:56	gaff	tomsmeding: what do you mean by "let an existential variable escape"?
2021-10-08 21:54:02	→	myShoggoth has joined #haskell
2021-10-08 21:54:16	tomsmeding	% data Thing where MkThing :: a -> Thing
2021-10-08 21:54:16	yahb	tomsmeding: 
2021-10-08 21:54:21	Franciman	gaff: is this something you want to try, or do you need it in a bigger setting?
2021-10-08 21:54:31	tomsmeding	oh
2021-10-08 21:54:38	tomsmeding	% data Thing where MkThing :: a -> (a -> Int) -> Thing
2021-10-08 21:54:38	yahb	tomsmeding: 
2021-10-08 21:54:52	gaff	Franciman: i just came across it in some code i was looking at
2021-10-08 21:55:06	←	neurocyte0132889 has quit (Ping timeout: 260 seconds)
2021-10-08 21:55:20	tomsmeding	% f :: Thing -> Int ; f t = let { (x, f) = case t of MkThing x f -> (x, f) } in f x
2021-10-08 21:55:20	yahb	tomsmeding: ; <interactive>:16:68: error:; * Couldn't match expected type `t0' with actual type `a'; because type variable `a' would escape its scope; This (rigid, skolem) type variable is bound by a pattern with constructor: MkThing :: forall a. a -> (a -> Int) -> Thing, in a case alternative at <interactive>:16:52-62; * In the expression: x; In the expression: (x, f); In a case al
2021-10-08 21:55:23	geekosaur	actually the problem is that the iunside type signature does not mean the same thing as an outside one, so ghc infers the oiuter type signature and then discovers the inner one conflicts with it
2021-10-08 21:55:42	Franciman	ohh
2021-10-08 21:55:44	tomsmeding	gaff: this, but actually the error is more explicit about it apparently
2021-10-08 21:55:51	geekosaur	re the original question
2021-10-08 21:56:19	Franciman	ah geekosaur are you saying that it tries to infer :: forall a. a -> (forall b. Num b => b) 
2021-10-08 21:56:21	Franciman	?
2021-10-08 21:56:43	Franciman	no wait, I am confused
2021-10-08 21:57:05	geekosaur	no, I mean there is a difference between `f :: Num a => a; f = ...` and `f = ... :: Num a => a`
2021-10-08 21:57:22	tomsmeding	see also: https://mail.haskell.org/pipermail/haskell-cafe/2021-October/134709.html
2021-10-08 21:57:32	geekosaur	the latter does not actually have a type signature as far as ghc is concerned, so it infers one and then breaks because of the given one
2021-10-08 21:57:43	Franciman	oh lol
2021-10-08 21:58:17	geekosaur	made worse in this case because of the monomorphism restriction, so it infers a monomorphic type for f
2021-10-08 21:58:25	←	wroathe has quit (Ping timeout: 252 seconds)
2021-10-08 21:58:27	geekosaur	(probably Integer)
2021-10-08 21:58:32	gaff	geekosaur: yeah, correct.  but this compiles with some extensions: `f  (x  :: Num a => a) =x`
2021-10-08 21:59:22	←	mei has quit (Read error: Connection reset by peer)
2021-10-08 21:59:53	→	DNH has joined #haskell
2021-10-08 22:00:35	→	emf has joined #haskell
2021-10-08 22:00:55	gaff	i am not sure why that one compiles
2021-10-08 22:01:09	gaff	`f  (x  :: Num a => a) =x`
2021-10-08 22:02:21	tomsmeding	magic
2021-10-08 22:04:01	gaff	and of course `f x = x ::: Int` compiles without any extensions whatsoever!!
2021-10-08 22:04:41	geekosaur	monomorphism restriction, as I mentioned
2021-10-08 22:04:49	tomsmeding	% f x = x ::: Int
2021-10-08 22:04:49	yahb	tomsmeding: ; <interactive>:17:9: error: Data constructor not in scope: (:::) :: t -> t0 -> t1; <interactive>:17:13: error:; * Data constructor not in scope: Int; * Perhaps you meant variable `int' (imported from Text.PrettyPrint.HughesPJ)
2021-10-08 22:05:17	geekosaur	basically, if you have no parameters it assumes you want it to be computed only once, which requires a monomorphic type
2021-10-08 22:05:31	hololeap	with the optics package, how would I apply another optic to the second value of a tuple?
2021-10-08 22:05:35	geekosaur	so it infers one unless you have an outer type signature that specifically says otherwise
2021-10-08 22:05:35	tomsmeding	geekosaur: s/parameters/type signature/?
2021-10-08 22:05:44	geekosaur	f vs. f x
2021-10-08 22:06:13	⚡	tomsmeding doesn't see a binding in this discussion without parameters
2021-10-08 22:06:27	→	wroathe has joined #haskell
2021-10-08 22:06:27	←	wroathe has quit (Changing host)
2021-10-08 22:06:27	→	wroathe has joined #haskell
2021-10-08 22:06:34	geekosaur	I thought the original one used Num a => a
2021-10-08 22:06:39	hololeap	I want to create a new lens that leaves the first value of a tuple alone and focuses on the second value
2021-10-08 22:06:54	geekosaur	oh, but we've moved on, sorry
2021-10-08 22:07:07	gaff	geekosaur: getting rid off parameters is one way to get out of the monomorphic restriction, right?
2021-10-08 22:07:22	geekosaur	no, adding them is one way
2021-10-08 22:07:30	geekosaur	I misread whatwas going on at this point
2021-10-08 22:07:34	gaff	this was the original question -- : In GHCi, this compiles: f x = x :: Int, but this doesn't: f x = x :: Num a => a.  Any idea why?
2021-10-08 22:07:47	→	jakalx has joined #haskell
2021-10-08 22:08:07	geekosaur	my original statement about inferring the outer tyype signature stands
2021-10-08 22:08:43	geekosaur	but ghc(i) only infers what is needed, and "what is needed" means use sites, not the actual definition
2021-10-08 22:08:54	Tisoxin	is `foldr = foldl . reverse` true?
2021-10-08 22:09:06	geekosaur	plus, ghci is a bit strange compared to ghc as it can't see what will be needed, so it makes assumptions ghc does not
2021-10-08 22:09:10	←	Null_A has quit (Remote host closed the connection)
2021-10-08 22:09:11	gaff	geekosaur: ok, but in the case of `Int`, ihaskell is able to infer the signature without problems?
2021-10-08 22:09:21	Tisoxin	actually nvm
2021-10-08 22:09:21	monochrom	Tisoxin: Not for infinite lists.
2021-10-08 22:09:22	geekosaur	so it'll assume f :: Integer -> Integer and then break
2021-10-08 22:09:30	→	emf_ has joined #haskell
2021-10-08 22:09:37	→	Null_A has joined #haskell
2021-10-08 22:09:49	geekosaur	:t second
2021-10-08 22:09:51	lambdabot	Arrow a => a b c -> a (d, b) (d, c)
2021-10-08 22:09:55	tomsmeding	Tisoxin: almost ;)
2021-10-08 22:09:58	geekosaur	wrong second, I think
2021-10-08 22:10:14	→	werneta has joined #haskell
2021-10-08 22:10:18	monochrom	"f x = x :: a" is not how to express "f :: a -> a" either, in the first place.
2021-10-08 22:11:04	←	emf has quit (Ping timeout: 252 seconds)
2021-10-08 22:11:12	gaff	monochrom: correct, i know.  but i wanted to know why it does not work.
2021-10-08 22:11:40	←	CiaoSen has quit (Ping timeout: 252 seconds)
2021-10-08 22:11:51	hololeap	put most simply, I want a lens using the optics package that looks like this: Lens' (a, Identity b) (a, b)
2021-10-08 22:12:06	monochrom	The long story involves looking into the actual rules, not "intuition", of type inference.
2021-10-08 22:12:31	gaff	monochrom: ok, 
2021-10-08 22:12:50	monochrom	The short story though, IMO, is: "I want to specify the type of f, therefore I specify the type of something else" is clearly an XY problem.
2021-10-08 22:13:35	gaff	monochrom: yeah, got it.  it is not my code, by the way.  i just came across it while looking at something.
2021-10-08 22:15:10	tomsmeding	hololeap: haven't ever used lenses, but is that not something like `over _2`?
2021-10-08 22:16:30	hololeap	tomsmeding: basically. but I was looking for something that used combinators of Optics instead of defining it directly with functions. with the optics package, Optics are opaque and I'm wondering if there's a combinator that does this particular thing
2021-10-08 22:16:45	tomsmeding	hololeap: ... doesn't what I wrote also work in optics?
2021-10-08 22:16:58	tomsmeding	like, Optics exports 'over' and '_2'
2021-10-08 22:17:10	hololeap	sort of, but it doesn't compose with other optics
2021-10-08 22:17:13	tomsmeding	ah
2021-10-08 22:17:39	hololeap	with the lens library, it would
2021-10-08 22:19:32	←	Null_A has quit (Remote host closed the connection)
2021-10-08 22:19:58	→	Null_A has joined #haskell
2021-10-08 22:21:56	→	zero has joined #haskell
2021-10-08 22:22:40	←	wroathe has quit (Ping timeout: 252 seconds)
2021-10-08 22:23:30	←	zzz has quit (Ping timeout: 250 seconds)
2021-10-08 22:24:49	←	ocramz_ has quit (Ping timeout: 265 seconds)
2021-10-08 22:27:06	hololeap	the best I can come up with is something like `lens (second runIdentity) (const (second Identity))`, which makes a composible Lens
2021-10-08 22:27:14	←	merijn has quit (Ping timeout: 265 seconds)
2021-10-08 22:27:40	hololeap	but, it would be nice to be able to re-use another lens (#runIdentity in this example)
2021-10-08 22:29:53	←	Null_A has quit (Remote host closed the connection)
2021-10-08 22:30:18	→	Null_A has joined #haskell
2021-10-08 22:30:24	←	werneta has quit (Remote host closed the connection)
2021-10-08 22:32:54	→	wroathe has joined #haskell
2021-10-08 22:32:54	←	wroathe has quit (Changing host)
2021-10-08 22:32:54	→	wroathe has joined #haskell
2021-10-08 22:35:58	→	werneta has joined #haskell
2021-10-08 22:35:59	→	pretty_dumm_guy has joined #haskell
2021-10-08 22:37:53	→	ocramz_ has joined #haskell
2021-10-08 22:42:38	←	ocramz_ has quit (Ping timeout: 245 seconds)
2021-10-08 22:42:38	←	zero has quit (Read error: Connection reset by peer)
2021-10-08 22:44:09	←	gaff has left #haskell (Leaving...)
2021-10-08 22:44:45	→	justsomeguy has joined #haskell
2021-10-08 22:46:31	→	lavaman has joined #haskell
2021-10-08 22:46:59	←	emf_ has quit (Ping timeout: 245 seconds)
2021-10-08 22:50:57	←	lavaman has quit (Ping timeout: 245 seconds)
2021-10-08 22:52:51	←	chomwitt has quit (Ping timeout: 265 seconds)
2021-10-08 22:52:55	←	mikoto-chan has quit (Ping timeout: 252 seconds)
2021-10-08 22:53:49	←	hyiltiz has quit (Ping timeout: 265 seconds)
2021-10-08 22:55:30	→	hyiltiz has joined #haskell
2021-10-08 22:56:11	→	ocramz_ has joined #haskell
2021-10-08 22:56:16	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-10-08 22:56:39	←	myShoggoth has quit (Remote host closed the connection)
2021-10-08 22:56:53	→	MQ-17J has joined #haskell
2021-10-08 22:56:57	→	myShoggoth has joined #haskell
2021-10-08 22:57:11	→	mikoto-chan has joined #haskell
2021-10-08 23:00:07	←	MidAutumnMoon has quit (Ping timeout: 245 seconds)
2021-10-08 23:01:09	←	ocramz_ has quit (Ping timeout: 245 seconds)
2021-10-08 23:01:38	→	emf has joined #haskell
2021-10-08 23:02:12	→	ocramz_ has joined #haskell
2021-10-08 23:07:38	ℹ	irc: disconnected from server
2021-10-08 23:08:00	→	oxide has joined #haskell
2021-10-08 23:08:00	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-10-08 23:08:00	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-10-08 23:08:00	ℹ	Channel #haskell: 734 nicks (1 op, 0 voices, 733 normals)
2021-10-08 23:08:01	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-10-08 23:08:07	→	MidAutumnMoon has joined #haskell
2021-10-08 23:08:08	→	kmein_ has joined #haskell
2021-10-08 23:10:07	←	kmein has quit (Ping timeout: 245 seconds)
2021-10-08 23:19:19	→	ocramz_ has joined #haskell
2021-10-08 23:20:33	→	chomwitt has joined #haskell
2021-10-08 23:20:57	←	hyiltiz has quit (Ping timeout: 245 seconds)
2021-10-08 23:23:47	→	[itchyjunk] has joined #haskell
2021-10-08 23:24:17	←	taeaad_ has quit (Quit: ZNC 1.7.5+deb4 - https://znc.in)
2021-10-08 23:24:38	→	neurocyte0132889 has joined #haskell
2021-10-08 23:24:38	←	neurocyte0132889 has quit (Changing host)
2021-10-08 23:24:38	→	neurocyte0132889 has joined #haskell
2021-10-08 23:25:19	←	myShoggoth has quit (Ping timeout: 252 seconds)
2021-10-08 23:25:41	→	myShoggoth has joined #haskell
2021-10-08 23:25:56	→	obs\ has joined #haskell
2021-10-08 23:25:56	←	obs\ has quit (Changing host)
2021-10-08 23:25:56	→	obs\ has joined #haskell
2021-10-08 23:26:48	→	VoidNoir0 has joined #haskell
2021-10-08 23:27:32	hololeap	newtype TrivialMap k v = TrivialMap { getTrivialMap :: Maybe v }
2021-10-08 23:27:40	hololeap	    deriving (Show2, Eq2, Ord2) via Flip (Biff Const Maybe Identity)
2021-10-08 23:27:44	hololeap	:D
2021-10-08 23:27:57	←	jtomas has quit (Remote host closed the connection)
2021-10-08 23:28:20	→	jtomas has joined #haskell
2021-10-08 23:28:39	→	hyiltiz has joined #haskell
2021-10-08 23:29:43	monochrom	Biff. That's a nostalgial name. :)
2021-10-08 23:31:41	←	stiell has quit (Remote host closed the connection)
2021-10-08 23:32:10	→	stiell has joined #haskell
2021-10-08 23:32:14	hololeap	% :t Biff
2021-10-08 23:32:14	yahb	hololeap: ; <interactive>:1:1: error: Data constructor not in scope: Biff
2021-10-08 23:38:02	←	ocramz_ has quit (Ping timeout: 245 seconds)
2021-10-08 23:38:35	←	geekosaur has quit (Remote host closed the connection)
2021-10-08 23:40:25	→	taeaad has joined #haskell
2021-10-08 23:40:25	→	geekosaur has joined #haskell
2021-10-08 23:43:56	→	aegon has joined #haskell
2021-10-08 23:44:13	←	Gurkenglas has quit (Ping timeout: 265 seconds)
2021-10-08 23:44:40	←	Lord_of_Life has quit (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
2021-10-08 23:46:59	←	justsomeguy has quit (Ping timeout: 245 seconds)
2021-10-08 23:47:34	←	Null_A has quit (Ping timeout: 260 seconds)
2021-10-08 23:47:40	→	Lord_of_Life has joined #haskell
2021-10-08 23:51:10	→	ocramz_ has joined #haskell
2021-10-08 23:51:22	←	mc47 has quit (Remote host closed the connection)
2021-10-08 23:52:49	←	hyiltiz has quit (Ping timeout: 245 seconds)
2021-10-08 23:55:44	←	ocramz_ has quit (Ping timeout: 245 seconds)
2021-10-08 23:55:51	→	justsomeguy has joined #haskell
2021-10-08 23:56:09	←	stiell has quit (Remote host closed the connection)
2021-10-08 23:56:17	→	Gurkenglas has joined #haskell
2021-10-08 23:56:33	→	stiell has joined #haskell
2021-10-08 23:57:23	←	max22- has quit (Ping timeout: 260 seconds)
2021-10-08 23:57:47	←	Hanicef has quit (Quit: leaving)
2021-10-09 00:01:40	←	jtomas has quit (Ping timeout: 252 seconds)
2021-10-09 00:02:52	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-10-09 00:04:42	←	wroathe has quit (Ping timeout: 245 seconds)
2021-10-09 00:06:47	←	alx741 has quit (Ping timeout: 245 seconds)
2021-10-09 00:06:49	→	bontaq has joined #haskell
2021-10-09 00:07:34	←	dyeplexer has quit (Remote host closed the connection)
2021-10-09 00:08:19	→	ocramz_ has joined #haskell
2021-10-09 00:11:12	←	thyriaen has quit (Remote host closed the connection)
2021-10-09 00:15:35	←	justsomeguy has quit (Quit: WeeChat 3.2)
2021-10-09 00:17:37	←	wonko has quit (Ping timeout: 252 seconds)
2021-10-09 00:17:59	→	Null_A has joined #haskell
2021-10-09 00:18:33	→	jtomas has joined #haskell
2021-10-09 00:19:03	→	wonko has joined #haskell
2021-10-09 00:19:38	→	alx741 has joined #haskell
2021-10-09 00:21:28	→	Tuplanolla has joined #haskell
2021-10-09 00:21:35	→	wroathe has joined #haskell
2021-10-09 00:21:35	←	wroathe has quit (Changing host)
2021-10-09 00:21:35	→	wroathe has joined #haskell
2021-10-09 00:22:37	→	hyiltiz has joined #haskell
2021-10-09 00:23:12	←	azimut has quit (Ping timeout: 276 seconds)
2021-10-09 00:23:14	→	merijn has joined #haskell
2021-10-09 00:23:16	→	decio38 has joined #haskell
2021-10-09 00:23:59	←	decio38 has left #haskell
2021-10-09 00:24:00	→	azimut has joined #haskell
2021-10-09 00:24:33	→	decio has joined #haskell
2021-10-09 00:26:09	←	wroathe has quit (Ping timeout: 245 seconds)
2021-10-09 00:26:37	→	max22- has joined #haskell
2021-10-09 00:27:28	←	ocramz_ has quit (Ping timeout: 252 seconds)
2021-10-09 00:27:52	←	_ht has quit (Remote host closed the connection)
2021-10-09 00:28:14	→	echoone has joined #haskell
2021-10-09 00:29:03	→	ocramz_ has joined #haskell
2021-10-09 00:29:54	←	werneta has quit (Remote host closed the connection)
2021-10-09 00:32:18	→	vicfred has joined #haskell
2021-10-09 00:34:12	←	stiell has quit (Remote host closed the connection)
2021-10-09 00:34:33	→	stiell has joined #haskell
2021-10-09 00:34:46	←	_xor has quit (Read error: Connection reset by peer)
2021-10-09 00:35:19	←	rtjure has quit (Ping timeout: 245 seconds)
2021-10-09 00:35:25	ocramz_	% :t Just
2021-10-09 00:35:26	yahb	ocramz_: a -> Maybe a
2021-10-09 00:35:33	ocramz_	nice
2021-10-09 00:35:46	ocramz_	is this the new lambdabot ?
2021-10-09 00:36:03	geekosaur	not really new, just different
2021-10-09 00:36:13	geekosaur	it's an actual ghci, for one
2021-10-09 00:36:31	geekosaur	has a different set of packages loaded, can do limited I/O, etc.
2021-10-09 00:36:52	ocramz_	very handy
2021-10-09 00:38:52	→	_xor has joined #haskell
2021-10-09 00:39:19	ocramz_	% :t fix
2021-10-09 00:39:20	yahb	ocramz_: (a -> a) -> a
2021-10-09 00:39:25	ocramz_	% fix error
2021-10-09 00:39:30	ocramz_	ayy
2021-10-09 00:39:30	yahb	ocramz_: "*** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Exception: *** Excep
2021-10-09 00:39:46	ocramz_	veri gud
2021-10-09 00:39:56	Hecate	:% :t fix . error
2021-10-09 00:40:00	Hecate	damn
2021-10-09 00:40:02	Hecate	% :t fix . error
2021-10-09 00:40:03	yahb	Hecate: [Char] -> c
2021-10-09 00:40:07	Hecate	beautiful
2021-10-09 00:41:21	→	zero has joined #haskell
2021-10-09 00:42:03	←	chexum has quit (Ping timeout: 276 seconds)
2021-10-09 00:42:43	←	decio has quit (Quit: because)
2021-10-09 00:42:52	→	chexum has joined #haskell
2021-10-09 00:45:20	ocramz_	monochrom : I might have found out why lstlistings adds extra space in rendered Latex; try adding 'columns=flexible' in the lstset dictionary
2021-10-09 00:45:56	→	w-spc-gir has joined #haskell
2021-10-09 00:47:45	→	DNH has joined #haskell
2021-10-09 00:48:31	←	biberu has quit (Read error: Connection reset by peer)
2021-10-09 00:48:51	→	biberu has joined #haskell
2021-10-09 00:48:56	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-09 00:50:16	→	w-spc-gir has joined #haskell
2021-10-09 00:51:06	→	bdaed has joined #haskell
2021-10-09 00:52:11	→	ru0mad has joined #haskell
2021-10-09 00:52:49	←	jtomas has quit (Ping timeout: 252 seconds)
2021-10-09 00:54:54	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-09 00:57:56	lbseale	I'd like to be able to run a process that prints colored text to std out, but save that text and maybe print it out later with colors
2021-10-09 00:58:02	←	merijn has quit (Ping timeout: 265 seconds)
2021-10-09 00:58:36	lbseale	I've gotten as far as running `createProcess` with CreatePipe, using hGetContents to get the stdOut, but it doesn't have the colors
2021-10-09 00:58:42	geekosaur	easiest way to do that is bespoke output functions that both print and save
2021-10-09 00:58:58	geekosaur	oh, I see
2021-10-09 00:59:07	awpr	most CLI programs detect whether the output is a terminal to decide whether to use color by default
2021-10-09 00:59:19	geekosaur	if the program checks to see if output is a tty thyen you need to use a pty instead of sa pipe
2021-10-09 00:59:21	awpr	usually you have to pass a flag like `--color=always` to override it
2021-10-09 00:59:38	lbseale	ah ok
2021-10-09 00:59:46	geekosaur	there are some primitive pty functions in System.Process if you do need to do this
2021-10-09 01:00:03	geekosaur	(note that you will lose portability to Windows)
2021-10-09 01:00:10	lbseale	I'm ok with that
2021-10-09 01:00:14	awpr	ah that's an interesting trick.  flag would be easier if it exists, but if not, you might have to do that
2021-10-09 01:00:36	→	w-spc-gir has joined #haskell
2021-10-09 01:00:39	geekosaur	hm, maybe they're in System.Posix.Process
2021-10-09 01:00:40	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-09 01:00:57	monochrom	Yeah pty is a unix thing.
2021-10-09 01:01:00	awpr	(I've never personally noticed a program that wouldn't let you force-enable color on a non-tty)
2021-10-09 01:01:26	lbseale	yeah it has a --color=always option, and that worked! Thanks much
2021-10-09 01:02:58	monochrom	And then System.Posix.Process goes on to use the BSD style.
2021-10-09 01:03:13	←	cheater has quit (Ping timeout: 252 seconds)
2021-10-09 01:03:13	←	kawpuh has quit (Read error: Connection reset by peer)
2021-10-09 01:03:25	→	kawpuh has joined #haskell
2021-10-09 01:03:35	→	cheater has joined #haskell
2021-10-09 01:06:17	→	jtomas has joined #haskell
2021-10-09 01:07:17	→	w-spc-gir has joined #haskell
2021-10-09 01:08:02	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-09 01:08:17	monochrom	ocramz_: Nice find. Thanks.
2021-10-09 01:09:17	←	mikoto-chan has quit (Ping timeout: 245 seconds)
2021-10-09 01:10:59	→	w-spc-gir has joined #haskell
2021-10-09 01:11:03	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-09 01:12:54	ℹ	wrengr_away is now known as wrengr
2021-10-09 01:15:29	←	mjrosenb has quit (Ping timeout: 252 seconds)
2021-10-09 01:26:20	→	w-spc-gir has joined #haskell
2021-10-09 01:26:21	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-09 01:26:57	→	acidjnk_new3 has joined #haskell
2021-10-09 01:27:46	→	jumper149 has joined #haskell
2021-10-09 01:28:00	←	slowButPresent has quit (Ping timeout: 265 seconds)
2021-10-09 01:29:01	←	alzgh has quit (Remote host closed the connection)
2021-10-09 01:29:21	→	alzgh has joined #haskell
2021-10-09 01:29:24	→	slowButPresent has joined #haskell
2021-10-09 01:35:07	←	juhp has quit (Ping timeout: 245 seconds)
2021-10-09 01:37:02	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-10-09 01:37:52	→	w-spc-gir has joined #haskell
2021-10-09 02:09:42	ℹ	irc: disconnected from server
2021-10-09 02:10:03	→	oxide has joined #haskell
2021-10-09 02:10:03	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-10-09 02:10:03	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-10-09 02:10:03	ℹ	Channel #haskell: 741 nicks (1 op, 0 voices, 740 normals)
2021-10-09 02:10:03	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-10-09 02:11:43	→	w-spc-gir has joined #haskell
2021-10-09 02:12:02	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-09 02:13:34	→	hyiltiz has joined #haskell
2021-10-09 02:20:00	Franciman	coffee7: Hi, what output would you like?
2021-10-09 02:20:03	→	waleee has joined #haskell
2021-10-09 02:20:06	Franciman	plot on a pdf file maybe?
2021-10-09 02:20:10	Franciman	or in a GUI?
2021-10-09 02:20:28	→	Cajun has joined #haskell
2021-10-09 02:21:51	→	myShoggoth has joined #haskell
2021-10-09 02:23:44	coffee7	It doesn't really matter. It's only for me. A simple jpg output is fine.
2021-10-09 02:25:36	coffee7	easy to use and get started quickly is the most important thing. I was looking at easyplot.
2021-10-09 02:27:18	←	Null_A has quit (Remote host closed the connection)
2021-10-09 02:32:14	→	Null_A has joined #haskell
2021-10-09 02:34:27	→	wroathe has joined #haskell
2021-10-09 02:34:27	←	wroathe has quit (Changing host)
2021-10-09 02:34:27	→	wroathe has joined #haskell
2021-10-09 02:34:41	←	echoone has quit (Quit: Client closed)
2021-10-09 02:37:28	→	w-spc-gir has joined #haskell
2021-10-09 02:38:13	→	a6a45081-2b83 has joined #haskell
2021-10-09 02:40:25	a6a45081-2b83	I'm trying to use ghci to debug a program, but I am confused by the binding scopes. I am inside a do block which is on the RHS of a case statement value. How can I access the value itself?
2021-10-09 02:40:48	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-09 02:41:01	a6a45081-2b83	e.g. `case ex of A a -> ...; B b -> do {.... <I am here> }` I want to get the value of b.
2021-10-09 02:41:29	→	pavonia has joined #haskell
2021-10-09 02:41:47	geekosaur	b should be in scope there unless your indentation is heinously off
2021-10-09 02:41:57	geekosaur	and then I'd expect a compile error
2021-10-09 02:42:17	geekosaur	@where paste
2021-10-09 02:42:18	lambdabot	Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
2021-10-09 02:42:53	monochrom	The question is very unclear because we are not told what steps you have carried out to even warrant this b to exist in the first place.
2021-10-09 02:43:00	←	alzgh has quit (Remote host closed the connection)
2021-10-09 02:43:20	→	alzgh has joined #haskell
2021-10-09 02:43:23	←	Maxdamantus has quit (Ping timeout: 265 seconds)
2021-10-09 02:43:30	a6a45081-2b83	let me share the code snippet to be more clear.
2021-10-09 02:43:54	→	Maxdamantus has joined #haskell
2021-10-09 02:44:50	←	takuan has quit (Remote host closed the connection)
2021-10-09 02:45:59	a6a45081-2b83	here it is: https://paste.tomsmeding.com/kIWKwryY
2021-10-09 02:46:45	monochrom	Uh which line is so-called "584"?
2021-10-09 02:47:12	a6a45081-2b83	`584: (s4, rhs_ty_gen) <- generalize venv' s3 bound_tyvars drvd_rhs_ty'`
2021-10-09 02:47:44	monochrom	Uh who is "b"?
2021-10-09 02:48:22	a6a45081-2b83	b is `LetE (v, [], gvn_rhs_ty, rhs) bod`, more specifically I want the value of v and bod
2021-10-09 02:49:12	monochrom	And you are saying ":print v" gives you what?
2021-10-09 02:49:28	a6a45081-2b83	`<interactive>:1:1: error: Not in scope: ‘v’`
2021-10-09 02:49:48	→	Lord_of_Life_ has joined #haskell
2021-10-09 02:50:30	monochrom	How about, for example, ":print s3", to guard against confirmation bias?
2021-10-09 02:50:43	←	Lord_of_Life has quit (Ping timeout: 245 seconds)
2021-10-09 02:51:28	a6a45081-2b83	`s3 = (_t2::Gibbon.L0.Typecheck.Subst)`
2021-10-09 02:51:43	a6a45081-2b83	I tried using `:force s3` and that works too
2021-10-09 02:51:50	a6a45081-2b83	I get some nested value
2021-10-09 02:52:16	lbseale	it's because s3 is in the scope of the exact line you're breaking on, but v is not
2021-10-09 02:52:34	ℹ	Lord_of_Life_ is now known as Lord_of_Life
2021-10-09 02:52:34	lbseale	you want to break on the line that starts with `Let E ...`
2021-10-09 02:53:27	←	bdaed has quit (Ping timeout: 245 seconds)
2021-10-09 02:53:49	→	merijn has joined #haskell
2021-10-09 02:54:34	←	geekosaur has quit (Remote host closed the connection)
2021-10-09 02:54:53	→	geekosaur has joined #haskell
2021-10-09 02:55:18	←	wonko has quit (Ping timeout: 245 seconds)
2021-10-09 02:55:34	→	w-spc-gir has joined #haskell
2021-10-09 02:56:01	→	wonko has joined #haskell
2021-10-09 02:56:24	a6a45081-2b83	one more thing, is there a way to put conditional breakpoints, from the reference it doesn't seem like
2021-10-09 02:56:38	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-09 02:57:00	monochrom	Oh haha "We originally provided bindings for all variables in scope, rather than just the free variables of the expression, but found that this affected performance considerably, hence the current restriction to just the free variables."
2021-10-09 02:59:21	→	ss4 has joined #haskell
2021-10-09 03:00:26	Franciman	coffee7: I liked these ones: https://hackage.haskell.org/package/gnuplot https://hackage.haskell.org/package/dynamic-plot-0.4.1.0/docs/Graphics-Dynamic-Plot-R2.html
2021-10-09 03:00:31	Franciman	and easy plot
2021-10-09 03:00:38	→	bdaed has joined #haskell
2021-10-09 03:00:43	←	emf has quit (Ping timeout: 245 seconds)
2021-10-09 03:01:08	←	wootehfoot has quit (Ping timeout: 245 seconds)
2021-10-09 03:01:37	→	emf has joined #haskell
2021-10-09 03:03:42	←	jtomas has quit (Ping timeout: 252 seconds)
2021-10-09 03:06:16	→	Pickchea has joined #haskell
2021-10-09 03:06:35	←	wonko has quit (Ping timeout: 265 seconds)
2021-10-09 03:06:36	a6a45081-2b83	this makes me a little annoyed that they removed it :(
2021-10-09 03:09:42	←	Gurkenglas has quit (Ping timeout: 245 seconds)
2021-10-09 03:11:20	←	p3n has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-10-09 03:11:26	→	tabaqui has joined #haskell
2021-10-09 03:11:51	→	w-spc-gir has joined #haskell
2021-10-09 03:12:56	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-09 03:15:48	←	alzgh has quit (Remote host closed the connection)
2021-10-09 03:15:50	←	barzo has quit (Remote host closed the connection)
2021-10-09 03:15:52	→	p3n has joined #haskell
2021-10-09 03:16:07	→	alzgh has joined #haskell
2021-10-09 03:16:44	→	barzo has joined #haskell
2021-10-09 03:16:46	←	rtjure has quit (Quit: Leaving)
2021-10-09 03:16:52	←	barzo has left #haskell
2021-10-09 03:17:48	←	sugar has quit (Quit: Client closed)
2021-10-09 03:18:47	←	fendor has quit (Remote host closed the connection)
2021-10-09 03:18:49	→	libertyprime has joined #haskell
2021-10-09 03:19:07	coffee7	Franciman: will try easy plot. Thanks for your opinion.
2021-10-09 03:19:13	←	jumper149 has quit (Quit: WeeChat 3.2.1)
2021-10-09 03:19:38	Franciman	hey, no prob. good luck!
2021-10-09 03:21:57	←	ocramz_ has quit (Remote host closed the connection)
2021-10-09 03:22:10	→	ocramz_ has joined #haskell
2021-10-09 03:24:18	←	doyougnu has quit (Remote host closed the connection)
2021-10-09 03:26:45	←	ocramz_ has quit (Ping timeout: 252 seconds)
2021-10-09 03:27:14	←	bdaed has quit (Quit: Lost terminal)
2021-10-09 03:28:20	←	merijn has quit (Ping timeout: 265 seconds)
2021-10-09 03:29:17	←	vicfred has quit (Ping timeout: 245 seconds)
2021-10-09 03:29:31	→	w-spc-gir has joined #haskell
2021-10-09 03:30:01	a6a45081-2b83	is there a way to cache cabal build for CI? I am caching ~/.cabal/store and ~/cabal/packages
2021-10-09 03:30:25	a6a45081-2b83	Is there something missing? I see dependencies like transformers, base-compat being built everytime
2021-10-09 03:30:30	sclv	a6a45081-2b83: https://hackage.haskell.org/package/cabal-cache
2021-10-09 03:30:34	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-09 03:30:46	maerwald	that requires  s3 though
2021-10-09 03:31:26	sclv	if you keep using the store, then they shouldn't get built every time, assuming the versions and flags match, and _also_ assuming you're fetching/managing them with standard cabal instead of listing them in .project files
2021-10-09 03:31:56	geekosaur	unless ci is doing something stupid like nuking the store
2021-10-09 03:32:22	geekosaur	(have heard of people having a ci step to copy the store from somewhere safe to get around that)
2021-10-09 03:32:37	a6a45081-2b83	I see that it restores 37MB of some cache, but idk if there is something wrong with my config
2021-10-09 03:32:45	←	gehmehgeh has quit (Quit: Leaving)
2021-10-09 03:33:03	a6a45081-2b83	flags and ghc version remain same, no deps in .project file
2021-10-09 03:38:20	←	betelgeuse has quit (Quit: The Lounge - https://thelounge.chat)
2021-10-09 03:43:16	→	sprout has joined #haskell
2021-10-09 03:45:18	→	mestre has joined #haskell
2021-10-09 03:50:22	→	w-spc-gir has joined #haskell
2021-10-09 03:51:30	→	Core1638 has joined #haskell
2021-10-09 03:51:31	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-09 03:51:36	←	Core1638 has quit (Read error: Connection reset by peer)
2021-10-09 03:53:21	→	michalz has joined #haskell
2021-10-09 03:54:00	←	michalz has quit (Remote host closed the connection)
2021-10-09 03:55:56	→	jgeerds has joined #haskell
2021-10-09 03:56:02	←	DNH has quit (Quit: Textual IRC Client: www.textualapp.com)
2021-10-09 03:57:46	←	max22- has quit (Quit: Leaving)
2021-10-09 03:59:16	→	gioyik has joined #haskell
2021-10-09 04:00:11	→	w-spc-gir has joined #haskell
2021-10-09 04:01:38	→	OscarZ has joined #haskell
2021-10-09 04:04:29	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-09 04:10:28	→	w-spc-gir has joined #haskell
2021-10-09 04:11:51	←	w-spc-gir has quit (Read error: Connection reset by peer)
2021-10-09 04:12:42	ℹ	irc: disconnected from server
2021-10-14 13:05:24	→	oxide has joined #haskell
2021-10-14 13:05:24	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-10-14 13:05:24	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-10-14 13:05:24	ℹ	Channel #haskell: 714 nicks (1 op, 0 voices, 713 normals)
2021-10-14 13:05:24	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-10-14 13:09:47	→	cfricke has joined #haskell
2021-10-14 13:15:12	←	azeem has quit (Read error: Connection reset by peer)
2021-10-14 13:15:30	→	azeem has joined #haskell
2021-10-14 13:16:19	←	Vajb has quit (Read error: Connection reset by peer)
2021-10-14 13:16:31	→	Vajb has joined #haskell
2021-10-14 13:22:10	→	kuribas has joined #haskell
2021-10-14 13:24:53	→	acidjnk_new has joined #haskell
2021-10-14 13:24:57	dminuoso	tdammers: In part yes, though if you have these "impossible cant happen" situations in pure code, this results in one of several problems
2021-10-14 13:25:13	←	o1lo01ol1o has quit (Remote host closed the connection)
2021-10-14 13:25:50	dminuoso	Encoding these error conditions into ADTs can be tricky or annoying at times due to compositionality
2021-10-14 13:25:57	←	jtomas_ has quit (Quit: Leaving)
2021-10-14 13:26:30	c_wraith	or a massive performance penalty
2021-10-14 13:27:26	dminuoso	Heh, was going to say that too.
2021-10-14 13:27:52	dminuoso	It's not a reason not to do this, but it can present challenges 
2021-10-14 13:28:24	kuribas	just put some property tests on it to prove the invariant.
2021-10-14 13:31:12	kuribas	It just depends on how much the problem solves vs the effort required.
2021-10-14 13:31:32	c_wraith	I'm thinking of a particularly knotty bit of code I wrote...   I think getting rid of the call to error completely invalidates the reason the code exists.
2021-10-14 13:33:07	dminuoso	Plus, you *can* catch error in IO
2021-10-14 13:34:05	dminuoso	Perhaps we should just use more `evaluate`
2021-10-14 13:34:11	c_wraith	also, it doesn't really help with the actual problem in that code, which is that if the circular reference is allowed to close, you get a self-referential thunk. No data type can fix *that* problem.
2021-10-14 13:35:10	dminuoso	c_wraith: Oh but that's not true!
2021-10-14 13:35:22	dminuoso	Pointers are magic
2021-10-14 13:35:28	kuribas	c_wraith: do you want to avoid self-referencing?
2021-10-14 13:35:45	kuribas	c_wraith: couldn't you use a monad to generate it?
2021-10-14 13:35:57	c_wraith	no.  not even close.
2021-10-14 13:37:05	c_wraith	https://gist.github.com/chowells79/996f2749b088d287937e3eff11055522
2021-10-14 13:38:54	←	tzh has quit (Quit: zzz)
2021-10-14 13:39:33	→	hendursa1 has joined #haskell
2021-10-14 13:40:07	←	hendursaga has quit (Ping timeout: 276 seconds)
2021-10-14 13:40:41	kuribas	c_wraith: could you make an intermediate, not self-referencial version, which you then validate and convert to tie the knot?
2021-10-14 13:40:59	c_wraith	that would entirely defeat the purpose
2021-10-14 13:41:20	kuribas	looks like an interesting problem, but I am busy right now...
2021-10-14 13:41:23	c_wraith	as it would add back all the overhead that's being eliminated by making them the same in the first place
2021-10-14 13:43:12	kuribas	I could look at it this evening, or tomorrow.
2021-10-14 13:46:40	←	geekosaur has quit (Read error: Connection reset by peer)
2021-10-14 13:47:22	→	geekosaur has joined #haskell
2021-10-14 13:47:56	→	o1lo01ol1o has joined #haskell
2021-10-14 13:48:30	→	ub has joined #haskell
2021-10-14 13:49:22	←	ubert1 has quit (Ping timeout: 252 seconds)
2021-10-14 13:49:51	←	ubert has quit (Ping timeout: 245 seconds)
2021-10-14 13:49:52	ℹ	ub is now known as ubert
2021-10-14 13:56:44	←	eggplantade has quit (Remote host closed the connection)
2021-10-14 13:59:49	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-10-14 14:00:59	→	MQ-17J has joined #haskell
2021-10-14 14:03:09	←	max22- has quit (Remote host closed the connection)
2021-10-14 14:03:37	←	werneta has quit (Ping timeout: 265 seconds)
2021-10-14 14:03:56	→	max22- has joined #haskell
2021-10-14 14:22:06	←	o1lo01ol1o has quit (Remote host closed the connection)
2021-10-14 14:22:39	→	Pickchea has joined #haskell
2021-10-14 14:22:42	→	o1lo01ol1o has joined #haskell
2021-10-14 14:24:44	←	o1lo01ol1o has quit (Remote host closed the connection)
2021-10-14 14:24:58	→	o1lo01ol1o has joined #haskell
2021-10-14 14:28:13	→	fendor_ has joined #haskell
2021-10-14 14:30:41	←	fendor has quit (Ping timeout: 245 seconds)
2021-10-14 14:32:33	←	o1lo01ol1o has quit (Remote host closed the connection)
2021-10-14 14:33:12	→	o1lo01ol1o has joined #haskell
2021-10-14 14:33:55	←	dolio has quit (Ping timeout: 252 seconds)
2021-10-14 14:34:56	→	dolio has joined #haskell
2021-10-14 14:39:55	←	azimut has quit (Ping timeout: 276 seconds)
2021-10-14 14:49:46	→	mestre has joined #haskell
2021-10-14 14:51:06	→	tdaeayusr^ has joined #haskell
2021-10-14 14:55:01	→	trillp has joined #haskell
2021-10-14 14:55:49	←	Pickchea has quit (Ping timeout: 265 seconds)
2021-10-14 14:57:09	→	eggplantade has joined #haskell
2021-10-14 15:01:45	←	eggplantade has quit (Ping timeout: 265 seconds)
2021-10-14 15:03:04	←	dschrempf has quit (Ping timeout: 252 seconds)
2021-10-14 15:03:59	←	Kaiepi has quit (Read error: Connection reset by peer)
2021-10-14 15:04:10	→	mei6 has joined #haskell
2021-10-14 15:04:14	→	Kaiepi has joined #haskell
2021-10-14 15:06:47	←	acidjnk_new has quit (Ping timeout: 268 seconds)
2021-10-14 15:13:11	→	timCF has joined #haskell
2021-10-14 15:15:46	←	tdaeayusr^ has quit (Ping timeout: 252 seconds)
2021-10-14 15:17:55	←	MQ-17J has quit (Ping timeout: 252 seconds)
2021-10-14 15:18:05	timCF	Hello! Does anyone have an idea how I could get a some sort of a list/graph/tree of Async processes currently running with information about how they are related to each other, structured and linked? Basically I'm looking for experience similar to Erlang "observer" tool, but in form of data which I can programmatically handle - send some mertics to monitoring services etc.
2021-10-14 15:21:30	sshine	timCF, as far as I remember, Erlang's spawn_link creates a child process and grants the parent process certain runtime privileges for monitoring if the process died, and killing child processes.
2021-10-14 15:22:50	→	MQ-17J has joined #haskell
2021-10-14 15:23:08	sshine	timCF, I don't know exactly how spawn_monitor is implemented, though. but maybe it happens by wrapping the function that the child process runs inside another function that handles monitoring requests?
2021-10-14 15:24:16	sshine	timCF, did you see https://hackage.haskell.org/package/distributed-process ?
2021-10-14 15:26:41	sshine	timCF, judging by the 2018 timestamp, I don't know how popular it is.
2021-10-14 15:27:15	←	Neuromancer has quit (Remote host closed the connection)
2021-10-14 15:27:16	timCF	sshine: yeah, I'm ex-Erlang programmer, and I did transfered a lot of ideas from it to my current Haskell development experience. Including linking spawned processes. Async libarary provides experience pretty close to low-level OTP functions like spawn and link. I do have some sort of generic supervisor trees implemented in terms of Async, and it mostly works. Just thinking that it might be very cool to 
2021-10-14 15:27:22	timCF	visualize it, and use for some metrics
2021-10-14 15:27:23	→	bontaq has joined #haskell
2021-10-14 15:28:19	←	LiaoTao has quit (Remote host closed the connection)
2021-10-14 15:28:41	timCF	sshine: distributed-process seems overkill, they do focus a lot on distributed Erlang-like features, which is pretty hard thing to do right
2021-10-14 15:28:52	→	LiaoTao has joined #haskell
2021-10-14 15:29:17	sshine	yeah, it seems like they try to embed a large part of Erlang into Haskell, rather than use similar design patterns.
2021-10-14 15:29:29	sshine	or rather, create a large framework for replicating those design patterns.
2021-10-14 15:30:04	sshine	timCF, I suppose you could create a monitoring process that kept information about the processes it monitors, and have those types of monitoring processes contain the list/graph/tree data for visualising. does sound kinda frameworkey, though. :)
2021-10-14 15:30:31	sshine	sounds like a partial OTP implementation, hehe.
2021-10-14 15:31:07	sshine	timCF, did you see https://hackage.haskell.org/package/nqe then?
2021-10-14 15:31:26	timCF	sshine: in my opinion distributed Erlang features do have low demand and utility, and at the same time very hard to implement right. But dynamic supervision trees are actually very useful and practical, and simpler to implement)
2021-10-14 15:31:34	ℹ	jinsun__ is now known as jinsun
2021-10-14 15:31:50	timCF	sshine: I'll check it, thanks)
2021-10-14 15:32:51	sshine	timCF, it specifically has a Control.Concurrent.NQE.Supervisor module.
2021-10-14 15:32:59	sshine	timCF, and it doesn't seem very huge.
2021-10-14 15:33:15	sshine	timCF, and jprupp made it in 2020. :)
2021-10-14 15:33:25	→	jollygood2 has joined #haskell
2021-10-14 15:36:01	jollygood2	hi. is there a way to do this without as much boilerplate?
2021-10-14 15:36:23	jollygood2	https://paste.tomsmeding.com/3qKex6gT
2021-10-14 15:42:49	→	dyeplexer has joined #haskell
2021-10-14 15:43:11	timCF	jollygood2: Looks like `uncurry` might do the job
2021-10-14 15:43:30	jollygood2	:t uncurry
2021-10-14 15:43:31	lambdabot	(a -> b -> c) -> (a, b) -> c
2021-10-14 15:43:42	jollygood2	hmm, how?
2021-10-14 15:44:41	→	__monty__ has joined #haskell
2021-10-14 15:45:52	timCF	jollygood2: I thought it might be useful to uncurry function of multiple arguments somehow
2021-10-14 15:46:32	jollygood2	yeah it seems similar, but I have list as an input, not a tuple
2021-10-14 15:50:07	timCF	jollygood2: well, you can't use fold to gradually apply arguments one by one, because accumulator needs to be the same type
2021-10-14 15:50:56	[exa]	jollygood2: there's a function called chunksOf or similarly that cuts the list into parts; then you'll either need to patternmatch the [a,b,c,d,e] manually or use some var-arg magic, such as the one in Text.Printf
2021-10-14 15:51:09	timCF	jollygood2: but you can recursively apply, decomposing list with pattern matching, and expressing your apply-like functions in terms of each other
2021-10-14 15:52:19	timCF	jollygood2: for example `apply5 f (x : xs) = apply4 (f x) xs`
2021-10-14 15:53:17	[exa]	anyway, using !! is discouraged. apply5 f (a:b:c:d:e:xs) = f a b c d e` is much less troublesome
2021-10-14 15:58:17	sshine	:t ap
2021-10-14 15:58:18	lambdabot	Monad m => m (a -> b) -> m a -> m b
2021-10-14 15:59:36	sshine	jollygood2, you have some functions liftM, liftM2, liftM3, etc. that share a similar cascading effect: https://hackage.haskell.org/package/base-4.15.0.0/docs/Control-Monad.html#g:7
2021-10-14 15:59:41	jollygood2	this worked apply5 f xs = apply4 f (dropFromEnd 1 xs) (last xs)
2021-10-14 16:00:20	→	raehik has joined #haskell
2021-10-14 16:00:57	jollygood2	not sure if it is much clearer. and I could pattern match instead, like [exa] said. but then what do I do if there aren't enough elements? return error? throw exception?
2021-10-14 16:01:43	jollygood2	sshine I'm familiar with liftM, but I'm not sure how I could use that function for this
2021-10-14 16:01:55	jollygood2	those functions*
2021-10-14 16:02:18	←	timCF has quit (Quit: leaving)
2021-10-14 16:03:56	sshine	jollygood2, oh, hm. I'm beginning to see what you're trying to accomplish. you're trying to implement variadic functions, aren't you? i.e. functions with a number of arguments that vary at runtime.
2021-10-14 16:04:37	→	Neuromancer has joined #haskell
2021-10-14 16:04:38	sshine	jollygood2, this is hard to do safely without dependent types, because you may at any point not have as many arguments as you assume.
2021-10-14 16:05:42	jollygood2	no I am not implementing variadic function. I have constructors that take different number of arguments, and a list of those arguments. code that precedes construction, that tests for some behavior, should ensure that I have the right number of arguments
2021-10-14 16:06:19	jollygood2	I just wanted to avoid cluttering the logic code with Constructor (x !! 0) (x !! 1) (x !! 2) (x !! 3) (x !! 4)
2021-10-14 16:06:32	jollygood2	vs apply5 Constructor xs 
2021-10-14 16:07:07	sshine	jollygood2, did you read https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/ ? -- you want to end up in a state where, if you've asserted that you have the right amount of values, then the types prevent any other scenario.
2021-10-14 16:07:15	sshine	!! does not prevent any other scenario :)
2021-10-14 16:07:17	jollygood2	and, out of curiosity, I was wondering if there was a nicer way to implement apply* functions
2021-10-14 16:07:56	sshine	jollygood2, seems like an x-y problem. maybe if you showed what problem you're trying to solve with apply2, apply3, apply4, that problem can be remodelled to not need unsafe variadic functions.
2021-10-14 16:09:14	jollygood2	here's a short example that will, hopefully, make it clear what I'm doing. https://paste.tomsmeding.com/KzM7LiOJ
2021-10-14 16:10:53	jollygood2	includes HandValue definition: https://paste.tomsmeding.com/QSYLVhro
2021-10-14 16:13:02	jollygood2	[Card] includes both player's hole cards, and table cards. it would be ideal to use types to ensure invalid state can't happen, but I have no clue how I'd do that
2021-10-14 16:13:12	→	acidjnk_new has joined #haskell
2021-10-14 16:17:31	→	dschrempf has joined #haskell
2021-10-14 16:19:34	←	merijn has quit (Ping timeout: 265 seconds)
2021-10-14 16:19:36	sshine	jollygood2, sounds like [exa]'s suggestion of pattern matching is right. to answer your question, "what do I do if tehere aren't enough elements?" -- you want to catch that early on, not drag potentially-too-short lists around after a point where you've validated their length.
2021-10-14 16:20:10	jollygood2	that is what I was thinking as well, catch that during parsing, and then assume I have enough elements, to simplify logic code
2021-10-14 16:20:28	jollygood2	does apply* seem appropriate in here?
2021-10-14 16:21:23	→	merijn has joined #haskell
2021-10-14 16:21:45	sshine	jollygood2, could you post the HandValue type?
2021-10-14 16:22:14	jollygood2	 it is on the second link. https://paste.tomsmeding.com/QSYLVhro
2021-10-14 16:22:21	sshine	thanks
2021-10-14 16:22:21	←	o1lo01ol1o has quit (Ping timeout: 245 seconds)
2021-10-14 16:23:18	sshine	jollygood2, btw, I'm fairly certain that Texas Hold'em doesn't have five kickers in the NoPair case. you have one kicker, and if they're equal, it's a draw.
2021-10-14 16:23:29	lortabac	jollygood2: there is a simpler solution
2021-10-14 16:23:48	lortabac	add a type parameter to HandValue and make it a functor
2021-10-14 16:24:04	lortabac	then you'll get all those apply functions for free with DeriveFunctor
2021-10-14 16:24:05	sshine	haha
2021-10-14 16:24:05	jollygood2	sshine, other 3 to 4 kickers come from the table
2021-10-14 16:24:13	sshine	"There is a simpler solution. Use higher-kinded data!" ;)
2021-10-14 16:24:40	jollygood2	3 to 5, even. if you have 2 and 3, all the kickers could come from the table
2021-10-14 16:24:45	sshine	jollygood2, so... the table cards are in your hand?
2021-10-14 16:25:17	jollygood2	[Card] in handValue contains both table and hand cards
2021-10-14 16:25:28	jollygood2	lortabac, can you elaborate, I'm not sure I understand
2021-10-14 16:26:09	sshine	jollygood2, my argument (whether it's valid or not) also applies for extending the hand to the table. so if you have two players who have sucky cards on their hands, and they tie for the highest single card on the table, no amount of sucky cards on their hand will make one hand better.
2021-10-14 16:26:15	lortabac	jollygood2: data HandValue a = NoPair a a a a a | OnePair Rank a a a ...
2021-10-14 16:26:26	lortabac	deriving (Functor)
2021-10-14 16:26:40	←	merijn has quit (Ping timeout: 252 seconds)
2021-10-14 16:27:15	lortabac	but to be honest I haven't followed the whole discussion, so it might not apply to your specific case
2021-10-14 16:27:17	jollygood2	sshine, handValue returns the best possible hand, given your hole cards and table cards. if there's no pair, then there are 5 kickers
2021-10-14 16:27:21	→	merijn has joined #haskell
2021-10-14 16:27:40	jollygood2	highest 5 cards including table and your own cards
2021-10-14 16:27:55	jollygood2	lortabac, I have no clue either, but it seems interesting
2021-10-14 16:28:08	jollygood2	lortabac, not sure if this link helps: https://paste.tomsmeding.com/QSYLVhro
2021-10-14 16:28:40	lortabac	this solution will give you the possibility of mapping over all the Kickers in a HandValue
2021-10-14 16:29:08	lortabac	however if you don't have a HandValue in the first place, that's another problem
2021-10-14 16:32:37	←	merijn has quit (Ping timeout: 265 seconds)
2021-10-14 16:33:18	→	merijn has joined #haskell
2021-10-14 16:33:22	jollygood2	I don't, I'm mapping [Card] to HandValue
2021-10-14 16:34:48	sshine	>_< I actually have a library for playing cards, but decided not to publish it because one Wikipedia rabbit hole led me to realise that what I believe are "playing cards" are really just "French-suited 52-card playing cards", where there's at least 5 other European types available, haha.
2021-10-14 16:38:27	jollygood2	I am basically trying to rewrite this in pure haskell, for fun. https://hackage.haskell.org/package/poker-eval-0.3.1/docs/Data-Poker.html
2021-10-14 16:38:52	→	Inst has joined #haskell
2021-10-14 16:40:05	maralorn	<sshine> ">_< I actually have a library..." <- It's really interesting how for poker or also all popular German card games French cards are the norm. There is even something called "German cards" here but no one knows it.
2021-10-14 16:40:29	→	chexum_ has joined #haskell
2021-10-14 16:40:38	maralorn	(they are pretty similar though.)
2021-10-14 16:40:45	←	chexum has quit (Remote host closed the connection)
2021-10-14 16:40:58	←	Neuromancer has quit (Ping timeout: 252 seconds)
2021-10-14 16:41:32	←	geekosaur has quit (Remote host closed the connection)
2021-10-14 16:41:37	→	AlexNoo_ has joined #haskell
2021-10-14 16:41:47	sshine	maralorn, I was interested in the Swiss ones because a friend who lives in Switzerland had a really odd looking deck in his home, and his Swiss guests would say that they know games that are only played with those.
2021-10-14 16:42:38	sshine	yeah, they're not really breaking the format. but the picture cards are named differently, and there's a different total amount of each card. some don't have 4 of each kind, but a different amount of different kinds.
2021-10-14 16:43:46	←	Alex_test has quit (Ping timeout: 252 seconds)
2021-10-14 16:44:45	→	geekosaur has joined #haskell
2021-10-14 16:44:52	←	AlexZenon has quit (Ping timeout: 252 seconds)
2021-10-14 16:45:05	←	AlexNoo has quit (Ping timeout: 245 seconds)
2021-10-14 16:45:29	sshine	jollygood2, I can see that you've derived the data type from this library. so, one of the things that I don't like about it is "The following must be true for a HandValue to be valid: All kickers must be in decending order. No Rank may not occur twice. The kickers may not construct higher-value hands." -- those constraints are not actually hard to construct using standard data types. so making a too 
2021-10-14 16:45:35	sshine	lenient representation is perhaps only useful for being backwards-compatible with this poker library.
2021-10-14 16:46:39	jollygood2	sshine, how would I construct those constraints in types?
2021-10-14 16:46:57	sshine	jollygood2, e.g. "All kickers must be in descending order": NoPair (Set Kicker)
2021-10-14 16:48:16	jollygood2	ah I see.
2021-10-14 16:48:43	jollygood2	could still form an invalid hand though, but in a different way. you may have less than 5 kickers
2021-10-14 16:49:24	jollygood2	but it still nicer, kickers are sorted, and there it can't contain a pair or greater
2021-10-14 16:49:42	→	Alex_test has joined #haskell
2021-10-14 16:51:01	→	AlexZenon has joined #haskell
2021-10-14 16:53:14	←	mestre has quit (Quit: Lost terminal)
2021-10-14 16:53:23	jollygood2	as far as, say, king of hearts appearing twice, I think that is best handled when filtering input. as far as I can tell there's no way to implement that in types in haskell
2021-10-14 16:53:52	jollygood2	out of curiosity, would this be possible in a language like idris?
2021-10-14 16:54:04	sshine	jollygood2, well, it depends on the kind of poker you're modelling. you could expose one variant in a module with constructors that fail (Either PokerError) when you can't gather five kickers. but the logic for comparing two hands using any amount of kickers is still the same. (and yes, you might end up comparing two Set Kicker with a different amount of elements, and probably your variation of poker in 
2021-10-14 16:54:10	sshine	that module doesn't allow different-sized hands, and that'd probably be a corner case you'd rather validate your way out of.)
2021-10-14 16:54:29	hpc	jollygood2: yes
2021-10-14 16:54:36	sshine	yeah. or Haskell with some effort.
2021-10-14 16:54:42	hpc	imagine say, your hand is a list
2021-10-14 16:55:20	hpc	(x :: card) : (xs :: cards1) :: cards2
2021-10-14 16:55:30	hpc	where cards1 can't contain x
2021-10-14 16:55:37	hpc	and cards2 = cards1 plus x
2021-10-14 16:56:18	hpc	well, more like a set than a list
2021-10-14 16:56:52	jollygood2	that looks a bit like peano numbers?
2021-10-14 16:58:12	sshine	more like type-level sets
2021-10-14 16:58:27	sshine	I guess
2021-10-14 16:59:31	hpc	there's probably better ways too, that is a particularly naive solution
2021-10-14 17:00:02	jollygood2	as a practical solution, is what I'm doing ok? just [Card], and apply*
2021-10-14 17:00:16	jollygood2	and ensure input is correct when parsing it
2021-10-14 17:02:28	lortabac	sshine: regarding your library, I have a suggestion: just do the Neapolitan cards, they are the only real playing cards :P
2021-10-14 17:08:28	→	machinedgod has joined #haskell
2021-10-14 17:11:04	→	lavaman has joined #haskell
2021-10-14 17:13:19	→	timCF has joined #haskell
2021-10-14 17:15:10	←	max22- has quit (Ping timeout: 260 seconds)
2021-10-14 17:15:24	→	tfeb has joined #haskell
2021-10-14 17:15:57	timCF	Hello! Does anybody know, do I need still use `Async.link` function when I'm using high-level `Async.withAsync` bracket? Basically I want bidirectional link, where if parent process terminate, child will do as well. As well as the other way around.
2021-10-14 17:16:02	←	lavaman has quit (Ping timeout: 264 seconds)
2021-10-14 17:16:02	→	jgeerds has joined #haskell
2021-10-14 17:17:57	sshine	lortabac, honestly, the point where I gave up was when I realised that even for one country's style of playing cards, you also have a history of variations. I guess I took the 'library' part too seriously. :P
2021-10-14 17:19:15	←	rembo10 has quit (Ping timeout: 260 seconds)
2021-10-14 17:20:22	lortabac	sshine: if you make it too generic it can become less useful
2021-10-14 17:21:14	lortabac	if I had to implement such a library, I'd just focus on one type of cards
2021-10-14 17:25:21	→	Lycurgus has joined #haskell
2021-10-14 17:27:59	jollygood2	what's a better name for this? safeSucc x = if x == maxBound then minBound else succ x
2021-10-14 17:29:16	←	tfeb has quit (Quit: died)
2021-10-14 17:29:57	geekosaur	wrapSucc
2021-10-14 17:30:07	dminuoso	rotate
2021-10-14 17:30:17	Lycurgus	intGLB
2021-10-14 17:30:39	geekosaur	I thought about rotate but the next step is to do the same with prev
2021-10-14 17:30:50	jollygood2	yes I also have safePred
2021-10-14 17:31:13	jollygood2	I like wrapSucc|Pred
2021-10-14 17:33:19	→	rembo10 has joined #haskell
2021-10-14 17:35:03	merijn	That's still not safe, though :p
2021-10-14 17:35:26	merijn	Hot take: Enum as-is is a terrible class that should be excised from all code
2021-10-14 17:36:14	merijn	Let's make that the next major compat break in base >.>
2021-10-14 17:36:47	hpc	no way
2021-10-14 17:37:01	hpc	not until we get data Bool = TRUE | FALSE | FILE_NOT_FOUND in
2021-10-14 17:37:08	merijn	hpc: We already have that
2021-10-14 17:37:13	merijn	Just install acme-php
2021-10-14 17:37:18	←	rembo10 has quit (Client Quit)
2021-10-14 17:38:09	→	rembo10 has joined #haskell
2021-10-14 17:38:21	merijn	hpc: This also seems to imply you think Enum is good, which I'm sorry to inform you is a clear sign of mental degradation :p
2021-10-14 17:39:35	hpc	oh don't worry, i have much clearer signs :D
2021-10-14 17:41:06	merijn	In fact, we should find out whos responsible for 10.2 of the Haskell 98 Report and retroactively withdraw their committee membership >.>
2021-10-14 17:41:35	←	coot has quit (Quit: coot)
2021-10-14 17:43:50	←	kjak_ has quit (Ping timeout: 252 seconds)
2021-10-14 17:43:52	→	rond_ has joined #haskell
2021-10-14 17:44:57	←	stiell has quit (Remote host closed the connection)
2021-10-14 17:45:26	→	stiell has joined #haskell
2021-10-14 17:53:05	→	slowButPresent has joined #haskell
2021-10-14 17:57:38	←	dschrempf has quit (Quit: WeeChat 3.3)
2021-10-14 17:57:38	jollygood2	can I pattern match in MultiWayIf? something like if | (Just x = someFunc y) -> ..
2021-10-14 17:58:48	merijn	jollygood2: I mean, that's just case-of with a bunch of extra steps?
2021-10-14 18:00:03	jollygood2	yes, but that is one of dozen if clauses, so it would be convenient if the branch executed only if someFunc returns Just. I want functionality of if | (isJust  $ someFunc y) -> fromJust  $ someFunc y
2021-10-14 18:00:04	←	Lycurgus has quit (Quit: Exeunt)
2021-10-14 18:01:22	←	__monty__ has quit (Quit: leaving)
2021-10-14 18:02:06	merijn	tbh, I find the use-case for a dozen if clauses questionable...I don't think you can pattern match in MultiWayIf, though?
2021-10-14 18:02:28	jollygood2	I am doing this: https://paste.tomsmeding.com/QSYLVhro
2021-10-14 18:02:56	jollygood2	in the updated code, isStraight returns Maybe Rank instead of Bool
2021-10-14 18:02:56	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-10-14 18:03:27	→	MQ-17J has joined #haskell
2021-10-14 18:04:32	jollygood2	more context: https://paste.tomsmeding.com/teQxsvjX
2021-10-14 18:04:35	jollygood2	if needed
2021-10-14 18:06:29	jollygood2	if I am doing something else that is stupid feel free too comment :). I'm not sure I like [Card], or apply* functions
2021-10-14 18:06:35	merijn	jollygood2: btw, instead of reverse after sort, use Down
2021-10-14 18:06:42	merijn	> sortOn Down [1..5]
2021-10-14 18:06:44	lambdabot	 [5,4,3,2,1]
2021-10-14 18:06:47	jollygood2	ah ok
2021-10-14 18:06:58	merijn	So you can just do "sortOn (Down . snd)"
2021-10-14 18:07:03	→	motherfsck has joined #haskell
2021-10-14 18:07:09	merijn	:t Down
2021-10-14 18:07:10	lambdabot	a -> Down a
2021-10-14 18:07:20	merijn	It's just a newtype with reversed comparisons
2021-10-14 18:07:33	jollygood2	that's neat
2021-10-14 18:09:17	merijn	btw, apply5 would be better of doing, like "apply5 f (a:b:c:d:e:_) = f a b c d e", the !! ends up rewalking the list each time
2021-10-14 18:09:59	jollygood2	yes. and what would I do if the list length doesn't match? return Maybe, error?
2021-10-14 18:10:03	←	rembo10 has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-10-14 18:10:13	merijn	I mean, right now it already errors anyway :p
2021-10-14 18:10:17	jollygood2	yeah :)
2021-10-14 18:10:55	→	rembo10 has joined #haskell
2021-10-14 18:11:59	jollygood2	apply5 :: String -> (a -> a -> a -> a -> a -> b) -> [a] -> b, where String is error message, so if what shouldn't happen happens, I know what to check
2021-10-14 18:12:12	merijn	Personally I'd probably refactor to something like: https://paste.tomsmeding.com/ychadwJh
2021-10-14 18:12:50	merijn	That has the same result as the multiwayif, but no extension and you can pattern match however you like
2021-10-14 18:13:20	jollygood2	I think I would have deeply nested cases with that? because I need to shortcircuit. hand could contain both Straight and OnePair, for example
2021-10-14 18:13:26	merijn	You could also define  new datatype for it
2021-10-14 18:14:00	merijn	ok, actually
2021-10-14 18:14:02	merijn	Here's an idea
2021-10-14 18:14:47	merijn	write separate function for each scoring "straightFlush :: [Card] -> Maybe HandValue", "flush :: [Card] -> Maybe HandValue", etc.
2021-10-14 18:15:13	merijn	Then you apply each of them to the hand and use catMaybes
2021-10-14 18:15:19	merijn	:t catMaybes
2021-10-14 18:15:20	lambdabot	[Maybe a] -> [a]
2021-10-14 18:15:52	merijn	So you get "[Card] -> [HandValue]"
2021-10-14 18:15:57	jollygood2	sounds good, I'll try
2021-10-14 18:16:47	jollygood2	you see anything wrong with using [Card] and just validating input before passing cards to handValue? instead of trying to encode some guarantees in the types
2021-10-14 18:18:21	merijn	tbh, I dislike having pre-conditions on inputs
2021-10-14 18:18:33	merijn	Usually easy to forget and easy to mess up
2021-10-14 18:19:16	→	coot has joined #haskell
2021-10-14 18:19:24	jollygood2	so what should I do? common invalid input I can think of: not enough cards, or too many (should be between 5 and 7). identical cards repeating more than once
2021-10-14 18:20:16	→	azimut has joined #haskell
2021-10-14 18:23:48	merijn	If you use Set instead of list you rule out identical cards :p
2021-10-14 18:25:18	→	renzhi has joined #haskell
2021-10-14 18:31:59	ℹ	idris is now known as hippoid
2021-10-14 18:35:03	→	shapr has joined #haskell
2021-10-14 18:38:21	ℹ	AlexNoo_ is now known as AlexNoo
2021-10-14 18:40:25	←	hendursa1 has quit (Ping timeout: 276 seconds)
2021-10-14 18:48:07	→	ystael has joined #haskell
2021-10-14 18:50:42	→	max22- has joined #haskell
2021-10-14 18:55:33	←	azeem has quit (Read error: Connection reset by peer)
2021-10-14 19:00:33	→	eggplantade has joined #haskell
2021-10-14 19:02:49	→	Pickchea has joined #haskell
2021-10-14 19:03:05	→	azeem has joined #haskell
2021-10-14 19:04:51	→	slack1256 has joined #haskell
2021-10-14 19:05:07	←	eggplantade has quit (Ping timeout: 252 seconds)
2021-10-14 19:06:29	←	rond_ has quit (Quit: Client closed)
2021-10-14 19:08:37	→	hendursa1 has joined #haskell
2021-10-14 19:11:05	←	nitrix has quit (Quit: Genius is one percent inspiration and ninety-nine percent perspiration)
2021-10-14 19:12:10	→	nitrix has joined #haskell
2021-10-14 19:16:37	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-10-14 19:19:19	←	Pickchea has quit (Quit: Leaving)
2021-10-14 19:21:47	→	MQ-17J has joined #haskell
2021-10-14 19:24:52	←	nvmd has quit (Ping timeout: 252 seconds)
2021-10-14 19:25:06	→	wroathe has joined #haskell
2021-10-14 19:25:07	←	wroathe has quit (Changing host)
2021-10-14 19:25:07	→	wroathe has joined #haskell
2021-10-14 19:26:30	→	nvmd has joined #haskell
2021-10-14 19:32:21	←	ishutin has quit (Ping timeout: 245 seconds)
2021-10-14 19:33:05	←	timCF has quit (Quit: leaving)
2021-10-14 19:39:24	→	ishutin has joined #haskell
2021-10-14 19:41:33	←	jollygood2 has quit (Quit: http://www.okay.uz/ (Ping timeout))
2021-10-14 19:44:30	←	acidjnk_new has quit (Ping timeout: 265 seconds)
2021-10-14 19:46:13	←	Lysanleo has quit (Read error: Connection reset by peer)
2021-10-14 19:48:38	→	hnOsmium0001 has joined #haskell
2021-10-14 19:51:58	cigsender	jollygood2: what about something like this? https://paste.tomsmeding.com/cwfN7nm5
2021-10-14 19:54:49	cigsender	restricting your inputs to only what's valid allows you to exploit pattern-matching better
2021-10-14 19:58:45	→	Sgeo has joined #haskell
2021-10-14 20:03:31	sshine	where did jollygood2 go?
2021-10-14 20:03:48	⚡	cigsender shrugs
2021-10-14 20:04:53	sshine	/dcc get cigsender cig
2021-10-14 20:05:42	Hecate	cc cigsender :)
2021-10-14 20:05:47	sshine	I was going to suggest using a non-empty set since if you have at least one card, then no matter how you model your hand, you can always claim a high card.
2021-10-14 20:06:05	cigsender	is there a non-empty set in base?
2021-10-14 20:06:15	sshine	no, but there is one in nonempty-containers
2021-10-14 20:06:25	cigsender	hey Hecate <3
2021-10-14 20:06:26	sshine	and it's made by jle, so I'd think it's good.
2021-10-14 20:06:58	cigsender	ugh wow never knew i needed this
2021-10-14 20:07:07	sshine	I also never knew
2021-10-14 20:07:14	sshine	so I ended up rabbit-holing until they left, haha.
2021-10-14 20:09:00	→	jollygood2 has joined #haskell
2021-10-14 20:09:33	⚡	cigsender wonders about pattern-matching on containers other than Seq
2021-10-14 20:09:40	jollygood2	cigsender, got disconnected, let me check.
2021-10-14 20:10:05	sshine	jollygood2, welcome back.
2021-10-14 20:10:20	jollygood2	thanks!
2021-10-14 20:10:54	jollygood2	cigsender, I like that,  data Table = Flop Card Card Card  | Turn Card Card Card Card  | River Card Card Card Card Card
2021-10-14 20:11:08	sshine	jollygood2, I was going to suggest that if you have a non-empty set of cards to represent your hand, then your Hand -> HandValue function can easily be total, since you can default to the high card (kicker).
2021-10-14 20:11:08	cigsender	could be nice to have patterns for matching the minimum or maximum of a Map or a Set
2021-10-14 20:12:09	sshine	cigsender, you have viewpatterns.
2021-10-14 20:12:52	cigsender	jollygood2: yes! if you only have certain states the Table can be in, you can exhaustively match all the valid states
2021-10-14 20:12:58	geekosaur	also sounds like something that might be doable with a pattern synonym
2021-10-14 20:13:54	cigsender	sshine: view patterns are nice but i was thinking closer to pattern synonyms, where you could (?) also match on an empty Map without an Eq constraint
2021-10-14 20:14:53	cigsender	not that you'd ever really be in that situation :)
2021-10-14 20:15:09	sshine	cigsender, I kinda like that patterns are kinda dumb and that functions are kinda smart. :P
2021-10-14 20:15:20	←	azeem has quit (Ping timeout: 268 seconds)
2021-10-14 20:15:54	sshine	cigsender, if patterns suddenly start computing things, I find it hard to reason about performance. (I think there was a similar debate about Erlang guards.)
2021-10-14 20:16:46	cigsender	sshine, that's a fair point, it's hard to reason about computational complexity when the computations are hidden :p
2021-10-14 20:17:00	cigsender	sshine, but then, how do you feel about YearMonthDay?
2021-10-14 20:17:04	geekosaur	that said min and max are cheap to compute
2021-10-14 20:17:21	sshine	cigsender, what's YearMonthDay?
2021-10-14 20:17:27	geekosaur	using one to search out something else in Set/Map is where you'd run into complexity
2021-10-14 20:18:11	←	wroathe has quit (Ping timeout: 245 seconds)
2021-10-14 20:18:14	cigsender	it's a pattern synonym for the Day type in time that precalculates gregorian for you instead of the julian day https://hackage.haskell.org/package/time-1.12/docs/Data-Time-Calendar.html#v:YearMonthDay
2021-10-14 20:18:14	→	azeem has joined #haskell
2021-10-14 20:20:03	←	VoidNoir0 has quit (Quit: Connection closed)
2021-10-14 20:20:27	sshine	cigsender, ah, thanks, didn't know.
2021-10-14 20:20:57	sshine	cigsender, well, generally I'm not in favor. :) but it seems like a pretty good use-case for this kind of syntax.
2021-10-14 20:22:19	sshine	cigsender, if there's a somewhat constant, small computational overhead, I could totally accept it. not veto'ing. just saying it's a slippery slope. :P
2021-10-14 20:22:54	←	hippoid has quit (Quit: leaving)
2021-10-14 20:23:06	cigsender	just wanted to feel out your position a little more, sshine :)
2021-10-14 20:23:48	→	ubert1 has joined #haskell
2021-10-14 20:24:19	merijn	sshine: I have a nice bunch of abuse for pattern synonyms :p
2021-10-14 20:25:09	merijn	sshine: Mapping 3 (4?) different "constructors" to one single universal one that has a bunch of preconditions. So my code operating on it has a simple single representation to work on, while having convenient constructors
2021-10-14 20:26:49	sshine	merijn, as a library API designer, it sounds like a great tool, honestly.
2021-10-14 20:27:01	←	hyiltiz has quit (Ping timeout: 252 seconds)
2021-10-14 20:27:06	jollygood2	ok I did data Table = Flop Card Card Card, but I'm not sure how to use the same code to evaluate the hand on the flop, turn and river, without pattern matching each case? if I convert Table to [Card], then I'm kind of back where I started?
2021-10-14 20:27:16	sshine	I've used pattern synonyms myself, but only ones that map very straight onto the internal representation.
2021-10-14 20:27:30	→	hyiltiz has joined #haskell
2021-10-14 20:27:33	→	[itchyjunk] has joined #haskell
2021-10-14 20:27:49	→	hippoid has joined #haskell
2021-10-14 20:27:59	hippoid	:t pure
2021-10-14 20:28:00	lambdabot	Applicative f => a -> f a
2021-10-14 20:28:20	hippoid	:t pure 10
2021-10-14 20:28:21	lambdabot	(Applicative f, Num a) => f a
2021-10-14 20:28:48	cigsender	jollygood2: you can convert Table to [Card] if you want, because you'll be sure inside handValue that you'll have at least 3
2021-10-14 20:28:53	jollygood2	I guess the advantage is that if I  get [Card] from Table, I am guaranteed to have 3, 4 or 5 cards, even if the [Card] doesn't show that
2021-10-14 20:28:58	jollygood2	cigsender, yes
2021-10-14 20:29:16	hippoid	`pure 10` confuses me.  What is the (Applicative f) for an Int?
2021-10-14 20:29:34	merijn	hippoid: What do you mean "for an Int"
2021-10-14 20:29:49	cigsender	:k Applicative
2021-10-14 20:29:50	lambdabot	(* -> *) -> Constraint
2021-10-14 20:29:51	merijn	hippoid: pure 10 *takes* an Int (simplifying the type of 10 for now)
2021-10-14 20:30:01	merijn	hippoid: It returns "whatever Applicative you want"
2021-10-14 20:30:06	merijn	> pure 10 :: Maybe Int
2021-10-14 20:30:08	lambdabot	 Just 10
2021-10-14 20:30:09	hippoid	I thought I'd have to provide some kind of 'container' type as the first arg of pure
2021-10-14 20:30:18	jollygood2	Int is not Applicative, it is the value within Applicative
2021-10-14 20:30:20	→	wroathe has joined #haskell
2021-10-14 20:30:20	←	wroathe has quit (Changing host)
2021-10-14 20:30:20	→	wroathe has joined #haskell
2021-10-14 20:30:24	merijn	hippoid: *which* Applicative is inferred from the result
2021-10-14 20:30:34	cigsender	> pure @Maybe 10
2021-10-14 20:30:35	lambdabot	 error:
2021-10-14 20:30:36	lambdabot	     Pattern syntax in expression context: pure@Maybe
2021-10-14 20:30:36	lambdabot	     Did you mean to enable TypeApplications?
2021-10-14 20:30:38	xsperry	> pure 10 :: [Int]
2021-10-14 20:30:40	lambdabot	 [10]
2021-10-14 20:30:51	xsperry	> pure 10 :: IO Int
2021-10-14 20:30:53	lambdabot	 <IO Int>
2021-10-14 20:30:58	hippoid	:t pure 10
2021-10-14 20:30:59	lambdabot	(Applicative f, Num a) => f a
2021-10-14 20:31:06	hippoid	what is f in that situation?
2021-10-14 20:31:13	merijn	hippoid: "any Applicative"
2021-10-14 20:31:21	merijn	hippoid: Which one, will be inferred when you try to use it
2021-10-14 20:31:42	merijn	> fromMaybe 0 (pure 10)
2021-10-14 20:31:44	lambdabot	 10
2021-10-14 20:32:02	jollygood2	> head $ pure 10
2021-10-14 20:32:04	lambdabot	 10
2021-10-14 20:32:11	merijn	hippoid: fromMaybe wants a "Maybe a", so GHC infers "pure 10" has type "Maybe Int" and chooses Maybe
2021-10-14 20:32:27	hippoid	wow, that's mindblowing
2021-10-14 20:33:15	hippoid	:t pure 10 :: Either Int
2021-10-14 20:33:17	lambdabot	error:
2021-10-14 20:33:17	lambdabot	    • Expecting one more argument to ‘Either Int’
2021-10-14 20:33:17	lambdabot	      Expected a type, but ‘Either Int’ has kind ‘* -> *’
2021-10-14 20:33:23	jollygood2	Either takes two types
2021-10-14 20:33:25	merijn	> pure 10 :: Either Bool Int
2021-10-14 20:33:26	lambdabot	 Right 10
2021-10-14 20:33:42	cigsender	however:
2021-10-14 20:33:47	hippoid	ah ok, my mistake was thinking the second type would be inferred when I try to use it
2021-10-14 20:33:49	merijn	hippoid: Inference goes in both directions (unlike something like "auto" in C++/Java)
2021-10-14 20:33:52	cigsender	> pure 10 :: Either Int Bool
2021-10-14 20:33:54	lambdabot	 error:
2021-10-14 20:33:54	lambdabot	     • No instance for (Num Bool) arising from the literal ‘10’
2021-10-14 20:33:54	lambdabot	     • In the first argument of ‘pure’, namely ‘10’
2021-10-14 20:34:16	jollygood2	hippoid it would be if you didn't specify it. but if you want to write explicit type, it has to be complete
2021-10-14 20:34:30	merijn	hippoid: If you (somehow) use something like that in a way where ghc *can't* infer the correct result, you will get an "ambiguous type" error
2021-10-14 20:34:45	merijn	> const 'a' (pure True) -- not sure this will give the error I want
2021-10-14 20:34:46	lambdabot	 error:
2021-10-14 20:34:47	lambdabot	     • Ambiguous type variable ‘f0’ arising from a use of ‘pure’
2021-10-14 20:34:47	←	wroathe has quit (Ping timeout: 252 seconds)
2021-10-14 20:34:47	lambdabot	       prevents the constraint ‘(Applicative f0)’ from being solved.
2021-10-14 20:34:58	hippoid	merijn: can you say more about "both directions" and type inference?  To start, what are the two endpoints of the two directions?
2021-10-14 20:35:15	merijn	hippoid: Success! As you can see "hey, this is *some* Applicative, but not enough context to infer *which*, thus it's ambiguous"
2021-10-14 20:35:55	merijn	hippoid: One end is "individual syntactical tokens" which usually have types, like 'a' being Char and the top level signature
2021-10-14 20:36:33	merijn	hippoid: If you have "foo :: Bar -> Baz -> Quux; foo = ..." then we have 2 types, the ones specified as foo's type signature and "the type of the actual body of foo"
2021-10-14 20:36:52	hippoid	is it correct to say one end is terms, and the other end is types?
2021-10-14 20:36:57	merijn	If we write "foo = 'a'" then the 2nd would be Char, for example
2021-10-14 20:37:46	merijn	hippoid: More like one end is the types we *claim* something is, the other end is "the types we know the actual terms have"
2021-10-14 20:38:11	xsperry	perhaps it might be easier to understand polymorphic values outside of Applicative context. for example minBound
2021-10-14 20:38:16	xsperry	:t minBound
2021-10-14 20:38:17	lambdabot	Bounded a => a
2021-10-14 20:38:22	xsperry	> minBound :: Int
2021-10-14 20:38:24	lambdabot	 -9223372036854775808
2021-10-14 20:38:27	xsperry	> minBound :: Char
2021-10-14 20:38:29	lambdabot	 '\NUL'
2021-10-14 20:38:44	xsperry	> [minBound ..] :: [Char]
2021-10-14 20:38:45	lambdabot	 "\NUL\SOH\STX\ETX\EOT\ENQ\ACK\a\b\t\n\v\f\r\SO\SI\DLE\DC1\DC2\DC3\DC4\NAK\SY...
2021-10-14 20:38:54	merijn	hippoid: You can think of it as solving a bunch of equations. In the "fromMaybe 0 (pure 10)' case, then we have two pieces of information: 1) 'pure 10 :: Applicative f => f Int' and 2) 'pure 10 :: Maybe Int' (from the type of fromMaybe)
2021-10-14 20:39:00	maerwald	> minBound
2021-10-14 20:39:02	lambdabot	 ()
2021-10-14 20:39:20	maerwald	> [minBound ..]
2021-10-14 20:39:21	lambdabot	 [()]
2021-10-14 20:39:28	xsperry	maerwald, I doubt that helps :P
2021-10-14 20:39:41	merijn	hippoid: Now typechecking is a matter of "is there a solution where these types line up?" answer "yes *iff* 'f' = 'Maybe'"
2021-10-14 20:39:43	maerwald	> maxBound
2021-10-14 20:39:45	lambdabot	 ()
2021-10-14 20:39:46	maerwald	:D
2021-10-14 20:40:16	hippoid	Are all these what is known as type unification?
2021-10-14 20:40:25	hippoid	*ideas
2021-10-14 20:40:42	merijn	hippoid: Type unification is part of the mechanical process of type checking/inference, yes
2021-10-14 20:41:35	hippoid	ahh ok, and you all are showing me examples of how to apply the logic of type checking/inference
2021-10-14 20:41:49	merijn	hippoid: Basically you assign every (sub)expression a new "unification" variable and then try to solve "is there a single mapping of 1 type to each unification variable that matches all restrictions"
2021-10-14 20:42:51	merijn	hippoid: In my example you have to try to unify "Maybe a" and "Applicative f => f Int" which works IFF 'a' = Int and 'f' = Maybe
2021-10-14 20:43:18	→	doyougnu has joined #haskell
2021-10-14 20:43:23	hippoid	and that's what you mean by "both sides", there's an = in the middle, and then you can infer things from either side of that equal sign
2021-10-14 20:43:29	merijn	Right
2021-10-14 20:44:23	hippoid	ok, this has been very illuminating.  Thanks merijn, xsperry, maerwald et al!
2021-10-14 20:44:29	lortabac	in practice unification alone is not sufficient to check a user-provided signature against the corresponding inferred type
2021-10-14 20:44:52	lortabac	you also need to check that the signature is more generic (or equal) than the inferred type
2021-10-14 20:44:58	lortabac	but I'm just nitpicking
2021-10-14 20:45:30	hippoid	right, because there can be many solutions, so you want the most generic one?
2021-10-14 20:46:30	lortabac	sorry I meant the inferred type is more generic than the signature
2021-10-14 20:46:37	carbolymer	if `MonadReader r m | m -> r`, why does this compile: https://bpa.st/YTRQ  ? Is ghc assuming that there may be two different `MonadReader r m` for `m` at the same time?
2021-10-14 20:47:07	merijn	carbolymer: 'm' uniquely determines 'r'
2021-10-14 20:47:11	merijn	carbolymer: Not the other way around
2021-10-14 20:47:32	merijn	carbolymer: Now, obviously the same 'm' can't map to different 'r' and *you* know that
2021-10-14 20:47:58	merijn	carbolymer: But GHC won't discover that until you try and specify a *specific* 'm'
2021-10-14 20:47:58	carbolymer	merijn: I know that, but doesn't ghc too?
2021-10-14 20:48:00	lortabac	hippoid: so that this is valid (id :: Int -> Int; id x = x) but this is not (id :: a -> a; id x = x + 1)
2021-10-14 20:48:04	merijn	carbolymer: How?
2021-10-14 20:48:13	merijn	carbolymer: 'm' is unknown, so GHC knows nothing about it
2021-10-14 20:48:23	carbolymer	merijn: idk, just because functional dependency in MonadReader exists?
2021-10-14 20:48:29	merijn	GHC knows that *a specific* 'm' maps to a single unique 'r'
2021-10-14 20:49:04	hippoid	lortabac: because you can't use + on any type a
2021-10-14 20:49:52	lortabac	hippoid: exactly, a -> a means the function should be valid whatever 'a' is
2021-10-14 20:50:52	hippoid	lortabac: that's where that forall... stuff shows up. What is that called, that forall a.b... whatever notation?
2021-10-14 20:51:59	→	zebrag has joined #haskell
2021-10-14 20:52:32	←	geekosaur has quit (Remote host closed the connection)
2021-10-14 20:52:48	←	slack1256 has quit (Remote host closed the connection)
2021-10-14 20:52:50	lortabac	I don't know, I call it forall :)
2021-10-14 20:53:49	lortabac	I have to go, sorry
2021-10-14 20:54:02	hippoid	thanks for your help
2021-10-14 20:54:05	hippoid	lortabac++
2021-10-14 20:54:11	→	geekosaur has joined #haskell
2021-10-14 20:54:17	←	lortabac has quit (Quit: WeeChat 2.8)
2021-10-14 20:54:37	←	hendursa1 has quit (Quit: hendursa1)
2021-10-14 20:55:17	→	hendursaga has joined #haskell
2021-10-14 20:55:58	→	eggplantade has joined #haskell
2021-10-14 20:58:05	c_wraith	kuribas: I just remembered it's absolutely trivial to rewrite that code without the call to error. [] type-checks there, and by construction that case cannot happen, so anything is fine. The problem is that's actually less reader-friendly to make it look like a normal case when it's actually a logical contradiction.
2021-10-14 20:59:41	kuribas	c_wraith: add a comment?
2021-10-14 20:59:58	c_wraith	comments only mean something if they're read
2021-10-14 21:00:43	merijn	hippoid: RankNTypes (or one of the others)
2021-10-14 21:01:16	merijn	hippoid: Note that (in the underlying theory/language used within GHC) all types have an *implicit* forall for every type variable
2021-10-14 21:01:34	merijn	hippoid: So GHC internally considers "id :: a -> a" as if it is "id :: forall a . a -> a"
2021-10-14 21:02:39	carbolymer	merijn: hmm, I need to meditate on that
2021-10-14 21:03:29	dminuoso	c_wraith: I think the real problem is that "logical contradiction" part. The reason we have bugs in the first place, is because we assume invariants to hold. Sometimes, yes, they are provably correct. Otherwise they are not, or they become bugged on some future refactoring.
2021-10-14 21:03:44	dminuoso	If we were always right about our assumptions, we wouldn't have bugs in the first place.
2021-10-14 21:03:55	c_wraith	that's exactly why the error message says you refactored it wrong.
2021-10-14 21:04:06	→	justsomeguy has joined #haskell
2021-10-14 21:04:17	→	slack1256 has joined #haskell
2021-10-14 21:04:18	c_wraith	If you end up in that case, you refactored it wrong, even if it was total
2021-10-14 21:04:37	c_wraith	I think it's better to be told you got it wrong, instead of silently working incorrectly
2021-10-14 21:05:03	dminuoso	c_wraith: Not if it spontaneously takes down a critical application. 
2021-10-14 21:05:16	dminuoso	Think the previous discussion was really about how `error` can really blow up entire programs.
2021-10-14 21:06:37	dminuoso	And these error dont always show during development
2021-10-14 21:06:39	kuribas	dminuoso: unsafePerformIO to show a warning instead?
2021-10-14 21:07:08	dminuoso	kuribas: Heh, imprecise exceptions means you cant even properly catch that exceptoin.
2021-10-14 21:07:22	dminuoso	And inside pure code, this is an even tricker business
2021-10-14 21:08:13	dminuoso	You're giving up a lot of nice properties about your pure code, which is why we didnt have IO in the first place...
2021-10-14 21:08:21	→	werneta has joined #haskell
2021-10-14 21:08:54	→	rond_ has joined #haskell
2021-10-14 21:12:29	c_wraith	I really actually mean "logical contradiction". Not just "that shouldn't happen". If you end up in that case, you have a thunk that needs to branch on the result of evaluating itself. The program will <<loop>> before it can throw that error.
2021-10-14 21:12:50	→	ec has joined #haskell
2021-10-14 21:12:54	c_wraith	So you're crashing anyway
2021-10-14 21:13:00	c_wraith	the call to error is just documentation
2021-10-14 21:13:10	merijn	carbolymer: Basically, functional dependencies are nice an easy, 'cause you only have to "reason in one direction"
2021-10-14 21:13:23	merijn	carbolymer: Which simplifies how complicated things are to implement
2021-10-14 21:13:56	merijn	carbolymer: You are, effectively, asking "why doesn't GHC also reason *backwards*?" to which the answer is "because that's hard and why do hard things when you don't have to"
2021-10-14 21:14:49	kuribas	dminuoso: logging some warning, and returning a default value could be a decent alternative to simply crashing with an exception.
2021-10-14 21:15:22	kuribas	dminuoso: Then in pure code you could return Either err a
2021-10-14 21:15:52	merijn	carbolymer: Which happens to be super simple in the your example (because it's a super simple case), but doing that "in general" is hard
2021-10-14 21:16:13	dminuoso	kuribas: I would not, simply because due to the way IO works, that gives me no guarantees.
2021-10-14 21:16:21	→	lavaman has joined #haskell
2021-10-14 21:16:22	dminuoso	Maybe this logs never, maybe this logs once, maybe this logs a thousand times
2021-10-14 21:16:33	←	mbuf has quit (Quit: Leaving)
2021-10-14 21:16:34	dminuoso	If you already have this inside Either err, just feed it outside to IO
2021-10-14 21:16:38	dminuoso	Or feed IO in there
2021-10-14 21:17:00	dminuoso	Ive come to appreciate unsafePerformIO as a strong code smell that you probably should move what you have into IO
2021-10-14 21:17:15	dminuoso	Too many ways Ive been bitten poorly, unsafePerformIO is really dangerous in some strange ways
2021-10-14 21:17:18	jollygood2	I asked yesterday, so if I can repeat my question again, as I need to decide which xml library to use now. file is only 200 kB and I am reading it once, so I'm wondering which of the half a dozen xml libraries are the simplest to use?
2021-10-14 21:17:19	kuribas	dminuoso: then return "Maybe a" in pure code.  if it's nothing log the warning (in IO), and return a default value.
2021-10-14 21:17:30	jollygood2	performance shouldn't matter
2021-10-14 21:17:52	dminuoso	kuribas: Whats the value of the Nothing then?
2021-10-14 21:18:02	dminuoso	You're throwing away information now, and have shitty IO semantics for logging.
2021-10-14 21:18:04	kuribas	dminuoso: use the Default typeclass.
2021-10-14 21:18:21	kuribas	dminuoso: I mean, the goal is to continue, right?
2021-10-14 21:18:21	dminuoso	kuribas: I do something similar, but I dont use unsafePerformIO
2021-10-14 21:18:26	dminuoso	kuribas: In our SDN compiler we have this
2021-10-14 21:18:57	kuribas	yeah, unsafePerformIO will likely give a miserable experience.
2021-10-14 21:19:39	←	ec has quit (Ping timeout: 276 seconds)
2021-10-14 21:20:01	dminuoso	kuribas: I have some `data CompEnv a = CompEnv { _comp_warnings :: IORef [OdinWarning], _comp_errors :: IORef [OdinError] }`
2021-10-14 21:20:27	dminuoso	And then my own `class UselessDefault a where useless :: a`
2021-10-14 21:20:58	kuribas	dminuoso: why not use Default then?
2021-10-14 21:21:02	←	merijn has quit (Ping timeout: 265 seconds)
2021-10-14 21:21:09	dminuoso	And then I have critical errors that bail out immediately and phase critical errors that allow the compiler to continue its current phase and then abort
2021-10-14 21:21:13	kuribas	dminuoso: it's just as useless :)
2021-10-14 21:21:14	dminuoso	kuribas: because Default has no semantics
2021-10-14 21:21:38	dminuoso	With UselessDefault every type I have generates special magic values that are still recognizable
2021-10-14 21:21:43	dminuoso	should I ever use it in the wrong place
2021-10-14 21:21:54	dminuoso	So now I do stuff like:
2021-10-14 21:22:17	dminuoso	useless <$ configErr "Something bad has happened"
2021-10-14 21:22:53	dminuoso	And additional combinators like `>|>` allow me conditional sequencing if no errors are present, >> will just proceed, so my compiler phases/stages use `>|>` between them
2021-10-14 21:23:15	dminuoso	That way my compiler can go as long as it can, collecting as many errors as it can
2021-10-14 21:24:08	kuribas	right
2021-10-14 21:24:51	dminuoso	IORefs are great things. :)
2021-10-14 21:29:02	→	lbseale has joined #haskell
2021-10-14 21:30:55	←	rond_ has quit (Quit: Client closed)
2021-10-14 21:33:06	→	mc47 has joined #haskell
2021-10-14 21:33:13	→	econo has joined #haskell
2021-10-14 21:34:45	←	justsomeguy has quit (Ping timeout: 260 seconds)
2021-10-14 21:36:30	→	ec has joined #haskell
2021-10-14 21:37:12	←	stiell has quit (Ping timeout: 276 seconds)
2021-10-14 21:38:35	←	jneira[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	fgaz has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	maerwald[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	siraben has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	MatrixTravelerbo has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	shiraeeshi[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	sm has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	unrooted has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	psydroid has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	ServerStatsDisco has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	quantum has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	cdsmith has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	denbrahe[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	ongy[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	peddie has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	Tisoxin has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	Arathorn has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	rednaZ[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	jophish has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	YoungChiefBTW has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	PotatoHatsue has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	wildsebastian has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	maralorn has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	kadoban has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	the-coot[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	ericson2314 has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	vaibhavsagar[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	zwro[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	carmysilna has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:36	←	Topik[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	bitonic has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	zfnmxt has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	Deide has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	Christoph[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	tsmc[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	Morrow[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	Artem[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	kar1 has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	Ollie[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	moats has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	fcortesi has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	schuelermine[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	amesgen[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	SawyerBergeron[m has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	alexfmpe[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	Drew[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	Magnus[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	ManofLetters[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	kevin[m]1 has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	santiagopim[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	smichel17[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	jmcantrell has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	hsek[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	reddishblue[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:37	←	marinelli[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:38	←	unclechu has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:38	←	aidy has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:38	←	fendor[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:38	←	srid[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:38	←	ru0mad[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:38	←	thomasjm[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:38	←	hjulle[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	mekeor[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	hughjfchen[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	razor[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	bb010g has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	bakinonion[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	Deewiant has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	dualinverter[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	oak- has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	ixlun has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	jesser[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	reza[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	jinsun_ has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	Orbstheorem has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	gdhffd[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	asdofindia-m has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	craige[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	soft has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	alex[m]1234567 has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	afotgkmnzj7asv3r has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	justosophy[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	fakehacker[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	IgnatInsarov[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	dexmad[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:39	←	monadfritz[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:40	←	wysteriary[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:40	←	cloudy has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:40	←	sam[m]12 has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:40	←	TomasJakl[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:40	←	ilkecan[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:40	←	codygman[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:40	←	stoicswe[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:40	←	xosdy[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:40	←	Tavi[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:40	←	jchia[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:40	←	RosarioPulella[m has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:40	←	ftzm[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:38:43	←	hsiktas[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-10-14 21:39:50	→	_ht has joined #haskell
2021-10-14 21:40:16	←	azeem has quit (Read error: Connection reset by peer)
2021-10-14 21:41:52	←	trillp has quit (Quit: nyaa~)
2021-10-14 21:42:07	→	azeem has joined #haskell
2021-10-14 21:42:55	→	jchia[m] has joined #haskell
2021-10-14 21:44:11	←	hippoid has quit (Quit: leaving)
2021-10-14 21:46:19	←	hendursaga has quit (Ping timeout: 276 seconds)
2021-10-14 21:46:25	←	azeem has quit (Ping timeout: 260 seconds)
2021-10-14 21:46:46	→	justsomeguy has joined #haskell
2021-10-17 15:59:30	→	oxide has joined #haskell
2021-10-17 15:59:30	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-10-17 15:59:30	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-10-17 15:59:30	ℹ	Channel #haskell: 708 nicks (1 op, 0 voices, 707 normals)
2021-10-17 15:59:31	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-10-17 16:01:16	tomsmeding	the error is not even when writing the instance body, it's the instance _declaration_ that ghc doesn't like
2021-10-17 16:01:25	tomsmeding	% instance (forall a. Monoid a => Monoid (f a)) => Monoid (Fix f) where
2021-10-17 16:01:25	yahb	tomsmeding: ; <interactive>:157:10: error:; * Could not deduce (Monoid a) arising from the superclasses of an instance declaration; from the context: forall a. Monoid a => Monoid (f a) bound by the instance declaration at <interactive>:157:10-63; or from: Semigroup a bound by a quantified context at <interactive>:1:1; Possible fix: add (Monoid a) to the context of a quantified context; * I
2021-10-17 16:02:17	hololeap	👏
2021-10-17 16:02:49	tomsmeding	and it's also not specific to Fix
2021-10-17 16:02:59	tomsmeding	% newtype NonFix f = NonFix (f Int)
2021-10-17 16:02:59	yahb	tomsmeding: 
2021-10-17 16:03:05	tomsmeding	% instance (forall a. Monoid a => Monoid (f a)) => Monoid (NonFix f) where
2021-10-17 16:03:05	yahb	tomsmeding: ; <interactive>:159:10: error:; * Could not deduce (Semigroup (NonFix f)) arising from the superclasses of an instance declaration; from the context: forall a. Monoid a => Monoid (f a) bound by the instance declaration at <interactive>:159:10-66; * In the instance declaration for `Monoid (NonFix f)'
2021-10-17 16:03:20	tomsmeding	wait error is different
2021-10-17 16:03:21	→	kaiwk has joined #haskell
2021-10-17 16:03:31	tomsmeding	oh
2021-10-17 16:04:06	hololeap	% instance (forall a. Semigroup a => Monoid (f a)) => Monoid (NonFix f) where
2021-10-17 16:04:06	yahb	hololeap: ; <interactive>:160:10: error:; * Could not deduce (Semigroup (NonFix f)) arising from the superclasses of an instance declaration; from the context: forall a. Semigroup a => Monoid (f a) bound by the instance declaration at <interactive>:160:10-69; * In the instance declaration for `Monoid (NonFix f)'
2021-10-17 16:04:06	tomsmeding	% instance (forall a. Semigroup a => Semigroup (f a)) => Semigroup (NonFix f) where
2021-10-17 16:04:06	yahb	tomsmeding: ; <interactive>:161:10: warning: [-Wmissing-methods]; * No explicit implementation for; `<>'; * In the instance declaration for `Semigroup (NonFix f)'
2021-10-17 16:04:18	tomsmeding	% instance (forall a. Monoid a => Monoid (f a)) => Monoid (NonFix f) where
2021-10-17 16:04:18	yahb	tomsmeding: ; <interactive>:162:10: error:; * Could not deduce (Monoid a) arising from the superclasses of an instance declaration; from the context: forall a. Monoid a => Monoid (f a) bound by the instance declaration at <interactive>:162:10-66; or from: Semigroup a bound by a quantified context at <interactive>:1:1; Possible fix: add (Monoid a) to the context of a quantified context; * I
2021-10-17 16:04:20	tomsmeding	there we go
2021-10-17 16:04:56	hololeap	the probelm there is that Int isn't a semigroup
2021-10-17 16:05:09	tomsmeding	who cares? ghc is complaining about the instance head
2021-10-17 16:05:45	←	kaiwk has quit (Remote host closed the connection)
2021-10-17 16:05:55	hololeap	% newtype NomFix f = NomFix (f (Sum Int))
2021-10-17 16:05:55	yahb	hololeap: 
2021-10-17 16:06:20	tomsmeding	also, Const m Int is a semigroup if m is a semigroup ;)
2021-10-17 16:06:29	tomsmeding	so no inherent contradiction in my NonFix
2021-10-17 16:06:40	tomsmeding	nomnom
2021-10-17 16:07:17	←	econo has quit (Quit: Connection closed for inactivity)
2021-10-17 16:07:18	hololeap	% instance (forall a. Semigroup a => Semigroup (f a)) => Semigroup (NomFix f) where
2021-10-17 16:07:18	yahb	hololeap: ; <interactive>:164:10: warning: [-Wmissing-methods]; * No explicit implementation for; `<>'; * In the instance declaration for `Semigroup (NomFix f)'
2021-10-17 16:07:36	→	dsrt^ has joined #haskell
2021-10-17 16:09:12	hololeap	% instance (forall a. Monoid a => Monoid (f a)) => Semigroup (NomFix f) where
2021-10-17 16:09:12	yahb	hololeap: ; <interactive>:165:10: warning: [-Wmissing-methods]; * No explicit implementation for; `<>'; * In the instance declaration for `Semigroup (NomFix f)'
2021-10-17 16:09:29	hololeap	% instance (forall a. Monoid a => Monoid (f a)) => Monoid (NomFix f) where
2021-10-17 16:09:29	yahb	hololeap: ; <interactive>:166:10: warning: [-Wmissing-methods]; * No explicit implementation for; `mempty'; * In the instance declaration for `Monoid (NomFix f)'
2021-10-17 16:09:36	tomsmeding	wat
2021-10-17 16:09:42	hololeap	lol
2021-10-17 16:09:53	hololeap	I have no idea
2021-10-17 16:10:12	tomsmeding	like, how can that even make a difference
2021-10-17 16:10:32	tomsmeding	% instance Semigroup Int where
2021-10-17 16:10:33	yahb	tomsmeding: ; <interactive>:167:10: warning: [-Wmissing-methods]; * No explicit implementation for; `<>'; * In the instance declaration for `Semigroup Int'
2021-10-17 16:10:40	tomsmeding	% instance (forall a. Monoid a => Monoid (f a)) => Monoid (NonFix f) where
2021-10-17 16:10:40	yahb	tomsmeding: ; <interactive>:168:10: error:; * Could not deduce (Monoid a) arising from the superclasses of an instance declaration; from the context: forall a. Monoid a => Monoid (f a) bound by the instance declaration at <interactive>:168:10-66; or from: Semigroup a bound by a quantified context at <interactive>:1:1; Possible fix: add (Monoid a) to the context of a quantified context; * I
2021-10-17 16:10:45	tomsmeding	ghc is drunk
2021-10-17 16:10:59	hololeap	% instance (forall a. Monoid a => Monoid (f a)) => Monoid (NomFix f) where
2021-10-17 16:10:59	yahb	hololeap: ; <interactive>:169:10: warning: [-Wmissing-methods]; * No explicit implementation for; `mempty'; * In the instance declaration for `Monoid (NomFix f)'
2021-10-17 16:11:06	hololeap	you gotta use the nomnom
2021-10-17 16:11:17	tomsmeding	apparently
2021-10-17 16:11:25	tomsmeding	must have Nom in the name, otherwise no monoids for you
2021-10-17 16:12:18	hololeap	nomoids
2021-10-17 16:12:53	tomsmeding	ah no the difference is something else
2021-10-17 16:13:02	tomsmeding	you gave a (Monoid =>Monoid) => Semigroup instance
2021-10-17 16:13:06	tomsmeding	that is the crucial difference
2021-10-17 16:13:25	tomsmeding	OH
2021-10-17 16:13:35	hololeap	% deriving newtype instance (forall a. Monoid a => Monoid (f a)) => Monoid (Fix f)
2021-10-17 16:13:35	yahb	hololeap: ; <interactive>:170:1: error:; * Could not deduce (Monoid a) arising from the superclasses of an instance declaration; from the context: forall a. Monoid a => Monoid (f a) bound by the instance declaration at <interactive>:170:1-80; or from: Semigroup a bound by a quantified context at <interactive>:1:1; Possible fix: add (Monoid a) to the context of a quantified context; * In 
2021-10-17 16:14:05	tomsmeding	probably when you give an instance 'C => Monoid a', then because of 'class Semigroup a => Monoid a' ghc requires that 'C => Semigroup a'
2021-10-17 16:14:46	tomsmeding	but you can't build a 'Semigroup a => Semigroup (f a)' from a 'Monoid a => Monoid (f a)', because what are you going to give to the second function when given just a Semigroup a
2021-10-17 16:15:07	tomsmeding	% deriving newtype instance (forall a. Monoid a => Monoid (f a)) => Semigroup (Fix f)
2021-10-17 16:15:08	yahb	tomsmeding: ; <interactive>:171:1: error:; * Could not deduce (Monoid a) arising from a use of `<>'; from the context: forall a. Monoid a => Monoid (f a) bound by the instance declaration at <interactive>:171:1-83; or from: Semigroup a bound by a quantified context at <interactive>:1:1; Possible fix: add (Monoid a) to the context of a quantified context; * In the third argument of `coerce'
2021-10-17 16:16:21	tomsmeding	ah that's not going to work of course
2021-10-17 16:16:34	tomsmeding	oooooh
2021-10-17 16:16:43	tomsmeding	% deriving newtype instance (forall a. (Semigroup a, Monoid a) => Monoid (f a)) => Semigroup (Fix f) ; deriving newtype instance (forall a. (Semigroup a, Monoid a) => Monoid (f a)) => Monoid (Fix f)
2021-10-17 16:16:43	yahb	tomsmeding: 
2021-10-17 16:16:52	tomsmeding	need to have both at the same time, and then both at the same time
2021-10-17 16:17:37	hololeap	why the monoid constraint on (f a) for semigroup?
2021-10-17 16:17:53	→	td_ has joined #haskell
2021-10-17 16:17:56	tomsmeding	no reason other than to be able to write the Monoid instance for Fix
2021-10-17 16:18:17	hololeap	hm, does that actually make sense, though?
2021-10-17 16:18:18	tomsmeding	C => Monoid (Fix f) requires that C => Semigroup (Fix f), I think, due to the superclass constraint of Monoid
2021-10-17 16:19:13	tomsmeding	so if you have (forall a. Monoid a => Monoid (f a)) => Monoid (Fix f), and also (forall a. Semigroup a => Semigroup (f a)) => Semigroup (Fix f), then ghc needs to somehow make a Semigroup a => Semigroup (f a) from a Monoid a => Monoid (f a)
2021-10-17 16:19:25	tomsmeding	and you can't do that in general
2021-10-17 16:19:28	←	f-a has left #haskell
2021-10-17 16:19:47	tomsmeding	because there's no 'Monoid a' to call that "function" with
2021-10-17 16:20:11	tomsmeding	so you need (Semigroup a, Monoid a) on the Semigroup instance in order to write the Monoid instance
2021-10-17 16:20:28	tomsmeding	ah and then 'Monoid a => Monoid f a' is sufficient on the monoid instance
2021-10-17 16:20:41	→	coot has joined #haskell
2021-10-17 16:21:20	hololeap	% deriving newtype instance (forall a. (Semigroup a, Monoid a) => Monoid (f a)) => Semigroup (Fix f) ; deriving newtype instance (forall a. Monoid a => Monoid (f a)) => Monoid (Fix f)
2021-10-17 16:21:20	yahb	hololeap: 
2021-10-17 16:21:51	hololeap	% deriving newtype instance (forall a. (Semigroup a, Monoid a) => Semigroup (f a)) => Semigroup (Fix f) ; deriving newtype instance (forall a. Monoid a => Monoid (f a)) => Monoid (Fix f)
2021-10-17 16:21:51	yahb	hololeap: ; <interactive>:174:1: error:; * Could not deduce (Monoid (f a)) arising from a use of `<>'; from the context: forall a. (Semigroup a, Monoid a) => Semigroup (f a) bound by the instance declaration at <interactive>:174:1-101; or from: Monoid a bound by a quantified context at <interactive>:1:1; * In the third argument of `coerce', namely `((<>) @(f (Fix f)))'; In the expression
2021-10-17 16:22:23	tomsmeding	hm you ought to be able to make a Semigroup (f a) from a Monoid (f a)
2021-10-17 16:22:42	tomsmeding	oh no that's not the instance head, that's defining <>
2021-10-17 16:22:45	tomsmeding	this is because of Fix
2021-10-17 16:22:59	tomsmeding	can't satisfy the 'Monoid a' constraint recursively if you only get Semigroup (f a)
2021-10-17 16:23:27	hololeap	right the `a` will be replaced by `Fix f`
2021-10-17 16:23:34	hololeap	oh, that makes sense
2021-10-17 16:23:56	tomsmeding	ghc not drunk afterall
2021-10-17 16:24:11	hololeap	generally not :)
2021-10-17 16:25:32	Franciman	Glasgow Haskell Cointreau
2021-10-17 16:25:52	tomsmeding	"the third argument of `coerce', namely `((<>) @(f (Fix f)))'"
2021-10-17 16:25:57	tomsmeding	what even are the first and second arguments
2021-10-17 16:26:22	→	merijn has joined #haskell
2021-10-17 16:26:50	→	DNH has joined #haskell
2021-10-17 16:27:16	hololeap	maybe because coerce is so damn polymorphic and it's searching for some resolution
2021-10-17 16:29:48	hololeap	% deriving newtype instance (forall a. Semigroup a => Semigroup (f a)) => Semigroup (Fix f) ; deriving newtype instance (forall a. Semigroup a => Monoid (f a)) => Monoid (Fix f)
2021-10-17 16:29:48	yahb	hololeap: 
2021-10-17 16:29:57	hololeap	there's also that solution
2021-10-17 16:30:11	tomsmeding	right, which makes sense for some f
2021-10-17 16:30:23	tomsmeding	kinda sad that you have to choose
2021-10-17 16:30:24	hololeap	monoidal-containers
2021-10-17 16:30:38	→	alx741 has joined #haskell
2021-10-17 16:31:28	hololeap	(Eq k, Hashable k, Semigroup a) => Semigroup (MonoidalHashMap k a)
2021-10-17 16:31:38	hololeap	(Eq k, Hashable k, Semigroup a) => Monoid (MonoidalHashMap k a)
2021-10-17 16:31:50	tomsmeding	yeah also Maybe :p
2021-10-17 16:31:59	hololeap	True
2021-10-17 16:32:09	hololeap	interesting correlation
2021-10-17 16:32:15	tomsmeding	actually lots of stuff
2021-10-17 16:32:48	hololeap	although Maybe is isomorphic to HashMap ()
2021-10-17 16:36:11	→	Guest33 has joined #haskell
2021-10-17 16:38:09	←	Guest33 has quit (Client Quit)
2021-10-17 16:40:19	→	xiongxin has joined #haskell
2021-10-17 16:41:02	→	rusua has joined #haskell
2021-10-17 16:41:45	→	AlexNoo_ has joined #haskell
2021-10-17 16:44:00	←	AlexZenon has quit (Ping timeout: 252 seconds)
2021-10-17 16:44:33	←	Alex_test has quit (Ping timeout: 252 seconds)
2021-10-17 16:45:36	←	AlexNoo has quit (Ping timeout: 252 seconds)
2021-10-17 16:49:26	→	AlexZenon has joined #haskell
2021-10-17 16:49:36	→	Alex_test has joined #haskell
2021-10-17 16:51:27	→	tcard has joined #haskell
2021-10-17 16:52:56	←	pavonia has quit (Quit: Bye!)
2021-10-17 16:54:26	ℹ	AlexNoo_ is now known as AlexNoo
2021-10-17 16:59:50	←	merijn has quit (Ping timeout: 245 seconds)
2021-10-17 17:02:11	→	nsilv has joined #haskell
2021-10-17 17:05:04	nsilv	hey guys random question, does anyone have an easily pullable ready to use nvim configuration for haskell with LSP included somewhere? I just need one for a coding interview task cause I'm running it on a new nixos instance and don't have the time to tinker with it yet haha
2021-10-17 17:05:22	nsilv	(I would use vscode with the Haskell plugin but it really doesn't seem to like my nixos)
2021-10-17 17:07:01	[exa]	nsilv: https://github.com/neovim/nvim-lspconfig ?
2021-10-17 17:07:32	nsilv	[exa]: would that be enough just for a barely functional setup? I'll try it
2021-10-17 17:07:43	[exa]	it should kinda work but it's not haskell-specific
2021-10-17 17:07:50	[exa]	otoh the haskell specifics should be in the HLS
2021-10-17 17:08:08	→	pretty_dumm_guy has joined #haskell
2021-10-17 17:08:33	nsilv	I really wanted to use VSCode just for the time being even if I like nvim more but nixos gets a 404 when trying to pull the tarball T_T 
2021-10-17 17:09:21	[exa]	why not go without ide?
2021-10-17 17:09:56	nsilv	exploring a codebase I don't know mostly. I guess I could just wing it with ghci and ghcid though
2021-10-17 17:10:27	[exa]	I live with splitscreen vi/hackage/terminal, and sometimes a bit of grep
2021-10-17 17:10:34	→	Guest|66 has joined #haskell
2021-10-17 17:10:40	[exa]	ah yes that helps
2021-10-17 17:10:41	←	Guest|66 has quit (Client Quit)
2021-10-17 17:11:21	[exa]	unless the package has a generated haddock, which should be kinda a best way to start
2021-10-17 17:11:24	[exa]	:]
2021-10-17 17:11:25	nsilv	the problem is I don't know how to pull up ghcid in their nix setup and it's obviously sunday so I can't really ask and get a response 
2021-10-17 17:12:55	[exa]	imo, nvim is also a bit of a problematic buildingblock, vim fans stay with vim and many nvim users migrated to the emacsy editors
2021-10-17 17:13:37	nsilv	idk I kinda like nvim but I might give emacs a try again, tbh I stopped using emacs cause of performance issues cause I used to run on windows with WSL2
2021-10-17 17:14:59	[exa]	some people here were pretty happy with spacemacs and the doom-emacs thing
2021-10-17 17:15:17	→	__monty__ has joined #haskell
2021-10-17 17:15:22	nsilv	doom was decent for me but spacemacs was abysmally slow, I should probably get a bare emacs setup going
2021-10-17 17:15:55	hololeap	nsilv: kate with lsp enabled is good too. nice graphical IDE, but still pretty minimal
2021-10-17 17:16:24	nsilv	hololeap: never tried kate
2021-10-17 17:16:28	bontaq	doom-emacs is my main editor and it's been pretty good to me
2021-10-17 17:17:06	nsilv	I'll definitely try doom again but I usually go down rabbitholes with emacs that last multiple hours hahaha
2021-10-17 17:17:23	nsilv	even just installing the nativecomp version scares me
2021-10-17 17:20:27	bontaq	that's half the fun (or risk?)
2021-10-17 17:20:53	nsilv	yeah but I have a coding task for a job I really want to get and I want to make a good impression and finish it on monday
2021-10-17 17:20:55	nsilv	D: 
2021-10-17 17:22:46	→	Guest32 has joined #haskell
2021-10-17 17:25:16	←	max22- has quit (Ping timeout: 268 seconds)
2021-10-17 17:25:51	hololeap	I still say try out kate. you can generate an lsp config with `haskell-language-server generate-default-config` and a hie.yaml with `gen-hie`. after that it's pretty intuitive
2021-10-17 17:27:51	tomsmeding	nsilv: this is a (somewhat...) cleaned up version of my config https://paste.tomsmeding.com/kNVztlGt
2021-10-17 17:28:13	tomsmeding	put 'source /home/nsilv/.vimrc' in your .config/nvim/init.vim
2021-10-17 17:28:27	tomsmeding	(possibly it also works to put that whole thing in init.vim, not tested)
2021-10-17 17:29:03	←	jgeerds has quit (Ping timeout: 265 seconds)
2021-10-17 17:29:20	tomsmeding	do this https://github.com/junegunn/vim-plug#neovim then run :PlugUpdate in nvim, then restart nvim
2021-10-17 17:29:48	Guest32	If I have some type-level naturals `N` defined, and a type family for type-level addition `Add :: N -> N -> N`, I sometimes need to use associativity of addition as a constraint `(Add (Add a b) c ~ Add a (Add b c)) => ...`. I know that this is always true, but is there any way to explain that to GHC?
2021-10-17 17:29:49	tomsmeding	lots of non-essential stuff in that config though
2021-10-17 17:30:43	←	ArctVaulMarsHMPJ has quit (Ping timeout: 264 seconds)
2021-10-17 17:31:41	hololeap	% :i (+)
2021-10-17 17:31:42	yahb	hololeap: type Num :: * -> Constraint; class Num a where; (+) :: a -> a -> a; ...; -- Defined in `GHC.Num'; infixl 6 +
2021-10-17 17:32:02	hololeap	% import GHC.TypeNats
2021-10-17 17:32:02	yahb	hololeap: 
2021-10-17 17:32:05	hololeap	% :i (+)
2021-10-17 17:32:05	yahb	hololeap: type Num :: * -> Constraint; class Num a where; (+) :: a -> a -> a; ...; -- Defined in `GHC.Num'; infixl 6 +; type (+) :: Nat -> Nat -> Nat; type family (+) a b; -- Defined in `GHC.TypeNats'; infixl 6 +
2021-10-17 17:32:23	→	mestre has joined #haskell
2021-10-17 17:32:46	hololeap	% undefined :: Proxy (5 + 4)
2021-10-17 17:32:46	yahb	hololeap: Proxy
2021-10-17 17:32:55	hololeap	% :t undefined :: Proxy (5 + 4)
2021-10-17 17:32:56	yahb	hololeap: Proxy 9
2021-10-17 17:33:19	tomsmeding	I believe that ghc's type level nats will have the exact same problem, except that there's a ghc plugin, ghc-typelits-natnormalise, that resolves things
2021-10-17 17:34:22	hololeap	% :t undefined :: Proxy (5 + 4 + 3)
2021-10-17 17:34:22	yahb	hololeap: Proxy 12
2021-10-17 17:34:31	hololeap	% :t undefined :: Proxy (5 + (4 + 3))
2021-10-17 17:34:31	yahb	hololeap: Proxy 12
2021-10-17 17:34:39	hololeap	% :t undefined :: Proxy ((5 + 4) + 3)
2021-10-17 17:34:40	yahb	hololeap: Proxy 12
2021-10-17 17:37:58	tomsmeding	:set -XScopedTypeVariables -XTypeApplications -XDataKinds -XTypeOperators -XKindSignatures
2021-10-17 17:38:00	tomsmeding	% :set -XScopedTypeVariables -XTypeApplications -XDataKinds -XTypeOperators -XKindSignatures
2021-10-17 17:38:00	yahb	tomsmeding: 
2021-10-17 17:38:11	tomsmeding	% f :: Proxy a -> Proxy b -> Proxy c -> Proxy (a + (b + c)) -> () ; f _ _ _ _ = ()
2021-10-17 17:38:11	yahb	tomsmeding: 
2021-10-17 17:38:19	tomsmeding	% g :: forall (a :: Nat) (b :: Nat) (c :: Nat). Proxy a -> Proxy b -> Proxy c -> () ; g pa pb pc = f pa pb pc (Proxy @((a + b) + c))
2021-10-17 17:38:20	yahb	tomsmeding: ; <interactive>:186:110: error:; * Couldn't match type: (a + b) + c; with: a + (b + c); Expected: Proxy (a + (b + c)); Actual: Proxy ((a + b) + c); NB: `+' is a non-injective type family; * In the fourth argument of `f', namely `(Proxy @((a + b) + c))'; In the expression: f pa pb pc (Proxy @((a + b) + c)); In an equation for `g': g pa pb pc = f p
2021-10-17 17:38:26	tomsmeding	hololeap: ghc doesn't do it
2021-10-17 17:38:57	tomsmeding	that's what you need the ghc-typelits-natnormalise plugin for
2021-10-17 17:39:23	tomsmeding	Guest32: can't do it without work,
2021-10-17 17:39:36	→	ArctVaulMarsHMPJ has joined #haskell
2021-10-17 17:40:24	tomsmeding	like, you can write 'proof :: Add a (Add b c) :~: Add (Add a b) c ; proof = unsafeCoerce Refl' and then in your function do `case proof @a @b @c of Refl -> ...`
2021-10-17 17:40:35	tomsmeding	for the right values of a,b,c of course
2021-10-17 17:40:44	tomsmeding	but not sure if you can get any better
2021-10-17 17:42:10	tomsmeding	(the case can be made a bit less intrusive using a pattern guard, '| Refl <- proof @a @b @c =')
2021-10-17 17:46:36	Guest32	I'll have a look at that approach, and see how it works. Thanks!
2021-10-17 17:47:12	tomsmeding	(note that the usage of unsafeCoerce means that you're literally saying to ghc "trust me this is true, and let the world burn if it isn't")
2021-10-17 17:47:57	tomsmeding	not that ghc has the ability to do anything so destructive, hopefully
2021-10-17 17:50:00	Guest32	That's fine; I'm willing to accept the consequences if it turns out that addition is non-associative :)
2021-10-17 17:55:43	→	machinedgod has joined #haskell
2021-10-17 17:58:15	→	stengah has joined #haskell
2021-10-17 18:04:05	→	wz1000 has joined #haskell
2021-10-17 18:05:12	→	ubert has joined #haskell
2021-10-17 18:15:09	→	jespada has joined #haskell
2021-10-17 18:25:55	←	stengah has quit (Ping timeout: 268 seconds)
2021-10-17 18:39:11	→	acidjnk_new has joined #haskell
2021-10-17 18:43:08	←	acidjnk has quit (Ping timeout: 265 seconds)
2021-10-17 18:47:30	←	Vajb has quit (Read error: Connection reset by peer)
2021-10-17 18:47:39	→	Vajb has joined #haskell
2021-10-17 18:49:55	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-10-17 18:50:49	→	max22- has joined #haskell
2021-10-17 18:51:03	→	MQ-17J has joined #haskell
2021-10-17 18:51:13	→	acidjnk_new3 has joined #haskell
2021-10-17 18:54:41	←	acidjnk_new has quit (Ping timeout: 268 seconds)
2021-10-17 18:56:18	→	merijn has joined #haskell
2021-10-17 18:59:44	→	eggplantade has joined #haskell
2021-10-17 19:04:19	←	eggplantade has quit (Ping timeout: 264 seconds)
2021-10-17 19:17:14	←	max22- has quit (Ping timeout: 260 seconds)
2021-10-17 19:19:25	→	azimut has joined #haskell
2021-10-17 19:23:26	→	sedeki has joined #haskell
2021-10-17 19:24:34	←	Guest32 has quit (Quit: Client closed)
2021-10-17 19:26:38	→	stengah has joined #haskell
2021-10-17 19:26:42	←	harovali has quit (Remote host closed the connection)
2021-10-17 19:30:35	←	rusua has quit (Quit: Connection closed for inactivity)
2021-10-17 19:30:43	←	merijn has quit (Ping timeout: 264 seconds)
2021-10-17 19:32:40	←	stiell has quit (Remote host closed the connection)
2021-10-17 19:34:23	→	stiell has joined #haskell
2021-10-17 19:35:23	→	max22- has joined #haskell
2021-10-17 19:37:15	←	notzmv has quit (Ping timeout: 252 seconds)
2021-10-17 19:44:09	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-10-17 19:44:39	→	[itchyjunk] has joined #haskell
2021-10-17 19:45:51	←	sedeki has quit (Quit: Textual IRC Client: www.textualapp.com)
2021-10-17 19:53:58	→	douglascorrea_io has joined #haskell
2021-10-17 20:02:45	←	acidjnk_new3 has quit (Ping timeout: 265 seconds)
2021-10-17 20:08:09	→	gaff has joined #haskell
2021-10-17 20:08:27	→	zebrag has joined #haskell
2021-10-17 20:10:12	←	stengah has quit (Ping timeout: 252 seconds)
2021-10-17 20:17:21	←	douglascorrea_io has quit (Read error: Connection reset by peer)
2021-10-17 20:19:19	→	slowButPresent has joined #haskell
2021-10-17 20:20:41	←	gaff has quit (Quit: Bye ...)
2021-10-17 20:26:13	→	burnsidesLlama has joined #haskell
2021-10-17 20:27:29	←	son0p has quit (Remote host closed the connection)
2021-10-17 20:29:12	←	geekosaur has quit (Remote host closed the connection)
2021-10-17 20:30:54	→	geekosaur has joined #haskell
2021-10-17 20:31:57	→	burnside_ has joined #haskell
2021-10-17 20:31:57	←	burnsidesLlama has quit (Remote host closed the connection)
2021-10-17 20:37:19	←	xff0x has quit (Ping timeout: 264 seconds)
2021-10-17 20:37:44	→	xff0x has joined #haskell
2021-10-17 20:39:01	→	notzmv has joined #haskell
2021-10-17 20:45:00	→	lavaman has joined #haskell
2021-10-17 20:45:44	←	xiongxin has quit (Read error: Connection reset by peer)
2021-10-17 20:46:59	→	xiongxin has joined #haskell
2021-10-17 20:50:00	←	lavaman has quit (Ping timeout: 268 seconds)
2021-10-17 20:53:52	→	benin5 has joined #haskell
2021-10-17 20:57:14	←	azimut has quit (Remote host closed the connection)
2021-10-17 20:57:25	←	benin has quit (Ping timeout: 264 seconds)
2021-10-17 20:57:25	ℹ	benin5 is now known as benin
2021-10-17 20:57:36	→	azimut has joined #haskell
2021-10-17 21:01:27	kuribas	(Add (Add a b) c) and (Add a (Add b c)) aren't judgementally equal, no?
2021-10-17 21:02:08	→	hnOsmium0001 has joined #haskell
2021-10-17 21:02:40	geekosaur	haskell knows nothing about associativity, so no
2021-10-17 21:05:33	→	DNH has joined #haskell
2021-10-17 21:06:07	hpc	they're entirely unequal
2021-10-17 21:06:19	hpc	the only thing suggesting equivalence in any form is the data constructor is named "Add"
2021-10-17 21:08:51	→	kupi has joined #haskell
2021-10-17 21:08:56	kuribas	yeah, it isn't even possible to prove their equality.
2021-10-17 21:09:08	kuribas	which you could do with peano representation.
2021-10-17 21:10:19	←	DNH has quit (Ping timeout: 264 seconds)
2021-10-17 21:11:34	←	zer0bitz has quit (Read error: Connection reset by peer)
2021-10-17 21:13:35	←	xiongxin has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-10-17 21:13:42	tomsmeding	Add in this case was a type family
2021-10-17 21:14:53	kuribas	tomsmeding: how is that defined?
2021-10-17 21:17:55	→	retroid_ has joined #haskell
2021-10-17 21:18:21	→	Psybur has joined #haskell
2021-10-17 21:20:39	←	retro_ has quit (Ping timeout: 252 seconds)
2021-10-17 21:23:23	kuribas	tomsmeding: "If I have some type-level naturals `N` defined" maybe he defined his own type-level nat?
2021-10-17 21:25:26	Hecate	kuribas: loved your comment on reddit on the post that was asking for Haskell consultancies
2021-10-17 21:25:44	→	raehik has joined #haskell
2021-10-17 21:26:53	→	merijn has joined #haskell
2021-10-17 21:27:20	kuribas	Hecate: thanks :)
2021-10-17 21:27:46	kuribas	Not sure I was going to be downvoted or upvoted :)
2021-10-17 21:30:01	kuribas	Hecate: it bothers me many people think haskell is the cryptocurrency language.  It isn't even particularly suited for that usecase.
2021-10-17 21:34:02	→	wroathe has joined #haskell
2021-10-17 21:34:02	←	wroathe has quit (Changing host)
2021-10-17 21:34:02	→	wroathe has joined #haskell
2021-10-17 21:34:10	c_wraith	it's better than solidity!  (nearly everything is better than solidity)
2021-10-17 21:34:14	→	waleee has joined #haskell
2021-10-17 21:39:12	monochrom	Probably a side effect of the fame of IOHK.
2021-10-17 21:41:29	←	Lord_of_Life has quit (Ping timeout: 265 seconds)
2021-10-17 21:43:29	monochrom	What surprises me is why Python didn't take that place, given that historically Python has always taken the places of "the <current fad> language", for example machine learning.
2021-10-17 21:43:49	→	Lord_of_Life has joined #haskell
2021-10-17 21:48:07	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-10-17 21:49:48	maerwald	kuribas: why?
2021-10-17 21:52:37	→	MQ-17J has joined #haskell
2021-10-17 21:55:34	←	Psybur has quit (Remote host closed the connection)
2021-10-17 21:56:38	←	mjs2600 has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-10-17 21:56:47	←	Kaiepi has quit (Remote host closed the connection)
2021-10-17 21:57:10	→	Kaiepi has joined #haskell
2021-10-17 21:58:03	→	mjs2600 has joined #haskell
2021-10-17 22:00:43	→	tzh has joined #haskell
2021-10-17 22:01:19	←	merijn has quit (Ping timeout: 264 seconds)
2021-10-17 22:01:50	→	alzgh has joined #haskell
2021-10-17 22:09:46	←	machinedgod has quit (Ping timeout: 268 seconds)
2021-10-17 22:10:13	→	eggplantade has joined #haskell
2021-10-17 22:15:33	→	segfaultfizzbuzz has joined #haskell
2021-10-17 22:22:18	→	ub has joined #haskell
2021-10-17 22:26:42	kuribas	maerwald: why what?
2021-10-17 22:26:49	←	waleee has quit (Ping timeout: 260 seconds)
2021-10-17 22:26:54	maerwald	why is Haskell not suited for cryptocurrency?
2021-10-17 22:27:11	kuribas	monochrom: because haskell is seemingly "more robust".
2021-10-17 22:27:15	kuribas	monochrom: ?
2021-10-17 22:27:32	kuribas	maerwald: I didn't say it's not suited.
2021-10-17 22:27:45	maerwald	then I don't understand your remark at all
2021-10-17 22:27:46	kuribas	maerwald: it's just not *more* suited than other languages.
2021-10-17 22:28:03	maerwald	I don't know of any language that's particularly suited for it then
2021-10-17 22:28:04	kuribas	for example, if you need performance, rust should be better.
2021-10-17 22:28:13	→	fef has joined #haskell
2021-10-17 22:28:22	kuribas	if you need correctness then idris or something dependently typed.
2021-10-17 22:28:27	maerwald	kuribas: you're aware that IOHK built a rust and a haskell based node?
2021-10-17 22:28:42	maerwald	and the rust one wasn't picked
2021-10-17 22:28:49	monochrom	Almost every fad so far, except web 2.0, has needed performance, too.
2021-10-17 22:28:56	kuribas	maerwald: I am not.
2021-10-17 22:29:13	maerwald	https://github.com/input-output-hk/jormungandr
2021-10-17 22:29:42	kuribas	maerwald: I am not interested enough to spend time into blockchain stuff.
2021-10-17 22:29:54	←	euandreh has quit (Quit: WeeChat 3.2)
2021-10-17 22:30:00	maerwald	kuribas: well, then I find your remark not very enlightening
2021-10-17 22:31:50	maerwald	I'd argue it's hard for a language to particularly be suited for "usecase X", unless it was designed for it
2021-10-17 22:32:44	monochrom	I think we all agree on that.
2021-10-17 22:33:21	kuribas	maerwald: I don't want to be enlightening.  I just want people to not take haskell is good for crypto stuff for granted.
2021-10-17 22:33:37	kuribas	maerwald: just because someone uses it is not proof that it is good.
2021-10-17 22:34:01	maerwald	well, what would be a proof then?
2021-10-17 22:34:13	geekosaur	do we care?
2021-10-17 22:34:14	→	jgeerds has joined #haskell
2021-10-17 22:34:17	monochrom	My http://www.vex.net/~trebla/humour/tautologies.html is not enlightening at all.  Just tautologies.  Well, I don't know, turns out stupid humans find them enlightening.
2021-10-17 22:34:24	→	euandreh has joined #haskell
2021-10-17 22:34:39	←	euandreh has quit (Client Quit)
2021-10-17 22:35:03	→	euandreh has joined #haskell
2021-10-17 22:35:19	kuribas	maerwald: I don't know... a convincing paper clearly outlining the benefits?
2021-10-17 22:35:25	maerwald	a paper? :D
2021-10-17 22:35:29	⚡	maerwald chuckles
2021-10-17 22:35:52	maerwald	I've seen papers about "language X is better" and they're usually a joke
2021-10-17 22:36:26	geekosaur	I do agree that stuffing a language into a niche is probably bad
2021-10-17 22:36:55	geekosaur	especially if people take it in both directions "well, then it's only good for cryptocurrencies"
2021-10-17 22:37:03	geekosaur	which people do because they're dumb
2021-10-17 22:37:13	maerwald	Well, the thing is: IOHK has enough engineering power to build a blockchain in POSIX shell with awk.
2021-10-17 22:37:32	maerwald	But that goes for Google, Facebook etc as well
2021-10-17 22:37:49	monochrom	Humans want stereotyping. It gives them simpler mental models and self-confidence. They can then say "I know" rather than "I don't know, it depends".
2021-10-17 22:38:35	maerwald	I'm not even sure what a language would look like that was specifically designed for blockchain
2021-10-17 22:38:43	maerwald	Blockchain is so complicated, no one understands it
2021-10-17 22:38:56	geekosaur	doesn't blockchain kinda specify one?
2021-10-17 22:39:18	geekosaur	with haskell here being used as the implemnentation language for it?
2021-10-17 22:39:33	kuribas	maerwald: "I'd argue it's hard for a language to particularly be suited for "usecase X", unless it was designed for it" <= disagree.
2021-10-17 22:39:51	kuribas	maerwald: haskell is quite nice for backends, but I don't think it was design with that purpose.
2021-10-17 22:40:16	ℹ	onion is now known as zzz
2021-10-17 22:40:18	maerwald	kuribas: what type of backends
2021-10-17 22:40:31	maerwald	I know it's really bad at event sourced backends
2021-10-17 22:40:32	monochrom	This is where "it's hard" comes in. It does not mean "never".
2021-10-17 22:40:58	monochrom	Then again I would phrase it as "less chance".
2021-10-17 22:41:00	kuribas	well, it could have been nice for UIs, if there was good UI support.
2021-10-17 22:41:25	zzz	what are discussing here?
2021-10-17 22:41:31	zzz	*we
2021-10-17 22:41:34	maerwald	we're just talking strangely
2021-10-17 22:42:01	monochrom	Is "language X is for Y" a thing?
2021-10-17 22:42:03	APic	*nod*
2021-10-17 22:43:10	monochrom	But did anyone notice the pun in my "Probably a side effect of the fame of IOHK"? :)
2021-10-17 22:43:40	kuribas	monochrom: well done :)
2021-10-17 22:44:50	→	Pickchea has joined #haskell
2021-10-17 22:48:31	zzz	is french good for commercials? is swahili good for poems? is latin good for public announcements?
2021-10-17 22:49:05	monochrom	I have a better idea.
2021-10-17 22:49:49	zzz	i write my shopping list in mandarin. i find it is the best language for that
2021-10-17 22:50:00	→	Inst has joined #haskell
2021-10-17 22:50:18	zzz	enlgish is the best language for irc
2021-10-17 22:50:25	zzz	english even
2021-10-17 22:50:35	monochrom	One day, someone made a very good horror movie, and it's in French.  Then, everyone went crazy and whenever they made more horror movies they stuck to French.
2021-10-17 22:51:43	maerwald	zzz: shopping list in Klingon
2021-10-17 22:52:01	maerwald	horror movies in korean
2021-10-17 22:52:15	monochrom	Clearly, Chopin Liszt is best in music notation.
2021-10-17 22:53:01	zzz	a 12yo girl showed me an episode of squid game this weekend. i asked her if that was supposed to be horror or comedy
2021-10-17 22:53:21	monochrom	Oh, about that.
2021-10-17 22:54:04	hpc	zzz: actually fun fact, english is not the language of irc - []` are substitutes for finnish characters (iirc)
2021-10-17 22:54:05	zzz	Chopin Liszt *clap*
2021-10-17 22:54:16	hpc	and {}~ are the upper-case variants
2021-10-17 22:54:17	monochrom	I went to watch The Neon Demon. The theatre had just me and two girls. The girls were giggling at every horror scene.
2021-10-17 22:54:41	→	Kaipi has joined #haskell
2021-10-17 22:54:41	maerwald	japanese is best for giggling I think
2021-10-17 22:54:43	monochrom	That was enlightening. I realized there is no line between horror and comedy.
2021-10-17 22:54:48	←	Kaiepi has quit (Read error: Connection reset by peer)
2021-10-17 22:55:24	←	jgeerds has quit (Ping timeout: 268 seconds)
2021-10-17 22:55:34	monochrom	Oh BTW after the movie I did contemplate "should I have meat ball pasta for dinner" if you have also watched the movie >:)
2021-10-17 22:55:40	→	mortemeur has joined #haskell
2021-10-17 22:56:27	zzz	hpc: that went over my head
2021-10-17 22:56:52	geekosaur	it's why you can use those characters in nicks
2021-10-17 22:57:08	geekosaur	as far as rfc1459 is concerned they're letters, not symbols
2021-10-17 22:57:31	→	DNH has joined #haskell
2021-10-17 22:57:44	zzz	that's interesting
2021-10-17 22:57:44	←	notzmv has quit (Ping timeout: 260 seconds)
2021-10-17 22:57:47	geekosaur	from the scandinavian iso8859 variant, I forget what its number is
2021-10-17 22:57:52	←	Kaipi has quit (Read error: Connection reset by peer)
2021-10-17 22:58:10	→	Kaipi has joined #haskell
2021-10-17 22:58:25	geekosaur	like one of those characters maps to ø
2021-10-17 22:58:38	hpc	if you try changing your nick to zzz` and then try joining in another client as ZZZ~, you'll find you can't
2021-10-17 22:58:43	hpc	because nicks are case-insensitive
2021-10-17 22:59:19	zzz	isn't ~ a reserved symbol?
2021-10-17 22:59:25	geekosaur	not in irc
2021-10-17 22:59:47	geekosaur	hm, actualy ~ is not in the list
2021-10-17 22:59:54	geekosaur	I just got an error for using it
2021-10-17 23:00:07	zzz	~ is for the admin i think
2021-10-17 23:00:08	→	^|{`-}_{ has joined #haskell
2021-10-17 23:00:17	^|{`-}_{	Hi, you're talking about me? :)
2021-10-17 23:00:33	←	^|{`-}_{ has quit (Client Quit)
2021-10-17 23:00:35	hpc	oh, it's \ and |
2021-10-17 23:00:45	monochrom	That was me :)
2021-10-17 23:00:55	geekosaur	yes, saw that from the host :þ
2021-10-17 23:00:58	hpc	| is lowercase \
2021-10-17 23:01:09	zzz	that makes more sense
2021-10-17 23:01:20	hpc	as much as any of it makes sense :D
2021-10-17 23:01:35	geekosaur	does any of the internet make sense?
2021-10-17 23:01:46	hpc	occasionally arxiv makes sense
2021-10-17 23:01:51	monochrom	do humans make sense? >:)
2021-10-17 23:04:19	zzz	i love the "i use base 10" joke
2021-10-17 23:07:24	←	Pickchea has quit (Quit: Leaving)
2021-10-17 23:07:35	→	Pickchea has joined #haskell
2021-10-17 23:25:47	→	douglascorrea_io has joined #haskell
2021-10-17 23:26:19	←	wroathe has quit (Ping timeout: 260 seconds)
2021-10-17 23:27:49	←	segfaultfizzbuzz has quit (Ping timeout: 265 seconds)
2021-10-17 23:33:15	←	nsilv has quit (Quit: WeeChat 2.7.1)
2021-10-17 23:34:07	awpr	hololeap: that CoerceF trick is also in https://hackage.haskell.org/package/attenuation, and I doubt I was the first to use it either
2021-10-17 23:35:51	←	max22- has quit (Ping timeout: 240 seconds)
2021-10-17 23:37:31	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-10-17 23:38:46	→	DNH has joined #haskell
2021-10-17 23:39:35	Hecate	< zzz> ~ is for the admin i think // It's a sigil like @ and +, but it's prepended to the nickname by the IRC server, not part of the nickname in itself
2021-10-17 23:40:02	→	sedeki has joined #haskell
2021-10-17 23:41:35	zzz	Hecate: yes, that's what i remember from when i used to run a network
2021-10-17 23:41:53	→	wroathe has joined #haskell
2021-10-17 23:41:53	←	wroathe has quit (Changing host)
2021-10-17 23:41:53	→	wroathe has joined #haskell
2021-10-17 23:42:25	→	jgeerds has joined #haskell
2021-10-17 23:43:17	←	betelgeuse has quit (Quit: The Lounge - https://thelounge.chat)
2021-10-17 23:43:28	→	brainfreeze has joined #haskell
2021-10-17 23:45:17	kuribas	zzz: well, I'd say french is a more poetic language than german.  French: Je t'aime.  German: Verdammt ich lieb dich.
2021-10-17 23:45:58	sedeki	liebe?
2021-10-17 23:46:25	⚡	sedeki doesn't know German
2021-10-17 23:47:01	gehmehgeh	kuribas: no "verdammt" in that sentence in 
2021-10-17 23:47:22	APic	Mu-ha-ha.
2021-10-17 23:47:28	APic	♥♥♥ 😸
2021-10-17 23:48:12	kuribas	https://www.youtube.com/watch?v=Bk5Qm_0_0HM
2021-10-17 23:48:15	→	max22- has joined #haskell
2021-10-17 23:48:32	kuribas	https://www.youtube.com/watch?v=x6q0ciiqyG0
2021-10-17 23:48:46	[exa]	I sorted the languages once by the amount of shades between [ə:] and [ü:] that you need to recognize to understand anything at all, and French didn't score well
2021-10-17 23:50:11	monochrom	Oh nice, audio hamming distance :)
2021-10-17 23:55:06	awpr	hololeap, tomsmeding: as for the Fix issue, I think GHC gets while trying to solve the `Semigroup (Fix f)` superclass, because it selects the Semigroup instance and tries to solve its quantified context `forall a. Semigroup a => Semigroup (f a)`, then chooses to solve that via the given quantified context `forall a. Monoid a => Monoid (f a)` plus the superclass relationship, leaving it with a `Monoid a` constraint it can't solve
2021-10-17 23:55:11	awpr	gets confused*
2021-10-17 23:56:02	awpr	i.e. it could solve `forall a. Monoid a => Semigroup (f a)`, but not the more demanding `forall a. Semigroup a => Semigroup (f a)` that the `Semigroup` instance wants
2021-10-17 23:56:37	awpr	% deriving instance (forall a. Semigroup a => Semigroup (f a), forall a. Monoid a => Monoid (f a)) => Monoid (Fix f)
2021-10-17 23:56:37	yahb	awpr: ; <interactive>:187:19: error:; * Could not deduce (Semigroup (f a)); from the context: (forall a. Semigroup a => Semigroup (f a), forall a. Monoid a => Monoid (f a)); bound by a stand-alone deriving instance declaration:; forall (f :: * -> *). (forall a. Semigroup a => Semigroup (f a), forall a. Monoid a => Monoid (f a)) => Monoid (Fix f); at <interactive>:1
2021-10-17 23:57:05	kuribas	https://www.youtube.com/watch?v=tSaJOu7kO1g
2021-10-17 23:57:28	→	merijn has joined #haskell
2021-10-17 23:57:28	kuribas	sorry, getting too offtopic.
2021-10-17 23:57:55	←	coot has quit (Quit: coot)
2021-10-17 23:58:05	awpr	huh.  works on repl.it with 8.6.5 https://replit.com/@AndrewPritchard/AwfulLuckyIdentifier#main.hs
2021-10-17 23:58:17	←	kuribas has quit (Quit: ERC (IRC client for Emacs 26.3))
2021-10-18 00:02:54	←	benin has quit (Ping timeout: 252 seconds)
2021-10-18 00:02:57	→	Alleria has joined #haskell
2021-10-18 00:07:23	→	shriekingnoise has joined #haskell
2021-10-18 00:10:27	←	burnside_ has quit (Remote host closed the connection)
2021-10-18 00:10:34	tomsmeding	awpr: that conclusion is kind of what I also said, isn't it?
2021-10-18 00:10:36	←	vjoki has quit (Ping timeout: 252 seconds)
2021-10-18 00:12:06	tomsmeding	% deriving instance (forall a. Semigroup a => Semigroup (f a), forall a. Monoid a => Monoid (f a)) => Monoid (Fix f); deriving instance (forall a. Semigroup a => Semigroup (f a)) => Semigroup (Fix f)
2021-10-18 00:12:06	yahb	tomsmeding: ; <interactive>:188:19: error:; * Could not deduce (Semigroup (f a)); from the context: (forall a. Semigroup a => Semigroup (f a), forall a. Monoid a => Monoid (f a)); bound by a stand-alone deriving instance declaration:; forall (f :: * -> *). (forall a. Semigroup a => Semigroup (f a), forall a. Monoid a => Monoid (f a)) => Monoid (Fix f); at <interactive>:1
2021-10-18 00:12:09	tomsmeding	oh
2021-10-18 00:12:13	tomsmeding	oh well
2021-10-18 00:12:20	tomsmeding	kuribas '"If I have some type-level naturals `N` defined" maybe he defined his own type-level nat?'  -> presumably, yes :p
2021-10-18 00:12:31	awpr	oh yeah, didn't see that part.  pretty similar
2021-10-18 00:12:50	→	machinedgod has joined #haskell
2021-10-18 00:14:31	→	econo has joined #haskell
2021-10-18 00:16:52	albet70	newtype CoroutineT r m a = CoroutineT {runCoroutineT' :: ContT r (StateT [CoroutineT r m ()] m) a} is this an infinite type?
2021-10-18 00:16:55	←	mniip has quit (Ping timeout: 624 seconds)
2021-10-18 00:16:58	→	vjoki has joined #haskell
2021-10-18 00:17:49	ski	it's a recursively defined type
2021-10-18 00:18:09	albet70	does it have a bottom type?
2021-10-18 00:18:30	ski	bottom type ?
2021-10-18 00:18:54	ski	(no idea what you mean by that)
2021-10-18 00:18:58	→	Sgeo has joined #haskell
2021-10-18 00:19:38	→	waleee has joined #haskell
2021-10-18 00:20:19	albet70	like Leaf a in data Tree a = Leaf a | Node (Tree a) (Tree a)
2021-10-18 00:20:53	albet70	so there always a value can have that type
2021-10-18 00:21:04	c_wraith	ContT is a function
2021-10-18 00:21:24	xsperry	Leaf a is a value of type Tree, not a "bottom type". there's bottom value, there's no bottom type AFAIK
2021-10-18 00:21:40	⚡	ski . o O ( "A Poor Man's Concurrency Monad" (Functional Pearl) by Koen Claessen in 1999 at <http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.39.8039> )
2021-10-18 00:21:41	albet70	but CoroutineT inside StateT is not clear
2021-10-18 00:21:43	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-10-18 00:22:19	←	vjoki has quit (Ping timeout: 260 seconds)
2021-10-18 00:22:33	ski	what is not clear about it ?
2021-10-18 00:22:54	←	xff0x has quit (Ping timeout: 260 seconds)
2021-10-18 00:23:38	→	xff0x has joined #haskell
2021-10-18 00:24:52	←	Kaipi has quit (Read error: Connection reset by peer)
2021-10-18 00:25:10	→	Kaipi has joined #haskell
2021-10-18 00:25:21	albet70	newtype C r m a = C ContT r (C r m a) a
2021-10-18 00:25:35	→	python476 has joined #haskell
2021-10-18 00:26:07	ski	@kind ContT
2021-10-18 00:26:07	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-10-18 00:26:08	lambdabot	k -> (k -> *) -> * -> *
2021-10-18 00:26:35	ski	`C r m a' has kind `*' (not `k -> *')
2021-10-18 00:26:37	albet70	there's no such thing like Leaf a in Tree a for C r m a
2021-10-18 00:26:40	→	MQ-17J has joined #haskell
2021-10-18 00:26:41	→	vjoki has joined #haskell
2021-10-18 00:26:50	ski	so ?
2021-10-18 00:27:18	←	zzz has left #haskell
2021-10-18 00:27:27	ski	`return x' has type `ContT r m a', for every `x' of type `a'
2021-10-18 00:27:33	albet70	so not recursive, what the value looks like?
2021-10-18 00:27:45	→	mniip has joined #haskell
2021-10-18 00:27:49	ski	that can act as a base case, if that's what you're worrying/wondering about
2021-10-18 00:27:53	albet70	Nothing has Maybe a
2021-10-18 00:28:01	albet70	Leaf a has Tree a
2021-10-18 00:28:15	ski	(`return x', in this case, is actually `ContT (\k -> k x)')
2021-10-18 00:28:16	awpr	the latest posted definition of the Monoid instance of Fix stopped working with GHC 9.0.  still poking around to determine why.
2021-10-18 00:28:16	→	DNH has joined #haskell
2021-10-18 00:30:34	albet70	use return x create value to recursive type is ok?
2021-10-18 00:30:58	geekosaur	we do it all the time in the list monad
2021-10-18 00:31:09	ski	or `ContT (\k -> k x)' directly, if you must
2021-10-18 00:31:10	geekosaur	lists being a very sinmple recursive type
2021-10-18 00:31:21	geekosaur	as with any recursion, you just make sure there's a base case
2021-10-18 00:32:00	←	merijn has quit (Ping timeout: 268 seconds)
2021-10-18 00:32:05	ski	"so not recursive, what the value looks like?" -- the type is recursively defined. values of that type may or may not be recursively defined
2021-10-18 00:32:53	←	Skyfire has quit (Quit: WeeChat 3.3)
2021-10-18 00:33:53	←	fef has quit (Ping timeout: 276 seconds)
2021-10-18 00:34:04	ski	albet70 : perhaps another example, like `newtype Foo a = MkFoo (Maybe (a,Foo a))' might help a little ?
2021-10-18 00:34:07	→	zzz has joined #haskell
2021-10-18 00:34:38	←	zzz has left #haskell
2021-10-18 00:34:40	ski	(note that this `Foo a' also has no base case (/ "non-recursive") data constructor)
2021-10-18 00:34:42	→	zzz has joined #haskell
2021-10-18 00:35:27	albet70	why would people create this hard-to-understand type? recursive and there are three monad transformers inside
2021-10-18 00:35:49	ski	to implement a kind of cooperative concurrency ?
2021-10-18 00:36:05	albet70	MkFoo Nothing has Foo a
2021-10-18 00:36:11	ski	yes
2021-10-18 00:36:41	ski	so the base case doesn't have to be a data constructor of the recursively defined type in question
2021-10-18 00:37:40	albet70	without 'return x', how you use a value to express that type?
2021-10-18 00:38:19	ski	how about `CoroutineT (ContT (\k -> k 42))' ?
2021-10-18 00:40:12	→	Merfont has joined #haskell
2021-10-18 00:40:12	←	Kaipi has quit (Read error: Connection reset by peer)
2021-10-18 00:40:56	albet70	yes, it can, and it's still recursive
2021-10-18 00:41:10	→	unit73e has joined #haskell
2021-10-18 00:41:40	ski	what is still recursive ?
2021-10-18 00:42:13	albet70	k :: a -> (StateT ...) r -> (StateT ...) r
2021-10-18 00:42:54	albet70	that CoroutineT inside StateT
2021-10-18 00:43:16	ski	`CoroutineT' is recursively defined, sure
2021-10-18 00:43:32	ski	but `CoroutineT (ContT (\k -> k 42))' is not a recursively constructed value
2021-10-18 00:43:55	albet70	you're right, 42
2021-10-18 00:45:05	albet70	k could short circuit, so 42 could be the value?
2021-10-18 00:45:37	←	sedeki has quit (Quit: Textual IRC Client: www.textualapp.com)
2021-10-18 00:46:25	→	lavaman has joined #haskell
2021-10-18 00:47:00	→	fef has joined #haskell
2021-10-18 00:47:21	ski	i'm not following your question
2021-10-18 00:47:39	→	burnsidesLlama has joined #haskell
2021-10-18 00:47:44	albet70	my misunderstanding
2021-10-18 00:48:03	ski	if `k' doesn't care about its input, then (this) argument (`42') passed to it will be ignored
2021-10-18 00:48:10	hololeap	@unmtl ContT r (StateT [C r m ()] m) a
2021-10-18 00:48:10	lambdabot	(a -> [C r m ()] -> m (r, [C r m ()])) -> [C r m ()] -> m (r, [C r m ()])
2021-10-18 00:48:18	→	Kaipi has joined #haskell
2021-10-18 00:48:22	←	Merfont has quit (Remote host closed the connection)
2021-10-18 00:48:22	ski	lovely type
2021-10-18 00:48:25	hololeap	ah, my brain
2021-10-18 00:49:00	monochrom	In general, reductionism doesn't always improve understanding :)
2021-10-18 00:49:26	zzz	in general... doesn't always
2021-10-18 00:49:46	zzz	not wrong, though
2021-10-18 00:49:59	monochrom	Isn't English fun!
2021-10-18 00:50:05	albet70	how the people get this type out? how crazy!
2021-10-18 00:51:02	albet70	k's type still has CoroutineT inside, so it is still recursive
2021-10-18 00:51:14	monochrom	What's wrong with that?
2021-10-18 00:51:15	ski	"it" being ?
2021-10-18 00:51:17	←	lavaman has quit (Ping timeout: 265 seconds)
2021-10-18 00:51:44	monochrom	But since it's in a list, you can always provide [] for a base case.
2021-10-18 00:52:14	albet70	CoroutineT (ContT (\k -> k 42))
2021-10-18 00:52:19	←	burnsidesLlama has quit (Ping timeout: 264 seconds)
2021-10-18 00:52:36	monochrom	Then again, why need base cases?  "data X = X Int X;  f = X 5 f" is pretty simple.
2021-10-18 00:52:50	hololeap	@unmtl Cont r m a
2021-10-18 00:52:50	lambdabot	err: `(m -> r) -> r' is not a type function.
2021-10-18 00:52:56	hololeap	@unmtl ContT r m a
2021-10-18 00:52:56	lambdabot	(a -> m r) -> m r
2021-10-18 00:53:05	albet70	yes, [] as base case
2021-10-18 00:53:10	←	wroathe has quit (Ping timeout: 245 seconds)
2021-10-18 00:53:49	→	burnsidesLlama has joined #haskell
2021-10-18 00:54:00	hololeap	@type ContT
2021-10-18 00:54:01	lambdabot	forall k a (m :: k -> *) (r :: k). ((a -> m r) -> m r) -> ContT r m a
2021-10-18 00:54:12	albet70	yes, CoroutineT (ContT (\k -> k 42)) is a value
2021-10-18 00:54:22	ℹ	irc: disconnected from server
2021-10-24 01:02:52	→	oxide has joined #haskell
2021-10-24 01:02:52	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-10-24 01:02:52	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-10-24 01:02:52	ℹ	Channel #haskell: 736 nicks (1 op, 0 voices, 735 normals)
2021-10-24 01:02:52	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-10-24 01:02:58	ski	> empty :: S.Set ()
2021-10-24 01:02:59	lambdabot	 error:
2021-10-24 01:03:00	lambdabot	     • No instance for (Alternative S.Set) arising from a use of ‘empty’
2021-10-24 01:03:00	lambdabot	     • In the expression: empty :: S.Set ()
2021-10-24 01:03:00	ski	> mempty :: S.Set ()
2021-10-24 01:03:02	lambdabot	 fromList []
2021-10-24 01:03:06	c_wraith	but yeah, that
2021-10-24 01:03:15	c_wraith	A lot more Monoids than Alternatives
2021-10-24 01:04:06	ski	% pattern Empty :: (Monoid (t a),Foldable t) => t a; pattern Empty <- (null -> True) where Empty = empty
2021-10-24 01:04:07	yahb	ski: ; <interactive>:131:98: error:; * Could not deduce (Alternative t) arising from a use of `empty'; from the context: (Monoid (t a), Foldable t) bound by the signature for pattern synonym `Empty' at <interactive>:131:52-102; Possible fix: add (Alternative t) to the "required" context of the signature for pattern synonym `Empty'; * In the expression: empty; In an equation for `Emp
2021-10-24 01:04:14	ski	% pattern Empty :: (Monoid (t a),Foldable t) => t a; pattern Empty <- (null -> True) where Empty = mempty
2021-10-24 01:04:14	yahb	ski: 
2021-10-24 01:04:51	ski	% let foo Empty = () in foo (Empty :: M.Map Void Void)
2021-10-24 01:04:52	yahb	ski: ()
2021-10-24 01:05:22	c_wraith	I don't really think it's that useful of a pattern, though
2021-10-24 01:05:38	solomon	can I use mutliple wrappers with `Alex`? Or at that point should I just write my own?
2021-10-24 01:05:41	c_wraith	Because you can't usefully express a complete pattern set that way
2021-10-24 01:06:31	c_wraith	Unless...  you wanted to get into horrible type-level programming stuff using GHC 9.2 :P
2021-10-24 01:07:26	←	mikoto-chan has quit (Ping timeout: 244 seconds)
2021-10-24 01:07:33	solomon	oh nevermind, the `monad` wrapper is basically just a fancier version of `posn` and looks more like an example for how to write your own alex monad wrapper
2021-10-24 01:07:38	ski	i was wondering if one could have `InsertMin' or something .. but then that'd be a partial function
2021-10-24 01:07:48	ski	(or non-injective, if you return a `Maybe')
2021-10-24 01:08:16	solomon	why don't more people use Alex and Happy? All I ever hear about is parser combinators from haskell folks
2021-10-24 01:08:18	c_wraith	Yeah, that still doesn't let you create complete patterns
2021-10-24 01:09:18	→	mikoto-chan has joined #haskell
2021-10-24 01:09:36	geekosaur	solomon, alex and happy are kinda targeted toward folks used to lex/yacc from C, whereas parser combinators are a more natural fit for Haskell
2021-10-24 01:10:23	solomon	@geekosaur i have always used parser combinators but recently ported a parser over to Happy and found it to be way nicer for anything non-trivial. Parser Combinators get out of control really fast in my experience
2021-10-24 01:10:23	lambdabot	Unknown command, try @list
2021-10-24 01:11:15	c_wraith	solomon: did you try using parser combinators over a token stream rather than a character stream?  parsing characters is usually where they get unwieldy
2021-10-24 01:11:27	solomon	yeah i was using a custom lexer with megaparsec
2021-10-24 01:11:30	jkaye	I've had nothing but great experiences with the various Parsec libraries
2021-10-24 01:12:31	geekosaur	yeh, it sounds like you may not be using parser combinators especially well. and you can do much the same token parsing with them, by using two different parsers, one to collect characters into tokens and the other to parse the resulting token stream
2021-10-24 01:13:14	solomon	happy checkes for ambiguity, handles left recursion perfectly, and happy rules are essentially BNF grammars so you can just have a quick glance and understand hte language
2021-10-24 01:13:28	geekosaur	it's also a lot easier to have multiuple parsers, which can also simplify things considerably
2021-10-24 01:13:35	jkaye	When you've used combinators, do you define "building blocks" for yourself and compose them together? There's probably a better word for that, but I've seen that mistake before where people just make individual combinators way too large
2021-10-24 01:13:45	c_wraith	I often do left recursion just fine with parser combinators.
2021-10-24 01:13:55	←	mikoto-chan has quit (Ping timeout: 258 seconds)
2021-10-24 01:14:00	c_wraith	The key is understanding that the parsec design sucks, and not using it. :P
2021-10-24 01:14:51	←	retro_ has quit (Ping timeout: 252 seconds)
2021-10-24 01:14:53	solomon	@jkaye yes i build up my parsers compositionally when using *parsec
2021-10-24 01:14:53	lambdabot	Unknown command, try @list
2021-10-24 01:15:03	c_wraith	parsec does have flaws that require you to build your grammar around its limitations
2021-10-24 01:15:36	→	mikoto-chan has joined #haskell
2021-10-24 01:16:02	←	peterhil has quit (Ping timeout: 245 seconds)
2021-10-24 01:16:42	solomon	*shrug*, idk. Maybe i'm just a bad programmer but after using parser combinators on a bunch of projects and Happy for 48 hours, i'm probably not going back to combinators.
2021-10-24 01:16:47	→	Vajb has joined #haskell
2021-10-24 01:16:59	davean	They're not the same
2021-10-24 01:17:13	davean	They have different domains and purposes
2021-10-24 01:17:19	davean	well similar purposes
2021-10-24 01:17:23	⚡	geekosaur used yacc for a couple decades and doesn't miss it
2021-10-24 01:17:28	solomon	well, my domain of interest is writing languages
2021-10-24 01:17:40	hololeap	% :t lens id (const Identity)
2021-10-24 01:17:41	yahb	hololeap: Functor f => (a -> f b) -> a -> f (Identity b)
2021-10-24 01:18:07	hololeap	is there another name for this (replacing Identity with another constructor)
2021-10-24 01:18:23	hololeap	(I just used Identity here for illustrative purposes)
2021-10-24 01:19:00	c_wraith	monad morphism, when they're monads.
2021-10-24 01:19:25	hololeap	well, I meant in lens terms. it seems like it wouldn't need to be as powerful as a lens with id thrown in there
2021-10-24 01:20:52	←	mikoto-chan has quit (Ping timeout: 244 seconds)
2021-10-24 01:20:59	hololeap	% :t lens id (const Identity) :: Lens s (Identity b) a b
2021-10-24 01:21:00	yahb	hololeap: ; <interactive>:1:1: error:; * Couldn't match type `a1' with `s1'; Expected: (a1 -> f1 b1) -> s1 -> f1 (Identity b1); Actual: (a1 -> f1 b1) -> a1 -> f1 (Identity b1); `a1' is a rigid type variable bound by; an expression type signature:; forall s1 b1 a1. Lens s1 (Identity b1) a1 b1; at <interactive>:1:29-51; `s1' is a rigid type variable bound by; 
2021-10-24 01:21:51	c_wraith	that doesn't look very lensy
2021-10-24 01:21:54	hololeap	% :t lens id (const Identity) :: Lens a (Identity b) a b
2021-10-24 01:21:55	yahb	hololeap: Functor f => (a -> f b) -> a -> f (Identity b)
2021-10-24 01:21:58	hololeap	there it is
2021-10-24 01:22:21	→	retroid_ has joined #haskell
2021-10-24 01:22:34	c_wraith	I'm pretty sure that doesn't actually satisfy the unchecked requirements on the type of a lens
2021-10-24 01:22:54	→	mikoto-chan has joined #haskell
2021-10-24 01:22:54	→	peterhil has joined #haskell
2021-10-24 01:24:53	c_wraith	yeah, it doesn't.
2021-10-24 01:25:31	←	jstolarek has quit (Ping timeout: 244 seconds)
2021-10-24 01:25:46	c_wraith	See the "Why is it a Lens Family" section in http://comonad.com/reader/2012/mirrored-lenses/
2021-10-24 01:25:55	hololeap	hm, which way would it misbehave?
2021-10-24 01:27:10	c_wraith	In that particular case, since Identity does nothing, I'm pretty sure you can't actually find a case where it does
2021-10-24 01:27:35	←	mikoto-chan has quit (Ping timeout: 244 seconds)
2021-10-24 01:28:06	ℹ	irc: disconnected from server
2021-10-26 19:20:09	→	oxide has joined #haskell
2021-10-26 19:20:09	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-10-26 19:20:09	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-10-26 19:20:09	ℹ	Channel #haskell: 730 nicks (1 op, 0 voices, 729 normals)
2021-10-26 19:20:10	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-10-26 19:20:19	albet70	"🟢 shapr :albet70: If you find more answers, will you post them somewhere?", I think docker alpine musl is the best anwser, no need to post
2021-10-26 19:20:41	shapr	albet70: fair enough
2021-10-26 19:21:12	shapr	I'd like to have some automatic way to publish my Haskell programs to linux and mac
2021-10-26 19:21:53	←	Pickchea has quit (Quit: Leaving)
2021-10-26 19:22:26	albet70	"🟢 kritzefitz :albet70: in case you want to make distribution specific packages you might want to take a look at cabal-debian, but that only gets you far if you already have debian packages for all your dependencies.", does cabal has something like raco?
2021-10-26 19:22:47	albet70	raco is a tool for racket to distribute binary file
2021-10-26 19:23:32	→	chele_ has joined #haskell
2021-10-26 19:23:46	kritzefitz	I don't know raco well enough to know for sure, but from your description it sounds like cabal doesn't have something like that.
2021-10-26 19:23:48	←	chele has quit (Ping timeout: 260 seconds)
2021-10-26 19:24:11	shapr	What does raco do?
2021-10-26 19:24:25	shapr	does it create a static binary?
2021-10-26 19:24:49	albet70	raco would create a package which contain libraries and binary
2021-10-26 19:24:57	shapr	oh
2021-10-26 19:24:58	merijn	The real problem isn't Haskell/GHC, but the fact that glibc refuses to be statically linked sanely
2021-10-26 19:26:28	albet70	merijn, if glibc use statically linked, what is the bad for it? file size will be too big?
2021-10-26 19:26:28	dminuoso	Oh it doesnt.
2021-10-26 19:26:34	dminuoso	glibc happily statically links
2021-10-26 19:26:41	←	Stotteren has quit (Remote host closed the connection)
2021-10-26 19:26:46	dminuoso	You get just error prone and undefined behavior if you use NSS or other things..
2021-10-26 19:26:50	merijn	albet70: No, glibc is intentionally designed to behave badly/break when statically linked
2021-10-26 19:26:54	dminuoso	Yup
2021-10-26 19:27:05	→	Stotteren has joined #haskell
2021-10-26 19:27:21	dminuoso	albet70: If you statically link against glibc and you use getaddrinfo from it, you *must* also dynamically load the same glibc version.
2021-10-26 19:27:23	merijn	Because one of the core glibc maintainers is a fundamentalist who hates static linking for ideological reasons
2021-10-26 19:27:28	dminuoso	albet70: just digest that for a moment.
2021-10-26 19:27:55	dminuoso	statically linking glibc means you *must* have a dynamic variant of it of the same version around still in most cases.
2021-10-26 19:27:59	⚡	shapr cannot digest, and must regurgitate
2021-10-26 19:29:15	albet70	"merijn :Because one of the core glibc maintainers is a fundamentalist who hates static linking for ideological reasons", how Linus feel about this? support or disagree?
2021-10-26 19:29:38	merijn	albet70: Linus is not involved at all?
2021-10-26 19:29:47	dminuoso	albet70: The problem is this. The original author is largely known as an "dictator asshole" amongst many internet communities, for having extremely religious views on things. He really thinks its his place to educate people that static linking is so bad, that glibc was designed to make it as hard as possible.
2021-10-26 19:29:48	albet70	ok
2021-10-26 19:29:51	→	mc47 has joined #haskell
2021-10-26 19:29:52	shapr	oh my
2021-10-26 19:29:55	merijn	Why would he be? He deals with linux and the kernel, not GNU and distro packaging
2021-10-26 19:30:12	albet70	but this glibc is really effect lots of things in linux
2021-10-26 19:30:16	dminuoso	albet70: https://sourceware.org/bugzilla/show_bug.cgi?id=10134
2021-10-26 19:30:22	dminuoso	Take a good look at this bug report.
2021-10-26 19:30:24	dminuoso	It's humerous but true.
2021-10-26 19:30:42	←	jespada has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-10-26 19:31:08	→	jespada has joined #haskell
2021-10-26 19:31:10	→	marinelli has joined #haskell
2021-10-26 19:31:10	←	jespada has quit (Client Quit)
2021-10-26 19:31:53	janus	but why does it matter what the original author (Drepper?) thinks when he doesn't have a commit bit anymore?
2021-10-26 19:32:28	merijn	Pretty sure Drepper still maintains glibc
2021-10-26 19:34:46	albet70	the other system like BSD or OSX, what they use? glibc?
2021-10-26 19:35:16	merijn	They use their own libc
2021-10-26 19:35:20	albet70	there're two things I hated in most linux distro, systemd and glibc
2021-10-26 19:35:38	merijn	FreeBSD uses it's own libc and OSX uses a fork of that
2021-10-26 19:35:55	albet70	they can do statically linked?
2021-10-26 19:36:03	merijn	afaik
2021-10-26 19:37:54	→	rekahsoft has joined #haskell
2021-10-26 19:41:11	←	justHaunt has quit (Read error: Connection reset by peer)
2021-10-26 19:41:36	←	bitdex has quit (Remote host closed the connection)
2021-10-26 19:42:07	→	justHaunt has joined #haskell
2021-10-26 19:42:37	→	bitdex has joined #haskell
2021-10-26 19:43:11	janus	there are also linux distros that use musl
2021-10-26 19:43:23	albet70	"janus :there are also linux distros that use musl", alpine
2021-10-26 19:43:40	albet70	most living in docker
2021-10-26 19:44:12	albet70	not a real installed system on hard disk
2021-10-26 19:46:15	ℹ	yin is now known as zzz
2021-10-26 19:46:43	←	acidjnk_new3 has quit (Ping timeout: 258 seconds)
2021-10-26 19:46:58	janus	albet70: what are you using now? since you write 'hated' in past tense
2021-10-26 19:47:17	←	rekahsoft has quit (Ping timeout: 260 seconds)
2021-10-26 19:47:58	zzz	is this an interesting idea? https://www.unisonweb.org/
2021-10-26 19:48:12	janus	zzz: nope
2021-10-26 19:48:21	albet70	"🟢 janus :albet70: what are you using now? since you write 'hated' in past tense", windows
2021-10-26 19:48:33	shapr	oh my
2021-10-26 19:48:34	zzz	janus: are you familiar with it?
2021-10-26 19:49:22	janus	zzz: only superficially :P just thought i'd give a random answer to a random question, sorry.
2021-10-26 19:49:30	zzz	fair enough :p
2021-10-26 19:50:50	zzz	> Unison definitions are identified by content. Each Unison definition is some syntax tree, and by hashing this tree in a way that incorporates the hashes of all that definition's dependencies, we obtain the Unison hash which uniquely identifies that definition.
2021-10-26 19:50:51	lambdabot	 <hint>:1:89: error: parse error on input ‘,’
2021-10-26 19:50:57	←	chomwitt has quit (Ping timeout: 260 seconds)
2021-10-26 19:51:46	janus	zzz: let's discuss it in #haskell-offtopic
2021-10-26 19:52:00	zzz	janus: yeah that makes sense
2021-10-26 19:52:04	zzz	sorry about that
2021-10-26 19:52:13	←	stiell has quit (Remote host closed the connection)
2021-10-26 19:52:36	geekosaur	freebsd can do static libc. os x does dynamic everything
2021-10-26 19:52:57	→	stiell has joined #haskell
2021-10-26 19:53:06	geekosaur	you can't even get a static libSystem, iirc
2021-10-26 19:53:42	←	tim1 has left #haskell (WeeChat 3.3)
2021-10-26 19:53:47	merijn	There isn't even a library file anymore :p
2021-10-26 19:54:03	→	eggplantade has joined #haskell
2021-10-26 19:58:53	←	eggplantade has quit (Ping timeout: 264 seconds)
2021-10-26 20:00:22	→	Gurkenglas has joined #haskell
2021-10-26 20:01:49	→	jonathanx has joined #haskell
2021-10-26 20:13:38	janus	albet70: i'd like to learn about linking on windows. join me in #haskell-offtopic
2021-10-26 20:15:10	dminuoso	Does sqlite-simple have an equivalent of the In newtype wrapper, to fit inside `WHERE x IN ?`
2021-10-26 20:16:14	dminuoso	Oh hah hold on
2021-10-26 20:16:17	dminuoso	sqlite cant do this
2021-10-26 20:17:03	→	chomwitt has joined #haskell
2021-10-26 20:18:11	merijn	dminuoso: Sure you can!
2021-10-26 20:18:13	→	allbery_b has joined #haskell
2021-10-26 20:18:13	←	geekosaur has quit (Killed (NickServ (GHOST command used by allbery_b)))
2021-10-26 20:18:16	ℹ	allbery_b is now known as geekosaur
2021-10-26 20:18:28	merijn	dminuoso: foreign export a haskell predicate function and inject it into your query!
2021-10-26 20:18:45	merijn	And rewrite to "WHERE pred(x)" for an arbitrary predicate!
2021-10-26 20:19:41	→	lavaman has joined #haskell
2021-10-26 20:19:59	merijn	I haven't done it (yet), but I know enough that you can do it :p
2021-10-26 20:20:03	←	cfricke has quit (Quit: WeeChat 3.3)
2021-10-26 20:20:40	dminuoso	o.o
2021-10-26 20:21:00	dminuoso	merijn: That needs some custom ToField for that too I guess?>
2021-10-26 20:22:08	merijn	dminuoso: I don't think you can do that it that way, tbh
2021-10-26 20:22:41	merijn	dminuoso: But you can have your query calling arbitrary code in the same process, including whatever Haskell predicates you want :p
2021-10-26 20:23:03	merijn	Whether it's worth the effort depends on the size of your query and how badly you need it over stringly manipulation of your where :p
2021-10-26 20:24:09	←	lavaman has quit (Ping timeout: 260 seconds)
2021-10-26 20:24:29	←	kenran has quit (Quit: WeeChat info:version)
2021-10-26 20:24:38	←	hendursa1 has quit (Quit: hendursa1)
2021-10-26 20:25:09	→	hendursaga has joined #haskell
2021-10-26 20:25:28	→	myShoggoth has joined #haskell
2021-10-26 20:28:15	←	deni has quit (Quit: bye...)
2021-10-26 20:29:47	←	lortabac has quit (Quit: WeeChat 2.8)
2021-10-26 20:30:46	→	mikoto-chan has joined #haskell
2021-10-26 20:32:14	←	ByronJohnson has quit
2021-10-26 20:33:17	→	Psybur has joined #haskell
2021-10-26 20:36:18	←	bitdex has quit (Remote host closed the connection)
2021-10-26 20:36:32	→	justsomeguy has joined #haskell
2021-10-26 20:37:14	→	bitdex has joined #haskell
2021-10-26 20:40:48	→	ByronJohnson has joined #haskell
2021-10-26 20:43:22	→	bontaq has joined #haskell
2021-10-26 20:44:38	←	hgolden has quit (Remote host closed the connection)
2021-10-26 20:46:05	→	kayprish has joined #haskell
2021-10-26 20:50:12	←	slowtyper has quit (Ping timeout: 245 seconds)
2021-10-26 20:50:18	→	slowtype- has joined #haskell
2021-10-26 20:52:35	←	kayprish has quit (Quit: leaving)
2021-10-26 20:52:47	→	kayprish has joined #haskell
2021-10-26 20:53:36	←	zzz has left #haskell
2021-10-26 20:54:01	→	moonoid has joined #haskell
2021-10-26 20:54:59	→	jushur has joined #haskell
2021-10-26 20:55:34	→	MoC has joined #haskell
2021-10-26 20:57:17	←	chele_ has quit (Ping timeout: 260 seconds)
2021-10-26 20:57:43	→	burnsidesLlama has joined #haskell
2021-10-26 20:58:09	→	deni has joined #haskell
2021-10-26 20:58:32	moonoid	Hi, I need a two dimensional Int matrix. Is Vector (Vector Int) a good idea or should I use another another package?
2021-10-26 20:58:51	merijn	@hackage hmatrix -- ?
2021-10-26 20:58:51	lambdabot	https://hackage.haskell.org/package/hmatrix -- ?
2021-10-26 21:00:09	→	MQ-17J has joined #haskell
2021-10-26 21:00:11	→	kayprish_ has joined #haskell
2021-10-26 21:00:24	←	kayprish_ has quit (Client Quit)
2021-10-26 21:00:29	←	kayprish has quit (Quit: leaving)
2021-10-26 21:00:39	→	kayprish has joined #haskell
2021-10-26 21:02:26	moonoid	merijn: I did a bad job explaining. I'm a beginner and I'm familiar with the Vector api. Can I get away with representing an Int matrix as nested Vectors or will I soon run into trouble?
2021-10-26 21:02:47	dminuoso	moonoid: depends (tm)
2021-10-26 21:02:55	moonoid	:D
2021-10-26 21:03:08	dminuoso	It all depends on what you intend to do
2021-10-26 21:03:09	merijn	That, yes
2021-10-26 21:03:14	adamCS	moonoid: https://hackage.haskell.org/package/massiv is also pretty good.  Very much depends on what you need to do with the matrix, though.  
2021-10-26 21:03:38	dminuoso	If you're just dabbling with some excercise and you need to represent some 2 dimensional discrete space, a Vector of Vector is probably fine.
2021-10-26 21:03:50	dminuoso	If you want to do linear algebra or some kind you probably to use hmatrix
2021-10-26 21:03:51	merijn	hmatrix uses BLAS/LAPACK internally, so it'll be *much* faster for most non-trivial operations
2021-10-26 21:04:20	merijn	If you just need a simple 2D array, I'd use either "Map (Int, Int) a" or Array
2021-10-26 21:04:57	merijn	adamCS: No benchmarks comparing with hmatrix :(
2021-10-26 21:05:38	←	jumper149 has quit (Quit: WeeChat 3.2)
2021-10-26 21:06:48	moonoid	For now I don't care about performance. I will give Map (Int,Int) a try.
2021-10-26 21:07:00	adamCS	merijn: Yeah.  I assume hmatrix would be faster for all the things where BLAS/LAPACK are in the critical path.  But if you are doing all the low-level manipulation yourself, it's less clear.  Benchmarks would be good.
2021-10-26 21:12:42	→	Null_A has joined #haskell
2021-10-26 21:13:23	monochrom	I have benchmarks comparing hmatrix with hmatrix. It says they perform the same. #identitymatrix >:)
2021-10-26 21:13:41	ℹ	Square is now known as Sqaure
2021-10-26 21:15:30	xerox	moonoid: there's also Data.Array from the array package (and some variations on it)
2021-10-26 21:15:55	xerox	dimensionality is achieved through Data.Ix
2021-10-26 21:16:05	←	ghoulguy has quit (Quit: Quit)
2021-10-26 21:16:27	←	xff0x has quit (Ping timeout: 245 seconds)
2021-10-26 21:16:51	→	lavaman has joined #haskell
2021-10-26 21:17:01	→	xff0x has joined #haskell
2021-10-26 21:17:14	→	glguy has joined #haskell
2021-10-26 21:17:26	ℹ	glguy is now known as ghoulguy
2021-10-26 21:19:35	→	max22- has joined #haskell
2021-10-26 21:21:26	→	eggplantade has joined #haskell
2021-10-26 21:26:17	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-10-26 21:26:47	←	xff0x has quit (Quit: xff0x)
2021-10-26 21:27:12	→	MQ-17J has joined #haskell
2021-10-26 21:29:58	→	xff0x has joined #haskell
2021-10-26 21:31:49	←	MQ-17J has quit (Ping timeout: 260 seconds)
2021-10-26 21:33:44	→	econo has joined #haskell
2021-10-26 21:34:28	→	MQ-17J has joined #haskell
2021-10-26 21:38:49	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-10-26 21:39:24	→	MQ-17J has joined #haskell
2021-10-26 21:40:33	→	kupi has joined #haskell
2021-10-26 21:41:09	←	myShoggoth has quit (Ping timeout: 260 seconds)
2021-10-26 21:45:09	→	tzh has joined #haskell
2021-10-26 21:47:17	←	jakalx has left #haskell
2021-10-26 21:48:09	←	Psybur has quit (Ping timeout: 260 seconds)
2021-10-26 21:50:31	←	merijn has quit (Ping timeout: 260 seconds)
2021-10-26 21:52:08	→	merijn has joined #haskell
2021-10-26 21:53:05	←	echoSMILE has quit (Quit: Client closed)
2021-10-26 21:57:19	←	merijn has quit (Ping timeout: 260 seconds)
2021-10-26 21:58:18	→	merijn has joined #haskell
2021-10-26 22:03:12	←	Vajb has quit (Read error: Connection reset by peer)
2021-10-26 22:03:23	→	Vajb has joined #haskell
2021-10-26 22:03:51	←	merijn has quit (Ping timeout: 260 seconds)
2021-10-26 22:04:43	→	merijn has joined #haskell
2021-10-26 22:06:05	→	myShoggoth has joined #haskell
2021-10-26 22:09:55	←	merijn has quit (Ping timeout: 260 seconds)
2021-10-26 22:10:35	→	vicfred has joined #haskell
2021-10-26 22:10:50	→	merijn has joined #haskell
2021-10-26 22:11:10	→	lbseale has joined #haskell
2021-10-26 22:14:16	←	slowtype- has quit (Ping timeout: 265 seconds)
2021-10-26 22:14:28	ℹ	irc: disconnected from server
2021-10-27 15:53:50	→	oxide has joined #haskell
2021-10-27 15:53:50	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-10-27 15:53:50	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-10-27 15:53:50	ℹ	Channel #haskell: 725 nicks (1 op, 0 voices, 724 normals)
2021-10-27 15:53:50	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-10-27 15:55:48	→	mei has joined #haskell
2021-10-27 15:57:17	←	tomboy64 has quit (Ping timeout: 252 seconds)
2021-10-27 15:58:48	→	tomboy64 has joined #haskell
2021-10-27 16:13:22	→	dsrt^ has joined #haskell
2021-10-27 16:15:04	←	CiaoSen has quit (Ping timeout: 260 seconds)
2021-10-27 16:17:11	←	drownbes has quit (Quit: leaving)
2021-10-27 16:23:58	→	__monty__ has joined #haskell
2021-10-27 16:27:44	→	eggplantade has joined #haskell
2021-10-27 16:29:32	←	lemonsnicks has quit (Ping timeout: 260 seconds)
2021-10-27 16:30:46	→	jespada has joined #haskell
2021-10-27 16:31:51	←	eggplantade has quit (Ping timeout: 245 seconds)
2021-10-27 16:32:32	←	xff0x has quit (Ping timeout: 258 seconds)
2021-10-27 16:33:31	→	xff0x has joined #haskell
2021-10-27 16:37:03	→	merijn has joined #haskell
2021-10-27 16:41:32	→	lemonsnicks has joined #haskell
2021-10-27 16:41:59	←	Midjak has quit (*.net *.split)
2021-10-27 16:41:59	←	jumper149 has quit (*.net *.split)
2021-10-27 16:41:59	←	Lord_of_Life has quit (*.net *.split)
2021-10-27 16:41:59	←	Vajb has quit (*.net *.split)
2021-10-27 16:41:59	←	deni has quit (*.net *.split)
2021-10-27 16:41:59	←	pbrisbin has quit (*.net *.split)
2021-10-27 16:41:59	←	mjs2600 has quit (*.net *.split)
2021-10-27 16:41:59	←	mcglk_ has quit (*.net *.split)
2021-10-27 16:41:59	←	pie_ has quit (*.net *.split)
2021-10-27 16:41:59	←	Unode has quit (*.net *.split)
2021-10-27 16:41:59	←	nshepperd2 has quit (*.net *.split)
2021-10-27 16:41:59	←	choucavalier has quit (*.net *.split)
2021-10-27 16:41:59	←	ptrcmd has quit (*.net *.split)
2021-10-27 16:41:59	←	micro has quit (*.net *.split)
2021-10-27 16:41:59	←	tomjaguarpaw has quit (*.net *.split)
2021-10-27 16:41:59	←	platz has quit (*.net *.split)
2021-10-27 16:41:59	←	Partmedia has quit (*.net *.split)
2021-10-27 16:41:59	←	ozzymcduff has quit (*.net *.split)
2021-10-27 16:41:59	←	drdo has quit (*.net *.split)
2021-10-27 16:41:59	←	emergence has quit (*.net *.split)
2021-10-27 16:41:59	←	sshine has quit (*.net *.split)
2021-10-27 16:41:59	←	fluxit has quit (*.net *.split)
2021-10-27 16:41:59	←	tv has quit (*.net *.split)
2021-10-27 16:41:59	←	sm2n has quit (*.net *.split)
2021-10-27 16:41:59	←	nitrix has quit (*.net *.split)
2021-10-27 16:41:59	←	CannabisIndica has quit (*.net *.split)
2021-10-27 16:41:59	←	erisco has quit (*.net *.split)
2021-10-27 16:41:59	←	ellie has quit (*.net *.split)
2021-10-27 16:41:59	←	cls has quit (*.net *.split)
2021-10-27 16:41:59	←	Hecate has quit (*.net *.split)
2021-10-27 16:41:59	←	gnyeki has quit (*.net *.split)
2021-10-27 16:41:59	←	hughjfchen has quit (*.net *.split)
2021-10-27 16:41:59	←	hueso has quit (*.net *.split)
2021-10-27 16:41:59	←	hubvu has quit (*.net *.split)
2021-10-27 16:41:59	←	whez has quit (*.net *.split)
2021-10-27 16:41:59	←	TMA has quit (*.net *.split)
2021-10-27 16:41:59	←	_xor has quit (*.net *.split)
2021-10-27 16:41:59	←	ski has quit (*.net *.split)
2021-10-27 16:41:59	←	elvishjerricco has quit (*.net *.split)
2021-10-27 16:41:59	←	iteratee has quit (*.net *.split)
2021-10-27 16:41:59	←	astra` has quit (*.net *.split)
2021-10-27 16:41:59	←	etrepum has quit (*.net *.split)
2021-10-27 16:41:59	←	niko has quit (*.net *.split)
2021-10-27 16:41:59	←	sm[i]_ has quit (*.net *.split)
2021-10-27 16:41:59	←	davl has quit (*.net *.split)
2021-10-27 16:41:59	←	Megant has quit (*.net *.split)
2021-10-27 16:41:59	←	cjay has quit (*.net *.split)
2021-10-27 16:41:59	←	p3n has quit (*.net *.split)
2021-10-27 16:41:59	←	a1paca has quit (*.net *.split)
2021-10-27 16:41:59	←	dminuoso has quit (*.net *.split)
2021-10-27 16:41:59	←	tput has quit (*.net *.split)
2021-10-27 16:41:59	←	tlax has quit (*.net *.split)
2021-10-27 16:41:59	←	aweinstock has quit (*.net *.split)
2021-10-27 16:45:07	→	Midjak has joined #haskell
2021-10-27 16:45:07	→	jumper149 has joined #haskell
2021-10-27 16:45:07	→	Lord_of_Life has joined #haskell
2021-10-27 16:45:07	→	Vajb has joined #haskell
2021-10-27 16:45:07	→	deni has joined #haskell
2021-10-27 16:45:07	→	pbrisbin has joined #haskell
2021-10-27 16:45:07	→	mjs2600 has joined #haskell
2021-10-27 16:45:07	→	mcglk_ has joined #haskell
2021-10-27 16:45:07	→	pie_ has joined #haskell
2021-10-27 16:45:07	→	Unode has joined #haskell
2021-10-27 16:45:07	→	nshepperd2 has joined #haskell
2021-10-27 16:45:07	→	choucavalier has joined #haskell
2021-10-27 16:45:07	→	micro has joined #haskell
2021-10-27 16:45:07	→	ptrcmd has joined #haskell
2021-10-27 16:45:07	→	tomjaguarpaw has joined #haskell
2021-10-27 16:45:07	→	platz has joined #haskell
2021-10-27 16:45:07	→	Partmedia has joined #haskell
2021-10-27 16:45:07	→	ozzymcduff has joined #haskell
2021-10-27 16:45:07	→	drdo has joined #haskell
2021-10-27 16:45:07	→	emergence has joined #haskell
2021-10-27 16:45:07	→	sshine has joined #haskell
2021-10-27 16:45:07	→	fluxit has joined #haskell
2021-10-27 16:45:07	→	tv has joined #haskell
2021-10-27 16:45:07	→	sm2n has joined #haskell
2021-10-27 16:45:07	→	nitrix has joined #haskell
2021-10-27 16:45:07	→	CannabisIndica has joined #haskell
2021-10-27 16:45:07	→	erisco has joined #haskell
2021-10-27 16:45:07	→	ellie has joined #haskell
2021-10-27 16:45:07	→	cls has joined #haskell
2021-10-27 16:45:07	→	Hecate has joined #haskell
2021-10-27 16:45:07	→	gnyeki has joined #haskell
2021-10-27 16:45:07	→	hughjfchen has joined #haskell
2021-10-27 16:45:07	→	hueso has joined #haskell
2021-10-27 16:45:07	→	hubvu has joined #haskell
2021-10-27 16:45:07	→	whez has joined #haskell
2021-10-27 16:45:07	→	TMA has joined #haskell
2021-10-27 16:45:07	→	_xor has joined #haskell
2021-10-27 16:45:07	→	ski has joined #haskell
2021-10-27 16:45:07	→	elvishjerricco has joined #haskell
2021-10-27 16:45:07	→	iteratee has joined #haskell
2021-10-27 16:45:07	→	astra` has joined #haskell
2021-10-27 16:45:07	→	etrepum has joined #haskell
2021-10-27 16:45:07	→	niko has joined #haskell
2021-10-27 16:45:07	→	sm[i]_ has joined #haskell
2021-10-27 16:45:07	→	davl has joined #haskell
2021-10-27 16:45:07	→	Megant has joined #haskell
2021-10-27 16:45:07	→	cjay has joined #haskell
2021-10-27 16:45:07	→	p3n has joined #haskell
2021-10-27 16:45:08	→	a1paca has joined #haskell
2021-10-27 16:45:08	→	dminuoso has joined #haskell
2021-10-27 16:45:08	→	tput has joined #haskell
2021-10-27 16:45:08	→	tlax has joined #haskell
2021-10-27 16:45:08	→	aweinstock has joined #haskell
2021-10-27 16:45:52	→	trcc has joined #haskell
2021-10-27 16:47:05	←	emanuele6 has quit (Ping timeout: 244 seconds)
2021-10-27 16:48:14	←	achapman has quit (Quit: WeeChat 1.9.1)
2021-10-27 17:00:45	→	lavaman has joined #haskell
2021-10-27 17:05:28	←	lavaman has quit (Ping timeout: 260 seconds)
2021-10-27 17:07:38	→	ksqsf has joined #haskell
2021-10-27 17:07:41	→	wroathe has joined #haskell
2021-10-27 17:07:41	←	wroathe has quit (Changing host)
2021-10-27 17:07:41	→	wroathe has joined #haskell
2021-10-27 17:10:39	←	connrs has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-10-27 17:11:40	→	connrs has joined #haskell
2021-10-27 17:12:01	←	wroathe has quit (Ping timeout: 258 seconds)
2021-10-27 17:12:03	←	merijn has quit (Ping timeout: 264 seconds)
2021-10-27 17:12:35	→	phma_ has joined #haskell
2021-10-27 17:13:26	→	themc47 has joined #haskell
2021-10-27 17:13:33	→	Gestotterd has joined #haskell
2021-10-27 17:13:39	→	tcard_ has joined #haskell
2021-10-27 17:13:42	→	maxime_ has joined #haskell
2021-10-27 17:13:45	←	geekosaur has quit (Killed (NickServ (GHOST command used by allbery_b)))
2021-10-27 17:13:45	→	allbery_b has joined #haskell
2021-10-27 17:13:48	ℹ	allbery_b is now known as geekosaur
2021-10-27 17:14:08	→	ncopa0 has joined #haskell
2021-10-27 17:14:29	→	ub has joined #haskell
2021-10-27 17:14:34	←	bitdex has quit (Quit: = "")
2021-10-27 17:14:50	→	gregberns___ has joined #haskell
2021-10-27 17:14:50	→	parseval_ has joined #haskell
2021-10-27 17:14:51	→	b20n_ has joined #haskell
2021-10-27 17:14:52	→	alanz_ has joined #haskell
2021-10-27 17:14:52	→	philpax__ has joined #haskell
2021-10-27 17:14:52	→	dsal_ has joined #haskell
2021-10-27 17:14:56	→	christiaanb_ has joined #haskell
2021-10-27 17:14:56	→	brettgilio7 has joined #haskell
2021-10-27 17:14:57	→	kaychaks___ has joined #haskell
2021-10-27 17:15:00	→	dwt__ has joined #haskell
2021-10-27 17:15:01	→	taeaad_ has joined #haskell
2021-10-27 17:15:04	→	sndr has joined #haskell
2021-10-27 17:15:13	→	Andrew_ has joined #haskell
2021-10-27 17:15:18	→	pieguy128_ has joined #haskell
2021-10-27 17:15:23	→	neightchan has joined #haskell
2021-10-27 17:15:23	→	int-e_ has joined #haskell
2021-10-27 17:15:30	←	int-e has quit (Killed (NickServ (GHOST command used by int-e_)))
2021-10-27 17:15:38	ℹ	int-e_ is now known as int-e
2021-10-27 17:16:39	→	obfusk_ has joined #haskell
2021-10-27 17:16:42	→	fjmorazan_ has joined #haskell
2021-10-27 17:16:57	→	nschoe_ has joined #haskell
2021-10-27 17:17:12	→	mjrosenb_ has joined #haskell
2021-10-27 17:17:27	→	byorgey_ has joined #haskell
2021-10-27 17:17:35	→	ppseafield[m] has joined #haskell
2021-10-27 17:17:41	→	gdd1 has joined #haskell
2021-10-27 17:17:43	→	AWizzArd_ has joined #haskell
2021-10-27 17:17:48	→	kjak_ has joined #haskell
2021-10-27 17:17:54	→	kritzefitz_ has joined #haskell
2021-10-27 17:17:57	→	hrdl_ has joined #haskell
2021-10-27 17:17:59	→	finstern1s has joined #haskell
2021-10-27 17:17:59	→	ringo__ has joined #haskell
2021-10-27 17:18:05	→	eco_ has joined #haskell
2021-10-27 17:18:51	→	kmein_ has joined #haskell
2021-10-27 17:18:53	→	robbert has joined #haskell
2021-10-27 17:19:20	←	robbert has quit (Client Quit)
2021-10-27 17:19:31	←	byorgey has quit (Killed (NickServ (GHOST command used by byorgey_)))
2021-10-27 17:19:35	→	robbert has joined #haskell
2021-10-27 17:19:37	ℹ	byorgey_ is now known as byorgey
2021-10-27 17:20:41	→	orhan89_ has joined #haskell
2021-10-27 17:20:50	→	acowley has joined #haskell
2021-10-27 17:20:52	→	stefan-__ has joined #haskell
2021-10-27 17:21:06	←	robbert-vdh has quit (Killed (silver.libera.chat (Nickname regained by services)))
2021-10-27 17:21:06	ℹ	robbert is now known as robbert-vdh
2021-10-27 17:21:51	←	kritzefitz has quit (Killed (silver.libera.chat (Nickname regained by services)))
2021-10-27 17:21:52	ℹ	kritzefitz_ is now known as kritzefitz
2021-10-27 17:22:07	←	ubert has quit (*.net *.split)
2021-10-27 17:22:07	←	michalz has quit (*.net *.split)
2021-10-27 17:22:07	←	mc47 has quit (*.net *.split)
2021-10-27 17:22:07	←	nschoe has quit (*.net *.split)
2021-10-27 17:22:07	←	max22- has quit (*.net *.split)
2021-10-27 17:22:07	←	takuan has quit (*.net *.split)
2021-10-27 17:22:07	←	phma has quit (*.net *.split)
2021-10-27 17:22:07	←	TheCoffeMaker has quit (*.net *.split)
2021-10-27 17:22:07	←	tcard has quit (*.net *.split)
2021-10-27 17:22:07	←	juhp has quit (*.net *.split)
2021-10-27 17:22:07	←	gdd has quit (*.net *.split)
2021-10-27 17:22:07	←	Stotteren has quit (*.net *.split)
2021-10-27 17:22:07	←	Ranhir has quit (*.net *.split)
2021-10-27 17:22:07	←	fjmorazan has quit (*.net *.split)
2021-10-27 17:22:07	←	dwt_ has quit (*.net *.split)
2021-10-27 17:22:07	←	stefan-_ has quit (*.net *.split)
2021-10-27 17:22:07	←	mjrosenb has quit (*.net *.split)
2021-10-27 17:22:07	←	natechan has quit (*.net *.split)
2021-10-27 17:22:07	←	brettgilio has quit (*.net *.split)
2021-10-27 17:22:07	←	synthmeat has quit (*.net *.split)
2021-10-27 17:22:07	←	superbil has quit (*.net *.split)
2021-10-27 17:22:07	←	acowley_ has quit (*.net *.split)
2021-10-27 17:22:07	←	tolt has quit (*.net *.split)
2021-10-27 17:22:07	←	eco has quit (*.net *.split)
2021-10-27 17:22:07	←	ncopa has quit (*.net *.split)
2021-10-27 17:22:07	←	APic has quit (*.net *.split)
2021-10-27 17:22:07	←	AndrewYu has quit (*.net *.split)
2021-10-27 17:22:07	←	hiredman has quit (*.net *.split)
2021-10-27 17:22:07	←	sander has quit (*.net *.split)
2021-10-27 17:22:07	←	kjak has quit (*.net *.split)
2021-10-27 17:22:07	←	tromp has quit (*.net *.split)
2021-10-27 17:22:07	←	obfusk has quit (*.net *.split)
2021-10-27 17:22:07	←	Xnuk has quit (*.net *.split)
2021-10-27 17:22:08	←	kmein has quit (*.net *.split)
2021-10-27 17:22:08	←	hrdl has quit (*.net *.split)
2021-10-27 17:22:08	←	ringo_ has quit (*.net *.split)
2021-10-27 17:22:08	←	pieguy128 has quit (*.net *.split)
2021-10-27 17:22:08	←	AWizzArd has quit (*.net *.split)
2021-10-27 17:22:08	←	finsternis has quit (*.net *.split)
2021-10-27 17:22:08	←	kaychaks__ has quit (*.net *.split)
2021-10-27 17:22:08	←	gregberns__ has quit (*.net *.split)
2021-10-27 17:22:08	←	parseval has quit (*.net *.split)
2021-10-27 17:22:08	←	christiaanb has quit (*.net *.split)
2021-10-27 17:22:08	←	dsal has quit (*.net *.split)
2021-10-27 17:22:08	←	b20n has quit (*.net *.split)
2021-10-27 17:22:08	←	taeaad has quit (*.net *.split)
2021-10-27 17:22:08	←	philpax_ has quit (*.net *.split)
2021-10-27 17:22:08	←	alanz has quit (*.net *.split)
2021-10-27 17:22:08	←	typedfern_ has quit (*.net *.split)
2021-10-27 17:22:08	←	jjhoo has quit (*.net *.split)
2021-10-27 17:22:08	←	dmwit has quit (*.net *.split)
2021-10-27 17:22:08	←	hpc has quit (*.net *.split)
2021-10-27 17:22:08	←	orhan89 has quit (*.net *.split)
2021-10-27 17:22:09	ℹ	brettgilio7 is now known as brettgilio
2021-10-27 17:22:09	ℹ	sndr is now known as sander
2021-10-27 17:22:09	ℹ	ncopa0 is now known as ncopa
2021-10-27 17:22:09	ℹ	gregberns___ is now known as gregberns__
2021-10-27 17:22:09	ℹ	parseval_ is now known as parseval
2021-10-27 17:22:09	ℹ	ub is now known as ubert
2021-10-27 17:22:09	ℹ	dsal_ is now known as dsal
2021-10-27 17:22:09	ℹ	b20n_ is now known as b20n
2021-10-27 17:22:09	ℹ	alanz_ is now known as alanz
2021-10-27 17:22:09	ℹ	kaychaks___ is now known as kaychaks__
2021-10-27 17:22:09	ℹ	christiaanb_ is now known as christiaanb
2021-10-27 17:22:11	ℹ	philpax__ is now known as philpax_
2021-10-27 17:22:12	→	TheCoffeMaker_ has joined #haskell
2021-10-27 17:22:44	→	dmwit has joined #haskell
2021-10-27 17:22:49	→	jjhoo has joined #haskell
2021-10-27 17:22:53	→	hpc has joined #haskell
2021-10-27 17:22:54	→	tolt has joined #haskell
2021-10-27 17:22:59	→	hiredman has joined #haskell
2021-10-27 17:23:04	→	takuan has joined #haskell
2021-10-27 17:23:21	ℹ	kritzefitz is now known as kritzefitz_
2021-10-27 17:23:33	ℹ	kritzefitz_ is now known as kritzefitz[m]
2021-10-27 17:23:42	ℹ	kritzefitz[m] is now known as kritzefitz
2021-10-27 17:24:07	→	Xnuk has joined #haskell
2021-10-27 17:27:52	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-10-27 17:27:58	→	MQ-17J has joined #haskell
2021-10-27 17:28:18	→	APic has joined #haskell
2021-10-27 17:28:35	→	superbil has joined #haskell
2021-10-27 17:28:45	→	synthmeat has joined #haskell
2021-10-27 17:29:05	→	Ranhir has joined #haskell
2021-10-27 17:29:17	→	typedfern_ has joined #haskell
2021-10-27 17:30:00	←	maxime_ has quit (Ping timeout: 260 seconds)
2021-10-27 17:30:28	→	ubert1 has joined #haskell
2021-10-27 17:30:40	←	jstolarek has quit (Ping timeout: 260 seconds)
2021-10-27 17:31:01	→	burnsidesLlama has joined #haskell
2021-10-27 17:33:14	→	mmhat has joined #haskell
2021-10-27 17:33:16	→	[itchyjunk] has joined #haskell
2021-10-27 17:35:45	→	dschrempf has joined #haskell
2021-10-27 17:36:20	←	fendor_ has quit (Remote host closed the connection)
2021-10-27 17:37:35	←	Vajb has quit (Read error: Connection reset by peer)
2021-10-27 17:41:07	→	shriekingnoise has joined #haskell
2021-10-27 17:50:04	→	michalz has joined #haskell
2021-10-27 17:51:53	→	Vajb has joined #haskell
2021-10-27 17:53:00	→	Farzad has joined #haskell
2021-10-27 17:53:17	→	Pickchea has joined #haskell
2021-10-27 17:53:50	→	guniberas has joined #haskell
2021-10-27 18:10:00	→	machinedgod has joined #haskell
2021-10-27 18:15:58	→	bongobrown has joined #haskell
2021-10-27 18:19:17	ℹ	kmein_ is now known as kmein
2021-10-27 18:25:38	←	ubert1 has quit (Ping timeout: 268 seconds)
2021-10-27 18:26:09	←	NieDzejkob has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-10-27 18:26:12	←	trcc has quit (Ping timeout: 260 seconds)
2021-10-27 18:26:47	←	bongobrown has quit (Quit: Leaving)
2021-10-27 18:26:55	←	kritzefitz has quit (Changing host)
2021-10-27 18:26:55	→	kritzefitz has joined #haskell
2021-10-27 18:29:32	→	eggplantade has joined #haskell
2021-10-27 18:33:05	→	CiaoSen has joined #haskell
2021-10-27 18:33:56	←	eggplantade has quit (Ping timeout: 245 seconds)
2021-10-27 18:38:50	←	Pickchea has quit (Ping timeout: 260 seconds)
2021-10-27 18:42:32	→	fendor has joined #haskell
2021-10-27 18:51:14	→	trcc has joined #haskell
2021-10-27 18:58:47	ℹ	irc: disconnected from server
2021-10-27 18:59:05	→	oxide has joined #haskell
2021-10-27 18:59:05	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-10-27 18:59:05	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-10-27 18:59:05	ℹ	Channel #haskell: 730 nicks (1 op, 0 voices, 729 normals)
2021-10-27 18:59:06	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-10-27 18:59:15	←	dschrempf has quit (Ping timeout: 260 seconds)
2021-10-27 19:06:13	→	maxime_ has joined #haskell
2021-10-27 19:07:48	→	merijn has joined #haskell
2021-10-27 19:12:08	→	yrlnry has joined #haskell
2021-10-27 19:13:25	→	tromp has joined #haskell
2021-10-27 19:19:07	→	Henson has joined #haskell
2021-10-27 19:19:34	→	Pickchea has joined #haskell
2021-10-27 19:25:50	←	agoraphobic has quit (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
2021-10-27 19:27:34	→	agoraphobic has joined #haskell
2021-10-27 19:29:09	←	MQ-17J has quit (Ping timeout: 268 seconds)
2021-10-27 19:29:44	ℹ	Andrew_ is now known as AndrewYu
2021-10-27 19:30:38	→	lavaman has joined #haskell
2021-10-27 19:37:04	→	ub has joined #haskell
2021-10-27 19:37:25	→	vpan has joined #haskell
2021-10-27 19:37:51	←	ubert has quit (Ping timeout: 264 seconds)
2021-10-27 19:37:52	ℹ	ub is now known as ubert
2021-10-27 19:39:23	ℹ	phma_ is now known as phma
2021-10-27 19:39:46	←	burnsidesLlama has quit (Remote host closed the connection)
2021-10-27 19:39:47	←	Pickchea has quit (Quit: Leaving)
2021-10-27 19:39:57	→	burnsidesLlama has joined #haskell
2021-10-27 19:40:06	←	burnsidesLlama has quit (Remote host closed the connection)
2021-10-27 19:40:14	←	mjs2600 has quit (Ping timeout: 260 seconds)
2021-10-27 19:45:32	←	merijn has quit (Ping timeout: 260 seconds)
2021-10-27 19:46:11	←	Henson has quit (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
2021-10-27 19:49:58	→	waleee has joined #haskell
2021-10-27 19:53:55	→	Inst_ has joined #haskell
2021-10-27 19:55:20	→	Inst__ has joined #haskell
2021-10-27 19:55:21	←	Inst_ has quit (Read error: Network is unreachable)
2021-10-27 19:57:40	←	Inst has quit (Ping timeout: 264 seconds)
2021-10-27 20:06:08	→	emanuele6 has joined #haskell
2021-10-27 20:06:08	←	emanuele6 has quit (Changing host)
2021-10-27 20:06:08	→	emanuele6 has joined #haskell
2021-10-27 20:11:46	→	burnsidesLlama has joined #haskell
2021-10-27 20:12:07	←	ksqsf has quit (Remote host closed the connection)
2021-10-27 20:12:33	←	mei has quit (Read error: Connection reset by peer)
2021-10-27 20:14:16	→	pottsy has joined #haskell
2021-10-27 20:14:54	→	merijn has joined #haskell
2021-10-27 20:14:56	→	bontaq has joined #haskell
2021-10-27 20:16:33	←	burnsidesLlama has quit (Ping timeout: 264 seconds)
2021-10-27 20:19:08	←	chele has quit (Ping timeout: 260 seconds)
2021-10-27 20:20:27	←	merijn has quit (Ping timeout: 264 seconds)
2021-10-27 20:23:30	←	trcc has quit (Remote host closed the connection)
2021-10-27 20:24:02	→	trcc has joined #haskell
2021-10-27 20:24:06	←	Farzad has quit (Quit: Leaving)
2021-10-27 20:26:36	→	myShoggoth has joined #haskell
2021-10-27 20:28:30	←	trcc has quit (Ping timeout: 260 seconds)
2021-10-27 20:29:59	←	pottsy has quit (Quit: Leaving)
2021-10-27 20:30:10	→	pottsy has joined #haskell
2021-10-27 20:30:30	→	Sgeo has joined #haskell
2021-10-27 20:30:34	→	dschrempf has joined #haskell
2021-10-27 20:30:58	→	eggplantade has joined #haskell
2021-10-27 20:31:51	←	waleee has quit (Ping timeout: 245 seconds)
2021-10-27 20:32:17	→	fef has joined #haskell
2021-10-27 20:33:34	→	waleee has joined #haskell
2021-10-27 20:34:04	←	lavaman has quit (Ping timeout: 260 seconds)
2021-10-27 20:35:11	←	eggplantade has quit (Ping timeout: 245 seconds)
2021-10-27 20:35:33	→	eggplantade has joined #haskell
2021-10-27 20:45:36	→	bitmapper has joined #haskell
2021-10-27 20:46:38	→	MQ-17J has joined #haskell
2021-10-27 20:51:13	→	slowButPresent has joined #haskell
2021-10-27 20:53:12	→	pavonia has joined #haskell
2021-10-27 20:53:25	←	dschrempf has quit (Ping timeout: 268 seconds)
2021-10-27 20:53:42	←	waleee has quit (Remote host closed the connection)
2021-10-27 20:54:07	→	waleee has joined #haskell
2021-10-27 20:55:17	→	merijn has joined #haskell
2021-10-27 21:00:59	→	chele has joined #haskell
2021-10-27 21:04:18	←	jumper149 has quit (Quit: WeeChat 3.2)
2021-10-27 21:05:08	→	_ht has joined #haskell
2021-10-27 21:08:04	←	lortabac has quit (Quit: WeeChat 2.8)
2021-10-27 21:08:07	→	Guest91 has joined #haskell
2021-10-27 21:08:45	←	CiaoSen has quit (Ping timeout: 264 seconds)
2021-10-27 21:11:07	←	pottsy has quit (Quit: Leaving)
2021-10-27 21:12:46	→	tzh has joined #haskell
2021-10-27 21:16:11	ℹ	themc47 is now known as mc47
2021-10-27 21:16:55	→	Guest73 has joined #haskell
2021-10-27 21:18:44	Guest73	Having some trouble running wai server (I think the problem is there, I'm trying to get a servant API up).  To reproduce:
2021-10-27 21:19:18	Guest73	stack new my-project servant; cd my-project; stack build; stack exec my-project-exe
2021-10-27 21:19:22	Guest73	freezes there.  help?
2021-10-27 21:19:27	←	echoSMILE has quit (Quit: Client closed)
2021-10-27 21:20:40	c_wraith	how is "freezes" distinct from "works correctly"?
2021-10-27 21:20:59	c_wraith	It is supposed to block there
2021-10-27 21:21:20	Guest73	shouldn't it report that it's running on {port} or something?  if I browse to localhost:8080 I get a blank page
2021-10-27 21:21:57	c_wraith	a blank page or an error page?
2021-10-27 21:22:12	c_wraith	because if there wasn't a server running on localhost at port 8080, you'd get an error page
2021-10-27 21:22:56	Guest73	blank when i use firefox.  404 when i use chromium
2021-10-27 21:22:56	c_wraith	that is, your browser would tell you it can't connect
2021-10-27 21:23:05	c_wraith	404 means there is a server running
2021-10-27 21:23:43	c_wraith	not running would be "can't find the server at localhost:8080"
2021-10-27 21:24:05	Guest73	ok, pebkac for sure
2021-10-27 21:24:07	c_wraith	now, it's possible something is still broken.
2021-10-27 21:24:21	←	evertedsphere has quit (Quit: Connection closed for inactivity)
2021-10-27 21:24:25	c_wraith	It could be the case that something *else* is running on localhost:8080
2021-10-27 21:24:41	Guest73	no i'm good, was just confused, thanks.  localhost:8080/users returns expected results
2021-10-27 21:24:47	c_wraith	ah, good
2021-10-27 21:25:00	→	bongobrown has joined #haskell
2021-10-27 21:26:32	←	eggplantade has quit (Remote host closed the connection)
2021-10-27 21:26:51	←	cfricke has quit (Quit: WeeChat 3.3)
2021-10-27 21:27:09	→	shapr has joined #haskell
2021-10-27 21:29:32	←	bongobrown has quit (Remote host closed the connection)
2021-10-27 21:29:42	←	werneta_ has quit (Remote host closed the connection)
2021-10-27 21:29:45	←	merijn has quit (Ping timeout: 260 seconds)
2021-10-27 21:30:10	→	lbseale has joined #haskell
2021-10-27 21:30:47	←	[itchyjunk] has quit (Read error: Connection reset by peer)
2021-10-27 21:31:07	←	Guest73 has quit (Quit: Client closed)
2021-10-27 21:31:51	←	chele has quit (Ping timeout: 245 seconds)
2021-10-27 21:32:23	→	burnsidesLlama has joined #haskell
2021-10-27 21:35:26	→	dschrempf has joined #haskell
2021-10-27 21:35:39	→	thyriaen has joined #haskell
2021-10-27 21:40:31	dsal	Is it possible to compose FromRow instances in PostgreSQL-simple?  I might try it and see what happens.
2021-10-27 21:41:01	←	nschoe_ has quit (Ping timeout: 245 seconds)
2021-10-27 21:46:36	→	hippoid has joined #haskell
2021-10-27 21:47:22	←	vpan has quit (Quit: Leaving.)
2021-10-27 21:48:12	←	Guest91 has quit (Quit: Client closed)
2021-10-27 21:48:46	hippoid	:t (>>=) (Just (Just 1)) id
2021-10-27 21:48:47	lambdabot	Num b => Maybe b
2021-10-27 21:48:57	hippoid	:t (>>=)
2021-10-27 21:48:58	lambdabot	Monad m => m a -> (a -> m b) -> m b
2021-10-27 21:49:43	hippoid	Why am I able to pass `id`, when (>>=) requires a (a-> m b) for the 2nd arg, and `id` is (a->a)?
2021-10-27 21:50:08	hippoid	I thought I'd need a (a -> m b) for the 2nd arg of >>=
2021-10-27 21:50:43	c_wraith	hippoid: a can be m b
2021-10-27 21:50:53	c_wraith	hippoid: then id :: m b -> m b
2021-10-27 21:51:25	hippoid	ah right, something about universal quantification?
2021-10-27 21:51:40	c_wraith	yes.  and unification in general
2021-10-27 21:52:25	→	justsomeguy has joined #haskell
2021-10-27 21:52:41	c_wraith	When you look at the types of id and (>>=), the a in each type is a different type variable.  that's the universal quantification part
2021-10-27 21:53:02	c_wraith	So when you unify the types, those variables are different
2021-10-27 21:53:35	c_wraith	So you can say "the a from id is the same as the m b from from (>>=)" to unify those types
2021-10-27 21:54:01	→	mjs2600 has joined #haskell
2021-10-27 21:54:10	hippoid	I try to learn more unification, but I don't find any resources where the unification constraints are solved in something other than writing out a full program to solve it. I'd rather solve the unification constraints with paper at first, to get a better intuition about it.
2021-10-27 21:54:25	hippoid	Do you recommend any resources that are like that?
2021-10-27 21:55:25	yrlnry	Does lambdabot have a help function?  I tried `:h` `:help` :?` but got no response.
2021-10-27 21:56:07	geekosaur	not much of one
2021-10-27 21:56:10	geekosaur	@help
2021-10-27 21:56:10	lambdabot	help <command>. Ask for help for <command>. Try 'list' for all commands
2021-10-27 21:56:14	geekosaur	@list
2021-10-27 21:56:14	lambdabot	What module?  Try @listmodules for some ideas.
2021-10-27 21:56:42	yrlnry	Thanks.
2021-10-27 22:00:05	←	dsrt^ has quit (Ping timeout: 260 seconds)
2021-10-27 22:01:10	geekosaur	this only does a subset of the commands plus one I added back when I was running one, but it's also the only reference I'm aware of for the admin commands. http://users.ece.cmu.edu/~allbery/lambdabot/COMMANDS.more
2021-10-27 22:01:46	←	fef has quit (Remote host closed the connection)
2021-10-27 22:02:21	→	fef has joined #haskell
2021-10-27 22:05:10	→	dsrt^ has joined #haskell
2021-10-27 22:05:27	←	waleee has quit (Ping timeout: 264 seconds)
2021-10-27 22:09:52	→	eggplantade has joined #haskell
2021-10-27 22:10:25	→	vicfred has joined #haskell
2021-10-27 22:11:56	→	anotherbruce[m] has joined #haskell
2021-10-27 22:13:41	→	econo has joined #haskell
2021-10-27 22:17:12	→	echoSMILE has joined #haskell
2021-10-27 22:17:45	←	dschrempf has quit (Ping timeout: 264 seconds)
2021-10-27 22:20:59	←	guniberas has quit (Ping timeout: 268 seconds)
2021-10-27 22:22:11	→	Tuplanolla has joined #haskell
2021-10-27 22:29:16	←	maxime_ has quit (Remote host closed the connection)
2021-10-27 22:30:17	→	max22- has joined #haskell
2021-10-27 22:32:28	→	aegon has joined #haskell
2021-10-27 22:34:50	→	jstolarek has joined #haskell
2021-10-27 22:35:26	←	mbuf has quit (Quit: Leaving)
2021-10-27 22:54:41	→	Null_A has joined #haskell
2021-10-27 23:00:00	←	statusbot has quit (Remote host closed the connection)
2021-10-27 23:00:14	→	statusbot has joined #haskell
2021-10-27 23:09:00	←	eggplantade has quit (Remote host closed the connection)
2021-10-27 23:14:09	→	kupi has joined #haskell
2021-10-27 23:16:27	→	eggplantade has joined #haskell
2021-10-27 23:17:31	→	waleee has joined #haskell
2021-10-27 23:17:40	←	jstolarek has quit (Ping timeout: 260 seconds)
2021-10-27 23:22:53	←	justsomeguy has quit (Quit: WeeChat 3.2)
2021-10-27 23:25:48	→	merijn has joined #haskell
2021-10-27 23:29:04	←	ystael has quit (Read error: Connection reset by peer)
2021-10-27 23:30:52	→	echoSMILE7 has joined #haskell
2021-10-27 23:31:24	ℹ	echoSMILE7 is now known as echosmile7000
2021-10-27 23:31:24	←	fef has quit (Quit: Leaving)
2021-10-27 23:31:53	→	ystael has joined #haskell
2021-10-27 23:32:20	←	echoSMILE has quit (Ping timeout: 256 seconds)
2021-10-27 23:32:20	←	hippoid has quit (Quit: Lost terminal)
2021-10-27 23:33:58	←	max22- has quit (Ping timeout: 268 seconds)
2021-10-27 23:35:38	→	zincy_ has joined #haskell
2021-10-27 23:36:51	←	justache has quit (Quit: The Lounge - https://thelounge.chat)
2021-10-27 23:36:59	→	zincy_89 has joined #haskell
2021-10-27 23:37:42	→	justache has joined #haskell
2021-10-27 23:41:36	←	ystael has quit (Read error: Connection reset by peer)
2021-10-27 23:44:27	←	echosmile7000 has quit (Quit: Client closed)
2021-10-27 23:45:20	←	vicfred has quit (Quit: Leaving)
2021-10-27 23:51:16	→	vicfred has joined #haskell
2021-10-27 23:54:55	→	alx741 has joined #haskell
2021-10-27 23:55:37	zincy_	ski: I am back, sorry it took a while, I think your explanation makes sense thanks!
2021-10-27 23:56:03	→	max22- has joined #haskell
2021-10-27 23:56:04	→	echoSMILE has joined #haskell
2021-10-27 23:57:52	←	max22- has quit (Remote host closed the connection)
2021-10-28 00:00:21	←	merijn has quit (Ping timeout: 264 seconds)
2021-10-28 00:00:48	←	td_ has quit (Ping timeout: 260 seconds)
2021-10-28 00:02:26	→	td_ has joined #haskell
2021-10-28 00:03:48	→	max22- has joined #haskell
2021-10-28 00:04:25	→	unit73e has joined #haskell
2021-10-28 00:06:20	unit73e	looks like HLS doesn't like Paths_* with GHC 9.0.1 for some reason
2021-10-28 00:06:37	←	dyeplexer has quit (Remote host closed the connection)
2021-10-28 00:06:38	unit73e	I'm using the latest releases
2021-10-28 00:07:46	unit73e	I'm going to complete the text example and share here to see if it's just me. It will take a while though.
2021-10-28 00:09:07	unit73e	also hello
2021-10-28 00:10:39	shapr	hi unit73e !
2021-10-28 00:11:05	shapr	unit73e: you may get a response from the devs on #haskell-language-server
2021-10-28 00:11:14	shapr	high latency, but probably at some point :-)
2021-10-28 00:11:22	shapr	or you could report a bug on the github repo
2021-10-28 00:11:46	unit73e	shapr, thanks. I'll do that. My bet is that it's not very compatible with 9.x yet
2021-10-28 00:12:24	unit73e	or I'm being a noob lol
2021-10-28 00:13:27	→	boxscape_ has joined #haskell
2021-10-28 00:16:03	boxscape_	I don't need this for anything at the moment but I'm curious - is there a combinator you could replace <*> with in `gcd <*> minimum <$> maximum` that would evaluate minimum and maximum in parallel?
2021-10-28 00:16:05	boxscape_	 (in this particular case you could implement a function that computes the minimum and maximum in one pass, but other cases might not allow this)
2021-10-28 00:17:02	boxscape_	(I suppose maybe you would have to use something other than <$> as well)
2021-10-28 00:18:27	awpr	this looks like the Applicative instance of https://hackage.haskell.org/package/foldl-1.4.12/docs/Control-Foldl.html
2021-10-28 00:18:47	boxscape_	Ah, nice, thank you
2021-10-28 00:19:03	awpr	generally "I want the Applicative operators to mean parallel/concurrent/simultaneous operation" means "I want something that's intentionally not also a Monad"
2021-10-28 00:19:12	boxscape_	right, that makes sense
2021-10-28 00:19:19	awpr	unless you're Haxl, which just ignores that law
2021-10-28 00:19:25	awpr	(last I heard)
2021-10-28 00:25:45	←	eggplantade has quit (Remote host closed the connection)
2021-10-28 00:26:16	remexre	2 unrelated questions
2021-10-28 00:26:34	remexre	- are lawful monad instances unique?
2021-10-28 00:26:44	→	mei has joined #haskell
2021-10-28 00:27:20	→	Guest30 has joined #haskell
2021-10-28 00:27:23	←	Guest30 has quit (Client Quit)
2021-10-28 00:27:27	monochrom	No.
2021-10-28 00:27:52	→	Guest21 has joined #haskell
2021-10-28 00:29:37	→	Inst_ has joined #haskell
2021-10-28 00:29:37	remexre	is there a noteworthy counterexample?
2021-10-28 00:30:50	remexre	second question, what logging library do people recommend for an application that's mostly ResourceT (ReaderT r IO), so I'm only really logging in IO. Ideally it'd have structured logging (via Generic?), at least three log levels, and be configurable
2021-10-28 00:31:39	monochrom	I think that something like tardis shows that S->(a,S) can be a monad in two ways. (And then tardis goes on to combine them into one monster monad.)
2021-10-28 00:32:25	monochrom	OTOH I know a lengthy proof of why, e.g., "data P a = MkP a a" is a monad in a unique way.
2021-10-28 00:32:47	monochrom	So, uniqueness happens for some types but not some others.
2021-10-28 00:32:51	remexre	what's the way that isn't the normal state monad? for s->(a, s)?
2021-10-28 00:32:56	remexre	or is that only for concrete S
2021-10-28 00:33:02	maerwald	remexre: roll your own logger
2021-10-28 00:33:08	maerwald	it takes only a couple of lines
2021-10-28 00:33:19	remexre	maerwald: fair, ok
2021-10-28 00:33:31	←	Inst__ has quit (Ping timeout: 245 seconds)
2021-10-28 00:33:39	remexre	oh wait tardis is a package not a username lol
2021-10-28 00:33:46	remexre	oh neat
2021-10-28 00:33:53	maerwald	even if you shove it into ReaderT or use LabelOptics, it's still only a couple of lines
2021-10-28 00:34:24	maerwald	logging is, imo, application specific
2021-10-28 00:34:43	maerwald	no point fighting libraries
2021-10-28 00:34:52	remexre	LabelOptics == the Optics.Label module?
2021-10-28 00:35:26	maerwald	yeah
2021-10-28 00:36:20	maerwald	it's a neat way to separate your application state elegantly
2021-10-28 00:36:25	remexre	huh, should I be using optics-core, etc; if I'm using microlens now?
2021-10-28 00:36:39	remexre	yeah not having to namespace my record fields would be very nice :)
2021-10-28 00:36:56	←	kuribas has quit (Quit: ERC (IRC client for Emacs 26.3))
2021-10-28 00:36:58	monochrom	Oh yeah actually logging, or simply the writer monad, may show two ways of being a monad.
2021-10-28 00:37:03	remexre	been waiting for ghc2021 for the record changes, but if this works, might as well use it
2021-10-28 00:37:19	remexre	monochrom: oh, take-rightmost versus join-left-and-right?
2021-10-28 00:37:28	remexre	or is that unlawful
2021-10-28 00:37:29	maerwald	yeah, never used Write for logging... I print to screen or write to log files
2021-10-28 00:37:43	boxscape_	I did find a couple of the features in RIOs logging library quite nice, like displaying the line/column of the logging call (via a HasCallStack constraint) when you're in verbose mode
2021-10-28 00:37:51	monochrom	join right and left
2021-10-28 00:38:25	boxscape_	(admittedly still fairly easy to write but I wouldn't have thought on it without using a logging library)
2021-10-28 00:38:29	boxscape_	s/on/of
2021-10-28 00:38:51	monochrom	W a w1 >>= k  =  case unW (k a) of W b w2 -> W b (w2 <> w1)  -- so, the other order
2021-10-28 00:39:14	remexre	ah yeah
2021-10-28 00:39:31	→	ss4 has joined #haskell
2021-10-28 00:39:32	maerwald	I forgot... doesn't Writer leak memory?
2021-10-28 00:39:35	remexre	yeah I'll probably do HasCallStack too; never used rio, but from the readme it sounds potentially nice
2021-10-28 00:39:49	remexre	yeah, I think the standard advice is to always use State to impl Writer
2021-10-28 00:40:41	monochrom	Some ways of using Writer leaks memory. But some other ways don't.  I'm a scientist and when I see both I attribute to the difference, not the commonality.
2021-10-28 00:41:06	monochrom	But programmers are pastors not scientists.
2021-10-28 00:41:27	zincy_	Programmers should be scientists
2021-10-28 00:41:44	maerwald	There's no such separation of programmer vs scientist.
2021-10-28 00:41:52	monochrom	"pastors" means people who write weekly blogs on their religious beliefs.
2021-10-28 00:42:10	zincy_	I feel like at the heart of every emotional opinion in software there is a deep truth which can be explained rationally
2021-10-28 00:42:26	geekosaur	not always
2021-10-28 00:42:30	monochrom	zincy_: Politicians should be honest, rational, and moral people, too.  Bwahahahaha.
2021-10-28 00:42:41	geekosaur	programming has its share of flat-earthers
2021-10-28 00:42:50	←	wootehfoot has quit (Ping timeout: 260 seconds)
2021-10-28 00:42:51	zincy_	hahaha
2021-10-28 00:42:54	maerwald	The thing is... programming isn't just about technology. It's also about art.
2021-10-28 00:43:57	zincy_	What I mean to say isnt that every programmer opinion is valid but its either logically falsifiable or nonsense and can be just discarded
2021-10-28 00:44:09	zincy_	I guess I just negated myself oops
2021-10-28 00:44:11	maerwald	Well, it isn't that easy.
2021-10-28 00:44:22	maerwald	Because once *art* is involved, opinion becomes more complicated.
2021-10-28 00:44:31	unit73e	imo programming itself doesn't really make you a scientist, engineer or flat-earther imo, it depends on what you do
2021-10-28 00:44:40	unit73e	I like doing simple programs correctly
2021-10-28 00:44:45	zincy_	I believe a lot more of the *art* is logic/science than people realise
2021-10-28 00:44:52	unit73e	some like adding features and making things pretty
2021-10-28 00:44:57	zincy_	Thats what I am trying to get across
2021-10-28 00:44:58	maerwald	zincy_: I don't understand that sentence
2021-10-28 00:45:37	maerwald	unit73e: sounds like you *believe* in the unix principle. It has mostly been lost today.
2021-10-28 00:46:27	maerwald	The latest addition to the anti-unix fleet has been nix. Now apparently, you can't do anything without it (like... installing GHCJS).
2021-10-28 00:46:32	→	eggplantade has joined #haskell
2021-10-28 00:46:41	←	boxscape_ has quit (Quit: Connection closed)
2021-10-28 00:46:42	zincy_	A lot of seemingly subjective statements programmers make can be ruled out as wrong even though they *feel* subjective
2021-10-28 00:46:47	unit73e	maerwald, yeah I guess it's becoming rare but I see it resurecting often. One example, IDEs are being replaced with modular editors. Not perfect but better than nothing.
2021-10-28 00:47:09	maerwald	well, I'm not sure how I feel about LSP
2021-10-28 00:47:23	geekosaur	so they're reinventing emacs (probably poorly)?
2021-10-28 00:47:28	unit73e	yup
2021-10-28 00:47:38	unit73e	that's what vscode and friends are
2021-10-28 00:47:43	unit73e	and atom
2021-10-28 00:48:01	maerwald	I mean... now we have client-server architecture everywhere and my editor consumes large chunks of json that gets then dumped into my home folder and that I have to look at pretty often, because the server crashes or my client forgot what to do
2021-10-28 00:48:20	unit73e	I use neovim but emacs is nice
2021-10-28 00:48:26	geekosaur	atom I can surely say does so poorly; I waited a few versions for it to stabilize, installed it, ran it, leaving it open overnight nearly killed my system
2021-10-28 00:48:29	←	Feuermagier has quit (Remote host closed the connection)
2021-10-28 00:48:33	geekosaur	uninstalled it and didn't look back
2021-10-28 00:48:41	→	Feuermagier has joined #haskell
2021-10-28 00:48:48	geekosaur	I may try vscode at some point but am betting it's not much better
2021-10-28 00:49:00	unit73e	vscode is better but it's kind of weird in some ways
2021-10-28 00:49:22	maerwald	vscode was bearable with the vim plugin, but it had a lot of shortcomings and bugs
2021-10-28 00:50:19	←	Guest21 has quit (Quit: Client closed)
2021-10-28 00:52:10	maerwald	it feels more like a social media platform to me... there's constantly popups and stuff trying to get my attention
2021-10-28 00:52:36	unit73e	that's one thing I don't like about vscode
2021-10-28 00:52:40	geekosaur	this is making me want to stay with emacs
2021-10-28 00:52:54	unit73e	vscode feels like IDE light
2021-10-28 00:53:03	unit73e	too much distractions
2021-10-28 00:53:08	←	zincy_89 has quit (Quit: Client closed)
2021-10-28 00:53:08	←	zincy_ has quit (Remote host closed the connection)
2021-10-28 00:53:19	maerwald	those give you dopamine kicks and increase screen time
2021-10-28 00:53:33	unit73e	but it's the best GUI only editor I've used so far
2021-10-28 00:53:42	→	trcc has joined #haskell
2021-10-28 00:53:43	unit73e	that's something
2021-10-28 00:53:46	maerwald	not a coincidence that MS spearheaded all this popup nonsense
2021-10-28 00:53:52	→	dschrempf has joined #haskell
2021-10-28 00:54:12	←	trcc has quit (Remote host closed the connection)
2021-10-28 00:54:30	unit73e	I feel like it was some Microsoft Joe that was sick and tired of Visual Studio that made vscode
2021-10-28 00:54:46	maerwald	https://github.com/microsoft/vscode/issues/14840
2021-10-28 00:55:11	maerwald	"I am CONSTANTLY hitting escape to get rid of them so I can see my code."
2021-10-28 00:55:12	maerwald	xD
2021-10-28 00:55:46	monochrom	s/Joe/Bob/  # right? RIGHT?  >:)
2021-10-28 00:56:09	unit73e	lol Bob is better yes
2021-10-28 00:56:16	monochrom	or Paperclip
2021-10-28 00:56:50	→	zincy_ has joined #haskell
2021-10-28 00:57:09	maerwald	but vscode has a nice plugin where you can save your settings into a github gist
2021-10-28 01:00:27	→	trcc has joined #haskell
2021-10-28 01:01:50	sm	vscode is great (even as a lifelong emacser)
2021-10-28 01:01:56	sm	the power to weight ratio is high!
2021-10-28 01:06:01	jneira[m]	i missed the total power to customize emacs last time i had to fight with the vscode api
2021-10-28 01:07:51	maerwald	if I was new to programming today, I totally would pick vscode
2021-10-28 01:07:54	←	zincy_ has quit (Remote host closed the connection)
2021-10-28 01:08:09	→	zincy_ has joined #haskell
2021-10-28 01:08:17	maerwald	the only reason I stuck to vim was that I had a phase where I enjoyed wasting days and days configuring it
2021-10-28 01:09:04	geekosaur	I did most of my emacs configuration in the mid-80s :þ
2021-10-28 01:09:41	←	_ht has quit (Remote host closed the connection)
2021-10-28 01:09:42	geekosaur	I think the only change I've had to make since then is (require 'cl) instead of the old common lisp compatibility stuff
2021-10-28 01:10:04	geekosaur	well, and adding haskell-mode :)
2021-10-28 01:12:33	zincy_	mid-80s wow
2021-10-28 01:13:25	maerwald	there was great music back then
2021-10-28 01:13:33	←	dschrempf has quit (Ping timeout: 264 seconds)
2021-10-28 01:13:38	maerwald	and software was still fast
2021-10-28 01:14:09	geekosaur	actually I have that backwards, common lisp compat is now standard and I had to remove (require 'cl)
2021-10-28 01:14:38	monochrom	https://www.gnu.org/fun/jokes/ed-msg.en.html
2021-10-28 01:15:01	ℹ	AWizzArd_ is now known as AWizzArd
2021-10-28 01:15:13	monochrom	Note how emacs took up 6e37 bytes.
2021-10-28 01:16:17	←	danso has quit (Quit: WeeChat 3.2)
2021-10-28 01:16:42	zincy_	Im sure I read somewhere that Bryan O Sullivan still uses Ed
2021-10-28 01:16:49	monochrom	(Note how the whole world could not possibly have that much disk space back then :) )
2021-10-28 01:17:38	sm	I got legimitately use ed for work yesterday
2021-10-28 01:18:10	sm	I needed to insert the contents of a file after a certain line in another file
2021-10-28 01:18:42	⚡	geekosaur used to script ed in buildscripts. (didn't get to use fancy build systems, they wouldn't even try to build on the pmaxen)
2021-10-28 01:18:43	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-10-28 01:18:48	←	pbrisbin has quit (Quit: WeeChat 3.3)
2021-10-28 01:19:04	→	pbrisbin has joined #haskell
2021-10-28 01:19:08	sm	correction, I needed to insert a bash heredoc after a certain line
2021-10-28 01:19:27	monochrom	Nice, maybe I should teach ed in my unix course too.
2021-10-28 01:19:28	→	MQ-17J has joined #haskell
2021-10-28 01:19:49	zincy_	you're teaching a course just on unix?
2021-10-28 01:19:55	←	pbrisbin has quit (Client Quit)
2021-10-28 01:20:48	monochrom	Don't worry, it would be pitched as another program you could use in a shell script, for inserting a file into the middle of another file, like you said.
2021-10-28 01:21:32	monochrom	I teach a c-and-unix course in summers.
2021-10-28 01:22:21	→	JimL has joined #haskell
2021-10-28 01:22:41	zincy_	oh cool
2021-10-28 01:22:47	←	JimL has quit (Client Quit)
2021-10-28 01:23:06	→	JimL has joined #haskell
2021-10-28 01:25:26	maerwald	"how to configure systemd"
2021-10-28 01:26:20	monochrom	I think something smug like "you don't configure it, you program it" is in order :)
2021-10-28 01:26:26	←	thyriaen has quit (Remote host closed the connection)
2021-10-28 01:26:36	→	bongobrown has joined #haskell
2021-10-28 01:27:10	monochrom	Aaannnddd.... let's have a sequel to the "what's interpreter vs compiler" discussion....
2021-10-28 01:27:16	→	lavaman has joined #haskell
2021-10-28 01:27:22	monochrom	What's configuration vs programming? >:)
2021-10-28 01:28:19	trcc	I have a function that in success cases returns a stablePointer, but in failure cases I have to return a nullPtr. However, stablePtr and nullPtr do not seem to match very well, i.e. expected type: IO (StablePtr (IORef (FMIT.FMIComponent a)))        Actual type: IO (Ptr a0) 
2021-10-28 01:28:25	trcc	am I being to explicit about my type or?
2021-10-28 01:28:32	maerwald	configuration is what I don't get paid for
2021-10-28 01:29:18	geekosaur	https://github.com/CleverRaven/Cataclysm-DDA/blob/master/data/json/portal_storm_effect_on_condition.json
2021-10-28 01:30:51	monochrom	ooohhh... using the amount of {}s to define "programming" :)
2021-10-28 01:32:15	maerwald	"software engineer" is just a marketing term 
2021-10-28 01:32:27	→	dschrempf has joined #haskell
2021-10-28 01:32:29	maerwald	it looks better on my CV
2021-10-28 01:33:02	maerwald	what if I wrote "I put libraries together, of which I don't understand 95%"
2021-10-28 01:33:26	monochrom	trcc: So perhaps you should always return Ptr. In the success case, use castStablePtrToPtr.
2021-10-28 01:33:38	jneira[m]	put the program in the configuration and bang, money again
2021-10-28 01:33:38	sm	software technician
2021-10-28 01:36:47	←	ubert has quit (Quit: ubert)
2021-10-28 01:36:50	→	juhp has joined #haskell
2021-10-28 01:37:06	→	ubert has joined #haskell
2021-10-28 01:38:47	trcc	monochrom: I am vorried about Ptr because it shall not be garbage collected, therefore StablePtr
2021-10-28 01:39:20	ℹ	irc: disconnected from server
2021-10-29 17:21:01	→	oxide has joined #haskell
2021-10-29 17:21:01	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-10-29 17:21:01	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-10-29 17:21:01	ℹ	Channel #haskell: 724 nicks (1 op, 0 voices, 723 normals)
2021-10-29 17:21:02	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-10-29 17:22:43	hpc	:P
2021-10-29 17:29:01	→	raehik has joined #haskell
2021-10-29 17:29:10	←	max22- has quit (Ping timeout: 264 seconds)
2021-10-29 17:29:15	←	JimL has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2021-10-29 17:29:34	→	JimL has joined #haskell
2021-10-29 17:30:07	←	JimL has quit (Client Quit)
2021-10-29 17:30:25	→	JimL has joined #haskell
2021-10-29 17:34:35	→	guniberas has joined #haskell
2021-10-29 17:36:14	→	bongobrown has joined #haskell
2021-10-29 17:49:40	←	geekosaur has quit (Quit: Leaving)
2021-10-29 17:50:52	→	geekosaur has joined #haskell
2021-10-29 17:54:22	←	peterhil has quit (Ping timeout: 264 seconds)
2021-10-29 17:57:20	→	slowButPresent has joined #haskell
2021-10-29 18:01:03	→	cfricke has joined #haskell
2021-10-29 18:01:08	←	zincy_ has quit (Remote host closed the connection)
2021-10-29 18:01:44	←	bitdex has quit (Quit: = "")
2021-10-29 18:05:45	←	img has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-10-29 18:07:08	→	img has joined #haskell
2021-10-29 18:08:37	→	CiaoSen has joined #haskell
2021-10-29 18:12:25	←	dsrt^ has quit (Remote host closed the connection)
2021-10-29 18:14:21	→	peterhil has joined #haskell
2021-10-29 18:26:22	←	Vajb has quit (Read error: Connection reset by peer)
2021-10-29 18:26:36	→	Vajb has joined #haskell
2021-10-29 18:26:48	→	lavaman has joined #haskell
2021-10-29 18:28:18	←	Vajb has quit (Read error: Connection reset by peer)
2021-10-29 18:28:40	→	Vajb has joined #haskell
2021-10-29 18:31:36	←	lavaman has quit (Ping timeout: 260 seconds)
2021-10-29 18:35:28	←	peterhil has quit (Ping timeout: 264 seconds)
2021-10-29 18:36:38	maerwald	I can't coerce if the target data constructor is not in scope?
2021-10-29 18:37:07	merijn	maerwald: You mean newtype constructor, presumably? And correct
2021-10-29 18:37:16	maerwald	yes
2021-10-29 18:37:20	→	peterhil has joined #haskell
2021-10-29 18:37:46	merijn	Can't coerce without visible constructor (to allow abstract datatypes that can't be coerced)
2021-10-29 18:38:02	maerwald	is there a hack to make it work?
2021-10-29 18:38:08	merijn	unsafeCoerce? :p
2021-10-29 18:38:46	←	hpc has quit (Ping timeout: 260 seconds)
2021-10-29 18:40:34	→	hpc has joined #haskell
2021-10-29 18:40:43	→	kn07_ has joined #haskell
2021-10-29 18:41:48	maerwald	well, that was easy
2021-10-29 18:42:03	maerwald	packages not exposing internal modules are annoying
2021-10-29 18:44:23	←	azimut has quit (Ping timeout: 276 seconds)
2021-10-29 18:45:14	←	[itchyjunk] has quit (Remote host closed the connection)
2021-10-29 18:45:21	→	Gurkenglas has joined #haskell
2021-10-29 18:45:41	→	[itchyjunk] has joined #haskell
2021-10-29 18:47:34	Tisoxin	There aren't any laws for the Alternative type class, are there?
2021-10-29 18:48:00	→	azimut has joined #haskell
2021-10-29 18:49:08	←	CiaoSen has quit (Quit: CiaoSen)
2021-10-29 18:49:55	→	yrlnry has joined #haskell
2021-10-29 18:52:50	←	hendursa1 has quit (Ping timeout: 276 seconds)
2021-10-29 18:53:11	Tisoxin	nvm
2021-10-29 18:54:38	→	hendursa1 has joined #haskell
2021-10-29 18:57:21	←	jpds has quit (Remote host closed the connection)
2021-10-29 18:58:00	→	jpds has joined #haskell
2021-10-29 19:06:02	←	jumper149 has quit (Quit: WeeChat 3.2)
2021-10-29 19:06:58	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-10-29 19:08:10	→	shriekingnoise has joined #haskell
2021-10-29 19:08:11	→	MQ-17J has joined #haskell
2021-10-29 19:08:24	←	amazigh has left #haskell (WeeChat 2.8)
2021-10-29 19:08:58	→	fendor has joined #haskell
2021-10-29 19:09:31	lortabac	Tisoxin: that's a good question, I would say it should have the same laws as Monoid, but perhaps different laws are also possible and no agreement has been reached
2021-10-29 19:09:52	←	wonko has quit (Ping timeout: 246 seconds)
2021-10-29 19:10:41	lortabac	it would be interesting to read the discussions that led to the absence of laws in the documentation
2021-10-29 19:11:57	lortabac	maybe, given the superclass constraint, the Applicative laws are enough?
2021-10-29 19:13:20	merijn	Alternative laws are associativity + identity
2021-10-29 19:13:23	merijn	So same as monoid
2021-10-29 19:13:32	merijn	That part is uncontroversial, afaik
2021-10-29 19:13:43	merijn	The controversy is the relation between Alternative/MonadPlus
2021-10-29 19:13:49	maerwald	anyone tried GHC under wine?
2021-10-29 19:14:09	lortabac	merijn: but why aren't they mentioned in the documentation?
2021-10-29 19:14:10	maerwald	I'm getting tired of coding inside a windows VM
2021-10-29 19:15:09	merijn	lortabac: They are? "A monoid on applicative functors." and empty says "The identity of <|>" and <|> says "An associative binary operation"
2021-10-29 19:15:19	←	gehmehgeh has quit (Remote host closed the connection)
2021-10-29 19:15:48	merijn	lortabac: The real controversy is mzero/mplus
2021-10-29 19:16:04	→	gehmehgeh has joined #haskell
2021-10-29 19:16:14	merijn	lortabac: Specifically the docs say: "v >> mzero = mzero" but does that mean the effects of 'v' happened or not?
2021-10-29 19:16:35	lortabac	merijn: right, I was looking for an explicit list of laws as the other classes
2021-10-29 19:17:05	merijn	lortabac: Yeah, I recall that existing in the past (but maybe I imagined it?), should be easy for someone to add that, though
2021-10-29 19:18:12	←	Kaiepi has quit (Remote host closed the connection)
2021-10-29 19:18:57	←	merijn has quit (Quit: restart)
2021-10-29 19:20:12	geekosaur	might check the Typeclassopedia
2021-10-29 19:20:42	geekosaur	although if it's there then someone should really add it to the class docs
2021-10-29 19:21:28	→	merijn has joined #haskell
2021-10-29 19:22:32	lortabac	I'm reading the Typeclassopedia, it explains the problem well
2021-10-29 19:26:10	←	peterhil has quit (Ping timeout: 264 seconds)
2021-10-29 19:28:21	←	ubert has quit (Ping timeout: 260 seconds)
2021-10-29 19:30:14	→	peterhil has joined #haskell
2021-10-29 19:30:40	←	dhouthoo has quit (Quit: WeeChat 3.3)
2021-10-29 19:33:40	←	MQ-17J has quit (Ping timeout: 260 seconds)
2021-10-29 19:37:30	→	MQ-17J has joined #haskell
2021-10-29 19:39:13	←	lortabac has quit (Quit: WeeChat 2.8)
2021-10-29 19:41:57	→	acidjnk_new has joined #haskell
2021-10-29 19:42:48	→	shapr has joined #haskell
2021-10-29 19:47:09	→	eggplantade has joined #haskell
2021-10-29 19:51:27	←	eggplantade has quit (Ping timeout: 245 seconds)
2021-10-29 19:52:40	→	faultline has joined #haskell
2021-10-29 19:54:12	←	cfricke has quit (Quit: WeeChat 3.3)
2021-10-29 19:54:57	Tisoxin	<merijn> "lortabac: Specifically the..." <- i stumpled upon this controvery due to megaparsecs ParsecT: https://hackage.haskell.org/package/megaparsec-9.2.0/docs/Text-Megaparsec.html#t:ParsecT
2021-10-29 19:57:01	merijn	Well, it's not a law in the docs, because people can't agree on it :p
2021-10-29 19:57:11	←	merijn has quit (Quit: relog)
2021-10-29 19:57:37	Tisoxin	yeah
2021-10-29 20:00:28	→	zer0bitz has joined #haskell
2021-10-29 20:02:23	→	merijn has joined #haskell
2021-10-29 20:06:34	adamCS	maerwald: Thanks again for all the help yesterday!  Using the ByteString functions as a Streamly unfold ends up 3 times faster than Text.hGetline.  I can see from all your fine tuned inline pragmas that there's some subtlety to inlining well for streamly.  Any place you would go to read/learn about that? I'm onto to optimizing another bit that I would like to fuse as nicely as possible...
2021-10-29 20:07:38	maerwald	adamCS: https://github.com/composewell/streamly/blob/master/docs/optimizing.md
2021-10-29 20:08:34	maerwald	what do you mean with "ByteString functions as Streamly unfold"? Did you use streamly-bytestring with the elemIndex?
2021-10-29 20:09:01	adamCS	No.  Just used your function to feed Streamly.Unfold.unfoldr
2021-10-29 20:09:04	→	Sgeo has joined #haskell
2021-10-29 20:09:05	adamCS	more or less
2021-10-29 20:09:37	maerwald	https://hackage.haskell.org/package/streamly-0.8.0/docs/Streamly-Prelude.html#v:unfoldr
2021-10-29 20:09:40	maerwald	that way?
2021-10-29 20:10:21	maerwald	I still feel it's kinda a hack
2021-10-29 20:10:32	maerwald	Because we're relying on lazy bytestring
2021-10-29 20:10:41	adamCS	https://gist.github.com/adamConnerSax/f115bb26a15e597d1199d42af2645568
2021-10-29 20:11:22	adamCS	Sure.  I'm just trying to make a thing faster though, so it's a win.  10 times faster than Pipes using Pipes.Text and feeding Pipes via that same function didn't speed that up much.  Which is confusing.
2021-10-29 20:11:31	maerwald	yeah, but we're not using streamly to read the file now, which is sad
2021-10-29 20:12:13	maerwald	although we could: https://hackage.haskell.org/package/streamly-bytestring-0.1.3/docs/Streamly-External-ByteString-Lazy.html
2021-10-29 20:12:24	←	peterhil has quit (Ping timeout: 260 seconds)
2021-10-29 20:12:29	merijn	adamCS: I mean, bytestring being faster than Text is kinda obvious, though? You save a lot of effort if you don't bother decoding the data
2021-10-29 20:12:39	maerwald	merijn: not necessarily
2021-10-29 20:12:40	←	Vajb has quit (Read error: Connection reset by peer)
2021-10-29 20:12:50	maerwald	the reason it's faster is only because we use `elemIndex` and nothing else
2021-10-29 20:12:50	merijn	maerwald: Not necessarily what?
2021-10-29 20:12:56	maerwald	which uses memchr
2021-10-29 20:13:01	adamCS	merijn: But I do decode it, after it's broken into lines as ByteString
2021-10-29 20:13:04	maerwald	some other bytestring functions don't
2021-10-29 20:13:28	→	Vajb has joined #haskell
2021-10-29 20:13:31	maerwald	in fact, most bytestring functions have their own hot loop with pointer aritmetic
2021-10-29 20:13:36	maerwald	which is much slower than memchr
2021-10-29 20:14:14	maerwald	abusing elemIndex is also how chris made the fast xml parser: https://chrisdone.com/posts/fast-haskell-c-parsing-xml/
2021-10-29 20:14:27	maerwald	which is faster than most C implementations even
2021-10-29 20:14:42	maerwald	now... if we could trick streamly into using elemIndex in our parser
2021-10-29 20:15:02	maerwald	that would be really cool... because then we have the speed of the xeno approach, but with an API that doesn't suck
2021-10-29 20:15:29	maerwald	(internal API, but still... did you look at the xeno code? ugh.)
2021-10-29 20:17:02	maerwald	but I'm susprised that a very simple char-by-char Fold in streamly is faster than attoparsec
2021-10-29 20:17:11	→	surgeon[m] has joined #haskell
2021-10-29 20:17:19	→	max22- has joined #haskell
2021-10-29 20:17:32	maerwald	but it's true this feels more like experimentation than a stable API
2021-10-29 20:18:21	adamCS	Yeah.  I'm going to be sad if Unfold disappears.  Is to be replaced by "Producer" or something else?  Just the move from 0.7 to 0.8 was sorta painful.  My own fault for using all sorts of "Internal" modules.
2021-10-29 20:19:01	→	peterhil has joined #haskell
2021-10-29 20:19:02	maerwald	they don't have funding for streamly... this is something HF should address imo
2021-10-29 20:19:11	←	peterhil has quit (Read error: Connection reset by peer)
2021-10-29 20:19:12	maerwald	it needs a lot of work
2021-10-29 20:19:34	→	peterhil has joined #haskell
2021-10-29 20:20:38	→	myShoggoth has joined #haskell
2021-10-29 20:20:48	adamCS	And I find the performance good but mysterious.  I worked for a bit yesterday to take a thing I do a lot: load from csv to Text lines, turn each text line into a Vinyl record, transform the record into a different record, possibly filtering, so (Record rs -> Maybe (Record rs')) and then load that into Frames in-core AoS representation. 
2021-10-29 20:21:38	adamCS	Each step is streamly, unfold to Text, scan to process headers and then tokenize and convert the lines, map to do the transformation and then a fold into the AoS structure.
2021-10-29 20:21:46	←	kn07_ has quit (Quit: Leaving)
2021-10-29 20:22:13	adamCS	But the version that uses separate functions is faster.  Which is inexplicable to me unless I have an inlining issue. Which I probably do.
2021-10-29 20:22:30	←	vpan has quit (Quit: Leaving.)
2021-10-29 20:22:53	→	bitmapper has joined #haskell
2021-10-29 20:28:26	←	justsomeguy has quit (Quit: WeeChat 3.2)
2021-10-29 20:29:49	→	mc47 has joined #haskell
2021-10-29 20:35:15	maerwald	adamCS: I still think there's a problem that needs to be solved in streamly. Namely chunked parsing... because you can only say "backtrack an entire element", but you can't say "drop the element, but then prepend this to the input of the next parser"
2021-10-29 20:35:50	maerwald	I think this is due to how nested backtracking works
2021-10-29 20:36:13	maerwald	I briefly lookd at the code and it doesn't seem there's an easy hack
2021-10-29 20:36:26	adamCS	Yes.  That seems like it would be useful, that the next element you process should be produced by a function of the current state and the next element in the stream.
2021-10-29 20:37:23	maerwald	my suspicion is that using elemIndex within chunk boundaries and then forwarding to the next chunk will be as fast as the same on lazy ByteString
2021-10-29 20:38:13	maerwald	also, Folds will get a monadic interface 
2021-10-29 20:38:31	→	mikoto-chan has joined #haskell
2021-10-29 20:38:32	maerwald	they seem to be generally faster than parsers, probably due to lack of backtracking
2021-10-29 20:38:52	maerwald	(even if you don't use the backtracking)
2021-10-29 20:50:18	←	acidjnk_new has quit (Ping timeout: 246 seconds)
2021-10-29 20:53:43	→	eggplantade has joined #haskell
2021-10-29 20:58:05	→	cfricke has joined #haskell
2021-10-29 21:01:24	Boarders	is there a way to get around "Unrecognised pragma for {#- HLINT ignore #-} ?
2021-10-29 21:02:00	merijn	Not currently
2021-10-29 21:02:08	merijn	Besides "don't use the pragma syntax"
2021-10-29 21:02:31	Boarders	I'll see if hlint has an option to turn off all checks in a module using yaml
2021-10-29 21:02:57	Boarders	I think it does
2021-10-29 21:03:05	→	fizzsegfaultbuzz has joined #haskell
2021-10-29 21:04:03	monochrom	Which program is giving the "Unrecognised pragma" message? GHC? hlint?
2021-10-29 21:04:13	Boarders	GHC via ghcid
2021-10-29 21:04:45	merijn	GHC
2021-10-29 21:05:01	geekosaur	it's a warning, I believe
2021-10-29 21:05:07	merijn	Anything using the {-# #-} pragma syntax that GHC doesn't know produces a warning
2021-10-29 21:05:47	merijn	There was a big discussion on how to handle tool pragmas like hlint a while (several years, possibly) ago, but not sure what the end conclusion was
2021-10-29 21:06:40	←	peterhil has quit (Ping timeout: 264 seconds)
2021-10-29 21:07:02	geekosaur	the battle between the tools folks and the LANGAUGE folks :þ
2021-10-29 21:07:19	monochrom	haha
2021-10-29 21:07:41	←	eggplantade has quit (Remote host closed the connection)
2021-10-29 21:08:32	remexre	am I understanding correctly if it seems like (in the "instance resolution is Prolog" metaphor) every rule has a cut?
2021-10-29 21:08:50	→	peterhil has joined #haskell
2021-10-29 21:08:57	monochrom	Yes.
2021-10-29 21:08:58	→	eggplantade has joined #haskell
2021-10-29 21:09:24	remexre	is there a way to... not have that?
2021-10-29 21:09:31	monochrom	No.
2021-10-29 21:10:40	remexre	any suggestings for making a printf-like that "finally" returns an arbitrary MonadIO? Right now I have instances {-# OVERLAPPING #-} (LogFunction func, ToJSON a) => LogFunction (a -> func) and {-# OVERLAPPABLE #-} (MonadIO m, a ~ ()) => LogFunction (m a)
2021-10-29 21:10:41	monochrom	Or yes if you reimagine Haskell to defer resolution to link time and therefore you enjoy a CWA therefore backtracking makes sense again.
2021-10-29 21:10:50	remexre	CWA?
2021-10-29 21:10:56	monochrom	closed-world assumption
2021-10-29 21:11:06	monochrom	the anti-thesis to separate compilation
2021-10-29 21:11:20	monochrom	You do know Prolog, right? RIGHT?
2021-10-29 21:11:30	remexre	yes, but not for AI, for logic :P
2021-10-29 21:11:40	←	Franciman has quit (Remote host closed the connection)
2021-10-29 21:11:53	monochrom	I learned CWA in the context of "prolog as a logic" too.
2021-10-29 21:12:23	monochrom	It is why "negation" "makes" "sense" in Prolog.
2021-10-29 21:12:26	remexre	I've heard the term (though idk if it was from Prolog or general AI stuff), but never seen the acronym before, prolog or otherwise... anyway
2021-10-29 21:12:28	→	Franciman has joined #haskell
2021-10-29 21:12:35	remexre	I guess I'd need something to prevent a (MonadIO (r -> a)) instance from being written
2021-10-29 21:12:47	remexre	er, (MonadIO ((->) r)))
2021-10-29 21:15:08	→	tzh has joined #haskell
2021-10-29 21:15:29	monochrom	Often we create newtypes to get it going.
2021-10-29 21:15:37	←	Raito_Bezarius has quit (Ping timeout: 245 seconds)
2021-10-29 21:17:16	←	zer0bitz has quit (Ping timeout: 260 seconds)
2021-10-29 21:18:00	remexre	hm, any way to do that without changing the signature? This works with a concrete IO instead of the MonadIO, but avoiding needing to use liftIO every time is "the point"
2021-10-29 21:19:07	←	d0ku has quit (Remote host closed the connection)
2021-10-29 21:22:09	→	fendor_ has joined #haskell
2021-10-29 21:23:56	monochrom	onoes GHC 9.2.1
2021-10-29 21:24:01	monochrom	I mean oyes :)
2021-10-29 21:24:35	shapr	oyes!
2021-10-29 21:24:36	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-10-29 21:24:43	←	fendor has quit (Ping timeout: 268 seconds)
2021-10-29 21:24:54	→	MQ-17J has joined #haskell
2021-10-29 21:25:50	monochrom	Haha GHC2021 in lieu of Haskell2021
2021-10-29 21:26:04	←	dajoer has quit (Quit: leaving)
2021-10-29 21:27:58	monochrom	Ben ends the message with "happy testing". This is how confident the GHC devs are about this haha.
2021-10-29 21:28:41	→	Raito_Bezarius has joined #haskell
2021-10-29 21:28:42	←	cfricke has quit (Quit: WeeChat 3.3)
2021-10-29 21:28:55	sprout	I can relate!
2021-10-29 21:29:08	←	[itchyjunk] has quit (Read error: Connection reset by peer)
2021-10-29 21:29:17	←	Midjak has quit (Quit: This computer has gone to sleep)
2021-10-29 21:29:49	←	monadfritz[m] has quit (Quit: You have been kicked for being idle)
2021-10-29 21:31:47	monochrom	I am now tempted to end all my emails with "Good luck with that, \n <my name>"
2021-10-29 21:32:21	monochrom	Example:
2021-10-29 21:32:32	→	lbseale has joined #haskell
2021-10-29 21:33:17	monochrom	A student emails me to ask "is it OK for me to use do-notation on the exam, even though you didn't teach it?"
2021-10-29 21:33:39	monochrom	Reply: "Yes you may. \n \n Good luck with that, \n <my name>"
2021-10-29 21:34:36	←	hyiltiz has quit (Ping timeout: 258 seconds)
2021-10-29 21:40:45	←	chele has quit (Remote host closed the connection)
2021-10-29 21:40:46	←	talismanick has quit (Remote host closed the connection)
2021-10-29 21:42:29	←	NinjaTrappeur has quit (Quit: WeeChat 3.3)
2021-10-29 21:44:41	→	igghibu has joined #haskell
2021-10-29 21:46:36	←	igghibu has left #haskell
2021-10-29 21:49:52	←	merijn has quit (Ping timeout: 264 seconds)
2021-10-29 21:49:52	myShoggoth	"Govern yourself accordingly,"
2021-10-29 21:50:27	→	hyiltiz has joined #haskell
2021-10-29 21:51:20	→	merijn has joined #haskell
2021-10-29 21:52:48	→	NinjaTrappeur has joined #haskell
2021-10-29 21:56:47	←	merijn has quit (Ping timeout: 268 seconds)
2021-10-29 21:57:04	→	merijn has joined #haskell
2021-10-29 22:02:03	←	merijn has quit (Ping timeout: 246 seconds)
2021-10-29 22:02:43	→	merijn has joined #haskell
2021-10-29 22:03:50	←	MidAutumnMoon has quit (Quit: Ping timeout (120 seconds))
2021-10-29 22:03:51	→	chexum_ has joined #haskell
2021-10-29 22:04:00	→	MidAutumnMoon has joined #haskell
2021-10-29 22:04:13	←	son0p has quit (Ping timeout: 244 seconds)
2021-10-29 22:04:14	←	mrianbloom has quit (Ping timeout: 244 seconds)
2021-10-29 22:04:14	←	vito has quit (Ping timeout: 244 seconds)
2021-10-29 22:04:14	←	supersven has quit (Ping timeout: 244 seconds)
2021-10-29 22:04:23	←	chexum has quit (Remote host closed the connection)
2021-10-29 22:04:44	←	S11001001 has quit (Ping timeout: 244 seconds)
2021-10-29 22:04:45	←	JSharp has quit (Ping timeout: 244 seconds)
2021-10-29 22:04:45	←	hendi has quit (Ping timeout: 244 seconds)
2021-10-29 22:04:50	←	orcus has quit (Quit: ZNC 1.8.1 - https://znc.in)
2021-10-29 22:05:10	→	orcus has joined #haskell
2021-10-29 22:05:15	←	sa1 has quit (Ping timeout: 244 seconds)
2021-10-29 22:05:15	←	bradparker has quit (Ping timeout: 244 seconds)
2021-10-29 22:06:17	→	hendi has joined #haskell
2021-10-29 22:06:19	→	vito has joined #haskell
2021-10-29 22:06:25	→	bradparker has joined #haskell
2021-10-29 22:06:29	→	sa1 has joined #haskell
2021-10-29 22:06:37	→	JSharp has joined #haskell
2021-10-29 22:07:23	→	supersven has joined #haskell
2021-10-29 22:07:24	→	mrianbloom has joined #haskell
2021-10-29 22:07:55	→	S11001001 has joined #haskell
2021-10-29 22:08:08	←	merijn has quit (Ping timeout: 260 seconds)
2021-10-29 22:09:27	←	hiruji has quit (Ping timeout: 252 seconds)
2021-10-29 22:10:25	←	ft has quit (Ping timeout: 244 seconds)
2021-10-29 22:11:23	→	ft has joined #haskell
2021-10-29 22:12:01	→	harveypwca has joined #haskell
2021-10-29 22:12:22	→	aegon has joined #haskell
2021-10-29 22:15:17	→	zincy_ has joined #haskell
2021-10-29 22:18:54	→	burnsidesLlama has joined #haskell
2021-10-29 22:24:53	←	hendursa1 has quit (Quit: hendursa1)
2021-10-29 22:25:21	→	hendursaga has joined #haskell
2021-10-29 22:25:52	ℹ	fendor_ is now known as fendor
2021-10-29 22:26:50	→	Bleant has joined #haskell
2021-10-29 22:28:03	→	lavaman has joined #haskell
2021-10-29 22:28:08	←	Bleant has quit (Remote host closed the connection)
2021-10-29 22:29:38	←	zincy_ has quit (Remote host closed the connection)
2021-10-29 22:33:04	←	lavaman has quit (Ping timeout: 264 seconds)
2021-10-29 22:33:53	→	hiruji has joined #haskell
2021-10-29 22:34:40	→	Katarushisu5 has joined #haskell
2021-10-29 22:35:32	→	agander_m_ has joined #haskell
2021-10-29 22:35:33	→	meinside_ has joined #haskell
2021-10-29 22:35:33	→	manicennui_ has joined #haskell
2021-10-29 22:35:33	→	pepeiborra_ has joined #haskell
2021-10-29 22:35:33	→	aria_ has joined #haskell
2021-10-29 22:35:36	→	dpratt__ has joined #haskell
2021-10-29 22:35:56	←	bongobrown has quit (Ping timeout: 258 seconds)
2021-10-29 22:36:56	→	carbolymer_ has joined #haskell
2021-10-29 22:37:46	→	cross_ has joined #haskell
2021-10-29 22:38:00	←	guniberas has quit (Ping timeout: 260 seconds)
2021-10-29 22:38:29	→	motherfs1 has joined #haskell
2021-10-29 22:39:47	→	Guest6 has joined #haskell
2021-10-29 22:41:01	←	peterhil has quit (Ping timeout: 265 seconds)
2021-10-29 22:43:00	←	motherfsck has quit (*.net *.split)
2021-10-29 22:43:00	←	Katarushisu has quit (*.net *.split)
2021-10-29 22:43:00	←	Ekho has quit (*.net *.split)
2021-10-29 22:43:00	←	carbolymer has quit (*.net *.split)
2021-10-29 22:43:00	←	cross has quit (*.net *.split)
2021-10-29 22:43:00	←	pepeiborra has quit (*.net *.split)
2021-10-29 22:43:00	←	manicennui has quit (*.net *.split)
2021-10-29 22:43:00	←	aria has quit (*.net *.split)
2021-10-29 22:43:00	←	meinside has quit (*.net *.split)
2021-10-29 22:43:01	←	agander_m has quit (*.net *.split)
2021-10-29 22:43:01	←	dpratt_ has quit (*.net *.split)
2021-10-29 22:43:01	ℹ	dpratt__ is now known as dpratt_
2021-10-29 22:43:01	ℹ	pepeiborra_ is now known as pepeiborra
2021-10-29 22:43:01	ℹ	meinside_ is now known as meinside
2021-10-29 22:43:01	ℹ	manicennui_ is now known as manicennui
2021-10-29 22:43:01	ℹ	Katarushisu5 is now known as Katarushisu
2021-10-29 22:43:01	ℹ	aria_ is now known as aria
2021-10-29 22:43:01	ℹ	agander_m_ is now known as agander_m
2021-10-29 22:44:41	→	Ekho- has joined #haskell
2021-10-29 22:45:58	→	merijn has joined #haskell
2021-10-29 22:46:09	→	zincy_ has joined #haskell
2021-10-29 22:50:41	←	zincy_ has quit (Ping timeout: 265 seconds)
2021-10-29 22:52:51	→	Pickchea has joined #haskell
2021-10-29 22:52:56	→	econo has joined #haskell
2021-10-29 22:53:22	ℹ	Ekho- is now known as Ekho
2021-10-29 23:01:21	→	lavaman has joined #haskell
2021-10-29 23:02:20	lbseale	can I automatically derive NFData for an arbitrary record type?
2021-10-29 23:02:44	maerwald	with Generic 
2021-10-29 23:03:02	lbseale	nice
2021-10-29 23:03:39	←	eggplantade has quit (Remote host closed the connection)
2021-10-29 23:04:15	→	Kaiepi has joined #haskell
2021-10-29 23:04:21	←	tzh has quit (Quit: djvksd)
2021-10-29 23:05:27	←	harveypwca has quit (Ping timeout: 258 seconds)
2021-10-29 23:09:29	←	lavaman has quit (Remote host closed the connection)
2021-10-29 23:09:41	→	lavaman has joined #haskell
2021-10-29 23:10:39	←	lavaman has quit (Remote host closed the connection)
2021-10-29 23:10:52	←	hiruji has quit (Ping timeout: 264 seconds)
2021-10-29 23:11:27	→	chomwitt has joined #haskell
2021-10-29 23:12:54	→	jil has joined #haskell
2021-10-29 23:13:00	jil	hello
2021-10-29 23:14:10	jil	I'm a begginer, learning haskell and I would like to define a type for different sets of digit.
2021-10-29 23:16:23	pavonia	Welcome
2021-10-29 23:17:38	jil	I could do `data Digit2 = Zero | One` or `data Digit6 = Zero | One | ... | Five`  but I would like a more generic approche using Exiting Int or Char.  For exemple `data Digits n` would be '0' | '1' | ... | nth -1 symbol of a predefined sequence
2021-10-29 23:17:58	←	Guest6 has quit (Ping timeout: 256 seconds)
2021-10-29 23:19:00	jil	How do I do that ? and Why can't I do `data Digit2 = 0 | 1` ?  I want a Digit2 to be an Int and it's successor .
2021-10-29 23:19:09	jil	hello pavonia 
2021-10-29 23:19:39	→	zincy_ has joined #haskell
2021-10-29 23:19:46	jil	or Digit2 to be two successive Char
2021-10-29 23:20:28	←	merijn has quit (Ping timeout: 264 seconds)
2021-10-29 23:20:51	yrlnry	`Data` defines a new data type.  If it let you `data Digit2 = 0 | 1`, then when the Haskell compiler saw a `0` in your code, it wouldn't know whether you meant the Data2 value 0 or the integer value 0.
2021-10-29 23:22:21	yrlnry	You can do `Data2 = D0 | D1`.  Or you can tell Haskell that `Data2` is an instance of `Num`, and then define a `fromInteger` function for it that says how Haskell should interpret a `0` or a `1` that is being used in a place where it expected a `Digit2`.
2021-10-29 23:22:57	dsal	That gets partial if it's not modular, though.  Because what does      `4 :: Digit2` mean?
2021-10-29 23:23:16	awpr	it means "good luck debugging this with no stack trace" :)
2021-10-29 23:23:34	awpr	partial Num instances cause unbounded pain
2021-10-29 23:23:38	yrlnry	Presumably for this application partial is acceptable, it should complain `4 is not a permitted digit` or something.
2021-10-29 23:24:21	dsal	Partial functions are more desirable in the beginning.  :)
2021-10-29 23:24:28	monochrom	Worse than that. Most Num methods make no sense for the "digit" concept.
2021-10-29 23:24:55	awpr	an error sounds okay at first glance, but there's no way to find out where the problem came from without making a profiling build and using the RTS' stack traces
2021-10-29 23:25:15	yrlnry	What would be a better approach?
2021-10-29 23:25:21	awpr	not having a Num instance
2021-10-29 23:25:37	monochrom	Don't make the digit type a Num instance in the first place.
2021-10-29 23:25:46	jil	ok
2021-10-29 23:25:47	→	tzh has joined #haskell
2021-10-29 23:25:48	dsal	You can make an e-Num type.  That's more high tech anyway.
2021-10-29 23:25:52	monochrom	Enum ought to be enough for that.
2021-10-29 23:26:23	awpr	I wrote this entire library and GHC plugin fueled by frustration with exactly this problem: https://hackage.haskell.org/package/dependent-literals-plugin
2021-10-29 23:26:43	yrlnry	Enum is probably a better idea, thanks.
2021-10-29 23:26:56	awpr	to make it possible to make numeric literals work with Fin, without ruining somebody's week whenever someone uses an out-of-range literal
2021-10-29 23:27:29	monochrom	Enum is precisely for "my type is just 10 constructors flat".
2021-10-29 23:27:36	awpr	(incidentally, `DigitN` is `Fin N`)
2021-10-29 23:28:06	←	zincy_ has quit (Ping timeout: 260 seconds)
2021-10-29 23:28:41	←	burnsidesLlama has quit (Remote host closed the connection)
2021-10-29 23:28:43	→	eggplantade has joined #haskell
2021-10-29 23:29:12	→	burnsidesLlama has joined #haskell
2021-10-29 23:29:51	←	hololeap has quit (Remote host closed the connection)
2021-10-29 23:30:38	monochrom	Haha now I understand the e-Num joke.
2021-10-29 23:32:11	→	hololeap has joined #haskell
2021-10-29 23:33:22	pavonia	@quote beginner
2021-10-29 23:33:22	lambdabot	JohnHughes says: I would guess that the majority if compiler runs for beginners (and perhaps for the rest of us too!) end in a type error
2021-10-29 23:33:56	←	burnsidesLlama has quit (Ping timeout: 260 seconds)
2021-10-29 23:34:27	pavonia	Wasn't there a quote about beginners asking an innocent question and being overwhelmed with type theory answers?
2021-10-29 23:34:35	⚡	awpr hides
2021-10-29 23:35:41	←	yrlnry has quit (Ping timeout: 260 seconds)
2021-10-29 23:37:34	←	max22- has quit (Ping timeout: 264 seconds)
2021-10-29 23:37:34	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-10-29 23:38:00	→	MQ-17J has joined #haskell
2021-10-29 23:38:12	→	Farzad has joined #haskell
2021-10-29 23:38:23	geekosaur	@quote type.theory
2021-10-29 23:38:23	lambdabot	ggVGc says: haskell also has the gotcha of starting to write a program and ending up with a ultra-generic library for some new type theory concepts you just learnt
2021-10-29 23:38:30	geekosaur	@quote type.theory
2021-10-29 23:38:30	lambdabot	ggVGc says: haskell also has the gotcha of starting to write a program and ending up with a ultra-generic library for some new type theory concepts you just learnt
2021-10-29 23:38:33	geekosaur	hm
2021-10-29 23:39:38	→	justsomeguy has joined #haskell
2021-10-29 23:39:38	←	MQ-17J has quit (Read error: Connection reset by peer)
2021-10-29 23:39:49	shapr	@quote first-year
2021-10-29 23:39:49	lambdabot	TacticalGrace says: #haskell in action: discussion about first-year teaching turns into an argument about CT and Kan extensions
2021-10-29 23:39:52	shapr	that one?
2021-10-29 23:40:04	←	mbuf has quit (Quit: Leaving)
2021-10-29 23:40:15	→	MQ-17J has joined #haskell
2021-10-29 23:40:37	shapr	@quote category theory
2021-10-29 23:40:38	lambdabot	No quotes for this person. You untyped fool!
2021-10-29 23:40:40	shapr	@quote category.theory
2021-10-29 23:40:41	lambdabot	mjrosenb says: <3 #haskell; "why doesn't this program typecheck?" ;  5 hours of category theory later, op left 4 hours ago
2021-10-29 23:40:46	shapr	@quote category.theory
2021-10-29 23:40:46	lambdabot	Botje says: the line between madness and category theory is a fine one indeed.
2021-10-29 23:40:54	shapr	too many category theory quotes
2021-10-29 23:41:13	→	lavaman has joined #haskell
2021-10-29 23:41:34	earthy	there's no such thing as to many category theory... is there? :)
2021-10-29 23:42:10	monochrom	2-many 2-category theory
2021-10-29 23:43:55	←	hololeap has quit (Read error: Connection reset by peer)
2021-10-29 23:43:58	jil	awpr it's not clear exactly how to use you librari but I will try.  I think It answer my question.
2021-10-29 23:44:35	pavonia	shapr: Hhm, maybe it was this first-year quote
2021-10-29 23:44:49	jil	I have another innocent beginner question.  
2021-10-29 23:44:53	awpr	tbh it's probably too complicated for this use case if you're not willing to go to great lengths to get literals working
2021-10-29 23:45:12	jil	how do yo know in what package to find a specific function ?
2021-10-29 23:45:14	→	hololeap has joined #haskell
2021-10-29 23:45:52	geekosaur	hoogle
2021-10-29 23:45:57	←	lavaman has quit (Ping timeout: 264 seconds)
2021-10-29 23:45:58	awpr	hmm, if I added a `Wrapped Finite` impl, it might actually become easy...
2021-10-29 23:46:08	jil	in ghci :doc read will point to readMaybe.  If one does not have acess to internet how can he find readMaybe is in Data.Text (from memory)
2021-10-29 23:46:53	awpr	`data Digit2 = D0 | D1 deriving Generic deriving Finite via Wrapped Generic Digit2 deriving HasIntLiterals via Wrapped Finite Digit2` isn't too bad.
2021-10-29 23:47:05	sm	jil, you can do what you just said, in ghci ?
2021-10-29 23:47:08	jil	wouhao !
2021-10-29 23:47:13	sm	you can also set up hoogle to work locally
2021-10-29 23:47:41	awpr	but I still think dependent-literals is overkill for this, honestly.  I'd probably just use D0 and D1 directly
2021-10-29 23:48:06	jil	awpr but what about Fin 16, Fin 32 ect..
2021-10-29 23:48:14	jil	:doc read
2021-10-29 23:48:41	jil	points to readMaybe
2021-10-29 23:48:46	sm	or you can set up a more fancy local docs tool like `dash` or similar
2021-10-29 23:48:52	awpr	yeah, those are a bit more meaningful.  if you want a lot of different radixes, I'd maybe find an existing Fin library (e.g. `fin-int` is one I maintain)
2021-10-29 23:49:46	jil	sm ok, I need a better IDE setup.  any suggestion for a ghci runing in emacs ?
2021-10-29 23:50:01	sm	M-x shell, ghci 
2021-10-29 23:50:10	jil	I'm not familliar with dash.
2021-10-29 23:50:16	awpr	that comes with dependent-literals support, but you can also just say `fin 5` if you don't want to deal with the plugin.  (and that has a HasCallStack constraint, so if you call it on an out-of-range number, it'll at least tell you where)
2021-10-29 23:50:17	jil	sm That's what I use
2021-10-29 23:50:30	sm	also don't miss ghcid, it's great
2021-10-29 23:50:50	jil	ok sm.  Thank you.
2021-10-29 23:53:00	sm	jil I also recommend spending a half hour to skim the haddocks for all of base and a few other main libraries (containers, mtl, text, safe, ...) - most of us did not do it and it can save a lot of time
2021-10-29 23:53:21	sm	likewise for the GHC user guide
2021-10-29 23:54:25	→	thblt has joined #haskell
2021-10-29 23:54:28	jil	:) ok.
2021-10-29 23:54:37	sm	oh and the stack and cabal user guides :)
2021-10-29 23:54:49	sm	THEN you'll be fine
2021-10-29 23:56:11	thblt	Is there a file manipulation library in Haskell that signals errors with types rather than exceptions? (Eg open :: FilePath -> IO (Either FileError Handle))
2021-10-29 23:56:57	monochrom	You can use Control.Exception's "try".
2021-10-29 23:56:58	jil	sm I'm trying to finish Hutton_G_Programming_in_Haskell-Cambridge_University_Press_2018.pdf
2021-10-29 23:57:20	sm	good one
2021-10-29 23:57:39	sm	he has more recent lessons on youtube also
2021-10-29 23:58:29	sm	 @where HTAC
2021-10-29 23:58:29	sm	is also good
2021-10-29 23:59:02	sm	@where HTAC , I say
2021-10-29 23:59:03	lambdabot	"Haskell Tutorial and Cookbook" by Mark Watson in 2017-09-04 at <https://leanpub.com/haskell-cookbook>
2021-10-30 00:00:02	ℹ	irc: disconnected from server
2021-11-01 15:06:35	→	oxide has joined #haskell
2021-11-01 15:06:35	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-11-01 15:06:35	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-11-01 15:06:35	ℹ	Channel #haskell: 710 nicks (1 op, 0 voices, 709 normals)
2021-11-01 15:06:37	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-11-01 15:08:04	arjun	kritzefitz: np
2021-11-01 15:08:27	←	shriekingnoise has quit (Quit: Quit)
2021-11-01 15:08:49	kritzefitz	I usually use more stable versions of GHC for my day-to-day development. But people specifically asked me to upgrade one of my libraries to GHC-9.2.
2021-11-01 15:09:18	arjun	kritzefitz: it has the native arm codegen, so that might be the reason : P
2021-11-01 15:12:31	←	LiaoTao has quit (Remote host closed the connection)
2021-11-01 15:12:49	→	LiaoTao has joined #haskell
2021-11-01 15:13:19	→	pretty_dumm_guy has joined #haskell
2021-11-01 15:14:07	→	timCF has joined #haskell
2021-11-01 15:14:31	→	yauhsien has joined #haskell
2021-11-01 15:16:12	timCF	Hello! Let's say I do have 2 different cabal/stack Haskell packages which do export 2 different modules with the same name Foo. My package is using them both as dependencies. How do I import/use 2 different modules named Foo separately?
2021-11-01 15:18:14	int-e	there's https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/exts/package_qualified_imports.html
2021-11-01 15:19:03	←	xff0x has quit (Ping timeout: 260 seconds)
2021-11-01 15:19:18	←	yauhsien has quit (Ping timeout: 268 seconds)
2021-11-01 15:22:36	→	burnsidesLlama has joined #haskell
2021-11-01 15:24:11	→	xff0x has joined #haskell
2021-11-01 15:26:05	←	acidjnk has quit (Ping timeout: 268 seconds)
2021-11-01 15:27:14	→	tdwamdors^ has joined #haskell
2021-11-01 15:27:17	merijn	timCF: The recommended solution is: publically shame the authors to "stop fucking doing that"
2021-11-01 15:32:49	→	acidjnk has joined #haskell
2021-11-01 15:33:23	→	fef has joined #haskell
2021-11-01 15:35:21	←	fef has quit (Client Quit)
2021-11-01 15:37:46	←	burnsidesLlama has quit (Remote host closed the connection)
2021-11-01 15:38:32	→	shidima has joined #haskell
2021-11-01 15:41:09	shidima	Can some one tell me what I'm doing wrong here: https://pastebin.com/DeyjxsiC 
2021-11-01 15:41:25	shidima	Am I creating the type wrong?
2021-11-01 15:44:19	Hecate	shidima: okay so
2021-11-01 15:44:42	Hecate	shidima: how many arguments does the constructor "Individual" have?
2021-11-01 15:46:58	←	shidima has quit (Read error: Connection reset by peer)
2021-11-01 15:49:29	→	Jing has joined #haskell
2021-11-01 15:49:35	→	fef has joined #haskell
2021-11-01 15:51:37	arjun	.
2021-11-01 15:51:51	arjun	oh, they left?
2021-11-01 15:51:56	arjun	nvm
2021-11-01 15:53:03	←	fef has left #haskell
2021-11-01 15:53:52	Hecate	yep :')
2021-11-01 15:54:02	arjun	\o Hecate 
2021-11-01 15:57:03	merijn	As is tradition
2021-11-01 16:00:15	→	Guest|83 has joined #haskell
2021-11-01 16:00:36	←	Guest|83 has quit (Client Quit)
2021-11-01 16:03:12	alzgh	when I add libraries to the `build-depends` directive in my `.cabal` file, I don't need to separately install those libraries? cabal will download and install them for me automatically?
2021-11-01 16:03:41	Hecate	alzgh: yes absolutely :)
2021-11-01 16:03:43	Hecate	arjun: o/
2021-11-01 16:03:45	Hecate	merijn: indeed
2021-11-01 16:03:48	arjun	alzgh: sure
2021-11-01 16:04:24	arjun	i neat trick i picked up earlier, you may not even mention the bounds initially
2021-11-01 16:04:48	arjun	you just go build-depends:    base,text,time etc
2021-11-01 16:04:57	arjun	then run cabal gen-bounds
2021-11-01 16:05:35	alzgh	I'm just a little bit confused about where cabal installs them. Is it per project? So, I don't need to worry about version hell on global level between different projects? Also, what about `cabal install` then?
2021-11-01 16:05:41	→	phma_ has joined #haskell
2021-11-01 16:06:08	arjun	alzgh: you don't need to worry about cabal hell anymore with cabal 3.0+
2021-11-01 16:06:35	arjun	these are installed in .cabal in home in unix or the relevant counterpart in windows
2021-11-01 16:07:00	←	phma has quit (Read error: Connection reset by peer)
2021-11-01 16:07:19	alzgh	nice, so `cabal install` is not needed anymore?
2021-11-01 16:07:30	arjun	it is
2021-11-01 16:07:36	merijn	alzgh: All installed dependencies are tagged with a hash of their (and transitive dependencies) code/config
2021-11-01 16:07:57	merijn	alzgh: So you can have unlimited number of parallel installs of the same packages with conflicting configuration
2021-11-01 16:08:10	arjun	well, if you're building a executable and want to install it, else, you can work with cabal run or cabal build
2021-11-01 16:08:43	←	yahb has quit (Ping timeout: 268 seconds)
2021-11-01 16:10:26	alzgh	Thank you, I think I'm starting to understand. So, the selling point of Stack isn't enabling different/parallel versions of the same package (maybe it was before cabal 3.0), but rather guaranteeing that different package work smoothly together like in a stable distro.
2021-11-01 16:11:20	arjun	totes, it's like a snapshot of package versions that are bound to play nice with each other and will always will, given the same resolver version.
2021-11-01 16:12:01	alzgh	thank you :D
2021-11-01 16:12:26	geekosaur	it was before cabal 2.0
2021-11-01 16:14:19	←	Guest16 has quit (Quit: Client closed)
2021-11-01 16:14:29	←	mniip has quit (Ping timeout: 633 seconds)
2021-11-01 16:18:19	←	maerwald has quit (Changing host)
2021-11-01 16:18:19	→	maerwald has joined #haskell
2021-11-01 16:19:01	maerwald	arjun: sup
2021-11-01 16:19:22	arjun	maerwald: \o
2021-11-01 16:19:28	arjun	how you been doin mate
2021-11-01 16:20:12	maerwald	doing haskell on windows mostly
2021-11-01 16:20:19	maerwald	which gives me odd pleasure
2021-11-01 16:20:32	→	yauhsien has joined #haskell
2021-11-01 16:20:32	maerwald	I'm not sure if it's good or bad
2021-11-01 16:20:42	→	Farzad has joined #haskell
2021-11-01 16:20:50	arjun	i tried it sometime back, it surprisingly works well enough, doesn't it
2021-11-01 16:20:56	arjun	ghcup is champ
2021-11-01 16:21:14	→	yahb has joined #haskell
2021-11-01 16:21:33	→	mniip has joined #haskell
2021-11-01 16:21:39	maerwald	mostly due to my abstract-filepath stuff
2021-11-01 16:21:50	maerwald	trying to migrate my directory package fork to windows
2021-11-01 16:22:27	maerwald	reading windows API is like looking at a car crash from a distance... it shouldn't be fun, but it is
2021-11-01 16:22:31	←	phma_ has quit (Ping timeout: 260 seconds)
2021-11-01 16:22:41	arjun	lmao
2021-11-01 16:23:58	maerwald	I still don't really know what junction points are
2021-11-01 16:24:38	→	phma_ has joined #haskell
2021-11-01 16:25:06	ℹ	phma_ is now known as phma
2021-11-01 16:25:17	←	yauhsien has quit (Ping timeout: 268 seconds)
2021-11-01 16:25:29	→	burnsidesLlama has joined #haskell
2021-11-01 16:27:40	maerwald	also, the semantics of what an "executable" is on windows are... well
2021-11-01 16:27:43	maerwald	complicated
2021-11-01 16:28:05	arjun	the refactor was great, looks likes a different code-base now but still familiar and sort of cleaner
2021-11-01 16:28:17	maerwald	directory package uses a hardcoded list https://github.com/haskell/directory/blob/f0da64307959fcd2225c01f97df851ff45285e68/System/Directory/Internal/Windows.hsc#L633
2021-11-01 16:28:23	maerwald	which seems wrong too
2021-11-01 16:29:02	maerwald	then there is a PATHEXT variable, but to be really complete you'd also need to look up some random registry entries
2021-11-01 16:29:22	arjun	are we testing on windows 11?
2021-11-01 16:29:22	maerwald	and then it's still not clear what "executable" means, because it's not a file attribute
2021-11-01 16:29:43	arjun	cause that probably might have changed things a bit
2021-11-01 16:29:59	←	burnsidesLlama has quit (Ping timeout: 260 seconds)
2021-11-01 16:30:00	maerwald	not sure
2021-11-01 16:30:21	→	alx741 has joined #haskell
2021-11-01 16:33:25	←	kritzefitz has quit (Changing host)
2021-11-01 16:33:25	→	kritzefitz has joined #haskell
2021-11-01 16:34:18	←	kritzefitz has quit (Changing host)
2021-11-01 16:34:18	→	kritzefitz has joined #haskell
2021-11-01 16:34:20	←	Nachtgespenst has quit (Quit: Bye!)
2021-11-01 16:34:36	ℹ	kritzefitz is now known as kritzefitz[m]
2021-11-01 16:34:53	ℹ	kritzefitz[m] is now known as kritzefitz
2021-11-01 16:35:34	→	__monty__ has joined #haskell
2021-11-01 16:36:41	→	eggplantade has joined #haskell
2021-11-01 16:37:21	←	Guest396 has quit (Quit: Client closed)
2021-11-01 16:37:24	→	burnsidesLlama has joined #haskell
2021-11-01 16:38:05	→	kritzefitz[m] has joined #haskell
2021-11-01 16:38:36	←	kritzefitz[m] has quit (Changing host)
2021-11-01 16:38:36	→	kritzefitz[m] has joined #haskell
2021-11-01 16:39:21	←	kritzefitz[m] has quit (Client Quit)
2021-11-01 16:41:11	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-11-01 16:42:22	→	AlexNoo_ has joined #haskell
2021-11-01 16:44:36	←	Alex_test has quit (Ping timeout: 260 seconds)
2021-11-01 16:45:11	←	AlexZenon has quit (Ping timeout: 260 seconds)
2021-11-01 16:46:16	←	AlexNoo has quit (Ping timeout: 264 seconds)
2021-11-01 16:49:55	→	Alex_test has joined #haskell
2021-11-01 16:50:37	→	AlexZenon has joined #haskell
2021-11-01 16:53:59	←	arjun has left #haskell (ERC (IRC client for Emacs 28.0.50))
2021-11-01 16:54:56	→	yauhsien has joined #haskell
2021-11-01 16:57:57	←	jonathanx has quit (Ping timeout: 246 seconds)
2021-11-01 16:57:58	←	merijn has quit (Ping timeout: 268 seconds)
2021-11-01 16:58:22	→	xkuru has joined #haskell
2021-11-01 16:58:57	→	merijn has joined #haskell
2021-11-01 16:59:23	←	yauhsien has quit (Ping timeout: 260 seconds)
2021-11-01 16:59:52	←	xkuru has quit (Client Quit)
2021-11-01 17:00:36	→	machinedgod has joined #haskell
2021-11-01 17:00:44	→	xkuru has joined #haskell
2021-11-01 17:08:32	Hecate	maerwald: plz don't trainwreck the GHC proposal ticket 😭
2021-11-01 17:08:49	maerwald	spj started the discussion
2021-11-01 17:08:52	maerwald	not me
2021-11-01 17:09:04	←	merijn has quit (Ping timeout: 268 seconds)
2021-11-01 17:09:11	maerwald	and it's true, there are only two options: 1. overlays, 2. downstream patches
2021-11-01 17:09:40	→	merijn has joined #haskell
2021-11-01 17:10:10	maerwald	and this surely touches the core issue: smooth upgrades
2021-11-01 17:15:14	←	chele has quit (Ping timeout: 268 seconds)
2021-11-01 17:20:10	←	merijn has quit (Ping timeout: 268 seconds)
2021-11-01 17:20:46	→	merijn has joined #haskell
2021-11-01 17:24:16	→	euandreh has joined #haskell
2021-11-01 17:24:46	→	Guest10 has joined #haskell
2021-11-01 17:33:36	←	bitdex has quit (Quit: = "")
2021-11-01 17:35:56	ℹ	AlexNoo_ is now known as AlexNoo
2021-11-01 17:36:57	→	guniberas has joined #haskell
2021-11-01 17:41:34	←	Guest10 has quit (Quit: Client closed)
2021-11-01 17:48:46	→	shriekingnoise has joined #haskell
2021-11-01 17:50:30	→	chexum_ has joined #haskell
2021-11-01 17:51:02	←	chexum has quit (Remote host closed the connection)
2021-11-01 17:51:51	tomjaguarpaw	There's a third option of trying to instill a pervasive sense of responsibility across the community so that this issue doesn't arise so often
2021-11-01 17:51:59	maerwald	tomjaguarpaw: :D
2021-11-01 17:52:02	tomjaguarpaw	Admittedly that is very hand and fraught with many difficulties
2021-11-01 17:52:20	tomjaguarpaw	*hard
2021-11-01 17:52:46	tomjaguarpaw	But ultimately I don't think a community can escape its own culture with technical solutions
2021-11-01 17:53:52	maerwald	I mean... what confuses me is that we're relatively quick with package takeovers, but overly conservative with NMUs. While, in the end: both have the danger of incompetency sneaking in. That's just how it is.
2021-11-01 18:03:45	←	burnsidesLlama has quit (Remote host closed the connection)
2021-11-01 18:06:28	→	waleee has joined #haskell
2021-11-01 18:10:05	←	xff0x has quit (Remote host closed the connection)
2021-11-01 18:10:07	←	cfricke has quit (Ping timeout: 268 seconds)
2021-11-01 18:10:22	→	xff0x has joined #haskell
2021-11-01 18:14:13	→	jonathanx has joined #haskell
2021-11-01 18:25:15	←	yrlnry has quit (Ping timeout: 260 seconds)
2021-11-01 18:25:56	←	dermato has quit (Ping timeout: 260 seconds)
2021-11-01 18:27:46	→	dermato has joined #haskell
2021-11-01 18:29:03	→	dartford has joined #haskell
2021-11-01 18:30:19	dartford	hi, whats up with the tunes log?
2021-11-01 18:30:28	dartford	http://tunes.org/~nef/logs/haskell/21.09.14
2021-11-01 18:30:44	dartford	i cant find yesterdays conversation 
2021-11-01 18:30:59	dartford	oh ok, i can see it in the header
2021-11-01 18:31:32	←	acowley has quit (Ping timeout: 260 seconds)
2021-11-01 18:31:46	dartford	wow, it sure is less organised than when it was grouped by date
2021-11-01 18:32:07	dartford	i wonder if tomsmeding would consider that option, or linking it back to the old tunes log somehow
2021-11-01 18:32:51	tomsmeding	dartford: see the "calendar" link at the top of ircbrowse
2021-11-01 18:33:11	dartford	horay!
2021-11-01 18:33:26	dartford	how goes it, havent been online in a while
2021-11-01 18:33:30	tomsmeding	is there anyone who actually uses that browse view with 3000+ pages of content?
2021-11-01 18:33:45	tomsmeding	like, there's the "recent" view which could be useful, and there's calendar
2021-11-01 18:33:46	←	alzgh has quit (Ping timeout: 256 seconds)
2021-11-01 18:33:51	dartford	last time we spoke you helped me with a buffer, for which i was most thankful
2021-11-01 18:34:01	dartford	have you got any cool projects on the go at the moment?
2021-11-01 18:34:12	tomsmeding	making the browse view efficient has _serious_ implications on the database structure :p
2021-11-01 18:34:15	dartford	(i was using the handle fog at the time)
2021-11-01 18:34:19	tomsmeding	ah!
2021-11-01 18:34:26	tomsmeding	I remember FogBuffer.hs :)
2021-11-01 18:34:43	→	Sgeo has joined #haskell
2021-11-01 18:34:52	tomsmeding	that's... slightly more than a year ago, I think?
2021-11-01 18:34:54	dartford	im stuck with probabilty monad at the moment, but i tried asking yeasterday and it ended up as gobeldygook 
2021-11-01 18:35:11	dartford	tomsmeding: yeah, i have been basically out of action for about that long
2021-11-01 18:35:12	⚡	tomsmeding is currently looking more closely at automatic differentiation
2021-11-01 18:35:29	tomsmeding	somehow the university decided that it was a good idea to let me do a phd
2021-11-01 18:36:04	dartford	well if your maintaining the haskell logs id say you probs have the credentials 
2021-11-01 18:36:09	tomsmeding	:D
2021-11-01 18:36:15	dartford	most of the aplicants are just tramps after a free lunch
2021-11-01 18:36:18	tomsmeding	"maintaining"
2021-11-01 18:36:28	dartford	"able to establish" 
2021-11-01 18:37:53	tomsmeding	fun thing is, a while ago I added some route timing statistics to ircbrowse
2021-11-01 18:38:08	dartford	yes, that does sound fun.... not
2021-11-01 18:38:13	tomsmeding	apparently I did something wrong regarding memory usage because it went from being ~constant to rising like 500M per day
2021-11-01 18:38:36	tomsmeding	turned it off after I became tired of 'systemctl restart ircbrowse'
2021-11-01 18:38:40	→	eggplantade has joined #haskell
2021-11-01 18:39:12	dartford	basically, the probability monad i envisage is a variant of a state, where instead of just being able to "view" the state, as an input to the update of the carry
2021-11-01 18:39:33	→	burnsidesLlama has joined #haskell
2021-11-01 18:39:35	dartford	ie, from within the monad, being able to draw the value using <- from the monadic wrapper
2021-11-01 18:39:48	dartford	that instead, a "pdf" could be drawn from using the <- 
2021-11-01 18:40:06	dartford	and somehow behind the scenes this would be handling the replacement of the seed for the rng
2021-11-01 18:40:26	tomsmeding	there is no implementation of a probability monad yet that does what you want??
2021-11-01 18:40:29	tomsmeding	s/??/?/
2021-11-01 18:40:58	dartford	er, i mean, maybe there is, but maybe not, i think i need to use StateL to preserve an applicative instance
2021-11-01 18:41:23	dartford	the conclusion of yesterdays garbled discord was that i should use Data.Functo.Compose
2021-11-01 18:41:28	dartford	instead of pairs
2021-11-01 18:41:33	tomsmeding	"preserve an applicative instance" -- do you mean 'pure = return ; (<*>) = ap' ?
2021-11-01 18:41:34	dartford	to build up larger states
2021-11-01 18:41:49	dartford	hmm, the applicative instance of StateL
2021-11-01 18:42:04	tomsmeding	hoogle doesn't know what StateL is
2021-11-01 18:42:13	dartford	which can be located following links in the hadocks starting from the implementation of mapAccumL
2021-11-01 18:43:18	←	fjmorazan_ has quit (Quit: fjmorazan_)
2021-11-01 18:43:25	←	eggplantade has quit (Ping timeout: 268 seconds)
2021-11-01 18:43:43	dartford	https://hackage.haskell.org/package/base-4.16.0.0/docs/src/Data.Functor.Utils.html#StateL
2021-11-01 18:43:53	→	fjmorazan has joined #haskell
2021-11-01 18:44:09	tomsmeding	ah I see
2021-11-01 18:44:21	tomsmeding	so StateL would be the same as State from transformers, right?
2021-11-01 18:44:27	tomsmeding	and StateR the dual, sortof
2021-11-01 18:44:27	dartford	i got there by clicking the StateL word here; https://hackage.haskell.org/package/base-4.16.0.0/docs/src/Data.Traversable.html#mapAccumL
2021-11-01 18:44:37	dartford	yeah
2021-11-01 18:44:51	dartford	you want to traverse from the left if your given an infinite stream you want to consume lazily
2021-11-01 18:44:56	←	hololeap has quit (Remote host closed the connection)
2021-11-01 18:45:07	tomsmeding	right
2021-11-01 18:45:16	←	burnsidesLlama has quit (Ping timeout: 268 seconds)
2021-11-01 18:45:21	tomsmeding	so what prevents you from using State from transformers?
2021-11-01 18:45:23	dartford	hololeap suggested;
2021-11-01 18:45:24	dartford	% :t \f -> runState . traverse (state . f)
2021-11-01 18:45:24	yahb	dartford: Traversable t => (a -> s -> (b, s)) -> t a -> s -> (t b, s)
2021-11-01 18:45:32	dartford	is that the state you mean?
2021-11-01 18:45:35	tomsmeding	yeah
2021-11-01 18:45:46	dartford	idk if that has the same applicative instance
2021-11-01 18:45:55	dartford	that allows it to be lazy when used in traverse
2021-11-01 18:46:13	dartford	like, how traversing from the right is certainly not going to be lazy
2021-11-01 18:46:24	→	acowley has joined #haskell
2021-11-01 18:46:26	dartford	lets check
2021-11-01 18:47:09	tomsmeding	seems to be the same
2021-11-01 18:47:31	tomsmeding	apart from the pair being swapped of course
2021-11-01 18:47:34	dartford	https://hackage.haskell.org/package/transformers-0.6.0.2/docs/src/Control.Monad.Trans.State.Lazy.html#withStateT
2021-11-01 18:47:37	dartford	its just below that
2021-11-01 18:48:53	tomsmeding	yeah
2021-11-01 18:49:06	maerwald	are there any good automatic ways to observe and benchmark memory fragmentation?
2021-11-01 18:49:10	tomsmeding	that's the Lazy variant; the Strict variant seems to be the same but missing the lazy tuples
2021-11-01 18:49:11	→	hololeap has joined #haskell
2021-11-01 18:49:26	maerwald	the only post on this topic I can find is https://www.well-typed.com/blog/2020/08/memory-fragmentation which is an odyessey of manual debugging
2021-11-01 18:49:45	dartford	tomsmeding: lazy tuples!? is that what the ~ i doing there?
2021-11-01 18:49:53	dartford	s/i/is
2021-11-01 18:50:19	→	alzgh has joined #haskell
2021-11-01 18:51:08	→	yrlnry has joined #haskell
2021-11-01 18:51:11	tomsmeding	yeah wrong terminology, that's an irrefutable pattern match officially
2021-11-01 18:51:27	tomsmeding	> case undefined of (a, b) -> ()
2021-11-01 18:51:28	lambdabot	 *Exception: Prelude.undefined
2021-11-01 18:51:34	tomsmeding	> case undefined of ~(a, b) -> ()
2021-11-01 18:51:35	lambdabot	 ()
2021-11-01 18:51:44	tomsmeding	> case undefined of ~(a, b) -> a
2021-11-01 18:51:45	lambdabot	 *Exception: Prelude.undefined
2021-11-01 18:52:09	tomsmeding	dartford: the pattern match always succeeds and doesn't force the value being matched, and is thus also lazy
2021-11-01 18:52:21	tomsmeding	usages effectively become projections
2021-11-01 18:53:40	dartford	hmm, nice
2021-11-01 18:53:52	→	burnsidesLlama has joined #haskell
2021-11-01 18:54:11	dartford	so its use in the StateT Applicative instance reasures us that the traversal should be lazy
2021-11-01 18:54:32	dartford	ie that we get a rewrite rule for the instance of mapAccumL defined using runState above
2021-11-01 18:54:46	dartford	that combines to subsequent mapAccumL's into one
2021-11-01 18:55:02	dartford	as if it were just consuming one element at a time and passing it through to the next scanner
2021-11-01 18:55:53	tomsmeding	yeah the StateL is also lazy, because let bindings are lazy, so its behaviour would be equivalent to the .Lazy version from transformers, with the ~ matches
2021-11-01 18:56:30	dartford	wait, iv gotten distracted, i forgot what we were trying to do
2021-11-01 18:56:50	dartford	good info about how its lazy though
2021-11-01 18:58:37	dartford	ok, so i want to make something like an existing probability monad
2021-11-01 18:58:47	dartford	but that uses the Compose idea to build up the state
2021-11-01 18:59:09	dartford	and then factor away the functionality so that the user doesnt actually see the "top layer" where the seed is
2021-11-01 18:59:11	⚡	tomsmeding is not sure what the Compose idea is, but has to go anyway -- meetings meetings
2021-11-01 19:00:04	←	jonathanx has quit (Ping timeout: 268 seconds)
2021-11-01 19:00:20	dartford	the idea is that if you use the Applicative instance of Data.Functor.Compose to smash together two StateL's into what should effectively then opperate *lazily* as StateL does, by the Applicative instance offered by Compose
2021-11-01 19:00:29	dartford	tomsmeding: ok, thanks for your help
2021-11-01 19:00:43	dartford	ill wait to see if anyone else picks up the convo before continuing
2021-11-01 19:01:18	→	cfricke has joined #haskell
2021-11-01 19:01:19	→	hololeap_ has joined #haskell
2021-11-01 19:01:50	←	hololeap has quit (Ping timeout: 276 seconds)
2021-11-01 19:02:22	dartford	i guess in the worst case i would just have to write my own version of compose, posibly that just accepts stateL encoded data, to ensure its applicative instance is lazy as required
2021-11-01 19:02:34	dartford	not quite sure how that would work, but anyway...
2021-11-01 19:02:52	dartford	this is turning into a nightmare
2021-11-01 19:03:21	[exa]	do you have some example of code of how the probability monad should work?
2021-11-01 19:03:26	dartford	probablistic stream algebras they say, easy they say
2021-11-01 19:04:02	dartford	[exa]: thats very simple. something like do; x <- gausian1d (0,1)
2021-11-01 19:04:17	[exa]	what's the type of `x` after that?
2021-11-01 19:04:20	←	hendursa1 has quit (Quit: hendursa1)
2021-11-01 19:04:23	dartford	or, gausian1d (0,1) >>= \x -> ... 
2021-11-01 19:04:25	[exa]	"type"....semantics
2021-11-01 19:04:29	dartford	x :: Double here
2021-11-01 19:04:39	[exa]	so it draws from the distribution, I see
2021-11-01 19:04:42	dartford	yeah
2021-11-01 19:04:54	dartford	and this requires the rng seed is updated behind the scenes
2021-11-01 19:04:57	[exa]	ok so far that's a monad that just holds a RNG
2021-11-01 19:05:01	dartford	its in a StateL composition somehow
2021-11-01 19:05:12	dartford	yeah, its just a fancy version of a pair with an int
2021-11-01 19:05:19	[exa]	how did you get to StateL?
2021-11-01 19:05:25	dartford	probably one of these lazy pairs from the StateT applicative instance example
2021-11-01 19:05:39	dartford	[exa] StateL appears in mapAccumL
2021-11-01 19:05:51	dartford	this is the basis for the idea of scanners
2021-11-01 19:06:01	[exa]	trying to hoogle in vain, lemme click backlog
2021-11-01 19:06:11	dartford	not all applicatives being lazy, scanners being the subset of traversals which use lazy applicatives, basically
2021-11-01 19:06:42	dartford	[exa] dont worry, we can work even with a custom instance, as long as it has a lazy applicative instance
2021-11-01 19:06:58	[exa]	oh wow that's the StateLegendary, with the tuple that just™ fmaps™
2021-11-01 19:07:07	dartford	ie that when used with traverse that we get a rewrite rule for two subsequent mapAccumL's to compose into one
2021-11-01 19:07:22	dartford	[exa]: pardon1?
2021-11-01 19:07:49	[exa]	what would be an example of the 2 mapAccumL's ?
2021-11-01 19:07:55	[exa]	(that should compose)
2021-11-01 19:08:00	dartford	let me get the type hang on
2021-11-01 19:08:03	dartford	:t mapAccumL
2021-11-01 19:08:04	lambdabot	Traversable t => (a -> b -> (a, c)) -> a -> t b -> (a, t c)
2021-11-01 19:08:21	dartford	so the functions that you want to compose are these ... er wait let me uncurry that
2021-11-01 19:08:26	dartford	:t uncurry mapAccumL
2021-11-01 19:08:27	lambdabot	Traversable t => (a -> b -> (a, c), a) -> t b -> (a, t c)
2021-11-01 19:08:40	dartford	so you would have 2 of that first argument
2021-11-01 19:08:51	dartford	each needs its own initial state
2021-11-01 19:08:56	dartford	and state update function
2021-11-01 19:09:05	dartford	then, the initial states should compose into a pair
2021-11-01 19:09:24	dartford	and then you would have the `a' appearing in the state update function also ending up as a pair
2021-11-01 19:09:36	dartford	so it acts to accept and update the tuple of both states
2021-11-01 19:09:37	dartford	clear?
2021-11-01 19:09:52	[exa]	not sure what's the point of that
2021-11-01 19:10:01	[exa]	wait
2021-11-01 19:10:38	dartford	well, suppose it wasnt lazy, then you couldnt do that
2021-11-01 19:10:40	[exa]	why'd you want to compose the tuples manually when you'd have a monad below that does it for you? (mapAccumL kinda becomes traverse)
2021-11-01 19:10:53	dartford	notionally it nyams up one element at a time, and passes it through to the next accumulator
2021-11-01 19:11:02	dartford	next scanner
2021-11-01 19:11:04	dartford	whatever
2021-11-01 19:11:26	dartford	its just the idea that we get an algebra for scanners as a result of the lazyness
2021-11-01 19:11:34	dartford	it wouldnt *work* if it wasnt lazy
2021-11-01 19:11:42	dartford	but its difficult to express that 
2021-11-01 19:11:56	[exa]	so you want something like:  mapAccumL (...) `magicCompose` mapAccumL (...)  ?
2021-11-01 19:11:58	dartford	because the first thing would hang, you would never be able to realise the composed version
2021-11-01 19:12:13	[exa]	it's as difficult as writing an example of the cool thing it does at the end
2021-11-01 19:12:18	dartford	[exa] exactly, it becomes monoidal under `magicCompose'
2021-11-01 19:12:38	→	hendursaga has joined #haskell
2021-11-01 19:12:56	dartford	but only with the lazy applicatives, so instead of bothering with traverse that could break, and supplying StateL's only
2021-11-01 19:13:03	[exa]	ok and what would be the problem of writing that as `traverse (...) >> traverse (...)` with a custom state inside, as lazy as you want?
2021-11-01 19:13:14	dartford	just combine them to keep the user from breaking it, and end up with Scanners as an actual thing
2021-11-01 19:13:45	dartford	kind of as a safety net, and to encapsulate this idea of stream transduction only working with lazy applicatives
2021-11-01 19:13:46	[exa]	(or *> to keep it applicative)
2021-11-01 19:14:09	ℹ	hololeap_ is now known as hololeap
2021-11-01 19:14:30	dartford	im not sure i understand
2021-11-01 19:14:51	dartford	you could certainly write it using traverse
2021-11-01 19:15:05	dartford	perhaps you dont agree with the notion of scanners as being well motivated
2021-11-01 19:15:05	Tisoxin	Are GADts a complete replacement for the normal data type declarations?
2021-11-01 19:15:49	dartford	Tisoxin: no, you do away with user defined records, but gain something in terms of actual type signatures, eg being able to add constraints
2021-11-01 19:16:10	Tisoxin	hm
2021-11-01 19:16:20	Tisoxin	I have a problem apart from records
2021-11-01 19:16:48	[exa]	dartford: re "safety", what would be the unsafe situation there? It starts consuming randomness forever?
2021-11-01 19:17:14	[exa]	also not sure what "scanners" is, pls elucidate. :]
2021-11-01 19:18:18	dartford	well suppose one traverse used StateR by mistake
2021-11-01 19:18:42	dartford	then it would hang, and none of the values would make it through to the next state update function aka scanner
2021-11-01 19:19:01	Tisoxin	dartford: I need the equivalent of `type Test = (String, Expr)`, where Expr should be a GADT
2021-11-01 19:19:01	dartford	[exa] scanners is just traversals where the applicative is restricted to StateL
2021-11-01 19:19:18	dartford	thats easy
2021-11-01 19:19:19	[exa]	ok good, and why should it hang?
2021-11-01 19:19:27	[exa]	it doesn't click still
2021-11-01 19:19:35	dartford	because if it tries to consume the last element first, and the stream is infinite...
2021-11-01 19:19:39	Tisoxin	`type Test = (Int, Expr (forall p. p))` apparently doesn't work yet (v. 8.10.7 GHC)
2021-11-01 19:19:45	dartford	you cant traverse streams from the right
2021-11-01 19:20:01	dartford	streams being strictly infinite lists
2021-11-01 19:20:08	→	shapr has joined #haskell
2021-11-01 19:20:17	←	chexum_ has quit (Remote host closed the connection)
2021-11-01 19:20:30	dartford	so, while i can write a Traversable instance, it might break, so i should just be contented with being restricted to using scanners instead
2021-11-01 19:20:48	→	chexum has joined #haskell
2021-11-01 19:20:48	dartford	ie, write a Scanner instance, not a Traversable instance, when you have a strictly infinite list
2021-11-01 19:20:55	←	max22- has quit (Ping timeout: 260 seconds)
2021-11-01 19:20:57	[exa]	ah okay, cool, so basically you want a kinda-total subset of all possible operations on streams
2021-11-01 19:21:23	dartford	the traversables that dont hang
2021-11-01 19:21:27	c_wraith	lazy state is neither necessary nor sufficient for that
2021-11-01 19:21:28	dartford	traversals*
2021-11-01 19:21:51	dartford	c_wraith: there are some subtelties to do with IO we encountered yesterday
2021-11-01 19:22:22	dartford	basically, you have to have IO in the stack of composed StateL's if its going to be able to do anything 
2021-11-01 19:22:25	dartford	is that what you mean?
2021-11-01 19:22:31	dartford	what else is wrong with it?
2021-11-01 19:22:55	[exa]	dartford: where did you get IO in there?
2021-11-01 19:23:00	c_wraith	using a lazy state type doesn't actually guarantee the operations you do with it are sufficiently non-strict
2021-11-01 19:23:02	[exa]	I thought it's a RNG monad :]
2021-11-01 19:23:14	dartford	oh no, even more stacked things
2021-11-01 19:23:52	c_wraith	and there are a lot of other Applicative instances which can work in certain cases.
2021-11-01 19:23:56	dartford	c_wraith: are you saying that depending on how the state update function uses the encoutered elements, that somehow they could demand the next element, and break the whole thing!?
2021-11-01 19:23:59	dartford	that would be terrible!
2021-11-01 19:24:24	[exa]	dartford: SW eng advice-- make a maximal sample that works for you now, and then show us how you break it, that's going to trigger people into solving it. For me this stuff here is pretty much too abstract.
2021-11-01 19:24:27	dartford	the IO thing was just because if you want it to return any effect before it reaches the end of the infinite stream
2021-11-01 19:24:31	c_wraith	yes, you can create unfounded circular data dependencies
2021-11-01 19:24:43	dartford	well, lets not do that
2021-11-01 19:24:48	dartford	:-/
2021-11-01 19:24:53	dartford	not sure what to say really
2021-11-01 19:25:00	dartford	scanners recieve pushback
2021-11-01 19:25:09	dartford	i like the idea anyway
2021-11-01 19:25:19	dartford	i dont need traverse, just mapAccumL
2021-11-01 19:25:22	dartford	in some cases
2021-11-01 19:25:23	[exa]	dartford: to prevent the magic strictness from happening you can make your own "realworld token" and pass it around
2021-11-01 19:25:33	c_wraith	also, for what it's worth, you really should be modelling traverse_ instead of traverse
2021-11-01 19:26:00	dartford	[exa] that sounds utterly brutal
2021-11-01 19:26:02	[exa]	dartford: but at that point you just want to materialize a complete eDSL for it, and avoid reliance on haskell strictness rules
2021-11-01 19:26:04	dartford	but like it could work!
2021-11-01 19:26:05	[exa]	yep
2021-11-01 19:26:22	dartford	whats traverse_ ?
2021-11-01 19:26:36	c_wraith	part of Foldable
2021-11-01 19:26:47	dartford	oh, like >> instead of >>= ? to prevent some kind of applicative effect spilling over?
2021-11-01 19:27:00	dartford	% :t traverse_
2021-11-01 19:27:00	yahb	dartford: (Foldable t, Applicative f) => (a -> f b) -> t a -> f ()
2021-11-01 19:27:04	[exa]	yeah, basically `traverse ..thesame... >> return ()`
2021-11-01 19:27:23	dartford	no, it should update the contents to not be ()
2021-11-01 19:27:24	c_wraith	To prevent memory waste caused by holding on to values that will never get returned
2021-11-01 19:27:29	dartford	otherwise it cant do mapAccumL
2021-11-01 19:27:47	dartford	its supposed to update the encountered elements, and change the carried state
2021-11-01 19:27:56	[exa]	dartford: then you want `($> ())`
2021-11-01 19:28:22	[exa]	(what's the human name for $> ? fmapconst?)
2021-11-01 19:28:33	dartford	the values will be returned? or they have to just be producing effects?
2021-11-01 19:28:42	dartford	er, i mean, no certainly they are returned
2021-11-01 19:28:44	c_wraith	I get the feeling that what you're really looking for is some kind of streaming abstraction
2021-11-01 19:28:51	dartford	thats how the next scanner has values to opperate on
2021-11-01 19:29:04	→	[itchyjunk] has joined #haskell
2021-11-01 19:29:12	dartford	only the rewritten version, written into one overall state update function, acting on the full tuples of states 
2021-11-01 19:29:15	[exa]	dartford: btw did you see Selective? I've got a serious feeling you're heading somewhere that way
2021-11-01 19:29:17	dartford	acts like you say
2021-11-01 19:29:42	←	Maxdamantus has quit (Ping timeout: 260 seconds)
2021-11-01 19:30:01	dartford	[exa] i was under the impression that what i had was very much complete, and superior in many ways to existing approaches of which im aware
2021-11-01 19:30:13	→	Maxdamantus has joined #haskell
2021-11-01 19:32:04	[exa]	dartford: I didn't see much of it yet, sorry :]
2021-11-01 19:32:25	[exa]	(likely missed a few important pastebins)
2021-11-01 19:34:20	dartford	is there a paper for selective? it looks like an actual thing
2021-11-01 19:34:36	dminuoso	Mmm, what kind of paper are you looking for?
2021-11-01 19:34:38	dartford	[exa] not to worry
2021-11-01 19:34:43	dminuoso	There's really not much to it
2021-11-01 19:34:55	dartford	this one i think!
2021-11-01 19:34:56	dartford	https://www.staff.ncl.ac.uk/andrey.mokhov/selective-functors.pdf
2021-11-01 19:35:01	[exa]	yep that one
2021-11-01 19:35:08	dminuoso	Yeah, that's the original paper
2021-11-01 19:35:15	dartford	dminuoso: whats the idea?
2021-11-01 19:35:34	dminuoso	dartford: So with selective functors you get something between applicative and monad.
2021-11-01 19:35:36	→	wroathe has joined #haskell
2021-11-01 19:35:36	←	wroathe has quit (Changing host)
2021-11-01 19:35:36	→	wroathe has joined #haskell
2021-11-01 19:36:12	dminuoso	You have static analyzability, because the *potential* effects are predetermined, and yet you have the power of chosing effects based on previous results.
2021-11-01 19:36:30	dminuoso	They're kind of like monads but with predetermined possible outcomes
2021-11-01 19:37:37	[exa]	re static analyzability, I kinda hoped to use that here to get some easy assurances on whether the stuff terminates or explodes
2021-11-01 19:37:42	→	kupi has joined #haskell
2021-11-01 19:37:46	dminuoso	One use case is say `optparse-applicative`, where this static analyzability allows the library to derive a parser and documentation from the specification. If we upgrade its applicative to selective functors, you can do something where say one command flag `-a` decides what further command flags are allowed.
2021-11-01 19:38:13	dminuoso	Another is if you had parser combinators with selective functors, you can statically analyze and optimize at compile time (say via TH).
2021-11-01 19:39:06	maerwald	dminuoso: https://imgflip.com/i/5skojf
2021-11-01 19:39:09	←	dibblego has quit (Read error: Connection reset by peer)
2021-11-01 19:41:09	→	yauhsien has joined #haskell
2021-11-01 19:41:16	←	img has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-11-01 19:44:47	→	ubert has joined #haskell
2021-11-01 19:47:37	→	max22- has joined #haskell
2021-11-01 19:48:34	→	dibblego has joined #haskell
2021-11-01 19:48:34	←	dibblego has quit (Changing host)
2021-11-01 19:48:34	→	dibblego has joined #haskell
2021-11-01 19:49:38	←	Axman6 has quit (Ping timeout: 260 seconds)
2021-11-01 19:50:11	←	JimL has quit (Ping timeout: 260 seconds)
2021-11-01 19:52:29	←	waleee has quit (Ping timeout: 268 seconds)
2021-11-01 19:53:01	→	JimL has joined #haskell
2021-11-01 19:53:02	←	tput has quit (Ping timeout: 260 seconds)
2021-11-01 19:54:43	→	cigsender has joined #haskell
2021-11-01 19:58:29	Hecate	cigsender: hello you :)
2021-11-01 19:58:29	→	img has joined #haskell
2021-11-01 19:58:44	cigsender	salut Hecate :p
2021-11-01 19:58:54	Hecate	cigsender: how are you doing? 
2021-11-01 19:59:28	cigsender	not bad! pondering the CLC issues that have been sparking discussion
2021-11-01 19:59:32	cigsender	and you?
2021-11-01 20:02:06	←	ChaiTRex has quit (Remote host closed the connection)
2021-11-01 20:02:30	←	Jing has quit (Quit: Textual IRC Client: www.textualapp.com)
2021-11-01 20:02:37	→	ChaiTRex has joined #haskell
2021-11-01 20:03:52	Hecate	cigsender: pondering if I should pile-up with my own proposal to imitate Rust on having PartialEq/PartialOrd :3
2021-11-01 20:04:06	Hecate	but we need the mechanism to change a typeclass's superclass ± seamlessly first
2021-11-01 20:04:20	Hecate	and I simply do not posess the brainpower to implement that
2021-11-01 20:04:31	Hecate	hmm
2021-11-01 20:04:37	Hecate	that being said we could have them separated 
2021-11-01 20:04:48	Hecate	without any superclass dependency
2021-11-01 20:05:18	Hecate	and say "y'all we give you three years to add PartialEq & PartialOrd to your stuff"
2021-11-01 20:05:42	maerwald	we'll first have to come up with a new proposal process before we can discuss that
2021-11-01 20:05:57	Hecate	isn't there already the new proposal process, maerwald ?
2021-11-01 20:05:58	cigsender	a new proposal process for GHC?
2021-11-01 20:06:08	Hecate	I'm speaking of base here
2021-11-01 20:06:26	maerwald	a proposal process for asking questions
2021-11-01 20:06:35	Hecate	tss
2021-11-01 20:06:39	Hecate	silly maerwald 
2021-11-01 20:06:50	maerwald	only occasionally
2021-11-01 20:07:45	⚡	cigsender sighs in bureaucracy
2021-11-01 20:08:08	←	mjrosenb has quit (Ping timeout: 260 seconds)
2021-11-01 20:08:27	Hecate	oh btw cigsender, you're not in https://github.com/haskell-core/core-libraries-proposals ?
2021-11-01 20:08:31	→	neurocyte0132889 has joined #haskell
2021-11-01 20:08:31	←	neurocyte0132889 has quit (Changing host)
2021-11-01 20:08:31	→	neurocyte0132889 has joined #haskell
2021-11-01 20:08:32	Hecate	in the table of the README
2021-11-01 20:08:56	←	dibblego has quit (Read error: Connection reset by peer)
2021-11-01 20:09:35	cigsender	oh yeah the new link is https://github.com/haskell/core-libraries-committee
2021-11-01 20:09:42	cigsender	i'd never heard of that other one
2021-11-01 20:09:47	←	wroathe has quit (Ping timeout: 260 seconds)
2021-11-01 20:09:53	Hecate	:'')
2021-11-01 20:10:02	Hecate	I had it in my browser history apparently
2021-11-01 20:10:14	Hecate	chessai should remove that org
2021-11-01 20:10:41	⚡	geekosaur keeps misreading that /nick as "cisgender" and wondering why you'd point that up
2021-11-01 20:11:33	←	jpds has quit (Remote host closed the connection)
2021-11-01 20:12:00	→	jpds has joined #haskell
2021-11-01 20:12:13	←	alx741 has quit (Ping timeout: 268 seconds)
2021-11-01 20:13:43	→	jespada has joined #haskell
2021-11-01 20:14:09	→	Fred9 has joined #haskell
2021-11-01 20:15:51	→	dibblego has joined #haskell
2021-11-01 20:15:51	←	dibblego has quit (Changing host)
2021-11-01 20:15:51	→	dibblego has joined #haskell
2021-11-01 20:16:24	Hecate	geekosaur: yes, same brainfart here
2021-11-01 20:16:25	Hecate	:D
2021-11-01 20:16:38	←	neurocyte0132889 has quit (Read error: Connection reset by peer)
2021-11-01 20:19:01	→	betelgeuse has joined #haskell
2021-11-01 20:19:26	maerwald	. o O ( maybe a proposal process for all my issue trackers )
2021-11-01 20:20:18	→	TomWesterhout[m] has joined #haskell
2021-11-01 20:22:21	→	neurocyte0132889 has joined #haskell
2021-11-01 20:22:21	←	neurocyte0132889 has quit (Changing host)
2021-11-01 20:22:21	→	neurocyte0132889 has joined #haskell
2021-11-01 20:23:28	→	drdo6 has joined #haskell
2021-11-01 20:24:47	←	johnjay has quit (Ping timeout: 260 seconds)
2021-11-01 20:25:14	←	drdo has quit (Ping timeout: 260 seconds)
2021-11-01 20:25:15	ℹ	drdo6 is now known as drdo
2021-11-01 20:26:32	→	wroathe has joined #haskell
2021-11-01 20:26:32	←	wroathe has quit (Changing host)
2021-11-01 20:26:32	→	wroathe has joined #haskell
2021-11-01 20:27:27	→	johnjay has joined #haskell
2021-11-01 20:27:32	cigsender	the trick is: i'm not cisgender :D
2021-11-01 20:27:52	←	dartford has quit (Quit: Connection closed)
2021-11-01 20:27:56	merijn	I pretty much assumed that was an intentional spoonerism for that reason
2021-11-01 20:28:42	merijn	I get irrationally annoyed by the name, because my brain wants to parse it as, like, SIGSENDER or some other unix signal >.>
2021-11-01 20:29:01	maerwald	that's some serious PTSD right there :D
2021-11-01 20:29:12	←	tdwamdors^ has quit (Remote host closed the connection)
2021-11-01 20:29:34	merijn	maerwald: I had to dig through cpython source code with an open APUE to figure out what they broke and how, so yes :p
2021-11-01 20:31:15	←	wroathe has quit (Ping timeout: 260 seconds)
2021-11-01 20:32:30	←	yauhsien has quit (Remote host closed the connection)
2021-11-01 20:33:06	→	yauhsien has joined #haskell
2021-11-01 20:33:56	maerwald	I'll switch gladly with you, then you can try to figure out how blockchains work
2021-11-01 20:34:05	merijn	Easy
2021-11-01 20:34:14	merijn	They don't. Next question :)
2021-11-01 20:34:33	maerwald	next question would be: how did I end up here
2021-11-01 20:34:36	⚡	maerwald mumbles
2021-11-01 20:36:01	←	lortabac has quit (Quit: WeeChat 2.8)
2021-11-01 20:36:50	merijn	So, in Dutch (and German, I think?) we have a term for "feeling shame for someone else's behaviour". I wonder if we can invent a similar term for when other people's behaviour traumatises me in their place. Because that'd describe the effect of "everyone else's posix code" on me >.>
2021-11-01 20:37:24	maerwald	posix has principles at least, even if some are misguided
2021-11-01 20:38:07	←	yauhsien has quit (Ping timeout: 268 seconds)
2021-11-01 20:38:50	maerwald	also, I've been looking more closely into windows filesystem API
2021-11-01 20:38:58	maerwald	so if you think you've seen it all... well
2021-11-01 20:39:08	merijn	maerwald: My complaint isn't with posix
2021-11-01 20:39:23	merijn	maerwald: My complaint is that people write *terrible* posix code using deprecated and broken interfaces
2021-11-01 20:39:30	maerwald	well, posix provides difficult APIs
2021-11-01 20:39:40	merijn	Yes, but people *think* they're easy
2021-11-01 20:40:13	→	eggplantade has joined #haskell
2021-11-01 20:40:35	←	acidjnk has quit (Ping timeout: 260 seconds)
2021-11-01 20:40:55	maerwald	well, I looked at posix_spawn and the process code that uses it... it's also a family of functions (as always) with initilization and all sorts of stuff you don't care about
2021-11-01 20:41:12	←	neurocyte0132889 has quit (Ping timeout: 268 seconds)
2021-11-01 20:41:42	→	neurocyte0132889 has joined #haskell
2021-11-01 20:41:43	←	neurocyte0132889 has quit (Changing host)
2021-11-01 20:41:43	→	neurocyte0132889 has joined #haskell
2021-11-01 20:41:49	maerwald	it's almost like you need an algorithm to correctly use posix API
2021-11-01 20:43:22	maerwald	windows API documentation is much nicer... the awful details are usually 5 clicks away and the base page gives you an impression of "wow, this function is surely well-defined"
2021-11-01 20:43:24	maerwald	until you run it
2021-11-01 20:43:38	shapr	@quote
2021-11-01 20:43:39	lambdabot	xentrac says: I ?15;2~|"
2021-11-01 20:43:42	shapr	whoa
2021-11-01 20:44:54	←	eggplantade has quit (Ping timeout: 268 seconds)
2021-11-01 20:45:26	→	zys has joined #haskell
2021-11-01 20:51:22	←	zys has quit (Ping timeout: 260 seconds)
2021-11-01 20:53:07	→	slowButPresent has joined #haskell
2021-11-01 20:54:31	→	mjrosenb has joined #haskell
2021-11-01 20:54:40	←	cigsender has quit (Quit: Lost terminal)
2021-11-01 20:56:15	→	alx741 has joined #haskell
2021-11-01 20:58:25	→	cigsender has joined #haskell
2021-11-01 21:00:54	←	Farzad has quit (Quit: Leaving)
2021-11-01 21:04:53	←	sy4 has quit (Quit: WeeChat 1.9.1)
2021-11-01 21:05:15	→	zmt01 has joined #haskell
2021-11-01 21:05:23	←	jespada has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-11-01 21:07:01	→	jespada has joined #haskell
2021-11-01 21:07:20	←	takuan has quit (Remote host closed the connection)
2021-11-01 21:07:42	←	jespada has quit (Client Quit)
2021-11-01 21:10:32	→	eggplantade has joined #haskell
2021-11-01 21:13:56	→	johnny_sitar has joined #haskell
2021-11-01 21:14:23	←	cfricke has quit (Quit: WeeChat 3.3)
2021-11-01 21:14:58	←	Fred9 has quit (Quit: Connection closed)
2021-11-01 21:17:51	→	lbseale has joined #haskell
2021-11-01 21:18:40	→	Null_A has joined #haskell
2021-11-01 21:20:41	→	yauhsien has joined #haskell
2021-11-01 21:22:21	←	johnny_sitar has quit (Quit: Leaving.)
2021-11-01 21:22:38	→	johnny_sitar has joined #haskell
2021-11-01 21:22:38	←	johnny_sitar has quit (Client Quit)
2021-11-01 21:23:06	→	fendor__ has joined #haskell
2021-11-01 21:24:22	←	raehik has quit (Ping timeout: 268 seconds)
2021-11-01 21:25:05	→	johnny_sitar has joined #haskell
2021-11-01 21:25:23	←	yauhsien has quit (Ping timeout: 260 seconds)
2021-11-01 21:26:13	←	fendor_ has quit (Ping timeout: 268 seconds)
2021-11-01 21:26:38	←	[itchyjunk] has quit (Remote host closed the connection)
2021-11-01 21:28:25	←	johnny_sitar has quit (Client Quit)
2021-11-01 21:29:05	←	acidsys has quit (Excess Flood)
2021-11-01 21:29:38	→	johnny_sitar has joined #haskell
2021-11-01 21:29:40	→	acidsys has joined #haskell
2021-11-01 21:30:50	[exa]	ignoring the fact that unbounded dependencies are Just Bad, is there any reason why would cabal choose to install a historical brick-0.26 incompatible with any current base in case I specify unbounded `build-depends: base, brick, vty, vector` ?
2021-11-01 21:31:02	[exa]	(alternatively, is there any option for tracking the decisions & finding why's ?
2021-11-01 21:31:28	→	myShoggoth has joined #haskell
2021-11-01 21:31:52	myShoggoth	Haskell Foundation Office Hours: https://www.twitch.tv/myshoggoth
2021-11-01 21:32:08	c_wraith	was there a previous build plan for that project that it might still be getting some version info from?
2021-11-01 21:32:14	maerwald	[exa]: it has less dependencies... check the diff of them
2021-11-01 21:32:19	maerwald	one of them must be the reason
2021-11-01 21:32:45	[exa]	like, if I specify something sane like `brick > 0.60`, the new version (0.64.2 afaik) gets installed without any problems
2021-11-01 21:33:01	[exa]	so just kinda thinking why cabal decides on the older
2021-11-01 21:33:35	[exa]	"less dependencies" is a criterion for selection?
2021-11-01 21:33:42	maerwald	no
2021-11-01 21:33:45	shapr	myShoggoth: whoa, I'll come to office hours if these happen regularly.
2021-11-01 21:33:47	[exa]	c_wraith: how do I find that?
2021-11-01 21:34:10	[exa]	(the project is completely new and fresh)
2021-11-01 21:34:14	←	neurocyte0132889 has quit (Ping timeout: 268 seconds)
2021-11-01 21:34:18	c_wraith	then no, there wouldn't be.
2021-11-01 21:34:33	maerwald	it's possible that it's trying older versions before e.g. checking different flag configuration
2021-11-01 21:34:47	[exa]	hm that could work with brick+vty
2021-11-01 21:36:30	jlamothe	Does anyone know if there's an equivalent to bracket that'll work on an arbitrary MonadIO?
2021-11-01 21:37:02	maerwald	@hoogle bracket
2021-11-01 21:37:02	lambdabot	Control.Exception bracket :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
2021-11-01 21:37:02	lambdabot	Control.Exception.Base bracket :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
2021-11-01 21:37:02	lambdabot	GHC.IO bracket :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
2021-11-01 21:37:33	c_wraith	jlamothe: that's not possible in general.  But there are several packages that provide classes that can work, like MonadCatch
2021-11-01 21:37:45	cigsender	jlamothe: check in UnliftIO? there's a bunch of MonadIO versions of base functions there
2021-11-01 21:38:01	maerwald	https://hackage.haskell.org/package/exceptions-0.10.4/docs/Control-Monad-Catch.html#v:bracket
2021-11-01 21:38:05	→	neurocyte0132889 has joined #haskell
2021-11-01 21:38:05	←	neurocyte0132889 has quit (Changing host)
2021-11-01 21:38:05	→	neurocyte0132889 has joined #haskell
2021-11-01 21:38:08	maerwald	no need to look in unliftioo
2021-11-01 21:38:33	jlamothe	That's what I thought. I basically wanted to confirm that I wasn't missing something.
2021-11-01 21:38:55	←	johnny_sitar has quit (Ping timeout: 260 seconds)
2021-11-01 21:40:16	jlamothe	It's fine. I can work with just a regular IO. I was just trying (unsuccessfully) to be fancy.
2021-11-01 21:40:30	c_wraith	[exa]: what version of ghc?
2021-11-01 21:41:11	→	yauhsien has joined #haskell
2021-11-01 21:42:00	jlamothe	I generally hate exceptions. I much prefer functions whose output types have a way of representing a failure state, then you don't have to worry about forgetting to catch it.
2021-11-01 21:43:45	[exa]	c_wraith: 9.0.1, fresh from the binary builds, same cabal
2021-11-01 21:44:28	←	eggplantade has quit (Remote host closed the connection)
2021-11-01 21:45:25	c_wraith	[exa]: hmm.  testing with ghc 9.2 makes me suspicious...
2021-11-01 21:46:31	c_wraith	[exa]: yeah, I think I see what's going on.  brick 0.26 has a base <5 constraint.  starting at 0.26.1, it gets a tighter bound on base
2021-11-01 21:46:55	[exa]	aaaaaah yes that could make some sense
2021-11-01 21:46:56	c_wraith	[exa]: I think the solver is preferring wider version bounds
2021-11-01 21:47:30	→	eggplantade has joined #haskell
2021-11-01 21:48:13	[exa]	yeah that makes sense because the 0.26 actually fails on Monoid/Semigroup portability bug
2021-11-01 21:48:54	[exa]	....someone could really fix that in hackage. :D
2021-11-01 21:49:17	[exa]	anyway yeah thanks for catching this, sounds plausible to me
2021-11-01 21:51:39	maerwald	c_wraith: that sounds like a bug :>
2021-11-01 21:51:46	→	johnny_sitar has joined #haskell
2021-11-01 21:51:49	←	johnny_sitar has quit (Remote host closed the connection)
2021-11-01 21:52:27	→	johnny_sitar has joined #haskell
2021-11-01 21:53:21	[exa]	oioi
2021-11-01 21:54:28	[exa]	no like, technically there's no problem with picking that version (from cabal side) because it looks plausible and certainly seems to cause less compilation
2021-11-01 21:55:41	c_wraith	maerwald: doesn't sound like a bug to me. it's a heuristic for finding *some* package set that satisfies the requested constraints.
2021-11-01 21:56:05	c_wraith	I would say maybe it's not an ideal heuristic. but that's not the same as being just wrong.
2021-11-01 21:56:33	maerwald	it's picking an older version, while a newer version would satisfy the constraints as well
2021-11-01 21:56:46	maerwald	that's undesired
2021-11-01 21:56:48	geekosaur	how's it supposed to know it's wrong? it needs the constraints to make sense
2021-11-01 21:58:05	→	tzh has joined #haskell
2021-11-01 21:59:16	c_wraith	isn't there a package manager for another language that, by policy, will always pick the oldest set of packages that satisfy the constraints?
2021-11-01 21:59:29	c_wraith	people don't always want the newest thing.
2021-11-01 22:00:10	c_wraith	(I think lock files are a better solution to what that package manager was trying to do, but that's a different issue)
2021-11-01 22:01:38	←	ec has quit (Remote host closed the connection)
2021-11-01 22:03:14	→	Lycurgus has joined #haskell
2021-11-01 22:03:32	maerwald	I think the number of people who expect this behavior is low
2021-11-01 22:03:46	→	ystael has joined #haskell
2021-11-01 22:06:38	c_wraith	which provides a good argument that the heuristic could be improved. but that's not the same as "this is a bug"
2021-11-01 22:07:21	c_wraith	a big would imply it wasn't fulfilling its spec. it is here... the spec is very loose.
2021-11-01 22:07:47	c_wraith	my spelling, on the other hand, might be considered buggy
2021-11-01 22:08:54	[exa]	maerwald: you might get "recompile everything after each cabal update" if you forced newer versions... but yeah here it could make some sense
2021-11-01 22:09:07	maerwald	c_wraith: we can debate semantics of the term "bug", sure
2021-11-01 22:09:17	maerwald	I think breaking users expectations is a bug
2021-11-01 22:09:19	[exa]	I assume the brick 0.26 version in hackage can't be "fixed" anymore?
2021-11-01 22:09:36	maerwald	[exa]: I think it can be marked as deprecated
2021-11-01 22:09:39	maerwald	which affects  the solver
2021-11-01 22:09:54	c_wraith	a metadata revision could also be issued
2021-11-01 22:10:00	[exa]	where's the button for that? :D
2021-11-01 22:10:12	maerwald	you need to be a maintainer to do that
2021-11-01 22:10:23	c_wraith	I'm not sure anyone other than hackage trustees can do that
2021-11-01 22:10:39	geekosaur	hm. wouldn't you have to deprecate it and all earlier versions, in case it decides to build an even older one?
2021-11-01 22:10:49	[exa]	likely
2021-11-01 22:11:05	awpr	I revise my version bounds all the time.  it's not limited to Hackage trustees
2021-11-01 22:11:28	c_wraith	I used to work with the author of brick. but I no longer have a convenient way to yell at him. :P
2021-11-01 22:11:32	[exa]	so the best way to communicate that would be IMO to open an issue in brick repo?
2021-11-01 22:12:03	←	ByronJohnson has quit (Ping timeout: 260 seconds)
2021-11-01 22:12:10	maerwald	only time will tell
2021-11-01 22:12:30	[exa]	I'm going to open it and see
2021-11-01 22:17:43	←	burnsidesLlama has quit (Remote host closed the connection)
2021-11-01 22:17:43	sm	cabal's "randomly" picking an ancient version on any given day is if not a functionality bug, certainly a terrible ux fail 
2021-11-01 22:18:01	sclv	it doesn't randomly pick ancient versions on any given day
2021-11-01 22:18:11	sclv	it has a greedy solver that tries newest first
2021-11-01 22:18:19	sclv	and is deterministic
2021-11-01 22:18:23	c_wraith	in some sense, it was trying to maximize for forward compatibility
2021-11-01 22:18:27	→	ByronJohnson has joined #haskell
2021-11-01 22:18:49	c_wraith	sclv: well, as we've discovered, that isn't exactly what it does.
2021-11-01 22:18:54	sclv	but there's no perfect heuristic and also solving is np complete so moving to a nongreedy algorithm could introduce significant complexity
2021-11-01 22:19:02	geekosaur	rather than my doing a cabal update and having my whole xmonad+contrib setup getting rebuilt?
2021-11-01 22:19:09	sclv	c_wraith: i mean, in the code, its literally a greedy algorithm
2021-11-01 22:19:13	sclv	that tries newest first
2021-11-01 22:19:30	sclv	if it didn't do that, that's because there's some backtracking issue that drove it away from that goal
2021-11-01 22:19:30	maerwald	sm: well, what's the alternative: don't solve at all? :D
2021-11-01 22:19:35	c_wraith	sclv: it appears that it tries the thing with the highest version bound first.
2021-11-01 22:19:53	c_wraith	sclv: otherwise it wouldn't prefer brick 0.26
2021-11-01 22:19:59	awpr	perhaps it chose the newest base and then chose the only brick that worked with that?
2021-11-01 22:20:03	sclv	hrm, that doesn't sound right -- i would check the code
2021-11-01 22:20:08	sm	maerwald: that's an alternative yes, hence stack
2021-11-01 22:20:18	maerwald	sm: and when you NEED a solver, you do what? :)
2021-11-01 22:20:19	sclv	the solver is big but its factored to be easy to read
2021-11-01 22:20:30	sclv	also you can look at the -v3 trace of the solver to see why its making choices
2021-11-01 22:20:40	←	Null_A has quit (Remote host closed the connection)
2021-11-01 22:20:43	sm	you use it obviously. There's a right time for each approach
2021-11-01 22:20:43	geekosaur	I don't think it can choose the newest base, base is pinned by the compiler
2021-11-01 22:20:50	maerwald	sm: except stack doesn't have one
2021-11-01 22:21:03	sm	I didn't say it did!
2021-11-01 22:21:09	c_wraith	[exa]: any chance you're actually on GHC 9.2?
2021-11-01 22:21:13	sclv	like if it tries to pick a newer something else first, and the newer bricks have upper bounds on that thing, then that'll cause an older brick to be picked
2021-11-01 22:21:16	maerwald	sm: right, but you don't need stack to disable the solver
2021-11-01 22:21:17	sclv	because it is greedy
2021-11-01 22:21:35	sclv	instead, if you disallow that, then it is forced to use a newer brick and bactrack on the older choice
2021-11-01 22:21:49	sclv	greedy algos vary in their result based on the order of goals
2021-11-01 22:21:59	sclv	there's goal reordering heuristics in cabal, but they're necesarily ad hoc
2021-11-01 22:22:03	c_wraith	because pure greedy based on version would explain this if you ran it against GHC 9.2
2021-11-01 22:24:00	←	hololeap has quit (Remote host closed the connection)
2021-11-01 22:24:02	[exa]	c_wraith: 9.0.1
2021-11-01 22:24:33	→	thyriaen has joined #haskell
2021-11-01 22:24:48	←	johnny_sitar has quit (Ping timeout: 268 seconds)
2021-11-01 22:25:06	→	v01d4lph4 has joined #haskell
2021-11-01 22:25:07	←	v01d4lph4 has quit (Changing host)
2021-11-01 22:25:07	→	v01d4lph4 has joined #haskell
2021-11-01 22:25:24	→	hololeap has joined #haskell
2021-11-01 22:25:31	maerwald	windows filetime epoch starts in 1601-01-01 ... that's honestly how this OS feels like
2021-11-01 22:25:46	←	neurocyte0132889 has quit (Read error: Connection reset by peer)
2021-11-01 22:26:16	[exa]	re brick version bounds, feel free to discuss here https://github.com/jtdaugherty/brick/issues/341
2021-11-01 22:26:17	→	neurocyte0132889 has joined #haskell
2021-11-01 22:26:17	←	neurocyte0132889 has quit (Changing host)
2021-11-01 22:26:17	→	neurocyte0132889 has joined #haskell
2021-11-01 22:26:56	janus	maerwald: at least it has broken compat with the Antikythera mechanism from 87 BC :P
2021-11-01 22:27:04	[exa]	awpr: I assume there's no weird trick needed for changing of the dependencies in hackage and it just works?
2021-11-01 22:27:32	←	thyriaen has quit (Client Quit)
2021-11-01 22:27:56	awpr	right, there's a link on the package page to edit package information, and from there a link to edit each version's cabal file (only maintainers + trustees can access it, though)
2021-11-01 22:28:30	→	v01d4lph_ has joined #haskell
2021-11-01 22:29:19	ℹ	Papa_ is now known as papa
2021-11-01 22:29:29	sm	my point: a solver as free and powerful as cabal's current default behavior is not ideal for most users - it is too smart for them to predict and on any given day depending on factors they can't see, it can suddenly give new and unexpected results. most of the time it works brilliantly but it can't be completely relied on, without special extra configuration
2021-11-01 22:29:39	sclv	right. any maintainer can add correct upper bounds to their package, and they can use the matrix for that
2021-11-01 22:29:51	sclv	to see what works and doesnt
2021-11-01 22:30:14	sclv	trustees get involved when maintainers are not available or responsive
2021-11-01 22:30:21	←	v01d4lph4 has quit (Ping timeout: 268 seconds)
2021-11-01 22:30:37	sclv	re solvers: there's no such thing as a "dumber" solver. you either solve bounds or you dont
2021-11-01 22:31:03	→	dsrt^ has joined #haskell
2021-11-01 22:31:33	sm	sclv: I can imagine adding some extra constraints and safety belts though
2021-11-01 22:31:54	←	eggplantade has quit (Remote host closed the connection)
2021-11-01 22:34:59	ℹ	fendor__ is now known as fendor
2021-11-01 22:37:15	→	ec has joined #haskell
2021-11-01 22:39:44	→	econo has joined #haskell
2021-11-01 22:40:12	[exa]	sclv: is there any quick way to project the fails from matrix into version bounds? :] (the response was fast, here: https://github.com/jtdaugherty/brick/issues/341#issuecomment-956409689 )
2021-11-01 22:40:27	→	nickkkkk_all has joined #haskell
2021-11-01 22:41:57	awpr	+1, I would find that useful too -- I anticipate a lot of my packages will work with 9.2 at all versions, and manually typing in the cabal file changes to each one sounds unpleasant
2021-11-01 22:42:03	sm	(eg, save the plan on first success and stick to it until told otherwise ?)
2021-11-01 22:42:41	←	merijn has quit (Ping timeout: 268 seconds)
2021-11-01 22:42:51	awpr	er, I was responding to the GitHub comment rather than the IRC message -- want a CLI for bumping version bounds, rather than automation of updating bounds according to the matrix
2021-11-01 22:43:04	←	thonkpod has quit (Ping timeout: 260 seconds)
2021-11-01 22:44:33	[exa]	I guess you want a better CLI than a sed exercise right. :]
2021-11-01 22:44:53	→	thonkpod has joined #haskell
2021-11-01 22:44:56	awpr	sed would be fine, I suppose, but I don't know of a way to apply it to the metadata on Hackage
2021-11-01 22:45:30	awpr	I suppose there could be a curl-accessible way of uploading revisions, but I'm not sure I'd trust my own sed script with pushing directly to Hackage
2021-11-01 22:47:02	→	dartford has joined #haskell
2021-11-01 22:47:48	[exa]	maybe something for just downloading all packages/metadata to a git repo and pushing the changed stuff back could make 99% of it
2021-11-01 22:47:59	←	rkrishnan has quit (Ping timeout: 260 seconds)
2021-11-01 22:53:50	→	burnsidesLlama has joined #haskell
2021-11-01 22:58:43	←	burnsidesLlama has quit (Ping timeout: 268 seconds)
2021-11-01 22:58:51	dartford	i have to say, i cant understand why selective was proposed for this problem
2021-11-01 22:59:46	dartford	maybe its because of the carry?
2021-11-01 22:59:51	dartford	is that a decent use case?
2021-11-01 23:00:09	dartford	the "accumulater" or state in mapAccumL
2021-11-01 23:00:35	dartford	the paper mentions about "depending on previous values" - i wonder if selective formalises the notion of an accumlator or carry
2021-11-01 23:00:51	dartford	but perhaps i dont understand it, can anyone say?
2021-11-01 23:01:12	[exa]	dartford: not sure if it's the right abstraction but it adds the notion of a "regularly analyzable computation" which you kinda seemed to want
2021-11-01 23:01:26	[exa]	dartford: I might have missed the point as well
2021-11-01 23:02:15	dartford	this probably isnt the language i would understand unfortunately 
2021-11-01 23:02:34	dartford	is what i said right?
2021-11-01 23:03:24	→	Guest41 has joined #haskell
2021-11-01 23:03:29	dartford	what makes you think that a "regularly analyzable computation" is what i was after?
2021-11-01 23:03:52	dartford	seems like a tuatological redefinition, since it isnt itself comprehensible in an obvious way
2021-11-01 23:04:01	dartford	place is riddled with them
2021-11-01 23:05:23	dartford	i dont even understand how applicative effects are suposed to be independent
2021-11-01 23:05:36	→	raehik has joined #haskell
2021-11-01 23:05:43	dartford	and that monadic effects by contrast are "dependent on previous effects"
2021-11-01 23:05:55	dartford	and i dont get what it means to "statically declare an effect"
2021-11-01 23:06:04	dartford	its like gibberish soup at this point
2021-11-01 23:06:30	sclv	dartford: it sounds to me like you don't have enough background in the basics to be trying to ask the questions you're asking
2021-11-01 23:06:57	sclv	you can try writing the code you want directly with no typeclasses
2021-11-01 23:07:03	dartford	[exa] why did you think thats what i need?
2021-11-01 23:07:05	sclv	or you can buckle up and read some tutorials and ooks
2021-11-01 23:07:08	sclv	books
2021-11-01 23:07:32	dartford	thats quite condescending. just an observation
2021-11-01 23:08:05	[exa]	dartford: it helped me when trying to do a monad that computes weirdly measured dimensions of stuff, this seemed similar :]
2021-11-01 23:08:20	dartford	what does it mean to "declare" an effect?
2021-11-01 23:08:38	[exa]	dartford: anyway the truth is that I really don't get your problem completely, more code examples of what you want to achieve would really help
2021-11-01 23:08:41	davean	declare, definition: formally announce the beginning of (a state or condition).
2021-11-01 23:08:44	sclv	[exa]: the matrix bounds can turn into base constraints, which can suffice.
2021-11-01 23:08:44	dartford	[exa] - ah, no wonder that wasnt apparent!
2021-11-01 23:08:50	←	ec has quit (Ping timeout: 276 seconds)
2021-11-01 23:08:56	davean	reveal one's intentions or identity.
2021-11-01 23:09:28	[exa]	"write a part of declarative program"
2021-11-01 23:09:30	dartford	[exa] i was just asking what selective does
2021-11-01 23:10:33	dartford	or, how applicative is "independent" effects, vs monads as effects which can depend on previous effects 
2021-11-01 23:10:39	dartford	i dont see how that works at all
2021-11-01 23:10:48	dartford	but have plenty of "background" in both
2021-11-01 23:10:51	davean	dartford: well, look at the type class
2021-11-01 23:10:58	davean	No, you clearly lack background
2021-11-01 23:11:06	sclv	[exa]: there's also https://github.com/phadej/trustee
2021-11-01 23:11:36	davean	dartford: so with Applicative you get "(<*>) :: f (a -> b) -> f a -> f b"
2021-11-01 23:11:45	davean	as your (only) way to combine effects
2021-11-01 23:11:49	→	ec has joined #haskell
2021-11-01 23:11:52	dartford	davean: right, i dont understand the jargon. but have been using applicative and monad for nearly 15 years now
2021-11-01 23:11:58	[exa]	dartford: ah there. it's like applicatives, it can do effects that depend on previous effects, but it's highly restricted (unlike in full monads). The restriction could ensure that you almost get monads but don't do the problematic operation you were mentioning there
2021-11-01 23:12:01	sclv	[exa]: and i know some people have bulk edit scripts but i don't know where. you can just open a ticket at https://github.com/haskell-infra/hackage-trustees/issues to ask for help as well
2021-11-01 23:12:19	davean	dartford: how could you change one given one you combined before it? You clearly can't
2021-11-01 23:12:31	[exa]	sclv: ah nice thanks! (cc awpr -- the link some 6 lines above)
2021-11-01 23:12:55	dartford	which probelamatic opperation!?
2021-11-01 23:13:30	[exa]	dartford: eating data from an end of an infinite list, iirc
2021-11-01 23:13:32	dartford	davean: are you saying the order of sequential composition matters?
2021-11-01 23:13:40	davean	dartford: no, I didn't say that
2021-11-01 23:13:48	sclv	?where lyah
2021-11-01 23:13:48	lambdabot	http://www.learnyouahaskell.com/
2021-11-01 23:13:52	dartford	could you explain what you meant?
2021-11-01 23:14:18	dartford	[exa] oh right, thanks
2021-11-01 23:14:50	→	merijn has joined #haskell
2021-11-01 23:15:11	davean	dartford: I give you a :: f a and b :: f b, if I combine them - in either order - how can you change what f a or f b is?
2021-11-01 23:15:20	davean	you very clearly can't
2021-11-01 23:15:48	davean	Applicatively only gives you the ability to build an f c using the a and bs
2021-11-01 23:17:28	dartford	i wonder if thats because they sequence together in an order independent way...
2021-11-01 23:17:41	davean	Really though, you should read a tutorial
2021-11-01 23:18:43	dartford	i just read some of the comments people were saying about me at the top of this chatlog and im actually on the verge of tears
2021-11-01 23:18:53	dartford	im going to have to come back to this another time
2021-11-01 23:18:54	←	dartford has quit (Quit: Connection closed)
2021-11-01 23:19:41	←	merijn has quit (Ping timeout: 268 seconds)
2021-11-01 23:22:35	maerwald	https://haskellweekly.news/survey/2021.html
2021-11-01 23:26:16	←	mbuf has quit (Quit: Leaving)
2021-11-01 23:26:28	←	nickkkkk_all has quit (Ping timeout: 268 seconds)
2021-11-01 23:26:28	←	guniberas has quit (Ping timeout: 268 seconds)
2021-11-01 23:27:24	→	cosimone has joined #haskell
2021-11-01 23:29:06	→	Null_A has joined #haskell
2021-11-01 23:32:24	→	eggplantade has joined #haskell
2021-11-01 23:34:46	shapr	yay survey!
2021-11-01 23:34:48	→	emf has joined #haskell
2021-11-01 23:34:52	davean	"Do you use Haskell?" Where is the "I neither confirm or deny I engage in this deviant act"?
2021-11-01 23:36:03	←	euandreh has quit (Ping timeout: 260 seconds)
2021-11-01 23:36:53	→	euandreh has joined #haskell
2021-11-01 23:36:59	←	eggplantade has quit (Ping timeout: 260 seconds)
2021-11-01 23:37:10	←	yauhsien has quit (Remote host closed the connection)
2021-11-01 23:37:56	→	yauhsien has joined #haskell
2021-11-01 23:38:11	←	raehik has quit (Ping timeout: 268 seconds)
2021-11-01 23:38:26	←	yrlnry has quit (Ping timeout: 260 seconds)
2021-11-01 23:39:55	→	burnsidesLlama has joined #haskell
2021-11-01 23:40:13	→	raehik has joined #haskell
2021-11-01 23:42:38	←	yauhsien has quit (Ping timeout: 260 seconds)
2021-11-01 23:43:15	←	v01d4lph_ has quit (Remote host closed the connection)
2021-11-01 23:43:20	monochrom	I think the close-tab/window button is th "I neither confirm nor deny" button :)
2021-11-01 23:43:45	→	eggplantade has joined #haskell
2021-11-01 23:45:52	→	v01d4lph4 has joined #haskell
2021-11-01 23:46:02	→	nickkkkk_all has joined #haskell
2021-11-01 23:47:26	←	euandreh has quit (Ping timeout: 268 seconds)
2021-11-01 23:48:18	←	Null_A has quit (Remote host closed the connection)
2021-11-01 23:52:51	←	v01d4lph4 has quit (Remote host closed the connection)
2021-11-01 23:57:32	→	timCF_ has joined #haskell
2021-11-02 00:02:11	←	burnsidesLlama has quit (Remote host closed the connection)
2021-11-02 00:04:42	←	neurocyte0132889 has quit (Ping timeout: 268 seconds)
2021-11-02 00:06:31	timCF_	Did anybody thought how might be possible to express in Haskell type system some sort of typical school-math compatible computations like `let distance :: Meter = 1; let time :: Second = 2; let speed :: Meter `Per` Second = distance / time`? Ideally in a way where left and right sides of `Per` type constructor will simplify themselves to canonical form and remove redundant type factor (in case something 
2021-11-02 00:06:37	timCF_	is presented in both left and right and might be remove because of redundancy)
2021-11-02 00:07:38	←	Vajb has quit (Read error: Connection reset by peer)
2021-11-02 00:07:57	→	neurocyte0132889 has joined #haskell
2021-11-02 00:07:57	←	neurocyte0132889 has quit (Changing host)
2021-11-02 00:07:57	→	neurocyte0132889 has joined #haskell
2021-11-02 00:08:14	→	Vajb has joined #haskell
2021-11-02 00:08:29	davean	monochrom: ok, perfect. Thank you for your assistance, I've answered thusly
2021-11-02 00:08:48	davean	timCF_: Thats pretty standard
2021-11-02 00:09:03	davean	https://hackage.haskell.org/package/dimensional etc
2021-11-02 00:09:07	→	yrlnry has joined #haskell
2021-11-02 00:09:08	davean	timCF_: people use that all the time
2021-11-02 00:09:26	davean	(Theres several other implimentations, that just happens to be the one I've been using when I need it)
2021-11-02 00:10:52	←	chomwitt has quit (Ping timeout: 268 seconds)
2021-11-02 00:11:20	→	yauhsien has joined #haskell
2021-11-02 00:11:41	timCF_	davean: cool, thanks! How this kind of stuff is named in general? I just had no idea which keywords to hoogle :)
2021-11-02 00:11:47	tomsmeding	units?
2021-11-02 00:12:44	tomsmeding	case in point: https://hackage.haskell.org/package/units (I had no idea this library existed, the name just matches my guess)
2021-11-02 00:15:02	timCF_	tomsmeding: looks good as well!
2021-11-02 00:16:25	←	yauhsien has quit (Ping timeout: 268 seconds)
2021-11-02 00:17:31	→	yauhsien has joined #haskell
2021-11-02 00:17:45	davean	timCF_: uh, its dimensional analysis
2021-11-02 00:17:48	davean	isthe general term
2021-11-02 00:19:50	→	waleee has joined #haskell
2021-11-02 00:20:44	←	nickkkkk_all has quit (Ping timeout: 268 seconds)
2021-11-02 00:21:00	timCF_	davean: thanks! 
2021-11-02 00:22:15	←	yauhsien has quit (Ping timeout: 260 seconds)
2021-11-02 00:24:08	→	v01d4lph4 has joined #haskell
2021-11-02 00:28:06	→	nickkkkk_all has joined #haskell
2021-11-02 00:33:07	→	burnsidesLlama has joined #haskell
2021-11-02 00:33:48	←	nickkkkk_all has quit (Quit: Leaving)
2021-11-02 00:34:55	←	max22- has quit (Ping timeout: 268 seconds)
2021-11-02 00:36:52	→	euandreh has joined #haskell
2021-11-02 00:39:08	→	brainfreeze has joined #haskell
2021-11-02 00:39:08	→	Nachtgespenst has joined #haskell
2021-11-02 00:39:14	←	burnsidesLlama has quit (Ping timeout: 268 seconds)
2021-11-02 00:41:46	←	jpds has quit (Remote host closed the connection)
2021-11-02 00:42:12	→	jpds has joined #haskell
2021-11-02 00:51:34	←	Vajb has quit (Read error: Connection reset by peer)
2021-11-02 00:52:09	→	Vajb has joined #haskell
2021-11-02 00:53:03	←	cosimone has quit (Ping timeout: 260 seconds)
2021-11-02 00:55:04	→	merijn has joined #haskell
2021-11-02 01:00:45	→	justsomeguy has joined #haskell
2021-11-02 01:04:55	←	v01d4lph4 has quit (Read error: Connection reset by peer)
2021-11-02 01:05:07	→	v01d4lph4 has joined #haskell
2021-11-02 01:06:45	→	vicfred has joined #haskell
2021-11-02 01:10:15	→	Tuplanolla has joined #haskell
2021-11-02 01:12:43	←	jakalx has left #haskell
2021-11-02 01:14:21	[exa]	awpr: anyway apparently the brick maintainer used this https://github.com/hackage-trustees/hackage-cli to do the edits very quickly, might be useful for the stuff you mentioned
2021-11-02 01:14:44	←	v01d4lph4 has quit (Remote host closed the connection)
2021-11-02 01:14:50	awpr	oh nice, that looks like exactly what I was looking for
2021-11-02 01:15:09	←	greyrat has quit (Ping timeout: 252 seconds)
2021-11-02 01:15:34	→	greyrat has joined #haskell
2021-11-02 01:15:50	sm	+1
2021-11-02 01:17:46	→	jakalx has joined #haskell
2021-11-02 01:22:02	→	max22- has joined #haskell
2021-11-02 01:23:11	←	Kaiepi has quit (Remote host closed the connection)
2021-11-02 01:23:24	←	tcard_ has quit (Remote host closed the connection)
2021-11-02 01:23:32	→	Kaiepi has joined #haskell
2021-11-02 01:23:40	→	tcard_ has joined #haskell
2021-11-02 01:25:06	ℹ	irc: disconnected from server
2021-11-12 14:14:01	→	oxide has joined #haskell
2021-11-12 14:14:01	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-11-12 14:14:01	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-11-12 14:14:01	ℹ	Channel #haskell: 721 nicks (1 op, 0 voices, 720 normals)
2021-11-12 14:14:02	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2021-11-12 14:14:02	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-11-12 14:18:13	→	dhruvasagar has joined #haskell
2021-11-12 14:20:39	ℹ	AlexNoo_ is now known as AlexNoo
2021-11-12 14:22:12	→	chele has joined #haskell
2021-11-12 14:23:19	→	v01d4lph4 has joined #haskell
2021-11-12 14:26:13	←	econo has quit (Quit: Connection closed for inactivity)
2021-11-12 14:26:46	←	aliosablack has quit (Ping timeout: 245 seconds)
2021-11-12 14:29:17	←	mcgroin has quit (Ping timeout: 256 seconds)
2021-11-12 14:31:04	→	mcgroin has joined #haskell
2021-11-12 14:31:31	→	cosimone has joined #haskell
2021-11-12 14:32:27	←	bitmapper has quit (Quit: Connection closed for inactivity)
2021-11-12 14:32:41	←	deadmarshal has quit (Ping timeout: 256 seconds)
2021-11-12 14:35:31	←	jlamothe has quit (Ping timeout: 256 seconds)
2021-11-12 14:36:02	→	chomwitt has joined #haskell
2021-11-12 14:36:27	→	gehmehgeh has joined #haskell
2021-11-12 14:38:22	→	jgeerds has joined #haskell
2021-11-12 14:40:26	→	max22- has joined #haskell
2021-11-12 14:46:02	←	mcgroin has quit (Ping timeout: 240 seconds)
2021-11-12 14:46:35	←	vysn has quit (Ping timeout: 264 seconds)
2021-11-12 14:47:33	→	allbery_b has joined #haskell
2021-11-12 14:47:33	←	geekosaur has quit (Killed (NickServ (GHOST command used by allbery_b)))
2021-11-12 14:47:36	ℹ	allbery_b is now known as geekosaur
2021-11-12 14:48:01	→	vysn has joined #haskell
2021-11-12 14:48:23	→	mcgroin has joined #haskell
2021-11-12 14:50:35	→	johnny_sitar has joined #haskell
2021-11-12 14:52:01	→	Guest13 has joined #haskell
2021-11-12 14:52:58	←	Guest13 has quit (Client Quit)
2021-11-12 14:56:57	→	kadir has joined #haskell
2021-11-12 14:57:20	←	phma has quit (Read error: Connection reset by peer)
2021-11-12 14:57:59	←	aplainzetakind has quit (Ping timeout: 264 seconds)
2021-11-12 14:58:35	→	phma has joined #haskell
2021-11-12 14:59:37	→	aplainzetakind has joined #haskell
2021-11-12 15:02:25	←	eggplantade has quit (Remote host closed the connection)
2021-11-12 15:04:30	→	deadmarshal has joined #haskell
2021-11-12 15:06:10	→	tengu1 has joined #haskell
2021-11-12 15:08:55	→	yauhsien has joined #haskell
2021-11-12 15:15:02	←	jakalx has left #haskell
2021-11-12 15:15:52	→	jakalx has joined #haskell
2021-11-12 15:18:32	←	yauhsien has quit (Remote host closed the connection)
2021-11-12 15:21:06	→	yauhsien has joined #haskell
2021-11-12 15:21:19	←	jgeerds has quit (Ping timeout: 250 seconds)
2021-11-12 15:24:47	←	chomwitt has quit (Ping timeout: 246 seconds)
2021-11-12 15:25:03	←	aegon has quit (Remote host closed the connection)
2021-11-12 15:25:13	←	v01d4lph4 has quit (Remote host closed the connection)
2021-11-12 15:25:13	→	chomwitt has joined #haskell
2021-11-12 15:26:02	←	yauhsien has quit (Ping timeout: 260 seconds)
2021-11-12 15:27:35	←	deadmarshal has quit (Ping timeout: 246 seconds)
2021-11-12 15:27:41	→	lavaman has joined #haskell
2021-11-12 15:30:09	←	cfricke has quit (Quit: WeeChat 3.3)
2021-11-12 15:31:38	→	deadmarshal has joined #haskell
2021-11-12 15:32:11	←	lavaman has quit (Ping timeout: 256 seconds)
2021-11-12 15:34:23	←	tengu1 has quit (Quit: Client closed)
2021-11-12 15:36:11	←	alzgh has quit (Ping timeout: 256 seconds)
2021-11-12 15:39:25	→	benin2 has joined #haskell
2021-11-12 15:40:56	←	benin has quit (Ping timeout: 245 seconds)
2021-11-12 15:42:59	→	benin has joined #haskell
2021-11-12 15:45:05	←	benin2 has quit (Ping timeout: 246 seconds)
2021-11-12 15:48:09	→	benin3 has joined #haskell
2021-11-12 15:48:56	←	benin has quit (Ping timeout: 246 seconds)
2021-11-12 15:48:56	ℹ	benin3 is now known as benin
2021-11-12 15:50:39	←	gehmehgeh has quit (Remote host closed the connection)
2021-11-12 15:51:23	→	gehmehgeh has joined #haskell
2021-11-12 16:00:03	→	yauhsien has joined #haskell
2021-11-12 16:00:30	←	cheater has quit (Remote host closed the connection)
2021-11-12 16:01:14	→	Midjak has joined #haskell
2021-11-12 16:02:38	→	benin7 has joined #haskell
2021-11-12 16:02:47	→	eggplantade has joined #haskell
2021-11-12 16:02:56	←	xff0x has quit (Ping timeout: 246 seconds)
2021-11-12 16:03:52	→	xff0x has joined #haskell
2021-11-12 16:04:20	←	benin has quit (Ping timeout: 246 seconds)
2021-11-12 16:04:20	ℹ	benin7 is now known as benin
2021-11-12 16:04:20	←	CiaoSen has quit (Ping timeout: 268 seconds)
2021-11-12 16:04:57	←	yauhsien has quit (Ping timeout: 268 seconds)
2021-11-12 16:07:35	←	eggplantade has quit (Ping timeout: 264 seconds)
2021-11-12 16:07:51	→	cheater has joined #haskell
2021-11-12 16:18:57	←	deadmarshal has quit (Ping timeout: 250 seconds)
2021-11-12 16:19:03	←	kadir has left #haskell (WeeChat 3.3)
2021-11-12 16:22:30	→	kadir has joined #haskell
2021-11-12 16:23:02	←	waleee has quit (Ping timeout: 240 seconds)
2021-11-12 16:23:10	←	mei3 has quit (Read error: Connection reset by peer)
2021-11-12 16:23:23	←	kupi has quit (Quit: Connection closed for inactivity)
2021-11-12 16:23:26	→	waleee has joined #haskell
2021-11-12 16:24:17	→	deadmarshal has joined #haskell
2021-11-12 16:24:37	→	finn_elija has joined #haskell
2021-11-12 16:24:37	←	FinnElija has quit (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
2021-11-12 16:24:37	ℹ	finn_elija is now known as FinnElija
2021-11-12 16:25:50	→	mmhat has joined #haskell
2021-11-12 16:27:30	←	Midjak has quit (Quit: Leaving)
2021-11-12 16:28:09	←	vysn has quit (Quit: WeeChat 3.2)
2021-11-12 16:28:45	→	Midjak has joined #haskell
2021-11-12 16:29:02	←	loonycyborg_ has quit (Quit: ZNC - http://znc.sourceforge.net)
2021-11-12 16:30:11	→	loonycyborg has joined #haskell
2021-11-12 16:30:51	→	alx741 has joined #haskell
2021-11-12 16:31:55	→	Gurkenglas has joined #haskell
2021-11-12 16:33:05	→	DNH has joined #haskell
2021-11-12 16:33:42	←	whatsupdoc has quit (Quit: Connection closed for inactivity)
2021-11-12 16:33:55	→	yauhsien has joined #haskell
2021-11-12 16:34:09	←	tzh has quit (Quit: zzz)
2021-11-12 16:36:42	←	jakalx has left #haskell
2021-11-12 16:38:32	←	yauhsien has quit (Ping timeout: 240 seconds)
2021-11-12 16:39:45	←	acidjnk has quit (Ping timeout: 250 seconds)
2021-11-12 16:42:43	→	zava has joined #haskell
2021-11-12 16:43:04	→	cfricke has joined #haskell
2021-11-12 16:44:07	→	benin6 has joined #haskell
2021-11-12 16:44:35	←	benin has quit (Ping timeout: 246 seconds)
2021-11-12 16:45:40	→	Pickchea has joined #haskell
2021-11-12 16:46:28	→	benin has joined #haskell
2021-11-12 16:48:26	←	benin6 has quit (Ping timeout: 246 seconds)
2021-11-12 16:49:14	→	__monty__ has joined #haskell
2021-11-12 16:55:05	→	raehik has joined #haskell
2021-11-12 16:56:16	→	zer0bitz has joined #haskell
2021-11-12 16:57:05	←	werneta has quit (Ping timeout: 264 seconds)
2021-11-12 17:00:29	→	mark___ has joined #haskell
2021-11-12 17:00:39	←	rookie101 has quit (Quit: WeeChat 1.9.1)
2021-11-12 17:01:17	→	f-a has joined #haskell
2021-11-12 17:02:53	f-a	hello, one some linux machines my compiled program fails with «error while loading shared libraries: libffi.so.7: cannot open shared object file: No such file or directory»
2021-11-12 17:03:13	f-a	reasonably enough, since I use ForeignFunctionInterface in a module
2021-11-12 17:03:57	f-a	question is: if I somehow remove that module, will I still need libffi? In general, is there a way to check which module/import necessitases libxyz?
2021-11-12 17:04:27	f-a	and second question: is there a way I can pack libffi.so.7 in the same executable (or at least in the same zip)?
2021-11-12 17:05:32	←	cosimone has quit (Remote host closed the connection)
2021-11-12 17:05:53	[exa]	f-a: "pack in the same executable" is basically "link it statically", so yes
2021-11-12 17:06:30	[exa]	otoh it is kinda preferable that the library is supplied by the target system
2021-11-12 17:07:11	f-a	it is such a basic library, but when I have a friend try it it complains about the wrong number (API?) at the end?
2021-11-12 17:07:25	f-a	makes me wonder if it could somehow choose a different one and pray
2021-11-12 17:07:35	←	chomwitt has quit (Ping timeout: 264 seconds)
2021-11-12 17:07:54	[exa]	usually if you're distributing a binary package you need to properly list dependencies, and the target site needs to install these right
2021-11-12 17:08:19	[exa]	depending on what you're trying to do I'd just advice for static linking :D
2021-11-12 17:08:21	←	merijn has quit (Ping timeout: 250 seconds)
2021-11-12 17:08:50	→	chomwitt has joined #haskell
2021-11-12 17:09:22	f-a	thanks, I will try
2021-11-12 17:09:57	→	werneta has joined #haskell
2021-11-12 17:10:19	[exa]	f-a: in any case, what are you precisely trying to achieve? move the software without recompilation?
2021-11-12 17:11:05	f-a	distribute a binary without people having to fetch a library
2021-11-12 17:11:32	f-a	since it is a frigging console app and not anything complex
2021-11-12 17:21:33	←	Pickchea has quit (Ping timeout: 256 seconds)
2021-11-12 17:21:51	→	jakalx has joined #haskell
2021-11-12 17:22:27	[exa]	f-a: in that case the static build is the way to go :]
2021-11-12 17:22:39	←	deadmarshal has quit (Ping timeout: 250 seconds)
2021-11-12 17:23:04	f-a	I am tryig executable-static, wonder why I did not think about it before…
2021-11-12 17:23:29	→	jrm2 has joined #haskell
2021-11-12 17:23:31	←	jrm has quit (Read error: Connection reset by peer)
2021-11-12 17:24:12	ℹ	jrm2 is now known as jrm
2021-11-12 17:26:24	→	burnsidesLlama has joined #haskell
2021-11-12 17:29:37	→	lavaman has joined #haskell
2021-11-12 17:35:11	←	lavaman has quit (Ping timeout: 264 seconds)
2021-11-12 17:36:21	←	raehik has quit (Ping timeout: 245 seconds)
2021-11-12 17:37:23	→	merijn has joined #haskell
2021-11-12 17:40:03	←	hiredman has quit (Ping timeout: 265 seconds)
2021-11-12 17:40:17	→	raehik has joined #haskell
2021-11-12 17:40:34	←	siraben has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:34	←	sm has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:34	←	peddie has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:34	←	ongy[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:34	←	jophish has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:34	←	Christoph[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:34	←	vaibhavsagar[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:35	←	jmcantrell has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:35	←	Ollie[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:35	←	amesgen[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:35	←	jinsun_ has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:35	←	smichel17[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:35	←	maralorn has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:35	←	Magnus[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:35	←	SawyerBergeron[m has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:35	←	maerwald[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:35	←	hughjfchen[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:35	←	asdofindia-m has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:35	←	reza[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:36	←	xosdy[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:37	←	oak- has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:37	←	iammrinal0[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:37	←	ru0mad[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:37	←	hsiktas[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:37	←	srid[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:37	←	Deewiant has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:37	←	unrooted has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:37	←	sky_lounge[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:37	←	soft has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:37	←	anotherbruce[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:37	←	dexmad[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:37	←	carmysilna has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:38	←	Morrow[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:38	←	schuelermine[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:38	←	surgeon[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:38	←	kevin[m]1 has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:38	←	TomWesterhout[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:39	←	Arathorn has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:39	←	moats has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:39	←	Domino[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:39	←	thomasjm[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:39	←	afotgkmnzj7asv3r has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:39	←	ilkecan[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:39	←	ericson2314 has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:39	←	unclechu has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:39	←	justosophy[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:40	←	wysteriary[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:40	←	jesser[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:40	←	bb010g has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:40	←	MatrixTravelerbo has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:40	←	codygman[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:40	←	Drew[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:40	←	wildsebastian has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:40	←	rednaZ[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:40	←	RosarioPulella[m has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:40	←	psydroid has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:40	←	cdsmith has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:40	←	PotatoHatsue has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:40	←	fakehacker[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:40	←	Topik[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:40	←	jchia[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:41	←	zwro[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:41	←	fcortesi has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:41	←	zfnmxt has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:41	←	mekeor[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:41	←	Tisoxin has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:41	←	Artem[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:41	←	ppseafield[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:41	←	puffnfresh[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:42	←	Tavi[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:43	←	alexfmpe[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:43	←	kadoban has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:43	←	gdhffd[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:43	←	fgaz has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:43	←	jneira[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:43	←	stoicswe[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:43	←	conphiz[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:43	←	ManofLetters[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:43	←	Deide has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:43	←	Orbstheorem has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:43	←	InternetManaging has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:44	←	OndejSkup[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:44	←	JoelMcCracken[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:45	←	tomku[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:45	←	utk has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:45	←	thedward[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:45	←	lambdandy[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:45	←	quantum has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:45	←	alex[m]1231 has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:45	←	denbrahe[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:45	←	bitonic has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:45	←	fendor[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:45	←	DemiMarieObenour has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:45	←	marinelli[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:45	←	TomasJakl[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:45	←	craige[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:45	←	kosmikus[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:45	←	the-coot[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:45	←	ServerStatsDisco has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:45	←	xddq[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:46	←	jkachmar has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:46	←	acco[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:46	←	santiagopim[m] has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:46	←	aidy has quit (Quit: Bridge terminating on SIGTERM)
2021-11-12 17:40:56	←	unmanbearpig has quit (Ping timeout: 245 seconds)
2021-11-12 17:41:33	→	hiredman has joined #haskell
2021-11-12 17:41:43	←	merijn has quit (Ping timeout: 250 seconds)
2021-11-12 17:42:57	→	unmanbearpig has joined #haskell
2021-11-12 17:43:08	dminuoso	Mmm, I really miss: fromListEff :: Applicative f => (k -> a -> f ()) -> [(k, a)] -> f (Map k a)
2021-11-12 17:43:11	dminuoso	This would be so useful :(
2021-11-12 17:43:25	yin	do we have linear types yet?
2021-11-12 17:43:48	dminuoso	I mean I can build something similar with alterF, but definitely not with the same asymptotics
2021-11-12 17:52:13	→	deadmarshal has joined #haskell
2021-11-12 17:57:07	tomsmeding	yin: {-# LANGUAGE LinearTypes #-} works on ghc 9.0 :)
2021-11-12 17:57:11	←	deadmarshal has quit (Ping timeout: 268 seconds)
2021-11-12 17:58:34	hpc	my dream of an automatic type-safe rust ffi are inching ever closer to reality :D
2021-11-12 17:58:35	→	jchia[m] has joined #haskell
2021-11-12 17:58:51	tomsmeding	dminuoso: I assume that's not just fromListEff f l = Map.fromList l <$ traverse (uncurry f) l
2021-11-12 17:58:54	→	MatrixTravelerbo has joined #haskell
2021-11-12 17:58:55	→	fgaz has joined #haskell
2021-11-12 17:58:55	→	peddie has joined #haskell
2021-11-12 17:58:55	→	cdsmith has joined #haskell
2021-11-12 17:58:56	→	Morrow[m] has joined #haskell
2021-11-12 17:59:08	→	thomasjm[m] has joined #haskell
2021-11-12 17:59:22	→	ru0mad[m] has joined #haskell
2021-11-12 17:59:34	→	gdhffd[m] has joined #haskell
2021-11-12 17:59:48	→	bb010g has joined #haskell
2021-11-12 17:59:48	→	ServerStatsDisco has joined #haskell
2021-11-12 17:59:48	→	amesgen[m] has joined #haskell
2021-11-12 17:59:48	→	the-coot[m] has joined #haskell
2021-11-12 17:59:49	→	moats has joined #haskell
2021-11-12 18:00:01	→	soft has joined #haskell
2021-11-12 18:00:01	→	zfnmxt has joined #haskell
2021-11-12 18:00:15	→	oak- has joined #haskell
2021-11-12 18:00:15	→	kadoban has joined #haskell
2021-11-12 18:00:15	→	bitonic has joined #haskell
2021-11-12 18:00:15	→	jophish has joined #haskell
2021-11-12 18:00:15	→	ericson2314 has joined #haskell
2021-11-12 18:00:15	→	Arathorn has joined #haskell
2021-11-12 18:00:15	→	Ollie[m] has joined #haskell
2021-11-12 18:00:15	→	PotatoHatsue has joined #haskell
2021-11-12 18:00:15	→	unclechu has joined #haskell
2021-11-12 18:00:29	→	Deewiant has joined #haskell
2021-11-12 18:00:29	→	unrooted has joined #haskell
2021-11-12 18:00:29	→	rednaZ[m] has joined #haskell
2021-11-12 18:00:41	→	xddq[m] has joined #haskell
2021-11-12 18:00:42	→	maralorn has joined #haskell
2021-11-12 18:00:42	→	denbrahe[m] has joined #haskell
2021-11-12 18:00:54	→	jesser[m] has joined #haskell
2021-11-12 18:01:06	→	reza[m] has joined #haskell
2021-11-12 18:01:06	→	quantum has joined #haskell
2021-11-12 18:01:06	→	marinelli[m] has joined #haskell
2021-11-12 18:01:06	→	hsiktas[m] has joined #haskell
2021-11-12 18:01:21	→	Orbstheorem has joined #haskell
2021-11-12 18:01:22	→	craige[m] has joined #haskell
2021-11-12 18:01:38	→	afotgkmnzj7asv3r has joined #haskell
2021-11-12 18:01:39	→	schuelermine[m] has joined #haskell
2021-11-12 18:01:39	→	sm has joined #haskell
2021-11-12 18:01:54	→	justosophy[m] has joined #haskell
2021-11-12 18:01:58	→	kevin[m]1 has joined #haskell
2021-11-12 18:02:15	→	ppseafield[m] has joined #haskell
2021-11-12 18:02:20	→	Deide has joined #haskell
2021-11-12 18:02:34	→	fakehacker[m] has joined #haskell
2021-11-12 18:02:34	→	hughjfchen[m] has joined #haskell
2021-11-12 18:02:34	→	Artem[m] has joined #haskell
2021-11-12 18:02:35	→	psydroid has joined #haskell
2021-11-12 18:02:35	→	Christoph[m] has joined #haskell
2021-11-12 18:02:58	→	wysteriary[m] has joined #haskell
2021-11-12 18:03:02	→	zwro[m] has joined #haskell
2021-11-12 18:03:14	→	stoicswe[m] has joined #haskell
2021-11-12 18:03:14	→	Topik[m] has joined #haskell
2021-11-12 18:03:14	→	ongy[m] has joined #haskell
2021-11-12 18:03:14	→	alexfmpe[m] has joined #haskell
2021-11-12 18:03:28	→	asdofindia-m has joined #haskell
2021-11-12 18:03:29	→	Drew[m] has joined #haskell
2021-11-12 18:03:29	→	jneira[m] has joined #haskell
2021-11-12 18:03:29	→	Magnus[m] has joined #haskell
2021-11-12 18:03:29	→	siraben has joined #haskell
2021-11-12 18:03:41	→	dexmad[m] has joined #haskell
2021-11-12 18:03:42	→	Movedtosridoneem has joined #haskell
2021-11-12 18:03:42	→	smichel17[m] has joined #haskell
2021-11-12 18:03:42	→	alex[m] has joined #haskell
2021-11-12 18:03:42	→	SawyerBergeron[m has joined #haskell
2021-11-12 18:03:54	→	anotherbruce[m] has joined #haskell
2021-11-12 18:03:54	→	ManofLetters[m] has joined #haskell
2021-11-12 18:03:54	→	Tisoxin has joined #haskell
2021-11-12 18:03:54	→	carmysilna has joined #haskell
2021-11-12 18:03:54	→	fendor[m] has joined #haskell
2021-11-12 18:03:54	→	aidy has joined #haskell
2021-11-12 18:03:54	→	DemiMarieObenour has joined #haskell
2021-11-12 18:04:06	→	iammrinal0[m] has joined #haskell
2021-11-12 18:04:19	→	TomasJakl[m] has joined #haskell
2021-11-12 18:04:20	→	OndejSkup[m] has joined #haskell
2021-11-12 18:04:20	→	InternetManaging has joined #haskell
2021-11-12 18:04:32	→	kosmikus[m] has joined #haskell
2021-11-12 18:04:32	→	ilkecan[m] has joined #haskell
2021-11-12 18:04:46	→	codygman[m] has joined #haskell
2021-11-12 18:04:51	→	eggplantade has joined #haskell
2021-11-12 18:04:58	→	xosdy[m] has joined #haskell
2021-11-12 18:04:58	→	vaibhavsagar[m] has joined #haskell
2021-11-12 18:04:58	→	santiagopim[m] has joined #haskell
2021-11-12 18:05:10	→	Tavi[m] has joined #haskell
2021-11-12 18:05:11	→	jmcantrell has joined #haskell
2021-11-12 18:05:11	→	maerwald[m] has joined #haskell
2021-11-12 18:05:25	→	jkachmar has joined #haskell
2021-11-12 18:05:38	←	Kaipi has quit (Remote host closed the connection)
2021-11-12 18:05:39	→	JoelMcCracken[m] has joined #haskell
2021-11-12 18:05:50	→	RosarioPulella[m has joined #haskell
2021-11-12 18:05:50	→	puffnfresh[m] has joined #haskell
2021-11-12 18:05:52	dminuoso	tomsmeding: Yeah.
2021-11-12 18:05:59	dminuoso	I want that to be called on conflict.
2021-11-12 18:06:01	→	Kaipi has joined #haskell
2021-11-12 18:06:02	→	TomWesterhout[m] has joined #haskell
2021-11-12 18:06:05	dminuoso	Oh
2021-11-12 18:06:07	dminuoso	It should rather be:
2021-11-12 18:06:14	→	sky_lounge[m] has joined #haskell
2021-11-12 18:06:14	→	wildsebastian has joined #haskell
2021-11-12 18:06:14	→	jinsun_ has joined #haskell
2021-11-12 18:06:16	dminuoso	fromListEff :: Applicative f => (k -> k -> a -> f ()) -> [(k, a)] -> f (Map k a)
2021-11-12 18:06:18	dminuoso	Obviously
2021-11-12 18:06:26	→	conphiz[m] has joined #haskell
2021-11-12 18:06:28	dminuoso	That would have avoided the ambiguity here I think
2021-11-12 18:06:39	→	acco[m] has joined #haskell
2021-11-12 18:06:39	→	surgeon[m] has joined #haskell
2021-11-12 18:06:51	→	Domino[m] has joined #haskell
2021-11-12 18:06:51	→	tomku[m] has joined #haskell
2021-11-12 18:06:51	→	fcortesi has joined #haskell
2021-11-12 18:06:55	→	utk has joined #haskell
2021-11-12 18:06:59	←	rkrishnan has quit (Ping timeout: 264 seconds)
2021-11-12 18:07:08	→	thedward[m] has joined #haskell
2021-11-12 18:07:20	→	lambdandy[m] has joined #haskell
2021-11-12 18:08:27	→	zer0bitz_ has joined #haskell
2021-11-12 18:09:32	←	eggplantade has quit (Ping timeout: 265 seconds)
2021-11-12 18:11:14	←	zer0bitz has quit (Ping timeout: 260 seconds)
2021-11-12 18:11:52	→	cosimone has joined #haskell
2021-11-12 18:12:41	→	machinedgod has joined #haskell
2021-11-12 18:13:35	tomsmeding	ah right
2021-11-12 18:14:24	tomsmeding	if you want the right asymptotics without much hassle, but perhaps non-optimal constant factor: sort on key first, then groupBy ((==) `on` fst), do the deduplication yourself, and then Map.fromListAsc
2021-11-12 18:14:30	tomsmeding	but yeah
2021-11-12 18:15:06	→	wennefer0 has joined #haskell
2021-11-12 18:15:42	←	wennefer0 has quit (Remote host closed the connection)
2021-11-12 18:16:09	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-11-12 18:17:50	dminuoso	tomsmeding: Id probably just write something custom as opposed to groupBy
2021-11-12 18:20:00	←	ericson2314 has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:20:00	←	Christoph[m] has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:20:00	←	siraben has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:20:00	←	max22- has quit (Ping timeout: 268 seconds)
2021-11-12 18:20:01	←	MatrixTravelerbo has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:20:11	←	ServerStatsDisco has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:20:31	←	puffnfresh[m] has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:20:43	←	peddie has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:20:43	←	kadoban has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:20:46	←	fgaz has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:20:47	←	unrooted has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:20:48	←	sm has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:20:50	←	Arathorn has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:20:54	←	wildsebastian has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:20:54	←	psydroid has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:20:58	←	hsiktas[m] has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:21:01	←	cdsmith has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:21:09	←	quantum has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:21:11	←	Tisoxin has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:21:16	←	Deide has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:21:16	←	denbrahe[m] has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:21:16	←	rednaZ[m] has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:21:16	←	InternetManaging has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:21:16	←	amesgen[m] has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:21:23	←	the-coot[m] has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:21:23	←	jophish has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:21:24	←	PotatoHatsue has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:21:25	←	unclechu has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:21:50	←	maralorn has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:21:50	←	vaibhavsagar[m] has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:22:03	←	Topik[m] has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:22:06	←	carmysilna has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:22:08	←	zfnmxt has quit (Quit: Client limit exceeded: 20000)
2021-11-12 18:22:25	→	MatrixTravelerbo has joined #haskell
2021-11-12 18:22:26	→	fgaz has joined #haskell
2021-11-12 18:22:26	→	ServerStatsDisco has joined #haskell
2021-11-12 18:22:26	→	amesgen[m] has joined #haskell
2021-11-12 18:22:26	→	the-coot[m] has joined #haskell
2021-11-12 18:22:26	→	kadoban has joined #haskell
2021-11-12 18:22:26	→	ericson2314 has joined #haskell
2021-11-12 18:22:26	→	PotatoHatsue has joined #haskell
2021-11-12 18:22:27	→	hsiktas[m] has joined #haskell
2021-11-12 18:22:27	→	sm has joined #haskell
2021-11-12 18:22:27	→	Deide has joined #haskell
2021-11-12 18:22:27	→	Christoph[m] has joined #haskell
2021-11-12 18:22:27	→	psydroid has joined #haskell
2021-11-12 18:22:27	→	siraben has joined #haskell
2021-11-12 18:22:27	→	Tisoxin has joined #haskell
2021-11-12 18:22:28	→	wildsebastian has joined #haskell
2021-11-12 18:22:30	→	zfnmxt has joined #haskell
2021-11-12 18:22:39	→	Topik[m] has joined #haskell
2021-11-12 18:22:39	→	rednaZ[m] has joined #haskell
2021-11-12 18:22:39	→	InternetManaging has joined #haskell
2021-11-12 18:22:40	→	unrooted has joined #haskell
2021-11-12 18:22:40	→	denbrahe[m] has joined #haskell
2021-11-12 18:22:40	→	jophish has joined #haskell
2021-11-12 18:22:40	→	unclechu has joined #haskell
2021-11-12 18:22:40	→	puffnfresh[m] has joined #haskell
2021-11-12 18:22:40	→	peddie has joined #haskell
2021-11-12 18:22:40	→	cdsmith has joined #haskell
2021-11-12 18:22:40	→	Arathorn has joined #haskell
2021-11-12 18:22:40	→	carmysilna has joined #haskell
2021-11-12 18:22:41	→	quantum has joined #haskell
2021-11-12 18:22:42	→	vaibhavsagar[m] has joined #haskell
2021-11-12 18:22:43	→	maralorn has joined #haskell
2021-11-12 18:23:47	←	shidima has quit (Ping timeout: 264 seconds)
2021-11-12 18:24:42	←	geekosaur has quit (Remote host closed the connection)
2021-11-12 18:26:23	→	geekosaur has joined #haskell
2021-11-12 18:26:42	→	sunarch has joined #haskell
2021-11-12 18:30:41	←	mcgroin has quit (Ping timeout: 250 seconds)
2021-11-12 18:30:41	←	unmanbearpig has quit (Ping timeout: 256 seconds)
2021-11-12 18:32:25	→	unmanbearpig has joined #haskell
2021-11-12 18:33:21	→	DNH has joined #haskell
2021-11-12 18:34:50	←	[Kalisto] has quit (Ping timeout: 246 seconds)
2021-11-12 18:37:20	→	desantra has joined #haskell
2021-11-12 18:42:19	→	[Kalisto] has joined #haskell
2021-11-12 18:44:42	←	bitdex has quit (Quit: = "")
2021-11-12 18:47:42	→	whatif has joined #haskell
2021-11-12 18:48:22	whatif	list comprehension is really fun, map f alist = [ f(i) | i <- alist ]
2021-11-12 18:48:45	Hecate	yes
2021-11-12 18:49:35	←	dsrt^ has quit (Remote host closed the connection)
2021-11-12 18:50:47	yushyin	i don't use it that often in haskell, but fun nevertheless, yes.
2021-11-12 18:51:35	→	deadmarshal has joined #haskell
2021-11-12 18:52:45	→	wei2912 has joined #haskell
2021-11-12 18:53:08	whatif	how to express a list that current one element to end, like in [1..10] but I want [3..10]
2021-11-12 18:53:50	→	mcgroin has joined #haskell
2021-11-12 18:54:41	whatif	in python, [ alist[i::] for i in range(len(alist)) if i == 3 ]
2021-11-12 18:55:44	whatif	emm, for example, there's an element 3 in alist, I'd like to get the rest, start from 3
2021-11-12 18:56:30	whatif	normal way is splitOn or splitAt stuff... I'd like to know the list comprehension way
2021-11-12 18:56:58	whatif	[ alist[i::] for i in range(len(alist)) if alist[i] == 3 ]
2021-11-12 18:58:22	←	zava has quit (Ping timeout: 260 seconds)
2021-11-12 18:59:56	hpc	[f x | x <- list, some boolean expression that contains x]
2021-11-12 19:00:01	whatif	haskell no list slice, but has `drop`
2021-11-12 19:00:15	tromp	there is no list  comprehension equivalent of dropWhile (/= 3)
2021-11-12 19:00:23	hpc	(which outside a list comprehension is guard)
2021-11-12 19:00:26	hpc	:t guard
2021-11-12 19:00:27	lambdabot	Alternative f => Bool -> f ()
2021-11-12 19:00:30	hpc	there's also filter
2021-11-12 19:00:32	hpc	:t filter
2021-11-12 19:00:33	lambdabot	(a -> Bool) -> [a] -> [a]
2021-11-12 19:00:43	xddq[m]	 * I think you look for "break"?
2021-11-12 19:00:43	xddq[m]	`snd $ break (==3) [1..10]`
2021-11-12 19:00:43	xddq[m]	nvm. I should read the full post :D
2021-11-12 19:00:44	xddq[m]	whatif: I think you look for "break"?
2021-11-12 19:00:44	xddq[m]	```snd $ break (==3) xs```
2021-11-12 19:00:44	xddq[m]	> <@whatif:libera.chat> how to express a list that current one element to end, like in [1..10] but I want [3..10]
2021-11-12 19:00:44	xddq[m]	 * I think you look for "break"?
2021-11-12 19:00:44	xddq[m]	`snd $ break (==3) [1..10]`
2021-11-12 19:00:45	lambdabot	 <hint>:1:1: error: parse error on input ‘<@’
2021-11-12 19:00:49	←	sagax has quit (Quit: Konversation terminated!)
2021-11-12 19:01:23	whatif	xddq[m]: I wonder the list comprehension way
2021-11-12 19:01:55	whatif	I found that list comprehension and list slice are very useful in python
2021-11-12 19:02:02	whatif	and fun
2021-11-12 19:02:30	←	jmorris has quit (Quit: Connection closed for inactivity)
2021-11-12 19:02:39	yushyin	your python example returns a list in list
2021-11-12 19:03:10	yushyin	it's not really a slice, i would argue
2021-11-12 19:04:32	←	Gurkenglas has quit (Ping timeout: 240 seconds)
2021-11-12 19:04:33	whatif	for example, get the a digit string from a string's end, "abc12" -> "12", "ab12c3" -> "3", with python, [ alist[i::] for i in range(len(alist)) if alist[i::].isdigit() ]
2021-11-12 19:04:34	yushyin	i can translate your example `[ alist[i::] for i in range(len(alist)) if alist[i] == 3 ]' directly to haskell and it would look like this `let alist = [1..10] in [[i .. (length alist)] | i <- alist, i == 3]'
2021-11-12 19:06:13	whatif	yushyin: what if the list is [1,3,2,7,9]
2021-11-12 19:06:28	←	cfricke has quit (Quit: WeeChat 3.3)
2021-11-12 19:06:52	whatif	python code still return [3,2,7,9], the right one
2021-11-12 19:07:36	yushyin	we would use dropWhile/takeWhile or so
2021-11-12 19:08:43	whatif	yushyin: get the a digit string from a string's end, "abc12" -> "12", "ab12c3" -> "3", what's the haskell list comprehension way?
2021-11-12 19:08:45	yushyin	or at least I wouldn't use list comprehension for such things
2021-11-12 19:09:58	whatif	python lack Data.List, toolz module lack lots of function than Data.List
2021-11-12 19:17:07	→	jlamothe has joined #haskell
2021-11-12 19:18:12	whatif	[ if (isDigit (drop n alist)) then (drop n alist) else [] | n <- [0.. (length alist)] ]
2021-11-12 19:18:24	←	Kaipi has quit (Remote host closed the connection)
2021-11-12 19:18:47	→	Kaipi has joined #haskell
2021-11-12 19:19:56	→	yauhsien has joined #haskell
2021-11-12 19:22:16	←	Flonk has quit (Quit: The Lounge - https://thelounge.chat)
2021-11-12 19:23:57	→	Flonk has joined #haskell
2021-11-12 19:24:58	←	yauhsien has quit (Ping timeout: 260 seconds)
2021-11-12 19:26:52	←	Flonk has quit (Client Quit)
2021-11-12 19:28:31	→	Flonk has joined #haskell
2021-11-12 19:28:35	←	xff0x has quit (Ping timeout: 264 seconds)
2021-11-12 19:28:59	←	kadir has left #haskell (WeeChat 3.3)
2021-11-12 19:29:18	←	ec has quit (Ping timeout: 276 seconds)
2021-11-12 19:29:29	→	ubert1 has joined #haskell
2021-11-12 19:31:07	←	Flonk has quit (Client Quit)
2021-11-12 19:33:46	←	desantra has quit (Quit: WeeChat 3.3)
2021-11-12 19:34:56	ℹ	hololeap_ is now known as hololeap
2021-11-12 19:35:24	→	desantra has joined #haskell
2021-11-12 19:36:49	→	shriekingnoise has joined #haskell
2021-11-12 19:37:50	→	merijn has joined #haskell
2021-11-12 19:38:31	→	[itchyjunk] has joined #haskell
2021-11-12 19:38:51	←	mcgroin has quit (Ping timeout: 245 seconds)
2021-11-12 19:39:07	→	Flonk has joined #haskell
2021-11-12 19:40:23	whatif	> let alist = "ab12c36" in [ drop n alist | n <- [0..((length alist) -1)], all isDigit (drop n alist) ]
2021-11-12 19:40:24	lambdabot	 ["36","6"]
2021-11-12 19:41:06	_________	> let alist = "abc12c3" in [ alist !! idx | idx <- map fst $ reverse.takeWhile (Data.Char.isDigit.snd).reverse $ zip [0..] alist ]
2021-11-12 19:41:07	lambdabot	 "3"
2021-11-12 19:41:37	_________	list comprehension is ugly :p
2021-11-12 19:42:23	←	vpan has quit (Ping timeout: 246 seconds)
2021-11-12 19:42:57	←	stiell has quit (Ping timeout: 276 seconds)
2021-11-12 19:43:23	→	stiell has joined #haskell
2021-11-12 19:43:27	whatif	_________: you should use it like that... 
2021-11-12 19:43:31	→	Pickchea has joined #haskell
2021-11-12 19:44:08	←	ubert1 has quit (Remote host closed the connection)
2021-11-12 19:44:10	whatif	what's the point? if you use split to split list and zip to address the index
2021-11-12 19:46:47	_________	you wanted to translate python code using list comprehensions into haskell code using list comprehensions, right ? that's how it would look in haskell - without indexing it wouldn't be python equivalent ;)
2021-11-12 19:46:55	←	Flonk has quit (Quit: The Lounge - https://thelounge.chat)
2021-11-12 19:48:07	_________	without list comprehension it would be something like this in haskell: reverse.takeWhile Data.Char.isDigit $ reverse "abc12c3"
2021-11-12 19:48:35	→	Flonk has joined #haskell
2021-11-12 19:48:47	←	f-a has left #haskell
2021-11-12 19:50:03	→	CiaoSen has joined #haskell
2021-11-12 19:50:43	→	xff0x has joined #haskell
2021-11-12 19:52:01	←	desantra has quit (Quit: WeeChat 3.3)
2021-11-12 19:52:57	→	max22- has joined #haskell
2021-11-12 19:53:19	dminuoso	What does alist[i::] do in python?
2021-11-12 19:53:35	whatif	dminuoso: drop i alist
2021-11-12 19:53:36	yushyin	a slice from the index i to the end
2021-11-12 19:53:45	dminuoso	Including i?
2021-11-12 19:53:52	whatif	including
2021-11-12 19:53:55	yushyin	i think so, yes.
2021-11-12 19:54:02	→	desantra has joined #haskell
2021-11-12 19:54:41	whatif	dminuoso: it's fancy to express something with that list slice
2021-11-12 19:56:00	whatif	for example, remove the duplicate element, [ alist[i] for i in range(len(alist)) if alist[i] not in alist[i+1::] ]
2021-11-12 19:56:29	whatif	so [1,1,2,3,2] would be [1,3,2]
2021-11-12 19:56:50	dminuoso	let s = "ab12c3" in reverse . takeWhile isDigit . reverse $ s
2021-11-12 19:56:55	dminuoso	% let s = "ab12" in reverse . takeWhile isDigit . reverse $ s
2021-11-12 19:56:55	yahb	dminuoso: "12"
2021-11-12 19:56:58	dminuoso	% let s = "ab12" in reverse . takeWhile isDigit . reverse $ s
2021-11-12 19:56:58	yahb	dminuoso: "12"
2021-11-12 19:57:40	yushyin	but they want it to be list comprehension
2021-11-12 19:57:45	dminuoso	The answer is: dont?
2021-11-12 19:58:28	dminuoso	I dont understand why you'd insist on using a list comprehension in the first place, both Haskell or Python
2021-11-12 20:00:35	dminuoso	14:34:33           whatif | for example, get the a digit string from a string's end, "abc12" -> "12", "ab12c3" -> "3", with python, [ alist[i::] for i in range(len(alist)) if alist[i::].isdigit() ]
2021-11-12 20:00:39	yushyin	me neither, i find it ugly in haskell as well in python. there are a few situations in which it is halfway nice
2021-11-12 20:00:44	geekosaur	it might be the easiest way to do it in python, but that doesn't necessarily carry over to haskell
2021-11-12 20:00:46	dminuoso	This is *very* unidiomatic python code to begin with
2021-11-12 20:00:59	dminuoso	And terribly inefficient ontop
2021-11-12 20:01:09	←	desantra has quit (Quit: WeeChat 3.3)
2021-11-12 20:03:10	dminuoso	The pythonista way would probably be: re.match('.*?([0-9]+)$', str).group(1)
2021-11-12 20:04:00	whatif	> let alist = [1,1,2,3,2] in [ alist !! n | n <- [0..(lenght(alist) - 1)], (alist !! n) `notElem` (drop (n+1) alist) ]
2021-11-12 20:04:02	lambdabot	 error:
2021-11-12 20:04:02	lambdabot	     • Variable not in scope: lenght :: [a0] -> Int
2021-11-12 20:04:02	lambdabot	     • Perhaps you meant one of these:
2021-11-12 20:04:17	←	pavonia has quit (Quit: Bye!)
2021-11-12 20:04:25	dminuoso	Anyway. Not sure what the point of translating poor python code into poor Haskell is.
2021-11-12 20:04:27	whatif	> let alist = [1,1,2,3,2] in [ alist !! n | n <- [0..(lengh(alist) - 1)], (alist !! n) `notElem` (drop (n+1) alist) ]
2021-11-12 20:04:29	lambdabot	 error:
2021-11-12 20:04:29	lambdabot	     • Variable not in scope: lengh :: [a0] -> Int
2021-11-12 20:04:29	lambdabot	     • Perhaps you meant one of these:
2021-11-12 20:04:38	dminuoso	It's certainly not insightful or helpful
2021-11-12 20:04:41	←	Flonk has quit (Ping timeout: 245 seconds)
2021-11-12 20:05:11	dminuoso	Let me give you a direct translation:
2021-11-12 20:05:48	whatif	let alist = [1,1,2,3,2] in [ alist !! n | n <- [0..(length(alist) - 1)], (alist !! n) `notElem` (drop (n+1) alist) ]
2021-11-12 20:06:02	whatif	> let alist = [1,1,2,3,2] in [ alist !! n | n <- [0..(length(alist) - 1)], (alist !! n) `notElem` (drop (n+1) alist) ]
2021-11-12 20:06:03	lambdabot	 [1,3,2]
2021-11-12 20:06:47	whatif	the list comprehension, express the question with list comprehension, and the anwser it is
2021-11-12 20:07:12	yushyin	indexing haskell linked lists is usually not a good idea
2021-11-12 20:07:17	[exa]	whatif: I always kinda guessed that the !! operator is named like that so that people know it should not be used very often :]
2021-11-12 20:07:41	dminuoso	whatif: Even the python code is very poor already.
2021-11-12 20:07:46	[exa]	whatif: what should the code do btw? (in human words)
2021-11-12 20:07:47	yushyin	[exa]: lol, maybe your are right
2021-11-12 20:08:01	[exa]	yushyin: you can literally read it as BANG BANG MAAN
2021-11-12 20:08:25	dminuoso	% let xs = "foo123" in [ drop i xs | i <- [0..length xs], all isDigit (drop i xs) ] -- whatif  
2021-11-12 20:08:26	yahb	dminuoso: ["123","23","3",""]
2021-11-12 20:08:33	dminuoso	whatif: ^- that is a direct translation of what your python code does.
2021-11-12 20:08:45	whatif	[exa]: remove the duplicate element in alist, so if element is not show up in the rest, then it is single
2021-11-12 20:08:47	dminuoso	Without random access
2021-11-12 20:08:58	dminuoso	Let me rewrite with a let binding
2021-11-12 20:09:17	dminuoso	% let xs = "foo123" in [ xs' | i <- [0..length xs], let xs' = drop i xs, all isDigit xs' ]
2021-11-12 20:09:18	yahb	dminuoso: ["123","23","3",""]
2021-11-12 20:09:35	←	max22- has quit (Remote host closed the connection)
2021-11-12 20:09:41	yushyin	looks like tails with filter all isDigit
2021-11-12 20:09:51	dminuoso	Yeah
2021-11-12 20:10:23	[exa]	whatif: what about: alist input = [x | (x:xs) <- tails input, x `notElem` xs]
2021-11-12 20:10:58	dminuoso	Why are we discussing *poor* translations of *poor* python code anyway?
2021-11-12 20:11:31	dminuoso	The real answer is: In python nobody sane would have written that, and in Python you'd just have used `reverse . takeWhile isDigit . reverse`
2021-11-12 20:11:41	dminuoso	Both would have ended up with better readable code with better asymptotics
2021-11-12 20:11:49	dminuoso	And better cache behavior ontop
2021-11-12 20:12:02	whatif	python doesn't have Data.List
2021-11-12 20:12:09	dminuoso	Yes, in Python you would have used a regex.
2021-11-12 20:12:17	←	zer0bitz_ has quit (Read error: Connection reset by peer)
2021-11-12 20:12:20	dminuoso	re.match('.*?([0-9]+)$', str).group(1)
2021-11-12 20:12:23	←	merijn has quit (Ping timeout: 264 seconds)
2021-11-12 20:13:26	[exa]	whatif: well if that was the only thing Python would be missing... :]
2021-11-12 20:13:30	→	xkuru has joined #haskell
2021-11-12 20:13:35	→	zer0bitz has joined #haskell
2021-11-12 20:13:50	dminuoso	Side note of interest, String being a list is not always a good thing either.
2021-11-12 20:16:52	→	shidima has joined #haskell
2021-11-12 20:19:16	→	wroathe has joined #haskell
2021-11-12 20:19:16	←	wroathe has quit (Changing host)
2021-11-12 20:19:16	→	wroathe has joined #haskell
2021-11-12 20:19:16	←	gentauro has quit (Read error: Connection reset by peer)
2021-11-12 20:19:33	whatif	re.match('.*?([0-9]+)$', str).group(1) I think regex is not good readable
2021-11-12 20:19:52	dminuoso	If you have any regex experience, it's very readable.
2021-11-12 20:20:07	dminuoso	And since regex are very common and idiomatic in Python, Im going to suggest that any pythonista can make quick sense of it
2021-11-12 20:20:09	whatif	I know BRE
2021-11-12 20:20:13	dminuoso	Much quicker than with a list comprehension
2021-11-12 20:21:20	whatif	since then, why list comprehension is created at the first?
2021-11-12 20:21:46	whatif	70s'? first apperance in which language?
2021-11-12 20:22:20	dminuoso	Python burrowed them from Haskell
2021-11-12 20:22:41	whatif	python burrowed a lot of things from others
2021-11-12 20:22:45	dminuoso	And whether Haskelled burrowed them from another language Im not sure, but the syntax/semantics was inspired by set builder notation in mathematics
2021-11-12 20:23:18	dminuoso	That is, <- is an ascii approximation of a ∈ A
2021-11-12 20:25:23	→	gentauro has joined #haskell
2021-11-12 20:28:15	→	zebrag has joined #haskell
2021-11-12 20:30:04	→	bitmapper has joined #haskell
2021-11-12 20:30:09	→	lavaman has joined #haskell
2021-11-12 20:30:21	janus	what, i thought it was supposed to be an arrow
2021-11-12 20:30:55	janus	never even considered that it would be a ∈
2021-11-12 20:31:12	janus	and even the fancy haskell typesetting contracts them to an arrow, i thought
2021-11-12 20:31:46	dminuoso	\ is an ASCII approximatino of λ
2021-11-12 20:31:51	dminuoso	:)
2021-11-12 20:32:20	yushyin	whatif: with re.search the regex kann be even simpler. re.search('[0-9]+$', str).group(0) # i think this is readable enough
2021-11-12 20:32:48	dminuoso	janus: Consider in Math you might write [ x * 2 | x ∈ ℕ ]
2021-11-12 20:33:12	←	mark___ has quit (Ping timeout: 268 seconds)
2021-11-12 20:33:26	whatif	> let alist=["ab","ef","ij"], blist = ["cd","gh","kl"] in [ (alist !! n) <> (blist !! n) | n <- [0..(length alist)-1] ]
2021-11-12 20:33:28	lambdabot	 <hint>:1:27: error: parse error on input ‘,’
2021-11-12 20:33:34	→	mark___ has joined #haskell
2021-11-12 20:34:47	←	lavaman has quit (Ping timeout: 256 seconds)
2021-11-12 20:35:44	→	justsomeguy has joined #haskell
2021-11-12 20:36:05	[exa]	whatif: you mean `zip` right?
2021-11-12 20:36:34	whatif	or get the sequence of x * y < 10, x and y <- [0..10], use list comprehension is readable
2021-11-12 20:36:44	→	jkaye has joined #haskell
2021-11-12 20:36:49	janus	dminuoso: but just because it has one origin in the list comprehension syntax, it could have another origin in monadic syntax
2021-11-12 20:37:43	janus	i mean, if '<-' is used to set an MVar, it doesn't seem similar to "is a member of"
2021-11-12 20:38:16	←	CiaoSen has quit (Quit: CiaoSen)
2021-11-12 20:38:55	whatif	[exa]: yes, zip
2021-11-12 20:39:36	whatif	I forget how to use two variable in let
2021-11-12 20:39:54	whatif	not let a=..., b=... in ?
2021-11-12 20:41:03	_________	let a = 1; b = 2 in [a, b]
2021-11-12 20:41:05	_________	> let a = 1; b = 2 in [a, b]
2021-11-12 20:41:07	lambdabot	 [1,2]
2021-11-12 20:41:09	whatif	I hate people add 's in English if it's not one, in my mother language, no such thing
2021-11-12 20:41:32	whatif	one apple, two apple, three apple
2021-11-12 20:41:37	→	max22- has joined #haskell
2021-11-12 20:41:44	←	max22- has quit (Remote host closed the connection)
2021-11-12 20:42:22	whatif	_________: yes
2021-11-12 20:45:29	←	cosimone has quit (Remote host closed the connection)
2021-11-12 20:45:42	←	betelgeuse has quit (Ping timeout: 260 seconds)
2021-11-12 20:48:05	→	WhateverRabbit has joined #haskell
2021-11-12 20:48:33	WhateverRabbit	hi all
2021-11-12 20:50:22	whatif	what's function name that fmap take two lists?
2021-11-12 20:50:45	→	slowButPresent has joined #haskell
2021-11-12 20:50:46	whatif	fmap (+) alist blist, I forget the name
2021-11-12 20:50:49	→	Guest42 has joined #haskell
2021-11-12 20:50:54	_________	zipWith ?
2021-11-12 20:51:02	WhateverRabbit	+
2021-11-12 20:54:13	whatif	_________: right
2021-11-12 20:54:27	←	geekosaur has quit (Remote host closed the connection)
2021-11-12 20:54:31	_________	you can also use hoogle to find them by type signature
2021-11-12 20:54:33	→	allbery_b has joined #haskell
2021-11-12 20:54:36	ℹ	allbery_b is now known as geekosaur
2021-11-12 20:55:01	whatif	_________: then hoogle will tell me liftM2
2021-11-12 20:55:17	_________	https://hoogle.haskell.org/?hoogle=(a%20-%3E%20b%20-%3E%20c)%20-%3E%20%5Ba%5D%20-%3E%20%5Bb%5D%20-%3E%20%5Bc%5D - it tells me it's zipWith
2021-11-12 20:56:41	→	cosimone has joined #haskell
2021-11-12 20:57:27	←	wroathe has quit (Ping timeout: 256 seconds)
2021-11-12 20:58:31	→	jurjen has joined #haskell
2021-11-12 21:07:27	→	eggplantade has joined #haskell
2021-11-12 21:12:00	←	Lord_of_Life has quit (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
2021-11-12 21:12:23	←	eggplantade has quit (Ping timeout: 264 seconds)
2021-11-12 21:14:34	→	wroathe has joined #haskell
2021-11-12 21:14:35	←	wroathe has quit (Changing host)
2021-11-12 21:14:35	→	wroathe has joined #haskell
2021-11-12 21:14:47	←	johnny_sitar has quit (Ping timeout: 246 seconds)
2021-11-12 21:18:59	←	wroathe has quit (Ping timeout: 256 seconds)
2021-11-12 21:20:12	→	mcgroin has joined #haskell
2021-11-12 21:20:27	→	mimmy has joined #haskell
2021-11-12 21:20:32	→	Lord_of_Life has joined #haskell
2021-11-12 21:21:36	→	Gurkenglas has joined #haskell
2021-11-12 21:22:36	←	Pickchea has quit (Ping timeout: 264 seconds)
2021-11-12 21:26:26	→	dschrempf has joined #haskell
2021-11-12 21:26:46	←	mimmy has quit (Ping timeout: 245 seconds)
2021-11-12 21:28:07	→	yauhsien has joined #haskell
2021-11-12 21:29:13	hololeap	awpr: I figured out a (the?) trick, which is to add constraints to the singleton GADT constructors, that way the compiler is assured that they will be satisfied at each layer of the tree
2021-11-12 21:29:49	hololeap	I threw out the type family constraint thing as it was not working
2021-11-12 21:31:07	→	johnny_sitar has joined #haskell
2021-11-12 21:32:35	←	yauhsien has quit (Ping timeout: 256 seconds)
2021-11-12 21:34:55	→	smhbvd^ has joined #haskell
2021-11-12 21:36:05	→	mimmy has joined #haskell
2021-11-12 21:39:45	→	max22- has joined #haskell
2021-11-12 21:40:59	→	eggplantade has joined #haskell
2021-11-12 21:41:02	←	unmanbearpig has quit (Ping timeout: 268 seconds)
2021-11-12 21:42:28	→	unmanbearpig has joined #haskell
2021-11-12 21:42:55	←	wei2912 has quit (Quit: Lost terminal)
2021-11-12 21:45:47	←	smhbvd^ has quit (Remote host closed the connection)
2021-11-12 21:48:03	←	dajoer has quit (Quit: leaving)
2021-11-12 21:50:04	→	Flonk has joined #haskell
2021-11-12 21:50:20	←	max22- has quit (Remote host closed the connection)
2021-11-12 21:50:57	←	whatif has quit (Quit: ERC (IRC client for Emacs 26.3))
2021-11-12 21:51:13	→	servytor has joined #haskell
2021-11-12 21:51:18	←	lortabac has quit (Quit: WeeChat 2.8)
2021-11-12 21:54:06	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-11-12 21:56:20	→	xstill- has joined #haskell
2021-11-12 21:59:47	←	mimmy has quit (Ping timeout: 264 seconds)
2021-11-12 22:00:13	←	eggplantade has quit (Remote host closed the connection)
2021-11-12 22:01:12	←	justsomeguy has quit (Quit: WeeChat 3.2)
2021-11-12 22:03:27	→	a6a45081-2b83 has joined #haskell
2021-11-12 22:03:27	←	dschrempf has quit (Quit: WeeChat 3.3)
2021-11-12 22:03:31	←	a6a45081-2b83 has quit (Remote host closed the connection)
2021-11-12 22:05:50	→	shapr has joined #haskell
2021-11-12 22:07:18	→	eggplantade has joined #haskell
2021-11-12 22:07:37	→	max22- has joined #haskell
2021-11-12 22:08:34	→	merijn has joined #haskell
2021-11-12 22:13:57	←	Lord_of_Life has quit (Ping timeout: 256 seconds)
2021-11-12 22:14:29	←	max22- has quit (Remote host closed the connection)
2021-11-12 22:14:36	→	yauhsien has joined #haskell
2021-11-12 22:14:57	→	Lord_of_Life has joined #haskell
2021-11-12 22:15:34	←	yauhsien has quit (Remote host closed the connection)
2021-11-12 22:16:06	→	yauhsien has joined #haskell
2021-11-12 22:16:16	→	max22- has joined #haskell
2021-11-12 22:17:28	←	Flonk has quit (Quit: The Lounge - https://thelounge.chat)
2021-11-12 22:17:55	→	johnjay has joined #haskell
2021-11-12 22:18:22	johnjay	i tried installing something with cabal and it says error couldn't find opt from llvm. but i have llvm. is llvm required for haskell packages?
2021-11-12 22:18:48	monochrom	No.
2021-11-12 22:19:13	geekosaur	er, that depends. if you are on an m1 mac and you are using 8.10.7 to build natively, you need llvm
2021-11-12 22:19:37	monochrom	Sorry.
2021-11-12 22:19:49	geekosaur	9.2.1 has direct-to-asm compilation, but recently it was found to be broken
2021-11-12 22:19:59	johnjay	i don't know what i want to do. i just typed 'cabal install -j <name>' because it said to
2021-11-12 22:20:08	johnjay	do i have to build natively?
2021-11-12 22:20:32	johnjay	and yes this is an m1 mac. XD
2021-11-12 22:20:50	johnjay	seems to have a few bugs. scikit-learn doesn't install for instance
2021-11-12 22:21:00	johnjay	although somehow i got numpy
2021-11-12 22:21:12	geekosaur	if you install an x86 cabal you can use: arch x86 cabal install -j whatever
2021-11-12 22:21:50	←	notzmv has quit (Ping timeout: 260 seconds)
2021-11-12 22:21:53	johnjay	ah so that's how you run one of the parts in a universal binary
2021-11-12 22:21:55	geekosaur	but you'll have to install x86 versions of any C library dependencies, and if you're using e.g. brew to install such dependencies it will *relaly* want to install native versions instead of x86
2021-11-12 22:22:10	johnjay	yes i'm using brew. it's like you know my life story
2021-11-12 22:22:27	geekosaur	pretty much everyone on a kmac does these days
2021-11-12 22:22:43	→	mimmy has joined #haskell
2021-11-12 22:22:50	geekosaur	and ghc would only look for llc/opt when using -fllvm, which is only default on m1 macs
2021-11-12 22:23:05	geekosaur	so it's not that hard to work out :)
2021-11-12 22:23:57	johnjay	i see
2021-11-12 22:24:26	johnjay	i tried briefly to install things from the app store. but quickly gave that up
2021-11-12 22:24:38	johnjay	brew and macports are the only alternatives i know of. not even sure if there's a native llvm you can get
2021-11-12 22:24:49	johnjay	although clang is installed by default but pretends to be gcc for some reason
2021-11-12 22:25:49	←	yauhsien has quit (Remote host closed the connection)
2021-11-12 22:26:22	→	yauhsien has joined #haskell
2021-11-12 22:27:23	geekosaur	yeh, apple does that. it's really confusing
2021-11-12 22:27:44	geekosaur	and you have to install a full llvm via brew or macports because apple only provides part of it
2021-11-12 22:28:46	→	Flonk has joined #haskell
2021-11-12 22:28:56	sm	what's the package failing to install ?
2021-11-12 22:29:31	johnjay	some haskell project i wanted to look at with cabal
2021-11-12 22:29:38	johnjay	never installed with cabal before
2021-11-12 22:29:58	johnjay	and the readme doesn't say how to build it. should i read the stack manual to build it myself? or how do i do that
2021-11-12 22:31:04	←	Flonk has quit (Client Quit)
2021-11-12 22:31:10	←	yauhsien has quit (Ping timeout: 260 seconds)
2021-11-12 22:32:34	→	Flonk has joined #haskell
2021-11-12 22:37:06	→	yauhsien has joined #haskell
2021-11-12 22:37:33	sm	if you tell us more, I'd be willing to look at it a little more 
2021-11-12 22:37:38	←	leah2 has quit (Remote host closed the connection)
2021-11-12 22:37:44	sm	otherwise it's hard to say
2021-11-12 22:38:53	←	deadmarshal has quit (Ping timeout: 256 seconds)
2021-11-12 22:39:29	←	turlando has quit (Ping timeout: 246 seconds)
2021-11-12 22:39:34	→	leah2 has joined #haskell
2021-11-12 22:40:29	→	betelgeuse has joined #haskell
2021-11-12 22:43:02	→	turlando has joined #haskell
2021-11-12 22:43:02	←	turlando has quit (Changing host)
2021-11-12 22:43:02	→	turlando has joined #haskell
2021-11-12 22:43:22	←	yauhsien has quit (Remote host closed the connection)
2021-11-12 22:43:54	→	yauhsien has joined #haskell
2021-11-12 22:45:40	←	urdh has quit (Remote host closed the connection)
2021-11-12 22:46:09	maerwald	johnjay: llvm isn't added to path by default
2021-11-12 22:46:49	←	merijn has quit (Ping timeout: 256 seconds)
2021-11-12 22:47:20	←	max22- has quit (Remote host closed the connection)
2021-11-12 22:47:23	←	mimmy has quit (Ping timeout: 256 seconds)
2021-11-12 22:47:26	maerwald	on M1 it should be in /opt/llvm/bin or so
2021-11-12 22:48:15	→	zincy_ has joined #haskell
2021-11-12 22:48:26	←	yauhsien has quit (Ping timeout: 260 seconds)
2021-11-12 22:49:51	sm	I have a homebrew `llvm` package installed, which provides `clang*` and `llvm*` binaries, don't know if that's normal
2021-11-12 22:50:13	→	deadmarshal has joined #haskell
2021-11-12 22:50:22	→	max22- has joined #haskell
2021-11-12 22:54:15	→	justsomeguy has joined #haskell
2021-11-12 22:56:21	→	notzmv has joined #haskell
2021-11-12 22:56:55	→	yauhsien has joined #haskell
2021-11-12 22:57:05	→	zava has joined #haskell
2021-11-12 22:57:10	←	yauhsien has quit (Remote host closed the connection)
2021-11-12 22:57:12	johnjay	yes i recompiled with llvm in the path and it seemed to work
2021-11-12 22:57:27	johnjay	what i meant is i thought ghc was the compiler so why is it using llvm
2021-11-12 22:57:43	→	yauhsien has joined #haskell
2021-11-12 22:57:52	johnjay	also i can link you the project when i'm back on my m1
2021-11-12 22:58:03	johnjay	it had some .yaml and a .cabal or something file
2021-11-12 22:58:23	johnjay	(meaning in the cloned git repo)
2021-11-12 22:59:56	←	Flonk has quit (Quit: The Lounge - https://thelounge.chat)
2021-11-12 23:00:44	←	yauhsien has quit (Remote host closed the connection)
2021-11-12 23:01:16	→	yauhsien has joined #haskell
2021-11-12 23:01:22	←	max22- has quit (Remote host closed the connection)
2021-11-12 23:02:16	→	econo has joined #haskell
2021-11-12 23:03:05	maerwald	johnjay: native codegen for aarch64 M1 isn't in 8.10.7 yet, so it uses the llvm backend
2021-11-12 23:04:28	johnjay	oh ok. i assume this is somehow plugging into the llvm framework then
2021-11-12 23:04:54	←	deadmarshal has quit (Ping timeout: 268 seconds)
2021-11-12 23:04:54	johnjay	should i be using stack or cabal for something cloned directly from github?
2021-11-12 23:05:21	WhateverRabbit	you can use it
2021-11-12 23:05:28	→	Flonk has joined #haskell
2021-11-12 23:05:47	←	Flonk has left #haskell
2021-11-12 23:05:57	→	Flonk has joined #haskell
2021-11-12 23:06:02	maerwald	johnjay: depends on the project
2021-11-12 23:06:04	sclv	ghc has a llvm backend to the compiler, and that's the only way you will be able to compile for M1 in the short term
2021-11-12 23:06:05	←	yauhsien has quit (Ping timeout: 256 seconds)
2021-11-12 23:06:17	johnjay	it had a stack.yaml if i recall and also a somethingsomething.cabal
2021-11-12 23:06:21	→	mimmy has joined #haskell
2021-11-12 23:06:25	sclv	both stack and cabal can drive ghc in llvm mode, so it doesn't really matter
2021-11-12 23:06:37	maerwald	there's no native stack M1 binary yet, though
2021-11-12 23:06:40	johnjay	ok
2021-11-12 23:06:50	maerwald	so it may pick x86 arch and so weird stuff
2021-11-12 23:06:52	sclv	for native compilation you'll want to stick to cabal/ghcup since that supports M1 properly -- but again, that native compilation is busted until the next ghc patch release
2021-11-12 23:07:29	←	mikoto-c1 has quit (Quit: mikoto-c1)
2021-11-12 23:07:36	→	mikoto-chan has joined #haskell
2021-11-12 23:07:37	johnjay	i think i have ghc8 something
2021-11-12 23:07:37	→	max22- has joined #haskell
2021-11-12 23:07:44	johnjay	you said it needs a patch update for M1 aarch64?
2021-11-12 23:07:46	johnjay	ghc that is
2021-11-12 23:07:54	maerwald	only if you want to use native codegen
2021-11-12 23:08:20	geekosaur	I said that earlier, 8.10.7 uses llvm and works, 9.2.1 has native codegen but is broken
2021-11-12 23:08:27	geekosaur	bugs they only found after release
2021-11-12 23:08:42	johnjay	ah ok. so if I did have 9.2.1 would it try to native codegen and fail?
2021-11-12 23:08:49	johnjay	yeah 8.10
2021-11-12 23:08:49	←	Flonk has quit (Read error: Connection reset by peer)
2021-11-12 23:08:51	johnjay	whatever brew has
2021-11-12 23:09:00	geekosaur	it would produce a binary that would probably crash
2021-11-12 23:09:08	johnjay	oof
2021-11-12 23:09:44	maerwald	https://discourse.haskell.org/t/psa-9-2-1-aarch64-miscompilation/3638/2
2021-11-12 23:11:01	→	Flonk has joined #haskell
2021-11-12 23:12:52	←	zincy_ has quit (Remote host closed the connection)
2021-11-12 23:15:03	→	zincy_ has joined #haskell
2021-11-12 23:17:27	→	merijn has joined #haskell
2021-11-12 23:17:40	→	desantra has joined #haskell
2021-11-12 23:19:13	←	desantra has quit (Client Quit)
2021-11-12 23:19:22	→	desantra has joined #haskell
2021-11-12 23:20:32	ℹ	irc: disconnected from server
2021-11-20 22:07:54	→	oxide has joined #haskell
2021-11-20 22:07:54	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-11-20 22:07:54	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-11-20 22:07:54	ℹ	Channel #haskell: 731 nicks (1 op, 0 voices, 730 normals)
2021-11-20 22:07:54	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2021-11-20 22:07:54	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-11-20 22:09:02	→	ubert has joined #haskell
2021-11-20 22:10:21	hololeap	A Profunctor p is a Cosieve on f if it is a subprofunctor of Costar f.
2021-11-20 22:10:49	hololeap	where does ekmett get these terms from?
2021-11-20 22:12:43	→	eggplantade has joined #haskell
2021-11-20 22:13:03	hololeap	Sketches of an Elephant – A Topos Theory Compendium
2021-11-20 22:13:08	hololeap	is that the original source?
2021-11-20 22:15:09	hololeap	I'm tired of going into a drooling stupor when I read the docs for profunctors
2021-11-20 22:18:58	zincy	I am finding this library quite tricky to understand
2021-11-20 22:20:18	←	merijn has quit (Ping timeout: 250 seconds)
2021-11-20 22:21:07	→	waleee has joined #haskell
2021-11-20 22:29:05	←	kupi has quit (Quit: Connection closed for inactivity)
2021-11-20 22:30:58	←	hippoid has quit (Ping timeout: 264 seconds)
2021-11-20 22:31:30	→	hippoid has joined #haskell
2021-11-20 22:36:22	←	hippoid has quit (Ping timeout: 264 seconds)
2021-11-20 22:37:37	→	slowButPresent has joined #haskell
2021-11-20 22:38:40	→	serg has joined #haskell
2021-11-20 22:39:47	←	tired has quit (Quit: /)
2021-11-20 22:41:20	→	tired has joined #haskell
2021-11-20 22:41:23	→	ProfSimm has joined #haskell
2021-11-20 22:41:50	←	machinedgod has quit (Quit: Lost terminal)
2021-11-20 22:41:55	ProfSimm	I have something odd to ask, but I wanna her your opinion. In Haskell, two identical types by different names are different, right. Nominal
2021-11-20 22:41:56	←	lavaman has quit (Remote host closed the connection)
2021-11-20 22:42:13	→	machinedgod has joined #haskell
2021-11-20 22:42:17	→	Jeanne-Kamikaze has joined #haskell
2021-11-20 22:44:23	→	timCF_ has joined #haskell
2021-11-20 22:44:31	←	renzhi has quit (Ping timeout: 240 seconds)
2021-11-20 22:44:54	→	hippoid has joined #haskell
2021-11-20 22:45:37	→	ees has joined #haskell
2021-11-20 22:46:33	→	justsomeguy has joined #haskell
2021-11-20 22:46:40	←	ubert has quit (Quit: ubert)
2021-11-20 22:47:18	→	abhixec has joined #haskell
2021-11-20 22:48:25	timCF_	Hello! Let's say I do have a `newtype PosRat = PosRat (Ratio Natural)` with smart constructors and stuff to create new values of this type with potential failure for example in case where value is == 0. Is there the way to have literals of my new type which I can write in a code just as values (without applying smart constructors)? Basically I want to apply smart constructor in compile-time. But without 
2021-11-20 22:48:31	timCF_	TH. Just similar the way Natural type literals are handled.
2021-11-20 22:48:54	←	mimmy has quit (Ping timeout: 250 seconds)
2021-11-20 22:49:14	ProfSimm	Haskell is nominal, right. Two identical types with different name would be different types
2021-11-20 22:49:53	monochrom	Yes.
2021-11-20 22:51:38	ProfSimm	Let's imagine a system where two differently named types are compared structurally, at depth, and Haskell speculatively branches by executing the code twice by substituting one of the other. And at some threshold, if they cause the same outcomes, they become one type.
2021-11-20 22:52:09	ProfSimm	Is there a name for this idea
2021-11-20 22:52:29	→	ThatLinuxGuy has joined #haskell
2021-11-20 22:53:26	←	ThatLinuxGuy has quit (Client Quit)
2021-11-20 22:54:50	←	harveypwca has quit (Quit: Leaving)
2021-11-20 22:54:50	geekosaur	timCF_, not without patching the compiler to recognize the new literals
2021-11-20 22:54:58	←	xff0x has quit (Ping timeout: 268 seconds)
2021-11-20 22:55:16	timCF_	geekosaur: so TH is the simplest way to go I guess?
2021-11-20 22:55:16	geekosaur	heck, it doesn't even recognize Ratio Integer literals, % is a smart constructor
2021-11-20 22:55:30	→	xff0x has joined #haskell
2021-11-20 22:55:43	geekosaur	or quasiquoters, which amount to the same thing
2021-11-20 22:55:59	→	benin has joined #haskell
2021-11-20 22:56:02	timCF_	geekosaur: but it does recognize Natural, and will not compile negative literals
2021-11-20 22:56:14	geekosaur	right
2021-11-20 22:58:55	←	justsomeguy has quit (Quit: WeeChat 3.3)
2021-11-20 22:59:10	→	mimmy has joined #haskell
2021-11-20 22:59:17	→	zero has joined #haskell
2021-11-20 22:59:20	dsal	ProfSimm: We do have a concept of a type role which allows us to treat (or prevents us from treating) a structure of one type as a structure of another type with the same representation, but the deep comparison thing is orthogonal, I think.
2021-11-20 22:59:32	dsal	(super likely I don't understand what you're getting at, but this at least sounds similar)
2021-11-20 23:00:13	ProfSimm	dsal, the structural comparison would be some initial sanity check. But I think two types stand the test of being compatible if they actually produce the same outcomes
2021-11-20 23:00:53	zero	if we can have a total linear function that only uses total linear functionss, we could pattern match against them, couldn't we?
2021-11-20 23:00:53	ProfSimm	dsal well I'm using a type a bit differently here. Not as in "same contract, different result, different implementation"
2021-11-20 23:01:07	ProfSimm	But as in "same contract and result, different implementation"
2021-11-20 23:01:31	ProfSimm	zero, do you know how epicycles work (related concept fourier transform)
2021-11-20 23:01:48	zero	ProfSimm: i know nothing about it
2021-11-20 23:01:48	←	juhp has quit (Read error: Connection reset by peer)
2021-11-20 23:02:09	zero	not by name at least
2021-11-20 23:02:21	ProfSimm	zero, basically you can take a signal and decompose it to frequencies, each a sine wave with different amplitude
2021-11-20 23:02:30	zero	ah yes
2021-11-20 23:02:34	→	unit73e has joined #haskell
2021-11-20 23:02:46	dsal	ProfSimm: Yeah, I don't think that concept exists directly.  I'm thinking about coerce, which looks like this:  https://hackage.haskell.org/package/base-4.16.0.0/docs/Data-Coerce.html  -- type role allows us to say that given a `Map k v` the `v` can be coerced without changing meaning, but the `k` cannot.
2021-11-20 23:02:51	ProfSimm	zero, do the same in 2D you get circles. You can use this analysis to draw homer simply by connecting rotating circle of various size and speed
2021-11-20 23:03:16	shapr	o hi ProfSimm, how's code?
2021-11-20 23:03:19	ProfSimm	zero: https://www.youtube.com/watch?v=QVuU2YCwHjw
2021-11-20 23:03:33	zero	ProfSimm: yes, i get that. how does it relate to my questin?
2021-11-20 23:03:41	ProfSimm	shapr, I'm in a very odd place dude. I'm gonna need a quantum computer to implement some features :-)
2021-11-20 23:04:09	ProfSimm	zero, well the thing I wanna achieve is not match linear functions, but match result
2021-11-20 23:04:31	ProfSimm	And actually "close enough" is an allowance, for some specific amount of close enough
2021-11-20 23:05:09	ProfSimm	Wait, let me redefine this
2021-11-20 23:05:34	ProfSimm	Imagine if Haskell trained a neural network on a type, and when they get close enough, it replaces the type with the neural network
2021-11-20 23:06:01	zero	ProfSimm: ah, i was confused. i entered the channel just now to ask my question, have no idea of what you were talking about ;)
2021-11-20 23:07:39	ProfSimm	Oh OK
2021-11-20 23:08:57	dsal	ProfSimm: It's not  clear to me what it means to change a type along the way.  It sounds like you're describing a sum type at some point with some kind of ability to coerce that I don't think you're going to get for free.
2021-11-20 23:10:25	geekosaur	zero, I think you would need more than linearity to pattern match a function
2021-11-20 23:11:02	geekosaur	try figuring out what this would look like
2021-11-20 23:13:43	→	pfurla has joined #haskell
2021-11-20 23:15:58	←	ouroboros_ has quit (Quit: Konversation terminated!)
2021-11-20 23:21:01	←	deadmarshal has quit (Ping timeout: 240 seconds)
2021-11-20 23:23:42	→	econo has joined #haskell
2021-11-20 23:24:10	hololeap	@hackage validated-literals -- timCF_
2021-11-20 23:24:10	lambdabot	https://hackage.haskell.org/package/validated-literals -- timCF_
2021-11-20 23:24:21	hololeap	this uses TH, but it might be useful for you
2021-11-20 23:27:18	awpr	oh I missed that question -- check out https://hackage.haskell.org/package/dependent-literals-plugin
2021-11-20 23:29:25	awpr	it's a bit heavyweight just to rule out zero without calling a smart constructor, but I guess it could be worth it if you have code with tons of PosRat literals that would be overwhelmed with noise otherwise
2021-11-20 23:30:00	timCF_	thanks!
2021-11-20 23:31:24	←	fabfianda has quit (Ping timeout: 256 seconds)
2021-11-20 23:31:25	←	eggplantade has quit (Remote host closed the connection)
2021-11-20 23:31:57	→	fabfianda has joined #haskell
2021-11-20 23:36:52	→	eggplantade has joined #haskell
2021-11-20 23:42:35	→	lavaman has joined #haskell
2021-11-20 23:42:50	←	tired has quit (Quit: /)
2021-11-20 23:43:21	→	renzhi has joined #haskell
2021-11-20 23:43:21	←	fabfianda has quit (Quit: Quit)
2021-11-20 23:44:22	→	tired has joined #haskell
2021-11-20 23:45:34	←	hippoid has quit (Ping timeout: 256 seconds)
2021-11-20 23:47:23	←	lavaman has quit (Ping timeout: 268 seconds)
2021-11-20 23:52:44	←	pfurla has quit (Quit: gone to sleep. ZZZzzz…)
2021-11-20 23:54:07	→	deadmarshal has joined #haskell
2021-11-20 23:55:51	←	euouae has quit (Quit:  )
2021-11-20 23:56:35	→	pfurla has joined #haskell
2021-11-20 23:57:50	←	dyeplexer has quit (Remote host closed the connection)
2021-11-20 23:59:44	→	hippoid has joined #haskell
2021-11-21 00:05:51	←	chexum has quit (Remote host closed the connection)
2021-11-21 00:06:04	→	chexum has joined #haskell
2021-11-21 00:06:25	←	rusty has quit (Ping timeout: 260 seconds)
2021-11-21 00:13:12	←	Everything has quit (Quit: leaving)
2021-11-21 00:14:30	→	lavaman has joined #haskell
2021-11-21 00:15:46	←	mimmy has quit (Ping timeout: 268 seconds)
2021-11-21 00:15:53	→	aliosablack has joined #haskell
2021-11-21 00:16:22	→	merijn has joined #haskell
2021-11-21 00:17:21	→	yauhsien has joined #haskell
2021-11-21 00:18:50	←	chomwitt has quit (Ping timeout: 268 seconds)
2021-11-21 00:19:01	←	lavaman has quit (Ping timeout: 260 seconds)
2021-11-21 00:21:50	←	yauhsien has quit (Ping timeout: 256 seconds)
2021-11-21 00:23:41	←	jpds has quit (Ping timeout: 276 seconds)
2021-11-21 00:25:01	←	aliosablack has quit (Ping timeout: 268 seconds)
2021-11-21 00:25:41	→	jpds has joined #haskell
2021-11-21 00:26:31	←	myme has quit (Ping timeout: 240 seconds)
2021-11-21 00:27:18	←	abhixec has quit (Remote host closed the connection)
2021-11-21 00:27:20	←	deadmarshal has quit (Quit: ZNC 1.8.2 - https://znc.in)
2021-11-21 00:27:47	→	deadmarshal has joined #haskell
2021-11-21 00:28:50	→	myme has joined #haskell
2021-11-21 00:31:11	←	max22- has quit (Ping timeout: 268 seconds)
2021-11-21 00:36:38	←	pfurla has quit (Quit: gone to sleep. ZZZzzz…)
2021-11-21 00:36:49	→	abhixec has joined #haskell
2021-11-21 00:39:44	→	mimmy has joined #haskell
2021-11-21 00:40:34	←	hippoid has quit (Ping timeout: 264 seconds)
2021-11-21 00:42:06	→	hippoid has joined #haskell
2021-11-21 00:42:18	→	Guest17 has joined #haskell
2021-11-21 00:42:39	←	machinedgod has quit (Remote host closed the connection)
2021-11-21 00:44:31	←	mimmy has quit (Ping timeout: 240 seconds)
2021-11-21 00:47:10	←	hippoid has quit (Ping timeout: 264 seconds)
2021-11-21 00:50:31	←	merijn has quit (Ping timeout: 240 seconds)
2021-11-21 00:53:02	sm	g'day all
2021-11-21 00:54:10	→	coolnickname has joined #haskell
2021-11-21 00:54:17	sm	so.. for haskell code, 2-space indent, or 4 ?
2021-11-21 00:54:57	geekosaur	I use 2 fwiw
2021-11-21 00:55:05	sm	I use 2, but I'm getting the feeling 4 might be smoother with haskell syntax
2021-11-21 00:55:14	→	hippoid has joined #haskell
2021-11-21 00:55:41	→	pwug has joined #haskell
2021-11-21 00:55:47	sm	let a=1
2021-11-21 00:55:47	sm	    b=2
2021-11-21 00:55:47	sm	... eg
2021-11-21 00:55:52	←	deadmarshal has quit (Ping timeout: 250 seconds)
2021-11-21 00:56:06	EvanR	hah
2021-11-21 00:56:48	awpr	I've seen some people just put the first let-binding on a new line.  but I tend to just make an exception and align let-bindings at 4 spaces, and use 2 for normal indentation
2021-11-21 00:56:52	geekosaur	I wouldn't use 2 there but that's because of block indentation; I'd use 2 if I hit enter after the let
2021-11-21 00:58:26	EvanR	if I need recursive definitions I try hard to use where not let
2021-11-21 00:59:09	EvanR	if I need a sequence of lets I do https://paste.tomsmeding.com/xHhQbPoZ
2021-11-21 00:59:13	EvanR	which is rare
2021-11-21 01:00:16	EvanR	basically, over 1 level of indentation and I feel like I did something wrong
2021-11-21 01:00:36	EvanR	(which sm's let has)
2021-11-21 01:02:04	⚡	sm was trying out floskell, which uses 4 by default
2021-11-21 01:02:40	monochrom	I use a 2-4 combo.  "f x = y" "<2 spaces>where" "<4 spaces>y = x+x"
2021-11-21 01:03:20	Hecate	hohai
2021-11-21 01:03:26	Hecate	I've done a thing: https://twitter.com/TechnoEmpress/status/1462135732680769539
2021-11-21 01:03:26	maerwald	I use whatever I feel like at the moment
2021-11-21 01:03:36	monochrom	I learned it from tibbe's style guide. I think it's an ingenious design accomodating "where" which you don't find in other languages.
2021-11-21 01:03:52	←	acarrico has quit (Quit: Leaving.)
2021-11-21 01:04:11	monochrom	https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md
2021-11-21 01:04:20	sm	thanks
2021-11-21 01:04:29	maerwald	burn all style guides
2021-11-21 01:04:32	→	max22- has joined #haskell
2021-11-21 01:04:47	sm	ah yes, half-indent for `where`
2021-11-21 01:05:06	monochrom	In other languages (e.g., C, shell script), I use 2 spaces.
2021-11-21 01:05:15	→	machinedgod has joined #haskell
2021-11-21 01:05:17	sm	that's another reason I think 4 might be smoother. Half of a 2-indent is not much
2021-11-21 01:05:38	maerwald	I've worked on a 4spaces indent codebase, I remember some corner cases there too
2021-11-21 01:05:52	sm	though, I tend to give `where` a full indent, and just indent the definitions more
2021-11-21 01:06:05	←	abrantesasf has quit (Remote host closed the connection)
2021-11-21 01:06:10	maerwald	ah yeah... there's a corner case with `do` and indenting
2021-11-21 01:06:32	geekosaur	yeh, my usual style means it's indented by 3 because of block indenting
2021-11-21 01:06:42	geekosaur	unless I start it with a newline, then it's 2
2021-11-21 01:06:46	sm	(why should where bindings be indented less than let bindings, after all)
2021-11-21 01:07:34	monochrom	I'm very happy that in "let x=1", the "let " length is 4, so when on the next line I have "<4 spaces>y=2" it lines up.
2021-11-21 01:08:30	maerwald	here strict 4 indenting makes compilation fail: https://paste.tomsmeding.com/rLQWB31q
2021-11-21 01:08:49	sm	I guess I'll start by just adopting the 4-space indent for let.. that's pretty low impact
2021-11-21 01:09:13	sm	low benefit too I guess, code formatters will be confused
2021-11-21 01:09:29	←	hippoid has quit (Ping timeout: 260 seconds)
2021-11-21 01:10:14	EvanR	I put the main where at the end of the line before the indented chunk, and people seem to hate it
2021-11-21 01:10:22	EvanR	dunno why
2021-11-21 01:11:20	←	Jeanne-Kamikaze has quit (Quit: Leaving)
2021-11-21 01:11:22	maerwald	in all the time I had to engage in styling discussions in industry... I could have written a Haskell compiler
2021-11-21 01:12:52	→	mimmy has joined #haskell
2021-11-21 01:12:57	monochrom	I don't hate it, but I don't do it because " where" is like 9% of your "70-column line" quota.
2021-11-21 01:13:35	monochrom	Although, I have long relaxed to 80 columns.
2021-11-21 01:14:14	geekosaur	I'm up to 96
2021-11-21 01:14:25	monochrom	It's the 21st century. We use 16:9 screens, not 9:16 screens. Even 100 columns is reasonable.
2021-11-21 01:14:38	maerwald	savage... what if someone reads your code on a small ssh terminal in a bunker after doomsday?
2021-11-21 01:14:40	geekosaur	70/72 died with card readers, 80 died with physical terminals :)
2021-11-21 01:15:03	monochrom	dragging column limits screaming kicking into the century of the 16:9 screen.
2021-11-21 01:15:05	Rembane_	OTOH, human eyes seem to have a max width that's reasonable to read 
2021-11-21 01:15:44	maerwald	Rembane_: there's neuroscience research that moving your eyes laterally increases happiness (I'm not kidding) :p
2021-11-21 01:15:57	sm	for code, I think logical grouping by line is more important than line width
2021-11-21 01:16:12	sm	we are usually skimming code, not reading every word
2021-11-21 01:16:35	sm	it's fine if the last bit is cut off at times
2021-11-21 01:16:50	Rembane_	maerwald: Nice! Now we need some creative surgery so we can rotate the eyes inside the skull :D
2021-11-21 01:16:52	→	acidjnk_new has joined #haskell
2021-11-21 01:16:58	Rembane_	maerwald: Eyes go: "WEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE!!!"
2021-11-21 01:17:10	monochrom	Oh well, I guess 30 years later people read code on TikTok, they will be back at 40 columns again (remember those? >:) )
2021-11-21 01:17:21	EvanR	if you aren't coding in style, what's the point
2021-11-21 01:17:28	EvanR	:sunglasses:
2021-11-21 01:17:28	maerwald	https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6596227/
2021-11-21 01:17:50	sm	but for text, speaking of short lines readability.. I really like the newspaper-style layout of https://scroll.pub
2021-11-21 01:17:58	←	mimmy has quit (Ping timeout: 250 seconds)
2021-11-21 01:18:01	geekosaur	after the great emp pulse we won't be reading code at all :þ
2021-11-21 01:18:24	sm	geekosaur: :-/
2021-11-21 01:18:28	monochrom	Actually I hate those double-column layouts.
2021-11-21 01:18:55	monochrom	Well OK, I'm fine with in on physical paper. But on a 16:9 screen?! 
2021-11-21 01:19:41	geekosaur	I use a 2-column layout. two separate editor windows, usually on different files
2021-11-21 01:19:42	maerwald	Rembane_: people usually get really confused if you bring scientific research into the style discussion... I mean if you're nitpicking on irrelevant stuff, do it all the way!
2021-11-21 01:20:12	Rembane_	maerwald: Sure thing! Eventually we need to go to the sources. 
2021-11-21 01:20:26	monochrom	OK, I'm fine with it on a 16:9 screen if each column fits within the verticle screen length.
2021-11-21 01:20:35	monochrom	Clearly, academic paper 
2021-11-21 01:20:59	monochrom	Clearly, neither academic paper PDFs nor scroll.pub satisfies that.
2021-11-21 01:21:28	sm	monochrom: scroll.pub doesn't do that (it fits the width, and extends downward). But that (fitting the height, and extending sideways) would also be nice to try.
2021-11-21 01:22:04	maerwald	Rembane_: also, really good argument for spaces: https://stackoverflow.blog/2017/06/15/developers-use-spaces-make-money-use-tabs/
2021-11-21 01:22:05	sm	even as it is now, I found it pretty refreshing and efficient for reading a faq
2021-11-21 01:22:19	Rembane_	maerwald: I dig that! 
2021-11-21 01:22:50	maerwald	and apparently, haskell is wrong with using camelCase: https://ieeexplore.ieee.org/document/5521745
2021-11-21 01:22:59	→	hippoid has joined #haskell
2021-11-21 01:23:17	monochrom	Therefore, when a sentence is split between 2 columns, it is also separated by like a metre.
2021-11-21 01:23:38	monochrom	a metre of scrolling
2021-11-21 01:23:50	sm	it gets worse the more content you put on one page, yes
2021-11-21 01:23:52	monochrom	How would any human consider it ergonomic, I don't know.
2021-11-21 01:24:29	sm	but newspapers work like that too, and we manage
2021-11-21 01:24:58	monochrom	scroll.pub itself shows an ample example of doing it wrong.
2021-11-21 01:25:13	monochrom	newspapers are on physical paper, as said. you just fly your eyes.
2021-11-21 01:25:44	geekosaur	newspapers also have "above/below the fold"
2021-11-21 01:25:52	monochrom	Where as on scroll.pub, consider the section "How do I check browser performance?"
2021-11-21 01:26:04	monochrom	You have an opening sentence.
2021-11-21 01:26:20	monochrom	And then, what, the sample code requires scrolling all the way back to the top.
2021-11-21 01:26:35	monochrom	Remember cathoy ray tubes?
2021-11-21 01:27:13	monochrom	Remember its electron beam goes horizontally normally, but it has to quickly fly back to the left for the next line.
2021-11-21 01:27:33	monochrom	I feel like 2-column layout fanatics want me to do the same manually vertically.
2021-11-21 01:27:51	monochrom	I feel like they are maschosists.
2021-11-21 01:28:02	monochrom	"Hahaha let's torture the readers thus!"
2021-11-21 01:28:08	←	hippoid has quit (Ping timeout: 256 seconds)
2021-11-21 01:28:36	hololeap	I indent using random fibonacci numbers
2021-11-21 01:28:38	monochrom	If you have 5 lines of code to post.
2021-11-21 01:28:45	awpr	once per page, though.  if I see lines the full width of my monitor, I have no chance of moving my eyes correctly back to the start of the next line
2021-11-21 01:29:02	awpr	with a newspaper column width line, it's almost 100% reliably accurate
2021-11-21 01:29:19	monochrom	They're like "let's put 3 of those lines at the far bottom, let's put the other 2 lines at the far top, so that people cannot use copy-paste".
2021-11-21 01:29:24	hololeap	just for that e e cummings vibe
2021-11-21 01:29:58	maerwald	but the realy question is: do you align vertically?!
2021-11-21 01:31:54	monochrom	It breaks all kinds of proximity, locality principles.
2021-11-21 01:32:19	→	myShoggoth has joined #haskell
2021-11-21 01:32:23	EvanR	quantum style
2021-11-21 01:32:49	EvanR	my C code is entangled
2021-11-21 01:33:13	maerwald	I have seen suggestions like this: https://paste.tomsmeding.com/TV7JCPRb
2021-11-21 01:33:30	maerwald	so you can see relations of identifiers
2021-11-21 01:33:32	EvanR	:horror:
2021-11-21 01:34:19	maerwald	I mean... in maths you sometimes do that
2021-11-21 01:36:02	monochrom	You know, it works when your function can be linearly typed. Clearly, in retrospect.
2021-11-21 01:36:31	monochrom	If your x needs to be mentioned at 100 places, good luck with that.
2021-11-21 01:36:47	→	juhp has joined #haskell
2021-11-21 01:38:41	←	abhixec has quit (Remote host closed the connection)
2021-11-21 01:39:37	←	ees has quit (Ping timeout: 268 seconds)
2021-11-21 01:39:49	→	ees has joined #haskell
2021-11-21 01:40:16	→	hippoid has joined #haskell
2021-11-21 01:41:01	←	finsternis has quit (Ping timeout: 240 seconds)
2021-11-21 01:41:46	→	finsternis has joined #haskell
2021-11-21 01:49:56	→	mimmy has joined #haskell
2021-11-21 01:50:52	←	notzmv has quit (Ping timeout: 265 seconds)
2021-11-21 01:54:44	←	mimmy has quit (Ping timeout: 265 seconds)
2021-11-21 01:55:08	←	[itchyjunk] has quit (Read error: Connection reset by peer)
2021-11-21 01:59:39	→	Sgeo has joined #haskell
2021-11-21 02:00:53	←	Vajb has quit (Read error: Connection reset by peer)
2021-11-21 02:01:06	→	Vajb has joined #haskell
2021-11-21 02:06:31	←	forell has quit (Quit: ZNC - https://znc.in)
2021-11-21 02:07:48	→	forell has joined #haskell
2021-11-21 02:09:17	←	mikoto-chan has quit (Quit: mikoto-chan)
2021-11-21 02:12:58	→	mimmy has joined #haskell
2021-11-21 02:16:13	→	yauhsien has joined #haskell
2021-11-21 02:20:31	←	yauhsien has quit (Ping timeout: 240 seconds)
2021-11-21 02:26:39	→	deadmarshal has joined #haskell
2021-11-21 02:26:53	→	jinsun__ has joined #haskell
2021-11-21 02:28:19	ℹ	irc: disconnected from server
2021-11-23 23:17:23	→	oxide has joined #haskell
2021-11-23 23:17:23	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-11-23 23:17:23	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-11-23 23:17:23	ℹ	Channel #haskell: 722 nicks (1 op, 0 voices, 721 normals)
2021-11-23 23:17:23	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2021-11-23 23:17:23	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-11-23 23:19:56	dsal	LOL.  /nix is under 9GB now.
2021-11-23 23:20:46	dsal	Oh nice, and now my things don't build.
2021-11-23 23:21:55	shapr	mine is 233gb
2021-11-23 23:22:01	←	hippoid has quit (Ping timeout: 256 seconds)
2021-11-23 23:23:17	→	lavaman has joined #haskell
2021-11-23 23:23:36	dsal	There were two libraries that my ghc depends on that were missing.  That's kind of interesting.  Luckily, the error messages make it easy to understand exactly what needed to be fixed.
2021-11-23 23:23:46	←	ChaiTRex has quit (Ping timeout: 276 seconds)
2021-11-23 23:24:04	→	hippoid has joined #haskell
2021-11-23 23:24:14	→	wroathe has joined #haskell
2021-11-23 23:24:15	←	wroathe has quit (Changing host)
2021-11-23 23:24:15	→	wroathe has joined #haskell
2021-11-23 23:24:38	dsal	libgmp and libffi in particular
2021-11-23 23:26:03	→	ChaiTRex has joined #haskell
2021-11-23 23:27:20	zero	o.o
2021-11-23 23:27:43	←	lavaman has quit (Ping timeout: 256 seconds)
2021-11-23 23:28:28	⚡	zero caresses his 13GiB disk
2021-11-23 23:28:57	→	Guest17 has joined #haskell
2021-11-23 23:29:04	←	wroathe has quit (Ping timeout: 260 seconds)
2021-11-23 23:30:11	←	mbuf has quit (Quit: Leaving)
2021-11-23 23:35:40	→	deadmarshal has joined #haskell
2021-11-23 23:36:18	←	ChaiTRex has quit (Remote host closed the connection)
2021-11-23 23:36:46	→	ChaiTRex has joined #haskell
2021-11-23 23:37:45	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-11-23 23:39:55	←	Topsi has quit (Read error: Connection reset by peer)
2021-11-23 23:41:31	→	nvmd has joined #haskell
2021-11-23 23:43:07	→	yauhsien has joined #haskell
2021-11-23 23:43:12	→	gaff has joined #haskell
2021-11-23 23:44:59	gaff	compare x y | x == y = EQ, | x <= y = LT, otherwise = GT.  why does it use `<=` instead of just `<'?
2021-11-23 23:45:53	geekosaur	because that allows the other comparison functions to be defined in terms of <=, ==, and negation
2021-11-23 23:46:06	geekosaur	the minimal definition of Ord is either <= or compare
2021-11-23 23:46:29	geekosaur	(not sure the other funxtions *are* defined that way currently, but.)
2021-11-23 23:46:52	EvanR	raising the question of why (<=) is in that rol^
2021-11-23 23:47:06	EvanR	er, why <= and not < is used in this way
2021-11-23 23:47:16	←	fr33domlover has quit (Ping timeout: 260 seconds)
2021-11-23 23:47:27	→	hololeap_ has joined #haskell
2021-11-23 23:47:37	gaff	EvanR: yeah
2021-11-23 23:47:49	←	yauhsien has quit (Ping timeout: 264 seconds)
2021-11-23 23:47:49	←	hololeap has quit (Ping timeout: 276 seconds)
2021-11-23 23:48:20	gaff	geekosaur: which are the "other" comparison functions?  you mean stuff like <, >, etc?
2021-11-23 23:48:33	geekosaur	yes
2021-11-23 23:48:42	EvanR	LTE gives the algebraic property that x LTE x, for what thats worth
2021-11-23 23:49:55	gaff	EvanR: i am not sure i understand what you just said about algebraic property
2021-11-23 23:50:00	EvanR	you could be working with something that supports LTE and not equality test
2021-11-23 23:50:44	EvanR	or its technically challenging to tell the difference
2021-11-23 23:51:54	sm	g'day all. PSA for vs code haskell users: disable Outline: Show Modules to hide imports in outline pane and make it more useful
2021-11-23 23:53:18	sm	and while I'm here.. if you have TH in your project, stick with hls 1.4.0 a little longer till 1.5.1 arrives
2021-11-23 23:53:19	EvanR	haskell people like partial orders, and for the comparison to be a partial order, x must be less than or equal to itself
2021-11-23 23:53:47	EvanR	unlike <
2021-11-23 23:55:25	→	abhixec has joined #haskell
2021-11-23 23:55:51	monochrom	<= vs < is once again just another big endian vs little endian, or whether 0 is a natural number.
2021-11-23 23:56:01	gaff	geekosaur: suppose i defined compare using <.  i could still define other comparison operators using compare.  i am not sure i see the problem. 
2021-11-23 23:56:20	→	eggplantade has joined #haskell
2021-11-23 23:56:50	monochrom	BTW there is also disagreement on whether "positive" means >0 or >=0.
2021-11-23 23:57:17	EvanR	relations like <= come in more situations than < or ==, it's more general
2021-11-23 23:57:32	geekosaur	gaff, at this point I suspect it has to do with what EvanR said about partial orders. you're assuming a total order
2021-11-23 23:57:52	→	hololeap has joined #haskell
2021-11-23 23:57:58	gaff	for example x <=y = (compare x y == EQ) || (compare x y == LT)
2021-11-23 23:58:11	geekosaur	if it's a partial order, compare defined with <= should be strictly more defined than with <. I think.
2021-11-23 23:58:13	←	hololeap_ has quit (Ping timeout: 276 seconds)
2021-11-23 23:58:33	EvanR	yeah it's useful esp with laziness
2021-11-23 23:58:38	geekosaur	partial orders are not particularly intuitive
2021-11-23 23:58:52	geekosaur	we assume any ordering relation is total
2021-11-23 23:59:12	gaff	sorry, what do you mean by "partial" order?
2021-11-23 23:59:40	EvanR	an example is the substring relation
2021-11-23 23:59:54	EvanR	"abc" <= "abcde"
2021-11-24 00:00:08	EvanR	but "abc" isn't related to "def" one way or the other
2021-11-24 00:00:33	←	hippoid has quit (Ping timeout: 256 seconds)
2021-11-24 00:00:34	EvanR	i should say, prefix relation, which lets you quit checking early
2021-11-24 00:00:50	←	Everything has quit (Quit: leaving)
2021-11-24 00:01:01	←	eggplantade has quit (Ping timeout: 264 seconds)
2021-11-24 00:01:51	gaff	so what exactly is "partial" about it?  you mean you only need to check things partially?
2021-11-24 00:02:26	EvanR	not every pair of strings are related, or ordered wrt each other... aka some pairs of "incomparable"
2021-11-24 00:02:27	geekosaur	it's not defined in some cases
2021-11-24 00:02:41	EvanR	er, are incomparable
2021-11-24 00:02:44	geekosaur	with respect to prefixes, "abc" is not in any way related to "def"
2021-11-24 00:03:10	gaff	ok
2021-11-24 00:03:29	EvanR	kind of doesn't apply to Ord because you expect an answer for every pair of strings xD
2021-11-24 00:03:33	geekosaur	so the prefix relation is only a partial orderingt
2021-11-24 00:03:46	gaff	so you define a minimal set of comparisions, rather than a comprehensive or exhaustive one?
2021-11-24 00:03:56	sshine	lexicographical order is a full ordering
2021-11-24 00:04:03	gaff	ok
2021-11-24 00:05:37	sshine	gaff, another example of something that has a partial order is a lattice: https://i.stack.imgur.com/eSqlI.png
2021-11-24 00:06:01	→	hippoid has joined #haskell
2021-11-24 00:06:22	EvanR	since Ord is probably expecting total order (x <= y or y <= x for all x and y), this is all probably nonsense. But partial orders come up so much that the designers may led that bleed into the API xD
2021-11-24 00:06:25	←	ph88^ has quit (Ping timeout: 264 seconds)
2021-11-24 00:07:27	gaff	EvanR: yeah, thanks for saying that because i was wondering how what you said about partial ordering matches up with my question on compare 
2021-11-24 00:07:38	EvanR	> ((0/0) <= 1, 1 <= (0/0) -- except for this
2021-11-24 00:07:39	reumeth	geekosaur: I got further with my JSON fuzz thing. Now I'm stuck because I seem to be missing something that looks like mapM for a HashMap. Is there such a thing?
2021-11-24 00:07:40	lambdabot	 <hint>:1:43: error:
2021-11-24 00:07:40	lambdabot	     parse error (possibly incorrect indentation or mismatched brackets)
2021-11-24 00:07:47	EvanR	> ((0/0) <= 1, 1 <= (0/0)) -- except for this
2021-11-24 00:07:48	lambdabot	 (False,False)
2021-11-24 00:08:25	geekosaur	ok, the Report says Ord is total
2021-11-24 00:08:45	→	merijn has joined #haskell
2021-11-24 00:09:17	→	trcc has joined #haskell
2021-11-24 00:09:27	sshine	I actually thought this conversation started from Rust's std::cmp::PartialOrd :)
2021-11-24 00:09:45	monochrom	Partial order can be equivalently defined in terms of <.  The axioms are: < is irreflexive and transitive.  <= is not the only way to think of partial orders.
2021-11-24 00:09:58	geekosaur	reumeth, mapM is traverse and HashMap has a Traversable instance
2021-11-24 00:10:20	gaff	so just to clear up, is there any real reason why compare is defined using <=?
2021-11-24 00:10:25	geekosaur	(mapM is kind of historical)
2021-11-24 00:10:25	monochrom	No.
2021-11-24 00:10:25	EvanR	it may be that <= is simpler in constructive 
2021-11-24 00:10:28	sshine	gaff, https://doc.rust-lang.org/std/cmp/trait.PartialOrd.html -- so Maybe Ordering.
2021-11-24 00:10:41	EvanR	or I'm just cargo culting
2021-11-24 00:10:49	gaff	ok
2021-11-24 00:10:52	gaff	ha
2021-11-24 00:10:54	sshine	gaff, my guess is: because classic algorithms textbooks use <=... at least, that's where I started doing <= by default. :-P
2021-11-24 00:11:07	monochrom	Just another big endian vs little endian.
2021-11-24 00:11:13	←	hippoid has quit (Ping timeout: 264 seconds)
2021-11-24 00:11:15	geekosaur	this is another of those instances where you'd like to be able to hunt down the original Haskell designers and ask why, in other words
2021-11-24 00:11:22	reumeth	geekosaur: Wow, I'm so stupid that I didn't realize that. Now it works, thanks!
2021-11-24 00:11:32	sshine	yeah, as long as you have a convention, your thingies are gonna end up on the expected side of the balanced tree.
2021-11-24 00:11:33	EvanR	irreflexive involves a negative assertion which are trickier in constructive settings
2021-11-24 00:11:48	gaff	ok ... complicated origins lost in the mists of time ... poetic
2021-11-24 00:11:51	monochrom	<= is more convenient in denotational semantics. This affects Haskell, some Haskellers use denotational semantics to design and use Haskell.
2021-11-24 00:11:56	reumeth	I think I got tripped up because I had to use HashMap.map for the normal map, so I expected a HashMap.mapM
2021-11-24 00:12:09	monochrom	But < is more convenient when you work with well-founded induction.
2021-11-24 00:12:33	gaff	monochrom: i see
2021-11-24 00:13:12	→	DNH has joined #haskell
2021-11-24 00:13:30	monochrom	I also bet that laziness doesn't favour either one. Where there is no lazy algorithm for <, I bet you there is also none for <=.
2021-11-24 00:14:06	EvanR	if you don't care if something's equal or not, that's automatically making the problem less specific
2021-11-24 00:14:25	EvanR	you won't need to check for NOT equal
2021-11-24 00:14:33	EvanR	as stipulated in <
2021-11-24 00:15:02	gaff	yeah
2021-11-24 00:15:03	→	hippoid has joined #haskell
2021-11-24 00:15:13	monochrom	That sounds very nice. Except there is no example.
2021-11-24 00:15:38	EvanR	testing string prefixes?
2021-11-24 00:15:55	EvanR	as opposed to is prefix but not also equal
2021-11-24 00:16:40	monochrom	For finite strings both <= and < can be done.
2021-11-24 00:16:52	monochrom	For infinite strings both <= and < can non-terminate.
2021-11-24 00:17:19	AWizzArd	What is TypeInType for? Is this just a shortcut so that I don't explicitly have to use the PolyKinds, DataKinds and KindSignatures extensions?
2021-11-24 00:17:45	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-11-24 00:18:09	monochrom	<= still needs to wait for one string to end before saying "yes". This is no better than <.
2021-11-24 00:18:20	EvanR	yeah
2021-11-24 00:19:01	EvanR	in well founded induction, does this "not (a < a)" even come up... if not I wonder what the relevant property is
2021-11-24 00:19:11	geekosaur	AWizzArd, not quite. TypeInType simplifies types, kinds, etc. these days it's on by default iirc
2021-11-24 00:19:51	Franciman	it's cool, it's only side effect is that it makes the logic inconsistent
2021-11-24 00:19:55	→	tromp has joined #haskell
2021-11-24 00:19:55	Franciman	but who gares!
2021-11-24 00:19:58	geekosaur	you could say it's a compiler simplification that originally was conditionally enabled for testing, but these days is conditionally disableable in case of portability issues
2021-11-24 00:20:24	geekosaur	probably it'll go away at some point because there's no reason to carry the old kind system forward any more
2021-11-24 00:20:24	←	myShoggoth has quit (Ping timeout: 260 seconds)
2021-11-24 00:21:01	→	myShoggoth has joined #haskell
2021-11-24 00:21:21	geekosaur	it does iirc make things like PolyKinds easier to implement
2021-11-24 00:21:43	AWizzArd	geekosaur: could you list one example of what TypeInType is doing which is *not* available when PolyKinds, DataKinds and KindSignatures are turned on?
2021-11-24 00:21:58	monochrom	Well-founded induction: To prove forall x. P(x), prove this: forall x. (forall w. if w<x then P(w)) implies P(x)
2021-11-24 00:22:00	AWizzArd	So anything additional that it adds on top of those?
2021-11-24 00:22:11	geekosaur	uh, how does that question follow from what I said?
2021-11-24 00:22:51	geekosaur	TypeInType is a prerequisite for those, not an extension to them
2021-11-24 00:23:08	EvanR	i see, so w not equal x is critical for that to get started
2021-11-24 00:27:50	geekosaur	AWizzArd, absent TypeInType ghc's kind system is too limited to do things like PolyKinds or DataKinds. with it, we can start talking about those meaningfully
2021-11-24 00:28:47	monochrom	Is the logic inconsistent? Or is the meta-logic inconsistent?
2021-11-24 00:29:24	monochrom	The meta-logical inconsistency is in reading "X -> Y" as "X implies Y", for example.
2021-11-24 00:29:32	←	max22- has quit (Ping timeout: 250 seconds)
2021-11-24 00:29:58	monochrom	If you read it as "X implies Y provided non-bottom prerequisites" then it's fine.
2021-11-24 00:30:02	←	jonathanx has quit (Quit: Leaving)
2021-11-24 00:30:20	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-11-24 00:30:44	←	gaff has quit
2021-11-24 00:31:31	monochrom	Ugh missed the opportunity to be a badass.
2021-11-24 00:31:45	monochrom	If you read it as "X implies Y provided non-bottom prerequisites" then the inconsistency disappears in a puff of logic. >:)
2021-11-24 00:32:15	→	hskpractice has joined #haskell
2021-11-24 00:33:06	AWizzArd	geekosaur: okay, so it’s more like foundational to the others if I understand you correctly.
2021-11-24 00:33:14	geekosaur	yes
2021-11-24 00:33:16	hskpractice	is it possible to, in ghci, get `Maybe`s Functor instance definition?
2021-11-24 00:33:25	hskpractice	:info "instance Functor Maybe" or something
2021-11-24 00:33:55	geekosaur	with the old kind system, the only basic kind was * and you could only use parentheses and arrows to make more complex kinds
2021-11-24 00:33:56	←	deadmarshal has quit (Ping timeout: 260 seconds)
2021-11-24 00:34:13	geekosaur	and you couldn't actually talk about kind variables, they were only used internally, iirc
2021-11-24 00:34:29	geekosaur	TypeInType means "reuse the type system as the kind system"
2021-11-24 00:34:44	geekosaur	so now you get the full power of the type system to describe kinds as well
2021-11-24 00:34:48	monochrom	hskpractice: No, generally ghci does not show or even know source code.
2021-11-24 00:35:22	→	eggplantade has joined #haskell
2021-11-24 00:38:02	→	emf has joined #haskell
2021-11-24 00:40:43	←	burnsidesLlama has quit (Remote host closed the connection)
2021-11-24 00:41:09	←	trcc has quit (Remote host closed the connection)
2021-11-24 00:41:12	hskpractice	monochrom: ok, thanks
2021-11-24 00:41:42	→	trcc has joined #haskell
2021-11-24 00:42:25	←	merijn has quit (Ping timeout: 264 seconds)
2021-11-24 00:42:42	geekosaur	for many things there's only compiled code available anyway, so not really anything to show
2021-11-24 00:42:55	geekosaur	you'd need a copy of the source sitting on disk somewhere
2021-11-24 00:44:04	→	ubert has joined #haskell
2021-11-24 00:44:23	geekosaur	the ecosystem is slowly moving toward making stuff like that possible but you'd still need to e.g. have the base package source sitting around, when it's normally only the binary library
2021-11-24 00:44:34	→	alzgh has joined #haskell
2021-11-24 00:45:31	→	mvk has joined #haskell
2021-11-24 00:46:14	←	trcc has quit (Ping timeout: 260 seconds)
2021-11-24 00:47:01	→	hippoid_ has joined #haskell
2021-11-24 00:48:55	←	hippoid_ has quit (Client Quit)
2021-11-24 00:49:08	→	hippoid_ has joined #haskell
2021-11-24 00:49:11	Sqaure	im working on a Miso webapp with Servant server. If i want to download a yaml file from the client app, whats the easier path. Some servant client call. Built in function in Miso? Built in client in Ghcjs? 
2021-11-24 00:49:28	←	hippoid has quit (Ping timeout: 250 seconds)
2021-11-24 00:49:39	zero	@src Maybe
2021-11-24 00:49:39	lambdabot	data Maybe a = Nothing | Just a
2021-11-24 00:49:57	←	ubert has quit (Remote host closed the connection)
2021-11-24 00:50:18	→	econo has joined #haskell
2021-11-24 00:50:37	geekosaur	zero, remember that @src is a manual compilation and contains lies
2021-11-24 00:50:53	←	hippoid_ has quit (Client Quit)
2021-11-24 00:50:59	geekosaur	@src Functor Maybe
2021-11-24 00:50:59	lambdabot	Source not found. You speak an infinite deal of nothing.
2021-11-24 00:51:11	geekosaur	@src Maybe fmap
2021-11-24 00:51:11	lambdabot	fmap _ Nothing  = Nothing
2021-11-24 00:51:11	lambdabot	fmap f (Just a) = Just (f a)
2021-11-24 00:51:26	geekosaur	gotta remember how to use that hack :þ
2021-11-24 00:51:55	geekosaur	there used to be a way to hook lambdabot into ghci but it's long bitrotted
2021-11-24 00:53:30	zero	that's what i was after
2021-11-24 00:53:32	monochrom	Not really lies, but certainly can become out of date or unoptimized.
2021-11-24 00:54:07	zero	hskpractice: you can use @src like this, minding the caveat or
2021-11-24 00:54:31	monochrom	Not a concern for academic purposes though.
2021-11-24 00:54:39	zero	search for the amazing haskell-docs-cli
2021-11-24 00:54:52	→	ph88 has joined #haskell
2021-11-24 00:56:03	monochrom	Perhaps @src also serves a good purpose of meta-education. That just because you find something on the Internet doesn't mean you can blindly believe it.
2021-11-24 00:56:57	monochrom	But really, even @src is already more competent and honest than most bloggers.
2021-11-24 00:57:09	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-11-24 00:58:19	←	emf has quit (Quit: emf)
2021-11-24 00:58:35	←	fef has quit (Quit: Leaving)
2021-11-24 00:58:50	→	Guest75 has joined #haskell
2021-11-24 00:58:55	←	ByronJohnson has quit (Remote host closed the connection)
2021-11-24 01:00:07	←	bollu has quit (Quit: Connection closed for inactivity)
2021-11-24 01:01:23	dsal	Does anyone else ever wonder why I'm the only one who writes decent code?
2021-11-24 01:04:07	int-e	No, never.
2021-11-24 01:04:25	dsal	haha
2021-11-24 01:04:50	→	jgeerds has joined #haskell
2021-11-24 01:05:24	←	eggplantade has quit (Remote host closed the connection)
2021-11-24 01:09:41	←	Guest75 has quit (Ping timeout: 256 seconds)
2021-11-24 01:10:44	→	max22- has joined #haskell
2021-11-24 01:15:27	→	xkuru has joined #haskell
2021-11-24 01:16:46	→	burnsidesLlama has joined #haskell
2021-11-24 01:17:01	→	tromp has joined #haskell
2021-11-24 01:18:00	←	dhouthoo has quit (Quit: WeeChat 3.3)
2021-11-24 01:19:59	→	mreh has joined #haskell
2021-11-24 01:21:25	←	burnsidesLlama has quit (Ping timeout: 264 seconds)
2021-11-24 01:23:35	mreh	Has anyone found a way to speed up builds on the official haskell docker image? Is there a way somehow I could warm the cabal cache in a layer?
2021-11-24 01:24:32	Rembane_	\o/ Cachix! \o/ 
2021-11-24 01:24:40	dsal	Is there a less dumb way to write   `const x <$> v`  -- I have a functor and just want to replace the thing.
2021-11-24 01:24:56	tomsmeding	:t (<$)
2021-11-24 01:24:57	lambdabot	Functor f => a -> f b -> f a
2021-11-24 01:24:57	mreh	dsal: <$
2021-11-24 01:25:22	dsal	Ah, yeah.  I knew there was a thing and my brain just wasn't smart enough to remember.  :)
2021-11-24 01:25:49	→	burnsidesLlama has joined #haskell
2021-11-24 01:25:50	dsal	:t ($>)
2021-11-24 01:25:50	mreh	Rembane_: I'm using stack
2021-11-24 01:25:50	lambdabot	error:
2021-11-24 01:25:51	lambdabot	    • Variable not in scope: $>
2021-11-24 01:25:51	lambdabot	    • Perhaps you meant one of these:
2021-11-24 01:26:06	monochrom	Wait, I am the only one who writes decent code!
2021-11-24 01:26:10	tomsmeding	:t (Data.Functor.$>)
2021-11-24 01:26:11	lambdabot	Functor f => f a -> b -> f b
2021-11-24 01:26:44	mreh	I tried to use (<<) the other day. Doesn't exist in base, but (=<<) does.
2021-11-24 01:26:46	→	Cajun has joined #haskell
2021-11-24 01:26:49	dsal	Yeah, $> looks pretty good in this spot.
2021-11-24 01:27:02	mreh	:t <<
2021-11-24 01:27:03	lambdabot	error: parse error on input ‘<<’
2021-11-24 01:27:09	mreh	:t (<<)
2021-11-24 01:27:10	lambdabot	error:
2021-11-24 01:27:10	lambdabot	    • Variable not in scope: <<
2021-11-24 01:27:10	lambdabot	    • Perhaps you meant one of these:
2021-11-24 01:27:44	tomsmeding	:t (<*)
2021-11-24 01:27:45	lambdabot	Applicative f => f a -> f b -> f a
2021-11-24 01:27:51	tomsmeding	works for monads too :)
2021-11-24 01:28:03	monochrom	But wrong effect order.
2021-11-24 01:28:03	tomsmeding	also (>>) = (*>)
2021-11-24 01:28:15	tomsmeding	monochrom: depends on who you ask
2021-11-24 01:28:58	tomsmeding	I'd say one can argue for either order; the situation is different for (=<<), where only one order is sensibly implementable
2021-11-24 01:29:50	monochrom	I don't argue. I use experience to Bayesian-infer what the next person expects.
2021-11-24 01:29:51	→	echoreply has joined #haskell
2021-11-24 01:30:14	monochrom	Experience is that more likely a person looking for << is looking for flip (>>)
2021-11-24 01:30:52	monochrom	Everything can be argued.
2021-11-24 01:30:59	monochrom	Well, almost everything.
2021-11-24 01:31:40	monochrom	Should Ord use < instead of <= for one way for minimal completion? That can be argued, as shown earlier.
2021-11-24 01:31:57	monochrom	Should a CPU use big endian or little endian? One can argue.
2021-11-24 01:33:46	→	waleee has joined #haskell
2021-11-24 01:34:25	mreh	I think I was trying to use it with Reader.
2021-11-24 01:34:47	mreh	Applying the result to an argument, looks more like function composition
2021-11-24 01:36:06	tomsmeding	monochrom: you could well be right that most people expect 'flip (>>)' :)
2021-11-24 01:38:22	→	juhp has joined #haskell
2021-11-24 01:42:18	→	eggplantade has joined #haskell
2021-11-24 01:42:19	zero	j alacritty
2021-11-24 01:42:34	zero	ignore that
2021-11-24 01:42:41	maerwald	zero: I can't
2021-11-24 01:42:49	⚡	tomsmeding looks at zero
2021-11-24 01:44:15	←	monochrom has quit (Ping timeout: 256 seconds)
2021-11-24 01:44:55	→	yauhsien has joined #haskell
2021-11-24 01:46:26	⚡	zero uninstalls alacritty
2021-11-24 01:46:34	tomsmeding	:(
2021-11-24 01:46:41	maerwald	what will you use instead?
2021-11-24 01:46:59	→	jonathanx has joined #haskell
2021-11-24 01:47:19	→	monochrom has joined #haskell
2021-11-24 01:47:28	→	gioyik has joined #haskell
2021-11-24 01:48:56	→	trcc has joined #haskell
2021-11-24 01:49:24	zero	kitty?
2021-11-24 01:49:29	⚡	zero hides
2021-11-24 01:49:32	dminuoso	kitty has quite the maintainer behind it.
2021-11-24 01:49:37	←	yauhsien has quit (Ping timeout: 264 seconds)
2021-11-24 01:50:28	←	cfricke has quit (Quit: WeeChat 3.3)
2021-11-24 01:51:31	dminuoso	Sadly in the terminal domain there's a rule: wide TERM compatibility, performance and ligatures. pick any two you like.
2021-11-24 01:52:44	←	Guest17 has quit (Ping timeout: 256 seconds)
2021-11-24 01:55:10	→	wroathe has joined #haskell
2021-11-24 01:55:10	←	wroathe has quit (Changing host)
2021-11-24 01:55:10	→	wroathe has joined #haskell
2021-11-24 01:56:00	←	trcc has quit (Remote host closed the connection)
2021-11-24 01:57:21	→	emf has joined #haskell
2021-11-24 01:57:49	→	gaff has joined #haskell
2021-11-24 01:58:02	→	mc47 has joined #haskell
2021-11-24 01:59:17	←	gaff has quit (Remote host closed the connection)
2021-11-24 02:06:47	→	wootehfoot has joined #haskell
2021-11-24 02:06:58	←	jgeerds has quit (Ping timeout: 260 seconds)
2021-11-24 02:07:05	←	eggplantade has quit (Remote host closed the connection)
2021-11-24 02:08:49	←	wroathe has quit (Ping timeout: 264 seconds)
2021-11-24 02:10:19	dsal	Is there a generic name for an n-functor?
2021-11-24 02:11:11	→	betelgeuse has joined #haskell
2021-11-24 02:16:49	awpr	like a generalization of Bifunctor to any n instead of just 2?  in category theory, I'd say that's just "functor", since the Haskell Bifunctor is just a curried form of functors Hask x Hask -> Hask
2021-11-24 02:18:13	awpr	I don't know of a generalization in Haskell terminology, though -- Haskell struggles a bit with talking about collections of types with different numbers of type parameters
2021-11-24 02:19:10	←	michalz has quit (Remote host closed the connection)
2021-11-24 02:19:19	awpr	and things get a bit awkward if you try to uncurry it and make the objects of a product category into a single kind
2021-11-24 02:19:37	→	yuri has joined #haskell
2021-11-24 02:20:15	dsal	The thing I made is a functor because exactly one field can change types.  But if there's more than one thing, I can make it a bifunctor, solving the problem once and for all.
2021-11-24 02:20:40	→	zava has joined #haskell
2021-11-24 02:21:03	←	epolanski has quit (Quit: Connection closed for inactivity)
2021-11-24 02:22:38	awpr	I wouldn't be too surprised if someone had defined a Trifunctor class somewhere.  it probably doesn't go much further than that, though
2021-11-24 02:24:15	awpr	I've also played with the convention of Functor instances on e.g. `newtype Arg3 f a b c = Arg3 (f c a b)` to carry functionality of mapping over other type parameters.  it was a bit clunky, though
2021-11-24 02:24:26	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 02:24:44	→	hskpractice has joined #haskell
2021-11-24 02:24:54	→	wroathe has joined #haskell
2021-11-24 02:24:54	←	wroathe has quit (Changing host)
2021-11-24 02:24:54	→	wroathe has joined #haskell
2021-11-24 02:24:59	←	viluon has quit (Quit: Connection closed for inactivity)
2021-11-24 02:25:29	awpr	with more than 2, maybe just giving them explicit names as Traversals is the way to go
2021-11-24 02:28:24	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 02:28:43	→	hskpractice has joined #haskell
2021-11-24 02:28:47	tomsmeding	dsal: https://paste.tomsmeding.com/Qtjm3Kcn
2021-11-24 02:28:52	tomsmeding	this is 99% in jest
2021-11-24 02:29:21	tomsmeding	maybe the tuple instances should not be recursive, hm
2021-11-24 02:29:28	monochrom	Need more of this on April 1st :)
2021-11-24 02:29:29	←	wroathe has quit (Ping timeout: 245 seconds)
2021-11-24 02:29:38	dsal	Heh.   Yeah, I try to avoid jokes because I've rolled out too many things I meant as a joke.
2021-11-24 02:29:40	→	ByronJohnson has joined #haskell
2021-11-24 02:29:57	dsal	Functor makes a ton of sense for this.  bifunctor starts making less sense.  trifunctor would be super weird.
2021-11-24 02:30:14	→	pfurla has joined #haskell
2021-11-24 02:30:42	←	zer0bitz has quit (Read error: Connection reset by peer)
2021-11-24 02:30:44	dsal	The use case is a type that has a bunch of settings for an app, where some settings are parsed from the environment in one form, but then need some IO stuff to resolve them into their final form.  With one, it's not very confusing.  Once there are a few, there's a pretty special thing needing to be in place.
2021-11-24 02:30:45	tomsmeding	awpr's suggestion of making a traversal for each of the addressable elements is probably a good way to actually do this
2021-11-24 02:30:49	dsal	i.e., fmap itself isn't very useful.
2021-11-24 02:30:49	←	pfurla has quit (Client Quit)
2021-11-24 02:30:54	monochrom	Maybe you can try "multi-variable functor", but I haven't checked that mathematicians actually say it, I only saw "multi-variable adjoint functor" but it has an additional "adjoint".
2021-11-24 02:31:01	←	_ht has quit (Remote host closed the connection)
2021-11-24 02:31:35	Cajun	that AllFmap thing looks a lot like `Lens'`
2021-11-24 02:32:08	⚡	tomsmeding wouldn't know
2021-11-24 02:32:46	→	Pickchea has joined #haskell
2021-11-24 02:32:53	dsal	`Lens` is actually kind of the right thing once I have three or four of these.
2021-11-24 02:32:58	awpr	hmm, that actually sounds a bit like a use case for "higher-kinded data"
2021-11-24 02:33:21	dsal	In *practice* there are really two types, but the variables make a lot of other states popular.
2021-11-24 02:33:22	→	Tuplanolla has joined #haskell
2021-11-24 02:33:37	awpr	if all the config fields undergo the same kind of extra IO stuff, that is
2021-11-24 02:33:52	dsal	I defined a type alias for the "input" type and another for the "output" type.  But with more variables, it starts to get harder to think about.
2021-11-24 02:33:56	←	nvmd has quit (Quit: Later, nerds.)
2021-11-24 02:34:26	dsal	awpr: In this case, there's basically  `FilePath -> IO x` and then the `Settings FilePath -> Settings x`
2021-11-24 02:34:55	dsal	The latter is `$>` in practice, but some hand waving occurs first.
2021-11-24 02:35:29	dsal	awpr: What do you mean by higher-kinded data?  Most of the words I type are in a language I don't actually understand.
2021-11-24 02:37:01	awpr	generally the approach of writing types like `data Config f = Config { cfgInputFile :: f FilePath, cfgSizeLimit :: f Int, cfgDoOptionalThing :: f Bool }` and then being able to operate over all the `f` wrappers uniformly
2021-11-24 02:37:10	←	ByronJohnson has quit (Remote host closed the connection)
2021-11-24 02:37:18	dsal	Ooh.  yeah, that's neat.
2021-11-24 02:37:33	awpr	like if you wanted to parse command-line flags into `Config Maybe` and then merge it with defaults to get `Config Identity`
2021-11-24 02:37:52	dsal	I saw jle` do something like this with barbie once and it was kind of magic.
2021-11-24 02:38:00	awpr	yeah, that's one of the libraries for this
2021-11-24 02:38:26	awpr	there's also Ed Kmett's library `hkd` and my library `ten`, and probably some others I'm forgetting
2021-11-24 02:38:37	→	merijn has joined #haskell
2021-11-24 02:39:16	dsal	If I can convince people that having two types that are almost identical except for one field and then a function to copy the fields from one to another and then testing that you did that right with hand-written examples first, then maybe I can move onto fancier stuff.  heh
2021-11-24 02:39:25	←	ph88 has quit (Ping timeout: 264 seconds)
2021-11-24 02:40:30	awpr	yeah if this is the place that bans even basic usage of lenses for being too complicated, there's not a lot of hope for HKD-like things
2021-11-24 02:40:42	→	pavonia has joined #haskell
2021-11-24 02:40:48	awpr	also not sure it's even applicable here, after seeing more details
2021-11-24 02:43:42	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 02:43:59	→	hskpractice has joined #haskell
2021-11-24 02:44:38	←	wootehfoot has quit (Read error: Connection reset by peer)
2021-11-24 02:47:23	ℹ	irc: disconnected from server
2021-11-24 16:46:16	→	oxide has joined #haskell
2021-11-24 16:46:16	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-11-24 16:46:16	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-11-24 16:46:18	ℹ	Channel #haskell: 736 nicks (1 op, 0 voices, 735 normals)
2021-11-24 16:46:21	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2021-11-24 16:46:21	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-11-24 16:46:57	dminuoso	@undo do let { x = 1} in pure ()
2021-11-24 16:47:00	lambdabot	let { x = 1} in pure ()
2021-11-24 16:47:00	dminuoso	opqdonut: ^-
2021-11-24 16:47:30	←	jbox has quit (Read error: Connection reset by peer)
2021-11-24 16:48:15	kuribas	dminuoso: probably applicativeDo is done before optimizations.
2021-11-24 16:50:52	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 16:51:10	→	hskpractice has joined #haskell
2021-11-24 16:51:31	kuribas	dminuoso: but I find it a rather half-assed extension.
2021-11-24 16:51:43	kuribas	Perhaps it is hard to do whole-assed.
2021-11-24 16:53:15	←	lavaman has quit (Remote host closed the connection)
2021-11-24 16:54:55	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 16:55:13	→	hskpractice has joined #haskell
2021-11-24 16:55:38	←	whatsupdoc has quit (Quit: Connection closed for inactivity)
2021-11-24 16:58:06	opqdonut	dminuoso: I'd expect "let ... in ..." to work in ApplicativeDo, but that's different from "let ...;"
2021-11-24 16:59:17	opqdonut	but looks like I was wrong about MonadFail, at least the Haskell2010 standard specifies that <- generates calls to fail but let doesn't
2021-11-24 16:59:30	→	mreh has joined #haskell
2021-11-24 17:01:10	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 17:01:29	→	hskpractice has joined #haskell
2021-11-24 17:03:09	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 17:03:27	→	hskpractice has joined #haskell
2021-11-24 17:03:56	←	mreh has quit (Ping timeout: 256 seconds)
2021-11-24 17:05:36	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 17:05:55	→	hskpractice has joined #haskell
2021-11-24 17:06:42	←	deadmarshal has quit (Ping timeout: 260 seconds)
2021-11-24 17:06:51	dminuoso	kuribas: Im not talking about inlining as an optimization.
2021-11-24 17:07:07	dminuoso	Im talking about inlining as a sort of gap filler 
2021-11-24 17:07:41	dminuoso	In the sense of "If ApplicativeDo is enabled, do an additional pass on the do-block inlining all let bindings"
2021-11-24 17:08:13	opqdonut	that might surprise some users
2021-11-24 17:08:21	opqdonut	breaks the "a defined name is evaluated at most once" rule
2021-11-24 17:09:16	kuribas	dminuoso: it looks to me like there is a lot of overhanging fruit for ApplicativeDo.
2021-11-24 17:09:27	kuribas	But maybe there are subtle details that I don't see...
2021-11-24 17:09:55	dminuoso	opqdonut: Where is that rule written?
2021-11-24 17:10:25	dminuoso	Haskell already does inlining everywhere anyway
2021-11-24 17:10:32	dminuoso	So I dont have that guarantee either way
2021-11-24 17:11:01	→	deadmarshal has joined #haskell
2021-11-24 17:11:32	dminuoso	Or differently phrased: if what you wrote was true, haskell could *never* inline something that was named
2021-11-24 17:11:41	dminuoso	Or inline it twice, at least.
2021-11-24 17:11:49	←	CiaoSen has quit (Ping timeout: 264 seconds)
2021-11-24 17:14:03	opqdonut	dminuoso: it's my mental model for reasoning about haskell performance, at least, and it's kinda the definition of lazy evaluation
2021-11-24 17:14:10	opqdonut	but yeah it might not be strictly true
2021-11-24 17:14:20	→	yauhsien has joined #haskell
2021-11-24 17:14:29	opqdonut	(heh, strictly)
2021-11-24 17:14:41	dminuoso	cute pun indeed :()
2021-11-24 17:15:24	dminuoso	opqdonut: Im not sure you even need that for lazy evaluation, as long as its not observably different. The only place this matters for is tractable sharing
2021-11-24 17:15:39	dminuoso	Because sharing relies on GHC not inlining the very definition
2021-11-24 17:16:20	opqdonut	mhmm
2021-11-24 17:16:25	dminuoso	And infact, there's a good reason global IORefs use NOLINE
2021-11-24 17:16:29	dminuoso	NOINLINE even
2021-11-24 17:17:07	dminuoso	Because otherwise GHC would be free to inline that `foo = unsafePerformIO (newIORef "foo")` everywhere
2021-11-24 17:18:44	dminuoso	Maybe Ill throw this question towards the GHC folks, they ought to know what the simplifier does best
2021-11-24 17:18:46	←	yauhsien has quit (Ping timeout: 250 seconds)
2021-11-24 17:19:30	arahael	Am I able to have two different versions of ghcup and have it manage their own haskells?
2021-11-24 17:21:10	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 17:21:28	→	hskpractice has joined #haskell
2021-11-24 17:22:01	←	Unhammer has quit (Ping timeout: 264 seconds)
2021-11-24 17:23:41	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 17:23:56	→	boxscape_ has joined #haskell
2021-11-24 17:23:59	→	hskpractice has joined #haskell
2021-11-24 17:24:23	arahael	(It's not a stupid question - I basically want to have two different architectures installed simultaniously)
2021-11-24 17:27:01	boxscape_	If I use unsafePerformIO to read a config file, is it advisable to add a NOINLINE pragma?
2021-11-24 17:27:43	tomsmeding	dminuoso: I would love for ghc to inline my 1 + x, but wouldn't like my ghc to inline 'sum (primesUntil 1e8)'
2021-11-24 17:28:03	tomsmeding	the definition of work duplication becomes fuzzy when talking about optimising compilers, because sometimes duplication of work is beneficial
2021-11-24 17:28:22	dminuoso	boxscape_: My two cents are, probably yes?
2021-11-24 17:28:30	tomsmeding	but I wouldn't want this to influence whether my do block has a MonadFail constraint -- that's a huge breaking of abstraction
2021-11-24 17:28:47	dminuoso	boxscape_: Ive been bitten sorely by unsafePerformIO in multiple ways, suggesting what GHC does is not very intuitive.,
2021-11-24 17:28:53	tomsmeding	boxscape_: if you don't want your program to sometimes read the config file lots of times :)
2021-11-24 17:28:53	boxscape_	okay
2021-11-24 17:29:01	boxscape_	makes sense
2021-11-24 17:29:09	nf	how can i turn a lens into a Context/Pretext?
2021-11-24 17:29:20	nf	i mean applying it to some structure
2021-11-24 17:29:24	dminuoso	boxscape_: My favourite was doing something like `traverse (\x -> Foo { field1 = x, field2 = unsafePerformIO (newIORef []) ) structure`
2021-11-24 17:29:36	dminuoso	GHC floated that IORef out, sharing all those mutable buffers into one
2021-11-24 17:29:43	boxscape_	oh, nice
2021-11-24 17:30:02	←	raehik1 has quit (Ping timeout: 256 seconds)
2021-11-24 17:30:58	dminuoso	nf: You use `sell`
2021-11-24 17:31:03	→	raehik1 has joined #haskell
2021-11-24 17:31:10	dminuoso	See https://hackage.haskell.org/package/lens-5.1/docs/src/Control.Lens.Lens.html#cloneLens for instance
2021-11-24 17:31:32	nf	hm, thanks
2021-11-24 17:31:43	nf	isn't that internal
2021-11-24 17:31:50	dminuoso	Yes.
2021-11-24 17:32:07	dminuoso	You asked how to turn it into Pretext, I answered? :p
2021-11-24 17:32:20	dminuoso	nf: What is the problem you are trying to solve?
2021-11-24 17:32:24	→	lortabac has joined #haskell
2021-11-24 17:32:30	→	viluon has joined #haskell
2021-11-24 17:34:04	←	yuri has quit (Remote host closed the connection)
2021-11-24 17:34:10	nf	i have a list, say [1, 2, 3]. i want to apply a function Int -> [Int] to each element and get a list of lists
2021-11-24 17:34:26	→	pfurla has joined #haskell
2021-11-24 17:34:43	dminuoso	Im a bit baffled, how do you possibly arrive at Context/Pretext with that question?
2021-11-24 17:35:06	→	yuri has joined #haskell
2021-11-24 17:35:07	nf	good question
2021-11-24 17:35:30	dminuoso	Anyway. You just use `fmap` or its operator version `<$>`
2021-11-24 17:35:42	nf	that's not what i mean
2021-11-24 17:35:47	nf	say f is \n -> replicate n n
2021-11-24 17:35:58	nf	i want to get [[1, 2, 3], [1, 2, 2, 3], [1, 2, 3, 3, 3]]
2021-11-24 17:36:18	→	__monty__ has joined #haskell
2021-11-24 17:36:23	nf	my current idea is to use suffixed suffix . prefixed prefix
2021-11-24 17:36:32	nf	where suffix/prefix map over the tails and inits
2021-11-24 17:36:42	nf	that gets me a list of lenses
2021-11-24 17:37:01	dminuoso	Im not sure I see the pattern here
2021-11-24 17:37:01	nf	then i guess i can just use the lenses on the initial list, i don't really need contexts
2021-11-24 17:37:13	dminuoso	And Im also not sure what this has to do with lenses yet
2021-11-24 17:37:43	dminuoso	You want the nth element to be replicated n times in place?
2021-11-24 17:38:00	nf	that particular f is only an example
2021-11-24 17:38:04	nf	it should work for any f
2021-11-24 17:38:19	nf	the [] in f's return type isn't nondeterminism, it's the thing i want to insert in place of the element
2021-11-24 17:38:34	dminuoso	Ah I see
2021-11-24 17:38:40	nf	btw i'm not married to lists, if there's a data structure with a better interface for this i'm all ears
2021-11-24 17:39:10	nf	Sequence has sliced but it applies f to each element of the slice. vector has sliced too but it comes with a big warning "don't change the length of the list"
2021-11-24 17:39:43	nf	and if you want the FULL full context, i'm trying to solve advent of code 2015 day 19 part 1.
2021-11-24 17:40:17	⚡	arahael is impressed :)
2021-11-24 17:40:19	nf	(in an elegant and/or overengineered way)
2021-11-24 17:40:39	arahael	I drown the past years in sorrow and continue blindly forwards each year. ;)
2021-11-24 17:41:04	→	pretty_dumm_guy has joined #haskell
2021-11-24 17:41:11	dminuoso	nf: So intuitively Id stare at contextsOf
2021-11-24 17:41:22	←	Moyst has quit (Ping timeout: 268 seconds)
2021-11-24 17:41:27	dminuoso	This has Plated written all over it
2021-11-24 17:41:54	nf	yeah but the contexts given by contextsOf don't really let you insert a list into a single element
2021-11-24 17:43:06	→	Moyst has joined #haskell
2021-11-24 17:45:20	←	raehik1 has quit (Ping timeout: 256 seconds)
2021-11-24 17:45:36	→	notzmv has joined #haskell
2021-11-24 17:46:34	←	deadmarshal has quit (Ping timeout: 245 seconds)
2021-11-24 17:47:05	→	raehik1 has joined #haskell
2021-11-24 17:47:40	nf	maybe there's something to do with iconcatMap
2021-11-24 17:48:26	nf	or concatMapOf
2021-11-24 17:48:53	dminuoso	nf: The closest thing I can see is actually Monad on Tree
2021-11-24 17:49:00	dminuoso	Is this what you are after?
2021-11-24 17:49:18	nf	i was thinking about that
2021-11-24 17:49:38	dminuoso	Or rather Monad even on List
2021-11-24 17:50:13	nf	that would be the iconcatMap idea
2021-11-24 17:50:48	→	ph88^ has joined #haskell
2021-11-24 17:51:00	nf	iconcatMap (\i x -> if i == j then f x else [x])  where j ranges over the length of the list
2021-11-24 17:51:01	dminuoso	Yeah I guess
2021-11-24 17:52:07	dminuoso	nf: Though I think the i is a red herring, since you can trivially just zip some index into the structure
2021-11-24 17:52:33	dminuoso	As long as its Traversable, anyway
2021-11-24 17:52:41	nf	yes, it's just convenient
2021-11-24 17:54:43	←	ph88_ has quit (Ping timeout: 250 seconds)
2021-11-24 17:56:28	←	canxiu has quit (Quit: Connection closed for inactivity)
2021-11-24 17:58:05	→	lavaman has joined #haskell
2021-11-24 17:59:45	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 18:00:03	→	hskpractice has joined #haskell
2021-11-24 18:01:43	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 18:02:02	→	hskpractice has joined #haskell
2021-11-24 18:03:42	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 18:04:01	→	hskpractice has joined #haskell
2021-11-24 18:05:06	←	betelgeuse has quit (Read error: Connection reset by peer)
2021-11-24 18:05:57	→	Unhammer has joined #haskell
2021-11-24 18:06:24	→	deadmarshal has joined #haskell
2021-11-24 18:06:36	→	betelgeuse has joined #haskell
2021-11-24 18:07:26	nf	ugh, my prefixed . suffixed idea just unfolds itself into normal lens-free code
2021-11-24 18:07:54	nf	hate when that happens
2021-11-24 18:09:46	←	Unhammer has quit (Quit: WeeChat 2.3)
2021-11-24 18:14:44	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 18:15:03	→	hskpractice has joined #haskell
2021-11-24 18:16:43	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 18:17:02	→	hskpractice has joined #haskell
2021-11-24 18:18:45	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 18:19:03	→	hskpractice has joined #haskell
2021-11-24 18:20:57	←	jgeerds has quit (Ping timeout: 250 seconds)
2021-11-24 18:22:40	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 18:22:58	→	hskpractice has joined #haskell
2021-11-24 18:23:05	→	Unhammer has joined #haskell
2021-11-24 18:24:32	←	max22- has quit (Ping timeout: 268 seconds)
2021-11-24 18:25:07	→	abrantesasf has joined #haskell
2021-11-24 18:26:01	←	tafa has quit (Quit: ZNC - https://znc.in)
2021-11-24 18:26:11	→	tafa has joined #haskell
2021-11-24 18:27:40	←	Unhammer has quit (Quit: WeeChat 2.3)
2021-11-24 18:28:25	←	yuri has quit (Quit: Ухожу я от вас (xchat 2.4.5 или старше))
2021-11-24 18:31:42	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 18:32:01	→	hskpractice has joined #haskell
2021-11-24 18:33:30	←	deadmarshal has quit (Ping timeout: 256 seconds)
2021-11-24 18:34:03	←	wei2912 has quit (Quit: Lost terminal)
2021-11-24 18:34:41	←	tafa has quit (Remote host closed the connection)
2021-11-24 18:34:50	→	tafa has joined #haskell
2021-11-24 18:35:42	←	Cajun has quit (Quit: Client closed)
2021-11-24 18:38:38	←	chexum has quit (Remote host closed the connection)
2021-11-24 18:38:49	→	chexum has joined #haskell
2021-11-24 18:40:22	→	deadmarshal has joined #haskell
2021-11-24 18:41:51	←	pavonia has quit (Quit: Bye!)
2021-11-24 18:42:25	←	Moyst has quit (Ping timeout: 264 seconds)
2021-11-24 18:43:19	→	akegalj has joined #haskell
2021-11-24 18:43:21	→	Moyst has joined #haskell
2021-11-24 18:43:46	tomsmeding	oh no, no more fancy stuffs, my code is too simple!
2021-11-24 18:44:05	tomsmeding	nf: when in need, you can always @pl
2021-11-24 18:44:22	nf	:D
2021-11-24 18:44:45	arahael	Is it possible to use a custom fork of a dependency?
2021-11-24 18:44:59	tomsmeding	with cabal.project or stack.yaml, yes
2021-11-24 18:45:16	arahael	Ah, nifty, so I should look at the docs for cabal.project.
2021-11-24 18:45:17	tomsmeding	add a git repo dependency with the right name, then I think it will be used instead of the hackage one
2021-11-24 18:45:23	arahael	Neat.
2021-11-24 18:45:33	arahael	That should work around a basement issue I've got.
2021-11-24 18:45:34	maerwald	or create your own hackage repo
2021-11-24 18:47:13	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 18:47:24	arahael	maerwald: I don't think I want that overhead, but the thought is intriguing.
2021-11-24 18:47:32	→	hskpractice has joined #haskell
2021-11-24 18:47:44	⚡	boxscape_ ．。ｏＯI should do AoC purely on the type-level one of these days 
2021-11-24 18:48:31	tomsmeding	tip, uses idris, then that goal can be reached without changing code
2021-11-24 18:48:52	boxscape_	that's cheating :(
2021-11-24 18:49:06	tomsmeding	agreed
2021-11-24 18:50:33	⚡	maerwald closes the DH proposal with "go use Idris"
2021-11-24 18:51:56	tomsmeding	that's cheating :(
2021-11-24 18:52:16	maerwald	agreed
2021-11-24 18:52:18	arahael	This makes me feel good - G'night. :)   ( boxscape_: AoC's a good place for cheating. Just don't tell santa.)
2021-11-24 18:52:25	→	Unhammer has joined #haskell
2021-11-24 18:52:53	←	pfurla has quit (Quit: gone to sleep. ZZZzzz…)
2021-11-24 18:53:19	boxscape_	:)
2021-11-24 18:56:06	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 18:56:25	→	hskpractice has joined #haskell
2021-11-24 18:58:01	←	lavaman has quit (Ping timeout: 264 seconds)
2021-11-24 19:00:04	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 19:00:15	←	tafa has quit (Quit: ZNC - https://znc.in)
2021-11-24 19:00:21	→	hskpractice has joined #haskell
2021-11-24 19:00:25	→	tafa has joined #haskell
2021-11-24 19:00:48	←	Nselm has quit (Quit: Client closed)
2021-11-24 19:02:04	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-11-24 19:03:36	←	tafa has quit (Remote host closed the connection)
2021-11-24 19:03:44	→	tafa has joined #haskell
2021-11-24 19:06:04	→	acowley has joined #haskell
2021-11-24 19:07:30	←	deadmarshal has quit (Ping timeout: 256 seconds)
2021-11-24 19:11:15	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 19:11:33	→	hskpractice has joined #haskell
2021-11-24 19:13:13	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 19:13:31	→	hskpractice has joined #haskell
2021-11-24 19:13:44	←	bitdex has quit (Quit: = "")
2021-11-24 19:13:48	→	max22- has joined #haskell
2021-11-24 19:13:57	←	tafa has quit (Changing host)
2021-11-24 19:13:57	→	tafa has joined #haskell
2021-11-24 19:16:00	→	yauhsien has joined #haskell
2021-11-24 19:19:54	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 19:20:11	→	hskpractice has joined #haskell
2021-11-24 19:20:28	←	yauhsien has quit (Ping timeout: 260 seconds)
2021-11-24 19:22:08	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 19:22:26	→	hskpractice has joined #haskell
2021-11-24 19:22:47	ℹ	iphy_ is now known as iphy
2021-11-24 19:23:08	→	renatofdds[m] has joined #haskell
2021-11-24 19:25:11	→	pfurla has joined #haskell
2021-11-24 19:27:54	←	hiruji has quit (Ping timeout: 256 seconds)
2021-11-24 19:28:29	→	Nselm has joined #haskell
2021-11-24 19:28:33	→	hiruji has joined #haskell
2021-11-24 19:30:35	→	deadmarshal has joined #haskell
2021-11-24 19:31:01	←	curiousgay has quit (Ping timeout: 264 seconds)
2021-11-24 19:32:33	→	gaff has joined #haskell
2021-11-24 19:33:22	←	pfurla has quit (Quit: gone to sleep. ZZZzzz…)
2021-11-24 19:35:12	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 19:35:17	→	gioyik has joined #haskell
2021-11-24 19:35:19	→	dschrempf has joined #haskell
2021-11-24 19:35:29	→	hskpractice has joined #haskell
2021-11-24 19:36:58	←	merijn has quit (Ping timeout: 256 seconds)
2021-11-24 19:37:27	→	curiousgay has joined #haskell
2021-11-24 19:37:37	→	tromp has joined #haskell
2021-11-24 19:39:17	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 19:39:35	→	hskpractice has joined #haskell
2021-11-24 19:39:49	→	merijn has joined #haskell
2021-11-24 19:41:30	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 19:41:47	→	hskpractice has joined #haskell
2021-11-24 19:42:04	←	Moyst has quit (Ping timeout: 256 seconds)
2021-11-24 19:43:23	→	Moyst has joined #haskell
2021-11-24 19:44:28	←	gioyik has quit (Ping timeout: 276 seconds)
2021-11-24 19:44:54	←	merijn has quit (Ping timeout: 260 seconds)
2021-11-24 19:47:40	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 19:47:57	→	hskpractice has joined #haskell
2021-11-24 19:49:46	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 19:50:05	→	hskpractice has joined #haskell
2021-11-24 19:52:03	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 19:52:20	→	hskpractice has joined #haskell
2021-11-24 19:53:02	←	dschrempf has quit (Quit: WeeChat 3.3)
2021-11-24 19:53:20	→	dschrempf has joined #haskell
2021-11-24 19:53:34	→	wroathe has joined #haskell
2021-11-24 19:53:34	←	wroathe has quit (Changing host)
2021-11-24 19:53:34	→	wroathe has joined #haskell
2021-11-24 19:56:06	→	slack1256 has joined #haskell
2021-11-24 19:56:39	slack1256	Does DerivingVia only make sense for newtypes, not for data? is that right?
2021-11-24 19:58:49	boxscape_	that's right
2021-11-24 19:58:51	int-e	The intermediate type (the `via` one) is always a newtype.
2021-11-24 19:59:05	→	ec has joined #haskell
2021-11-24 19:59:09	→	reumeth has joined #haskell
2021-11-24 19:59:10	[exa]	slack1256: it explicitly requires that the 2 things are coercible, which basically means that it must be a newtype
2021-11-24 19:59:23	int-e	But you can derive instances for any type. So... which of these types is the question about?
2021-11-24 19:59:55	boxscape_	right, you could have something like `data Foo a = ... deriving Show via Bar Foo`, here `Bar` has to be a newtype
2021-11-24 20:00:06	nf	looking for inspiration, what do i name a function of type  Ord k => [(k, a)] -> Map k [a]  ?
2021-11-24 20:00:29	int-e	:t M.fromListWith (++)
2021-11-24 20:00:29	←	dschrempf has quit (Quit: WeeChat 3.3)
2021-11-24 20:00:30	lambdabot	Ord k => [(k, [a])] -> M.Map k [a]
2021-11-24 20:00:38	nf	not quite
2021-11-24 20:00:40	int-e	:t M.fromListWith (++) . map (second pure)
2021-11-24 20:00:41	lambdabot	Ord k => [(k, a)] -> M.Map k [a]
2021-11-24 20:00:42	→	dschrempf has joined #haskell
2021-11-24 20:01:02	nf	now give it a name
2021-11-24 20:01:03	slack1256	boxscape_ , int-e : Got it, it is clear now! :-)
2021-11-24 20:01:18	janus	tomsmeding: code evaluated at compile time in idris can be way slower. so it is not always feasible to take previously compiled code and evaluate it
2021-11-24 20:01:19	int-e	nf: I've done it a number of time and never named it
2021-11-24 20:01:32	→	slowButPresent has joined #haskell
2021-11-24 20:01:35	int-e	nf: so I'll just refuse again.
2021-11-24 20:01:44	nf	:(
2021-11-24 20:02:54	int-e	well, `group` or `classify` are verbs in this context
2021-11-24 20:03:02	←	emf has quit (Ping timeout: 256 seconds)
2021-11-24 20:03:13	←	deadmarshal has quit (Ping timeout: 250 seconds)
2021-11-24 20:03:45	←	renatofdds[m] has left #haskell
2021-11-24 20:03:58	tomsmeding	janus: who said anything about performance :)
2021-11-24 20:04:08	→	jkaye has joined #haskell
2021-11-24 20:04:11	tomsmeding	but you're right of course
2021-11-24 20:04:11	←	dschrempf has quit (Client Quit)
2021-11-24 20:04:27	→	dschrempf has joined #haskell
2021-11-24 20:05:00	janus	but with AoC don't you have to submit some kind of result? if it finishes a computation, nothing can be submitted
2021-11-24 20:05:10	janus	*if it never
2021-11-24 20:05:38	boxscape_	usually the performance requirements aren't *too* bad as long as you choose an algorithm with alright asymptotics
2021-11-24 20:06:48	boxscape_	I think I'm misunderstanding readPrec. I have `newtype Day = MkDay Int`, and `instance Read Day where readPrec = MkDay <$> readPrec @Int`. But if I try something like `read "24" :: Day`, I get an infinite loop. Any idea why?
2021-11-24 20:07:21	→	emf has joined #haskell
2021-11-24 20:07:45	←	dschrempf has quit (Client Quit)
2021-11-24 20:08:00	janus	boxscape_: i had a problem the other day with type-level nats being way to slow when interpreted. the asymptotics are probably the same but the constant factor is way larger. so given that i am just a beginning idris programmer and i ran into this, i am not convinced it is usually ok. asymptotics don't matter if the constants are huge.
2021-11-24 20:08:38	→	dschrempf has joined #haskell
2021-11-24 20:08:40	←	sub0 has quit (Quit: http://www.okay.uz/ (Ping timeout))
2021-11-24 20:09:20	boxscape_	doesn't that change the asymptotics because Idris uses unary for type-level nats but binary for term-level nats? I could be wrong.
2021-11-24 20:09:24	←	slack1256 has quit (Remote host closed the connection)
2021-11-24 20:10:21	boxscape_	(Though to be clear I meant the performance requirements for AOC, I didn't mean to comment before on how using a function on a type-level in Idris affects its performance)
2021-11-24 20:13:56	→	merijn has joined #haskell
2021-11-24 20:15:21	boxscape_	Okay when I try the same thing yahb it's not an infinite loop, hmm
2021-11-24 20:15:40	→	ees has joined #haskell
2021-11-24 20:15:52	boxscape_	Ohh I think my Show instance is actually what's producing the infinite loop
2021-11-24 20:16:29	→	emf_ has joined #haskell
2021-11-24 20:17:17	kuribas	janus: slow to compile?
2021-11-24 20:17:49	←	emf has quit (Ping timeout: 264 seconds)
2021-11-24 20:18:44	←	merijn has quit (Ping timeout: 260 seconds)
2021-11-24 20:18:55	janus	kuribas: yes, because code evaluated at compile time is apparently never compiled, always interpreted
2021-11-24 20:19:25	kuribas	janus: that makes sense, because type checking must preserve syntax.
2021-11-24 20:20:00	kuribas	janus: or you need a compiler that can pre-compile, while preserving syntax.
2021-11-24 20:20:35	←	Nselm has quit (Quit: Client closed)
2021-11-24 20:20:45	tomsmeding	more than preserving syntax, you need to _partially evaluate_, which is quite different from normal full evaluation
2021-11-24 20:20:59	→	gioyik has joined #haskell
2021-11-24 20:21:02	kuribas	janus: But I doubt it's a current goal for idris, it just wants to have a working compiler, and put optimizations as much as possible on the backend.
2021-11-24 20:23:22	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 20:23:39	→	hskpractice has joined #haskell
2021-11-24 20:24:26	tomsmeding	nf: groupToMap
2021-11-24 20:25:07	nf	thx
2021-11-24 20:25:14	kuribas	also, typechecking and evaluation is intertwined, so I don't it's trivial to "compile" type level.
2021-11-24 20:25:39	kuribas	Maybe an interesting topic for someone's PHD :)
2021-11-24 20:27:51	←	NinjaTrappeur has quit (Ping timeout: 268 seconds)
2021-11-24 20:29:19	ℹ	AndreasK__ is now known as AndreasK
2021-11-24 20:29:54	←	Vajb has quit (Read error: Connection reset by peer)
2021-11-24 20:30:48	←	wroathe has quit (Ping timeout: 256 seconds)
2021-11-24 20:31:00	→	Vajb has joined #haskell
2021-11-24 20:33:24	←	waleee has quit (Ping timeout: 268 seconds)
2021-11-24 20:33:32	→	deadmarshal has joined #haskell
2021-11-24 20:35:49	→	phma_ has joined #haskell
2021-11-24 20:36:41	→	CiaoSen has joined #haskell
2021-11-24 20:36:48	←	phma has quit (Read error: Connection reset by peer)
2021-11-24 20:36:53	←	dschrempf has quit (Quit: WeeChat 3.3)
2021-11-24 20:38:50	→	NinjaTrappeur has joined #haskell
2021-11-24 20:40:41	←	Moyst has quit (Ping timeout: 250 seconds)
2021-11-24 20:43:08	→	Moyst has joined #haskell
2021-11-24 20:46:22	→	Sgeo has joined #haskell
2021-11-24 20:46:27	←	tafa has quit (Quit: ZNC - https://znc.in)
2021-11-24 20:46:40	→	tafa has joined #haskell
2021-11-24 20:46:50	←	abrantesasf has quit (Read error: Connection reset by peer)
2021-11-24 20:47:14	→	abrantesasf has joined #haskell
2021-11-24 20:48:23	ℹ	phma_ is now known as phma
2021-11-24 20:48:49	←	ec has quit (Ping timeout: 276 seconds)
2021-11-24 20:49:32	→	MiguelNegrao has joined #haskell
2021-11-24 20:50:04	←	deadmarshal has quit (Ping timeout: 256 seconds)
2021-11-24 20:50:41	←	ees has quit (Ping timeout: 268 seconds)
2021-11-24 20:51:56	MiguelNegrao	Hi all, I need to write a function which receives an 'HList as' with the following constraints: all 'as' are of type '(Text,Something o -> o)' and there is a Constraint on 'o'. Is this possible ? Eventually I want to call hMap on it.
2021-11-24 20:53:14	←	acidjnk has quit (Ping timeout: 245 seconds)
2021-11-24 20:54:54	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 20:55:12	→	hskpractice has joined #haskell
2021-11-24 20:56:52	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 20:57:09	→	hskpractice has joined #haskell
2021-11-24 20:57:53	→	eggplantade has joined #haskell
2021-11-24 20:57:53	→	ec has joined #haskell
2021-11-24 20:58:32	←	Flow has quit (Quit: WeeChat 3.2)
2021-11-24 21:00:46	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 21:01:03	→	hskpractice has joined #haskell
2021-11-24 21:02:03	→	merijn has joined #haskell
2021-11-24 21:02:49	←	eggplantade has quit (Ping timeout: 264 seconds)
2021-11-24 21:03:54	kuribas	looking at the HList library makes my head hurt...
2021-11-24 21:03:56	→	fresheyeball has joined #haskell
2021-11-24 21:04:40	MiguelNegrao	indeed... :-(
2021-11-24 21:06:05	←	akegalj has quit (Quit: leaving)
2021-11-24 21:06:14	kuribas	out of curiosity, what are you trying to do?
2021-11-24 21:06:26	kuribas	That needs fancy types?
2021-11-24 21:06:48	→	burnsidesLlama has joined #haskell
2021-11-24 21:10:49	→	zer0bitz has joined #haskell
2021-11-24 21:11:00	←	shryke has left #haskell (WeeChat 3.3)
2021-11-24 21:11:45	kuribas	There should be an 'All' constraint on type level lists somewhere...
2021-11-24 21:11:58	kuribas	And you can make an intermediary class to catch that constraint.
2021-11-24 21:13:00	kuribas	But my best advice is, don't do this stuff in haskell :-P
2021-11-24 21:14:29	MiguelNegrao	In gtk Its possible to get a group of widgets to be constucted based on a text file generated by GUI which lets you design windows and widgets
2021-11-24 21:15:03	MiguelNegrao	Then it is possible to extract the individual widgets from a text label, but you need to provide the type that it should have
2021-11-24 21:15:25	MiguelNegrao	I wanted to do it all in a function, construct the widgets and extract them with the right type
2021-11-24 21:15:27	kuribas	link to do?
2021-11-24 21:15:31	kuribas	to doc
2021-11-24 21:16:40	MiguelNegrao	The relevant function is https://github.com/mr/reactive-banana-gi-gtk/blob/b1b72d58bf45ac111e320cc0308d00ce6f9fbfe4/reactive-banana-gi-gtk/src/Reactive/Banana/GI/Gtk.hs#L71
2021-11-24 21:17:08	MiguelNegrao	Instead of a single GObject o I want to deal with a list of them
2021-11-24 21:17:28	→	yauhsien has joined #haskell
2021-11-24 21:18:00	MiguelNegrao	But each o will have a different type
2021-11-24 21:18:10	kuribas	Couldn't you use an existential instead?
2021-11-24 21:20:16	kuribas	data AnyGObject = forall o . GObject o => AnyGObject o
2021-11-24 21:20:47	kuribas	Then [AnyGObject o] -> ...
2021-11-24 21:20:56	kuribas	erm [AnyGObject]
2021-11-24 21:21:08	kuribas	well something like that.
2021-11-24 21:21:18	kuribas	Seems much more sane than HList.
2021-11-24 21:21:42	kuribas	Most likely there is an even easier way, but hard to say without context.
2021-11-24 21:21:51	←	yauhsien has quit (Ping timeout: 250 seconds)
2021-11-24 21:21:57	MiguelNegrao	Right, I think that would work, but would require wrapping each element in AnyGObject. On the other hand HList also requires knowing the syntax for constructing the list, so it might be as onerous to the user.
2021-11-24 21:22:19	kuribas	Existentials are way easier then HLists.
2021-11-24 21:22:26	kuribas	But still fancy haskell mind you...
2021-11-24 21:23:08	MiguelNegrao	Thanks, for the suggestion, I might go with that.
2021-11-24 21:23:49	→	abhixec has joined #haskell
2021-11-24 21:24:47	→	lavaman has joined #haskell
2021-11-24 21:25:03	→	deadmarshal has joined #haskell
2021-11-24 21:25:58	→	myShoggoth has joined #haskell
2021-11-24 21:27:53	←	machinedgod has quit (Ping timeout: 260 seconds)
2021-11-24 21:29:04	←	deadmarshal has quit (Ping timeout: 245 seconds)
2021-11-24 21:29:16	←	lavaman has quit (Ping timeout: 260 seconds)
2021-11-24 21:32:24	←	lortabac has quit (Ping timeout: 245 seconds)
2021-11-24 21:34:12	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 21:34:30	→	hskpractice has joined #haskell
2021-11-24 21:34:42	→	lortabac has joined #haskell
2021-11-24 21:35:22	→	waleee has joined #haskell
2021-11-24 21:36:25	←	merijn has quit (Ping timeout: 264 seconds)
2021-11-24 21:40:26	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 21:40:44	→	hskpractice has joined #haskell
2021-11-24 21:41:49	←	Moyst has quit (Ping timeout: 265 seconds)
2021-11-24 21:43:40	→	Moyst has joined #haskell
2021-11-24 21:46:40	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 21:46:57	→	hskpractice has joined #haskell
2021-11-24 21:47:33	→	eggplantade has joined #haskell
2021-11-24 21:48:13	←	abhixec has quit (Quit: leaving)
2021-11-24 21:52:54	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 21:53:12	→	hskpractice has joined #haskell
2021-11-24 21:54:52	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 21:55:07	→	cosimone has joined #haskell
2021-11-24 21:55:10	→	hskpractice has joined #haskell
2021-11-24 21:58:00	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 21:58:19	→	hskpractice has joined #haskell
2021-11-24 21:58:24	←	lortabac has quit (Quit: WeeChat 2.8)
2021-11-24 21:59:19	→	zmt01 has joined #haskell
2021-11-24 22:01:58	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 22:02:15	→	hskpractice has joined #haskell
2021-11-24 22:03:15	←	zmt00 has quit (Ping timeout: 250 seconds)
2021-11-24 22:12:42	←	cfricke has quit (Ping timeout: 268 seconds)
2021-11-24 22:13:13	→	deadmarshal has joined #haskell
2021-11-24 22:13:55	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 22:14:06	→	cfricke has joined #haskell
2021-11-24 22:14:13	→	hskpractice has joined #haskell
2021-11-24 22:14:49	←	rkrishnan has quit (Ping timeout: 264 seconds)
2021-11-24 22:17:24	←	deadmarshal has quit (Ping timeout: 245 seconds)
2021-11-24 22:17:59	→	merijn has joined #haskell
2021-11-24 22:18:26	←	hskpractice has quit (Ping timeout: 256 seconds)
2021-11-24 22:20:46	→	hippoid has joined #haskell
2021-11-24 22:22:21	→	hskpractice has joined #haskell
2021-11-24 22:23:49	←	merijn has quit (Ping timeout: 264 seconds)
2021-11-24 22:25:07	→	tzh has joined #haskell
2021-11-24 22:25:08	→	dschrempf has joined #haskell
2021-11-24 22:26:48	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 22:27:06	→	hskpractice has joined #haskell
2021-11-24 22:29:25	←	enoq has quit (Quit: enoq)
2021-11-24 22:29:37	→	mreh has joined #haskell
2021-11-24 22:30:03	←	neurocyte0132889 has quit (Read error: Connection reset by peer)
2021-11-24 22:31:55	→	neurocyte0132889 has joined #haskell
2021-11-24 22:31:56	←	neurocyte0132889 has quit (Changing host)
2021-11-24 22:31:56	→	neurocyte0132889 has joined #haskell
2021-11-24 22:32:26	→	dyeplexer has joined #haskell
2021-11-24 22:33:14	←	ysh has quit (Ping timeout: 245 seconds)
2021-11-24 22:33:39	←	JSharp has quit (Ping timeout: 245 seconds)
2021-11-24 22:34:06	→	ysh has joined #haskell
2021-11-24 22:34:18	←	mreh has quit (Ping timeout: 256 seconds)
2021-11-24 22:34:54	←	Firedancer has quit (Ping timeout: 245 seconds)
2021-11-24 22:35:19	←	NiKaN has quit (Ping timeout: 245 seconds)
2021-11-24 22:36:13	→	machinedgod has joined #haskell
2021-11-24 22:36:14	→	Firedancer has joined #haskell
2021-11-24 22:36:29	→	NiKaN has joined #haskell
2021-11-24 22:37:04	→	mei8 has joined #haskell
2021-11-24 22:37:11	→	burnside_ has joined #haskell
2021-11-24 22:37:12	→	Codaraxis_ has joined #haskell
2021-11-24 22:37:46	→	sm2n_ has joined #haskell
2021-11-24 22:38:13	→	ralu6 has joined #haskell
2021-11-24 22:38:21	→	raoul2 has joined #haskell
2021-11-24 22:38:48	→	vdsa has joined #haskell
2021-11-24 22:38:52	←	vdsa has quit (K-Lined)
2021-11-24 22:39:01	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 22:39:17	→	FragByte_ has joined #haskell
2021-11-24 22:39:18	→	hskpractice has joined #haskell
2021-11-24 22:39:21	→	cfebs_ has joined #haskell
2021-11-24 22:39:22	→	connrs_ has joined #haskell
2021-11-24 22:39:22	→	a1paca_ has joined #haskell
2021-11-24 22:39:25	←	gaff has quit (Read error: Connection timed out)
2021-11-24 22:39:46	→	cfricke_ has joined #haskell
2021-11-24 22:40:01	→	gaff has joined #haskell
2021-11-24 22:40:13	→	S11001001_ has joined #haskell
2021-11-24 22:40:25	→	Lord_of_Life_ has joined #haskell
2021-11-24 22:40:29	→	hueso_ has joined #haskell
2021-11-24 22:41:04	←	chele has quit (Remote host closed the connection)
2021-11-24 22:41:10	←	betelgeuse has quit (Read error: Connection reset by peer)
2021-11-24 22:41:18	→	Moyst_ has joined #haskell
2021-11-24 22:41:39	→	m1dnight_ has joined #haskell
2021-11-24 22:41:52	→	stilgart_ has joined #haskell
2021-11-24 22:41:55	→	carter_ has joined #haskell
2021-11-24 22:42:01	←	MiguelNegrao has quit (Quit: Client closed)
2021-11-24 22:42:04	→	mcglk_ has joined #haskell
2021-11-24 22:42:05	→	kritzefitz_ has joined #haskell
2021-11-24 22:42:10	→	slowButP1esent has joined #haskell
2021-11-24 22:43:33	←	waleee has quit (Ping timeout: 250 seconds)
2021-11-24 22:43:56	←	hskpractice has quit (Ping timeout: 256 seconds)
2021-11-24 22:43:58	←	hippoid has quit (Ping timeout: 256 seconds)
2021-11-24 22:44:10	←	ubert has quit (Remote host closed the connection)
2021-11-24 22:46:23	→	lbseale has joined #haskell
2021-11-24 22:46:41	←	ysh has quit (*.net *.split)
2021-11-24 22:46:41	←	cfricke has quit (*.net *.split)
2021-11-24 22:46:41	←	eggplantade has quit (*.net *.split)
2021-11-24 22:46:41	←	Moyst has quit (*.net *.split)
2021-11-24 22:46:41	←	burnsidesLlama has quit (*.net *.split)
2021-11-24 22:46:41	←	emf_ has quit (*.net *.split)
2021-11-24 22:46:41	←	jkaye has quit (*.net *.split)
2021-11-24 22:46:41	←	slowButPresent has quit (*.net *.split)
2021-11-24 22:46:41	←	acowley has quit (*.net *.split)
2021-11-24 22:46:41	←	ph88^ has quit (*.net *.split)
2021-11-24 22:46:41	←	boxscape_ has quit (*.net *.split)
2021-11-24 22:46:41	←	mcglk has quit (*.net *.split)
2021-11-24 22:46:41	←	[itchyjunk] has quit (*.net *.split)
2021-11-24 22:46:41	←	whatif has quit (*.net *.split)
2021-11-24 22:46:41	←	cfebs has quit (*.net *.split)
2021-11-24 22:46:41	←	xff0x has quit (*.net *.split)
2021-11-24 22:46:41	←	mei has quit (*.net *.split)
2021-11-24 22:46:41	←	sprout_ has quit (*.net *.split)
2021-11-24 22:46:41	←	zaquest has quit (*.net *.split)
2021-11-24 22:46:41	←	dsrt^ has quit (*.net *.split)
2021-11-24 22:46:41	←	stilgart has quit (*.net *.split)
2021-11-24 22:46:41	←	albet70 has quit (*.net *.split)
2021-11-24 22:46:41	←	FragByte has quit (*.net *.split)
2021-11-24 22:46:41	←	Lord_of_Life has quit (*.net *.split)
2021-11-24 22:46:41	←	motherfsck has quit (*.net *.split)
2021-11-24 22:46:42	←	Jing has quit (*.net *.split)
2021-11-24 22:46:42	←	echoreply has quit (*.net *.split)
2021-11-24 22:46:42	←	saolsen has quit (*.net *.split)
2021-11-24 22:46:42	←	tapas has quit (*.net *.split)
2021-11-24 22:46:42	←	cbarrett has quit (*.net *.split)
2021-11-24 22:46:42	←	enemeth79 has quit (*.net *.split)
2021-11-24 22:46:42	←	S11001001 has quit (*.net *.split)
2021-11-24 22:46:42	←	lagash has quit (*.net *.split)
2021-11-24 22:46:42	←	siers has quit (*.net *.split)
2021-11-24 22:46:42	←	bjs has quit (*.net *.split)
2021-11-24 22:46:42	←	m1dnight has quit (*.net *.split)
2021-11-24 22:46:42	←	kuribas has quit (*.net *.split)
2021-11-24 22:46:42	←	kritzefitz has quit (*.net *.split)
2021-11-24 22:46:42	←	sclv has quit (*.net *.split)
2021-11-24 22:46:42	←	mrianbloom has quit (*.net *.split)
2021-11-24 22:46:42	←	dmj` has quit (*.net *.split)
2021-11-24 22:46:42	←	acertain has quit (*.net *.split)
2021-11-24 22:46:42	←	sm2n has quit (*.net *.split)
2021-11-24 22:46:42	←	a1paca has quit (*.net *.split)
2021-11-24 22:46:42	←	Pent has quit (*.net *.split)
2021-11-24 22:46:42	←	Codaraxis has quit (*.net *.split)
2021-11-24 22:46:42	←	ralu has quit (*.net *.split)
2021-11-24 22:46:42	←	connrs has quit (*.net *.split)
2021-11-24 22:46:42	←	gaze___ has quit (*.net *.split)
2021-11-24 22:46:42	←	hueso has quit (*.net *.split)
2021-11-24 22:46:42	←	gustik has quit (*.net *.split)
2021-11-24 22:46:42	←	V has quit (*.net *.split)
2021-11-24 22:46:42	←	raoul has quit (*.net *.split)
2021-11-24 22:46:42	←	AndreasK has quit (*.net *.split)
2021-11-24 22:46:42	←	SethTisue__ has quit (*.net *.split)
2021-11-24 22:46:42	←	hongminhee has quit (*.net *.split)
2021-11-24 22:46:42	←	aplainzetakind has quit (*.net *.split)
2021-11-24 22:46:42	←	carter has quit (*.net *.split)
2021-11-24 22:46:42	←	Boarders_ has quit (*.net *.split)
2021-11-24 22:46:43	ℹ	FragByte_ is now known as FragByte
2021-11-24 22:46:43	ℹ	raoul2 is now known as raoul
2021-11-24 22:46:43	ℹ	carter_ is now known as carter
2021-11-24 22:46:43	ℹ	mei8 is now known as mei
2021-11-24 22:46:43	ℹ	S11001001_ is now known as S11001001
2021-11-24 22:46:43	ℹ	cfebs_ is now known as cfebs
2021-11-24 22:46:43	ℹ	Lord_of_Life_ is now known as Lord_of_Life
2021-11-24 22:46:43	ℹ	ralu6 is now known as ralu
2021-11-24 22:46:43	ℹ	connrs_ is now known as connrs
2021-11-24 22:47:00	ℹ	kritzefitz_ is now known as kritzefitz
2021-11-24 22:48:00	→	mreh has joined #haskell
2021-11-24 22:48:05	→	hippoid has joined #haskell
2021-11-24 22:52:02	→	waleee has joined #haskell
2021-11-24 22:52:26	←	mreh has quit (Ping timeout: 256 seconds)
2021-11-24 22:52:53	→	acowley has joined #haskell
2021-11-24 22:52:53	→	dsrt^ has joined #haskell
2021-11-24 22:52:53	→	Boarders_ has joined #haskell
2021-11-24 22:52:53	→	JSharp has joined #haskell
2021-11-24 22:52:53	→	ysh has joined #haskell
2021-11-24 22:52:53	→	eggplantade has joined #haskell
2021-11-24 22:52:53	→	emf_ has joined #haskell
2021-11-24 22:52:53	→	jkaye has joined #haskell
2021-11-24 22:52:53	→	ph88^ has joined #haskell
2021-11-24 22:52:53	→	[itchyjunk] has joined #haskell
2021-11-24 22:52:53	→	whatif has joined #haskell
2021-11-24 22:52:53	→	xff0x has joined #haskell
2021-11-24 22:52:53	→	sprout_ has joined #haskell
2021-11-24 22:52:53	→	albet70 has joined #haskell
2021-11-24 22:52:53	→	Jing has joined #haskell
2021-11-24 22:52:53	→	saolsen has joined #haskell
2021-11-24 22:52:53	→	tapas has joined #haskell
2021-11-24 22:52:53	→	cbarrett has joined #haskell
2021-11-24 22:52:53	→	enemeth79 has joined #haskell
2021-11-24 22:52:53	→	lagash has joined #haskell
2021-11-24 22:52:53	→	siers has joined #haskell
2021-11-24 22:52:53	→	bjs has joined #haskell
2021-11-24 22:52:53	→	kuribas has joined #haskell
2021-11-24 22:52:53	→	sclv has joined #haskell
2021-11-24 22:52:53	→	mrianbloom has joined #haskell
2021-11-24 22:52:53	→	dmj` has joined #haskell
2021-11-24 22:52:53	→	acertain has joined #haskell
2021-11-24 22:52:53	→	Pent has joined #haskell
2021-11-24 22:52:53	→	gaze___ has joined #haskell
2021-11-24 22:52:53	→	gustik has joined #haskell
2021-11-24 22:52:53	→	V has joined #haskell
2021-11-24 22:52:53	→	AndreasK has joined #haskell
2021-11-24 22:52:53	→	SethTisue__ has joined #haskell
2021-11-24 22:52:53	→	hongminhee has joined #haskell
2021-11-24 22:52:53	→	aplainzetakind has joined #haskell
2021-11-24 22:52:55	→	echoreply has joined #haskell
2021-11-24 22:53:16	←	dsrt^ has quit (Max SendQ exceeded)
2021-11-24 22:53:18	←	lagash has quit (Max SendQ exceeded)
2021-11-24 22:53:32	→	merijn has joined #haskell
2021-11-24 22:53:33	→	lagash has joined #haskell
2021-11-24 22:53:51	←	neurocyte0132889 has quit (Quit: The Lounge - https://thelounge.chat)
2021-11-24 22:54:08	→	motherfsck has joined #haskell
2021-11-24 22:54:10	→	zaquest has joined #haskell
2021-11-24 22:54:18	→	dsrt^ has joined #haskell
2021-11-24 22:54:50	←	cosimone has quit (Remote host closed the connection)
2021-11-24 22:55:17	→	cosimone has joined #haskell
2021-11-24 22:55:47	→	slack1256 has joined #haskell
2021-11-24 22:56:59	slack1256	I think we need a "heartbeat" for hackage pages. It would a soft way of saying "we haven't updated this package since 2016, but it still compiles and works on ghc 9.2.1". Do other communities have something similar?
2021-11-24 22:57:56	→	neurocyte0132889 has joined #haskell
2021-11-24 22:57:57	←	neurocyte0132889 has quit (Changing host)
2021-11-24 22:57:57	→	neurocyte0132889 has joined #haskell
2021-11-24 22:58:14	←	merijn has quit (Ping timeout: 245 seconds)
2021-11-24 22:58:50	geekosaur	there is one sort of, I think? there's some stuff about last successful build, but I don't know if it retries the build when a new ghc is released
2021-11-24 23:00:30	→	xkuru has joined #haskell
2021-11-24 23:00:35	←	fresheyeball has quit (Quit: WeeChat 2.9)
2021-11-24 23:01:09	←	hippoid has quit (Ping timeout: 245 seconds)
2021-11-24 23:02:28	→	slac38457 has joined #haskell
2021-11-24 23:03:15	←	waleee has quit (Ping timeout: 250 seconds)
2021-11-24 23:03:29	←	cfricke_ has quit (Quit: WeeChat 3.3)
2021-11-24 23:04:29	←	slack1256 has quit (Ping timeout: 245 seconds)
2021-11-24 23:05:31	←	cosimone has quit (Remote host closed the connection)
2021-11-24 23:06:02	→	cosimone has joined #haskell
2021-11-24 23:07:15	kuribas	Does there exist a zipFoldMap?
2021-11-24 23:07:49	awpr	I use metadata revisions for that kind of heartbeat.  if it doesn't need revisions to keep building after a new GHC release, then its version bounds were done incorrectly
2021-11-24 23:08:04	kuribas	like zipFoldMap :: (Foldable t, Monoid m) => (a -> b -> m) -> t a -> t b -> m
2021-11-24 23:08:30	→	_ht has joined #haskell
2021-11-24 23:08:41	awpr	so, recent revisions => "probably still maintained", and no recent revisions => "unmaintained or unreliable"
2021-11-24 23:09:09	←	Katarushisu has quit (Quit: The Lounge - https://thelounge.chat)
2021-11-24 23:09:29	→	Katarushisu has joined #haskell
2021-11-24 23:09:29	→	deadmarshal has joined #haskell
2021-11-24 23:10:24	kuribas	:t \f a b -> foldMap (uncurry f) $ zip a b
2021-11-24 23:10:25	lambdabot	Monoid m => (a -> b -> m) -> [a] -> [b] -> m
2021-11-24 23:10:26	→	hskpractice has joined #haskell
2021-11-24 23:12:06	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 23:12:25	→	hskpractice has joined #haskell
2021-11-24 23:14:56	→	hippoid has joined #haskell
2021-11-24 23:15:42	←	dschrempf has quit (Ping timeout: 256 seconds)
2021-11-24 23:16:31	←	emf_ has quit (Quit: emf_)
2021-11-24 23:18:29	←	CiaoSen has quit (Ping timeout: 265 seconds)
2021-11-24 23:19:11	→	yauhsien has joined #haskell
2021-11-24 23:20:51	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 23:21:10	→	hskpractice has joined #haskell
2021-11-24 23:22:50	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 23:23:09	→	hskpractice has joined #haskell
2021-11-24 23:23:39	←	yauhsien has quit (Ping timeout: 245 seconds)
2021-11-24 23:25:25	←	burnside_ has quit (Remote host closed the connection)
2021-11-24 23:27:05	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 23:27:24	→	hskpractice has joined #haskell
2021-11-24 23:27:51	←	benin has quit (Quit: The Lounge - https://thelounge.chat)
2021-11-24 23:29:41	←	ezzieyguywuf has quit (Ping timeout: 250 seconds)
2021-11-24 23:31:30	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 23:31:48	→	hskpractice has joined #haskell
2021-11-24 23:32:38	←	myShoggoth has quit (Ping timeout: 260 seconds)
2021-11-24 23:33:09	→	slack1256 has joined #haskell
2021-11-24 23:35:28	←	hskpractice has quit (Remote host closed the connection)
2021-11-24 23:35:40	←	slac38457 has quit (Ping timeout: 260 seconds)
2021-11-24 23:35:47	→	hskpractice has joined #haskell
2021-11-24 23:36:18	→	ezzieyguywuf has joined #haskell
2021-11-24 23:37:26	EvanR	kuribas, wouldn't that be better served by doing like... a bifold instead of going though a tuple
2021-11-24 23:39:15	kuribas	:t bifold
2021-11-24 23:39:16	lambdabot	error:
2021-11-24 23:39:16	lambdabot	    • Variable not in scope: bifold
2021-11-24 23:39:16	lambdabot	    • Perhaps you meant one of these:
2021-11-24 23:39:23	kuribas	@hoogle bifold
2021-11-24 23:39:24	lambdabot	Data.Bifoldable bifold :: (Bifoldable p, Monoid m) => p m m -> m
2021-11-24 23:39:24	lambdabot	RIO.Prelude bifold :: (Bifoldable p, Monoid m) => p m m -> m
2021-11-24 23:39:24	lambdabot	Relude.Foldable.Reexport bifold :: (Bifoldable p, Monoid m) => p m m -> m
2021-11-24 23:41:56	slack1256	geekosaur: Oh, that is a equivalent signal! 
2021-11-24 23:42:22	slack1256	Well, it would be if `--allow-newer` was the default
2021-11-24 23:42:39	←	Moyst_ has quit (Ping timeout: 265 seconds)
2021-11-24 23:44:03	→	Moyst_ has joined #haskell
2021-11-24 23:44:08	←	machinedgod has quit (Ping timeout: 260 seconds)
2021-11-24 23:45:15	→	machinedgod has joined #haskell
2021-11-24 23:46:34	EvanR	heh, instance Bifoldable BiList
2021-11-24 23:47:42	EvanR	the way they accomplish your zip map thing is with AppEndo monoid
2021-11-24 23:48:24	dsal	monochrom: what's that thing you say about brains and memoization?  I asked lambdabot but it wasn't helpful.
2021-11-24 23:49:06	←	hskpractice has quit (Ping timeout: 256 seconds)
2021-11-24 23:49:42	←	hippoid has quit (Ping timeout: 256 seconds)
2021-11-24 23:49:49	monochrom	Memoized randomization.  You form an opinion randomly, then remember that you stand by that opinion.
2021-11-24 23:50:06	dsal	It's Oh yes!
2021-11-24 23:50:27	dsal	Thanks.  :) 
2021-11-24 23:50:49	→	myShoggoth has joined #haskell
2021-11-24 23:52:32	→	Topsi has joined #haskell
2021-11-24 23:52:50	EvanR	gotta clear the opinion cache or it gets out of date
2021-11-24 23:53:10	dsal	I try pretty hard not to remember things when I can avoid it.
2021-11-24 23:53:12	geekosaur	if only that worked
2021-11-24 23:53:27	[exa]	flush the cache with quality fermented contents.
2021-11-24 23:53:49	→	slack4341 has joined #haskell
2021-11-24 23:53:49	←	xff0x has quit (Ping timeout: 264 seconds)
2021-11-24 23:54:17	monochrom	My observation is that humans don't tend to update their opinions over time.
2021-11-24 23:55:32	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2021-11-24 23:55:43	→	zincy_ has joined #haskell
2021-11-24 23:55:45	→	mcgroin has joined #haskell
2021-11-24 23:55:56	←	slack1256 has quit (Ping timeout: 256 seconds)
2021-11-24 23:56:11	dsal	You mean your persistent opinion is that humans don't tend to update their opinions over time.
2021-11-24 23:56:20	monochrom	haha
2021-11-24 23:56:32	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2021-11-24 23:56:53	dsal	People do tend to back-rationalize just about anything, though.
2021-11-24 23:57:08	dsal	If I prove you wrong, you just disagree for a different reason.
2021-11-24 23:57:08	→	emf has joined #haskell
2021-11-24 23:57:35	monochrom	This is known as creativity!
2021-11-24 23:58:01	←	jkaye has quit (Ping timeout: 264 seconds)
2021-11-24 23:58:46	←	Moyst_ has quit (Ping timeout: 256 seconds)
2021-11-24 23:59:22	→	pfurla has joined #haskell
2021-11-24 23:59:31	→	lavaman has joined #haskell
2021-11-25 00:00:28	→	Moyst_ has joined #haskell
2021-11-25 00:00:52	monochrom	Today I saw a conference announcement on the haskell mailing list, the MSFP one, and the phrase "[where would] call-by-push-values [be] without adjunctions?" caught my attention.
2021-11-25 00:01:32	monochrom	So I Googled call-by-push-values and eventually found the PhD thesis that started it: https://www.cs.bham.ac.uk/~pbl/papers/thesisqmwphd.pdf
2021-11-25 00:01:36	EvanR	call by push value ...
2021-11-25 00:01:58	monochrom	That is going to be a very deep rabbit hole...
2021-11-25 00:02:41	int-e	just don't drink from labelled bottles
2021-11-25 00:03:07	int-e	(stick to the mushrooms instead)
2021-11-25 00:03:19	→	burnsidesLlama has joined #haskell
2021-11-25 00:03:35	dsal	int-e: ++
2021-11-25 00:03:40	←	lavaman has quit (Ping timeout: 245 seconds)
2021-11-25 00:03:58	monochrom	I don't understnad.
2021-11-25 00:04:27	EvanR	🍄 1UP 
2021-11-25 00:04:51	←	pfurla has quit (Quit: gone to sleep. ZZZzzz…)
2021-11-25 00:04:53	→	DNH has joined #haskell
2021-11-25 00:05:16	int-e	Oh you should read Charles Dogson's thesis on rabbit holes then.
2021-11-25 00:05:17	geekosaur	was thinking lewis carroll vs. mario…
2021-11-25 00:05:43	int-e	geekosaur: There's a mushroom in Alice in Wonderland too.
2021-11-25 00:06:00	int-e	I think. I may be mixing up the books, there are several and it's been a while.
2021-11-25 00:06:10	geekosaur	yes, I know, but they weren't so different from the bottles
2021-11-25 00:06:31	int-e	geekosaur: We *were* discussing opinions.
2021-11-25 00:06:34	→	waleee has joined #haskell
2021-11-25 00:06:34	int-e	:)
2021-11-25 00:07:16	←	Flonk has quit (Quit: Ping timeout (120 seconds))
2021-11-25 00:07:29	←	dyeplexer has quit (Ping timeout: 260 seconds)
2021-11-25 00:07:50	int-e	geekosaur: I have no problem with the Mario association... it just didn't occur to me.
2021-11-25 00:08:28	geekosaur	I was kinda riffing on EvanR and thinking you leap out of the hole for the mushrooms
2021-11-25 00:08:31	←	burnsidesLlama has quit (Ping timeout: 240 seconds)
2021-11-25 00:09:01	←	zincy_ has quit (Remote host closed the connection)
2021-11-25 00:09:06	geekosaur	so kinda mishmashing my references a bit :)
2021-11-25 00:09:29	→	Flonk has joined #haskell
2021-11-25 00:09:38	EvanR	so my emoji made it through the transporter beam in one piece
2021-11-25 00:09:51	←	jonathanx has quit (Remote host closed the connection)
2021-11-25 00:10:09	→	jonathanx has joined #haskell
2021-11-25 00:10:13	←	myShoggoth has quit (Read error: Connection reset by peer)
2021-11-25 00:10:32	→	myShoggoth has joined #haskell
2021-11-25 00:12:43	→	zincy_ has joined #haskell
2021-11-25 00:13:57	←	Flonk has quit (Quit: Ping timeout (120 seconds))
2021-11-25 00:14:27	→	Flonk has joined #haskell
2021-11-25 00:14:36	→	whatsupdoc has joined #haskell
2021-11-25 00:16:12	→	hskpractice has joined #haskell
2021-11-25 00:16:18	ℹ	irc: disconnected from server
2021-11-27 23:18:16	→	oxide has joined #haskell
2021-11-27 23:18:16	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2021-11-27 23:18:16	ℹ	Topic set by geekosaur (~geekosaur@xmonad/geekosaur) on Fri, 01 Oct 2021 22:09:01
2021-11-27 23:18:16	ℹ	Channel #haskell: 733 nicks (1 op, 0 voices, 732 normals)
2021-11-27 23:18:16	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2021-11-27 23:18:17	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2021-11-27 23:19:17	→	betelgeuse9 has joined #haskell
2021-11-27 23:20:30	←	betelgeuse9 has quit (Read error: Connection reset by peer)
2021-11-27 23:22:05	→	betelgeuse9 has joined #haskell
2021-11-27 23:22:49	→	retro_ has joined #haskell
2021-11-27 23:23:28	←	betelgeuse9 has quit (Read error: Connection reset by peer)
2021-11-27 23:24:01	←	retroid_ has quit (Ping timeout: 268 seconds)
2021-11-27 23:25:01	→	betelgeuse9 has joined #haskell
2021-11-27 23:25:15	←	boxscape_ has quit (Ping timeout: 268 seconds)
2021-11-27 23:26:08	←	betelgeuse9 has quit (Read error: Connection reset by peer)
2021-11-27 23:26:12	←	\dev\ice has left #haskell
2021-11-27 23:27:42	→	betelgeuse9 has joined #haskell
2021-11-27 23:28:53	←	betelgeuse9 has quit (Read error: Connection reset by peer)
2021-11-27 23:30:20	→	narendraj9 has joined #haskell
2021-11-27 23:30:28	→	betelgeuse9 has joined #haskell
2021-11-27 23:31:44	←	betelgeuse9 has quit (Read error: Connection reset by peer)
2021-11-27 23:32:09	mjrosenb	has anyone been able to get stack traces with ghjcs? I've added some HasCallStack contexts, but I'm not seeing anything in the error messages.
2021-11-27 23:33:20	→	betelgeuse9 has joined #haskell
2021-11-27 23:34:39	←	betelgeuse9 has quit (Read error: Connection reset by peer)
2021-11-27 23:36:13	→	betelgeuse9 has joined #haskell
2021-11-27 23:37:38	←	betelgeuse9 has quit (Read error: Connection reset by peer)
2021-11-27 23:38:38	←	SquidDev has quit (Quit: Bye!)
2021-11-27 23:39:12	→	betelgeuse9 has joined #haskell
2021-11-27 23:39:27	→	SquidDev has joined #haskell
2021-11-27 23:40:31	←	betelgeuse9 has quit (Read error: Connection reset by peer)
2021-11-27 23:41:59	→	kspalaiologos has joined #haskell
2021-11-27 23:42:06	→	betelgeuse9 has joined #haskell
2021-11-27 23:43:13	←	deadmarshal has quit (Ping timeout: 256 seconds)
2021-11-27 23:43:35	←	betelgeuse9 has quit (Read error: Connection reset by peer)
2021-11-27 23:43:55	←	kupi has quit (Quit: Connection closed for inactivity)
2021-11-27 23:45:10	→	betelgeuse9 has joined #haskell
2021-11-27 23:45:27	→	johnw has joined #haskell
2021-11-27 23:46:02	→	yauhsien has joined #haskell
2021-11-27 23:46:31	←	betelgeuse9 has quit (Read error: Connection reset by peer)
2021-11-27 23:48:06	→	betelgeuse9 has joined #haskell
2021-11-27 23:49:23	←	betelgeuse9 has quit (Read error: Connection reset by peer)
2021-11-27 23:49:34	→	econo has joined #haskell
2021-11-27 23:50:29	→	ees has joined #haskell
2021-11-27 23:50:48	←	yauhsien has quit (Ping timeout: 260 seconds)
2021-11-27 23:50:58	→	betelgeuse9 has joined #haskell
2021-11-27 23:52:19	←	MrNobody_0000000 has quit (Quit: MrNobody_0000000)
2021-11-27 23:52:23	←	betelgeuse9 has quit (Read error: Connection reset by peer)
2021-11-27 23:53:02	←	kspalaiologos has quit (Quit: Leaving)
2021-11-27 23:53:58	→	betelgeuse9 has joined #haskell
2021-11-27 23:57:18	←	hskpractice has quit (Remote host closed the connection)
2021-11-27 23:57:36	→	hskpractice has joined #haskell
2021-11-27 23:57:38	←	geekosaur has quit (Remote host closed the connection)
2021-11-27 23:59:18	←	hskpractice has quit (Remote host closed the connection)
2021-11-27 23:59:36	→	hskpractice has joined #haskell
2021-11-27 23:59:43	→	geekosaur has joined #haskell
2021-11-28 00:01:04	←	wroathe has quit (Ping timeout: 260 seconds)
2021-11-28 00:01:13	←	gdown has quit (Read error: Connection reset by peer)
2021-11-28 00:03:15	EvanR	Ah whitespace mattering in haskell (t':ts) vs (t ': ts)
2021-11-28 00:03:40	←	bliminse has quit (Quit: leaving)
2021-11-28 00:04:07	←	hskpractice has quit (Remote host closed the connection)
2021-11-28 00:04:22	Rembane_	EvanR: Didn't GHC like your new and fancy operator? 
2021-11-28 00:04:25	→	hskpractice has joined #haskell
2021-11-28 00:06:05	←	hskpractice has quit (Remote host closed the connection)
2021-11-28 00:07:02	→	deadmarshal has joined #haskell
2021-11-28 00:07:07	→	x88x88x has joined #haskell
2021-11-28 00:07:40	←	fef has quit (Ping timeout: 276 seconds)
2021-11-28 00:08:29	→	synthmeat has joined #haskell
2021-11-28 00:12:20	→	bliminse has joined #haskell
2021-11-28 00:12:26	←	dyeplexer has quit (Remote host closed the connection)
2021-11-28 00:14:53	hpc	you can name operators with '?
2021-11-28 00:15:47	hpc	or just a typo?
2021-11-28 00:15:55	Rembane_	hpc: Nope, I was wrong. It becomes a syntax error. 
2021-11-28 00:16:56	int-e	:t Proxy :: Proxy ('() ': '[])
2021-11-28 00:16:57	lambdabot	Proxy '['()]
2021-11-28 00:17:01	→	Sgeo has joined #haskell
2021-11-28 00:17:25	Rembane_	Is that a type level list? 
2021-11-28 00:17:26	→	merijn has joined #haskell
2021-11-28 00:17:49	int-e	yes
2021-11-28 00:18:00	→	wroathe has joined #haskell
2021-11-28 00:18:00	←	wroathe has quit (Changing host)
2021-11-28 00:18:00	→	wroathe has joined #haskell
2021-11-28 00:18:54	EvanR	t':ts it thinks t' is a variable, I think
2021-11-28 00:19:58	EvanR	the poor lexer
2021-11-28 00:20:18	←	kuribas has quit (Remote host closed the connection)
2021-11-28 00:20:22	←	Gureknglas has quit (Ping timeout: 245 seconds)
2021-11-28 00:21:34	int-e	:t Proxy :: Proxy ('True':'[])
2021-11-28 00:21:35	lambdabot	error:
2021-11-28 00:21:35	lambdabot	    Not in scope: data constructor ‘True'’
2021-11-28 00:21:35	lambdabot	    Perhaps you meant ‘True’ (imported from Data.Bool)
2021-11-28 00:21:47	int-e	:t Proxy :: Proxy ('True ': '[])
2021-11-28 00:21:48	lambdabot	Proxy '[ 'True]
2021-11-28 00:21:50	int-e	unsurprising
2021-11-28 00:22:21	awpr	another reason for https://gitlab.haskell.org/ghc/ghc/-/issues/20531
2021-11-28 00:22:39	awpr	no single quote = no whitespace weirdness
2021-11-28 00:23:13	←	wroathe has quit (Ping timeout: 268 seconds)
2021-11-28 00:23:39	int-e	't' might also be a character literal, hmm
2021-11-28 00:23:40	→	gdown has joined #haskell
2021-11-28 00:23:50	←	zer0bitz has quit (Read error: Connection reset by peer)
2021-11-28 00:24:43	EvanR	oh jeez
2021-11-28 00:26:30	→	Gurkenglas has joined #haskell
2021-11-28 00:28:10	→	zer0bitz has joined #haskell
2021-11-28 00:32:29	→	hskpractice has joined #haskell
2021-11-28 00:32:31	→	rk04 has joined #haskell
2021-11-28 00:34:11	←	hskpractice has quit (Remote host closed the connection)
2021-11-28 00:34:28	→	hskpractice has joined #haskell
2021-11-28 00:35:08	←	x88x88x has quit (Quit: Using Circe, the loveliest of all IRC clients)
2021-11-28 00:36:18	→	x88x88x has joined #haskell
2021-11-28 00:38:06	←	hskpractice has quit (Remote host closed the connection)
2021-11-28 00:38:23	→	hskpractice has joined #haskell
2021-11-28 00:41:28	EvanR	awpr, wow... I don't even need the ' xD
2021-11-28 00:43:42	→	werneta has joined #haskell
2021-11-28 00:44:11	←	koz has quit (Ping timeout: 268 seconds)
2021-11-28 00:46:36	←	hskpractice has quit (Remote host closed the connection)
2021-11-28 00:46:53	→	hskpractice has joined #haskell
2021-11-28 00:47:00	←	pfurla has quit (Quit: gone to sleep. ZZZzzz…)
2021-11-28 00:49:14	→	yauhsien has joined #haskell
2021-11-28 00:49:36	→	[itchyjunk] has joined #haskell
2021-11-28 00:50:58	→	koz has joined #haskell
2021-11-28 00:51:51	←	merijn has quit (Ping timeout: 265 seconds)
2021-11-28 00:52:39	EvanR	is there something like a kind synonym
2021-11-28 00:53:24	EvanR	or is the type synonym syntax supposed to work for that
2021-11-28 00:53:53	geekosaur	type synonyms should work but you may need an extension
2021-11-28 00:53:56	→	random-jellyfish has joined #haskell
2021-11-28 00:55:36	←	hskpractice has quit (Remote host closed the connection)
2021-11-28 00:55:52	→	hskpractice has joined #haskell
2021-11-28 00:55:56	→	jespada has joined #haskell
2021-11-28 00:56:36	hskpractice	when i build with stack i want to somehow inline a few text files that are basically non-code libraries, so that i don't have to ship with those libraries, but just have one self-contained binary. am i thinking about it in the wrong way?
2021-11-28 00:56:43	hskpractice	any idea on how i would accomplish that?
2021-11-28 00:56:56	→	eggplantade has joined #haskell
2021-11-28 00:57:04	←	jespada has quit (Read error: Connection reset by peer)
2021-11-28 00:57:05	EvanR	I tried to establish a sort of schema for a record like type X = [("symbol", Float)]
2021-11-28 00:57:14	EvanR	it complains that "symbol" is a Symbol not a *
2021-11-28 00:57:22	→	lavaman has joined #haskell
2021-11-28 00:57:33	←	deadmarshal has quit (Ping timeout: 240 seconds)
2021-11-28 00:57:36	←	x88x88x has quit (Quit: Using Circe, the loveliest of all IRC clients)
2021-11-28 00:57:38	→	jespada has joined #haskell
2021-11-28 00:58:05	awpr	:kind! (,)
2021-11-28 00:58:18	awpr	> :kind! (,)
2021-11-28 00:58:18	geekosaur	% :kind! (,)
2021-11-28 00:58:19	yahb	geekosaur: * -> * -> *; = (,)
2021-11-28 00:58:19	lambdabot	 <hint>:1:1: error: parse error on input ‘:’
2021-11-28 00:58:28	EvanR	oh dang
2021-11-28 00:58:52	awpr	that one would actually need a quote, since a promoted tuple is different from the type of tuples
2021-11-28 00:58:54	EvanR	how is that working then... I'm using a pair of Symbol and * in the implementation of the record
2021-11-28 00:59:16	geekosaur	% :set -XPolyKinds
2021-11-28 00:59:16	yahb	geekosaur: 
2021-11-28 00:59:23	geekosaur	% :kind! (,)
2021-11-28 00:59:24	yahb	geekosaur: * -> * -> *; = (,)
2021-11-28 00:59:28	geekosaur	feh
2021-11-28 00:59:39	awpr	% :kind! '(,
2021-11-28 00:59:40	yahb	awpr: ; <interactive>:1:4: error: parse error (possibly incorrect indentation or mismatched brackets)
2021-11-28 00:59:41	awpr	% :kind! '(,)
2021-11-28 00:59:41	yahb	awpr: a -> b -> (a, b); = '(,)
2021-11-28 00:59:55	EvanR	ah it was the quote... and maybe also polykinds
2021-11-28 01:01:33	←	yauhsien has quit (Ping timeout: 240 seconds)
2021-11-28 01:03:20	←	Gurkenglas has quit (Remote host closed the connection)
2021-11-28 01:03:40	→	Gurkenglas has joined #haskell
2021-11-28 01:03:59	hpc	why is yahb formatting it like that?
2021-11-28 01:05:04	hpc	oh, normalized type
2021-11-28 01:06:49	EvanR	:kind (,)
2021-11-28 01:06:56	EvanR	i see
2021-11-28 01:07:08	sm	hskpractice: file-embed package ?
2021-11-28 01:07:26	←	Guest17 has quit (Quit: Client closed)
2021-11-28 01:08:17	←	Gurkenglas has quit (Ping timeout: 245 seconds)
2021-11-28 01:09:02	←	werneta has quit (Quit: Lost terminal)
2021-11-28 01:11:55	geekosaur	I think LB only understands it as :k and doesn't support :k!
2021-11-28 01:11:58	geekosaur	:k (,)
2021-11-28 01:12:00	lambdabot	* -> * -> *
2021-11-28 01:12:17	←	kennyd has quit (Quit: CGI:IRC (Session timeout))
2021-11-28 01:14:22	←	hskpractice has quit (Remote host closed the connection)
2021-11-28 01:14:40	→	hskpractice has joined #haskell
2021-11-28 01:16:20	←	hskpractice has quit (Remote host closed the connection)
2021-11-28 01:16:38	→	hskpractice has joined #haskell
2021-11-28 01:17:50	←	mbuf has quit (Quit: Leaving)
2021-11-28 01:18:58	→	x88x88x has joined #haskell
2021-11-28 01:19:32	←	rk04 has quit (Ping timeout: 245 seconds)
2021-11-28 01:20:55	←	hskpractice has quit (Remote host closed the connection)
2021-11-28 01:21:12	→	hskpractice has joined #haskell
2021-11-28 01:21:45	→	Everything has joined #haskell
2021-11-28 01:24:15	→	kjak has joined #haskell
2021-11-28 01:26:16	←	Guest9947 has quit (Quit: Client closed)
2021-11-28 01:29:43	←	hskpractice has quit (Remote host closed the connection)
2021-11-28 01:29:53	←	x88x88x has quit (Quit: Using Circe, the loveliest of all IRC clients)
2021-11-28 01:30:50	←	ub has quit (Quit: ub)
2021-11-28 01:33:57	→	rk04 has joined #haskell
2021-11-28 01:35:20	←	juhp has quit (Ping timeout: 260 seconds)
2021-11-28 01:35:22	←	jstolarek has quit (Ping timeout: 268 seconds)
2021-11-28 01:36:44	→	juhp has joined #haskell
2021-11-28 01:39:51	→	wroathe has joined #haskell
2021-11-28 01:39:51	←	wroathe has quit (Changing host)
2021-11-28 01:39:51	→	wroathe has joined #haskell
2021-11-28 01:45:44	→	pavonia has joined #haskell
2021-11-28 01:48:00	←	lavaman has quit (Remote host closed the connection)
2021-11-28 01:51:43	→	hskpractice has joined #haskell
2021-11-28 01:55:44	←	hskpractice has quit (Remote host closed the connection)
2021-11-28 01:56:02	→	hskpractice has joined #haskell
2021-11-28 01:57:42	←	hskpractice has quit (Remote host closed the connection)
2021-11-28 01:58:00	→	hskpractice has joined #haskell
2021-11-28 01:58:41	←	rk04 has quit (Quit: rk04)
2021-11-28 01:58:54	hololeap	 /usr/lib64/x86_64-linux-ghc-9.2.1/libHSnetwork-uri-2.6.4.1-LtJsElfesy1349BRswtapk-ghc9.2.1.so
2021-11-28 01:59:05	hololeap	anyone know what the string LtJsElfesy1349BRswtapk is?
2021-11-28 01:59:14	geekosaur	ABI hash
2021-11-28 01:59:25	hololeap	oh, how does that get calculated?
2021-11-28 01:59:32	geekosaur	ghc computes it during compilation
2021-11-28 02:00:32	geekosaur	it also includes things like compile options that can change generated object code or inlineable source in the .hi file, since that also produces binary incompatibility between builds
2021-11-28 02:00:40	hololeap	I'm running into something where it changes depending on whether or not --enable-tests is turned on
2021-11-28 02:01:13	geekosaur	@where paste
2021-11-28 02:01:13	lambdabot	Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
2021-11-28 02:01:19	geekosaur	show your cabal file?
2021-11-28 02:01:42	geekosaur	(and/or stack.yaml if applicable)
2021-11-28 02:02:15	hololeap	so in gentoo, all the dependency resolution is through the package manager. sometimes you get circular dependencies with the tests and the only way to break them is to compile a package with tests off, finish compiling the other packages, then go back and turn tests on for the first package if you want
2021-11-28 02:02:31	EvanR	this is funny, type F a = G X a  won't let me use F unapplied but type F = G X will
2021-11-28 02:02:31	→	whatsupdoc has joined #haskell
2021-11-28 02:02:41	hololeap	this changes that ABI hash, and so you then have to recompile the reverse-dependencies of that package
2021-11-28 02:03:29	geekosaur	that implies the tests do something like "ghc-options: -O0" or some other flag that affects the shared library ABI
2021-11-28 02:03:34	→	werneta has joined #haskell
2021-11-28 02:03:53	hololeap	I'll look into it, but I think the only difference is --enable-tests or not
2021-11-28 02:04:26	geekosaur	although sometimes cabal flips a flag that it thinks won't affect the ABI but does (use -v3 during the build, then ask in #hackage)
2021-11-28 02:04:48	hololeap	so yeah, I'd like to figure out how to toggle tests and keep that ABI hash from changing. anyway, thanks for telling me the name of it
2021-11-28 02:05:07	geekosaur	this is I think still shaking down because ghc has a ridiculous number of options and figuring out which ones affect shlib ABI is painful
2021-11-28 02:05:35	←	raehik has quit (Ping timeout: 268 seconds)
2021-11-28 02:05:59	geekosaur	also sometimes ghc thinks one flag affects ABI when it doesn't, and hashes it inappropriately. but --enable-tests is not passed to ghc as such
2021-11-28 02:06:45	geekosaur	so cabal is changing some option, which is why you need to compare cabal -v3 output to see what ghc-passed flags change with --enable-tests
2021-11-28 02:07:10	hololeap	ok
2021-11-28 02:07:22	hololeap	thanks
2021-11-28 02:07:26	←	Everything has quit (Ping timeout: 268 seconds)
2021-11-28 02:07:42	geekosaur	then you ask in #hackage, and they may redirect you to #ghc
2021-11-28 02:07:58	geekosaur	(#hackage being where the cabal devs hang out)
2021-11-28 02:08:16	hololeap	cool
2021-11-28 02:09:08	→	zincy_ has joined #haskell
2021-11-28 02:09:28	←	exbios has quit (Remote host closed the connection)
2021-11-28 02:10:04	←	ubert has quit (Remote host closed the connection)
2021-11-28 02:10:22	→	ubert has joined #haskell
2021-11-28 02:13:43	←	hskpractice has quit (Remote host closed the connection)
2021-11-28 02:14:00	→	hskpractice has joined #haskell
2021-11-28 02:16:08	←	hskpractice has quit (Remote host closed the connection)
2021-11-28 02:16:52	←	wroathe has quit (Ping timeout: 260 seconds)
2021-11-28 02:16:59	sclv	my guess is enable tests or not calculates a different build plan if there’s test deps not in the main lib
2021-11-28 02:17:14	sclv	so eg a different version of bytestring is picked
2021-11-28 02:17:29	sclv	all of which is correct and as designed
2021-11-28 02:18:18	←	betelgeuse9 has quit (Remote host closed the connection)
2021-11-28 02:21:10	→	x88x88x has joined #haskell
2021-11-28 02:21:19	ℹ	justache is now known as justBOOMER
2021-11-28 02:25:33	→	jgeerds has joined #haskell
2021-11-28 02:25:47	←	zincy_ has quit (Remote host closed the connection)
2021-11-28 02:26:06	→	zincy_ has joined #haskell
2021-11-28 02:26:19	←	zzz has left #haskell
2021-11-28 02:26:48	→	yin has joined #haskell
2021-11-28 02:28:04	←	random-jellyfish has quit (Ping timeout: 256 seconds)
2021-11-28 02:28:18	←	x88x88x has quit (Remote host closed the connection)
2021-11-28 02:29:04	ℹ	irc: disconnected from server
2022-03-25 13:51:08	→	oxide has joined #haskell
2022-03-25 13:51:08	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-03-25 13:51:08	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-03-25 13:51:08	ℹ	Channel #haskell: 714 nicks (1 op, 0 voices, 713 normals)
2022-03-25 13:51:09	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-03-25 13:51:09	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-03-25 13:53:19	energizer	but haskell's getting linear types innit
2022-03-25 13:54:53	←	merijn has quit (Ping timeout: 240 seconds)
2022-03-25 13:58:12	→	chomwitt has joined #haskell
2022-03-25 13:59:42	→	mmhat has joined #haskell
2022-03-25 14:01:55	←	nek0 has quit (Quit: Ping timeout (120 seconds))
2022-03-25 14:02:12	→	nek0 has joined #haskell
2022-03-25 14:05:45	←	mon_aaraj has quit (Ping timeout: 256 seconds)
2022-03-25 14:06:32	abastro[m]	Well, not as powerful as granular
2022-03-25 14:07:31	→	alMalsamo has joined #haskell
2022-03-25 14:07:40	→	mon_aaraj has joined #haskell
2022-03-25 14:07:44	ℹ	alMalsamo is now known as lumberjack123
2022-03-25 14:09:07	←	yauhsien has quit (Remote host closed the connection)
2022-03-25 14:10:12	←	stiell has quit (Ping timeout: 240 seconds)
2022-03-25 14:12:11	→	mason0 has joined #haskell
2022-03-25 14:12:16	→	yauhsien has joined #haskell
2022-03-25 14:17:41	←	yauhsien has quit (Ping timeout: 272 seconds)
2022-03-25 14:19:12	→	alp has joined #haskell
2022-03-25 14:21:46	←	zaquest has quit (Remote host closed the connection)
2022-03-25 14:22:38	→	acidjnk has joined #haskell
2022-03-25 14:22:47	←	chomwitt has quit (Ping timeout: 245 seconds)
2022-03-25 14:22:50	→	merijn has joined #haskell
2022-03-25 14:23:13	←	shriekingnoise has quit (Quit: Quit)
2022-03-25 14:23:55	→	zaquest has joined #haskell
2022-03-25 14:27:24	→	stiell has joined #haskell
2022-03-25 14:29:09	→	bahamas has joined #haskell
2022-03-25 14:30:08	←	freeman42x[m] has quit (Quit: You have been kicked for being idle)
2022-03-25 14:30:10	←	norg[m] has quit (Quit: You have been kicked for being idle)
2022-03-25 14:30:33	←	merijn has quit (Ping timeout: 240 seconds)
2022-03-25 14:30:44	→	ccntrq has joined #haskell
2022-03-25 14:31:44	←	dextaa_ has quit (Remote host closed the connection)
2022-03-25 14:38:44	→	eggplantade has joined #haskell
2022-03-25 14:41:30	→	vpan has joined #haskell
2022-03-25 14:41:43	→	mc47 has joined #haskell
2022-03-25 14:42:57	←	benin has quit (Read error: Connection reset by peer)
2022-03-25 14:43:19	←	eggplantade has quit (Ping timeout: 260 seconds)
2022-03-25 14:44:52	←	bahamas has quit (Ping timeout: 245 seconds)
2022-03-25 14:45:06	←	acidsys has quit (Excess Flood)
2022-03-25 14:45:06	→	benin has joined #haskell
2022-03-25 14:45:32	←	xff0x has quit (Ping timeout: 252 seconds)
2022-03-25 14:45:36	→	acidsys has joined #haskell
2022-03-25 14:45:42	←	acidsys has quit (Excess Flood)
2022-03-25 14:46:19	→	acidsys has joined #haskell
2022-03-25 14:57:35	←	mon_aaraj has quit (Ping timeout: 272 seconds)
2022-03-25 14:59:01	→	mon_aaraj has joined #haskell
2022-03-25 14:59:42	→	bahamas has joined #haskell
2022-03-25 15:01:31	→	merijn has joined #haskell
2022-03-25 15:03:55	→	raehik has joined #haskell
2022-03-25 15:04:15	←	bahamas has quit (Ping timeout: 250 seconds)
2022-03-25 15:08:53	→	mcgroin has joined #haskell
2022-03-25 15:09:13	→	jgeerds has joined #haskell
2022-03-25 15:09:23	←	benin has quit (Quit: The Lounge - https://thelounge.chat)
2022-03-25 15:09:40	→	dschrempf has joined #haskell
2022-03-25 15:15:09	→	benin has joined #haskell
2022-03-25 15:17:41	←	mon_aaraj has quit (Ping timeout: 250 seconds)
2022-03-25 15:19:12	←	liz has quit (Quit: leaving)
2022-03-25 15:19:19	→	xff0x has joined #haskell
2022-03-25 15:19:32	→	liz has joined #haskell
2022-03-25 15:19:37	→	mon_aaraj has joined #haskell
2022-03-25 15:20:37	→	meinside has joined #haskell
2022-03-25 15:21:50	mon_aaraj	Hm... well, it seems like my problem from earlier stays. I have my configuration file in ~/.config/.ghci: https://bpa.st/JPLQ and my GHC version is 9.2.2, confirmed via ghc --version and ghci --version as well, just in-case 
2022-03-25 15:22:51	←	benin has quit (Quit: The Lounge - https://thelounge.chat)
2022-03-25 15:28:25	→	xkuru has joined #haskell
2022-03-25 15:28:51	mon_aaraj	i realised i haven't mentioned my issue; it's that GHCi does not seem to read or realise that the file exists in that path 
2022-03-25 15:30:17	→	Guest43 has joined #haskell
2022-03-25 15:30:59	→	yauhsien has joined #haskell
2022-03-25 15:31:12	sm	are you sure that's a path it looks at ? is there a ./.ghci or ~/.ghci ?
2022-03-25 15:31:20	jackdk	monochrom: what is $XDG_CONFIG_HOME? https://downloads.haskell.org/ghc/latest/docs/html/users_guide/ghci.html#the-ghci-and-haskeline-files
2022-03-25 15:31:51	jackdk	sorry monochrom , I mean mon_aaraj 
2022-03-25 15:35:10	Guest43	I am applying for gsoc summer of  haskell . During this period I am in my final year so I am not  totally free  but I really want to participate in gsoc . Cause probably I won't be able to apply to gsoc next year when I am not a student anymore? What can I do ?
2022-03-25 15:35:34	←	acidjnk has quit (Ping timeout: 252 seconds)
2022-03-25 15:39:15	←	gurkenglas has quit (Ping timeout: 256 seconds)
2022-03-25 15:39:27	mon_aaraj	jackdk: ``echo $XDG_CONFIG_HOME`` says ``/home/mon/.config`` 
2022-03-25 15:39:48	mon_aaraj	/home/mon is my $HOME, of course 
2022-03-25 15:40:54	mon_aaraj	sm: no, there's none, but there *is* a ``~/.ghc`` folder that has ghci_history inside it. i tried to get rid of it, but ghc keeps creating it
2022-03-25 15:43:16	Putonlalla	Could I use `unsafeCoerce` to instantiate a class that doesn't export its methods?
2022-03-25 15:43:25	←	chenqisu1 has quit (Quit: Leaving)
2022-03-25 15:43:27	←	Guest43 has quit (Quit: Client closed)
2022-03-25 15:43:29	→	boxscape_ has joined #haskell
2022-03-25 15:43:37	jackdk	mon_aaraj: dunno then, maybe run ghci with some extra `-v` or something and see if it tells you more?
2022-03-25 15:45:05	mon_aaraj	https://bpa.st/X73A here's the result, i don't see anything myself 
2022-03-25 15:45:07	→	ProfSimm has joined #haskell
2022-03-25 15:48:33	→	notzmv has joined #haskell
2022-03-25 15:50:31	←	vglfr has quit (Ping timeout: 260 seconds)
2022-03-25 15:50:49	jackdk	Beats me, then, sorry.
2022-03-25 15:51:16	sm	also, if it were it ~/.config wouldn't the convention usually be ~/.config/ghci ? But I'd consult the GHC manual
2022-03-25 15:51:58	jackdk	I'd give that a go, yeah, though the manual says `$XDG_CONFIG_HOME/.ghci`. I'd also try `$XDG_CONFIG_HOME/.ghci/.ghci` just for kicks
2022-03-25 15:53:11	←	yauhsien has quit (Remote host closed the connection)
2022-03-25 15:54:46	→	yauhsien has joined #haskell
2022-03-25 15:56:42	←	ProfSimm has quit (Remote host closed the connection)
2022-03-25 15:57:01	→	ProfSimm has joined #haskell
2022-03-25 15:57:17	←	dschrempf has quit (Quit: WeeChat 3.4.1)
2022-03-25 16:00:49	←	haskl has quit (Read error: Connection reset by peer)
2022-03-25 16:00:57	←	merijn has quit (Ping timeout: 240 seconds)
2022-03-25 16:01:38	←	liz has quit (Quit: Lost terminal)
2022-03-25 16:02:56	→	haskl has joined #haskell
2022-03-25 16:04:52	→	mohy has joined #haskell
2022-03-25 16:05:22	→	azimut has joined #haskell
2022-03-25 16:07:00	→	mohy_ has joined #haskell
2022-03-25 16:09:17	←	mohy has quit (Ping timeout: 256 seconds)
2022-03-25 16:10:32	←	mohy_ has quit (Client Quit)
2022-03-25 16:12:31	→	otis^ has joined #haskell
2022-03-25 16:13:37	←	lavaman has quit (Remote host closed the connection)
2022-03-25 16:15:18	→	liz has joined #haskell
2022-03-25 16:16:38	←	yauhsien has quit (Remote host closed the connection)
2022-03-25 16:17:21	→	yauhsien has joined #haskell
2022-03-25 16:28:51	←	liz has quit (Quit: leaving)
2022-03-25 16:30:08	Putonlalla	I'm trying to use this to import types, but it's not working due to `Illegal promoted term variable in a type` errors. https://www.tweag.io/blog/2021-01-07-haskell-dark-arts-part-i/
2022-03-25 16:30:14	→	toulene3 has joined #haskell
2022-03-25 16:30:22	→	benin has joined #haskell
2022-03-25 16:31:19	←	toulene has quit (Ping timeout: 272 seconds)
2022-03-25 16:31:19	ℹ	toulene3 is now known as toulene
2022-03-25 16:32:39	→	zer0bitz has joined #haskell
2022-03-25 16:35:07	←	mon_aaraj has quit (Ping timeout: 272 seconds)
2022-03-25 16:36:14	←	geekosaur has quit (Remote host closed the connection)
2022-03-25 16:36:41	→	mon_aaraj has joined #haskell
2022-03-25 16:37:11	←	zeenk has quit (Quit: Konversation terminated!)
2022-03-25 16:37:33	→	geekosaur has joined #haskell
2022-03-25 16:38:49	→	chomwitt has joined #haskell
2022-03-25 16:40:23	mon_aaraj	i think i'll make a GHCi issue, that feels like the right place 
2022-03-25 16:44:22	→	rkrishnan has joined #haskell
2022-03-25 16:45:17	boxscape	mon_aaraj: you can also try renaming the .ghci file into ~/.config/.ghc/ghci.conf
2022-03-25 16:45:21	←	Typedfern has quit (Ping timeout: 240 seconds)
2022-03-25 16:47:48	←	ProfSimm has quit (Remote host closed the connection)
2022-03-25 16:49:52	mon_aaraj	yep, i have 
2022-03-25 16:50:05	boxscape_	hmm okay
2022-03-25 16:50:07	mon_aaraj	i have tried ~/.config/ghci/ghci.conf as well, and ~/.config/ghci.conf
2022-03-25 16:50:47	boxscape_	I thought .config/.ghci/ghci.conf worked for me, but I think it actually just works because I ln -s'd ~/.ghc to .config/.ghc
2022-03-25 16:53:44	←	benin has quit (Quit: The Lounge - https://thelounge.chat)
2022-03-25 16:53:55	→	razetime has joined #haskell
2022-03-25 16:59:13	→	vglfr has joined #haskell
2022-03-25 17:01:33	→	Typedfern has joined #haskell
2022-03-25 17:06:08	←	mon_aaraj has quit (Ping timeout: 240 seconds)
2022-03-25 17:08:23	→	mon_aaraj has joined #haskell
2022-03-25 17:08:30	←	pavonia has quit (Quit: Bye!)
2022-03-25 17:11:49	→	pagnol has joined #haskell
2022-03-25 17:18:21	→	lavaman has joined #haskell
2022-03-25 17:20:12	→	deadmarshal_ has joined #haskell
2022-03-25 17:20:25	←	yauhsien has quit (Remote host closed the connection)
2022-03-25 17:21:16	→	yauhsien has joined #haskell
2022-03-25 17:26:19	←	yauhsien has quit (Ping timeout: 268 seconds)
2022-03-25 17:27:52	→	yauhsien has joined #haskell
2022-03-25 17:28:09	←	gehmehgeh has quit (Remote host closed the connection)
2022-03-25 17:28:47	←	jgeerds has quit (Ping timeout: 250 seconds)
2022-03-25 17:34:10	←	synthmeat has quit (Quit: WeeChat 3.0)
2022-03-25 17:40:32	→	bahamas has joined #haskell
2022-03-25 17:44:48	←	yauhsien has quit (Remote host closed the connection)
2022-03-25 17:45:15	←	bitdex has quit (Quit: = "")
2022-03-25 17:45:39	→	yauhsien has joined #haskell
2022-03-25 17:51:08	→	synthmeat has joined #haskell
2022-03-25 17:53:49	→	Pickchea has joined #haskell
2022-03-25 17:55:19	←	pagnol has quit (Remote host closed the connection)
2022-03-25 17:57:22	→	merijn has joined #haskell
2022-03-25 18:10:09	→	gurkenglas has joined #haskell
2022-03-25 18:11:44	→	perrierjouet has joined #haskell
2022-03-25 18:11:47	→	p3n_ has joined #haskell
2022-03-25 18:11:47	←	p3n has quit (Read error: Connection reset by peer)
2022-03-25 18:16:13	←	cfricke has quit (Ping timeout: 240 seconds)
2022-03-25 18:19:16	←	tabemann has quit (Remote host closed the connection)
2022-03-25 18:19:28	→	tabemann has joined #haskell
2022-03-25 18:20:45	←	xkuru has quit (Read error: Connection reset by peer)
2022-03-25 18:20:47	←	vglfr has quit (Ping timeout: 260 seconds)
2022-03-25 18:26:05	→	xkuru has joined #haskell
2022-03-25 18:27:44	←	razetime has quit (Ping timeout: 252 seconds)
2022-03-25 18:31:21	←	merijn has quit (Ping timeout: 240 seconds)
2022-03-25 18:34:46	←	gdd has quit (Ping timeout: 268 seconds)
2022-03-25 18:36:11	→	razetime has joined #haskell
2022-03-25 18:36:22	→	gdd has joined #haskell
2022-03-25 18:37:10	→	gabriel_sevecek has joined #haskell
2022-03-25 18:37:31	←	gabriel_sevecek has quit (Client Quit)
2022-03-25 18:38:26	→	vglfr has joined #haskell
2022-03-25 18:38:32	←	yauhsien has quit (Remote host closed the connection)
2022-03-25 18:39:59	→	yauhsien has joined #haskell
2022-03-25 18:41:43	←	p3n_ has quit (Ping timeout: 256 seconds)
2022-03-25 18:42:01	→	p3n has joined #haskell
2022-03-25 18:47:10	←	razetime has quit (Read error: Connection reset by peer)
2022-03-25 18:49:18	→	jgeerds has joined #haskell
2022-03-25 18:53:09	→	gabriel_sevecek has joined #haskell
2022-03-25 18:53:11	←	mon_aaraj has quit (Ping timeout: 272 seconds)
2022-03-25 18:53:12	←	gabriel_sevecek has quit (Client Quit)
2022-03-25 18:53:40	→	gabriel_sevecek has joined #haskell
2022-03-25 18:53:55	←	vysn has quit (Ping timeout: 260 seconds)
2022-03-25 18:54:46	→	mon_aaraj has joined #haskell
2022-03-25 18:56:27	←	vglfr has quit (Ping timeout: 256 seconds)
2022-03-25 18:56:47	←	gabriel_sevecek has quit (Client Quit)
2022-03-25 18:57:37	→	gabriel_sevecek has joined #haskell
2022-03-25 18:57:43	←	gabriel_sevecek has quit (Client Quit)
2022-03-25 18:58:18	→	gabriel_sevecek has joined #haskell
2022-03-25 18:58:36	→	ubert has joined #haskell
2022-03-25 19:00:14	←	geekosaur has quit (Remote host closed the connection)
2022-03-25 19:01:52	→	geekosaur has joined #haskell
2022-03-25 19:02:28	→	ub has joined #haskell
2022-03-25 19:02:41	←	bahamas has quit (Ping timeout: 272 seconds)
2022-03-25 19:02:56	←	ubert has quit (Ping timeout: 252 seconds)
2022-03-25 19:02:56	ℹ	ub is now known as ubert
2022-03-25 19:03:08	→	lainon has joined #haskell
2022-03-25 19:05:01	ℹ	astra is now known as amish
2022-03-25 19:05:22	←	amish has quit (Changing host)
2022-03-25 19:05:22	→	amish has joined #haskell
2022-03-25 19:06:25	ℹ	amish is now known as astra
2022-03-25 19:07:18	→	ProfSimm has joined #haskell
2022-03-25 19:09:19	→	shriekingnoise has joined #haskell
2022-03-25 19:09:22	→	razetime has joined #haskell
2022-03-25 19:10:16	→	ystael has joined #haskell
2022-03-25 19:12:29	←	azimut has quit (Quit: ZNC - https://znc.in)
2022-03-25 19:12:49	→	azimut has joined #haskell
2022-03-25 19:15:59	→	ub has joined #haskell
2022-03-25 19:16:08	←	ubert has quit (Ping timeout: 252 seconds)
2022-03-25 19:16:08	ℹ	ub is now known as ubert
2022-03-25 19:16:59	Midjak	Hi. Is it safe to use cabal and stack on the same system ?
2022-03-25 19:17:10	←	ubert has quit (Client Quit)
2022-03-25 19:17:23	geekosaur	sure, they just can't share packages
2022-03-25 19:18:16	Midjak	ok. So there is no risk to have conflicts , right ?
2022-03-25 19:18:24	geekosaur	right
2022-03-25 19:18:32	Midjak	cool thank you
2022-03-25 19:18:48	maerwald	Midjak: they're enemies... you have to hide them from each other or they try to delete each other
2022-03-25 19:19:04	⚡	maerwald giggles
2022-03-25 19:20:59	Midjak	It's perhaps a silly question . I am not sure how stack and cabale work with dependencies
2022-03-25 19:22:43	maerwald	stack installs into ~/.stack, cabal into ~/.cabal
2022-03-25 19:22:45	→	bahamas has joined #haskell
2022-03-25 19:22:59	Midjak	simple and sure
2022-03-25 19:23:09	maerwald	even when using them on the same project, stack uses .stack-work/ and cabal dist-newstyle/
2022-03-25 19:23:20	maerwald	for project-local artifcats
2022-03-25 19:23:52	maerwald	the only "conflict" can be stacks hpack usage (package.yaml)
2022-03-25 19:24:05	maerwald	make sure to not use any of those
2022-03-25 19:24:13	maerwald	and edit *.cabal directly
2022-03-25 19:24:34	Midjak	what is hpack ?
2022-03-25 19:24:42	maerwald	something that generates *.cabal files
2022-03-25 19:24:45	maerwald	you don't need it
2022-03-25 19:25:00	Midjak	ok
2022-03-25 19:25:20	←	rkrishnan has quit (Ping timeout: 240 seconds)
2022-03-25 19:25:50	Midjak	thank you both
2022-03-25 19:27:43	→	ec has joined #haskell
2022-03-25 19:29:54	←	gabriel_sevecek has quit (Quit: WeeChat 3.4)
2022-03-25 19:32:04	←	mcgroin has quit (Ping timeout: 252 seconds)
2022-03-25 19:37:46	→	stepcut has joined #haskell
2022-03-25 19:38:41	→	Sgeo has joined #haskell
2022-03-25 19:39:28	stepcut	I am using GHC 9.2.1, but this macro does not seem to work, #if __GLASGOW_HASKELL__ >= 921. If I change it to 900 then it works. What am I doing wrong? Is this macro deprecated now?
2022-03-25 19:39:39	←	yauhsien has quit (Remote host closed the connection)
2022-03-25 19:40:17	←	otis^ has quit (Remote host closed the connection)
2022-03-25 19:40:34	stepcut	should I be using 'if MIN_VERSION_ghc(9,2,1)' or something?
2022-03-25 19:41:32	maerwald	stepcut: that would check against the *package* ghc
2022-03-25 19:41:40	stepcut	ah
2022-03-25 19:41:48	byorgey	stepcut: for GHC version x.y.z the value of __GLASGOW_HASKELL__ is  xyy, possibly with a leading zero
2022-03-25 19:41:48	maerwald	did you try >= 902?
2022-03-25 19:41:52	←	wyrd has quit (Ping timeout: 240 seconds)
2022-03-25 19:41:56	byorgey	should be 902 for GHC 9.2.1
2022-03-25 19:42:06	maerwald	https://guide.aelve.com/haskell/cpp-vww0qd72#item-fkuvztqe
2022-03-25 19:42:08	maerwald	yes
2022-03-25 19:42:13	→	yauhsien has joined #haskell
2022-03-25 19:42:42	stepcut	oh
2022-03-25 19:42:43	maerwald	if you're instead relying on base stuff, use MIN_VERSION_base(...)
2022-03-25 19:43:01	→	[itchyjunk] has joined #haskell
2022-03-25 19:43:06	maerwald	byorgey: what happens with ghc 10? :D
2022-03-25 19:43:10	stepcut	I guess I don't know why it is 902, but if that is right, that is fine
2022-03-25 19:43:29	byorgey	maerwald: logically, according to this specification, there can never be a GHC 10
2022-03-25 19:43:33	→	eggplantade has joined #haskell
2022-03-25 19:43:36	byorgey	GHC version numbers will asymptotically approach 10
2022-03-25 19:43:54	→	wyrd has joined #haskell
2022-03-25 19:44:00	stepcut	maerwald: hmm.. perhaps I should be checking against base. I need some conditional code for dealing with the internal changes to Word8/Word16/Word32/Int8/Int16/Int32 types
2022-03-25 19:44:38	maerwald	stepcut: `ghcup list` shows you base versions
2022-03-25 19:44:55	maerwald	or use https://gitlab.haskell.org/ghc/ghc/-/wikis/working-conventions/boot-libraries
2022-03-25 19:45:25	→	mikoto-chan has joined #haskell
2022-03-25 19:47:32	←	yauhsien has quit (Ping timeout: 268 seconds)
2022-03-25 19:48:17	←	eggplantade has quit (Ping timeout: 272 seconds)
2022-03-25 19:52:27	stepcut	maerwald: I guess I am unclear in this case if checking the version of GHC or the version of base would be better since the internal representation of Int?/Word? required the addition of new primitives to GHC. It is more than just needing a new base -- you also need the newer GHC -- though you can't get one without the other
2022-03-25 19:57:26	←	califax has quit (Remote host closed the connection)
2022-03-25 20:00:00	→	Guest91 has joined #haskell
2022-03-25 20:00:51	←	m5zs7k has quit (Read error: Connection reset by peer)
2022-03-25 20:01:02	→	m5zs7k_ has joined #haskell
2022-03-25 20:01:30	ℹ	m5zs7k_ is now known as m5zs7k
2022-03-25 20:01:44	→	on^ has joined #haskell
2022-03-25 20:04:31	←	n3t has quit (Ping timeout: 252 seconds)
2022-03-25 20:04:56	boxscape	version 10 doesn't seem ambiguous as long as it uses 4 digits
2022-03-25 20:05:23	ℹ	Guest91 is now known as bruceLi
2022-03-25 20:05:25	boxscape	or wait
2022-03-25 20:05:30	boxscape	is 9021 also valid?
2022-03-25 20:05:31	←	bruceLi has quit (Quit: Ping timeout (120 seconds))
2022-03-25 20:06:09	→	n3t has joined #haskell
2022-03-25 20:06:13	→	Guest91 has joined #haskell
2022-03-25 20:07:04	boxscape	since it's just comparing integers, that shouldn't be valid, so I rest my case
2022-03-25 20:08:08	←	gurkenglas has quit (Ping timeout: 240 seconds)
2022-03-25 20:10:28	maerwald[m]	stepcut: if you're dealing with Haskell imports, it's probably base
2022-03-25 20:11:34	→	gurkenglas has joined #haskell
2022-03-25 20:12:57	stepcut	maerwald: that seems somewhat sensible. I guess if JHC suddenly got a lot of development, then what I would care about is the version of base where this change happened
2022-03-25 20:12:58	←	Guest91 has quit (Ping timeout: 256 seconds)
2022-03-25 20:13:05	stepcut	rather than the compiler version
2022-03-25 20:13:21	maerwald[m]	Checking against ghc version would only make sense to guard against primops bugs, for example 
2022-03-25 20:13:40	maerwald[m]	And there are some
2022-03-25 20:14:59	→	Guest91 has joined #haskell
2022-03-25 20:14:59	←	hololeap has quit (Remote host closed the connection)
2022-03-25 20:16:03	←	bahamas has quit (Ping timeout: 250 seconds)
2022-03-25 20:16:25	→	hololeap has joined #haskell
2022-03-25 20:17:32	ℹ	irc: disconnected from server
2022-04-14 20:21:16	→	oxide has joined #haskell
2022-04-14 20:21:16	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-14 20:21:16	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-14 20:21:16	ℹ	Channel #haskell: 710 nicks (1 op, 0 voices, 709 normals)
2022-04-14 20:21:16	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-14 20:21:16	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-14 20:21:55	→	rawley has joined #haskell
2022-04-14 20:22:54	←	Pickchea has quit (Quit: Leaving)
2022-04-14 20:26:15	←	gentauro has quit (Read error: Connection reset by peer)
2022-04-14 20:29:11	→	tromp has joined #haskell
2022-04-14 20:29:37	←	tromp has quit (Client Quit)
2022-04-14 20:30:05	→	yauhsien has joined #haskell
2022-04-14 20:32:08	→	gentauro has joined #haskell
2022-04-14 20:32:40	→	notzmv has joined #haskell
2022-04-14 20:34:24	←	z0k has quit (Quit: WeeChat 3.4.1)
2022-04-14 20:34:47	←	yauhsien has quit (Ping timeout: 272 seconds)
2022-04-14 20:36:11	→	ishaan has joined #haskell
2022-04-14 20:42:51	→	sprout has joined #haskell
2022-04-14 20:44:37	←	jinsun has quit (Read error: Connection reset by peer)
2022-04-14 20:44:41	→	tromp has joined #haskell
2022-04-14 20:45:02	→	tmo24 has joined #haskell
2022-04-14 20:46:09	←	sprout_ has quit (Ping timeout: 248 seconds)
2022-04-14 20:55:00	→	jinsun has joined #haskell
2022-04-14 20:57:54	←	tmo24 has quit (Remote host closed the connection)
2022-04-14 20:58:11	→	tmo24 has joined #haskell
2022-04-14 21:01:56	←	tmo24 has quit (Remote host closed the connection)
2022-04-14 21:02:01	←	chele has quit (Remote host closed the connection)
2022-04-14 21:02:13	→	tmo24 has joined #haskell
2022-04-14 21:07:49	ℹ	pranshukhandal is now known as ghost1999
2022-04-14 21:09:30	→	Guest92 has joined #haskell
2022-04-14 21:11:52	←	pavonia has quit (Quit: Bye!)
2022-04-14 21:12:02	carbolymer	fockerized: you can also use upx to compress your binary
2022-04-14 21:12:56	→	tzh has joined #haskell
2022-04-14 21:13:08	←	mastarija has quit (Quit: Leaving)
2022-04-14 21:13:22	→	gurkenglas has joined #haskell
2022-04-14 21:14:22	→	lbseale has joined #haskell
2022-04-14 21:14:23	geekosaur	dynamic will reduce it by quite a lot, ghc's default is to use static which makes for more self-contained but significantly larger binaries
2022-04-14 21:14:30	←	Guest92 has quit (Quit: Client closed)
2022-04-14 21:15:11	geekosaur	if you use dynamic you have to make sure the exact versions of the shared objects are available (and I think there are location restrictions as well)
2022-04-14 21:17:49	←	lbseale has quit (Read error: Connection reset by peer)
2022-04-14 21:18:36	←	ubert has quit (Remote host closed the connection)
2022-04-14 21:18:54	→	ubert has joined #haskell
2022-04-14 21:19:00	←	alp_ has quit (Ping timeout: 260 seconds)
2022-04-14 21:20:48	←	cdman has quit (Ping timeout: 248 seconds)
2022-04-14 21:25:27	→	eggplantade has joined #haskell
2022-04-14 21:30:12	→	Hanicef has joined #haskell
2022-04-14 21:30:12	←	Hanicef has quit (Client Quit)
2022-04-14 21:31:52	←	tmo24 has quit (Remote host closed the connection)
2022-04-14 21:32:05	→	Hanicef has joined #haskell
2022-04-14 21:32:09	→	tmo24 has joined #haskell
2022-04-14 21:32:14	←	ccntrq has quit (Quit: ccntrq)
2022-04-14 21:33:14	←	pretty_dumm_guy has quit (Quit: WeeChat 3.5)
2022-04-14 21:35:14	→	pretty_dumm_guy has joined #haskell
2022-04-14 21:38:45	←	jgeerds has quit (Ping timeout: 272 seconds)
2022-04-14 21:39:44	←	ishaan has quit (Quit: Ping timeout (120 seconds))
2022-04-14 21:46:04	←	CiaoSen has quit (Ping timeout: 260 seconds)
2022-04-14 21:48:54	←	xff0x has quit (Read error: Connection reset by peer)
2022-04-14 21:52:32	→	pretty_d1 has joined #haskell
2022-04-14 21:52:44	←	pretty_d1 has quit (Client Quit)
2022-04-14 21:52:45	←	ghost1999 has quit (Quit: the lounge - https://webirc.envs.net)
2022-04-14 21:54:24	←	pretty_dumm_guy has quit (Ping timeout: 248 seconds)
2022-04-14 21:57:24	←	tmo24 has quit (Remote host closed the connection)
2022-04-14 21:57:27	→	axeman has joined #haskell
2022-04-14 21:57:41	→	tmo24 has joined #haskell
2022-04-14 21:59:14	→	benin has joined #haskell
2022-04-14 22:01:18	←	tmo24 has quit (Remote host closed the connection)
2022-04-14 22:01:35	→	tmo24 has joined #haskell
2022-04-14 22:05:28	←	tmo24 has quit (Remote host closed the connection)
2022-04-14 22:05:46	→	tmo24 has joined #haskell
2022-04-14 22:08:16	→	ishaan has joined #haskell
2022-04-14 22:09:57	←	rawley has quit (Ping timeout: 246 seconds)
2022-04-14 22:14:05	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-14 22:14:36	→	Vajb has joined #haskell
2022-04-14 22:17:03	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-14 22:17:07	←	eggplantade has quit (Remote host closed the connection)
2022-04-14 22:17:26	→	eggplantade has joined #haskell
2022-04-14 22:17:53	←	axeman has quit (Ping timeout: 248 seconds)
2022-04-14 22:18:11	→	Vajb has joined #haskell
2022-04-14 22:19:08	→	alp_ has joined #haskell
2022-04-14 22:24:42	←	tmo24 has quit (Remote host closed the connection)
2022-04-14 22:24:59	→	tmo24 has joined #haskell
2022-04-14 22:26:47	←	tmo24 has quit (Remote host closed the connection)
2022-04-14 22:27:04	→	tmo24 has joined #haskell
2022-04-14 22:27:59	←	vicfred has quit (Quit: Leaving)
2022-04-14 22:28:20	←	cheater has quit (Read error: Connection reset by peer)
2022-04-14 22:29:09	→	cheater has joined #haskell
2022-04-14 22:39:26	←	tmo24 has quit (Remote host closed the connection)
2022-04-14 22:39:46	→	tmo24 has joined #haskell
2022-04-14 22:42:22	←	Codaraxis has quit (Read error: Connection reset by peer)
2022-04-14 22:44:02	←	tmo24 has quit (Remote host closed the connection)
2022-04-14 22:44:19	→	tmo24 has joined #haskell
2022-04-14 22:44:57	←	statusbot3 has quit (Remote host closed the connection)
2022-04-14 22:45:11	→	statusbot has joined #haskell
2022-04-14 22:47:20	→	wroathe has joined #haskell
2022-04-14 22:47:20	←	wroathe has quit (Changing host)
2022-04-14 22:47:20	→	wroathe has joined #haskell
2022-04-14 22:49:06	←	Hanicef has quit (Quit: leaving)
2022-04-14 22:51:20	→	_ht has joined #haskell
2022-04-14 22:52:14	→	Guest31 has joined #haskell
2022-04-14 22:56:10	←	a1paca has quit (Ping timeout: 246 seconds)
2022-04-14 22:56:10	←	zachel has quit (Ping timeout: 246 seconds)
2022-04-14 22:56:10	←	Trattue has quit (Ping timeout: 246 seconds)
2022-04-14 22:56:31	←	mniip has quit (Ping timeout: 246 seconds)
2022-04-14 22:56:31	←	ptrcmd has quit (Ping timeout: 246 seconds)
2022-04-14 22:56:51	←	wroathe has quit (Ping timeout: 246 seconds)
2022-04-14 22:56:51	←	eggplantade has quit (Ping timeout: 246 seconds)
2022-04-14 22:56:52	←	zyklotomic has quit (Ping timeout: 246 seconds)
2022-04-14 22:56:52	←	janus has quit (Ping timeout: 246 seconds)
2022-04-14 22:56:52	←	asm has quit (Ping timeout: 246 seconds)
2022-04-14 22:56:52	←	lemonsnicks has quit (Ping timeout: 246 seconds)
2022-04-14 22:56:52	←	belphegor666 has quit (Ping timeout: 246 seconds)
2022-04-14 22:56:52	←	Cheery has quit (Ping timeout: 246 seconds)
2022-04-14 22:57:12	←	Maxdamantus has quit (Ping timeout: 246 seconds)
2022-04-14 22:57:12	←	JimL has quit (Ping timeout: 246 seconds)
2022-04-14 22:57:12	←	drewr has quit (Ping timeout: 246 seconds)
2022-04-14 22:57:12	←	simeon has quit (Ping timeout: 246 seconds)
2022-04-14 22:57:12	←	sweater has quit (Ping timeout: 246 seconds)
2022-04-14 22:57:13	←	Athas has quit (Ping timeout: 246 seconds)
2022-04-14 22:57:13	←	sudden has quit (Ping timeout: 246 seconds)
2022-04-14 22:57:13	←	APic has quit (Ping timeout: 246 seconds)
2022-04-14 22:57:13	←	bah has quit (Ping timeout: 246 seconds)
2022-04-14 22:57:13	←	stilgart has quit (Ping timeout: 246 seconds)
2022-04-14 22:57:13	←	lyxia has quit (Ping timeout: 246 seconds)
2022-04-14 22:57:33	←	_ht has quit (Ping timeout: 246 seconds)
2022-04-14 22:57:33	←	jinsun has quit (Ping timeout: 246 seconds)
2022-04-14 22:57:33	←	toulene has quit (Ping timeout: 246 seconds)
2022-04-14 22:57:33	←	tomku has quit (Ping timeout: 246 seconds)
2022-04-14 22:57:33	←	Putonlalla has quit (Ping timeout: 246 seconds)
2022-04-14 22:57:34	←	gabriel_sevecek has quit (Ping timeout: 246 seconds)
2022-04-14 22:57:34	←	opqdonut has quit (Ping timeout: 246 seconds)
2022-04-14 22:57:34	←	Zemyla has quit (Ping timeout: 246 seconds)
2022-04-14 22:57:34	←	hyiltiz has quit (Ping timeout: 246 seconds)
2022-04-14 22:57:46	→	JimL has joined #haskell
2022-04-14 23:03:51	←	glguy has quit (*.net *.split)
2022-04-14 23:03:51	←	Vajb has quit (*.net *.split)
2022-04-14 23:03:51	←	jao has quit (*.net *.split)
2022-04-14 23:03:51	←	Sgeo has quit (*.net *.split)
2022-04-14 23:03:52	←	Andrew has quit (*.net *.split)
2022-04-14 23:03:52	←	jackson99 has quit (*.net *.split)
2022-04-14 23:03:52	←	AlexNoo has quit (*.net *.split)
2022-04-14 23:03:52	←	iteratee_ has quit (*.net *.split)
2022-04-14 23:03:52	←	hueso has quit (*.net *.split)
2022-04-14 23:03:52	←	machinedgod has quit (*.net *.split)
2022-04-14 23:03:52	←	fockerized has quit (*.net *.split)
2022-04-14 23:03:52	←	kilolympus has quit (*.net *.split)
2022-04-14 23:03:52	←	raym has quit (*.net *.split)
2022-04-14 23:03:52	←	mbuf has quit (*.net *.split)
2022-04-14 23:03:52	←	cyphase has quit (*.net *.split)
2022-04-14 23:03:52	←	Lord_of_Life has quit (*.net *.split)
2022-04-14 23:03:52	←	_________ has quit (*.net *.split)
2022-04-14 23:03:52	←	shriekingnoise has quit (*.net *.split)
2022-04-14 23:03:52	←	Natch has quit (*.net *.split)
2022-04-14 23:03:52	←	kmein has quit (*.net *.split)
2022-04-14 23:03:52	←	benin has quit (*.net *.split)
2022-04-14 23:03:52	←	tromp has quit (*.net *.split)
2022-04-14 23:03:52	←	motherfsck has quit (*.net *.split)
2022-04-14 23:03:52	←	waleee has quit (*.net *.split)
2022-04-14 23:03:52	←	fendor has quit (*.net *.split)
2022-04-14 23:03:52	←	robosexual has quit (*.net *.split)
2022-04-14 23:03:52	←	TheCoffeMaker has quit (*.net *.split)
2022-04-14 23:03:52	←	AlexZenon has quit (*.net *.split)
2022-04-14 23:03:52	←	albet70 has quit (*.net *.split)
2022-04-14 23:03:52	←	perrierjouet has quit (*.net *.split)
2022-04-14 23:03:52	←	immae has quit (*.net *.split)
2022-04-14 23:03:52	←	hpc has quit (*.net *.split)
2022-04-14 23:03:52	←	lambdabot has quit (*.net *.split)
2022-04-14 23:03:52	←	bliminse has quit (*.net *.split)
2022-04-14 23:03:52	←	swistak has quit (*.net *.split)
2022-04-14 23:03:52	←	zmt01 has quit (*.net *.split)
2022-04-14 23:03:52	←	son0p has quit (*.net *.split)
2022-04-14 23:03:52	←	biberu has quit (*.net *.split)
2022-04-14 23:03:52	←	sammelweis has quit (*.net *.split)
2022-04-14 23:03:52	←	juri_ has quit (*.net *.split)
2022-04-14 23:03:52	←	averell has quit (*.net *.split)
2022-04-14 23:03:52	←	kritzefitz has quit (*.net *.split)
2022-04-14 23:03:52	←	synthmeat has quit (*.net *.split)
2022-04-14 23:03:52	←	obviyus has quit (*.net *.split)
2022-04-14 23:03:52	←	newhoggy has quit (*.net *.split)
2022-04-14 23:03:52	←	bw has quit (*.net *.split)
2022-04-14 23:03:52	←	JSharp has quit (*.net *.split)
2022-04-14 23:03:52	←	sunarch has quit (*.net *.split)
2022-04-14 23:03:52	←	Cale has quit (*.net *.split)
2022-04-14 23:03:52	←	dka has quit (*.net *.split)
2022-04-14 23:03:52	←	hongminhee has quit (*.net *.split)
2022-04-14 23:03:52	←	davetapley has quit (*.net *.split)
2022-04-14 23:03:52	←	Boarders_ has quit (*.net *.split)
2022-04-14 23:03:52	←	grfn has quit (*.net *.split)
2022-04-14 23:03:52	←	heath has quit (*.net *.split)
2022-04-14 23:03:52	←	Hafydd has quit (*.net *.split)
2022-04-14 23:03:52	←	cjay has quit (*.net *.split)
2022-04-14 23:03:52	←	whez has quit (*.net *.split)
2022-04-14 23:03:52	←	wallymathieu has quit (*.net *.split)
2022-04-14 23:03:52	←	Xe has quit (*.net *.split)
2022-04-14 23:03:52	←	jocke-l has quit (*.net *.split)
2022-04-14 23:03:52	←	sa has quit (*.net *.split)
2022-04-14 23:03:52	←	agander_m has quit (*.net *.split)
2022-04-14 23:03:52	←	LambdaDuck has quit (*.net *.split)
2022-04-14 23:03:52	←	phma has quit (*.net *.split)
2022-04-14 23:03:52	←	gabiruh has quit (*.net *.split)
2022-04-14 23:03:52	←	[itchyjunk] has quit (*.net *.split)
2022-04-14 23:03:52	←	vysn has quit (*.net *.split)
2022-04-14 23:03:52	←	andrey_ has quit (*.net *.split)
2022-04-14 23:03:52	←	[_________] has quit (*.net *.split)
2022-04-14 23:03:52	←	lagash has quit (*.net *.split)
2022-04-14 23:03:52	←	christiaanb has quit (*.net *.split)
2022-04-14 23:03:52	←	sa1 has quit (*.net *.split)
2022-04-14 23:03:52	←	kevinsjoberg has quit (*.net *.split)
2022-04-14 23:03:52	←	bjs has quit (*.net *.split)
2022-04-14 23:03:52	←	cbarrett has quit (*.net *.split)
2022-04-14 23:03:52	←	pepeiborra has quit (*.net *.split)
2022-04-14 23:03:52	←	Pent has quit (*.net *.split)
2022-04-14 23:03:52	←	joel135 has quit (*.net *.split)
2022-04-14 23:03:52	←	jakesyl__ has quit (*.net *.split)
2022-04-14 23:03:52	←	vito has quit (*.net *.split)
2022-04-14 23:03:52	←	mcfilib has quit (*.net *.split)
2022-04-14 23:03:52	←	nisstyre has quit (*.net *.split)
2022-04-14 23:03:52	←	lieven has quit (*.net *.split)
2022-04-14 23:03:52	←	lightandlight has quit (*.net *.split)
2022-04-14 23:03:52	←	SrPx has quit (*.net *.split)
2022-04-14 23:03:52	←	idnar has quit (*.net *.split)
2022-04-14 23:03:52	←	NiKaN has quit (*.net *.split)
2022-04-14 23:03:52	←	bonz060 has quit (*.net *.split)
2022-04-14 23:03:52	←	Taneb has quit (*.net *.split)
2022-04-14 23:03:52	←	ggVGc has quit (*.net *.split)
2022-04-14 23:03:52	←	jmct has quit (*.net *.split)
2022-04-14 23:03:52	←	aeka has quit (*.net *.split)
2022-04-14 23:03:52	←	o has quit (*.net *.split)
2022-04-14 23:03:52	←	dcoutts_ has quit (*.net *.split)
2022-04-14 23:03:52	←	dfordivam1 has quit (*.net *.split)
2022-04-14 23:03:52	←	wrengr has quit (*.net *.split)
2022-04-14 23:03:52	←	earthy has quit (*.net *.split)
2022-04-14 23:03:52	←	leah2 has quit (*.net *.split)
2022-04-14 23:03:52	←	sphynx has quit (*.net *.split)
2022-04-14 23:03:52	←	Me-me has quit (*.net *.split)
2022-04-14 23:03:52	←	p3n has quit (*.net *.split)
2022-04-14 23:03:52	←	alinab has quit (*.net *.split)
2022-04-14 23:03:52	←	Dykam has quit (*.net *.split)
2022-04-14 23:03:53	←	madnight has quit (*.net *.split)
2022-04-14 23:03:53	←	sajith has quit (*.net *.split)
2022-04-14 23:03:53	←	crameleon has quit (*.net *.split)
2022-04-14 23:03:53	←	dexter has quit (*.net *.split)
2022-04-14 23:03:53	←	aweinstock has quit (*.net *.split)
2022-04-14 23:03:53	←	bcoppens has quit (*.net *.split)
2022-04-14 23:03:53	←	xdej has quit (*.net *.split)
2022-04-14 23:03:53	←	x88x88x has quit (*.net *.split)
2022-04-14 23:03:53	←	yaroot has quit (*.net *.split)
2022-04-14 23:03:53	←	dispater has quit (*.net *.split)
2022-04-14 23:03:53	←	kjak has quit (*.net *.split)
2022-04-14 23:03:53	←	megaTherion has quit (*.net *.split)
2022-04-14 23:03:53	←	integral has quit (*.net *.split)
2022-04-14 23:03:53	←	tinwood has quit (*.net *.split)
2022-04-14 23:03:53	←	monochrom has quit (*.net *.split)
2022-04-14 23:03:53	←	dunj3 has quit (*.net *.split)
2022-04-14 23:03:53	←	eldritch has quit (*.net *.split)
2022-04-14 23:03:53	←	anderson has quit (*.net *.split)
2022-04-14 23:03:53	←	ysh has quit (*.net *.split)
2022-04-14 23:03:53	←	Moyst_ has quit (*.net *.split)
2022-04-14 23:03:53	←	Philonous has quit (*.net *.split)
2022-04-14 23:03:53	←	thaumavorio has quit (*.net *.split)
2022-04-14 23:03:53	←	joeyh has quit (*.net *.split)
2022-04-14 23:03:53	←	c_wraith has quit (*.net *.split)
2022-04-14 23:03:53	←	hiredman has quit (*.net *.split)
2022-04-14 23:03:53	←	Axman6 has quit (*.net *.split)
2022-04-14 23:03:53	←	aria has quit (*.net *.split)
2022-04-14 23:03:53	←	systemfault has quit (*.net *.split)
2022-04-14 23:03:53	←	Raito_Bezarius has quit (*.net *.split)
2022-04-14 23:03:53	←	mtjm has quit (*.net *.split)
2022-04-14 23:03:53	←	T_S_ has quit (*.net *.split)
2022-04-14 23:03:53	←	caasih has quit (*.net *.split)
2022-04-14 23:03:53	←	SethTisue has quit (*.net *.split)
2022-04-14 23:03:53	←	AndreasK has quit (*.net *.split)
2022-04-14 23:03:53	←	vjoki has quit (*.net *.split)
2022-04-14 23:03:53	←	peutri has quit (*.net *.split)
2022-04-14 23:03:53	←	beaky has quit (*.net *.split)
2022-04-14 23:03:53	←	bbhoss has quit (*.net *.split)
2022-04-14 23:03:53	←	aristid has quit (*.net *.split)
2022-04-14 23:03:53	←	acertain has quit (*.net *.split)
2022-04-14 23:03:53	←	ProofTechnique has quit (*.net *.split)
2022-04-14 23:03:53	←	nshepperd2 has quit (*.net *.split)
2022-04-14 23:03:53	←	mrianbloom has quit (*.net *.split)
2022-04-14 23:03:53	←	teehemkay_ has quit (*.net *.split)
2022-04-14 23:03:53	←	taktoa[c] has quit (*.net *.split)
2022-04-14 23:03:53	←	hays has quit (*.net *.split)
2022-04-14 23:03:53	←	landonf has quit (*.net *.split)
2022-04-14 23:03:53	←	PHO` has quit (*.net *.split)
2022-04-14 23:03:53	←	greenbourne277 has quit (*.net *.split)
2022-04-14 23:03:53	←	bastelfreak has quit (*.net *.split)
2022-04-14 23:03:53	←	s4msung has quit (*.net *.split)
2022-04-14 23:03:53	←	kvakil has quit (*.net *.split)
2022-04-14 23:03:53	←	ymherklotz has quit (*.net *.split)
2022-04-14 23:03:53	←	burakcank has quit (*.net *.split)
2022-04-14 23:03:53	←	nonzen_ has quit (*.net *.split)
2022-04-14 23:03:53	←	_\_ has quit (*.net *.split)
2022-04-14 23:03:53	←	Logio_ has quit (*.net *.split)
2022-04-14 23:03:53	←	drdo has quit (*.net *.split)
2022-04-14 23:03:53	←	nshepperd has quit (*.net *.split)
2022-04-14 23:03:53	←	edr has quit (*.net *.split)
2022-04-14 23:03:53	←	kst has quit (*.net *.split)
2022-04-14 23:03:53	←	kraftwerk28 has quit (*.net *.split)
2022-04-14 23:03:53	←	arkeet has quit (*.net *.split)
2022-04-14 23:03:53	←	incertia has quit (*.net *.split)
2022-04-14 23:03:53	←	glowcoil has quit (*.net *.split)
2022-04-14 23:03:53	←	tchakka has quit (*.net *.split)
2022-04-14 23:03:53	←	Ankhers has quit (*.net *.split)
2022-04-14 23:03:53	←	jleightcap has quit (*.net *.split)
2022-04-14 23:03:53	←	pranaysashank has quit (*.net *.split)
2022-04-14 23:03:53	←	raghavgururajan has quit (*.net *.split)
2022-04-14 23:03:53	←	sm2n has quit (*.net *.split)
2022-04-14 23:03:53	←	evanrelf has quit (*.net *.split)
2022-04-14 23:03:53	←	jkoshy has quit (*.net *.split)
2022-04-14 23:03:53	←	tdmm has quit (*.net *.split)
2022-04-14 23:03:53	←	shreyasminocha has quit (*.net *.split)
2022-04-14 23:03:53	←	jakzale has quit (*.net *.split)
2022-04-14 23:03:53	←	fluffyballoon has quit (*.net *.split)
2022-04-14 23:03:53	←	dawdler has quit (*.net *.split)
2022-04-14 23:03:53	←	samhh has quit (*.net *.split)
2022-04-14 23:03:53	←	bsima1 has quit (*.net *.split)
2022-04-14 23:03:53	←	lukec has quit (*.net *.split)
2022-04-14 23:03:53	←	filwisher has quit (*.net *.split)
2022-04-14 23:03:53	←	flukiluke has quit (*.net *.split)
2022-04-14 23:03:53	←	NemesisD has quit (*.net *.split)
2022-04-14 23:03:53	←	degraafk has quit (*.net *.split)
2022-04-14 23:03:53	←	saolsen has quit (*.net *.split)
2022-04-14 23:03:53	←	tnks has quit (*.net *.split)
2022-04-14 23:03:53	←	gregberns__ has quit (*.net *.split)
2022-04-14 23:03:53	←	xacktm has quit (*.net *.split)
2022-04-14 23:03:53	←	bjobjo has quit (*.net *.split)
2022-04-14 23:03:53	←	thebnq has quit (*.net *.split)
2022-04-14 23:03:53	←	jeffz has quit (*.net *.split)
2022-04-14 23:03:53	←	Hecate has quit (*.net *.split)
2022-04-14 23:03:53	←	myme has quit (*.net *.split)
2022-04-14 23:03:53	←	bbear has quit (*.net *.split)
2022-04-14 23:03:53	←	emergence has quit (*.net *.split)
2022-04-14 23:03:53	←	raoul has quit (*.net *.split)
2022-04-14 23:03:53	←	ChanServ has quit (*.net *.split)
2022-04-14 23:03:53	←	litharge has quit (*.net *.split)
2022-04-14 23:03:53	←	tzh has quit (*.net *.split)
2022-04-14 23:03:53	←	jespada has quit (*.net *.split)
2022-04-14 23:03:53	←	coot has quit (*.net *.split)
2022-04-14 23:03:53	←	bontaq has quit (*.net *.split)
2022-04-14 23:03:53	←	zaquest has quit (*.net *.split)
2022-04-14 23:03:53	←	mikoto-chan has quit (*.net *.split)
2022-04-14 23:03:53	←	mmhat has quit (*.net *.split)
2022-04-14 23:03:54	←	Techcable has quit (*.net *.split)
2022-04-14 23:03:54	←	fjmorazan has quit (*.net *.split)
2022-04-14 23:03:54	←	m1dnight has quit (*.net *.split)
2022-04-14 23:03:54	←	jonathanx has quit (*.net *.split)
2022-04-14 23:03:54	←	matijja has quit (*.net *.split)
2022-04-14 23:03:54	←	elkcl has quit (*.net *.split)
2022-04-14 23:03:54	←	euandreh has quit (*.net *.split)
2022-04-14 23:03:54	←	ix has quit (*.net *.split)
2022-04-14 23:03:54	←	ephemient has quit (*.net *.split)
2022-04-14 23:03:54	←	scav has quit (*.net *.split)
2022-04-14 23:03:54	←	_0x47_ has quit (*.net *.split)
2022-04-14 23:03:54	←	Adeon has quit (*.net *.split)
2022-04-14 23:03:54	←	kristjansson has quit (*.net *.split)
2022-04-14 23:03:54	←	ircbrowse_tom has quit (*.net *.split)
2022-04-14 23:03:54	←	tito has quit (*.net *.split)
2022-04-14 23:03:54	←	drlkf has quit (*.net *.split)
2022-04-14 23:03:54	←	ystael has quit (*.net *.split)
2022-04-14 23:03:54	←	travisb_ has quit (*.net *.split)
2022-04-14 23:03:54	←	neverwas has quit (*.net *.split)
2022-04-14 23:03:54	←	statusbot has quit (*.net *.split)
2022-04-14 23:03:54	←	ubert has quit (*.net *.split)
2022-04-14 23:03:54	←	gurkenglas has quit (*.net *.split)
2022-04-14 23:03:54	←	raehik has quit (*.net *.split)
2022-04-14 23:03:54	←	epolanski has quit (*.net *.split)
2022-04-14 23:03:54	←	deadmarshal_ has quit (*.net *.split)
2022-04-14 23:03:54	←	michalz has quit (*.net *.split)
2022-04-14 23:03:54	←	dhouthoo has quit (*.net *.split)
2022-04-14 23:03:54	←	m5zs7k has quit (*.net *.split)
2022-04-14 23:03:54	←	xsarnik has quit (*.net *.split)
2022-04-14 23:03:54	←	justache has quit (*.net *.split)
2022-04-14 23:03:54	←	geekosaur has quit (*.net *.split)
2022-04-14 23:03:54	←	cosimone has quit (*.net *.split)
2022-04-14 23:03:54	←	qwedfg has quit (*.net *.split)
2022-04-14 23:03:54	←	awpr has quit (*.net *.split)
2022-04-14 23:03:54	←	erisco has quit (*.net *.split)
2022-04-14 23:03:54	←	ridcully has quit (*.net *.split)
2022-04-14 23:03:54	←	rembo10 has quit (*.net *.split)
2022-04-14 23:03:54	←	shachaf has quit (*.net *.split)
2022-04-14 23:03:54	←	sus has quit (*.net *.split)
2022-04-14 23:03:54	←	teehemkay has quit (*.net *.split)
2022-04-14 23:03:54	←	elvishjerricco has quit (*.net *.split)
2022-04-14 23:03:54	←	PotatoGim has quit (*.net *.split)
2022-04-14 23:03:54	←	jackdk has quit (*.net *.split)
2022-04-14 23:03:54	←	hamishmack_ has quit (*.net *.split)
2022-04-14 23:03:54	←	werneta has quit (*.net *.split)
2022-04-14 23:03:54	←	djanatyn has quit (*.net *.split)
2022-04-14 23:03:54	←	mzan has quit (*.net *.split)
2022-04-14 23:03:54	←	alp_ has quit (*.net *.split)
2022-04-14 23:03:54	←	notzmv has quit (*.net *.split)
2022-04-14 23:03:54	←	tomsmeding has quit (*.net *.split)
2022-04-14 23:03:54	←	terrorjack has quit (*.net *.split)
2022-04-14 23:03:54	←	oats has quit (*.net *.split)
2022-04-14 23:03:54	←	Flow has quit (*.net *.split)
2022-04-14 23:03:54	←	ManofLetters[m] has quit (*.net *.split)
2022-04-14 23:03:54	←	reza[m] has quit (*.net *.split)
2022-04-14 23:03:54	←	peddie has quit (*.net *.split)
2022-04-14 23:03:54	←	icebreaker has quit (*.net *.split)
2022-04-14 23:03:54	←	zero has quit (*.net *.split)
2022-04-14 23:03:54	←	orcus has quit (*.net *.split)
2022-04-14 23:03:54	←	hgolden has quit (*.net *.split)
2022-04-14 23:03:54	←	acro has quit (*.net *.split)
2022-04-14 23:03:54	←	dminuoso has quit (*.net *.split)
2022-04-14 23:03:54	←	ehammarstrom has quit (*.net *.split)
2022-04-14 23:03:54	←	bgamari has quit (*.net *.split)
2022-04-14 23:03:54	←	defanor has quit (*.net *.split)
2022-04-14 23:03:54	←	cods has quit (*.net *.split)
2022-04-14 23:03:54	←	dixie has quit (*.net *.split)
2022-04-14 23:03:54	←	shailangsa has quit (*.net *.split)
2022-04-14 23:03:54	←	ellie has quit (*.net *.split)
2022-04-14 23:03:54	←	AWizzArd has quit (*.net *.split)
2022-04-14 23:03:54	←	feliix42 has quit (*.net *.split)
2022-04-14 23:03:54	←	Ram-Z has quit (*.net *.split)
2022-04-14 23:03:54	←	quintasan has quit (*.net *.split)
2022-04-14 23:03:54	←	grgz has quit (*.net *.split)
2022-04-14 23:03:54	←	lisq has quit (*.net *.split)
2022-04-14 23:03:54	←	siers has quit (*.net *.split)
2022-04-14 23:03:54	←	davl has quit (*.net *.split)
2022-04-14 23:03:54	←	fryguybob has quit (*.net *.split)
2022-04-14 23:03:54	←	sayola1 has quit (*.net *.split)
2022-04-14 23:03:54	←	ario has quit (*.net *.split)
2022-04-14 23:03:54	←	simpleauthority has quit (*.net *.split)
2022-04-14 23:03:54	←	dfg has quit (*.net *.split)
2022-04-14 23:03:54	←	haritz has quit (*.net *.split)
2022-04-14 23:03:54	←	Goodbye_Vincent has quit (*.net *.split)
2022-04-14 23:03:54	←	wz1000 has quit (*.net *.split)
2022-04-14 23:03:54	←	kawen has quit (*.net *.split)
2022-04-14 23:03:54	←	exarkun has quit (*.net *.split)
2022-04-14 23:03:54	←	red-snail has quit (*.net *.split)
2022-04-14 23:03:54	←	WhateverRabbit has quit (*.net *.split)
2022-04-14 23:03:54	←	Noinia has quit (*.net *.split)
2022-04-14 23:03:54	←	SoF has quit (*.net *.split)
2022-04-14 23:03:55	←	ft has quit (*.net *.split)
2022-04-14 23:03:55	←	drewolson has quit (*.net *.split)
2022-04-14 23:03:55	←	sprout has quit (*.net *.split)
2022-04-14 23:03:55	←	natto has quit (*.net *.split)
2022-04-14 23:03:55	←	FragByte has quit (*.net *.split)
2022-04-14 23:03:55	←	renatofdds[m] has quit (*.net *.split)
2022-04-14 23:03:55	←	ringo__ has quit (*.net *.split)
2022-04-14 23:03:55	←	tapas has quit (*.net *.split)
2022-04-14 23:03:55	←	tritlo has quit (*.net *.split)
2022-04-14 23:03:55	←	gaze___ has quit (*.net *.split)
2022-04-14 23:03:55	←	pjlsergeant has quit (*.net *.split)
2022-04-14 23:03:55	←	stefan-_ has quit (*.net *.split)
2022-04-14 23:03:55	←	shapr has quit (*.net *.split)
2022-04-14 23:03:55	←	marquis_andras has quit (*.net *.split)
2022-04-14 23:03:55	←	shane has quit (*.net *.split)
2022-04-14 23:03:55	←	SIben has quit (*.net *.split)
2022-04-14 23:03:55	←	robbert-vdh has quit (*.net *.split)
2022-04-14 23:03:55	←	polux has quit (*.net *.split)
2022-04-14 23:03:55	←	renzhi has quit (*.net *.split)
2022-04-14 23:03:55	←	tired has quit (*.net *.split)
2022-04-14 23:03:55	←	jamestmartin has quit (*.net *.split)
2022-04-14 23:03:55	←	Katarushisu has quit (*.net *.split)
2022-04-14 23:03:55	←	andjjj23_ has quit (*.net *.split)
2022-04-14 23:03:55	←	mcglk has quit (*.net *.split)
2022-04-14 23:03:55	←	sabx has quit (*.net *.split)
2022-04-14 23:03:55	←	melonai has quit (*.net *.split)
2022-04-14 23:03:55	←	fiddlerwoaroof has quit (*.net *.split)
2022-04-14 23:03:55	←	res0nat0r0844 has quit (*.net *.split)
2022-04-14 23:03:55	←	vgtw has quit (*.net *.split)
2022-04-14 23:03:55	←	MironZ has quit (*.net *.split)
2022-04-14 23:03:55	←	acacia has quit (*.net *.split)
2022-04-14 23:03:55	←	micro has quit (*.net *.split)
2022-04-14 23:03:55	←	srk has quit (*.net *.split)
2022-04-14 23:03:55	←	jrm has quit (*.net *.split)
2022-04-14 23:03:55	←	hughjfchen has quit (*.net *.split)
2022-04-14 23:03:55	←	nek0 has quit (*.net *.split)
2022-04-14 23:03:55	←	turlando has quit (*.net *.split)
2022-04-14 23:03:55	←	haasn has quit (*.net *.split)
2022-04-14 23:03:55	←	Typedfern has quit (*.net *.split)
2022-04-14 23:03:55	←	mjrosenb has quit (*.net *.split)
2022-04-14 23:03:55	←	mjacob has quit (*.net *.split)
2022-04-14 23:03:55	←	Zach[m]1 has quit (*.net *.split)
2022-04-14 23:03:55	←	glider has quit (*.net *.split)
2022-04-14 23:03:55	←	ddb has quit (*.net *.split)
2022-04-14 23:03:55	←	lambdap2 has quit (*.net *.split)
2022-04-14 23:03:55	←	Guest31 has quit (*.net *.split)
2022-04-14 23:03:55	←	tmo24 has quit (*.net *.split)
2022-04-14 23:03:55	←	ishaan has quit (*.net *.split)
2022-04-14 23:03:55	←	gentauro has quit (*.net *.split)
2022-04-14 23:03:55	←	redb has quit (*.net *.split)
2022-04-14 23:03:55	←	mstksg has quit (*.net *.split)
2022-04-14 23:03:55	←	joo-_ has quit (*.net *.split)
2022-04-14 23:03:55	←	Unicorn_Princess has quit (*.net *.split)
2022-04-14 23:03:55	←	Alex_test has quit (*.net *.split)
2022-04-14 23:03:55	←	efertone has quit (*.net *.split)
2022-04-14 23:03:55	←	ezzieyguywuf has quit (*.net *.split)
2022-04-14 23:03:55	←	dolio has quit (*.net *.split)
2022-04-14 23:03:55	←	Batzy has quit (*.net *.split)
2022-04-14 23:03:55	←	inversed_ has quit (*.net *.split)
2022-04-14 23:03:55	←	sander has quit (*.net *.split)
2022-04-14 23:03:55	←	infinity0 has quit (*.net *.split)
2022-04-14 23:03:55	←	TonyStone has quit (*.net *.split)
2022-04-14 23:03:55	←	agrosant has quit (*.net *.split)
2022-04-14 23:03:55	←	avpx has quit (*.net *.split)
2022-04-14 23:03:55	←	pooryorick has quit (*.net *.split)
2022-04-14 23:03:55	←	gdd has quit (*.net *.split)
2022-04-14 23:03:55	←	noctuks has quit (*.net *.split)
2022-04-14 23:03:55	←	Ekho has quit (*.net *.split)
2022-04-14 23:03:55	←	absence has quit (*.net *.split)
2022-04-14 23:03:55	←	omantere has quit (*.net *.split)
2022-04-14 23:03:55	←	nahcetan has quit (*.net *.split)
2022-04-14 23:03:55	←	sm[i] has quit (*.net *.split)
2022-04-14 23:03:55	←	xstill- has quit (*.net *.split)
2022-04-14 23:03:55	←	acowley has quit (*.net *.split)
2022-04-14 23:03:55	←	auri has quit (*.net *.split)
2022-04-14 23:03:55	←	wagle has quit (*.net *.split)
2022-04-14 23:03:55	←	mmaruseacph2 has quit (*.net *.split)
2022-04-14 23:03:55	←	Ranhir has quit (*.net *.split)
2022-04-14 23:03:55	←	jlamothe has quit (*.net *.split)
2022-04-14 23:03:55	←	dumptruckman has quit (*.net *.split)
2022-04-14 23:03:55	←	dibblego has quit (*.net *.split)
2022-04-14 23:03:55	←	akhesacaro has quit (*.net *.split)
2022-04-14 23:03:55	←	Jonno_FTW has quit (*.net *.split)
2022-04-14 23:03:55	←	ncopa has quit (*.net *.split)
2022-04-14 23:03:55	←	Rembane has quit (*.net *.split)
2022-04-14 23:03:55	←	cross has quit (*.net *.split)
2022-04-14 23:03:55	←	DigitalKiwi has quit (*.net *.split)
2022-04-14 23:03:55	←	Igloo has quit (*.net *.split)
2022-04-14 23:03:55	←	n3t has quit (*.net *.split)
2022-04-14 23:03:55	←	loonycyborg has quit (*.net *.split)
2022-04-14 23:03:55	←	pieguy128 has quit (*.net *.split)
2022-04-14 23:03:56	←	chronon has quit (*.net *.split)
2022-04-14 23:03:56	←	stvc has quit (*.net *.split)
2022-04-14 23:03:56	←	byorgey has quit (*.net *.split)
2022-04-14 23:03:56	←	edwtjo has quit (*.net *.split)
2022-04-14 23:03:56	←	hugo has quit (*.net *.split)
2022-04-14 23:03:56	←	maerwald has quit (*.net *.split)
2022-04-14 23:03:56	←	totte has quit (*.net *.split)
2022-04-14 23:03:56	←	bollu has quit (*.net *.split)
2022-04-14 23:03:56	←	califax has quit (*.net *.split)
2022-04-14 23:03:56	←	ec has quit (*.net *.split)
2022-04-14 23:03:56	←	azimut has quit (*.net *.split)
2022-04-14 23:03:56	←	FinnElija has quit (*.net *.split)
2022-04-14 23:03:56	←	hololeap has quit (*.net *.split)
2022-04-14 23:03:56	←	jpds has quit (*.net *.split)
2022-04-14 23:03:56	←	littlebobeep has quit (*.net *.split)
2022-04-14 23:03:56	←	stiell_ has quit (*.net *.split)
2022-04-14 23:03:56	←	gehmehgeh has quit (*.net *.split)
2022-04-14 23:03:56	←	ChaiTRex has quit (*.net *.split)
2022-04-14 23:03:56	←	adanwan has quit (*.net *.split)
2022-04-14 23:03:56	←	wyrd has quit (*.net *.split)
2022-04-14 23:03:56	←	chexum has quit (*.net *.split)
2022-04-14 23:03:56	←	dgpratt[m] has quit (*.net *.split)
2022-04-14 23:03:56	←	Frinasa[m] has quit (*.net *.split)
2022-04-14 23:03:56	←	wildsebastian has quit (*.net *.split)
2022-04-14 23:03:56	←	pie_ has quit (*.net *.split)
2022-04-14 23:03:56	←	AdityaAlok[m] has quit (*.net *.split)
2022-04-14 23:03:56	←	desklamp[m] has quit (*.net *.split)
2022-04-14 23:03:56	←	nathansquan[m] has quit (*.net *.split)
2022-04-14 23:03:56	←	Las[m] has quit (*.net *.split)
2022-04-14 23:03:56	←	jaror[m] has quit (*.net *.split)
2022-04-14 23:03:56	←	oak- has quit (*.net *.split)
2022-04-14 23:03:56	←	o1lo0lol1o[m] has quit (*.net *.split)
2022-04-14 23:03:56	←	kalxd[m] has quit (*.net *.split)
2022-04-14 23:03:56	←	smichel17[m] has quit (*.net *.split)
2022-04-14 23:03:56	←	maralorn has quit (*.net *.split)
2022-04-14 23:03:56	←	siraben has quit (*.net *.split)
2022-04-14 23:03:56	←	mjs2600 has quit (*.net *.split)
2022-04-14 23:03:56	←	mrmonday has quit (*.net *.split)
2022-04-14 23:03:56	←	liskin has quit (*.net *.split)
2022-04-14 23:03:56	←	remedan has quit (*.net *.split)
2022-04-14 23:03:56	←	bgs has quit (*.net *.split)
2022-04-14 23:03:56	←	canta has quit (*.net *.split)
2022-04-14 23:03:56	←	eagleflo has quit (*.net *.split)
2022-04-14 23:03:56	←	RSBach has quit (*.net *.split)
2022-04-14 23:03:56	←	cocreature has quit (*.net *.split)
2022-04-14 23:03:56	←	philpax_ has quit (*.net *.split)
2022-04-14 23:03:56	←	edwardk has quit (*.net *.split)
2022-04-14 23:03:56	←	mustafa has quit (*.net *.split)
2022-04-14 23:03:56	←	hubvu_ has quit (*.net *.split)
2022-04-14 23:03:56	←	astra has quit (*.net *.split)
2022-04-14 23:03:56	←	ByronJohnson has quit (*.net *.split)
2022-04-14 23:03:56	←	qhong has quit (*.net *.split)
2022-04-14 23:03:56	←	int-e has quit (*.net *.split)
2022-04-14 23:03:56	←	forell has quit (*.net *.split)
2022-04-14 23:03:56	←	tolt has quit (*.net *.split)
2022-04-14 23:03:56	←	PapuaHardyNet has quit (*.net *.split)
2022-04-14 23:03:56	←	nurupo has quit (*.net *.split)
2022-04-14 23:03:56	←	Hobbyboy has quit (*.net *.split)
2022-04-14 23:03:56	←	edmundnoble has quit (*.net *.split)
2022-04-14 23:03:56	←	aarchi has quit (*.net *.split)
2022-04-14 23:03:56	←	b20n has quit (*.net *.split)
2022-04-14 23:03:56	←	dmj` has quit (*.net *.split)
2022-04-14 23:03:56	←	truckasaurus has quit (*.net *.split)
2022-04-14 23:03:56	←	gmc has quit (*.net *.split)
2022-04-14 23:03:56	←	parseval has quit (*.net *.split)
2022-04-14 23:03:56	←	amir has quit (*.net *.split)
2022-04-14 23:03:56	←	bradparker has quit (*.net *.split)
2022-04-14 23:03:56	←	andreas303 has quit (*.net *.split)
2022-04-14 23:03:56	←	jjhoo has quit (*.net *.split)
2022-04-14 23:03:56	←	abrar_ has quit (*.net *.split)
2022-04-14 23:03:56	←	ouroboros has quit (*.net *.split)
2022-04-14 23:03:56	←	V has quit (*.net *.split)
2022-04-14 23:03:56	←	jackhill has quit (*.net *.split)
2022-04-14 23:03:56	←	sm has quit (*.net *.split)
2022-04-14 23:03:56	←	sekun[m] has quit (*.net *.split)
2022-04-14 23:03:56	←	mcfrdy has quit (*.net *.split)
2022-04-14 23:03:56	←	flupe has quit (*.net *.split)
2022-04-14 23:03:56	←	conjunctive has quit (*.net *.split)
2022-04-14 23:03:56	←	dpratt has quit (*.net *.split)
2022-04-14 23:03:56	←	nf has quit (*.net *.split)
2022-04-14 23:03:56	←	eddiemundo has quit (*.net *.split)
2022-04-14 23:03:56	←	july541[m] has quit (*.net *.split)
2022-04-14 23:03:56	←	TimothyBess[m] has quit (*.net *.split)
2022-04-14 23:03:56	←	Yehoshua has quit (*.net *.split)
2022-04-14 23:03:56	←	marinelli[m] has quit (*.net *.split)
2022-04-14 23:03:56	←	Ash[m] has quit (*.net *.split)
2022-04-14 23:03:56	←	kadenwolff[m] has quit (*.net *.split)
2022-04-14 23:03:56	←	zfnmxt has quit (*.net *.split)
2022-04-14 23:03:56	←	nomagno has quit (*.net *.split)
2022-04-14 23:03:56	←	ericson2314 has quit (*.net *.split)
2022-04-14 23:03:56	←	kadoban has quit (*.net *.split)
2022-04-14 23:03:56	←	jinsun_ has quit (*.net *.split)
2022-04-14 23:03:56	←	psydroid has quit (*.net *.split)
2022-04-14 23:03:56	←	VarikValefor[m] has quit (*.net *.split)
2022-04-14 23:03:56	←	|beowulf| has quit (*.net *.split)
2022-04-14 23:03:56	←	riatre has quit (*.net *.split)
2022-04-14 23:03:56	←	TimWolla has quit (*.net *.split)
2022-04-14 23:03:56	←	SanchayanMaity has quit (*.net *.split)
2022-04-14 23:03:56	←	energizer has quit (*.net *.split)
2022-04-14 23:03:56	←	adamCS has quit (*.net *.split)
2022-04-14 23:03:56	←	davean has quit (*.net *.split)
2022-04-14 23:03:56	←	dkeohane2 has quit (*.net *.split)
2022-04-14 23:03:56	←	bwe has quit (*.net *.split)
2022-04-14 23:03:56	←	AdamConner-Sax[m has quit (*.net *.split)
2022-04-14 23:03:56	←	vaibhavsagar[m] has quit (*.net *.split)
2022-04-14 23:03:56	←	lawt has quit (*.net *.split)
2022-04-14 23:03:56	←	Inst[m] has quit (*.net *.split)
2022-04-14 23:03:57	←	cdsmith has quit (*.net *.split)
2022-04-14 23:03:57	←	charukiewicz[m] has quit (*.net *.split)
2022-04-14 23:03:57	←	ArshiaAghaei[m] has quit (*.net *.split)
2022-04-14 23:03:57	←	tsmc[m] has quit (*.net *.split)
2022-04-14 23:03:57	←	fendor[m] has quit (*.net *.split)
2022-04-14 23:03:57	←	yosef36 has quit (*.net *.split)
2022-04-14 23:03:57	←	boxscape has quit (*.net *.split)
2022-04-14 23:03:57	←	juhp[m] has quit (*.net *.split)
2022-04-14 23:03:57	←	lagooned has quit (*.net *.split)
2022-04-14 23:03:57	←	Inoperable has quit (*.net *.split)
2022-04-14 23:03:57	←	mrkajetanp has quit (*.net *.split)
2022-04-14 23:03:57	←	iphy has quit (*.net *.split)
2022-04-14 23:03:57	←	carbolymer has quit (*.net *.split)
2022-04-14 23:03:57	←	piele has quit (*.net *.split)
2022-04-14 23:03:57	←	Clint has quit (*.net *.split)
2022-04-14 23:03:57	←	barrucadu has quit (*.net *.split)
2022-04-14 23:03:57	←	tdammers has quit (*.net *.split)
2022-04-14 23:03:57	←	tv has quit (*.net *.split)
2022-04-14 23:03:57	←	ldlework has quit (*.net *.split)
2022-04-14 23:03:57	←	Vq has quit (*.net *.split)
2022-04-14 23:03:57	←	kronicma1 has quit (*.net *.split)
2022-04-14 23:03:57	←	ts3 has quit (*.net *.split)
2022-04-14 23:03:57	←	cawfee has quit (*.net *.split)
2022-04-14 23:03:57	←	berberman has quit (*.net *.split)
2022-04-14 23:03:57	←	dagit has quit (*.net *.split)
2022-04-14 23:03:57	←	kitzman has quit (*.net *.split)
2022-04-14 23:03:57	←	Sqaure has quit (*.net *.split)
2022-04-14 23:03:57	←	xerox has quit (*.net *.split)
2022-04-14 23:03:57	←	Patternmaster has quit (*.net *.split)
2022-04-14 23:03:57	←	clever has quit (*.net *.split)
2022-04-14 23:03:57	←	CATS has quit (*.net *.split)
2022-04-14 23:03:57	←	Jon has quit (*.net *.split)
2022-04-14 23:03:57	←	Buggys has quit (*.net *.split)
2022-04-14 23:03:57	←	hendi has quit (*.net *.split)
2022-04-14 23:03:57	←	alanz has quit (*.net *.split)
2022-04-14 23:03:57	←	sclv has quit (*.net *.split)
2022-04-14 23:03:57	←	chessai has quit (*.net *.split)
2022-04-14 23:03:57	←	dyniec has quit (*.net *.split)
2022-04-14 23:03:57	←	robertm has quit (*.net *.split)
2022-04-14 23:03:57	←	Unhammer has quit (*.net *.split)
2022-04-14 23:03:57	←	megeve has quit (*.net *.split)
2022-04-14 23:03:57	←	hook54321 has quit (*.net *.split)
2022-04-14 23:03:57	←	kaskal has quit (*.net *.split)
2022-04-14 23:03:57	←	ThadeuPaula[m] has quit (*.net *.split)
2022-04-14 23:03:57	←	kevin[m] has quit (*.net *.split)
2022-04-14 23:03:57	←	justosophy[m] has quit (*.net *.split)
2022-04-14 23:03:57	←	aviladev[m] has quit (*.net *.split)
2022-04-14 23:03:57	←	ac has quit (*.net *.split)
2022-04-14 23:03:57	←	polykernel[m] has quit (*.net *.split)
2022-04-14 23:03:57	←	Christoph[m] has quit (*.net *.split)
2022-04-14 23:03:57	←	Artem[m] has quit (*.net *.split)
2022-04-14 23:03:57	←	Arathorn has quit (*.net *.split)
2022-04-14 23:03:57	←	jmcantrell has quit (*.net *.split)
2022-04-14 23:03:57	←	geoduck has quit (*.net *.split)
2022-04-14 23:03:57	←	yahb has quit (*.net *.split)
2022-04-14 23:03:57	←	df has quit (*.net *.split)
2022-04-14 23:03:57	←	dragestil has quit (*.net *.split)
2022-04-14 23:03:57	←	marienz__ has quit (*.net *.split)
2022-04-14 23:03:57	←	tristanC has quit (*.net *.split)
2022-04-14 23:03:57	←	relrod has quit (*.net *.split)
2022-04-14 23:03:58	←	mht-wtf has quit (*.net *.split)
2022-04-14 23:03:58	←	noiobeforebed has quit (*.net *.split)
2022-04-14 23:03:58	←	Adran has quit (*.net *.split)
2022-04-14 23:03:58	←	remexre has quit (*.net *.split)
2022-04-14 23:03:58	←	nckx has quit (*.net *.split)
2022-04-14 23:03:58	←	cln has quit (*.net *.split)
2022-04-14 23:03:58	←	koala_man has quit (*.net *.split)
2022-04-14 23:03:58	←	rune has quit (*.net *.split)
2022-04-14 23:03:58	←	Hash has quit (*.net *.split)
2022-04-14 23:03:58	←	amesgen[m] has quit (*.net *.split)
2022-04-14 23:03:58	←	Deide has quit (*.net *.split)
2022-04-14 23:03:58	←	tafa has quit (*.net *.split)
2022-04-14 23:03:58	←	jiribenes has quit (*.net *.split)
2022-04-14 23:03:58	←	noddy has quit (*.net *.split)
2022-04-14 23:03:58	←	corisco[m] has quit (*.net *.split)
2022-04-14 23:03:58	←	weeezes[m] has quit (*.net *.split)
2022-04-14 23:03:58	←	AdamS[m] has quit (*.net *.split)
2022-04-14 23:03:58	←	hughjfchen[m] has quit (*.net *.split)
2022-04-14 23:03:58	←	SridharRatnakuma has quit (*.net *.split)
2022-04-14 23:03:58	←	Guillaum[m] has quit (*.net *.split)
2022-04-14 23:03:58	←	jneira[m] has quit (*.net *.split)
2022-04-14 23:03:58	←	euphrates[m] has quit (*.net *.split)
2022-04-14 23:03:58	←	DemiMarieObenour has quit (*.net *.split)
2022-04-14 23:03:58	←	Orbstheorem has quit (*.net *.split)
2022-04-14 23:03:58	←	jakalx has quit (*.net *.split)
2022-04-14 23:03:58	←	thonkpod_ has quit (*.net *.split)
2022-04-14 23:03:58	←	farn has quit (*.net *.split)
2022-04-14 23:03:58	←	jonrh has quit (*.net *.split)
2022-04-14 23:03:58	←	gonz_____ has quit (*.net *.split)
2022-04-14 23:03:58	←	supersven has quit (*.net *.split)
2022-04-14 23:03:58	←	lally has quit (*.net *.split)
2022-04-14 23:03:58	←	dsal has quit (*.net *.split)
2022-04-14 23:03:58	←	ehamberg has quit (*.net *.split)
2022-04-14 23:03:58	←	lexi-lambda has quit (*.net *.split)
2022-04-14 23:03:58	←	Arsen has quit (*.net *.split)
2022-04-14 23:03:58	←	kaol has quit (*.net *.split)
2022-04-14 23:03:58	←	nerdypepper has quit (*.net *.split)
2022-04-14 23:03:58	←	cls has quit (*.net *.split)
2022-04-14 23:03:58	←	TMA has quit (*.net *.split)
2022-04-14 23:03:58	←	telser has quit (*.net *.split)
2022-04-14 23:03:58	←	tureba has quit (*.net *.split)
2022-04-14 23:03:58	←	ikke has quit (*.net *.split)
2022-04-14 23:03:58	←	reda_ has quit (*.net *.split)
2022-04-14 23:03:58	←	MasseR46 has quit (*.net *.split)
2022-04-14 23:03:58	←	Profpatsch has quit (*.net *.split)
2022-04-14 23:03:58	←	noctux has quit (*.net *.split)
2022-04-14 23:03:58	←	ornxka has quit (*.net *.split)
2022-04-14 23:03:58	←	koolazer has quit (*.net *.split)
2022-04-14 23:03:58	←	aforemny has quit (*.net *.split)
2022-04-14 23:03:58	←	urdh has quit (*.net *.split)
2022-04-14 23:03:58	←	Teacup has quit (*.net *.split)
2022-04-14 23:03:58	←	w1gz has quit (*.net *.split)
2022-04-14 23:03:58	←	martin02_ has quit (*.net *.split)
2022-04-14 23:03:58	←	[exa] has quit (*.net *.split)
2022-04-14 23:03:58	←	caubert has quit (*.net *.split)
2022-04-14 23:03:58	←	Dorkside6 has quit (*.net *.split)
2022-04-14 23:03:58	←	ralu1 has quit (*.net *.split)
2022-04-14 23:03:58	←	derelict has quit (*.net *.split)
2022-04-14 23:03:58	←	foul_owl has quit (*.net *.split)
2022-04-14 23:03:58	←	gawen has quit (*.net *.split)
2022-04-14 23:03:58	←	koz has quit (*.net *.split)
2022-04-14 23:03:58	←	schuelermine[m] has quit (*.net *.split)
2022-04-14 23:03:58	←	ksqsf[m] has quit (*.net *.split)
2022-04-14 23:03:58	←	unclechu has quit (*.net *.split)
2022-04-14 23:03:58	←	fgaz has quit (*.net *.split)
2022-04-14 23:03:58	←	hltk has quit (*.net *.split)
2022-04-14 23:03:58	←	haveo has quit (*.net *.split)
2022-04-14 23:03:58	←	sshine has quit (*.net *.split)
2022-04-14 23:03:58	←	meejah has quit (*.net *.split)
2022-04-14 23:03:58	←	Unode has quit (*.net *.split)
2022-04-14 23:03:58	←	YoungFrog has quit (*.net *.split)
2022-04-14 23:03:58	←	AkechiShiro has quit (*.net *.split)
2022-04-14 23:03:58	←	codedmart has quit (*.net *.split)
2022-04-14 23:03:58	←	Franciman has quit (*.net *.split)
2022-04-14 23:03:58	←	sjanssen has quit (*.net *.split)
2022-04-14 23:03:58	←	alexfmpe[m] has quit (*.net *.split)
2022-04-14 23:03:58	←	moats has quit (*.net *.split)
2022-04-14 23:03:58	←	maerwald[m] has quit (*.net *.split)
2022-04-14 23:03:58	←	abastro[m] has quit (*.net *.split)
2022-04-14 23:03:58	←	ongy[m] has quit (*.net *.split)
2022-04-14 23:03:58	←	hsiktas[m] has quit (*.net *.split)
2022-04-14 23:03:58	←	ormaaj has quit (*.net *.split)
2022-04-14 23:03:58	←	feetwind has quit (*.net *.split)
2022-04-14 23:03:58	←	yushyin has quit (*.net *.split)
2022-04-14 23:03:58	←	meinside has quit (*.net *.split)
2022-04-14 23:03:58	←	tomboy64 has quit (*.net *.split)
2022-04-14 23:03:58	←	tomjaguarpaw has quit (*.net *.split)
2022-04-14 23:03:58	←	sooch_ has quit (*.net *.split)
2022-04-14 23:03:58	←	rubin55 has quit (*.net *.split)
2022-04-14 23:03:58	←	nrr___ has quit (*.net *.split)
2022-04-14 23:03:58	←	S11001001 has quit (*.net *.split)
2022-04-14 23:03:58	←	Firedancer has quit (*.net *.split)
2022-04-14 23:03:58	←	carter has quit (*.net *.split)
2022-04-14 23:03:58	←	teddyc has quit (*.net *.split)
2022-04-14 23:03:58	←	xnbya has quit (*.net *.split)
2022-04-14 23:03:58	←	enemeth79 has quit (*.net *.split)
2022-04-14 23:03:58	←	pierrot has quit (*.net *.split)
2022-04-14 23:03:58	←	welterde has quit (*.net *.split)
2022-04-14 23:07:49	→	econo has joined #haskell
2022-04-14 23:07:49	→	tubogram4 has joined #haskell
2022-04-14 23:07:49	→	tromp has joined #haskell
2022-04-14 23:07:49	→	bah_ has joined #haskell
2022-04-14 23:07:49	→	mniip_ has joined #haskell
2022-04-14 23:07:49	→	Vajb has joined #haskell
2022-04-14 23:07:49	→	_ht_ has joined #haskell
2022-04-14 23:07:49	→	gabriel_1 has joined #haskell
2022-04-14 23:07:49	→	opqdonut_ has joined #haskell
2022-04-14 23:07:49	→	tomku|two has joined #haskell
2022-04-14 23:07:49	→	stilgart_ has joined #haskell
2022-04-14 23:07:49	→	some02 has joined #haskell
2022-04-14 23:07:49	→	lucifero has joined #haskell
2022-04-14 23:07:49	→	Maxdaman1us has joined #haskell
2022-04-14 23:07:49	→	sweater1 has joined #haskell
2022-04-14 23:07:49	→	simeon_ has joined #haskell
2022-04-14 23:07:49	→	zyklotom1 has joined #haskell
2022-04-14 23:07:49	→	Zemyla_ has joined #haskell
2022-04-14 23:07:49	→	a1paca_ has joined #haskell
2022-04-14 23:07:49	→	Cheery_ has joined #haskell
2022-04-14 23:07:49	→	janus__ has joined #haskell
2022-04-14 23:07:49	→	ptrcmd_ has joined #haskell
2022-04-14 23:07:49	→	Trattue- has joined #haskell
2022-04-14 23:07:49	→	hyiltiz_ has joined #haskell
2022-04-14 23:07:49	→	jinsun__ has joined #haskell
2022-04-14 23:07:49	→	zachel_ has joined #haskell
2022-04-14 23:07:49	→	hammock has joined #haskell
2022-04-14 23:07:49	→	califax has joined #haskell
2022-04-14 23:07:49	→	lemonsni- has joined #haskell
2022-04-14 23:07:49	→	Athas_ has joined #haskell
2022-04-14 23:07:49	→	tmo24 has joined #haskell
2022-04-14 23:07:49	→	statusbot has joined #haskell
2022-04-14 23:07:49	→	alp_ has joined #haskell
2022-04-14 23:07:49	→	ishaan has joined #haskell
2022-04-14 23:07:49	→	benin has joined #haskell
2022-04-14 23:07:49	→	ubert has joined #haskell
2022-04-14 23:07:49	→	gurkenglas has joined #haskell
2022-04-14 23:07:49	→	tzh has joined #haskell
2022-04-14 23:07:49	→	sprout has joined #haskell
2022-04-14 23:07:49	→	notzmv has joined #haskell
2022-04-14 23:07:49	→	gentauro has joined #haskell
2022-04-14 23:07:49	→	redb has joined #haskell
2022-04-14 23:07:49	→	motherfsck has joined #haskell
2022-04-14 23:07:49	→	ec has joined #haskell
2022-04-14 23:07:49	→	jespada has joined #haskell
2022-04-14 23:07:49	→	phma has joined #haskell
2022-04-14 23:07:49	→	jao has joined #haskell
2022-04-14 23:07:49	→	fockerized has joined #haskell
2022-04-14 23:07:49	→	waleee has joined #haskell
2022-04-14 23:07:49	→	Sgeo has joined #haskell
2022-04-14 23:07:49	→	jakalx has joined #haskell
2022-04-14 23:07:49	→	bontaq has joined #haskell
2022-04-14 23:07:49	→	zaquest has joined #haskell
2022-04-14 23:07:49	→	mikoto-chan has joined #haskell
2022-04-14 23:07:49	→	raehik has joined #haskell
2022-04-14 23:07:49	→	azimut has joined #haskell
2022-04-14 23:07:49	→	gabiruh has joined #haskell
2022-04-14 23:07:49	→	[itchyjunk] has joined #haskell
2022-04-14 23:07:49	→	FinnElija has joined #haskell
2022-04-14 23:07:49	→	epolanski has joined #haskell
2022-04-14 23:07:49	→	hololeap has joined #haskell
2022-04-14 23:07:49	→	jpds has joined #haskell
2022-04-14 23:07:49	→	natto has joined #haskell
2022-04-14 23:07:49	→	deadmarshal_ has joined #haskell
2022-04-14 23:07:49	→	littlebobeep has joined #haskell
2022-04-14 23:07:49	→	stiell_ has joined #haskell
2022-04-14 23:07:49	→	fendor has joined #haskell
2022-04-14 23:07:49	→	Andrew has joined #haskell
2022-04-14 23:07:49	→	jackson99 has joined #haskell
2022-04-14 23:07:49	→	efertone has joined #haskell
2022-04-14 23:07:49	→	AlexNoo has joined #haskell
2022-04-14 23:07:49	→	mmhat has joined #haskell
2022-04-14 23:07:49	→	mstksg has joined #haskell
2022-04-14 23:07:49	→	Techcable has joined #haskell
2022-04-14 23:07:49	→	joo-_ has joined #haskell
2022-04-14 23:07:49	→	robosexual has joined #haskell
2022-04-14 23:07:49	→	tomsmeding has joined #haskell
2022-04-14 23:07:49	→	fjmorazan has joined #haskell
2022-04-14 23:07:49	→	gehmehgeh has joined #haskell
2022-04-14 23:07:49	→	iteratee_ has joined #haskell
2022-04-14 23:07:49	→	hueso has joined #haskell
2022-04-14 23:07:49	→	michalz has joined #haskell
2022-04-14 23:07:49	→	dhouthoo has joined #haskell
2022-04-14 23:07:49	→	Axman6 has joined #haskell
2022-04-14 23:07:49	→	machinedgod has joined #haskell
2022-04-14 23:07:49	→	m1dnight has joined #haskell
2022-04-14 23:07:49	→	m5zs7k has joined #haskell
2022-04-14 23:07:49	→	kilolympus has joined #haskell
2022-04-14 23:07:49	→	xsarnik has joined #haskell
2022-04-14 23:07:49	→	raym has joined #haskell
2022-04-14 23:07:49	→	TheCoffeMaker has joined #haskell
2022-04-14 23:07:49	→	matijja has joined #haskell
2022-04-14 23:07:49	→	Unicorn_Princess has joined #haskell
2022-04-14 23:07:49	→	mbuf has joined #haskell
2022-04-14 23:07:49	→	terrorjack has joined #haskell
2022-04-14 23:07:49	→	AlexZenon has joined #haskell
2022-04-14 23:07:49	→	Alex_test has joined #haskell
2022-04-14 23:07:49	→	justache has joined #haskell
2022-04-14 23:07:49	→	cyphase has joined #haskell
2022-04-14 23:07:49	→	vysn has joined #haskell
2022-04-14 23:07:49	→	andrey_ has joined #haskell
2022-04-14 23:07:49	→	albet70 has joined #haskell
2022-04-14 23:07:49	→	bgs has joined #haskell
2022-04-14 23:07:49	→	perrierjouet has joined #haskell
2022-04-14 23:07:49	→	geekosaur has joined #haskell
2022-04-14 23:07:49	→	oats has joined #haskell
2022-04-14 23:07:49	→	immae has joined #haskell
2022-04-14 23:07:49	→	[_________] has joined #haskell
2022-04-14 23:07:49	→	Lord_of_Life has joined #haskell
2022-04-14 23:07:49	→	elkcl has joined #haskell
2022-04-14 23:07:49	→	ezzieyguywuf has joined #haskell
2022-04-14 23:07:49	→	cosimone has joined #haskell
2022-04-14 23:07:49	→	qwedfg has joined #haskell
2022-04-14 23:07:49	→	FragByte has joined #haskell
2022-04-14 23:07:49	→	dolio has joined #haskell
2022-04-14 23:07:49	→	awpr has joined #haskell
2022-04-14 23:07:49	→	_________ has joined #haskell
2022-04-14 23:07:49	→	shriekingnoise has joined #haskell
2022-04-14 23:07:49	→	lagash has joined #haskell
2022-04-14 23:07:49	→	hpc has joined #haskell
2022-04-14 23:07:49	→	lambdabot has joined #haskell
2022-04-14 23:07:49	→	bliminse has joined #haskell
2022-04-14 23:07:49	→	Flow has joined #haskell
2022-04-14 23:07:49	→	swistak has joined #haskell
2022-04-14 23:07:49	→	zmt01 has joined #haskell
2022-04-14 23:07:49	→	Natch has joined #haskell
2022-04-14 23:07:49	→	son0p has joined #haskell
2022-04-14 23:07:49	→	biberu has joined #haskell
2022-04-14 23:07:49	→	kmein has joined #haskell
2022-04-14 23:07:49	→	euandreh has joined #haskell
2022-04-14 23:07:49	→	sammelweis has joined #haskell
2022-04-14 23:07:49	→	juri_ has joined #haskell
2022-04-14 23:07:49	→	erisco has joined #haskell
2022-04-14 23:07:49	→	ChaiTRex has joined #haskell
2022-04-14 23:07:49	→	ridcully has joined #haskell
2022-04-14 23:07:49	→	ix has joined #haskell
2022-04-14 23:07:49	→	averell has joined #haskell
2022-04-14 23:07:49	→	kritzefitz has joined #haskell
2022-04-14 23:07:49	→	rembo10 has joined #haskell
2022-04-14 23:07:49	→	adanwan has joined #haskell
2022-04-14 23:07:49	→	noiobeforebed has joined #haskell
2022-04-14 23:07:49	→	Frinasa[m] has joined #haskell
2022-04-14 23:07:49	→	Batzy has joined #haskell
2022-04-14 23:07:49	→	shachaf has joined #haskell
2022-04-14 23:07:49	→	synthmeat has joined #haskell
2022-04-14 23:07:49	→	sus has joined #haskell
2022-04-14 23:07:49	→	aria has joined #haskell
2022-04-14 23:07:49	→	systemfault has joined #haskell
2022-04-14 23:07:49	→	obviyus has joined #haskell
2022-04-14 23:07:49	→	newhoggy has joined #haskell
2022-04-14 23:07:49	→	bw has joined #haskell
2022-04-14 23:07:49	→	wyrd has joined #haskell
2022-04-14 23:07:49	→	MasseR46 has joined #haskell
2022-04-14 23:07:49	→	JSharp has joined #haskell
2022-04-14 23:07:49	→	teehemkay has joined #haskell
2022-04-14 23:07:49	→	sunarch has joined #haskell
2022-04-14 23:07:49	→	ephemient has joined #haskell
2022-04-14 23:07:49	→	scav has joined #haskell
2022-04-14 23:07:49	→	_0x47_ has joined #haskell
2022-04-14 23:07:49	→	Adeon has joined #haskell
2022-04-14 23:07:49	→	PotatoGim has joined #haskell
2022-04-14 23:07:49	→	elvishjerricco has joined #haskell
2022-04-14 23:07:49	→	jackdk has joined #haskell
2022-04-14 23:07:49	→	kristjansson has joined #haskell
2022-04-14 23:07:49	→	hamishmack_ has joined #haskell
2022-04-14 23:07:49	→	werneta has joined #haskell
2022-04-14 23:07:49	→	inversed_ has joined #haskell
2022-04-14 23:07:49	→	sander has joined #haskell
2022-04-14 23:07:49	→	Raito_Bezarius has joined #haskell
2022-04-14 23:07:49	→	ircbrowse_tom has joined #haskell
2022-04-14 23:07:49	→	mtjm has joined #haskell
2022-04-14 23:07:49	→	tito has joined #haskell
2022-04-14 23:07:49	→	Cale has joined #haskell
2022-04-14 23:07:49	→	djanatyn has joined #haskell
2022-04-14 23:07:49	→	drlkf has joined #haskell
2022-04-14 23:07:49	→	ystael has joined #haskell
2022-04-14 23:07:49	→	dka has joined #haskell
2022-04-14 23:07:49	→	infinity0 has joined #haskell
2022-04-14 23:07:49	→	travisb_ has joined #haskell
2022-04-14 23:07:49	→	Profpatsch has joined #haskell
2022-04-14 23:07:49	→	mzan has joined #haskell
2022-04-14 23:07:49	→	neverwas has joined #haskell
2022-04-14 23:07:49	→	schuelermine[m] has joined #haskell
2022-04-14 23:07:49	→	ManofLetters[m] has joined #haskell
2022-04-14 23:07:49	→	dgpratt[m] has joined #haskell
2022-04-14 23:07:49	→	ksqsf[m] has joined #haskell
2022-04-14 23:07:49	→	AdamConner-Sax[m has joined #haskell
2022-04-14 23:07:49	→	sm has joined #haskell
2022-04-14 23:07:49	→	unclechu has joined #haskell
2022-04-14 23:07:49	→	Boarders_ has joined #haskell
2022-04-14 23:07:49	→	christiaanb has joined #haskell
2022-04-14 23:07:49	→	davetapley has joined #haskell
2022-04-14 23:07:49	→	hongminhee has joined #haskell
2022-04-14 23:07:49	→	bjs has joined #haskell
2022-04-14 23:07:49	→	T_S_ has joined #haskell
2022-04-14 23:07:49	→	kevinsjoberg has joined #haskell
2022-04-14 23:07:49	→	sa1 has joined #haskell
2022-04-14 23:07:49	→	cbarrett has joined #haskell
2022-04-14 23:07:49	→	grfn has joined #haskell
2022-04-14 23:07:49	→	heath has joined #haskell
2022-04-14 23:07:49	→	caasih has joined #haskell
2022-04-14 23:07:49	→	pepeiborra has joined #haskell
2022-04-14 23:07:49	→	Hafydd has joined #haskell
2022-04-14 23:07:49	→	Pent has joined #haskell
2022-04-14 23:07:49	→	noctux has joined #haskell
2022-04-14 23:07:49	→	SethTisue has joined #haskell
2022-04-14 23:07:49	→	cjay has joined #haskell
2022-04-14 23:07:49	→	AndreasK has joined #haskell
2022-04-14 23:07:49	→	whez has joined #haskell
2022-04-14 23:07:49	→	vaibhavsagar[m] has joined #haskell
2022-04-14 23:07:49	→	reza[m] has joined #haskell
2022-04-14 23:07:49	→	renatofdds[m] has joined #haskell
2022-04-14 23:07:49	→	peddie has joined #haskell
2022-04-14 23:07:49	→	fgaz has joined #haskell
2022-04-14 23:07:49	→	sekun[m] has joined #haskell
2022-04-14 23:07:49	→	jakesyl__ has joined #haskell
2022-04-14 23:07:49	→	wallymathieu has joined #haskell
2022-04-14 23:07:49	→	ringo__ has joined #haskell
2022-04-14 23:07:49	→	joel135 has joined #haskell
2022-04-14 23:07:49	→	NiKaN has joined #haskell
2022-04-14 23:07:49	→	vito has joined #haskell
2022-04-14 23:07:49	→	SrPx has joined #haskell
2022-04-14 23:07:49	→	jocke-l has joined #haskell
2022-04-14 23:07:49	→	Xe has joined #haskell
2022-04-14 23:07:49	→	koolazer has joined #haskell
2022-04-14 23:07:49	→	ornxka has joined #haskell
2022-04-14 23:07:49	→	sa has joined #haskell
2022-04-14 23:07:49	→	mcfilib has joined #haskell
2022-04-14 23:07:49	→	nisstyre has joined #haskell
2022-04-14 23:07:49	→	lieven has joined #haskell
2022-04-14 23:07:49	→	lightandlight has joined #haskell
2022-04-14 23:07:49	→	idnar has joined #haskell
2022-04-14 23:07:49	→	aforemny has joined #haskell
2022-04-14 23:07:49	→	tapas has joined #haskell
2022-04-14 23:07:49	→	tritlo has joined #haskell
2022-04-14 23:07:49	→	bonz060 has joined #haskell
2022-04-14 23:07:49	→	gaze___ has joined #haskell
2022-04-14 23:07:49	→	agander_m has joined #haskell
2022-04-14 23:07:49	→	pjlsergeant has joined #haskell
2022-04-14 23:07:49	→	LambdaDuck has joined #haskell
2022-04-14 23:07:49	→	Taneb has joined #haskell
2022-04-14 23:07:49	→	TonyStone has joined #haskell
2022-04-14 23:07:49	→	icebreaker has joined #haskell
2022-04-14 23:07:49	→	zero has joined #haskell
2022-04-14 23:07:49	→	orcus has joined #haskell
2022-04-14 23:07:49	→	urdh has joined #haskell
2022-04-14 23:07:49	→	Teacup has joined #haskell
2022-04-14 23:07:49	→	hgolden has joined #haskell
2022-04-14 23:07:49	→	w1gz has joined #haskell
2022-04-14 23:07:49	→	acro has joined #haskell
2022-04-14 23:07:49	→	dminuoso has joined #haskell
2022-04-14 23:07:49	→	ggVGc has joined #haskell
2022-04-14 23:07:49	→	ehammarstrom has joined #haskell
2022-04-14 23:07:49	→	martin02_ has joined #haskell
2022-04-14 23:07:49	→	bgamari has joined #haskell
2022-04-14 23:07:49	→	defanor has joined #haskell
2022-04-14 23:07:49	→	cods has joined #haskell
2022-04-14 23:07:49	→	dixie has joined #haskell
2022-04-14 23:07:49	→	shailangsa has joined #haskell
2022-04-14 23:07:49	→	[exa] has joined #haskell
2022-04-14 23:07:49	→	caubert has joined #haskell
2022-04-14 23:07:49	→	agrosant has joined #haskell
2022-04-14 23:07:49	→	Dorkside6 has joined #haskell
2022-04-14 23:07:49	→	ralu1 has joined #haskell
2022-04-14 23:07:49	→	chexum has joined #haskell
2022-04-14 23:07:49	→	derelict has joined #haskell
2022-04-14 23:07:49	→	stefan-_ has joined #haskell
2022-04-14 23:07:49	→	foul_owl has joined #haskell
2022-04-14 23:07:49	→	avpx has joined #haskell
2022-04-14 23:07:49	→	jmct has joined #haskell
2022-04-14 23:07:49	→	aeka has joined #haskell
2022-04-14 23:07:49	→	glguy has joined #haskell
2022-04-14 23:07:49	→	o has joined #haskell
2022-04-14 23:07:49	→	ellie has joined #haskell
2022-04-14 23:07:49	→	AWizzArd has joined #haskell
2022-04-14 23:07:49	→	feliix42 has joined #haskell
2022-04-14 23:07:49	→	dcoutts_ has joined #haskell
2022-04-14 23:07:49	→	dfordivam1 has joined #haskell
2022-04-14 23:07:49	→	shapr has joined #haskell
2022-04-14 23:07:49	→	vjoki has joined #haskell
2022-04-14 23:07:49	→	pooryorick has joined #haskell
2022-04-14 23:07:49	→	gawen has joined #haskell
2022-04-14 23:07:49	→	gdd has joined #haskell
2022-04-14 23:07:49	→	wildsebastian has joined #haskell
2022-04-14 23:07:49	→	Ram-Z has joined #haskell
2022-04-14 23:07:49	→	wrengr has joined #haskell
2022-04-14 23:07:49	→	koz has joined #haskell
2022-04-14 23:07:49	→	SridharRatnakuma has joined #haskell
2022-04-14 23:07:49	→	CATS has joined #haskell
2022-04-14 23:07:49	→	Jon has joined #haskell
2022-04-14 23:07:49	→	marquis_andras has joined #haskell
2022-04-14 23:07:49	→	Buggys has joined #haskell
2022-04-14 23:07:49	→	shane has joined #haskell
2022-04-14 23:07:49	→	SIben has joined #haskell
2022-04-14 23:07:49	→	peutri has joined #haskell
2022-04-14 23:07:49	→	earthy has joined #haskell
2022-04-14 23:07:49	→	leah2 has joined #haskell
2022-04-14 23:07:49	→	sphynx has joined #haskell
2022-04-14 23:07:49	→	pie_ has joined #haskell
2022-04-14 23:07:49	→	beaky has joined #haskell
2022-04-14 23:07:49	→	quintasan has joined #haskell
2022-04-14 23:07:49	→	grgz has joined #haskell
2022-04-14 23:07:49	→	robbert-vdh has joined #haskell
2022-04-14 23:07:49	→	lisq has joined #haskell
2022-04-14 23:07:49	→	siers has joined #haskell
2022-04-14 23:07:49	→	davl has joined #haskell
2022-04-14 23:07:49	→	polux has joined #haskell
2022-04-14 23:07:49	→	renzhi has joined #haskell
2022-04-14 23:07:49	→	lawt has joined #haskell
2022-04-14 23:07:49	→	Me-me has joined #haskell
2022-04-14 23:07:49	→	fryguybob has joined #haskell
2022-04-14 23:07:49	→	tired has joined #haskell
2022-04-14 23:07:49	→	jamestmartin has joined #haskell
2022-04-14 23:07:49	→	p3n has joined #haskell
2022-04-14 23:07:49	→	Katarushisu has joined #haskell
2022-04-14 23:07:49	→	andjjj23_ has joined #haskell
2022-04-14 23:07:49	→	mcglk has joined #haskell
2022-04-14 23:07:49	→	sabx has joined #haskell
2022-04-14 23:07:49	→	sayola1 has joined #haskell
2022-04-14 23:07:49	→	melonai has joined #haskell
2022-04-14 23:07:49	→	ario has joined #haskell
2022-04-14 23:07:49	→	fiddlerwoaroof has joined #haskell
2022-04-14 23:07:49	→	simpleauthority has joined #haskell
2022-04-14 23:07:49	→	dfg has joined #haskell
2022-04-14 23:07:49	→	haritz has joined #haskell
2022-04-14 23:07:49	→	Goodbye_Vincent has joined #haskell
2022-04-14 23:07:49	→	res0nat0r0844 has joined #haskell
2022-04-14 23:07:49	→	Inst[m] has joined #haskell
2022-04-14 23:07:49	→	Ekho has joined #haskell
2022-04-14 23:07:49	→	wz1000 has joined #haskell
2022-04-14 23:07:49	→	hltk has joined #haskell
2022-04-14 23:07:49	→	haveo has joined #haskell
2022-04-14 23:07:49	→	sshine has joined #haskell
2022-04-14 23:07:49	→	meejah has joined #haskell
2022-04-14 23:07:49	→	noctuks has joined #haskell
2022-04-14 23:07:49	→	absence has joined #haskell
2022-04-14 23:07:49	→	Unode has joined #haskell
2022-04-14 23:07:49	→	kawen has joined #haskell
2022-04-14 23:07:49	→	exarkun has joined #haskell
2022-04-14 23:07:49	→	omantere has joined #haskell
2022-04-14 23:07:49	→	red-snail has joined #haskell
2022-04-14 23:07:49	→	WhateverRabbit has joined #haskell
2022-04-14 23:07:49	→	vgtw has joined #haskell
2022-04-14 23:07:49	→	Noinia has joined #haskell
2022-04-14 23:07:49	→	SoF has joined #haskell
2022-04-14 23:07:49	→	MironZ has joined #haskell
2022-04-14 23:07:49	→	ft has joined #haskell
2022-04-14 23:07:49	→	nahcetan has joined #haskell
2022-04-14 23:07:49	→	acacia has joined #haskell
2022-04-14 23:07:49	→	drewolson has joined #haskell
2022-04-14 23:07:49	→	micro has joined #haskell
2022-04-14 23:07:49	→	sm[i] has joined #haskell
2022-04-14 23:07:49	→	Adran has joined #haskell
2022-04-14 23:07:49	→	mcfrdy has joined #haskell
2022-04-14 23:07:49	→	remexre has joined #haskell
2022-04-14 23:07:49	→	cln has joined #haskell
2022-04-14 23:07:49	→	flupe has joined #haskell
2022-04-14 23:07:49	→	nckx has joined #haskell
2022-04-14 23:07:49	→	conjunctive has joined #haskell
2022-04-14 23:07:49	→	bbhoss has joined #haskell
2022-04-14 23:07:49	→	rune has joined #haskell
2022-04-14 23:07:49	→	koala_man has joined #haskell
2022-04-14 23:07:49	→	alinab has joined #haskell
2022-04-14 23:07:49	→	aristid has joined #haskell
2022-04-14 23:07:49	→	crameleon has joined #haskell
2022-04-14 23:07:49	→	Dykam has joined #haskell
2022-04-14 23:07:49	→	xstill- has joined #haskell
2022-04-14 23:07:49	→	madnight has joined #haskell
2022-04-14 23:07:49	→	sajith has joined #haskell
2022-04-14 23:07:49	→	hendi has joined #haskell
2022-04-14 23:07:49	→	acertain has joined #haskell
2022-04-14 23:07:49	→	ProofTechnique has joined #haskell
2022-04-14 23:07:49	→	nshepperd2 has joined #haskell
2022-04-14 23:07:49	→	alanz has joined #haskell
2022-04-14 23:07:49	→	acowley has joined #haskell
2022-04-14 23:07:49	→	dexter has joined #haskell
2022-04-14 23:07:49	→	mrianbloom has joined #haskell
2022-04-14 23:07:49	→	teehemkay_ has joined #haskell
2022-04-14 23:07:49	→	sclv has joined #haskell
2022-04-14 23:07:49	→	taktoa[c] has joined #haskell
2022-04-14 23:07:49	→	chessai has joined #haskell
2022-04-14 23:07:49	→	dyniec has joined #haskell
2022-04-14 23:07:49	→	aweinstock has joined #haskell
2022-04-14 23:07:49	→	xdej has joined #haskell
2022-04-14 23:07:49	→	bcoppens has joined #haskell
2022-04-14 23:07:49	→	landonf has joined #haskell
2022-04-14 23:07:49	→	hays has joined #haskell
2022-04-14 23:07:49	→	auri has joined #haskell
2022-04-14 23:07:49	→	srk has joined #haskell
2022-04-14 23:07:49	→	wagle has joined #haskell
2022-04-14 23:07:49	→	AdityaAlok[m] has joined #haskell
2022-04-14 23:07:49	→	x88x88x has joined #haskell
2022-04-14 23:07:49	→	YoungFrog has joined #haskell
2022-04-14 23:07:49	→	yaroot has joined #haskell
2022-04-14 23:07:49	→	kvakil has joined #haskell
2022-04-14 23:07:49	→	jrm has joined #haskell
2022-04-14 23:07:49	→	hughjfchen has joined #haskell
2022-04-14 23:07:49	→	nek0 has joined #haskell
2022-04-14 23:07:49	→	turlando has joined #haskell
2022-04-14 23:07:49	→	mmaruseacph2 has joined #haskell
2022-04-14 23:07:49	→	AkechiShiro has joined #haskell
2022-04-14 23:07:49	→	haasn has joined #haskell
2022-04-14 23:07:49	→	robertm has joined #haskell
2022-04-14 23:07:49	→	dispater has joined #haskell
2022-04-14 23:07:49	→	Hash has joined #haskell
2022-04-14 23:07:49	→	codedmart has joined #haskell
2022-04-14 23:07:49	→	kjak has joined #haskell
2022-04-14 23:07:49	→	megaTherion has joined #haskell
2022-04-14 23:07:49	→	Typedfern has joined #haskell
2022-04-14 23:07:49	→	Unhammer has joined #haskell
2022-04-14 23:07:49	→	mjrosenb has joined #haskell
2022-04-14 23:07:49	→	integral has joined #haskell
2022-04-14 23:07:49	→	amesgen[m] has joined #haskell
2022-04-14 23:07:49	→	Ranhir has joined #haskell
2022-04-14 23:07:49	→	mjacob has joined #haskell
2022-04-14 23:07:49	→	tinwood has joined #haskell
2022-04-14 23:07:49	→	PHO` has joined #haskell
2022-04-14 23:07:49	→	monochrom has joined #haskell
2022-04-14 23:07:49	→	dunj3 has joined #haskell
2022-04-14 23:07:49	→	Zach[m]1 has joined #haskell
2022-04-14 23:07:49	→	glider has joined #haskell
2022-04-14 23:07:49	→	eldritch has joined #haskell
2022-04-14 23:07:49	→	anderson has joined #haskell
2022-04-14 23:07:49	→	jlamothe has joined #haskell
2022-04-14 23:07:49	→	Deide has joined #haskell
2022-04-14 23:07:49	→	dumptruckman has joined #haskell
2022-04-14 23:07:49	→	tafa has joined #haskell
2022-04-14 23:07:49	→	desklamp[m] has joined #haskell
2022-04-14 23:07:49	→	Franciman has joined #haskell
2022-04-14 23:07:49	→	nathansquan[m] has joined #haskell
2022-04-14 23:07:49	→	jiribenes has joined #haskell
2022-04-14 23:07:49	→	noddy has joined #haskell
2022-04-14 23:07:49	→	ddb has joined #haskell
2022-04-14 23:07:49	→	geoduck has joined #haskell
2022-04-14 23:07:49	→	dpratt has joined #haskell
2022-04-14 23:07:49	→	hook54321 has joined #haskell
2022-04-14 23:07:49	→	ysh has joined #haskell
2022-04-14 23:07:49	→	megeve has joined #haskell
2022-04-14 23:07:49	→	kaskal has joined #haskell
2022-04-14 23:07:49	→	lambdap2 has joined #haskell
2022-04-14 23:07:49	→	dibblego has joined #haskell
2022-04-14 23:07:49	→	nf has joined #haskell
2022-04-14 23:07:49	→	Moyst_ has joined #haskell
2022-04-14 23:07:49	→	jaror[m] has joined #haskell
2022-04-14 23:07:49	→	Las[m] has joined #haskell
2022-04-14 23:07:49	→	corisco[m] has joined #haskell
2022-04-14 23:07:49	→	sjanssen has joined #haskell
2022-04-14 23:07:49	→	ThadeuPaula[m] has joined #haskell
2022-04-14 23:07:49	→	oak- has joined #haskell
2022-04-14 23:07:49	→	AdamS[m] has joined #haskell
2022-04-14 23:07:49	→	weeezes[m] has joined #haskell
2022-04-14 23:07:49	→	o1lo0lol1o[m] has joined #haskell
2022-04-14 23:07:49	→	cdsmith has joined #haskell
2022-04-14 23:07:49	→	hughjfchen[m] has joined #haskell
2022-04-14 23:07:49	→	kevin[m] has joined #haskell
2022-04-14 23:07:49	→	justosophy[m] has joined #haskell
2022-04-14 23:07:49	→	charukiewicz[m] has joined #haskell
2022-04-14 23:07:49	→	boxscape has joined #haskell
2022-04-14 23:07:49	→	Ash[m] has joined #haskell
2022-04-14 23:07:49	→	aviladev[m] has joined #haskell
2022-04-14 23:07:49	→	eddiemundo has joined #haskell
2022-04-14 23:07:49	→	ArshiaAghaei[m] has joined #haskell
2022-04-14 23:07:49	→	ac has joined #haskell
2022-04-14 23:07:49	→	TimothyBess[m] has joined #haskell
2022-04-14 23:07:49	→	nomagno has joined #haskell
2022-04-14 23:07:49	→	abastro[m] has joined #haskell
2022-04-14 23:07:49	→	tsmc[m] has joined #haskell
2022-04-14 23:07:49	→	kadoban has joined #haskell
2022-04-14 23:07:49	→	Arathorn has joined #haskell
2022-04-14 23:07:49	→	polykernel[m] has joined #haskell
2022-04-14 23:07:49	→	yosef36 has joined #haskell
2022-04-14 23:07:49	→	jneira[m] has joined #haskell
2022-04-14 23:07:49	→	euphrates[m] has joined #haskell
2022-04-14 23:07:49	→	kalxd[m] has joined #haskell
2022-04-14 23:07:49	→	Guillaum[m] has joined #haskell
2022-04-14 23:07:49	→	ormaaj has joined #haskell
2022-04-14 23:07:49	→	moats has joined #haskell
2022-04-14 23:07:49	→	jinsun_ has joined #haskell
2022-04-14 23:07:49	→	maerwald[m] has joined #haskell
2022-04-14 23:07:49	→	jmcantrell has joined #haskell
2022-04-14 23:07:49	→	DemiMarieObenour has joined #haskell
2022-04-14 23:07:49	→	fendor[m] has joined #haskell
2022-04-14 23:07:49	→	kadenwolff[m] has joined #haskell
2022-04-14 23:07:49	→	july541[m] has joined #haskell
2022-04-14 23:07:49	→	smichel17[m] has joined #haskell
2022-04-14 23:07:49	→	siraben has joined #haskell
2022-04-14 23:07:49	→	Christoph[m] has joined #haskell
2022-04-14 23:07:49	→	alexfmpe[m] has joined #haskell
2022-04-14 23:07:49	→	ongy[m] has joined #haskell
2022-04-14 23:07:49	→	psydroid has joined #haskell
2022-04-14 23:07:49	→	Artem[m] has joined #haskell
2022-04-14 23:07:49	→	hsiktas[m] has joined #haskell
2022-04-14 23:07:49	→	Yehoshua has joined #haskell
2022-04-14 23:07:49	→	marinelli[m] has joined #haskell
2022-04-14 23:07:49	→	maralorn has joined #haskell
2022-04-14 23:07:49	→	ericson2314 has joined #haskell
2022-04-14 23:07:49	→	zfnmxt has joined #haskell
2022-04-14 23:07:49	→	Orbstheorem has joined #haskell
2022-04-14 23:07:49	→	VarikValefor[m] has joined #haskell
2022-04-14 23:07:49	→	juhp[m] has joined #haskell
2022-04-14 23:07:49	→	feetwind has joined #haskell
2022-04-14 23:07:49	→	Philonous has joined #haskell
2022-04-14 23:07:49	→	thaumavorio has joined #haskell
2022-04-14 23:07:49	→	bastelfreak has joined #haskell
2022-04-14 23:07:49	→	greenbourne277 has joined #haskell
2022-04-14 23:07:49	→	cross has joined #haskell
2022-04-14 23:07:49	→	akhesacaro has joined #haskell
2022-04-14 23:07:49	→	ncopa has joined #haskell
2022-04-14 23:07:49	→	Jonno_FTW has joined #haskell
2022-04-14 23:07:49	→	joeyh has joined #haskell
2022-04-14 23:07:49	→	Rembane has joined #haskell
2022-04-14 23:07:49	→	c_wraith has joined #haskell
2022-04-14 23:07:49	→	hiredman has joined #haskell
2022-04-14 23:07:49	→	PapuaHardyNet has joined #haskell
2022-04-14 23:07:49	→	mjs2600 has joined #haskell
2022-04-14 23:07:49	→	DigitalKiwi has joined #haskell
2022-04-14 23:07:49	→	mrmonday has joined #haskell
2022-04-14 23:07:49	→	yushyin has joined #haskell
2022-04-14 23:07:49	→	s4msung has joined #haskell
2022-04-14 23:07:49	→	lagooned has joined #haskell
2022-04-14 23:07:49	→	Igloo has joined #haskell
2022-04-14 23:07:49	→	ymherklotz has joined #haskell
2022-04-14 23:07:49	→	liskin has joined #haskell
2022-04-14 23:07:49	→	n3t has joined #haskell
2022-04-14 23:07:49	→	meinside has joined #haskell
2022-04-14 23:07:49	→	loonycyborg has joined #haskell
2022-04-14 23:07:49	→	pieguy128 has joined #haskell
2022-04-14 23:07:49	→	Inoperable has joined #haskell
2022-04-14 23:07:49	→	remedan has joined #haskell
2022-04-14 23:07:49	→	mrkajetanp has joined #haskell
2022-04-14 23:07:49	→	thonkpod_ has joined #haskell
2022-04-14 23:07:49	→	burakcank has joined #haskell
2022-04-14 23:07:49	→	nonzen_ has joined #haskell
2022-04-14 23:07:49	→	_\_ has joined #haskell
2022-04-14 23:07:49	→	Logio_ has joined #haskell
2022-04-14 23:07:49	→	drdo has joined #haskell
2022-04-14 23:07:49	→	nshepperd has joined #haskell
2022-04-14 23:07:49	→	canta has joined #haskell
2022-04-14 23:07:49	→	yahb has joined #haskell
2022-04-14 23:07:49	→	kst has joined #haskell
2022-04-14 23:07:49	→	edr has joined #haskell
2022-04-14 23:07:49	→	|beowulf| has joined #haskell
2022-04-14 23:07:49	→	kraftwerk28 has joined #haskell
2022-04-14 23:07:49	→	arkeet has joined #haskell
2022-04-14 23:07:49	→	riatre has joined #haskell
2022-04-14 23:07:49	→	incertia has joined #haskell
2022-04-14 23:07:49	→	TimWolla has joined #haskell
2022-04-14 23:07:49	→	eagleflo has joined #haskell
2022-04-14 23:07:49	→	RSBach has joined #haskell
2022-04-14 23:07:49	→	iphy has joined #haskell
2022-04-14 23:07:49	→	carbolymer has joined #haskell
2022-04-14 23:07:49	→	piele has joined #haskell
2022-04-14 23:07:49	→	farn has joined #haskell
2022-04-14 23:07:49	→	Clint has joined #haskell
2022-04-14 23:07:49	→	cocreature has joined #haskell
2022-04-14 23:07:49	→	litharge has joined #haskell
2022-04-14 23:07:49	→	barrucadu has joined #haskell
2022-04-14 23:07:49	→	philpax_ has joined #haskell
2022-04-14 23:07:49	→	edwardk has joined #haskell
2022-04-14 23:07:49	→	mustafa has joined #haskell
2022-04-14 23:07:49	→	glowcoil has joined #haskell
2022-04-14 23:07:49	→	astra has joined #haskell
2022-04-14 23:07:49	→	hubvu_ has joined #haskell
2022-04-14 23:07:49	→	ByronJohnson has joined #haskell
2022-04-14 23:07:49	→	tchakka has joined #haskell
2022-04-14 23:07:49	→	qhong has joined #haskell
2022-04-14 23:07:49	→	int-e has joined #haskell
2022-04-14 23:07:49	→	forell has joined #haskell
2022-04-14 23:07:49	→	tolt has joined #haskell
2022-04-14 23:07:49	→	tomboy64 has joined #haskell
2022-04-14 23:07:49	→	pranaysashank has joined #haskell
2022-04-14 23:07:49	→	jleightcap has joined #haskell
2022-04-14 23:07:49	→	Ankhers has joined #haskell
2022-04-14 23:07:49	→	raghavgururajan has joined #haskell
2022-04-14 23:07:49	→	sm2n has joined #haskell
2022-04-14 23:07:49	→	shreyasminocha has joined #haskell
2022-04-14 23:07:49	→	tdmm has joined #haskell
2022-04-14 23:07:49	→	jkoshy has joined #haskell
2022-04-14 23:07:49	→	evanrelf has joined #haskell
2022-04-14 23:07:49	→	fluffyballoon has joined #haskell
2022-04-14 23:07:49	→	jakzale has joined #haskell
2022-04-14 23:07:49	→	dawdler has joined #haskell
2022-04-14 23:07:49	→	lukec has joined #haskell
2022-04-14 23:07:49	→	bsima1 has joined #haskell
2022-04-14 23:07:49	→	samhh has joined #haskell
2022-04-14 23:07:49	→	filwisher has joined #haskell
2022-04-14 23:07:49	→	nurupo has joined #haskell
2022-04-14 23:07:49	→	flukiluke has joined #haskell
2022-04-14 23:07:49	→	tdammers has joined #haskell
2022-04-14 23:07:49	→	tomjaguarpaw has joined #haskell
2022-04-14 23:07:49	→	Hobbyboy has joined #haskell
2022-04-14 23:07:49	→	edmundnoble has joined #haskell
2022-04-14 23:07:49	→	b20n has joined #haskell
2022-04-14 23:07:49	→	aarchi has joined #haskell
2022-04-14 23:07:49	→	dmj` has joined #haskell
2022-04-14 23:07:49	→	truckasaurus has joined #haskell
2022-04-14 23:07:49	→	NemesisD has joined #haskell
2022-04-14 23:07:49	→	gmc has joined #haskell
2022-04-14 23:07:49	→	degraafk has joined #haskell
2022-04-14 23:07:49	→	parseval has joined #haskell
2022-04-14 23:07:49	→	saolsen has joined #haskell
2022-04-14 23:07:49	→	amir has joined #haskell
2022-04-14 23:07:49	→	tnks has joined #haskell
2022-04-14 23:07:49	→	bradparker has joined #haskell
2022-04-14 23:07:49	→	gregberns__ has joined #haskell
2022-04-14 23:07:49	→	andreas303 has joined #haskell
2022-04-14 23:07:49	→	xacktm has joined #haskell
2022-04-14 23:07:49	→	chronon has joined #haskell
2022-04-14 23:07:49	→	jjhoo has joined #haskell
2022-04-14 23:07:49	→	abrar_ has joined #haskell
2022-04-14 23:07:49	→	ouroboros has joined #haskell
2022-04-14 23:07:49	→	stvc has joined #haskell
2022-04-14 23:07:49	→	V has joined #haskell
2022-04-14 23:07:49	→	byorgey has joined #haskell
2022-04-14 23:07:49	→	edwtjo has joined #haskell
2022-04-14 23:07:49	→	jackhill has joined #haskell
2022-04-14 23:07:49	→	gonz_____ has joined #haskell
2022-04-14 23:07:49	→	carter has joined #haskell
2022-04-14 23:07:49	→	jonrh has joined #haskell
2022-04-14 23:07:49	→	nrr___ has joined #haskell
2022-04-14 23:07:49	→	supersven has joined #haskell
2022-04-14 23:07:49	→	sooch_ has joined #haskell
2022-04-14 23:07:49	→	hugo has joined #haskell
2022-04-14 23:07:49	→	dsal has joined #haskell
2022-04-14 23:07:49	→	lally has joined #haskell
2022-04-14 23:07:49	→	rubin55 has joined #haskell
2022-04-14 23:07:49	→	lexi-lambda has joined #haskell
2022-04-14 23:07:49	→	ehamberg has joined #haskell
2022-04-14 23:07:49	→	SanchayanMaity has joined #haskell
2022-04-14 23:07:49	→	Firedancer has joined #haskell
2022-04-14 23:07:49	→	S11001001 has joined #haskell
2022-04-14 23:07:49	→	bjobjo has joined #haskell
2022-04-14 23:07:49	→	Arsen has joined #haskell
2022-04-14 23:07:49	→	teddyc has joined #haskell
2022-04-14 23:07:49	→	maerwald has joined #haskell
2022-04-14 23:07:49	→	totte has joined #haskell
2022-04-14 23:07:49	→	bollu has joined #haskell
2022-04-14 23:07:49	→	tv has joined #haskell
2022-04-14 23:07:49	→	kaol has joined #haskell
2022-04-14 23:07:49	→	nerdypepper has joined #haskell
2022-04-14 23:07:49	→	cls has joined #haskell
2022-04-14 23:07:49	→	TMA has joined #haskell
2022-04-14 23:07:49	→	telser has joined #haskell
2022-04-14 23:07:49	→	thebnq has joined #haskell
2022-04-14 23:07:49	→	jeffz has joined #haskell
2022-04-14 23:07:49	→	xnbya has joined #haskell
2022-04-14 23:07:49	→	Hecate has joined #haskell
2022-04-14 23:07:49	→	enemeth79 has joined #haskell
2022-04-14 23:07:49	→	myme has joined #haskell
2022-04-14 23:07:49	→	bbear has joined #haskell
2022-04-14 23:07:49	→	emergence has joined #haskell
2022-04-14 23:07:49	→	raoul has joined #haskell
2022-04-14 23:07:49	→	bwe has joined #haskell
2022-04-14 23:07:49	→	dkeohane2 has joined #haskell
2022-04-14 23:07:49	→	davean has joined #haskell
2022-04-14 23:07:49	→	adamCS has joined #haskell
2022-04-14 23:07:49	→	energizer has joined #haskell
2022-04-14 23:07:49	→	clever has joined #haskell
2022-04-14 23:07:49	→	Patternmaster has joined #haskell
2022-04-14 23:07:49	→	xerox has joined #haskell
2022-04-14 23:07:49	→	kitzman has joined #haskell
2022-04-14 23:07:49	→	dagit has joined #haskell
2022-04-14 23:07:49	→	cawfee has joined #haskell
2022-04-14 23:07:49	→	berberman has joined #haskell
2022-04-14 23:07:49	→	ts3 has joined #haskell
2022-04-14 23:07:50	→	kronicma1 has joined #haskell
2022-04-14 23:07:50	→	mht-wtf has joined #haskell
2022-04-14 23:07:50	→	relrod has joined #haskell
2022-04-14 23:07:50	→	tristanC has joined #haskell
2022-04-14 23:07:50	→	marienz__ has joined #haskell
2022-04-14 23:07:50	→	dragestil has joined #haskell
2022-04-14 23:07:50	→	df has joined #haskell
2022-04-14 23:07:50	→	reda_ has joined #haskell
2022-04-14 23:07:50	→	ikke has joined #haskell
2022-04-14 23:07:50	→	tureba has joined #haskell
2022-04-14 23:07:50	→	ChanServ has joined #haskell
2022-04-14 23:07:50	→	welterde has joined #haskell
2022-04-14 23:07:50	→	pierrot has joined #haskell
2022-04-14 23:07:50	→	Sqaure has joined #haskell
2022-04-14 23:07:50	→	Vq has joined #haskell
2022-04-14 23:07:50	→	ldlework has joined #haskell
2022-04-14 23:07:50	ℹ	Mode #haskell [+o ChanServ] by strontium.libera.chat
2022-04-14 23:07:53	←	finsternis has quit (Max SendQ exceeded)
2022-04-14 23:07:53	←	wolfshappen has quit (Max SendQ exceeded)
2022-04-14 23:08:10	→	wolfshappen has joined #haskell
2022-04-14 23:08:35	→	finsternis has joined #haskell
2022-04-14 23:08:49	←	ishaan has quit (Quit: Client closed)
2022-04-14 23:08:56	→	dextaa has joined #haskell
2022-04-14 23:09:49	→	kaph has joined #haskell
2022-04-14 23:10:11	→	vicfred has joined #haskell
2022-04-14 23:10:43	→	asm has joined #haskell
2022-04-14 23:11:00	→	APic has joined #haskell
2022-04-14 23:11:10	→	coot has joined #haskell
2022-04-14 23:11:10	→	anomal has joined #haskell
2022-04-14 23:11:10	→	lyxia has joined #haskell
2022-04-14 23:11:13	→	drewr has joined #haskell
2022-04-14 23:12:52	→	Putonlalla has joined #haskell
2022-04-14 23:12:58	→	kaph_ has joined #haskell
2022-04-14 23:13:02	→	MajorBiscuit has joined #haskell
2022-04-14 23:13:05	←	kaph has quit (Read error: Connection reset by peer)
2022-04-14 23:15:12	←	kaph_ has quit (Read error: Connection reset by peer)
2022-04-14 23:15:14	→	kaph has joined #haskell
2022-04-14 23:15:18	→	Tisoxin has joined #haskell
2022-04-14 23:16:16	→	niemand has joined #haskell
2022-04-14 23:16:20	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-14 23:16:32	→	Vajb has joined #haskell
2022-04-14 23:16:57	→	ishaan has joined #haskell
2022-04-14 23:17:34	→	MrLi has joined #haskell
2022-04-14 23:18:25	←	MrLi has quit (Client Quit)
2022-04-14 23:18:56	←	vysn has quit (Ping timeout: 260 seconds)
2022-04-14 23:20:01	←	kaph has quit (Ping timeout: 250 seconds)
2022-04-14 23:20:48	→	haskellberryfinn has joined #haskell
2022-04-14 23:22:46	←	tmo24 has quit (Remote host closed the connection)
2022-04-14 23:23:03	→	tmo24 has joined #haskell
2022-04-14 23:23:53	←	dextaa has quit (Ping timeout: 272 seconds)
2022-04-14 23:28:48	←	ptrcmd_ has quit (Ping timeout: 248 seconds)
2022-04-14 23:29:20	←	zyklotom1 has quit (Ping timeout: 248 seconds)
2022-04-14 23:30:30	←	niemand has quit (Quit: Connection closed)
2022-04-14 23:30:54	→	eggplantade has joined #haskell
2022-04-14 23:31:17	→	zyklotom1 has joined #haskell
2022-04-14 23:33:06	→	niemand has joined #haskell
2022-04-14 23:33:56	←	FinnElija has quit (Ping timeout: 240 seconds)
2022-04-14 23:34:01	→	arjun has joined #haskell
2022-04-14 23:34:34	→	ptrcmd has joined #haskell
2022-04-14 23:35:36	←	ec has quit (Ping timeout: 240 seconds)
2022-04-14 23:36:37	→	FinnElija has joined #haskell
2022-04-14 23:41:50	←	tmo24 has quit (Remote host closed the connection)
2022-04-14 23:42:07	→	tmo24 has joined #haskell
2022-04-14 23:47:54	←	tmo24 has quit (Remote host closed the connection)
2022-04-14 23:48:03	→	axeman has joined #haskell
2022-04-14 23:48:11	→	tmo24 has joined #haskell
2022-04-14 23:49:17	→	xkuru has joined #haskell
2022-04-14 23:49:54	←	haskellberryfinn has quit (Ping timeout: 250 seconds)
2022-04-14 23:50:58	hololeap	it looks like changing the line endings of a .cabal file changes the hash string on the resulting .so library file
2022-04-14 23:52:02	hololeap	so does this mean the hashing algorithm just uses a byte-by-byte encoding of the .cabal file, rather than some logical parsing of the contents?
2022-04-14 23:52:40	←	anomal has quit (Remote host closed the connection)
2022-04-14 23:52:59	→	anomal has joined #haskell
2022-04-14 23:53:01	←	MajorBiscuit has quit (Ping timeout: 272 seconds)
2022-04-14 23:53:08	→	Codaraxis has joined #haskell
2022-04-14 23:55:44	hololeap	I could be wrong here, something else might have changed the hash, but I'm not sure what...
2022-04-14 23:56:31	glguy	just hashing the file bytes seems like the most likely approach
2022-04-14 23:58:18	←	tmo24 has quit (Remote host closed the connection)
2022-04-14 23:58:19	geekosaur	I think it's not supposed to be that simple: cabal distinguishes between options that change the generated objects and those that don't
2022-04-14 23:58:35	→	tmo24 has joined #haskell
2022-04-14 23:58:52	geekosaur	plus versions etc.
2022-04-14 23:59:01	geekosaur	this might be a question for #hackage
2022-04-14 23:59:20	hololeap	ok
2022-04-15 00:02:12	←	tmo24 has quit (Remote host closed the connection)
2022-04-15 00:02:29	→	tmo24 has joined #haskell
2022-04-15 00:06:34	←	arjun has quit (Remote host closed the connection)
2022-04-15 00:06:41	←	vicfred has quit (Quit: Leaving)
2022-04-15 00:07:27	←	niemand has quit (Quit: Connection closed)
2022-04-15 00:07:44	←	eggplantade has quit (Remote host closed the connection)
2022-04-15 00:08:44	sclv	its not clear to me why a cabal file would be hashed into an so at all? the latter is ghc and the former is cabal
2022-04-15 00:09:43	sclv	and certainly the calculated component hash uses a data structure and not raw bytes
2022-04-15 00:10:45	←	redb has quit (Ping timeout: 272 seconds)
2022-04-15 00:10:51	→	bahamas has joined #haskell
2022-04-15 00:12:04	hololeap	I can't reproduce it now. _something_ changed the hash for a package and the only difference I saw was running dos2unix on the .cabal file, but now it is keeping the same hash even on a freshly fetched project directory
2022-04-15 00:12:20	→	redb has joined #haskell
2022-04-15 00:12:53	←	mbuf has quit (Quit: Leaving)
2022-04-15 00:12:54	hololeap	this was not a package that showed up when running `ghc-pkg check`, so I don't know what could have changed... is there possibly a debug setting that shows how the hash is calculated?
2022-04-15 00:14:47	←	tmo24 has quit (Remote host closed the connection)
2022-04-15 00:15:02	hololeap	I can try looking in the ghc docs or asking in #ghc, but what is the technical name for this hash I'm referring to?
2022-04-15 00:15:04	→	tmo24 has joined #haskell
2022-04-15 00:16:46	←	redb has quit (Ping timeout: 250 seconds)
2022-04-15 00:20:50	←	tmo24 has quit (Remote host closed the connection)
2022-04-15 00:21:07	→	tmo24 has joined #haskell
2022-04-15 00:21:59	→	redb has joined #haskell
2022-04-15 00:23:12	ℹ	Zemyla_ is now known as Zemyla
2022-04-15 00:24:36	geekosaur	ABI hash
2022-04-15 00:25:19	geekosaur	I believe ghc computes it from the object and .hi files, and doesn't even know about the cabal file
2022-04-15 00:25:53	←	alp_ has quit (Ping timeout: 248 seconds)
2022-04-15 00:27:34	→	MajorBiscuit has joined #haskell
2022-04-15 00:28:38	←	anomal has quit (Remote host closed the connection)
2022-04-15 00:28:56	→	anomal has joined #haskell
2022-04-15 00:29:27	←	redb has quit (Ping timeout: 240 seconds)
2022-04-15 00:30:19	hololeap	ok, that's good
2022-04-15 00:30:48	←	jakalx has left #haskell (Error from remote client)
2022-04-15 00:31:30	→	jakalx has joined #haskell
2022-04-15 00:32:04	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-15 00:32:16	→	Vajb has joined #haskell
2022-04-15 00:32:26	sclv	i think this is the code one would want to look at https://hackage.haskell.org/package/Cabal-3.6.3.0/docs/src/Distribution.Simple.GHC.html#libAbiHash
2022-04-15 00:32:56	→	redb has joined #haskell
2022-04-15 00:33:48	sclv	actually wait that's just cabal reinvoking ghc, sigh
2022-04-15 00:34:27	→	vicfred has joined #haskell
2022-04-15 00:36:03	sclv	the ghc code for computing the actual abi hash of an so in particular seems to be a bit hard to pin down. it may be done incrementally in various places
2022-04-15 00:36:28	←	epolanski has quit (Quit: Connection closed for inactivity)
2022-04-15 00:37:15	←	tmo24 has left #haskell
2022-04-15 00:38:43	←	redb has quit (Ping timeout: 260 seconds)
2022-04-15 00:39:55	→	redb has joined #haskell
2022-04-15 00:40:31	←	ishaan has quit (Quit: Client closed)
2022-04-15 00:44:15	→	robosexual- has joined #haskell
2022-04-15 00:44:19	←	redb has quit (Ping timeout: 260 seconds)
2022-04-15 00:44:40	←	robosexual- has quit (Client Quit)
2022-04-15 00:46:15	→	redb has joined #haskell
2022-04-15 00:46:25	energizer	is there an AVX-512 foldr?
2022-04-15 00:46:28	→	kaph has joined #haskell
2022-04-15 00:46:40	←	bahamas has quit (Ping timeout: 250 seconds)
2022-04-15 00:48:45	[exa]	how'd that work?
2022-04-15 00:49:01	→	niemand has joined #haskell
2022-04-15 00:49:52	energizer	s/foldr/fold/
2022-04-15 00:50:29	energizer	replacing individual steps with a batch of steps
2022-04-15 00:51:36	niemand	(GHC) Haskell doesn't first compare the pointers when testing lists on equality, does it?
2022-04-15 00:54:09	→	merijn has joined #haskell
2022-04-15 00:57:01	→	alp_ has joined #haskell
2022-04-15 00:57:03	←	redb has quit (Ping timeout: 256 seconds)
2022-04-15 00:57:28	sclv	absolutely not
2022-04-15 00:58:28	geekosaur	% let l = [traceShowId 'a', traceShowId 'b'] in l == l
2022-04-15 00:58:28	yahb	geekosaur: 'a'; 'b'; True
2022-04-15 00:58:48	←	merijn has quit (Ping timeout: 250 seconds)
2022-04-15 00:58:49	geekosaur	comparing pointers is a bit unsafe since a gc may happen
2022-04-15 00:59:42	geekosaur	energizer, I think nothing uses AVX as yet except possibly some libraries like Accelerate
2022-04-15 01:02:41	→	hololeap_ has joined #haskell
2022-04-15 01:03:10	→	rawley has joined #haskell
2022-04-15 01:03:36	←	hololeap has quit (Ping timeout: 240 seconds)
2022-04-15 01:04:48	niemand	kk
2022-04-15 01:05:45	[exa]	energizer: it might make sense as a specialization in very specific cases (eg. on vectors of unboxed stuff), but certainly I wouldn't expect the traditional list-ish fold to benefit from any SIMD
2022-04-15 01:06:20	niemand	I wondered if this was this case, since I made an optimization on my code under the assumption that it compares the value but it didn't get noticeable faster
2022-04-15 01:07:09	niemand	(though there are other areas that could be the bottleneck)
2022-04-15 01:07:20	→	zincy has joined #haskell
2022-04-15 01:08:25	→	eggplantade has joined #haskell
2022-04-15 01:08:42	ℹ	hololeap_ is now known as hololeap
2022-04-15 01:09:12	→	redb has joined #haskell
2022-04-15 01:10:20	→	Pickchea has joined #haskell
2022-04-15 01:10:27	←	niemand has quit (Quit: Connection closed)
2022-04-15 01:12:55	←	eggplantade has quit (Ping timeout: 256 seconds)
2022-04-15 01:13:32	←	redb has quit (Ping timeout: 250 seconds)
2022-04-15 01:15:05	→	pnotequalnp has joined #haskell
2022-04-15 01:16:35	→	jgeerds has joined #haskell
2022-04-15 01:22:33	←	renzhi has quit (Ping timeout: 260 seconds)
2022-04-15 01:24:48	→	jhagborg has joined #haskell
2022-04-15 01:30:15	Zemyla	geekosaur: Other languages can compare pointers while having gc. Why not GHC?
2022-04-15 01:30:43	→	redb has joined #haskell
2022-04-15 01:30:56	→	zeenk has joined #haskell
2022-04-15 01:34:47	←	redb has quit (Ping timeout: 240 seconds)
2022-04-15 01:34:47	←	_ht_ has quit (Remote host closed the connection)
2022-04-15 01:35:06	→	renzhi has joined #haskell
2022-04-15 01:35:24	←	robosexual has quit (Quit: WeeChat 3.4)
2022-04-15 01:37:10	geekosaur	can they gc in the middle of an operation because some other thread allocated? (python, for instance, can't trigger this)
2022-04-15 01:37:13	→	justsomeguy has joined #haskell
2022-04-15 01:37:20	←	Unicorn_Princess has quit (Remote host closed the connection)
2022-04-15 01:38:25	dolio	Can't the unsafe pointer equality only give false negatives? Or am I forgetting?
2022-04-15 01:38:41	→	redb has joined #haskell
2022-04-15 01:39:00	→	wroathe has joined #haskell
2022-04-15 01:39:00	←	wroathe has quit (Changing host)
2022-04-15 01:39:00	→	wroathe has joined #haskell
2022-04-15 01:39:07	→	Guest27 has joined #haskell
2022-04-15 01:40:08	ℹ	Athas_ is now known as Athas
2022-04-15 01:40:20	dolio	Not that I'm an advocate for using it on all comparisons.
2022-04-15 01:40:40	geekosaur	it could be a false positive if something in gen1 or later gets moved in just the right way
2022-04-15 01:40:49	geekosaur	this should be fairly rare, but possible
2022-04-15 01:43:15	dolio	The docs aren't very specific.
2022-04-15 01:44:48	←	jhagborg has quit (Ping timeout: 248 seconds)
2022-04-15 01:44:59	←	redb has quit (Ping timeout: 260 seconds)
2022-04-15 01:45:12	[exa]	this would require == to be a primitive operation, right?
2022-04-15 01:45:27	←	wroathe has quit (Ping timeout: 260 seconds)
2022-04-15 01:46:08	dolio	Yeah, it'd probably mean you'd define structural equality in the Eq class, and then (==) would be a wrapper, if you wanted it to happen for everything.
2022-04-15 01:46:23	[exa]	also, what should the magic == say when comparing 2 same-pointer thunks and (philosophically more intense:) 2 same-pointer functions?
2022-04-15 01:46:33	→	redb has joined #haskell
2022-04-15 01:46:39	←	dhouthoo has quit (Quit: WeeChat 3.5)
2022-04-15 01:46:48	→	hololeap_ has joined #haskell
2022-04-15 01:47:56	←	hololeap has quit (Ping timeout: 240 seconds)
2022-04-15 01:49:29	ℹ	hololeap_ is now known as hololeap
2022-04-15 01:50:42	[exa]	finally, since there can be 2 equal things with different pointers, you'd need to be prepared for false negatives anyway-- so why not do the same in a less unsafe way by e.g. hashing the subtree in each object and safely quickfailing on hash inequality?
2022-04-15 01:52:00	←	redb has quit (Ping timeout: 260 seconds)
2022-04-15 01:52:31	→	redb has joined #haskell
2022-04-15 01:52:48	←	califax has quit (Remote host closed the connection)
2022-04-15 01:53:05	→	califax has joined #haskell
2022-04-15 01:55:13	→	Lord_of_Life_ has joined #haskell
2022-04-15 01:55:59	←	Lord_of_Life has quit (Ping timeout: 256 seconds)
2022-04-15 01:56:00	←	deadmarshal_ has quit (Ping timeout: 248 seconds)
2022-04-15 01:58:00	ℹ	Lord_of_Life_ is now known as Lord_of_Life
2022-04-15 01:58:32	→	jhagborg has joined #haskell
2022-04-15 02:00:36	←	hololeap has quit (Ping timeout: 240 seconds)
2022-04-15 02:02:06	←	Guest27 has quit (Quit: Client closed)
2022-04-15 02:05:13	→	hololeap has joined #haskell
2022-04-15 02:09:41	→	eggplantade has joined #haskell
2022-04-15 02:09:56	←	hololeap has quit (Ping timeout: 240 seconds)
2022-04-15 02:11:15	→	stackdroid18 has joined #haskell
2022-04-15 02:12:24	→	hololeap has joined #haskell
2022-04-15 02:13:10	→	dsrt^ has joined #haskell
2022-04-15 02:14:24	←	eggplantade has quit (Ping timeout: 260 seconds)
2022-04-15 02:15:35	→	acidjnk has joined #haskell
2022-04-15 02:16:21	←	Codaraxis has quit (Remote host closed the connection)
2022-04-15 02:16:23	←	kaph has quit (Ping timeout: 256 seconds)
2022-04-15 02:16:40	→	Codaraxis has joined #haskell
2022-04-15 02:19:08	←	redb has quit (Ping timeout: 260 seconds)
2022-04-15 02:20:19	←	Codaraxis has quit (Remote host closed the connection)
2022-04-15 02:20:54	→	neurocyte8614492 has joined #haskell
2022-04-15 02:20:54	←	neurocyte8614492 has quit (Changing host)
2022-04-15 02:20:54	→	neurocyte8614492 has joined #haskell
2022-04-15 02:21:09	→	deadmarshal_ has joined #haskell
2022-04-15 02:23:15	←	zincy has quit (Remote host closed the connection)
2022-04-15 02:24:59	→	redb has joined #haskell
2022-04-15 02:25:28	←	deadmarshal_ has quit (Ping timeout: 250 seconds)
2022-04-15 02:28:24	←	justsomeguy has quit (Quit: WeeChat 3.4)
2022-04-15 02:30:06	→	kawzeg has joined #haskell
2022-04-15 02:30:11	→	pretty_dumm_guy has joined #haskell
2022-04-15 02:33:27	←	coot has quit (Quit: coot)
2022-04-15 02:35:17	→	kenran has joined #haskell
2022-04-15 02:37:05	←	pnotequalnp has quit (Quit: Client closed)
2022-04-15 02:37:22	→	pnotequalnp has joined #haskell
2022-04-15 02:47:10	←	jackson99 has quit (Quit: CGI:IRC (Session timeout))
2022-04-15 02:47:16	ℹ	Maxdaman1us is now known as Maxdamantus
2022-04-15 02:47:27	←	axeman has quit (Ping timeout: 240 seconds)
2022-04-15 02:48:07	←	bontaq has quit (Remote host closed the connection)
2022-04-15 02:48:31	←	rawley has quit (Remote host closed the connection)
2022-04-15 02:50:34	→	kaph has joined #haskell
2022-04-15 02:52:00	←	MajorBiscuit has quit (Ping timeout: 248 seconds)
2022-04-15 02:53:11	←	azimut has quit (Remote host closed the connection)
2022-04-15 02:53:51	→	MajorBiscuit has joined #haskell
2022-04-15 02:54:02	→	azimut has joined #haskell
2022-04-15 02:54:30	←	Pickchea has quit (Quit: Leaving)
2022-04-15 02:55:04	←	Techcable has quit (Remote host closed the connection)
2022-04-15 02:56:38	→	Techcable has joined #haskell
2022-04-15 02:59:24	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-15 02:59:30	→	haskellberryfinn has joined #haskell
2022-04-15 03:03:17	←	jhagborg has quit (Remote host closed the connection)
2022-04-15 03:03:21	←	michalz has quit (Remote host closed the connection)
2022-04-15 03:03:41	→	jhagborg has joined #haskell
2022-04-15 03:06:00	→	tromp has joined #haskell
2022-04-15 03:10:01	→	zincy has joined #haskell
2022-04-15 03:10:16	lechner	Hi, what's a common Hackage module with external C library prerequisites, please?
2022-04-15 03:11:37	geekosaur	https://hackage.haskell.org/package/zlib
2022-04-15 03:13:09	←	redb has quit (Ping timeout: 250 seconds)
2022-04-15 03:13:20	←	lemonsni- has quit (Ping timeout: 248 seconds)
2022-04-15 03:13:37	←	jao has quit (Ping timeout: 256 seconds)
2022-04-15 03:14:25	←	zincy has quit (Ping timeout: 248 seconds)
2022-04-15 03:17:35	←	MajorBiscuit has quit (Ping timeout: 256 seconds)
2022-04-15 03:17:45	→	lemonsnicks has joined #haskell
2022-04-15 03:20:07	←	euandreh has quit (Ping timeout: 240 seconds)
2022-04-15 03:21:32	→	euandreh has joined #haskell
2022-04-15 03:22:27	→	Guest27 has joined #haskell
2022-04-15 03:22:28	→	ishaan has joined #haskell
2022-04-15 03:22:50	←	ishaan has quit (Client Quit)
2022-04-15 03:23:22	→	redb has joined #haskell
2022-04-15 03:24:06	Guest27	Is there a function-composition version of <$>? So rather than writing e.g. `k >=> return . f` it'd be something like `f <comp$> k`
2022-04-15 03:24:24	hpc	:t \k f -> k >=> return . f
2022-04-15 03:24:26	lambdabot	Monad m => (a1 -> m a2) -> (a2 -> c) -> a1 -> m c
2022-04-15 03:24:55	lechner	geekosaur: thanks!
2022-04-15 03:24:56	koz	:t flip traverse
2022-04-15 03:24:57	lambdabot	(Traversable t, Applicative f) => t a -> (a -> f b) -> f (t b)
2022-04-15 03:25:24	koz	:t flip traverse [1, 2, 3]
2022-04-15 03:25:26	lambdabot	(Applicative f, Num a) => (a -> f b) -> f [b]
2022-04-15 03:25:36	←	haskellberryfinn has quit (Ping timeout: 248 seconds)
2022-04-15 03:25:54	hpc	:t fmap (.)
2022-04-15 03:25:55	lambdabot	Functor f => f (b -> c) -> f ((a -> b) -> a -> c)
2022-04-15 03:26:08	←	geekosaur has quit (Killed (NickServ (GHOST command used by allbery_b)))
2022-04-15 03:26:08	→	allbery_b has joined #haskell
2022-04-15 03:26:09	←	allbery_b has quit (Remote host closed the connection)
2022-04-15 03:26:32	→	geekosaur has joined #haskell
2022-04-15 03:27:44	dolio	@type \k f -> k . fmap f
2022-04-15 03:27:45	lambdabot	Functor f => (f b -> c) -> (a -> b) -> f a -> c
2022-04-15 03:28:12	hpc	@src (>=>)
2022-04-15 03:28:13	lambdabot	Source not found. Have you considered trying to match wits with a rutabaga?
2022-04-15 03:29:06	dolio	Oh, that's backwards.
2022-04-15 03:30:11	Guest27	dolio the forwards version is just what I needed, thanks
2022-04-15 03:33:22	←	hammock has quit (Quit: WeeChat 3.4)
2022-04-15 03:34:43	←	kenran has quit (Quit: WeeChat info:version)
2022-04-15 03:35:13	←	alp_ has quit (Ping timeout: 248 seconds)
2022-04-15 03:42:24	←	Guest27 has quit (Ping timeout: 250 seconds)
2022-04-15 03:44:32	→	xff0x has joined #haskell
2022-04-15 03:44:59	←	xff0x has quit (Read error: Connection reset by peer)
2022-04-15 03:45:21	←	notzmv has quit (Ping timeout: 248 seconds)
2022-04-15 03:45:30	shapr	is there a friendly help ghc core viewer?
2022-04-15 03:46:05	←	sander has quit (Ping timeout: 272 seconds)
2022-04-15 03:46:17	shapr	oh, didn't know about https://hackage.haskell.org/package/dump-core
2022-04-15 03:46:32	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-15 03:48:28	→	sander has joined #haskell
2022-04-15 03:50:51	→	xff0x has joined #haskell
2022-04-15 03:50:52	→	Guest27 has joined #haskell
2022-04-15 03:55:24	←	Guest27 has quit (Ping timeout: 250 seconds)
2022-04-15 03:55:57	geekosaur	there used to be ghc-core as well, dunno how supported it is
2022-04-15 03:56:04	→	anon12545 has joined #haskell
2022-04-15 03:56:36	shapr	also turns out my ancient zsh alias is really handy: alias ghci-core="ghci -ddump-simpl -dsuppress-idinfo -dsuppress-coercions -dsuppress-type-applications -dsuppress-uniques -dsuppress-module-prefixes"
2022-04-15 03:56:52	←	anon12545 has quit (Remote host closed the connection)
2022-04-15 03:57:19	←	gehmehgeh has quit (Quit: Leaving)
2022-04-15 03:59:23	←	anomal has quit (Remote host closed the connection)
2022-04-15 04:00:05	→	dhil has joined #haskell
2022-04-15 04:00:10	←	pnotequalnp has quit (Ping timeout: 250 seconds)
2022-04-15 04:04:56	←	jhagborg has quit (Remote host closed the connection)
2022-04-15 04:05:20	→	jhagborg has joined #haskell
2022-04-15 04:08:31	→	fendor_ has joined #haskell
2022-04-15 04:11:12	←	fendor has quit (Ping timeout: 250 seconds)
2022-04-15 04:13:52	←	acidjnk has quit (Ping timeout: 260 seconds)
2022-04-15 04:14:19	←	jhagborg has quit (Ping timeout: 260 seconds)
2022-04-15 04:16:19	←	fendor_ has quit (Remote host closed the connection)
2022-04-15 04:24:59	→	acidjnk has joined #haskell
2022-04-15 04:26:21	→	niemand has joined #haskell
2022-04-15 04:27:00	niemand	Do SCC pragrams affect optimization (ghc)?
2022-04-15 04:32:08	←	redb has quit (Ping timeout: 260 seconds)
2022-04-15 04:37:37	←	dhil has quit (Ping timeout: 248 seconds)
2022-04-15 04:38:51	←	Me-me has quit (Remote host closed the connection)
2022-04-15 04:39:12	→	Me-me has joined #haskell
2022-04-15 04:39:14	→	pavonia has joined #haskell
2022-04-15 04:40:01	←	Me-me has quit (Changing host)
2022-04-15 04:40:01	→	Me-me has joined #haskell
2022-04-15 04:41:52	←	gurkenglas has quit (Ping timeout: 248 seconds)
2022-04-15 04:49:52	→	redb has joined #haskell
2022-04-15 04:58:19	←	niemand has quit (Quit: Connection closed)
2022-04-15 05:14:34	→	deadmarshal_ has joined #haskell
2022-04-15 05:14:45	←	agrosant has quit (Ping timeout: 272 seconds)
2022-04-15 05:15:31	←	FinnElija has quit (Remote host closed the connection)
2022-04-15 05:18:17	←	cyphase has quit (Ping timeout: 256 seconds)
2022-04-15 05:18:58	→	FinnElija has joined #haskell
2022-04-15 05:19:13	←	deadmarshal_ has quit (Ping timeout: 248 seconds)
2022-04-15 05:22:49	→	cyphase has joined #haskell
2022-04-15 05:25:36	←	acidjnk has quit (Ping timeout: 248 seconds)
2022-04-15 05:30:12	←	FinnElija has quit (Remote host closed the connection)
2022-04-15 05:30:38	→	FinnElija has joined #haskell
2022-04-15 05:30:56	→	chenqisu1 has joined #haskell
2022-04-15 05:30:58	→	agrosant has joined #haskell
2022-04-15 05:31:48	←	waleee has quit (Ping timeout: 250 seconds)
2022-04-15 05:34:54	→	acidjnk has joined #haskell
2022-04-15 05:36:00	←	machinedgod has quit (Remote host closed the connection)
2022-04-15 05:36:46	ℹ	irc: disconnected from server
2022-04-15 16:54:38	→	oxide has joined #haskell
2022-04-15 16:54:38	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-15 16:54:38	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-15 16:54:38	ℹ	Channel #haskell: 706 nicks (1 op, 0 voices, 705 normals)
2022-04-15 16:54:39	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-15 16:54:39	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-15 16:55:21	←	hololeap has quit (Remote host closed the connection)
2022-04-15 17:00:54	→	hololeap has joined #haskell
2022-04-15 17:01:43	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-15 17:02:07	←	CiaoSen has quit (Ping timeout: 240 seconds)
2022-04-15 17:02:40	←	yauhsien has quit (Remote host closed the connection)
2022-04-15 17:05:13	→	yauhsien has joined #haskell
2022-04-15 17:05:16	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-15 17:06:34	→	bitdex has joined #haskell
2022-04-15 17:06:46	←	mikoto-chan has quit (Ping timeout: 246 seconds)
2022-04-15 17:08:48	→	mikoto-chan has joined #haskell
2022-04-15 17:09:36	←	yauhsien has quit (Ping timeout: 248 seconds)
2022-04-15 17:11:44	→	fef has joined #haskell
2022-04-15 17:13:21	←	cdman has quit (Remote host closed the connection)
2022-04-15 17:14:09	→	cdman has joined #haskell
2022-04-15 17:14:36	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-15 17:16:43	→	xff0x_ has joined #haskell
2022-04-15 17:17:27	→	[itchyjunk] has joined #haskell
2022-04-15 17:19:02	←	gabriel_sevecek has quit (Quit: WeeChat 3.5)
2022-04-15 17:21:40	→	bitdex has joined #haskell
2022-04-15 17:21:49	→	gabriel_sevecek has joined #haskell
2022-04-15 17:26:01	→	nattiestnate has joined #haskell
2022-04-15 17:26:08	→	Pickchea has joined #haskell
2022-04-15 17:26:40	←	akegalj has quit (Quit: leaving)
2022-04-15 17:28:12	→	abastro has joined #haskell
2022-04-15 17:31:16	→	CiaoSen has joined #haskell
2022-04-15 17:31:17	←	dsrt^ has quit (Read error: Connection reset by peer)
2022-04-15 17:32:04	→	dsrt^ has joined #haskell
2022-04-15 17:37:36	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-15 17:38:32	→	bitdex has joined #haskell
2022-04-15 17:40:57	→	zincy has joined #haskell
2022-04-15 17:44:32	→	ccntrq has joined #haskell
2022-04-15 17:46:51	←	MajorBiscuit has quit (Ping timeout: 256 seconds)
2022-04-15 17:48:23	geekosaur	DemiMarieObenour, xmonad does no unsafe operations but a lot of FFI, and we've had bugs in the X11 FFI interfaces before. it just seems odd to me that (a) this only happens with 9.2.2, and (b) I couldn't reproduce it when I upgraded my setup to 9.2.2
2022-04-15 17:48:47	→	tromp has joined #haskell
2022-04-15 17:48:53	geekosaur	and (c) abastro[m] is seeing it with a very minimal config, which should make it easy to reproduce
2022-04-15 17:49:52	geekosaur	I'd be tempted to rebuild everything from scratch
2022-04-15 17:50:35	←	fef has quit (Quit: Leaving)
2022-04-15 17:50:41	←	razetime has quit (Ping timeout: 248 seconds)
2022-04-15 17:51:34	←	Pickchea has quit (Ping timeout: 246 seconds)
2022-04-15 17:52:16	←	axeman has quit (Ping timeout: 248 seconds)
2022-04-15 17:52:17	←	jgeerds has quit (Ping timeout: 248 seconds)
2022-04-15 17:54:01	←	chenqisu12 has quit (Ping timeout: 246 seconds)
2022-04-15 17:54:48	←	sprout has quit (Ping timeout: 260 seconds)
2022-04-15 17:55:13	←	jakalx has left #haskell (Error from remote client)
2022-04-15 17:57:36	→	jakalx has joined #haskell
2022-04-15 18:03:07	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-15 18:03:27	→	razetime has joined #haskell
2022-04-15 18:07:56	→	merijn has joined #haskell
2022-04-15 18:08:16	→	MajorBiscuit has joined #haskell
2022-04-15 18:09:52	→	kaph has joined #haskell
2022-04-15 18:13:30	←	adanwan has quit (Remote host closed the connection)
2022-04-15 18:13:36	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-15 18:13:47	→	adanwan has joined #haskell
2022-04-15 18:14:51	→	deadmarshal_ has joined #haskell
2022-04-15 18:15:43	→	chenqisu12 has joined #haskell
2022-04-15 18:15:47	←	CiaoSen has quit (Ping timeout: 250 seconds)
2022-04-15 18:16:26	←	chenqisu12 has quit (Max SendQ exceeded)
2022-04-15 18:17:51	→	kaph_ has joined #haskell
2022-04-15 18:17:58	←	kaph has quit (Read error: Connection reset by peer)
2022-04-15 18:19:30	→	vysn has joined #haskell
2022-04-15 18:24:28	→	sprout has joined #haskell
2022-04-15 18:25:46	←	wyrd has quit (Remote host closed the connection)
2022-04-15 18:25:57	←	dextaa has quit (Ping timeout: 256 seconds)
2022-04-15 18:26:05	→	wyrd has joined #haskell
2022-04-15 18:28:28	←	coot has quit (Quit: coot)
2022-04-15 18:32:45	←	deadmarshal_ has quit (Ping timeout: 256 seconds)
2022-04-15 18:35:30	→	coot has joined #haskell
2022-04-15 18:37:13	abastro[m]	Was it indeed a minimal config?
2022-04-15 18:38:13	→	chomwitt has joined #haskell
2022-04-15 18:39:12	←	alp_ has quit (Ping timeout: 248 seconds)
2022-04-15 18:39:24	←	abastro has quit (Remote host closed the connection)
2022-04-15 18:39:34	→	abastro has joined #haskell
2022-04-15 18:39:46	abastro	I wish it was :P
2022-04-15 18:45:35	geekosaur	that was quite minimal, yes
2022-04-15 18:46:05	geekosaur	a few more things could be removed to make a truly minimal config (`main = xmonad def`); it might be worth seeing if you can reproduce with that
2022-04-15 18:46:25	geekosaur	(I'd use a xephyr to test rather than dumbifying my whole session though)
2022-04-15 18:50:13	→	zebrag has joined #haskell
2022-04-15 18:52:56	←	benin has quit (Quit: The Lounge - https://thelounge.chat)
2022-04-15 18:57:53	←	sandercat has quit (Quit: So long! :))
2022-04-15 18:59:13	→	sander has joined #haskell
2022-04-15 19:01:46	→	waleee has joined #haskell
2022-04-15 19:05:46	←	joo-_ has quit (Quit: leaving)
2022-04-15 19:06:07	→	joo-_ has joined #haskell
2022-04-15 19:06:07	←	joo-_ has quit (Changing host)
2022-04-15 19:06:07	→	joo-_ has joined #haskell
2022-04-15 19:08:27	←	sprout has quit (Ping timeout: 256 seconds)
2022-04-15 19:10:29	→	pretty_dumm_guy has joined #haskell
2022-04-15 19:11:26	→	sprout has joined #haskell
2022-04-15 19:13:17	abastro[m]	Hmm, let's see if `xmonad def` actually works
2022-04-15 19:16:36	→	alp_ has joined #haskell
2022-04-15 19:18:22	←	kaph_ has quit (Ping timeout: 246 seconds)
2022-04-15 19:21:19	→	tzh has joined #haskell
2022-04-15 19:24:32	←	sprout has quit (Ping timeout: 248 seconds)
2022-04-15 19:27:28	→	tromp has joined #haskell
2022-04-15 19:27:48	←	Ram-Z has quit (Quit: ZNC - http://znc.in)
2022-04-15 19:30:49	→	Ram-Z has joined #haskell
2022-04-15 19:32:43	→	sprout has joined #haskell
2022-04-15 19:39:27	←	nattiestnate has quit (Quit: WeeChat 3.5)
2022-04-15 19:41:16	→	Sgeo has joined #haskell
2022-04-15 19:44:39	←	sayola1 has quit (Read error: Connection reset by peer)
2022-04-15 19:46:23	→	vpan has joined #haskell
2022-04-15 19:48:18	←	abastro has quit (Remote host closed the connection)
2022-04-15 19:48:44	⚡	juri_ hits her code with a hammer.
2022-04-15 19:49:03	juri_	don't you hate that feeling when you do things you know are dangerous, and then the test suite passes?
2022-04-15 19:51:36	abastro[m]	geekosaur: seems like the ghc internal error was more a coincidence.. Meh
2022-04-15 19:52:12	abastro[m]	Got `Gdk-Message: 23:19:11.674: firefox: Fatal IO error 0 (Success) on X server :1.`
2022-04-15 19:52:13	geekosaur	if it'snot happening now then I'd triage adding pieces back in until it breaks again
2022-04-15 19:52:13	abastro[m]	then,
2022-04-15 19:52:13	abastro[m]	`Exiting due to channel error. Exiting due to channel error.`
2022-04-15 19:52:23	geekosaur	oh
2022-04-15 19:52:33	abastro[m]	I mean it turns off for different reason
2022-04-15 19:52:49	geekosaur	mm, that might be more because firefox doesn't like sharing its config files
2022-04-15 19:52:51	abastro[m]	What is this "Fatal IO error 0 (Success) on X server :1"
2022-04-15 19:53:09	abastro[m]	Oh, that one is not significant then?
2022-04-15 19:53:15	geekosaur	when I use xephyr I set up a mirror $HOME somewhere else so things like firefox don't break
2022-04-15 19:53:43	geekosaur	right, I think it's just unhappy about its config files already being in use
2022-04-15 19:54:14	abastro[m]	But then, how could it turn my xmonad off
2022-04-15 19:55:13	abastro[m]	Right after that message, I was thrown back to the login shell
2022-04-15 19:56:23	abastro[m]	Perhaps this time I'd avoid turning on firefox and see
2022-04-15 19:56:30	geekosaur	mm, then that wouldn't be the issue
2022-04-15 19:56:44	geekosaur	also a firefox error wouldn't kill xmonad regardless
2022-04-15 19:56:52	geekosaur	(also this all belongs in #xmonad :)
2022-04-15 19:57:16	geekosaur	is that really the last error shown? how did you run xephyr?
2022-04-15 19:59:29	abastro[m]	Oh, I guess I should do the xephyr one
2022-04-15 19:59:52	abastro[m]	I was still running simply by xsession desktop file
2022-04-15 20:00:03	abastro[m]	Let me go to xmonad channel
2022-04-15 20:03:51	supersven	juri_: Without having any context... Have you already sent QuickCheck into the game? (Might solve this "My testsuite is passing" issue ;) )
2022-04-15 20:04:22	→	systemovich has joined #haskell
2022-04-15 20:05:05	juri_	supersven: yep. everything is property tests.
2022-04-15 20:05:22	juri_	supersven: just to make things more fearful: this is all floating point math.
2022-04-15 20:06:00	←	dsrt^ has quit (Remote host closed the connection)
2022-04-15 20:07:47	←	geekosaur has quit (Remote host closed the connection)
2022-04-15 20:08:57	→	Pickchea has joined #haskell
2022-04-15 20:09:27	→	geekosaur has joined #haskell
2022-04-15 20:09:50	juri_	supersven: also, good job not working on a day off. :)
2022-04-15 20:09:54	juri_	<-- Julia Longtin
2022-04-15 20:14:02	supersven	juri_: Yes, I saw :) (Usually, I'm only bugging people in #ghc ;) ) 
2022-04-15 20:14:03	←	frost has quit (Quit: Client closed)
2022-04-15 20:16:18	ℹ	irc: disconnected from server
2022-04-15 23:59:47	→	oxide has joined #haskell
2022-04-15 23:59:47	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-15 23:59:47	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-15 23:59:47	ℹ	Channel #haskell: 718 nicks (1 op, 0 voices, 717 normals)
2022-04-15 23:59:47	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-15 23:59:47	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-16 00:03:04	←	lifter has quit (Quit: Ping timeout (120 seconds))
2022-04-16 00:18:30	→	yauhsien has joined #haskell
2022-04-16 00:18:59	←	redb has quit (Ping timeout: 256 seconds)
2022-04-16 00:19:21	zebrag	It's everywhere emphasized that control (evaluation order), is hardwired in monads, even though it isn't so, as reminded here: https://wiki.haskell.org/Evaluation_order_and_state_tokens
2022-04-16 00:23:16	dolio	That page doesn't really have anything to do with monads.
2022-04-16 00:25:24	dolio	It is true that people erroneously overstate the connection between monads and evaluation order, though.
2022-04-16 00:27:01	→	merijn has joined #haskell
2022-04-16 00:28:01	←	machinedgod has quit (Ping timeout: 250 seconds)
2022-04-16 00:32:22	monochrom	The state token is a coding trick to trick a code generator designed for lazy evaluation into generating not-so-lazy code. The trick is creating a fictional data dependency.
2022-04-16 00:32:31	→	deadmarshal_ has joined #haskell
2022-04-16 00:33:05	monochrom	The alternative would be to write a 2nd code generator.
2022-04-16 00:34:41	monochrom	s/lazy evaluation/really any order that honours data dependency but otherwise takes liberty to deviate from call-by-value/
2022-04-16 00:35:53	←	systemovich has quit (Quit: Konversation terminated!)
2022-04-16 00:36:36	→	redb has joined #haskell
2022-04-16 00:36:50	monochrom	The idea of a state token should remind you of linear types much more than monads. >:)
2022-04-16 00:37:47	←	justsomeguy has quit (Quit: WeeChat 3.4)
2022-04-16 00:38:11	monochrom	Indeed, IIRC Mercury or Clean (I forgot which) makes you write linear state-token-passsing by hand when you write I/O code.
2022-04-16 00:39:12	←	deadmarshal_ has quit (Ping timeout: 248 seconds)
2022-04-16 00:40:38	→	CiaoSen has joined #haskell
2022-04-16 00:42:55	→	sprout has joined #haskell
2022-04-16 00:44:00	←	redb has quit (Ping timeout: 248 seconds)
2022-04-16 00:44:50	monochrom	Now, regarding cases like "State f >>= k = State (\s -> let (a, s1) = f s in ...)" vs "... let !(a, s1) = f s ...", which does change evaluation orders, and so the author of a monad instance has a say on this...
2022-04-16 00:45:47	monochrom	Suppose you copy-paste that code to SML and change to SML syntax. That changes evaluation order, too.
2022-04-16 00:46:30	monochrom	So is it the monad instance that chooses an order, or is it the language?
2022-04-16 00:47:47	monochrom	This is where things can get very nuanced. But also when a simple-minded model is not that bad if you know the context.
2022-04-16 00:47:59	←	forell has quit (Quit: ZNC - https://znc.in)
2022-04-16 00:48:39	monochrom	A Haskell blog is not unreasonable to say "chosen by the monad instance implementation" because the context of the blog does not consider switching to SML.
2022-04-16 00:48:47	→	forell has joined #haskell
2022-04-16 00:50:37	←	axeman has quit (Quit: No Ping reply in 180 seconds.)
2022-04-16 00:50:45	dolio	Both Mercury and Clean work that way. Mercury has some syntax sugar for it, though.
2022-04-16 00:51:12	dolio	Which is essentially some kind of do notation, I imagine.
2022-04-16 00:51:52	→	axeman has joined #haskell
2022-04-16 00:52:21	dolio	You write a sequence of things, and it inserts all the state variables for you.
2022-04-16 00:53:14	←	RevoGen has quit (Remote host closed the connection)
2022-04-16 00:53:56	→	redb has joined #haskell
2022-04-16 00:54:42	←	abhixec has quit (Quit: leaving)
2022-04-16 00:55:16	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-16 00:55:47	←	merijn has quit (Ping timeout: 240 seconds)
2022-04-16 01:02:15	←	redb has quit (Ping timeout: 272 seconds)
2022-04-16 01:03:02	→	redb has joined #haskell
2022-04-16 01:03:23	←	joo-_ has quit (Quit: Lost terminal)
2022-04-16 01:05:24	davean	What is the state of Mercury and Clean these days?
2022-04-16 01:06:14	→	bitdex has joined #haskell
2022-04-16 01:07:27	←	redb has quit (Ping timeout: 250 seconds)
2022-04-16 01:08:01	→	redb has joined #haskell
2022-04-16 01:08:35	geekosaur	mercury had a recentish release iirc
2022-04-16 01:09:00	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-16 01:11:53	→	tromp has joined #haskell
2022-04-16 01:12:13	←	redb has quit (Ping timeout: 246 seconds)
2022-04-16 01:15:35	→	coot has joined #haskell
2022-04-16 01:16:16	→	acidjnk has joined #haskell
2022-04-16 01:17:00	→	redb has joined #haskell
2022-04-16 01:22:24	←	alp_ has quit (Ping timeout: 248 seconds)
2022-04-16 01:23:45	←	yauhsien has quit (Remote host closed the connection)
2022-04-16 01:24:28	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-16 01:24:44	→	yauhsien has joined #haskell
2022-04-16 01:29:49	←	yauhsien has quit (Ping timeout: 256 seconds)
2022-04-16 01:31:28	←	sander has quit (Ping timeout: 246 seconds)
2022-04-16 01:32:05	←	redb has quit (Ping timeout: 256 seconds)
2022-04-16 01:32:20	→	redb has joined #haskell
2022-04-16 01:36:13	←	nosewings has quit (Ping timeout: 260 seconds)
2022-04-16 01:36:48	←	redb has quit (Ping timeout: 248 seconds)
2022-04-16 01:37:54	→	redb has joined #haskell
2022-04-16 01:38:33	→	kenran has joined #haskell
2022-04-16 01:41:25	→	sander has joined #haskell
2022-04-16 01:42:08	←	redb has quit (Ping timeout: 248 seconds)
2022-04-16 01:44:39	→	xkuru has joined #haskell
2022-04-16 01:45:22	←	_ht has quit (Remote host closed the connection)
2022-04-16 01:47:16	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-16 01:48:08	→	bitdex has joined #haskell
2022-04-16 01:48:32	←	zincy has quit (Remote host closed the connection)
2022-04-16 01:51:14	→	redb has joined #haskell
2022-04-16 01:51:28	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-16 01:53:06	→	Vajb has joined #haskell
2022-04-16 01:55:53	←	redb has quit (Ping timeout: 256 seconds)
2022-04-16 01:56:20	←	Lord_of_Life has quit (Ping timeout: 260 seconds)
2022-04-16 01:56:22	→	Lord_of_Life_ has joined #haskell
2022-04-16 01:57:36	ℹ	Lord_of_Life_ is now known as Lord_of_Life
2022-04-16 01:59:45	→	tromp has joined #haskell
2022-04-16 02:00:56	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-16 02:01:56	←	littlebobeep has quit (Remote host closed the connection)
2022-04-16 02:02:21	→	littlebobeep has joined #haskell
2022-04-16 02:03:33	←	Macbethwin has quit (Remote host closed the connection)
2022-04-16 02:03:41	→	MajorBiscuit has joined #haskell
2022-04-16 02:03:54	→	Macbethwin has joined #haskell
2022-04-16 02:06:38	→	deadmarshal_ has joined #haskell
2022-04-16 02:07:14	→	redb has joined #haskell
2022-04-16 02:11:01	←	deadmarshal_ has quit (Ping timeout: 246 seconds)
2022-04-16 02:11:45	←	redb has quit (Ping timeout: 256 seconds)
2022-04-16 02:12:10	←	MajorBiscuit has quit (Quit: WeeChat 3.4)
2022-04-16 02:12:48	→	bitdex has joined #haskell
2022-04-16 02:19:48	→	[itchyjunk] has joined #haskell
2022-04-16 02:20:37	→	alp_ has joined #haskell
2022-04-16 02:21:09	→	redb has joined #haskell
2022-04-16 02:24:30	←	Macbethwin has quit (Remote host closed the connection)
2022-04-16 02:24:50	→	Macbethwin has joined #haskell
2022-04-16 02:26:27	←	redb has quit (Ping timeout: 240 seconds)
2022-04-16 02:26:44	←	zer0bitz has quit (Read error: Connection reset by peer)
2022-04-16 02:32:17	←	axeman has quit (Ping timeout: 248 seconds)
2022-04-16 02:32:54	←	Flonk has quit (Quit: Ping timeout (120 seconds))
2022-04-16 02:33:18	→	Flonk has joined #haskell
2022-04-16 02:34:27	→	littlebo1eep has joined #haskell
2022-04-16 02:34:39	←	littlebobeep has quit (Remote host closed the connection)
2022-04-16 02:37:24	→	axeman has joined #haskell
2022-04-16 02:39:28	←	Unicorn_Princess has quit (Remote host closed the connection)
2022-04-16 02:43:24	→	jao has joined #haskell
2022-04-16 02:45:57	←	kenran has quit (Quit: WeeChat info:version)
2022-04-16 02:46:19	←	kaph_ has quit (Ping timeout: 256 seconds)
2022-04-16 02:46:21	zebrag	No, the page didn't have direct relation with monads, but at some point, I think they said that if you want "evaluation order" you must do this or that, otherwise nothing is guaranteeing it, even with monads
2022-04-16 02:47:04	zebrag	so that was at least one reference hinting at evaluation order and monads are unrelated
2022-04-16 02:47:30	zebrag	contrary to what is suggested almost everywhere
2022-04-16 02:47:59	monochrom	Oh, the internet is wrong almost everywhere anyway :)
2022-04-16 02:48:30	monochrom	The set of correct information on the internet has measure zero :)
2022-04-16 02:48:56	←	hololeap has quit (Ping timeout: 240 seconds)
2022-04-16 02:49:05	DigitalKiwi	aren't we on the internet right now
2022-04-16 02:49:47	lechner	monochrom is not a rounding error!
2022-04-16 02:50:58	abastro[m]	Measure 0 XD
2022-04-16 02:51:26	→	whatsupdoc has joined #haskell
2022-04-16 02:51:53	→	hololeap has joined #haskell
2022-04-16 02:52:56	→	merijn has joined #haskell
2022-04-16 02:53:04	→	redb has joined #haskell
2022-04-16 02:59:32	→	nosewings has joined #haskell
2022-04-16 02:59:58	←	fendor has quit (Remote host closed the connection)
2022-04-16 03:00:22	←	redb has quit (Ping timeout: 246 seconds)
2022-04-16 03:01:16	←	hololeap has quit (Ping timeout: 240 seconds)
2022-04-16 03:01:31	←	nosewings has quit (Remote host closed the connection)
2022-04-16 03:02:32	→	nosewings has joined #haskell
2022-04-16 03:03:14	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-16 03:05:56	→	hololeap has joined #haskell
2022-04-16 03:10:49	→	allbery_b has joined #haskell
2022-04-16 03:10:49	←	geekosaur has quit (Killed (NickServ (GHOST command used by allbery_b)))
2022-04-16 03:10:52	ℹ	allbery_b is now known as geekosaur
2022-04-16 03:13:33	→	yauhsien has joined #haskell
2022-04-16 03:16:48	→	Macbethwin_ has joined #haskell
2022-04-16 03:17:05	→	takuan has joined #haskell
2022-04-16 03:17:47	←	yauhsien has quit (Ping timeout: 240 seconds)
2022-04-16 03:18:15	←	hololeap has quit (Remote host closed the connection)
2022-04-16 03:19:17	zebrag	"Monads embed effects in a purely functional setting and explicitly specify the evaluation order" (https://arxiv.org/pdf/1202.2921.pdf) A bit misleading. Though maybe not stating monads equal evaluation order.
2022-04-16 03:19:37	←	Macbethwin has quit (Ping timeout: 246 seconds)
2022-04-16 03:20:56	←	littlebo1eep has quit (Ping timeout: 240 seconds)
2022-04-16 03:24:09	→	redb has joined #haskell
2022-04-16 03:27:13	←	merijn has quit (Ping timeout: 248 seconds)
2022-04-16 03:27:18	ℹ	Macbethwin_ is now known as chargen
2022-04-16 03:28:22	←	redb has quit (Ping timeout: 246 seconds)
2022-04-16 03:29:43	→	redb has joined #haskell
2022-04-16 03:30:31	←	chomwitt has quit (Remote host closed the connection)
2022-04-16 03:33:54	←	redb has quit (Ping timeout: 250 seconds)
2022-04-16 03:34:18	←	chargen has quit (Remote host closed the connection)
2022-04-16 03:34:44	→	chargen has joined #haskell
2022-04-16 03:35:21	dminuoso	zebrag: I dont think it is, as with all papers you have to read it in context.
2022-04-16 03:36:17	→	wroathe has joined #haskell
2022-04-16 03:36:17	←	wroathe has quit (Changing host)
2022-04-16 03:36:17	→	wroathe has joined #haskell
2022-04-16 03:37:43	→	redb has joined #haskell
2022-04-16 03:38:09	hpc	i prefer context-free papers
2022-04-16 03:38:21	hpc	you don't need to read anything else to understand them, and they always have balanced parens
2022-04-16 03:40:22	hpc	yeah, that sentence is fine
2022-04-16 03:40:31	←	Midjak has quit (Quit: This computer has gone to sleep)
2022-04-16 03:40:35	hpc	it's not perfect, but it's just to get the reader to where you can talk about what the paper's actually about
2022-04-16 03:42:21	→	tromp has joined #haskell
2022-04-16 03:42:25	←	redb has quit (Ping timeout: 256 seconds)
2022-04-16 03:42:50	→	redb has joined #haskell
2022-04-16 03:43:20	←	takuan has quit (Remote host closed the connection)
2022-04-16 03:43:32	monochrom	Every tautology is useless, and every non-tautology is misleading. >:)
2022-04-16 03:45:32	hpc	ill do you one better, every non-tautology is false
2022-04-16 03:45:47	hpc	proof: LEM
2022-04-16 03:45:53	←	CiaoSen has quit (Ping timeout: 248 seconds)
2022-04-16 03:47:20	←	redb has quit (Ping timeout: 250 seconds)
2022-04-16 03:50:55	monochrom	That's misleading. :)
2022-04-16 03:51:59	←	wroathe has quit (Ping timeout: 272 seconds)
2022-04-16 03:52:36	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-16 03:54:03	←	coot has quit (Quit: coot)
2022-04-16 03:54:39	hpc	the best kind of leading
2022-04-16 03:54:52	→	jmdaemon has joined #haskell
2022-04-16 03:55:41	←	anomal has quit (Remote host closed the connection)
2022-04-16 03:56:23	←	michalz has quit (Remote host closed the connection)
2022-04-16 03:57:27	←	acidjnk has quit (Ping timeout: 240 seconds)
2022-04-16 03:57:52	←	chargen has quit (Remote host closed the connection)
2022-04-16 03:58:17	→	chargen has joined #haskell
2022-04-16 04:00:11	←	phma has quit (Read error: Connection reset by peer)
2022-04-16 04:01:23	→	phma has joined #haskell
2022-04-16 04:02:12	←	chargen has quit (Remote host closed the connection)
2022-04-16 04:02:37	→	chargen has joined #haskell
2022-04-16 04:04:04	→	Macbethwin_ has joined #haskell
2022-04-16 04:05:59	←	mud has quit (Quit: quit)
2022-04-16 04:06:59	←	goepsilongo has quit (Quit: Konversation terminated!)
2022-04-16 04:08:16	←	chargen has quit (Ping timeout: 248 seconds)
2022-04-16 04:11:50	→	machinedgod has joined #haskell
2022-04-16 04:12:00	ℹ	Macbethwin_ is now known as chargen
2022-04-16 04:15:34	→	redb has joined #haskell
2022-04-16 04:19:25	→	little_mac has joined #haskell
2022-04-16 04:19:48	DigitalKiwi	way to bury the lead
2022-04-16 04:19:49	←	redb has quit (Ping timeout: 256 seconds)
2022-04-16 04:19:51	←	mvk has quit (Ping timeout: 250 seconds)
2022-04-16 04:20:43	←	nosewings has quit (Remote host closed the connection)
2022-04-16 04:20:50	→	redb has joined #haskell
2022-04-16 04:20:52	←	pretty_dumm_guy has quit (Ping timeout: 246 seconds)
2022-04-16 04:22:32	←	chargen has quit (Remote host closed the connection)
2022-04-16 04:22:51	→	chargen has joined #haskell
2022-04-16 04:25:20	←	redb has quit (Ping timeout: 248 seconds)
2022-04-16 04:25:50	←	gehmehgeh has quit (Quit: Leaving)
2022-04-16 04:35:04	→	Pickchea has joined #haskell
2022-04-16 04:35:47	←	geekosaur has quit (Remote host closed the connection)
2022-04-16 04:36:32	→	lifter has joined #haskell
2022-04-16 04:36:39	dmj`	I wish there was a way to carry around type level state in a Num instance
2022-04-16 04:37:27	dmj`	something like (+) :: Calc xs -> Calc ys -> Calc (xs ++ ys) 
2022-04-16 04:37:38	→	geekosaur has joined #haskell
2022-04-16 04:40:45	glguy	The type of (+) is pretty restrictive
2022-04-16 04:41:02	←	jao has quit (Remote host closed the connection)
2022-04-16 04:42:25	geekosaur	instance Num a => Num (Calc a) where …
2022-04-16 04:42:32	dmj`	unfortunately so, I can make my own class, but then I forego the benefits of fromInteger and the syntactic sugar that makes it feel all like a cool DSL
2022-04-16 04:44:59	dmj`	I guess I could just NoImplicitPrelude and define my own (+)
2022-04-16 04:45:21	dmj`	but I still lose the fromInteger goodness
2022-04-16 04:48:12	←	lifter has quit (Quit: Ping timeout (120 seconds))
2022-04-16 04:48:45	→	lifter has joined #haskell
2022-04-16 04:48:52	←	res0nat0r0844 has quit (Quit: Ping timeout (120 seconds))
2022-04-16 04:48:54	←	lbseale has quit (Read error: Connection reset by peer)
2022-04-16 04:50:08	→	lbseale has joined #haskell
2022-04-16 04:52:32	←	machinedgod has quit (Ping timeout: 248 seconds)
2022-04-16 04:53:31	dmj`	glguy: It's a cool idea, basically users can define formulas with variables and arithmetic operators (e.g. profit :: Calc Free; profit = ("revenue" - "expenses") * 1 -- this typechecks thanks to Num and IsString) . To evaluate the formula, the users provide a Map of values to bind the free variables, when all variables are bound (i.e. "profit :: Calc Bound") the formulas can then be evaluated (interpret :: Calc Bound -> Rational).
2022-04-16 04:55:42	→	redb has joined #haskell
2022-04-16 04:56:01	dmj`	The problem is that substitution can fail so an Either Error is needed ... but, if there was a way to carry along all of the variables in a type level list, and then progressively remove them as new variables are bound then the Either could be removed, since there's proof all variables are bound (i.e.. interpret :: Calc '[] -> Rational). This leads me back to my original problem of Num not allowing type level state
2022-04-16 04:56:47	dmj`	The aforementioned is possible, but it comes at the cost of the Num and IsString instances which make the entire thing worth it
2022-04-16 04:57:02	dmj`	bcuz of the syntactic sugar ofc
2022-04-16 04:58:56	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-16 04:59:47	←	redb has quit (Ping timeout: 240 seconds)
2022-04-16 05:00:53	→	bitdex has joined #haskell
2022-04-16 05:03:00	→	lifter_ has joined #haskell
2022-04-16 05:03:04	monochrom	I wonder if RebindableSyntax helps you.
2022-04-16 05:03:59	monochrom	(It already can let you hijack do-notation. There is almost no restriction on how wild your >>='s type is. People have done indexed monads with this.)
2022-04-16 05:06:45	geekosaur	I don't think RebindableSyntax lets you hijack Num, only replacing the Prelude does
2022-04-16 05:06:52	←	lifter has quit (Quit: Client closed)
2022-04-16 05:07:04	ℹ	lifter_ is now known as lifter
2022-04-16 05:07:32	hpc	RebindableSyntax lets you get creative with numeric literals iirc
2022-04-16 05:07:40	hpc	but yeah, everything else is wrapped up in type classes
2022-04-16 05:08:03	geekosaur	I do wonder if a variant of what I initially suggested would work
2022-04-16 05:08:33	geekosaur	would need FlexibleInstancesand possibly UndecidableInstances
2022-04-16 05:09:36	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-16 05:10:39	→	bitdex has joined #haskell
2022-04-16 05:10:57	←	lifter has quit ()
2022-04-16 05:11:14	→	lifter has joined #haskell
2022-04-16 05:14:24	dmj`	here is the initial version, no type-fu, just a type tag to indicate if the expression able to be evaluated. https://gist.github.com/d2ffa8c27f0e8ece076f765c416862dd
2022-04-16 05:15:13	dmj`	but the nice thing is the pretty printing of the formulas, w/ and w/o the free vars
2022-04-16 05:17:12	→	Ishan_ has joined #haskell
2022-04-16 05:17:37	←	axeman has quit (Ping timeout: 248 seconds)
2022-04-16 05:18:03	→	redb has joined #haskell
2022-04-16 05:19:57	→	jao has joined #haskell
2022-04-16 05:20:59	dmj`	second formulation is where I run into problems https://gist.github.com/dmjio/d2ffa8c27f0e8ece076f765c416862dd#file-dsl2-hs
2022-04-16 05:22:01	←	Ishan_ has quit (Client Quit)
2022-04-16 05:22:15	→	IshD has joined #haskell
2022-04-16 05:22:43	←	redb has quit (Ping timeout: 256 seconds)
2022-04-16 05:22:44	IshD	Hi! Is this the right place to ask about Google Summer of Code?
2022-04-16 05:24:00	juri_	Maybe. :)
2022-04-16 05:24:52	→	chenqisu1 has joined #haskell
2022-04-16 05:25:05	←	jgeerds has quit (Ping timeout: 272 seconds)
2022-04-16 05:25:44	←	jackson99 has quit (Quit: CGI:IRC (Ping timeout))
2022-04-16 05:26:11	←	zeenk has quit (Quit: Konversation terminated!)
2022-04-16 05:28:32	→	merijn has joined #haskell
2022-04-16 05:28:51	←	IshD has quit (Quit: Leaving)
2022-04-16 05:30:23	dmj`	there should be easier ways to hijack Num
2022-04-16 05:31:46	←	califax has quit (Remote host closed the connection)
2022-04-16 05:32:44	→	califax has joined #haskell
2022-04-16 05:34:12	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-16 05:34:24	→	Vajb has joined #haskell
2022-04-16 05:37:56	←	cosimone has quit (Remote host closed the connection)
2022-04-16 05:38:39	lifter	I'm thinking of adding Haskeline to an existing project where I'm already using "Data.Text" for all my strings. It appears that Haskeline supports "String" but not "Text"... What might be the recommended approach in the situation? Should I just manually pack/unpack when I need to use a function from Haskeline?
2022-04-16 05:38:47	←	mmhat has quit (Quit: WeeChat 3.5)
2022-04-16 05:39:02	monochrom	Yeah I think just pack and unpack.
2022-04-16 05:40:40	lifter	OK, thanks.
2022-04-16 05:41:37	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-16 05:42:44	→	Vajb has joined #haskell
2022-04-16 05:43:18	→	redb has joined #haskell
2022-04-16 05:43:20	→	yauhsien has joined #haskell
2022-04-16 05:47:27	←	mikoto-chan has quit (Ping timeout: 240 seconds)
2022-04-16 05:47:28	←	redb has quit (Ping timeout: 248 seconds)
2022-04-16 05:53:47	←	gurkenglas has quit (Ping timeout: 240 seconds)
2022-04-16 05:57:27	←	merijn has quit (Ping timeout: 240 seconds)
2022-04-16 05:58:12	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2022-04-16 05:59:40	→	xff0x_ has joined #haskell
2022-04-16 06:04:06	→	redb has joined #haskell
2022-04-16 06:07:45	→	harveypwca has joined #haskell
2022-04-16 06:09:05	→	vysn has joined #haskell
2022-04-16 06:10:53	lifter	Is there a technical term for what "runAbcT" functions do (replace "AbcT" with any monad transformer)? I'm thinking of something like "get or pull out the inner monad..."
2022-04-16 06:10:53	abastro[m]	You can simulate pattern matching with lens, right?
2022-04-16 06:12:51	→	wroathe has joined #haskell
2022-04-16 06:12:51	←	wroathe has quit (Changing host)
2022-04-16 06:12:51	→	wroathe has joined #haskell
2022-04-16 06:12:52	→	justsomeguy has joined #haskell
2022-04-16 06:16:33	waleee	abastro[m]: why on earth do you want to do that
2022-04-16 06:16:55	←	stackdroid18 has quit (Quit: hasta la vista... tchau!)
2022-04-16 06:20:04	→	cosimone has joined #haskell
2022-04-16 06:25:43	←	Pickchea has quit (Quit: Leaving)
2022-04-16 06:30:57	→	jackson99 has joined #haskell
2022-04-16 06:31:13	→	werneta has joined #haskell
2022-04-16 06:32:32	→	lainon has joined #haskell
2022-04-16 06:35:01	←	vicfred has quit (Quit: Leaving)
2022-04-16 06:37:15	abastro[m]	Unification of concepts waleee 
2022-04-16 06:40:43	←	cosimone has quit (Quit: ERC 5.4 (IRC client for GNU Emacs 28.1))
2022-04-16 06:40:54	←	lainon has quit (Quit: lainon)
2022-04-16 06:41:00	←	albet70 has quit (Remote host closed the connection)
2022-04-16 06:41:28	waleee	abastro[m]: ah, it was a theoretical question, you weren't pondering actually doing it
2022-04-16 06:41:51	→	cosimone has joined #haskell
2022-04-16 06:42:03	←	yauhsien has quit (Ping timeout: 256 seconds)
2022-04-16 06:44:50	←	zaquest has quit (Remote host closed the connection)
2022-04-16 06:46:02	→	zaquest has joined #haskell
2022-04-16 06:47:08	→	albet70 has joined #haskell
2022-04-16 06:50:10	→	abastro has joined #haskell
2022-04-16 06:50:19	abastro[m]	I was also a bit pondering doing it
2022-04-16 06:50:24	abastro[m]	(If it turns out to be ergonomic)
2022-04-16 06:50:33	abastro	Tho not in haskell, ya
2022-04-16 06:57:36	←	justsomeguy has quit (Quit: WeeChat 3.4)
2022-04-16 06:59:37	←	redb has quit (Ping timeout: 256 seconds)
2022-04-16 06:59:57	→	andrey_ has joined #haskell
2022-04-16 07:00:23	→	nate1 has joined #haskell
2022-04-16 07:02:40	←	andrey__ has quit (Ping timeout: 248 seconds)
2022-04-16 07:15:03	←	foul_owl has quit (Ping timeout: 256 seconds)
2022-04-16 07:16:03	←	nate1 has quit (Ping timeout: 256 seconds)
2022-04-16 07:16:09	→	redb has joined #haskell
2022-04-16 07:20:35	←	redb has quit (Ping timeout: 256 seconds)
2022-04-16 07:29:58	ℹ	irc: disconnected from server
2022-04-16 07:30:23	→	oxide has joined #haskell
2022-04-16 07:30:23	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-16 07:30:23	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-16 07:30:23	ℹ	Channel #haskell: 697 nicks (1 op, 0 voices, 696 normals)
2022-04-16 07:30:24	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-16 07:30:24	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-16 07:30:25	→	foul_owl has joined #haskell
2022-04-16 07:32:32	←	redb has quit (Ping timeout: 248 seconds)
2022-04-16 07:32:36	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-16 07:34:14	lifter	@unmtl InputT (ReaderT Env ((StateT GoiState IO))) a
2022-04-16 07:34:14	lambdabot	InputT (ReaderT Env (StateT GoiState IO)) a
2022-04-16 07:34:41	→	bitdex has joined #haskell
2022-04-16 07:34:42	→	machinedgod has joined #haskell
2022-04-16 07:43:20	→	razetime has joined #haskell
2022-04-16 07:46:28	←	sarupbanskota has quit (Quit: Client closed)
2022-04-16 07:47:43	←	machinedgod has quit (Ping timeout: 246 seconds)
2022-04-16 07:54:46	lifter	I'm introducing InputT from Haskeline into an existing monad transformer stack. I'm wrestling with where to put InputT in the stack. Presently I've got "ReaderT MyEnv (StateT MyState (InputT IO)) a". I guess this works but I have to lift the InputT functions from Haskeline twice. Do you think I'm on the right track?
2022-04-16 07:56:11	→	sarupbanskota has joined #haskell
2022-04-16 07:56:20	→	redb has joined #haskell
2022-04-16 07:56:59	→	nate1 has joined #haskell
2022-04-16 07:58:01	sarupbanskota	hey everyone 👋 i'm new here! building some coding exercises in haskell & other languages :)
2022-04-16 07:59:10	→	merijn has joined #haskell
2022-04-16 08:00:36	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-16 08:03:16	←	nf has quit (Ping timeout: 245 seconds)
2022-04-16 08:04:14	→	bitdex has joined #haskell
2022-04-16 08:05:04	←	nate1 has quit (Ping timeout: 248 seconds)
2022-04-16 08:05:13	→	nf has joined #haskell
2022-04-16 08:12:06	sm	welcome sarupbanskota 
2022-04-16 08:12:41	sm	does anyone know how do what `error` does, but without prefixing the program name to the output ?
2022-04-16 08:13:16	←	terrorjack has quit (Quit: The Lounge - https://thelounge.chat)
2022-04-16 08:14:30	→	terrorjack has joined #haskell
2022-04-16 08:15:23	glguy	sm: either throw a different exception, or catch the one error throws at the top-level and print differently
2022-04-16 08:15:43	sm	thanks
2022-04-16 08:17:27	glguy	error "like this" `catch` \(ErrorCall a) -> putStrLn ("stuff " ++ a)
2022-04-16 08:18:08	←	sarupbanskota has quit (Quit: Client closed)
2022-04-16 08:18:55	glguy	sm: I feel like I made an example of this for hledger at one point
2022-04-16 08:21:12	←	whatsupdoc has quit (Quit: Connection closed for inactivity)
2022-04-16 08:21:38	sm	really.. helpful example, thanks glguy
2022-04-16 08:22:08	←	redb has quit (Ping timeout: 248 seconds)
2022-04-16 08:27:37	→	redb has joined #haskell
2022-04-16 08:28:00	←	merijn has quit (Ping timeout: 248 seconds)
2022-04-16 08:28:12	→	pavonia has joined #haskell
2022-04-16 08:31:59	←	redb has quit (Ping timeout: 256 seconds)
2022-04-16 08:32:03	→	vicfred has joined #haskell
2022-04-16 08:34:14	→	redb has joined #haskell
2022-04-16 08:34:47	←	waleee has quit (Ping timeout: 240 seconds)
2022-04-16 08:38:09	sm	good inspiration anyway
2022-04-16 08:38:13	⚡	sm goes slightly mad trying to customise parse errors
2022-04-16 08:38:28	←	redb has quit (Ping timeout: 246 seconds)
2022-04-16 08:39:35	sm	brain is fried I guess. Close:
2022-04-16 08:39:35	sm	error' :: String -> a
2022-04-16 08:39:35	sm	error' msg = errorWithoutStackTrace ("Error: "<> msg)
2022-04-16 08:39:35	sm	--  `catch` \(ErrorCall a) -> putStrLn $ "Test: " ++ msg
2022-04-16 08:50:43	→	redb has joined #haskell
2022-04-16 08:52:49	→	cdman has joined #haskell
2022-04-16 08:55:36	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-16 08:59:29	←	alp_ has quit (Ping timeout: 248 seconds)
2022-04-16 09:04:14	→	yauhsien has joined #haskell
2022-04-16 09:05:39	→	mud has joined #haskell
2022-04-16 15:41:13	ℹ	irc: disconnected from server
2022-04-16 15:41:39	→	oxide has joined #haskell
2022-04-16 15:41:39	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-16 15:41:39	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-16 15:41:39	ℹ	Channel #haskell: 698 nicks (1 op, 0 voices, 697 normals)
2022-04-16 15:41:40	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-16 15:41:40	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-16 15:47:59	crazazy	simeon: what you're describing sounds exactly like fix though, what should make your function different?
2022-04-16 15:48:20	→	mastarija has joined #haskell
2022-04-16 15:49:12	→	dcoutts_ has joined #haskell
2022-04-16 15:52:01	abastro[m]	It has an extra point.
2022-04-16 15:52:24	juri_	supersven: that's on the radar, but accelerate so far requires non-free nvidia components. I'll have to fix that before i can use it.
2022-04-16 15:52:28	crazazy	so he wants to compose functions endlessly?
2022-04-16 15:52:35	crazazy	I don't thing haskell allows that
2022-04-16 15:52:54	crazazy	seen has it has a problem with "fix const"
2022-04-16 15:53:19	→	pnotequalnp has joined #haskell
2022-04-16 15:54:25	abastro[m]	Haskell do allow that
2022-04-16 15:55:42	crazazy	> fix (+0) 1
2022-04-16 15:55:43	lambdabot	 error:
2022-04-16 15:55:43	lambdabot	     • Could not deduce (Num t0)
2022-04-16 15:55:43	lambdabot	       from the context: (Num t, Num (t -> t1))
2022-04-16 15:56:03	abastro[m]	Tho ye, you cannot have sth useful I think
2022-04-16 15:56:31	→	michalz has joined #haskell
2022-04-16 15:57:13	abastro[m]	> let g f = f . g f in let f x = 3 in g f
2022-04-16 15:57:15	lambdabot	 error:
2022-04-16 15:57:15	lambdabot	     • No instance for (Typeable a0)
2022-04-16 15:57:15	lambdabot	         arising from a use of ‘show_M56310801027013224528’
2022-04-16 15:57:29	abastro[m]	..
2022-04-16 15:57:58	abastro[m]	> let g f = f . g f in let f x = 3 in g f 10
2022-04-16 15:57:59	lambdabot	 3
2022-04-16 15:59:12	crazazy	@type let g f = f . g f in g
2022-04-16 15:59:13	lambdabot	(b -> b) -> a -> b
2022-04-16 15:59:21	crazazy	ah
2022-04-16 16:00:38	abastro[m]	I guess one could do like..
2022-04-16 16:01:23	→	axeman has joined #haskell
2022-04-16 16:01:27	abastro[m]	> let g f = f . g f in let f n = if n * n < 20 then n+1 else error (show n) in g f 0
2022-04-16 16:01:34	lambdabot	 mueval-core: Time limit exceeded
2022-04-16 16:01:42	abastro[m]	Huh
2022-04-16 16:01:43	←	eggplantade has quit (Remote host closed the connection)
2022-04-16 16:02:05	crazazy	i guess its just fix mixed with const
2022-04-16 16:02:12	abastro[m]	Oh right, lazy evaluatiob. Lol
2022-04-16 16:02:57	crazazy	> let g f = f . g f in let f xs = 1:xs in take 20 $ g f error
2022-04-16 16:02:59	lambdabot	 [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
2022-04-16 16:03:28	→	redb has joined #haskell
2022-04-16 16:04:07	←	deadmarshal_ has quit (Ping timeout: 240 seconds)
2022-04-16 16:04:54	abastro[m]	Oh wow, yea, I guess that one is useful
2022-04-16 16:05:03	abastro[m]	Can recreate cycle
2022-04-16 16:05:26	crazazy	i mean its the same as
2022-04-16 16:05:41	crazazy	> take 20 $ fix (\f -> 1:f)
2022-04-16 16:05:43	lambdabot	 [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
2022-04-16 16:05:53	abastro[m]	The point part is rather useless tho, so you can put `error` and it will never be there
2022-04-16 16:06:11	abastro[m]	Yea
2022-04-16 16:06:49	abastro[m]	> let g f x = g f $! (f x) in let f n = if n * n < 20 then n+1 else error (show n) in g f 0
2022-04-16 16:06:50	lambdabot	 *Exception: 5
2022-04-16 16:07:00	abastro[m]	*Cheat*
2022-04-16 16:07:27	←	redb has quit (Ping timeout: 240 seconds)
2022-04-16 16:08:01	→	abastro has joined #haskell
2022-04-16 16:08:36	←	jpds has quit (Ping timeout: 240 seconds)
2022-04-16 16:11:07	→	fciocan has joined #haskell
2022-04-16 16:11:18	←	fciocan has quit (Client Quit)
2022-04-16 16:11:22	←	merijn has quit (Ping timeout: 246 seconds)
2022-04-16 16:13:53	→	jpds has joined #haskell
2022-04-16 16:18:17	Andrew	juri_: I am here
2022-04-16 16:19:43	juri_	Andrew: ah. :)
2022-04-16 16:20:32	←	gurkenglas has quit (Ping timeout: 248 seconds)
2022-04-16 16:22:57	→	Pickchea has joined #haskell
2022-04-16 16:25:52	←	axeman has quit (Ping timeout: 248 seconds)
2022-04-16 16:26:32	→	jackson99 has joined #haskell
2022-04-16 16:26:59	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2022-04-16 16:30:14	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-16 16:30:59	→	coot has joined #haskell
2022-04-16 16:31:01	→	jgeerds has joined #haskell
2022-04-16 16:34:01	→	tromp has joined #haskell
2022-04-16 16:34:48	→	redb has joined #haskell
2022-04-16 16:37:40	→	Benzi-Junior has joined #haskell
2022-04-16 16:38:14	←	zmt01 has quit (Ping timeout: 250 seconds)
2022-04-16 16:39:19	←	redb has quit (Ping timeout: 256 seconds)
2022-04-16 16:40:51	←	mixfix41 has quit (Quit: need to reboot)
2022-04-16 16:41:07	→	redb has joined #haskell
2022-04-16 16:42:15	→	merijn has joined #haskell
2022-04-16 16:44:37	←	rembo10 has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-16 16:44:50	→	chomwitt has joined #haskell
2022-04-16 16:45:33	←	log101 has quit (Ping timeout: 256 seconds)
2022-04-16 16:45:34	→	rembo10 has joined #haskell
2022-04-16 16:45:36	←	redb has quit (Ping timeout: 250 seconds)
2022-04-16 16:46:43	←	merijn has quit (Ping timeout: 246 seconds)
2022-04-16 16:50:28	←	little_mac has quit (Remote host closed the connection)
2022-04-16 16:55:30	→	axeman has joined #haskell
2022-04-16 16:56:40	→	daniii_ has joined #haskell
2022-04-16 17:02:27	→	eggplantade has joined #haskell
2022-04-16 17:06:51	←	eggplantade has quit (Ping timeout: 250 seconds)
2022-04-16 17:11:13	←	michalz has quit (Ping timeout: 248 seconds)
2022-04-16 17:13:29	→	fendor has joined #haskell
2022-04-16 17:13:30	→	redb has joined #haskell
2022-04-16 17:14:05	←	xff0x_ has quit (Read error: Connection reset by peer)
2022-04-16 17:16:24	abastro	How do I improve readability of: https://paste.tomsmeding.com/ZXwz0j8D
2022-04-16 17:17:14	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-16 17:17:51	←	redb has quit (Ping timeout: 256 seconds)
2022-04-16 17:19:02	hpc	make the font bigger? :P
2022-04-16 17:19:18	→	merijn has joined #haskell
2022-04-16 17:19:32	abastro	Welp howwwww
2022-04-16 17:19:44	geekosaur	DemiMarieObenour, we know. a stable xmonad-like for Wayland is one of our future directions. but as yet Wayland is unstable enough that we expect too be around for a while
2022-04-16 17:20:02	geekosaur	plus Red Hat has commercial commitments until2030 so it'll be around at least that long
2022-04-16 17:20:04	abastro	Oh, wayland is also unstable?
2022-04-16 17:20:05	abastro	Meh.
2022-04-16 17:20:18	geekosaur	bad things happen when your compositor crashes
2022-04-16 17:20:41	hpc	abastro: hmm, maybe start by commenting the different sections?
2022-04-16 17:21:02	hpc	here's how it finds the first letter, here's how it scans forward for the rest of the search query, etc
2022-04-16 17:30:46	←	kenran has quit (Quit: WeeChat info:version)
2022-04-16 17:30:54	←	adanwan has quit (Remote host closed the connection)
2022-04-16 17:31:17	→	adanwan has joined #haskell
2022-04-16 17:31:28	abastro	I see, perhaps I should add more comments
2022-04-16 17:31:55	abastro	How did you know that it was about finding some letters?
2022-04-16 17:32:56	hpc	mostly the type/name
2022-04-16 17:32:59	⚡	Maxdamantus wonders if Wayland will add better support sometime for monitors with different DPIs, so it works as well as Xorg.
2022-04-16 17:33:21	hpc	it's taking a 2d grid of characters and returning a boolean based on some text
2022-04-16 17:33:35	abastro	I see, haskellers mostly read types I guess
2022-04-16 17:33:36	hpc	which you fold over, and then there's an equality test further in
2022-04-16 17:34:12	hpc	i would have to read it in further detail to tell if there's something like the word is allowed to turn corners or loop back on itself
2022-04-16 17:38:52	←	abastro has quit (Remote host closed the connection)
2022-04-16 17:41:14	→	redb has joined #haskell
2022-04-16 17:42:57	←	zer0bitz has quit (Read error: Connection reset by peer)
2022-04-16 17:43:24	ℹ	phma_ is now known as phma
2022-04-16 17:44:58	→	log101 has joined #haskell
2022-04-16 17:45:31	←	redb has quit (Ping timeout: 246 seconds)
2022-04-16 17:49:28	→	xff0x_ has joined #haskell
2022-04-16 17:51:56	→	zer0bitz has joined #haskell
2022-04-16 17:52:16	←	merijn has quit (Ping timeout: 248 seconds)
2022-04-16 17:52:56	←	yauhsien has quit (Remote host closed the connection)
2022-04-16 17:55:44	abastro[m]	Yea, tho e.g. loopback might arguably be trivial detail
2022-04-16 18:03:47	→	yauhsien has joined #haskell
2022-04-16 18:04:05	→	zincy has joined #haskell
2022-04-16 18:05:27	←	log101 has quit (Ping timeout: 256 seconds)
2022-04-16 18:06:25	DemiMarieObenour	geekosaur: I would not be surprised if major distributions drop Wayland support before that
2022-04-16 18:06:49	geekosaur	I assume you meant X11, but yes, some probably will
2022-04-16 18:07:59	geekosaur	but that won't necessarily be the end; when gnome 3 came out a bunch of distros dropped support for gnome 2, so someone else took over support for it (mate) and it's back again
2022-04-16 18:08:17	geekosaur	open source is funny that way
2022-04-16 18:08:51	←	yauhsien has quit (Ping timeout: 256 seconds)
2022-04-16 18:09:27	geekosaur	we'll just have to wait and see if people care enough
2022-04-16 18:13:20	→	shriekingnoise has joined #haskell
2022-04-16 18:13:47	DemiMarieObenour	Yeah, I meant X11
2022-04-16 18:13:55	DemiMarieObenour	I would edit it if it were not for the IRC bridge
2022-04-16 18:14:19	DemiMarieObenour	The biggest problem with X11, though, is that it is a legitimate security risk.
2022-04-16 18:14:27	←	frost has quit (Quit: Client closed)
2022-04-16 18:15:02	→	redb has joined #haskell
2022-04-16 18:16:17	Maxdamantus	Is Wayland really that different in terms of security risk? It seems fairly similar to me.
2022-04-16 18:16:52	Maxdamantus	afaik both protocols have ways of capturing the screen and of sending input, because those things are sometimes useful.
2022-04-16 18:17:09	Maxdamantus	and that's basically all you need for there to be a security risk.
2022-04-16 18:17:52	geekosaur	the real security risk is that in X11 any program can listen on key events sent to any client
2022-04-16 18:17:59	geekosaur	which is to say, snooppasswords
2022-04-16 18:18:11	geekosaur	wayland prevents this
2022-04-16 18:18:26	geekosaur	x11's security model, such as it is, pretty much can't
2022-04-16 18:18:35	Maxdamantus	Hm, okay, so basically the XRecord extension.
2022-04-16 18:19:10	Maxdamantus	Well, you could presumably disable XRecord. Not sure if it's that useful.
2022-04-16 18:19:38	←	Flonk has quit (Quit: Ping timeout (120 seconds))
2022-04-16 18:19:45	→	abastro has joined #haskell
2022-04-16 18:19:59	→	Flonk has joined #haskell
2022-04-16 18:20:01	geekosaur	you don't even need XRecord
2022-04-16 18:20:29	geekosaur	just register interest in key events on the root window (and, by default, all subwindows)
2022-04-16 18:20:51	geekosaur	XRecord just makes it a little more convenient
2022-04-16 18:22:11	Maxdamantus	Hm, right.
2022-04-16 18:23:52	→	ccntrq has joined #haskell
2022-04-16 18:23:58	Maxdamantus	Would you have to then deregister/reregister the key events to forward the input to the target window?
2022-04-16 18:26:16	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-16 18:27:19	→	acidjnk has joined #haskell
2022-04-16 18:28:27	Maxdamantus	Guess not, since it looks like you can control that using the `propagate` flag in `XSendEvent`.
2022-04-16 18:29:04	→	bitdex has joined #haskell
2022-04-16 18:29:07	←	Pickchea has quit (Ping timeout: 240 seconds)
2022-04-16 18:29:38	←	coot has quit (Quit: coot)
2022-04-16 18:30:40	←	jgeerds has quit (Ping timeout: 248 seconds)
2022-04-16 18:31:22	→	DNH has joined #haskell
2022-04-16 18:31:47	←	axeman has quit (Ping timeout: 240 seconds)
2022-04-16 18:32:18	→	CiaoSen has joined #haskell
2022-04-16 18:33:43	geekosaur	well, there is a way to prevent other clients from seeing key events, and xterm even provides a menu item to activate/deactivate it for when you are typing passwords, but it's an annoying extra step and ~nobody ever bothers, to the point that other terminal emulators pretty much don't even bother with it
2022-04-16 18:34:25	geekosaur	`man 7 X` also provides some tips for configuring X security to minimize the risk, but it's pretyt limited
2022-04-16 18:34:47	geekosaur	those GUI popups that ask for passwords use it, though
2022-04-16 18:35:28	geekosaur	(keyboard grab, if you want to look up the details)
2022-04-16 18:36:07	←	odnes has quit (Remote host closed the connection)
2022-04-16 18:36:16	←	redb has quit (Ping timeout: 246 seconds)
2022-04-16 18:36:25	→	odnes has joined #haskell
2022-04-16 18:37:18	←	Flonk has quit (Quit: Ping timeout (120 seconds))
2022-04-16 18:41:39	←	wyrd has quit (Remote host closed the connection)
2022-04-16 18:42:02	→	wyrd has joined #haskell
2022-04-16 18:43:37	→	log101 has joined #haskell
2022-04-16 18:43:50	→	machinedgod has joined #haskell
2022-04-16 18:47:01	←	albet70 has quit (Remote host closed the connection)
2022-04-16 18:47:26	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2022-04-16 18:47:27	→	redb has joined #haskell
2022-04-16 18:47:53	←	zincy has quit (Remote host closed the connection)
2022-04-16 18:47:54	→	fciocan has joined #haskell
2022-04-16 18:48:39	→	DNH has joined #haskell
2022-04-16 18:52:32	←	redb has quit (Ping timeout: 248 seconds)
2022-04-16 18:53:09	→	albet70 has joined #haskell
2022-04-16 18:53:25	→	zebrag has joined #haskell
2022-04-16 18:55:33	abastro	Apparently, test code can replace types r8?
2022-04-16 18:55:52	fciocan	hello! Am I on the right channel for GSoC?
2022-04-16 18:55:53	abastro	(Btw it seems that programming beginners just do not know that type system could be strong  enough for safe refactor)
2022-04-16 18:57:45	exarkun	Do programming beginners know anything?  I guess it depends on how beginner-y they are and what they have been taught.
2022-04-16 18:58:12	abastro	Well true
2022-04-16 18:58:23	→	kenran has joined #haskell
2022-04-16 18:58:29	abastro	I meant junior developers (typical)
2022-04-16 18:58:31	c_wraith	fciocan: probably not.  this is a general-purpose channel.  It could be helpful, but it's probably not the one you're looking for.  (I don't know where that one is)
2022-04-16 18:59:01	exarkun	abastro: I imagine the modal junior developer knows how to write simple functions in javascript to use a DOM manipulation library.
2022-04-16 18:59:18	→	adnaahm has joined #haskell
2022-04-16 18:59:51	abastro	Yep
2022-04-16 18:59:59	abastro	Does not know anything about types
2022-04-16 19:00:13	→	ubert has joined #haskell
2022-04-16 19:01:30	→	axeman has joined #haskell
2022-04-16 19:02:20	←	fciocan has quit (Ping timeout: 250 seconds)
2022-04-16 19:02:23	→	jespada has joined #haskell
2022-04-16 19:02:37	→	hololeap has joined #haskell
2022-04-16 19:03:49	←	adnaahm has quit (Ping timeout: 256 seconds)
2022-04-16 19:12:09	→	redb has joined #haskell
2022-04-16 19:16:31	←	redb has quit (Ping timeout: 246 seconds)
2022-04-16 19:18:21	ℹ	irc: disconnected from server
2022-04-17 05:59:48	→	oxide has joined #haskell
2022-04-17 05:59:48	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-17 05:59:48	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-17 05:59:48	ℹ	Channel #haskell: 698 nicks (1 op, 0 voices, 697 normals)
2022-04-17 05:59:48	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-17 05:59:48	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-17 06:04:35	→	chenqisu1 has joined #haskell
2022-04-17 06:14:08	←	chomwitt has quit (Ping timeout: 248 seconds)
2022-04-17 06:15:55	energizer	is there a segment of the haskell community that's against typeclasses?
2022-04-17 06:16:07	energizer	(for one reason or another)
2022-04-17 06:17:48	→	yauhsien has joined #haskell
2022-04-17 06:18:28	davean	energizer: I doubt it is possible to actually program anything non-trivial in Haskell without being for typeclasses, and if they don't code non-trivial things what part of the community are they? The set of people who program much of anything and are against typeclasses is almost definately empty. 
2022-04-17 06:19:24	davean	There are some people against multiparameter typeclasses I think? Mostly because they're not fully specified.
2022-04-17 06:20:24	energizer	i mean people who wish haskell didn't use typeclasses and used some other mechanism instead
2022-04-17 06:21:01	davean	I understood that
2022-04-17 06:21:08	davean	I answered in that light
2022-04-17 06:21:16	→	samuel has joined #haskell
2022-04-17 06:21:37	davean	You've got like a single option
2022-04-17 06:21:54	davean	And we know why its horrible
2022-04-17 06:22:09	←	samuel has quit (Client Quit)
2022-04-17 06:24:57	←	yauhsien has quit (Ping timeout: 256 seconds)
2022-04-17 06:26:04	←	merijn has quit (Ping timeout: 246 seconds)
2022-04-17 06:26:16	→	wroathe has joined #haskell
2022-04-17 06:26:17	←	wroathe has quit (Changing host)
2022-04-17 06:26:17	→	wroathe has joined #haskell
2022-04-17 06:27:38	←	Unicorn_Princess has quit (Remote host closed the connection)
2022-04-17 06:27:51	davean	Everything else you can do is either make everything concrete, which means no datastructures as complicated as Map, and then why are you using Haskell at all? It provides basicly nothing, or something basicly isomorphic to passing a dictionary, which is equivilent to typeclasses, except incoherent so you don't know if it works without tracing every path to every location in your code. 
2022-04-17 06:28:43	davean	Theres not much space here for options
2022-04-17 06:29:03	→	lottaquestions has joined #haskell
2022-04-17 06:29:29	davean	You can do pretty small things like "typeclasses, but without return type polymorphism" but thats dumb because if you look at our type system we can just recover that with some extra finger wiggling
2022-04-17 06:29:46	abastro	Yeah, never seen anyone who dislike typeclasses
2022-04-17 06:29:48	davean	at which point you're just making a style claim
2022-04-17 06:30:11	abastro	Well, I guess someone like evan(Elm creator) hated typeclasses.. but eh
2022-04-17 06:30:11	davean	abastro: yah, like asking this question says a lot about not understanding what they are mathematicly I think
2022-04-17 06:30:41	hololeap	energizer: elm people :)
2022-04-17 06:31:20	←	eggplantade has quit (Remote host closed the connection)
2022-04-17 06:31:37	davean	hololeap: except even they implimented them, just as special cases, not a language feature
2022-04-17 06:31:59	abastro	I also don't know what is typeclasses in mathematics tho
2022-04-17 06:32:02	davean	thats sorta a debate about who should get access to type classes
2022-04-17 06:32:26	abastro	Do you mean like, records denoting extra structures equipped on a set?
2022-04-17 06:33:10	davean	abastro: well, importantly they're coherent
2022-04-17 06:35:20	abastro	Coherent?
2022-04-17 06:35:51	abastro	Clearly I slept through math formalism class I guess, as I don't know what coherence means here
2022-04-17 06:36:29	c_wraith	it means they behave the same way in all contexts
2022-04-17 06:37:12	c_wraith	Like, it doesn't depend on the context `a == b' always returns the same result for the same expressions a and b
2022-04-17 06:37:43	c_wraith	If type classes could be overridden locally, that would no longer be true
2022-04-17 06:38:58	abastro	Oh I thought you were talking about typeclasses in mathematics
2022-04-17 06:41:02	davean	I mean they're not really different - type theory is a mathematics.
2022-04-17 06:41:30	abastro	Yea type theory is a branch of mathematics
2022-04-17 06:41:37	davean	right all you have in math is branches
2022-04-17 06:41:45	c_wraith	math is a tree!
2022-04-17 06:41:47	davean	and some functors between them :)
2022-04-17 06:42:22	davean	the above discussion ports pretty trivial to several parts of mathematics.
2022-04-17 06:43:44	abastro	Hmm, I  wonder if `process` package is bundled with ghc installations.
2022-04-17 06:44:13	abastro	I want sth which won't upgrade until ghc itself is reinstalled..
2022-04-17 06:44:30	abastro	How do I enforce this
2022-04-17 06:44:44	davean	abastro: thats not how it works
2022-04-17 06:44:46	abastro	Wait nvm, I guess I don't need to worry about it in this specific case
2022-04-17 06:44:48	davean	You're wrong about your assumption
2022-04-17 06:44:54	abastro	Which assumption?
2022-04-17 06:44:57	davean	https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/packages.html process is in GHC's distruction set
2022-04-17 06:45:02	davean	but that doesn't mean it doesn't get upgraded
2022-04-17 06:45:11	davean	I've *often* had to upgrade packages that ship with GHC
2022-04-17 06:45:12	abastro	I see
2022-04-17 06:45:23	davean	and nixos FUCKED ME OVER by making your dumb, wrong assumption
2022-04-17 06:45:24	abastro	Quite annoying when packages upgrade
2022-04-17 06:45:31	davean	why?
2022-04-17 06:45:33	c_wraith	There are only a few packages that are wired in, like ghc, template-haskell, base, and I'm probably missing a couple
2022-04-17 06:45:51	davean	Why do you even notice at all when packages upgrade?
2022-04-17 06:45:55	abastro	Well, many baseline packages end up duplicated
2022-04-17 06:46:04	abastro	+ It takes awful lot of time to upgrade those packages
2022-04-17 06:46:04	davean	So?
2022-04-17 06:46:09	davean	how?
2022-04-17 06:46:18	davean	How does it take more than a couple seconds of CPU time?
2022-04-17 06:46:32	abastro	By building those packages?
2022-04-17 06:46:44	davean	Yes, which is a couple seconds of CPU once and its over
2022-04-17 06:46:49	abastro	Uh
2022-04-17 06:46:56	abastro	For me it's like solid 10 minutes
2022-04-17 06:47:37	davean	... I can build a very large stack of everything from scratch in 10 minutes, what are you building this on?
2022-04-17 06:48:02	davean	And it doesn't ever build stuff again until it changes
2022-04-17 06:48:10	abastro	I mean, for me updating something like `cabal-install` (by updated hackage) takes 10 minutes
2022-04-17 06:48:11	davean	that would still be a single 10 minutes the one time if changes.
2022-04-17 06:48:50	abastro	IDK, somehow it duplicates the baseline dependencies as well.
2022-04-17 06:48:56	→	cosimone` has joined #haskell
2022-04-17 06:49:08	davean	I mean, if it depends on updates of them
2022-04-17 06:49:28	davean	I just deleted ~/.cabal, and I'll run cabal install cabal-install
2022-04-17 06:49:50	c_wraith	I use ghcup to install the cabal binary these days
2022-04-17 06:49:52	←	cosimone has quit (Ping timeout: 248 seconds)
2022-04-17 06:49:55	abastro	package A depends on package B, package A updates, new copy of package B installed
2022-04-17 06:50:06	abastro	Oh, the cabal-install thing was a demonstration, and I mean the case of depending on them
2022-04-17 06:50:08	davean	abastro: one single time
2022-04-17 06:50:16	abastro	Well I should have rather said, `Cabal`
2022-04-17 06:50:21	davean	That happens a single time, and then never again until either A or B upgrades
2022-04-17 06:50:49	abastro	I mean, whenever package A upgrades, new copy of the same version of package B is installed
2022-04-17 06:50:57	davean	Yes, one single time
2022-04-17 06:51:25	abastro	And quite often, one of the packages upgrade.
2022-04-17 06:51:33	abastro	Like once a week
2022-04-17 06:51:43	→	Null_A has joined #haskell
2022-04-17 06:51:52	abastro	And that takes 10 minutes
2022-04-17 06:52:16	davean	The impressive part here for me is it takes 10 minutes, but also stuff low down in the stack defiantely doesn't update once a week
2022-04-17 06:52:39	abastro	I mean, stuff higher up in the stack updates
2022-04-17 06:52:44	davean	Most of them don't upgrade once a year.
2022-04-17 06:52:58	abastro	And then, all its dependency has additional copy of the same version
2022-04-17 06:53:08	abastro	Let's say, package B is updated from 1.0 to 1.1
2022-04-17 06:53:18	abastro	package B depends on package A version 1.0
2022-04-17 06:53:24	c_wraith	I still don't understand why you're updating packages all the time.
2022-04-17 06:53:41	abastro	Then, when package B updates from 1.0 to 1.1, it installs a copy of package A version 1.0
2022-04-17 06:53:46	abastro	So there is 2 copies of package A version 1.0
2022-04-17 06:53:53	davean	Incorrect
2022-04-17 06:53:56	abastro	Even though package A is not updated
2022-04-17 06:53:57	davean	YOu're just wrong
2022-04-17 06:54:00	abastro	Well, that happened to me
2022-04-17 06:54:04	davean	No, it doesn't
2022-04-17 06:54:06	abastro	I saw it.
2022-04-17 06:54:07	davean	You're jsut wrong
2022-04-17 06:54:13	c_wraith	it can happen if A inlines stuff from B
2022-04-17 06:54:14	davean	No, you are wrong about what you saw
2022-04-17 06:54:44	abastro	Yep, I guess package A inlined some stuffs of B and that portion changed.
2022-04-17 06:54:53	abastro	Somehow it happens quite frequently, really.
2022-04-17 06:55:46	c_wraith	but the thing is... while those versions of A have the same version number, they are *not* compatible
2022-04-17 06:55:56	c_wraith	Or at least, cabal can't assume they are
2022-04-17 06:56:10	c_wraith	so it has to manage them separately
2022-04-17 06:56:13	abastro	Indeed.
2022-04-17 06:56:13	davean	c_wraith: No, V depends on A
2022-04-17 06:56:17	davean	c_wraith: No, B depends on A
2022-04-17 06:56:30	c_wraith	davean: that's not what the premise said
2022-04-17 06:56:48	davean	"01:23:18 abastro package B depends on package A version 1.0"
2022-04-17 06:56:59	davean	No, that is what he stated here
2022-04-17 06:57:18	c_wraith	hmm, that's incompatible with what it says above.
2022-04-17 06:57:25	davean	So B updating can not cause an rebuild of A
2022-04-17 06:57:27	abastro	Hm yea I could be confusing something here, but at least if something updates, something else has to update as well
2022-04-17 06:57:28	davean	It *can not*
2022-04-17 06:57:44	davean	Only an update of A can cause a rebuild of B
2022-04-17 06:57:50	abastro	I guess things underneath were updated then.
2022-04-17 06:58:00	c_wraith	davean: yet above, it says A depends on B.  I think you have to assume one of those was a misstatement, and in the direction that makes sense
2022-04-17 06:58:39	abastro	Sorry, this thing is confusing
2022-04-17 06:58:39	davean	c_wraith: well the second scenario is entirely incopatible with the first, so I assumed he started talkign about a different scenario 
2022-04-17 06:58:59	abastro	I confused I guess
2022-04-17 06:59:01	→	andrey__ has joined #haskell
2022-04-17 06:59:15	c_wraith	abastro: the one thing you haven't addressed is why you update packages constantly.  Are they security releases?
2022-04-17 06:59:23	yushyin	Maybe not updating the index as often as you do is an option? ^^
2022-04-17 06:59:29	abastro	^
2022-04-17 06:59:30	c_wraith	do they have changes you want to take advantage of?
2022-04-17 06:59:35	abastro	Well, I update the package index
2022-04-17 06:59:39	c_wraith	or are you just creating churn for yourself?
2022-04-17 06:59:40	davean	I mean even if he does, theres not a ton that changes low down in the stack
2022-04-17 06:59:43	abastro	cabal then chooses to update it.
2022-04-17 06:59:57	c_wraith	cabal doesn't update stuff unless you run cabal clean or something
2022-04-17 06:59:58	yushyin	you can also pin the index
2022-04-17 07:00:00	abastro	My experience was that there were many changes in the lower level
2022-04-17 07:00:04	davean	its damn rare for one of the distributed packages to get updated *with* GHC, never mind between releases
2022-04-17 07:00:16	c_wraith	if you just use cabal build, it doesn't care that that the index changed
2022-04-17 07:00:25	c_wraith	it just uses the existing plan
2022-04-17 07:00:37	davean	Most low level packages don't see a release every 2 years
2022-04-17 07:00:38	abastro	Strange, for me `cabal build` cares that index changed.
2022-04-17 07:00:58	sclv	only if you cabal configure again
2022-04-17 07:01:01	sclv	it caches
2022-04-17 07:01:04	abastro	Hmmmmm
2022-04-17 07:01:15	sclv	it caches the build plan unless you reconfigure
2022-04-17 07:01:17	abastro	Now I don't understand what phenomenon I am getting
2022-04-17 07:01:18	sclv	or clean
2022-04-17 07:01:27	←	andrey_ has quit (Ping timeout: 240 seconds)
2022-04-17 07:01:35	abastro	Because it tries to update hard to the newest version unless I do `cabal freeze`
2022-04-17 07:01:53	davean	extensible-exceptions last released in 2012, filepath has a release in late 2021 but the one before that is 2018 ...
2022-04-17 07:01:55	abastro	5 copies of `aeson-2.0.3.0` is irritating tbh
2022-04-17 07:02:00	sclv	if you change the cabal file it forces a reconfigure btw
2022-04-17 07:02:04	davean	Like the low level packages *litterly* go years between releases
2022-04-17 07:02:06	abastro	Oh
2022-04-17 07:02:15	abastro	Now I see.
2022-04-17 07:02:21	abastro	I changed the cabal file without knowing tht
2022-04-17 07:02:29	→	justsomeguy has joined #haskell
2022-04-17 07:02:31	sclv	and always calculates a buld plan from latest
2022-04-17 07:02:42	abastro	So whenever I change cabal file, I should run cabal freeze to fix the build plan. I guess
2022-04-17 07:02:43	sclv	but you can fix an index snapshot to avoid this
2022-04-17 07:02:59	davean	abastro: Even with a reconfigure it'll only rebuild if something is different. Other than build time is there something that upsets you about having multiple copies of things like aeson?
2022-04-17 07:03:03	sclv	or just let cabal do what it does since the behavior is good
2022-04-17 07:03:08	abastro	Yea, but since sometimes I want newer stuffs, I guess I should go with cabal freeze
2022-04-17 07:03:13	davean	(aeson is VERY high up the tree, so it'll rebuild a lot)
2022-04-17 07:03:18	sclv	that default behavior was picked for a reason
2022-04-17 07:03:39	sclv	it ensures your locally developed packages can take advantage of the latest bugfixes
2022-04-17 07:03:55	abastro	Multiple copy of things are irritating because, you know, disk space
2022-04-17 07:04:00	sclv	and remain building against the bleeding edge
2022-04-17 07:04:18	abastro	Currently my cabal store is 5GB but I am afraid it will easily grow to 50GB+
2022-04-17 07:04:25	davean	abastro: It won't
2022-04-17 07:04:33	davean	5GiB is HUGE for it
2022-04-17 07:04:39	abastro	I experienced such cabal store growth
2022-04-17 07:04:49	davean	And every time you do a compiler upgrade the old stuff becomes irrelivent
2022-04-17 07:04:50	sclv	all my disk space for haskell stuff pales in comparison to one modestly graphiclly intensive game from 10 years ago
2022-04-17 07:04:57	abastro	Well also other ppl in this chat said similar things about huge cabal store
2022-04-17 07:05:27	sclv	or like ten episodes of a podcast that doesn’t compress its stream well
2022-04-17 07:05:28	yushyin	if disk space is your concern, haskell might not be the right language for you :P
2022-04-17 07:05:34	davean	You can remove your old compilers when you're done using them
2022-04-17 07:05:41	abastro	I did
2022-04-17 07:05:52	abastro	ghc-9.2.2 cabal store contains 5.3GB of contents.
2022-04-17 07:07:00	davean	Hum, as far as I can tell, process is the fastest updated distributed library and it averages like once per quarter.
2022-04-17 07:07:06	abastro	I mean.. I think 50GB~100GB range could surely be concerning
2022-04-17 07:07:30	abastro	Nvm about the `process` part
2022-04-17 07:07:35	davean	abastro: And I mean if that ever happens I would ... do something impressive
2022-04-17 07:07:48	abastro	OH right, some dependency of `lens` also frequently updates
2022-04-17 07:08:04	davean	I *think* I could *make* that happen inside a GHC lifetime if I tried *really* hard
2022-04-17 07:08:14	davean	I'm not sure it is even possible though
2022-04-17 07:08:16	yushyin	i have multiple ghcs and a cabal store of 8GB, also 10GB ~/.ghcup
2022-04-17 07:08:21	davean	(For a single GHC version)
2022-04-17 07:08:28	abastro	Interesting
2022-04-17 07:08:39	abastro	Perhaps xmonad stuffs are quite huge?
2022-04-17 07:08:43	davean	No
2022-04-17 07:08:47	abastro	Hmmm
2022-04-17 07:08:58	abastro	How do I have 5GB cabal store, I wonder
2022-04-17 07:09:14	davean	I mean 5GiB is possible
2022-04-17 07:09:26	abastro	In a week
2022-04-17 07:09:30	davean	but 50GiB is an order of magnitude higher and it gets VERY hard to keep making it larger
2022-04-17 07:09:49	abastro	I see, I mean before in 8.10.7, I had 20~30GB
2022-04-17 07:09:58	davean	oh I mean, getting to like 2GiB is what I get just setting up - there s a lot of packages.
2022-04-17 07:10:00	abastro	50GB wouldn't take long from there I think
2022-04-17 07:10:08	justsomeguy	I don't even use many Haskell packages (just core, QuickCheck, and HSpec), but my ~/.cabal/package directory is 781.84MiB. ~/.stack is 22.7GiB.
2022-04-17 07:10:23	davean	justsomeguy: yes, but how many GHC versions?
2022-04-17 07:10:25	abastro	Yep, wait even stack suffers from the problem
2022-04-17 07:10:33	justsomeguy	davean: Maybe two?
2022-04-17 07:10:36	sclv	stack suffers more!
2022-04-17 07:10:41	abastro	More?
2022-04-17 07:10:43	davean	yah, stack stuffers much more
2022-04-17 07:10:50	abastro	I thought pinning versions would have lessened the problem
2022-04-17 07:11:27	justsomeguy	Ohh, nevermind, I forgot that I have a test project that pulls the latest nightly GHC.
2022-04-17 07:11:33	justsomeguy	No wonder.
2022-04-17 07:11:34	davean	justsomeguy: .. right
2022-04-17 07:11:56	abastro	Btw I like how `lens` package gets updated every other week or so, some dependeny of it is clearly updated often
2022-04-17 07:11:57	davean	and building one project can reasonable build 2GiB
2022-04-17 07:12:00	abastro	I don't know which
2022-04-17 07:12:04	davean	but its very hard to keep growing
2022-04-17 07:12:16	davean	abastro: well right, lens is basicly the top of the tree
2022-04-17 07:12:26	abastro	Okay, let's see if it does not grow from 5GB
2022-04-17 07:12:39	abastro	Yea, lens is annoying
2022-04-17 07:12:42	⚡	justsomeguy goes off somewhere to delete his nightly stackage resolver snapshots.
2022-04-17 07:12:43	davean	abastro: I mean do clean out old compilers as you move on from them
2022-04-17 07:12:58	abastro	I even deleted 8.10.7
2022-04-17 07:13:01	davean	Thats where the real growth is, that grows linearly
2022-04-17 07:13:13	abastro	And that's barely "old", you know, in terms of what is really old
2022-04-17 07:13:14	davean	but inside a compiler its growth is sublinear
2022-04-17 07:13:40	←	machinedgod has quit (Ping timeout: 246 seconds)
2022-04-17 07:13:53	abastro	11 copies of gi-cairo-render lol
2022-04-17 07:14:08	abastro	I thought I could do nothing in a week
2022-04-17 07:16:13	←	xff0x_ has quit (Read error: Connection reset by peer)
2022-04-17 07:17:12	davean	abastro: so you have two concerns; disk usage and build time 
2022-04-17 07:17:23	abastro	Yep.
2022-04-17 07:17:32	davean	disk usage I don't think is worth worrying about, since it should be sublinear
2022-04-17 07:17:37	davean	build time, thats entirely different
2022-04-17 07:17:51	abastro	Well okay, to be frank, disk usage worry was from using old laptop a year ago
2022-04-17 07:17:57	davean	that should be as it is, I'm not sure why it bothers you but thats the core problem as I see it
2022-04-17 07:18:11	abastro	Had like 64GB on that 5-6 year old laptop
2022-04-17 07:18:52	abastro	Is the build time shorter than 10 minutes for you?
2022-04-17 07:19:18	davean	I mean yes, I can build lens and a bunch of things it doesn't include in way less than 10 minutes
2022-04-17 07:19:28	davean	from a brand new system
2022-04-17 07:19:46	davean	but I mostly build on a desktop
2022-04-17 07:19:58	davean	So you know, possibly massively better performance
2022-04-17 07:20:03	abastro	How good is your desktop end?
2022-04-17 07:20:31	davean	pretty bad, its a 1950X, so you know old and slow
2022-04-17 07:20:50	davean	a modern consumer chip is easly 50% faster
2022-04-17 07:21:26	davean	Just performance is never an issue for me so I've not considered ugprading
2022-04-17 07:21:33	→	shriekingnoise has joined #haskell
2022-04-17 07:23:15	abastro	Oh, I see
2022-04-17 07:23:27	abastro	Interesting how newer laptops still have less cores than old desktops
2022-04-17 07:23:34	abastro	Mine has 8 CPU cores
2022-04-17 07:23:43	abastro	amd-ryzen-9-4900hs
2022-04-17 07:23:47	davean	I mean its an old high end desktop
2022-04-17 07:23:57	abastro	Oh
2022-04-17 07:23:58	davean	but a modern gaming CPU has 16 cores
2022-04-17 07:30:06	ℹ	irc: disconnected from server
2022-04-17 07:30:37	→	oxide has joined #haskell
2022-04-17 07:30:37	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-17 07:30:37	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-17 07:30:37	ℹ	Channel #haskell: 698 nicks (1 op, 0 voices, 697 normals)
2022-04-17 07:30:37	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-17 07:30:37	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-17 07:30:45	davean	You happen to have only considered the slowest period of developement in computers in history, because Intel had no competition
2022-04-17 07:30:55	abastro	Interesting, basically we reached some kind of plateau in terms of computer performance
2022-04-17 07:31:05	abastro	Wait wha
2022-04-17 07:31:05	davean	and almost all the change since 2010 to 2020 was in 2018-2020
2022-04-17 07:31:11	abastro	Is it because Intel had no competition?
2022-04-17 07:31:36	abastro	I thought it was genuinely because of semiconductor dead-end
2022-04-17 07:31:40	davean	Well they stopped updating stuff, AMD came out with a competative chip, and they started again :-p
2022-04-17 07:31:45	abastro	(Can't keep going smaller)
2022-04-17 07:31:52	davean	No, there was no semiconductor dead end in the first half of that
2022-04-17 07:31:55	→	eggplantade has joined #haskell
2022-04-17 07:31:55	abastro	Lul, intel
2022-04-17 07:32:02	davean	and we've kept going smaller
2022-04-17 07:32:13	davean	There *was* a slow period in there
2022-04-17 07:32:19	davean	and there does need to be an end
2022-04-17 07:32:26	abastro	So the plateau in semiconductor is rather in the future than the past
2022-04-17 07:32:27	davean	but the slowness was also when stuff was getting faster again
2022-04-17 07:32:34	davean	er
2022-04-17 07:32:44	davean	to be clear, the slowness in getting smaller was when CPUs were getting faster again
2022-04-17 07:32:49	→	deadmarshal_ has joined #haskell
2022-04-17 07:32:58	abastro	These delayed-delayed delays are fun
2022-04-17 07:34:11	→	frost has joined #haskell
2022-04-17 07:36:07	←	eggplantade has quit (Ping timeout: 240 seconds)
2022-04-17 07:37:07	←	deadmarshal_ has quit (Ping timeout: 246 seconds)
2022-04-17 07:37:41	davean	So the Pentium 4 Willamette launched at the *end* of 2000, a quick look suggests if you got the largest RAM you could get on the market you could have, for several thousand dollars then (and multiply that a bit for modern currency), you COULD have gotten 2GiB into the system, and it looks like you probably can't buy a phone with a core as slow as its single core was. 
2022-04-17 07:37:52	davean	In practice the RAM to put 2GiB into that wasn't actually even on the market.
2022-04-17 07:38:19	davean	RAM was in MiB not GiB in practice.
2022-04-17 07:38:24	←	[itchyjunk] has quit (Ping timeout: 248 seconds)
2022-04-17 07:38:51	davean	Checking old builds, people bragged about 512MiB for the entire system
2022-04-17 07:39:58	davean	Looking at what was on sale for prebuilts they're offering like 128MiB often :)
2022-04-17 07:40:40	davean	Yes, modern systems might have more *cache* than those systems had RAM 
2022-04-17 07:42:42	→	[itchyjunk] has joined #haskell
2022-04-17 07:43:04	monochrom	In 486 days I bragged about having 16MB RAM and comfortably running OS/2. >:)
2022-04-17 07:43:15	abastro	Wow
2022-04-17 07:43:36	monochrom	(Most people settled for 4MB and ran DOS 6, maybe once in a while Windows 3.)
2022-04-17 07:43:41	davean	My computer has RAM and CPUs comparable to a supercomputer I used in 2003
2022-04-17 07:43:51	davean	*a supercomputer*
2022-04-17 07:43:59	davean	*it cost several million dollars*
2022-04-17 07:44:16	monochrom	Now let's flash back to the floppy diskette days...
2022-04-17 07:44:47	davean	abastro: anyway, your laptop CPU core is a bit faster than my desktop CPU core, but I expect your laptop gets hot within like 5-10 seconds and slows down below it per-core
2022-04-17 07:45:16	davean	I have twice the cores, but that only matters some of the time, I'm probably winning on thermals
2022-04-17 07:45:17	monochrom	Yeah laptop is more susceptible to thermal throttling.
2022-04-17 07:45:30	monochrom	But I do have a laptop cooling pad. :)
2022-04-17 07:45:54	davean	monochrom: the 486 only stopped being sold in 2007 ;)
2022-04-17 07:46:15	davean	abastro: I expect, by the end of next year, to buy a computer twice as fast as my current one
2022-04-17 07:46:34	davean	abastro: around 2004 you could probably get a computer twice as fast every year
2022-04-17 07:46:40	→	eggplantade has joined #haskell
2022-04-17 07:47:41	abastro	Twice as fast??
2022-04-17 07:47:42	davean	Ok, the best Intel CPU you could get in 2010 MIGHT have been the i5 Clarkdale, not sure
2022-04-17 07:47:44	abastro	Oh no
2022-04-17 07:47:59	davean	it had 2 cores
2022-04-17 07:48:11	monochrom	MLton was like "beware that it needs 128MB, it may be too big for your system" :)
2022-04-17 07:48:29	davean	Core i5-680 was released in April 2010
2022-04-17 07:48:47	monochrom	Today that's the average size of a smartphone app.
2022-04-17 07:48:52	davean	So, how much faster is *my* 5 year old desktop vs. a 2010 system?
2022-04-17 07:49:15	davean	well, each of my RAM sticks is the size of the *max system memory* of that CPU
2022-04-17 07:50:04	hololeap	same here which strangely gets me 12GB due to two of the slots being different (desktop comp from ~2011)
2022-04-17 07:51:17	davean	and it looks like my CPU is something like .... 20 times faster?
2022-04-17 07:52:24	hololeap	probably depends on the operations and if they're optimized by some new processor feature
2022-04-17 07:52:31	davean	hololeap: definately
2022-04-17 07:52:38	davean	thats assuming you can use my extra cores
2022-04-17 07:52:55	monochrom	I'm added to Haskell and other modern high-level languages. Going back to those slower and smaller computers is no longer an option. >:)  Although, maybe I could get hugs to run on DOS...
2022-04-17 07:53:00	hololeap	yeah
2022-04-17 07:53:06	monochrom	s/added/addicted/
2022-04-17 07:53:12	davean	and just using your standard spec benchmarks
2022-04-17 07:54:00	davean	If you compare to a Ryzen 9 5950X the comparison gets more insane
2022-04-17 07:54:05	davean	and this is in the *slow* period
2022-04-17 07:54:07	abastro[m]	When will "semiconductor dead end" hit hard
2022-04-17 07:54:15	davean	abastro[m]: unclear.
2022-04-17 07:54:26	abastro[m]	Like, it seems like smaller than 1nm is extremely hard
2022-04-17 07:54:30	davean	abastro[m]: So what REALLY happened between 2010 and now is that games went GPU based
2022-04-17 07:54:52	hololeap	abastro[m]: you have to understand that there is $$$$$$$$ in keeping up moore's law
2022-04-17 07:54:56	davean	abastro[m]: no, we already build *some* stuff smaller than 1nm, we'll almost definately go below 1nm
2022-04-17 07:55:37	←	abastro has quit (Ping timeout: 256 seconds)
2022-04-17 07:55:39	davean	abastro[m]: *gamers* stopped having to upgrade CPUs, just GPUs, and entire classes of games came into popularity that didn't even need more GPU
2022-04-17 07:55:43	hololeap	if moore's law wasn't a thing, the majority of people might start thinking about just keeping their old hardware around
2022-04-17 07:56:02	→	AlexNoo_ has joined #haskell
2022-04-17 07:56:05	davean	hololeap: well, also theres just good economic benefits from more computation
2022-04-17 07:56:08	davean	computation is enabling
2022-04-17 07:56:12	davean	most CPUs don't go to consumers
2022-04-17 07:56:22	davean	most CPUs are bought by corporations these days
2022-04-17 07:56:29	davean	well, uh, sorry, leaving out smartphones
2022-04-17 07:56:29	hololeap	right, good point, but my point still stands
2022-04-17 07:56:56	davean	hololeap: right, sure, I'm just saying even if people kept all their old equipment we'd still have a lot of money in going smaller
2022-04-17 07:57:17	davean	The replacement just ramps it up even further
2022-04-17 07:57:32	hololeap	they have an economic incentive to make sure each new gen is way faster than the last, which is going to seriously push innovation
2022-04-17 07:57:39	davean	abastro[m]: In no way is it clear where we'll top out of what is *practical*
2022-04-17 07:57:40	→	sarupbanskota has joined #haskell
2022-04-17 07:57:54	←	sarupbanskota has quit (Client Quit)
2022-04-17 07:57:56	davean	hololeap: right, but even without the consumer space we have a lot of money for it
2022-04-17 07:58:11	davean	because we need a LOT more compute to stop making money by having massively more of it
2022-04-17 07:58:15	hololeap	money that wouldn't be spent unless the jump in performance was enough...
2022-04-17 07:58:33	←	Alex_test has quit (Ping timeout: 272 seconds)
2022-04-17 07:58:44	davean	hololeap: Right, but performance makes people a LOT of money still, in terms of servers
2022-04-17 07:59:02	davean	we're massively compute limited still
2022-04-17 07:59:19	davean	sure they'd buy the current gens, and just run more of them - they are
2022-04-17 07:59:28	davean	but theres a lot of money to be made in offering the faster one
2022-04-17 07:59:30	←	AlexZenon has quit (Ping timeout: 250 seconds)
2022-04-17 07:59:35	←	AlexNoo has quit (Ping timeout: 256 seconds)
2022-04-17 07:59:47	hololeap	I still think that if they don't hit some benchmark every year they have a serious risk of everyone (including corporations) thinking twice about upgrading, which makes them pull some crazy stuff out of a hat, because these are seriously rich coporations
2022-04-17 08:00:15	davean	hololeap: I agree other than the server space
2022-04-17 08:00:41	davean	the server space will still need to buy hundreds of thousands of CPUs, per company, yearly just to keep up with current demand
2022-04-17 08:00:45	hololeap	yeah I don't actually understand the economics, but I think I understand it well enough to get that :)
2022-04-17 08:01:03	monochrom	But we already have the history that AMD was not a serious competitor therefore Intel also stagnated but still got as much purchases.
2022-04-17 08:01:03	davean	and they have things they could sell if they had more compute
2022-04-17 08:01:28	davean	monochrom: yep! though, note that was bad for the companies and they threw a LOT of money in working around it
2022-04-17 08:01:37	hololeap	davean: that's a fair point
2022-04-17 08:01:40	davean	look at the Power initiative, and the ARM cpu vendors they funded
2022-04-17 08:02:02	davean	monochrom: Corporations were scared shitless of that stagnation and poured *billions* into working around Intel's stagnation
2022-04-17 08:02:56	davean	So they *gamble* they could get ahead of that stagnation was worth tens of billions between them
2022-04-17 08:03:09	davean	which tells you just how much that increase in compute is worth to them 
2022-04-17 08:03:12	→	Alex_test has joined #haskell
2022-04-17 08:03:25	hololeap	more compute = more $$$$, but when it doesn't we blame the technology
2022-04-17 08:03:58	→	AlexZenon has joined #haskell
2022-04-17 08:04:15	davean	monochrom: I see the argument "they were fine while Intel stagnated" a lot, but in truth they started emptying warchests because of it. Which rather tells the opposite story at least competatively
2022-04-17 08:04:45	hololeap	computing is so full of hype and hyperbole it's laughable
2022-04-17 08:04:46	davean	Considering the amounts they spent its easy to estimate they thought taht slowdown was costing them potentially in the hundreds of billions
2022-04-17 08:05:07	davean	So it depends on what you consider "fine"
2022-04-17 08:07:00	davean	is "if someone else solves this and we don't, we probably go out of business" fine?
2022-04-17 08:07:21	→	dyeplexer has joined #haskell
2022-04-17 08:07:29	hololeap	who said "fine"?
2022-04-17 08:08:28	davean	hololeap: no one, but monochrom said "Intel also stagnated but still got as much purchases"
2022-04-17 08:09:06	davean	But Google, AWS, etc all started massively funding new competitors to Intel 
2022-04-17 08:09:11	→	sarupbanskota has joined #haskell
2022-04-17 08:09:20	←	FinnElija has quit (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
2022-04-17 08:09:20	→	finn_elija has joined #haskell
2022-04-17 08:09:20	ℹ	finn_elija is now known as FinnElija
2022-04-17 08:09:22	davean	so its not really true that was a stable situation
2022-04-17 08:09:30	davean	people were desperately trying to find a life raft
2022-04-17 08:09:37	davean	that was VERY clearly a short term truth
2022-04-17 08:10:38	←	Cale has quit (Remote host closed the connection)
2022-04-17 08:11:03	hololeap	well, they have the economic impetus to pull the rabbit out of the hat
2022-04-17 08:11:49	hololeap	"we have 999 specialists, but we can afford the 1000th one" or something like that, until it works...
2022-04-17 08:12:05	←	justsomeguy has quit (Quit: WeeChat 3.4)
2022-04-17 08:12:10	→	Cale has joined #haskell
2022-04-17 08:12:32	→	slack1256 has joined #haskell
2022-04-17 08:12:33	←	terrorjack has quit (Quit: The Lounge - https://thelounge.chat)
2022-04-17 08:13:05	davean	Theres something like 10B USD just in looking for a fix to "this one particular computing problem is slow so can't enter new markets" 
2022-04-17 08:13:10	davean	for one given problem
2022-04-17 08:13:37	→	terrorjack has joined #haskell
2022-04-17 08:13:54	davean	Computers are currently too slow for the problems we have today, from a server perspective :)
2022-04-17 08:14:13	←	joo-_ has quit (Ping timeout: 246 seconds)
2022-04-17 08:14:14	→	Victor_Huang has joined #haskell
2022-04-17 08:15:13	hololeap	maybe we should redistribute the funds to making people healthier and more educated, instead of spending it on more cpus
2022-04-17 08:15:33	davean	You've sorta propose a contradictory goal there to a large degree
2022-04-17 08:15:41	davean	a lot of that is making people healthier at least
2022-04-17 08:16:05	davean	Do you ahve any idea how much compute things like medical imaging takes?
2022-04-17 08:16:06	hololeap	I would expect to see a strong upward trend in life expentancy at least
2022-04-17 08:16:20	→	joo-_ has joined #haskell
2022-04-17 08:16:20	davean	and drug discovery
2022-04-17 08:16:20	←	joo-_ has quit (Changing host)
2022-04-17 08:16:20	→	joo-_ has joined #haskell
2022-04-17 08:16:22	davean	etyc
2022-04-17 08:16:48	→	deadmarshal_ has joined #haskell
2022-04-17 08:16:51	davean	hololeap: medical stuff isn't even the main driver of life expectance IIRC :/
2022-04-17 08:17:10	davean	Though I can't recall the analysises ATM
2022-04-17 08:17:18	davean	You said healthier, not life expectancy
2022-04-17 08:17:46	hololeap	that's a good point. we don't want to spend the last 30 years of our lives in chemical labotomy
2022-04-17 08:18:18	davean	perhaps you're interested in the metric "quality adjusted years of life"
2022-04-17 08:18:53	davean	But when you get to this stuff, I'm not sure we can directly apply money to society
2022-04-17 08:19:06	davean	Money isn't *that* fungible
2022-04-17 08:22:01	⚡	slack1256 is in love with the `jacinda` package/lang.
2022-04-17 08:23:57	→	merijn has joined #haskell
2022-04-17 08:39:36	←	stiell_ has quit (Ping timeout: 240 seconds)
2022-04-17 08:46:16	→	Lycurgus has joined #haskell
2022-04-17 08:50:22	Lycurgus	currently life style/environment followed by genetics are still the main determiners of life expectancy, with the latter pulling ahead of the former 
2022-04-17 08:50:31	Lycurgus	in the developed countries at least
2022-04-17 08:52:22	←	inversed has quit (Ping timeout: 272 seconds)
2022-04-17 08:53:31	→	yauhsien has joined #haskell
2022-04-17 08:53:34	←	sarupbanskota has quit (Quit: Client closed)
2022-04-17 08:54:06	→	stiell_ has joined #haskell
2022-04-17 08:55:47	←	merijn has quit (Ping timeout: 240 seconds)
2022-04-17 08:56:01	Lycurgus	and like 10 out of 11 or better super centenarians are female
2022-04-17 08:57:44	Lycurgus	80% of centenarians apparently
2022-04-17 08:58:15	Lycurgus	patriarchy 0, roar 1
2022-04-17 08:59:26	Lycurgus	JC's record will prolly be passed by a japanese woman by mid century or so
2022-04-17 09:00:55	Lycurgus	by which time nemowhosits and nak can eat crow in the devolved RF
2022-04-17 09:03:29	←	Lycurgus has quit (Quit: Exeunt)
2022-04-17 09:06:47	←	raehik has quit (Ping timeout: 240 seconds)
2022-04-17 09:12:42	→	sarupbanskota has joined #haskell
2022-04-17 09:17:55	←	deadmarshal_ has quit (Ping timeout: 246 seconds)
2022-04-17 09:20:42	dsal	/join haskell
2022-04-17 09:21:15	abastro[m]	Quite funny how Intel stagnated and watched how other companies struggle
2022-04-17 09:21:24	abastro[m]	Like wh, monopoly power go brrrrr
2022-04-17 09:21:41	abastro[m]	Basically "Deal with it" corporate edition
2022-04-17 09:24:33	abastro[m]	Btw I think making ppl healthier is actually against the direction money wants
2022-04-17 09:25:32	←	harveypwca has quit (Quit: Leaving)
2022-04-17 09:26:50	→	cdman has joined #haskell
2022-04-17 09:26:50	←	cdman has quit (Changing host)
2022-04-17 09:26:50	→	cdman has joined #haskell
2022-04-17 09:34:30	←	argento has quit (Quit: leaving)
2022-04-17 09:34:56	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-17 09:35:27	→	bontaq has joined #haskell
2022-04-17 09:35:55	←	wroathe has quit (Ping timeout: 256 seconds)
2022-04-17 09:35:59	←	[itchyjunk] has quit (Remote host closed the connection)
2022-04-17 09:37:31	→	inversed has joined #haskell
2022-04-17 09:38:02	→	bitdex has joined #haskell
2022-04-17 09:40:16	→	xff0x_ has joined #haskell
2022-04-17 09:43:56	←	waleee has quit (Ping timeout: 250 seconds)
2022-04-17 09:47:47	←	geekosaur has quit (Remote host closed the connection)
2022-04-17 09:53:33	→	tromp has joined #haskell
2022-04-17 09:54:10	←	tromp has quit (Client Quit)
2022-04-17 09:56:49	→	flinner has joined #haskell
2022-04-17 09:56:53	←	yauhsien has quit (Ping timeout: 256 seconds)
2022-04-17 09:57:27	←	dolio has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-17 09:59:21	→	dolio has joined #haskell
2022-04-17 09:59:21	←	dolio has quit (Client Quit)
2022-04-17 09:59:49	→	geekosaur has joined #haskell
2022-04-17 10:02:56	←	zebrag has quit (Quit: Konversation terminated!)
2022-04-17 10:06:24	→	dolio has joined #haskell
2022-04-17 10:22:08	←	Benzi-Junior has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-17 10:26:04	→	link has joined #haskell
2022-04-17 10:26:56	←	slack1256 has quit (Remote host closed the connection)
2022-04-17 10:29:17	←	jao has quit (Remote host closed the connection)
2022-04-17 10:29:44	←	mixfix41 has quit (Quit: signing off cya)
2022-04-17 10:32:48	←	xff0x_ has quit (Ping timeout: 248 seconds)
2022-04-17 10:40:30	←	Victor_Huang has quit (Ping timeout: 250 seconds)
2022-04-17 10:44:26	→	abastro has joined #haskell
2022-04-17 10:47:00	←	abastro has quit (Remote host closed the connection)
2022-04-17 10:47:11	→	abastro has joined #haskell
2022-04-17 10:52:55	→	merijn has joined #haskell
2022-04-17 10:56:44	→	nun51 has joined #haskell
2022-04-17 11:06:24	←	flinner has quit (Ping timeout: 248 seconds)
2022-04-17 11:08:09	→	whatsupdoc has joined #haskell
2022-04-17 11:08:55	→	takuan has joined #haskell
2022-04-17 11:09:18	←	stefan-_ has quit (Ping timeout: 260 seconds)
2022-04-17 11:13:25	→	stefan-_ has joined #haskell
2022-04-17 11:15:16	→	Pickchea has joined #haskell
2022-04-17 11:16:00	←	kmein has quit (Quit: ciao kakao)
2022-04-17 11:16:39	→	kmein has joined #haskell
2022-04-17 11:16:54	←	frost has quit (Ping timeout: 250 seconds)
2022-04-17 11:19:49	Digit	short money, maybe.  racing to the bottom might not be the only "option" though.
2022-04-17 11:20:04	←	link has quit (Ping timeout: 246 seconds)
2022-04-17 11:27:04	←	merijn has quit (Ping timeout: 246 seconds)
2022-04-17 11:37:24	←	johnw has quit (Quit: ZNC - http://znc.in)
2022-04-17 11:48:51	→	mmhat has joined #haskell
2022-04-17 11:49:09	→	Leary has joined #haskell
2022-04-17 11:49:45	←	Digit has quit (Remote host closed the connection)
2022-04-17 11:52:12	ℹ	Leary is now known as [Leary]
2022-04-17 11:55:43	→	axeman has joined #haskell
2022-04-17 11:56:46	ℹ	[Leary] is now known as Lears
2022-04-17 11:57:10	←	Pickchea has quit (Ping timeout: 246 seconds)
2022-04-17 11:58:25	←	echoreply has quit (Quit: WeeChat 2.8)
2022-04-17 11:58:53	→	echoreply has joined #haskell
2022-04-17 12:01:10	←	vgtw has quit (Quit: ZNC - https://znc.in)
2022-04-17 12:05:53	←	Lears has quit ()
2022-04-17 12:06:09	←	jakalx has left #haskell
2022-04-17 12:06:55	→	[Leary] has joined #haskell
2022-04-17 12:08:58	→	gurkenglas has joined #haskell
2022-04-17 12:13:33	←	abastro has quit (Remote host closed the connection)
2022-04-17 12:16:36	→	jakalx has joined #haskell
2022-04-17 12:19:41	→	coot has joined #haskell
2022-04-17 12:20:09	←	FinnElija has quit (Remote host closed the connection)
2022-04-17 12:20:11	←	bitdex has quit (Remote host closed the connection)
2022-04-17 12:20:39	→	FinnElija has joined #haskell
2022-04-17 12:21:17	→	bitdex has joined #haskell
2022-04-17 12:22:34	→	acidjnk has joined #haskell
2022-04-17 12:24:07	←	kaph has quit (Ping timeout: 240 seconds)
2022-04-17 12:28:07	←	axeman has quit (Ping timeout: 240 seconds)
2022-04-17 12:30:56	→	tromp has joined #haskell
2022-04-17 12:30:58	→	abastro has joined #haskell
2022-04-17 12:31:11	←	FinnElija has quit (Remote host closed the connection)
2022-04-17 12:31:36	→	FinnElija has joined #haskell
2022-04-17 12:36:15	→	gehmehgeh has joined #haskell
2022-04-17 12:39:32	←	xkuru has quit (Read error: Connection reset by peer)
2022-04-17 12:42:51	←	jakalx has left #haskell (Disconnected: Replaced by new connection)
2022-04-17 12:42:52	→	jakalx has joined #haskell
2022-04-17 12:44:39	→	axeman has joined #haskell
2022-04-17 12:51:18	→	fendor has joined #haskell
2022-04-17 12:58:15	→	merijn has joined #haskell
2022-04-17 12:59:22	←	sarupbanskota has quit (Quit: Client closed)
2022-04-17 13:05:58	←	abastro has quit (Remote host closed the connection)
2022-04-17 13:06:36	←	gehmehgeh has quit (Ping timeout: 240 seconds)
2022-04-17 13:07:17	→	gehmehgeh has joined #haskell
2022-04-17 13:14:57	→	Midjak has joined #haskell
2022-04-17 13:21:31	→	odnes has joined #haskell
2022-04-17 13:21:36	→	abastro has joined #haskell
2022-04-17 13:22:04	→	vgtw has joined #haskell
2022-04-17 13:31:12	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-17 13:32:07	←	merijn has quit (Ping timeout: 240 seconds)
2022-04-17 13:36:16	←	jmdaemon has quit (Ping timeout: 248 seconds)
2022-04-17 13:44:24	→	MajorBiscuit has joined #haskell
2022-04-17 13:52:56	←	littlebo1eep has quit (Ping timeout: 240 seconds)
2022-04-17 13:55:09	→	littlebobeep has joined #haskell
2022-04-17 14:00:29	→	merijn has joined #haskell
2022-04-17 14:03:52	abastro	Does packages rebuild when even `allow-newer` part for unrelated package is updated?
2022-04-17 14:04:41	abastro	Wait, I guess what's the problem. The dependency in between somewhere cannot support newest version I guess..
2022-04-17 14:04:55	abastro	Which requires the package to be rebuilt, and any layers lower are built again as well
2022-04-17 14:04:56	abastro	MEH
2022-04-17 14:05:11	abastro	So that takes 20 minutes+
2022-04-17 14:06:02	→	anomal has joined #haskell
2022-04-17 14:06:25	→	chomwitt has joined #haskell
2022-04-17 14:08:37	→	_ht has joined #haskell
2022-04-17 14:09:03	←	bontaq has quit (Ping timeout: 256 seconds)
2022-04-17 14:14:45	→	fciocan has joined #haskell
2022-04-17 14:16:09	→	DNH has joined #haskell
2022-04-17 14:19:56	→	zeenk has joined #haskell
2022-04-17 14:21:07	←	axeman has quit (Ping timeout: 240 seconds)
2022-04-17 14:24:17	→	zer0bitz has joined #haskell
2022-04-17 14:28:15	albet70	are there some famous sequences like fibonacci?
2022-04-17 14:28:56	albet70	fib 22 is 17711, is a huge number
2022-04-17 14:30:06	←	kalxd[m] has quit (Quit: You have been kicked for being idle)
2022-04-17 14:30:07	←	justache has quit (Read error: Connection reset by peer)
2022-04-17 14:30:08	←	tsmc[m] has quit (Quit: You have been kicked for being idle)
2022-04-17 14:30:48	←	MajorBiscuit has quit (Ping timeout: 250 seconds)
2022-04-17 14:31:02	→	justache has joined #haskell
2022-04-17 14:32:13	←	abastro has quit (Remote host closed the connection)
2022-04-17 14:32:31	←	tzh has quit (Quit: zzz)
2022-04-17 14:32:36	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2022-04-17 14:34:36	←	fciocan has quit (Quit: Ping timeout (120 seconds))
2022-04-17 14:37:47	→	deadmarshal_ has joined #haskell
2022-04-17 14:38:18	←	coot has quit (Quit: coot)
2022-04-17 14:39:13	→	xff0x_ has joined #haskell
2022-04-17 14:42:56	←	acidjnk has quit (Ping timeout: 248 seconds)
2022-04-17 14:43:15	→	coot has joined #haskell
2022-04-17 14:43:22	→	abastro has joined #haskell
2022-04-17 14:44:07	←	whatsupdoc has quit (Quit: Connection closed for inactivity)
2022-04-17 14:46:33	→	yauhsien has joined #haskell
2022-04-17 14:46:40	←	nun51 has quit (Ping timeout: 248 seconds)
2022-04-17 14:48:14	←	rembo10 has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-17 14:48:45	pavonia	Prime numbers are the most famous, I guess
2022-04-17 14:49:10	→	rembo10 has joined #haskell
2022-04-17 14:51:33	←	yauhsien has quit (Ping timeout: 256 seconds)
2022-04-17 14:56:44	←	Natch has quit (Remote host closed the connection)
2022-04-17 14:57:04	zzz	albet70: try #math
2022-04-17 14:57:07	←	abastro has quit (Ping timeout: 240 seconds)
2022-04-17 15:03:39	→	Macbethwin has joined #haskell
2022-04-17 15:05:42	→	zer0bitz_ has joined #haskell
2022-04-17 15:06:56	←	zer0bitz has quit (Ping timeout: 248 seconds)
2022-04-17 15:08:56	abastro[m]	Btw for any a and b,
2022-04-17 15:08:56	abastro[m]	`seq a b = go where go = a : b : zipWith (+) go (tail go)`
2022-04-17 15:08:56	abastro[m]	forms a sequence
2022-04-17 15:09:07	←	merijn has quit (Ping timeout: 256 seconds)
2022-04-17 15:10:42	pavonia	Generalized Fibonacci sequences?
2022-04-17 15:10:57	abastro[m]	Yea
2022-04-17 15:11:21	←	jakalx has left #haskell (Error from remote client)
2022-04-17 15:12:04	abastro[m]	Then there are boring sequences like `iterate (+n) 0`, `iterate (*n) 1`
2022-04-17 15:12:13	abastro[m]	Which are still important anyway IIRC
2022-04-17 15:12:48	←	zer0bitz_ has quit (Ping timeout: 248 seconds)
2022-04-17 15:13:28	abastro[m]	> iterate (2 ^) 0
2022-04-17 15:13:29	lambdabot	 [0,1,2,4,16,65536,2003529930406846464979072351560255750447825475569751419265...
2022-04-17 15:14:03	abastro[m]	That also had a name iirc
2022-04-17 15:14:18	→	zer0bitz has joined #haskell
2022-04-17 15:16:41	abastro[m]	Oh, Tetration
2022-04-17 15:30:29	ℹ	Macbethwin is now known as ieeesebel
2022-04-17 15:33:42	→	zer0bitz_ has joined #haskell
2022-04-17 15:34:40	←	zer0bitz has quit (Ping timeout: 248 seconds)
2022-04-17 15:36:16	←	coot has quit (Quit: coot)
2022-04-17 15:39:13	←	zer0bitz_ has quit (Read error: Connection reset by peer)
2022-04-17 15:42:09	jackdk	albet70: you may find some useful names in the online encyclopaedia of integer sequences (OEIS)
2022-04-17 15:43:00	←	econo has quit (Quit: Connection closed for inactivity)
2022-04-17 15:47:22	→	odnes_ has joined #haskell
2022-04-17 15:48:01	←	sprout has quit (Ping timeout: 248 seconds)
2022-04-17 15:48:26	←	odnes has quit (Read error: Connection reset by peer)
2022-04-17 15:51:03	←	albet70 has quit (Remote host closed the connection)
2022-04-17 15:57:10	→	albet70 has joined #haskell
2022-04-17 15:57:37	←	deadmarshal_ has quit (Ping timeout: 246 seconds)
2022-04-17 15:59:56	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-17 16:00:25	→	Vajb has joined #haskell
2022-04-17 16:00:31	←	Sgeo has quit (Read error: Connection reset by peer)
2022-04-17 16:03:03	←	albet70 has quit (Remote host closed the connection)
2022-04-17 16:04:02	←	eggplantade has quit (Remote host closed the connection)
2022-04-17 16:09:09	→	albet70 has joined #haskell
2022-04-17 16:11:11	→	Benzi-Junior has joined #haskell
2022-04-17 16:12:28	←	odnes_ has quit (Remote host closed the connection)
2022-04-17 16:12:50	→	odnes_ has joined #haskell
2022-04-17 16:14:25	→	jakalx has joined #haskell
2022-04-17 16:17:16	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-17 16:23:03	→	MajorBiscuit has joined #haskell
2022-04-17 16:25:04	→	muhammadnaqdi has joined #haskell
2022-04-17 16:25:11	→	zer0bitz has joined #haskell
2022-04-17 16:28:26	ManofLetters[m]	hi! I need help: how to best express partial application of a type function if the order of its arguments is wrong? Currently I'm using... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/8eabe24135f9de2938dc8f06f690b789c5dc8658)
2022-04-17 16:28:46	→	nate1 has joined #haskell
2022-04-17 16:29:23	←	odnes_ has quit (Remote host closed the connection)
2022-04-17 16:29:51	geekosaur	there is type level Flip somewhere
2022-04-17 16:30:17	geekosaur	that said, partial application at type level is somewhat problematic
2022-04-17 16:32:10	←	vysn has quit (Quit: WeeChat 3.4)
2022-04-17 16:32:57	→	pretty_dumm_guy has joined #haskell
2022-04-17 16:33:33	←	nate1 has quit (Ping timeout: 256 seconds)
2022-04-17 16:34:55	→	abastro has joined #haskell
2022-04-17 16:38:43	←	abastro has quit (Remote host closed the connection)
2022-04-17 16:38:58	→	abastro has joined #haskell
2022-04-17 16:39:36	←	hololeap has quit (Ping timeout: 240 seconds)
2022-04-17 16:39:57	→	hololeap has joined #haskell
2022-04-17 16:44:48	→	boxscape_ has joined #haskell
2022-04-17 16:46:15	→	ss4 has joined #haskell
2022-04-17 16:47:36	←	gehmehgeh has quit (Ping timeout: 240 seconds)
2022-04-17 16:47:53	boxscape_	:t let x x = x in x x
2022-04-17 16:47:54	lambdabot	p -> p
2022-04-17 16:48:24	→	vysn has joined #haskell
2022-04-17 16:48:43	→	axeman has joined #haskell
2022-04-17 16:48:51	←	wootehfoot has quit (Ping timeout: 256 seconds)
2022-04-17 16:51:44	←	hololeap has quit (Remote host closed the connection)
2022-04-17 16:53:17	→	gehmehgeh has joined #haskell
2022-04-17 16:57:05	→	hololeap has joined #haskell
2022-04-17 17:01:49	→	Pickchea has joined #haskell
2022-04-17 17:05:09	→	eggplantade has joined #haskell
2022-04-17 17:06:15	→	merijn has joined #haskell
2022-04-17 17:07:38	hpc	> let x x = x in x x "x"
2022-04-17 17:07:40	lambdabot	 "x"
2022-04-17 17:07:42	hpc	:D
2022-04-17 17:09:49	←	eggplantade has quit (Ping timeout: 256 seconds)
2022-04-17 17:18:25	abastro	How do I set `-haddock` ghc flag as default to use on all projects?
2022-04-17 17:18:46	ℹ	AlexNoo_ is now known as AlexNoo
2022-04-17 17:22:23	→	neceve has joined #haskell
2022-04-17 17:24:04	geekosaur	if you're using cabal, there'sa specific flag for it in ~/.cabal/config ("documentation: true" iirc)
2022-04-17 17:24:13	→	Guest|10 has joined #haskell
2022-04-17 17:24:46	←	Guest|10 has quit (Client Quit)
2022-04-17 17:24:59	ManofLetters[m]	geekosaur: thank you; it's https://hackage.haskell.org/package/type-combinators-0.2.4.3/docs/Data-Type-Combinator.html#t:Flip; it should be clearer in some contexts, but unfortunately it requires just as many coercions (being a newtype)
2022-04-17 17:27:35	→	Guest6 has joined #haskell
2022-04-17 17:28:08	←	Guest6 has quit (Client Quit)
2022-04-17 17:29:02	←	califax has quit (Remote host closed the connection)
2022-04-17 17:29:05	←	Pickchea has quit (Ping timeout: 256 seconds)
2022-04-17 17:29:53	←	hololeap has quit (Remote host closed the connection)
2022-04-17 17:29:59	→	euandreh has joined #haskell
2022-04-17 17:30:00	→	califax has joined #haskell
2022-04-17 17:31:04	→	Unicorn_Princess has joined #haskell
2022-04-17 17:32:23	←	euandreh_ has quit (Ping timeout: 250 seconds)
2022-04-17 17:32:48	abastro[m]	documentation: true? I see, thank you
2022-04-17 17:34:04	→	hololeap has joined #haskell
2022-04-17 17:34:40	←	euandreh has quit (Ping timeout: 248 seconds)
2022-04-17 17:35:12	←	MajorBiscuit has quit (Ping timeout: 248 seconds)
2022-04-17 17:38:05	abastro	geekosaur: `documentation: True` recompiles everything even though I had `-haddock` compiler flag on.
2022-04-17 17:38:30	abastro	Why is this?
2022-04-17 17:38:45	→	machinedgod has joined #haskell
2022-04-17 17:38:48	geekosaur	it includes additional flags like --hyperlink-source
2022-04-17 17:39:21	geekosaur	beyoond that I think you would have to ask sclv, but I suspect people requested it because they were annoyed they had to rebuild everything manually after changing it
2022-04-17 17:39:58	→	littlebobeep has joined #haskell
2022-04-17 17:40:07	←	merijn has quit (Ping timeout: 240 seconds)
2022-04-17 17:40:19	abastro	Oh, I see
2022-04-17 17:40:39	abastro	Perhaps I would purge once more? Ah no, it would be fine to have one more copy... *cries*
2022-04-17 17:42:34	←	vysn has quit (Quit: WeeChat 3.4)
2022-04-17 17:42:49	geekosaur	monochrom has a tool for maintaining / cleaning cabal stores. https://github.com/treblacy/cabalgc
2022-04-17 17:43:25	abastro	Yep, I mean I tried it, but last time it failed to delete handful of duplicated copies.
2022-04-17 17:43:47	geekosaur	(I have an extra 2 copies of everything currently because I gave my testing sandbox its own .ghcup and .cabal, and accidentally built everything for 8.10.7 initially :)
2022-04-17 17:44:56	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-17 17:45:27	geekosaur	mm, and a few more copies becuase I rebuilt everything with -g
2022-04-17 17:45:40	geekosaur	copies copies everywhere :)
2022-04-17 17:45:53	abastro	:o
2022-04-17 17:46:05	abastro	Anyway, I am now back at 5GB store
2022-04-17 17:46:28	abastro	Guess I won't mind :P
2022-04-17 17:47:31	→	littlebobeep has joined #haskell
2022-04-17 17:47:37	→	deadmarshal_ has joined #haskell
2022-04-17 17:48:29	→	ZanpakutoB has joined #haskell
2022-04-17 17:49:40	→	ntinoom^ has joined #haskell
2022-04-17 17:52:04	←	deadmarshal_ has quit (Ping timeout: 246 seconds)
2022-04-17 18:02:59	→	MajorBiscuit has joined #haskell
2022-04-17 18:04:11	→	frost has joined #haskell
2022-04-17 18:05:14	←	chenqisu1 has quit (Quit: Leaving)
2022-04-17 18:07:50	→	yauhsien has joined #haskell
2022-04-17 18:13:04	←	yauhsien has quit (Ping timeout: 246 seconds)
2022-04-17 18:13:14	→	RajatVerma[m] has joined #haskell
2022-04-17 18:20:04	←	MajorBiscuit has quit (Ping timeout: 246 seconds)
2022-04-17 18:21:04	←	darkstardevx has quit (Ping timeout: 248 seconds)
2022-04-17 18:23:52	abastro	Guess some dependency around conduit is overly constrained by some higher-up package
2022-04-17 18:29:05	←	phma has quit (Read error: Connection reset by peer)
2022-04-17 18:29:45	→	phma has joined #haskell
2022-04-17 18:31:12	←	axeman has quit (Ping timeout: 248 seconds)
2022-04-17 18:34:47	←	geekosaur has quit (Remote host closed the connection)
2022-04-17 18:36:27	→	geekosaur has joined #haskell
2022-04-17 18:38:38	→	yauhsien has joined #haskell
2022-04-17 18:38:56	→	razetime has joined #haskell
2022-04-17 18:39:19	→	mc47 has joined #haskell
2022-04-17 18:39:44	→	axeman has joined #haskell
2022-04-17 18:42:43	←	anomal has quit (Remote host closed the connection)
2022-04-17 18:44:13	←	shailangsa has quit ()
2022-04-17 18:47:04	→	jao has joined #haskell
2022-04-17 18:48:04	→	mikoto-chan has joined #haskell
2022-04-17 18:48:44	←	mc47 has quit (Remote host closed the connection)
2022-04-17 18:50:52	→	[itchyjunk] has joined #haskell
2022-04-17 18:51:13	←	jrm has quit (Quit: ciao)
2022-04-17 18:52:38	→	jrm has joined #haskell
2022-04-17 19:00:42	←	axeman has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2022-04-17 19:05:16	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-17 19:06:27	→	eggplantade has joined #haskell
2022-04-17 19:07:15	→	bitdex has joined #haskell
2022-04-17 19:11:05	←	eggplantade has quit (Ping timeout: 256 seconds)
2022-04-17 19:15:08	→	coot has joined #haskell
2022-04-17 19:18:34	←	yauhsien has quit (Remote host closed the connection)
2022-04-17 19:19:07	→	yauhsien has joined #haskell
2022-04-17 19:21:19	←	gabriel_sevecek has quit (Quit: WeeChat 3.5)
2022-04-17 19:21:39	→	gabriel_sevecek has joined #haskell
2022-04-17 19:24:34	→	Pickchea has joined #haskell
2022-04-17 19:24:38	←	gabriel_sevecek has quit (Client Quit)
2022-04-17 19:25:12	→	gabriel_sevecek has joined #haskell
2022-04-17 19:25:48	←	razetime has quit (Remote host closed the connection)
2022-04-17 19:32:29	←	gehmehgeh has quit (Remote host closed the connection)
2022-04-17 19:33:17	→	gehmehgeh has joined #haskell
2022-04-17 19:37:00	→	merijn has joined #haskell
2022-04-17 19:37:27	←	ntinoom^ has quit (Remote host closed the connection)
2022-04-17 19:38:41	←	hololeap has quit (Read error: Connection reset by peer)
2022-04-17 19:38:41	←	conjunctive has quit (Ping timeout: 245 seconds)
2022-04-17 19:39:19	←	nrr___ has quit (Ping timeout: 256 seconds)
2022-04-17 19:40:34	←	azimut has quit (Remote host closed the connection)
2022-04-17 19:40:43	→	conjunctive has joined #haskell
2022-04-17 19:40:58	→	azimut has joined #haskell
2022-04-17 19:41:15	→	hololeap has joined #haskell
2022-04-17 19:41:16	→	nrr___ has joined #haskell
2022-04-17 19:46:22	←	ZanpakutoB has quit (Remote host closed the connection)
2022-04-17 19:46:40	→	ZanpakutoB has joined #haskell
2022-04-17 19:59:43	→	wroathe has joined #haskell
2022-04-17 19:59:43	←	wroathe has quit (Changing host)
2022-04-17 19:59:43	→	wroathe has joined #haskell
2022-04-17 20:01:58	→	zincy has joined #haskell
2022-04-17 20:06:56	zzz	 
2022-04-17 20:08:34	→	DNH has joined #haskell
2022-04-17 20:08:56	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-17 20:11:09	←	merijn has quit (Ping timeout: 256 seconds)
2022-04-17 20:12:00	→	bitdex has joined #haskell
2022-04-17 20:22:16	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-17 20:24:17	→	bitdex has joined #haskell
2022-04-17 20:29:51	←	Pickchea has quit (Ping timeout: 256 seconds)
2022-04-17 20:33:49	←	machinedgod has quit (Ping timeout: 256 seconds)
2022-04-17 20:36:12	→	pagnol has joined #haskell
2022-04-17 20:36:49	→	kenran has joined #haskell
2022-04-17 20:37:24	←	systemfault has quit (Ping timeout: 240 seconds)
2022-04-17 20:39:12	→	systemfault has joined #haskell
2022-04-17 20:40:54	pagnol	is there a straightforward [Either e a] -> Either [e] [a]?
2022-04-17 20:41:19	boxscape_	@hoogle partitionEithers
2022-04-17 20:41:19	lambdabot	Data.Either partitionEithers :: [Either a b] -> ([a], [b])
2022-04-17 20:41:19	lambdabot	Data.Strict.Either partitionEithers :: [Either a b] -> ([a], [b])
2022-04-17 20:41:19	lambdabot	Protolude partitionEithers :: () => [Either a b] -> ([a], [b])
2022-04-17 20:41:31	boxscape_	that's probably what you want
2022-04-17 20:41:51	pagnol	ah yeah that's good, thanks
2022-04-17 20:42:27	pagnol	at first I thought sequence, but that gives Either e [a] apparently
2022-04-17 20:43:18	boxscape_	yeah, since `Either e` is the Functor here, sequence can't change that
2022-04-17 20:44:17	pagnol	I see
2022-04-17 20:44:27	←	wroathe has quit (Ping timeout: 240 seconds)
2022-04-17 20:44:44	→	niemand has joined #haskell
2022-04-17 20:44:49	←	chexum has quit (Quit: No Ping reply in 180 seconds.)
2022-04-17 20:45:11	→	chexum has joined #haskell
2022-04-17 20:46:25	boxscape_	pagnol if your goal is to collect a number of errors, you might also find Data.Either.Validation useful, from the either package
2022-04-17 20:47:06	niemand	SCC pragmas don't affect optimization, do they?
2022-04-17 20:49:09	←	zincy has quit (Remote host closed the connection)
2022-04-17 20:52:07	←	pagnol has quit (Ping timeout: 240 seconds)
2022-04-17 20:54:36	←	muhammadnaqdi has quit (Remote host closed the connection)
2022-04-17 20:54:46	→	raehik has joined #haskell
2022-04-17 20:59:11	→	pagnol has joined #haskell
2022-04-17 20:59:45	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2022-04-17 21:00:08	→	waleee has joined #haskell
2022-04-17 21:00:48	→	shailangsa has joined #haskell
2022-04-17 21:01:40	←	coot has quit (Quit: coot)
2022-04-17 21:05:02	→	zincy has joined #haskell
2022-04-17 21:05:08	←	pagnol has quit (Ping timeout: 250 seconds)
2022-04-17 21:06:22	→	DNH has joined #haskell
2022-04-17 21:09:36	←	zincy has quit (Ping timeout: 260 seconds)
2022-04-17 21:14:45	←	frost has quit (Quit: Client closed)
2022-04-17 21:15:11	←	niemand has quit (Ping timeout: 256 seconds)
2022-04-17 21:23:47	←	abastro has quit (Ping timeout: 240 seconds)
2022-04-17 21:25:57	←	cdman has quit (Ping timeout: 256 seconds)
2022-04-17 21:27:50	→	Brandon_IX has joined #haskell
2022-04-17 21:28:03	→	eggplantade has joined #haskell
2022-04-17 21:34:08	←	xff0x_ has quit (Read error: Connection reset by peer)
2022-04-17 21:34:18	→	zincy has joined #haskell
2022-04-17 21:35:44	←	joo-_ has quit (Ping timeout: 248 seconds)
2022-04-17 21:35:56	←	yauhsien has quit (Remote host closed the connection)
2022-04-17 21:37:05	ℹ	Mode #haskell [+o litharge] by ChanServ
2022-04-17 21:37:06	ℹ	Mode #haskell [-bo *!*@86.32.51.33 litharge] by litharge
2022-04-17 21:37:27	→	joo-_ has joined #haskell
2022-04-17 21:37:27	←	joo-_ has quit (Changing host)
2022-04-17 21:37:27	→	joo-_ has joined #haskell
2022-04-17 21:38:59	←	zincy has quit (Ping timeout: 256 seconds)
2022-04-17 21:40:07	→	yauhsien has joined #haskell
2022-04-17 21:40:28	→	tromp has joined #haskell
2022-04-17 21:43:12	←	eggplantade has quit (Remote host closed the connection)
2022-04-17 21:47:10	→	jacks2 has joined #haskell
2022-04-17 21:48:13	jacks2	is there some naming convention that one should follow for having top-level variables, especially if they are mutable references?
2022-04-17 21:50:24	←	vicfred has quit (Quit: Leaving)
2022-04-17 21:55:50	→	vicfred has joined #haskell
2022-04-17 21:56:11	→	tzh has joined #haskell
2022-04-17 21:56:25	→	zincy has joined #haskell
2022-04-17 21:59:49	→	MajorBiscuit has joined #haskell
2022-04-17 21:59:58	→	sprout has joined #haskell
2022-04-17 22:00:34	←	zincy has quit (Ping timeout: 246 seconds)
2022-04-17 22:04:10	→	jmdaemon has joined #haskell
2022-04-17 22:05:04	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-17 22:05:58	→	Vajb has joined #haskell
2022-04-17 22:07:31	→	merijn has joined #haskell
2022-04-17 22:15:54	→	zincy has joined #haskell
2022-04-17 22:17:18	→	atrptoom^ has joined #haskell
2022-04-17 22:18:19	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-17 22:19:28	←	boxscape_ has quit (Ping timeout: 246 seconds)
2022-04-17 22:26:04	→	deadmarshal_ has joined #haskell
2022-04-17 22:31:21	←	mjs2600 has quit (Ping timeout: 252 seconds)
2022-04-17 22:40:17	→	econo has joined #haskell
2022-04-17 22:41:53	←	merijn has quit (Ping timeout: 256 seconds)
2022-04-17 22:43:47	→	eggplantade has joined #haskell
2022-04-17 22:45:04	←	MajorBiscuit has quit (Ping timeout: 248 seconds)
2022-04-17 22:47:07	→	andrey_ has joined #haskell
2022-04-17 22:48:07	←	eggplantade has quit (Ping timeout: 256 seconds)
2022-04-17 22:49:20	←	andrey__ has quit (Ping timeout: 248 seconds)
2022-04-17 22:52:23	←	ss4 has quit (Quit: Leaving)
2022-04-17 22:52:41	→	wootehfoot has joined #haskell
2022-04-17 22:54:01	→	Vajb has joined #haskell
2022-04-17 22:56:18	→	coot has joined #haskell
2022-04-17 23:05:39	→	abiss27 has joined #haskell
2022-04-17 23:06:19	←	abiss27 has quit (Changing host)
2022-04-17 23:06:19	→	abiss27 has joined #haskell
2022-04-17 23:08:21	←	abiss27 has quit (Client Quit)
2022-04-17 23:15:37	←	coot has quit (Ping timeout: 272 seconds)
2022-04-17 23:17:53	→	slaydr has joined #haskell
2022-04-17 23:18:07	←	zincy has quit (Ping timeout: 240 seconds)
2022-04-17 23:19:10	slaydr	is the tuple - (,) - part of standard Prelude?
2022-04-17 23:20:20	←	ZanpakutoB has quit (Ping timeout: 250 seconds)
2022-04-17 23:28:40	→	MajorBiscuit has joined #haskell
2022-04-17 23:28:52	slaydr	i would like to redefine the tuple for an exercise. Is there a way to remove the existing data definition?
2022-04-17 23:29:32	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-17 23:29:50	→	Vajb has joined #haskell
2022-04-17 23:30:47	←	deadmarshal_ has quit (Ping timeout: 240 seconds)
2022-04-17 23:31:22	dsal	slaydr: You mean you want the specific syntax?  A tuple is just a generic product type, but it's not a library feature.
2022-04-17 23:32:00	←	wootehfoot has quit (Quit: Leaving)
2022-04-17 23:32:02	dsal	It's easy to make your own thing that's similar to tuple, but with more normal syntax.
2022-04-17 23:33:26	slaydr	thanks. I did make a FlippedTuple that does what I want as a Functor instance, but I just wondered if I could actual use the (,) syntax someway...temporarily
2022-04-17 23:36:38	→	anomal has joined #haskell
2022-04-17 23:36:49	←	motherfsck has quit (Ping timeout: 246 seconds)
2022-04-17 23:37:12	→	mjs2600 has joined #haskell
2022-04-17 23:41:03	→	ZanpakutoB has joined #haskell
2022-04-17 23:47:54	→	zincy has joined #haskell
2022-04-17 23:48:01	←	mjs2600 has quit (Ping timeout: 246 seconds)
2022-04-17 23:48:19	dsal	I don't know if there's a language extension to treat tuples differently.
2022-04-17 23:48:19	←	vicfred has quit (Quit: Leaving)
2022-04-17 23:49:05	dsal	It might be nice to be able to avoid default instances, but also, for that exact case, I tend to just use a bifunctor.
2022-04-17 23:49:08	dsal	:t first
2022-04-17 23:49:09	lambdabot	Arrow a => a b c -> a (b, d) (c, d)
2022-04-17 23:49:17	dsal	ugh.  Not that first.
2022-04-17 23:49:19	dsal	@hoogle first
2022-04-17 23:49:19	lambdabot	Control.Arrow first :: Arrow a => a b c -> a (b, d) (c, d)
2022-04-17 23:49:20	lambdabot	Data.Bifunctor first :: Bifunctor p => (a -> b) -> p a c -> p b c
2022-04-17 23:49:20	lambdabot	Text.PrettyPrint.Annotated.HughesPJ first :: Doc a -> Doc a -> Doc a
2022-04-17 23:49:48	dsal	I guess they're similar, but I use the bifunctor one with other bifunctors.
2022-04-17 23:50:17	→	motherfsck has joined #haskell
2022-04-17 23:52:43	←	zincy has quit (Ping timeout: 256 seconds)
2022-04-17 23:54:07	zzz	can anyone explain why the second version of this subsets function consistently performs marginally better than the first one? https://paste.jrvieira.com/1650219787366
2022-04-17 23:54:37	←	sammelweis has quit (Remote host closed the connection)
2022-04-17 23:55:38	←	kenran has quit (Quit: WeeChat info:version)
2022-04-17 23:56:06	dsal	zzz: You should be able to find the answer in the core.
2022-04-17 23:57:36	zzz	that's a little too advanced for me
2022-04-18 00:00:23	←	dyeplexer has quit (Remote host closed the connection)
2022-04-18 00:00:36	←	hololeap has quit (Ping timeout: 240 seconds)
2022-04-18 00:01:15	dsal	I understand why you might feel that way, but that's where the answer is.  :)  If you want to know, then learning to read the core would show you the answer both here and in your next performance question.
2022-04-18 00:02:22	←	ZanpakutoB has quit (Ping timeout: 250 seconds)
2022-04-18 00:02:48	←	MajorBiscuit has quit (Ping timeout: 250 seconds)
2022-04-18 00:04:07	→	hololeap has joined #haskell
2022-04-18 00:06:25	→	zincy has joined #haskell
2022-04-18 00:13:29	ℹ	opqdonut_ is now known as opqdonut
2022-04-18 00:15:33	→	stackdroid18 has joined #haskell
2022-04-18 00:19:21	←	CATS has quit (Quit: Will rejoin shortly.)
2022-04-18 00:19:44	→	abiss27 has joined #haskell
2022-04-18 00:20:07	→	xkuru has joined #haskell
2022-04-18 00:20:19	→	S_Cat has joined #haskell
2022-04-18 00:21:37	←	redb has quit (Ping timeout: 256 seconds)
2022-04-18 00:23:26	→	ishaan has joined #haskell
2022-04-18 00:27:10	→	justsomeguy has joined #haskell
2022-04-18 00:27:30	→	dextaa has joined #haskell
2022-04-18 00:29:34	→	wroathe has joined #haskell
2022-04-18 00:29:34	←	wroathe has quit (Changing host)
2022-04-18 00:29:34	→	wroathe has joined #haskell
2022-04-18 00:32:15	→	mjs2600 has joined #haskell
2022-04-18 00:36:16	→	Pickchea has joined #haskell
2022-04-18 00:38:08	→	merijn has joined #haskell
2022-04-18 00:38:26	→	zincy_ has joined #haskell
2022-04-18 00:38:29	←	zincy has quit (Read error: Connection reset by peer)
2022-04-18 00:40:14	→	ZanpakutoB has joined #haskell
2022-04-18 00:43:58	←	wroathe has quit (Ping timeout: 250 seconds)
2022-04-18 00:44:07	←	mjs2600 has quit (Read error: Connection reset by peer)
2022-04-18 00:44:23	→	mjs2600 has joined #haskell
2022-04-18 00:45:31	←	justache has quit (Remote host closed the connection)
2022-04-18 00:47:23	→	justache has joined #haskell
2022-04-18 00:47:44	ℹ	sndr is now known as sander
2022-04-18 00:48:05	→	redb has joined #haskell
2022-04-18 00:49:30	←	justache has quit (Remote host closed the connection)
2022-04-18 00:49:40	←	yauhsien has quit (Remote host closed the connection)
2022-04-18 00:50:15	→	yauhsien has joined #haskell
2022-04-18 00:51:36	←	zincy_ has quit (Remote host closed the connection)
2022-04-18 00:51:48	→	zincy has joined #haskell
2022-04-18 00:53:06	→	justache has joined #haskell
2022-04-18 00:53:53	←	ieeesebel has quit (Remote host closed the connection)
2022-04-18 00:53:55	←	redb has quit (Ping timeout: 256 seconds)
2022-04-18 00:54:29	←	justache has left #haskell
2022-04-18 00:55:10	→	ieeesebel has joined #haskell
2022-04-18 00:55:14	←	yauhsien has quit (Ping timeout: 250 seconds)
2022-04-18 00:56:06	statusbot	Status update: Many haskell.org websites are down due to an issue with our host. We are investigating. -- http://status.haskell.org/pages/incident/537c07b0cf1fad5830000093/625c69cdfcbdd204d4df5603
2022-04-18 00:56:14	→	jonathanx has joined #haskell
2022-04-18 00:58:49	←	abiss27 has quit (Quit: hasta la vista... tchau!)
2022-04-18 01:00:16	→	gawen has joined #haskell
2022-04-18 01:00:21	Athas	I have a strange issue issue with 'cabal haddock --haddock-for-hackage'.  I get:
2022-04-18 01:00:26	Athas	haddock: internal error: /home/athas/.cabal/store/ghc-9.0.2/Diff-0.4.1-04df2c01c87cfe54ff31f35bb1a20b246d6dcd854bf79ab8919d50738b1a79d3/share/doc/html/doc-index.json: openBinaryFile: does not exist (No such file or directory)
2022-04-18 01:00:29	→	abiss27 has joined #haskell
2022-04-18 01:00:48	Athas	I suspect Diff fails merely because it is alphabetically first.  None of the packages have doc-index.json files.
2022-04-18 01:01:27	→	ishaanv[m] has joined #haskell
2022-04-18 01:05:02	←	ieeesebel has quit (Remote host closed the connection)
2022-04-18 01:08:22	koz	Is Hoogle down?
2022-04-18 01:08:36	koz	Oh never mind, should have read above.
2022-04-18 01:09:54	←	anomal has quit (Remote host closed the connection)
2022-04-18 01:12:37	←	merijn has quit (Ping timeout: 256 seconds)
2022-04-18 01:20:48	→	redb has joined #haskell
2022-04-18 01:24:04	→	Sgeo has joined #haskell
2022-04-18 01:27:08	→	kenran has joined #haskell
2022-04-18 01:29:36	←	mjs2600 has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-18 01:30:34	←	neceve has quit (Ping timeout: 246 seconds)
2022-04-18 01:31:04	→	mjs2600 has joined #haskell
2022-04-18 01:31:38	→	acidjnk has joined #haskell
2022-04-18 01:34:43	←	mikoto-chan has quit (Ping timeout: 256 seconds)
2022-04-18 01:36:51	→	mikoto-chan has joined #haskell
2022-04-18 01:42:27	←	redb has quit (Ping timeout: 240 seconds)
2022-04-18 01:43:28	→	redb has joined #haskell
2022-04-18 01:48:15	←	redb has quit (Ping timeout: 272 seconds)
2022-04-18 01:50:20	←	zincy has quit (Remote host closed the connection)
2022-04-18 01:50:34	→	redb has joined #haskell
2022-04-18 01:52:58	→	machinedgod has joined #haskell
2022-04-18 01:53:03	→	yauhsien has joined #haskell
2022-04-18 01:55:07	←	redb has quit (Ping timeout: 256 seconds)
2022-04-18 01:55:31	→	andrey has joined #haskell
2022-04-18 01:56:58	→	Lord_of_Life_ has joined #haskell
2022-04-18 01:57:02	→	redb has joined #haskell
2022-04-18 01:57:36	←	yauhsien has quit (Ping timeout: 248 seconds)
2022-04-18 01:57:57	←	Lord_of_Life has quit (Ping timeout: 256 seconds)
2022-04-18 01:58:04	←	andrey_ has quit (Ping timeout: 250 seconds)
2022-04-18 01:58:13	ℹ	Lord_of_Life_ is now known as Lord_of_Life
2022-04-18 01:59:08	←	stackdroid18 has quit (Quit: hasta la vista... tchau!)
2022-04-18 01:59:35	→	stackdroid18 has joined #haskell
2022-04-18 01:59:52	←	stackdroid18 has quit (Client Quit)
2022-04-18 02:01:13	←	abiss27 has quit (Quit: hasta la vista... tchau!)
2022-04-18 02:03:37	←	redb has quit (Ping timeout: 256 seconds)
2022-04-18 02:05:32	←	ubert has quit (Quit: ubert)
2022-04-18 02:09:32	→	zincy has joined #haskell
2022-04-18 02:12:24	→	redb has joined #haskell
2022-04-18 02:12:53	→	vicfred has joined #haskell
2022-04-18 02:14:55	→	abiss27 has joined #haskell
2022-04-18 02:16:27	←	redb has quit (Ping timeout: 240 seconds)
2022-04-18 02:18:03	→	eggplantade has joined #haskell
2022-04-18 02:20:05	→	stackdroid18 has joined #haskell
2022-04-18 02:24:42	→	mvk has joined #haskell
2022-04-18 02:34:15	→	redb has joined #haskell
2022-04-18 02:36:13	←	takuan has quit (Remote host closed the connection)
2022-04-18 02:38:28	←	redb has quit (Ping timeout: 246 seconds)
2022-04-18 02:40:02	←	zincy has quit (Remote host closed the connection)
2022-04-18 02:48:30	←	jacks2 has quit (Quit: CGI:IRC (Session timeout))
2022-04-18 02:49:16	←	hololeap has quit (Ping timeout: 240 seconds)
2022-04-18 02:51:13	←	dextaa has quit (Ping timeout: 256 seconds)
2022-04-18 02:52:09	→	hololeap has joined #haskell
2022-04-18 02:53:46	←	fendor has quit (Remote host closed the connection)
2022-04-18 02:56:11	→	MajorBiscuit has joined #haskell
2022-04-18 03:01:22	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-18 03:02:36	←	hololeap has quit (Ping timeout: 240 seconds)
2022-04-18 03:06:54	→	redb has joined #haskell
2022-04-18 03:08:40	→	tromp has joined #haskell
2022-04-18 03:08:46	→	merijn has joined #haskell
2022-04-18 03:10:20	←	_ht has quit (Remote host closed the connection)
2022-04-18 03:11:37	←	redb has quit (Ping timeout: 256 seconds)
2022-04-18 03:14:19	←	mud has quit (Remote host closed the connection)
2022-04-18 03:14:44	→	mud has joined #haskell
2022-04-18 03:17:46	←	mmhat has quit (Quit: WeeChat 3.5)
2022-04-18 03:23:58	→	redb has joined #haskell
2022-04-18 03:24:33	→	jerry99 has joined #haskell
2022-04-18 03:25:35	←	MajorBiscuit has quit (Quit: WeeChat 3.4)
2022-04-18 03:26:11	←	gehmehgeh has quit (Quit: Leaving)
2022-04-18 03:27:59	←	fockerized has quit (Remote host closed the connection)
2022-04-18 03:28:16	←	redb has quit (Ping timeout: 248 seconds)
2022-04-18 03:28:32	←	renzhi has quit (Ping timeout: 260 seconds)
2022-04-18 03:29:47	→	malinoskj290 has joined #haskell
2022-04-18 03:30:23	←	jmdaemon has quit (Ping timeout: 250 seconds)
2022-04-18 03:34:17	←	juri_ has quit (Ping timeout: 256 seconds)
2022-04-18 03:34:42	→	juri_ has joined #haskell
2022-04-18 03:37:50	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-18 03:38:11	←	ZanpakutoB has quit (Ping timeout: 250 seconds)
2022-04-18 03:40:26	→	renzhi has joined #haskell
2022-04-18 03:41:07	←	Pickchea has quit (Ping timeout: 246 seconds)
2022-04-18 03:41:39	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2022-04-18 03:41:54	→	jmdaemon has joined #haskell
2022-04-18 03:43:21	←	merijn has quit (Ping timeout: 256 seconds)
2022-04-18 03:44:14	jerry99	@hoogle (b -> m c) -> a -> m b) -> a -> m c
2022-04-18 03:44:15	lambdabot	package base
2022-04-18 03:44:15	lambdabot	package bytestring
2022-04-18 03:44:15	lambdabot	package containers
2022-04-18 03:44:39	→	DNH has joined #haskell
2022-04-18 03:44:56	jerry99	is there something like this? I might have gotten that type wrong . for functions returning monadic value
2022-04-18 03:45:07	jerry99	:t (.)
2022-04-18 03:45:09	lambdabot	(b -> c) -> (a -> b) -> a -> c
2022-04-18 03:45:11	geekosaur	you missed a paren so it misparsed it
2022-04-18 03:45:17	→	rburkholder has joined #haskell
2022-04-18 03:45:22	jerry99	ah
2022-04-18 03:45:30	→	redb has joined #haskell
2022-04-18 03:45:32	jerry99	@hoogle (b -> m c) -> (a -> m b) -> a -> m c
2022-04-18 03:45:33	lambdabot	Control.Monad (<=<) :: Monad m => (b -> m c) -> (a -> m b) -> a -> m c
2022-04-18 03:45:33	lambdabot	System.Directory.Internal.Prelude (<=<) :: Monad m => (b -> m c) -> (a -> m b) -> a -> m c
2022-04-18 03:45:33	lambdabot	Control.Monad.Compat (<=<) :: Monad m => (b -> m c) -> (a -> m b) -> a -> m c
2022-04-18 03:45:54	jerry99	:t (>=>)
2022-04-18 03:45:56	lambdabot	Monad m => (a -> m b) -> (b -> m c) -> a -> m c
2022-04-18 03:45:58	jerry99	neat
2022-04-18 03:48:47	←	DNH has quit (Ping timeout: 240 seconds)
2022-04-18 03:49:50	→	xff0x_ has joined #haskell
2022-04-18 03:49:52	←	redb has quit (Ping timeout: 246 seconds)
2022-04-18 03:50:41	jerry99	so this works for (\x -> f =<< g x), but and what if I have something like this? (\x -> f <$> g x)?
2022-04-18 03:51:46	jerry99	this worked but I'm not sure it is an improvement. ((pure . f) <=< g)
2022-04-18 03:52:27	jerry99	@pl (\x -> f <$> g x)
2022-04-18 03:52:27	lambdabot	(f <$>) . g
2022-04-18 03:52:40	jerry99	oh lol
2022-04-18 03:53:07	dolio	But use `fmap f` of course.
2022-04-18 03:53:34	dolio	Sectioning (<$>) (on the left) is silly.
2022-04-18 03:53:40	jerry99	yeah
2022-04-18 03:53:52	→	sammelweis has joined #haskell
2022-04-18 03:55:19	jerry99	too much?
2022-04-18 03:55:21	jerry99	hex2ip = fmap (intercalate ".") . mapM (fmap show . readAsHex) . chunksOf 2
2022-04-18 04:00:27	←	abiss27 has quit (Quit: Lost terminal)
2022-04-18 04:00:51	dolio	I think it's all right.
2022-04-18 04:02:48	→	redb has joined #haskell
2022-04-18 04:02:59	dolio	Some people dislike that sort of thing more than I do, though.
2022-04-18 04:03:47	→	mixfix41 has joined #haskell
2022-04-18 04:04:19	←	chomwitt has quit (Ping timeout: 256 seconds)
2022-04-18 04:10:04	←	albet70 has quit (Remote host closed the connection)
2022-04-18 04:10:05	ℹ	rburkholder is now known as offtherock
2022-04-18 04:10:07	←	redb has quit (Ping timeout: 240 seconds)
2022-04-18 04:10:21	←	crazazy has quit (Remote host closed the connection)
2022-04-18 04:11:00	→	RegularTetragon has joined #haskell
2022-04-18 04:11:36	RegularTetragon	Is haskell.org/hackage/hoogle down for anyone else?
2022-04-18 04:12:19	←	jakalx has left #haskell (Error from remote client)
2022-04-18 04:12:35	ℹ	offtherock is now known as rburkholder
2022-04-18 04:12:58	→	jakalx has joined #haskell
2022-04-18 04:13:29	dolio	hackage is up, but haskell.org seems down.
2022-04-18 04:14:18	geekosaur	https://mail.haskell.org/pipermail/ghc-devs/2022-April/020658.html
2022-04-18 04:14:31	→	yaroot_ has joined #haskell
2022-04-18 04:14:45	←	m5zs7k has quit (Quit: m5zs7k)
2022-04-18 04:14:46	→	redb has joined #haskell
2022-04-18 04:14:57	geekosaur	they're working on it, from what I've seen elsewhere
2022-04-18 04:15:10	RegularTetragon	Hmm gotcha
2022-04-18 04:15:10	hpc	maybe it's hosted on atlassian's servers :D
2022-04-18 04:15:19	RegularTetragon	Ohh dang is Atlassian down?
2022-04-18 04:15:21	RegularTetragon	I didn't notice
2022-04-18 04:16:07	RegularTetragon	So I'm trying to install haskell-language-server rn which is kinda hard without having ghcup
2022-04-18 04:16:11	→	albet70 has joined #haskell
2022-04-18 04:16:17	RegularTetragon	I'm trying to do it through stack now, but I'm not sure which stack.yaml file to use
2022-04-18 04:17:31	←	yaroot has quit (Ping timeout: 260 seconds)
2022-04-18 04:17:32	ℹ	yaroot_ is now known as yaroot
2022-04-18 04:17:59	←	zeenk has quit (Quit: Konversation terminated!)
2022-04-18 04:18:47	←	redb has quit (Ping timeout: 240 seconds)
2022-04-18 04:18:52	RegularTetragon	https://haskell-language-server.readthedocs.io/en/latest/installation.html#installation-from-source is the guide I'm following, and it just says to run, in my case `stack install --yaml stack-9.0.2.yaml haskell-language-server`
2022-04-18 04:19:04	RegularTetragon	ofc I don't have a stack-9.0.2-yaml so
2022-04-18 04:19:13	RegularTetragon	Oh derp, I probably need to actually *download* the source
2022-04-18 04:19:35	←	cosimone` has quit (Quit: ERC 5.4 (IRC client for GNU Emacs 28.1))
2022-04-18 04:20:32	←	kenran has quit (Quit: WeeChat info:version)
2022-04-18 04:21:35	→	chenqisu1 has joined #haskell
2022-04-18 04:23:47	←	acidjnk has quit (Ping timeout: 240 seconds)
2022-04-18 04:24:07	←	slaydr has quit (Ping timeout: 240 seconds)
2022-04-18 04:25:00	←	jao has quit (Remote host closed the connection)
2022-04-18 04:26:39	→	jao has joined #haskell
2022-04-18 04:27:06	RegularTetragon	Yeah it's building now I'm just dumb lol
2022-04-18 04:30:47	→	redb has joined #haskell
2022-04-18 04:34:47	←	redb has quit (Ping timeout: 240 seconds)
2022-04-18 04:36:07	←	pretty_dumm_guy has quit (Ping timeout: 240 seconds)
2022-04-18 04:38:40	→	slaydr has joined #haskell
2022-04-18 04:45:49	→	abiss27 has joined #haskell
2022-04-18 04:46:23	←	abiss27 has quit (Client Quit)
2022-04-18 04:50:41	→	redb has joined #haskell
2022-04-18 04:52:00	←	RegularTetragon has quit (Ping timeout: 248 seconds)
2022-04-18 04:55:03	→	abiss27 has joined #haskell
2022-04-18 04:56:29	jerry99	Stackage Nightly 2022-04-16 (ghc-9.2.2)  <- that is the version with Record Dot Syntax, isn't it? any reason why I shouldn't use it? only care about compiling for linux and windows
2022-04-18 04:57:20	←	redb has quit (Ping timeout: 248 seconds)
2022-04-18 04:58:53	sm	9.2.2 is pretty good now, I would use it if you can
2022-04-18 04:59:28	jerry99	no major issues on windows?
2022-04-18 05:00:12	sm	there probably are some, but they might not affect you 
2022-04-18 05:00:59	sm	the issue tracker should have the latest
2022-04-18 05:01:49	→	RegularTetragon has joined #haskell
2022-04-18 05:06:10	→	img has joined #haskell
2022-04-18 05:07:19	geekosaur	the only windows issues I'm aware of have always been there
2022-04-18 05:08:11	geekosaur	and the nightly's only problem is it's likely to be missing some stuff that's in the ltses that hasn't been ported over to 9.2.2 yet
2022-04-18 05:10:11	→	zebrag has joined #haskell
2022-04-18 05:11:58	→	redb has joined #haskell
2022-04-18 05:12:16	←	img has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-18 05:13:38	→	img has joined #haskell
2022-04-18 05:16:49	jerry99	neat.. I'll give it a try
2022-04-18 05:17:01	←	redb has quit (Ping timeout: 246 seconds)
2022-04-18 05:19:39	→	wroathe has joined #haskell
2022-04-18 05:19:39	←	wroathe has quit (Changing host)
2022-04-18 05:19:39	→	wroathe has joined #haskell
2022-04-18 05:21:13	←	gurkenglas has quit (Ping timeout: 246 seconds)
2022-04-18 05:22:10	←	mvk has quit (Ping timeout: 250 seconds)
2022-04-18 05:24:35	→	kaph has joined #haskell
2022-04-18 05:27:06	→	szkl has joined #haskell
2022-04-18 05:27:48	→	redb has joined #haskell
2022-04-18 05:33:36	ℹ	ishaanv[m] is now known as ishaan[m]
2022-04-18 05:35:13	←	redb has quit (Ping timeout: 246 seconds)
2022-04-18 05:36:05	→	redb has joined #haskell
2022-04-18 05:38:47	←	geekosaur has quit (Remote host closed the connection)
2022-04-18 05:39:22	→	merijn has joined #haskell
2022-04-18 05:39:56	←	ishaan has quit (Quit: Client closed)
2022-04-18 05:40:27	→	geekosaur has joined #haskell
2022-04-18 05:40:49	←	redb has quit (Ping timeout: 246 seconds)
2022-04-18 05:40:52	←	vicfred has quit (Quit: Leaving)
2022-04-18 05:41:06	→	redb has joined #haskell
2022-04-18 05:42:27	←	abiss27 has quit (Quit: hasta la vista... tchau!)
2022-04-18 05:42:28	←	RegularTetragon has quit (Ping timeout: 260 seconds)
2022-04-18 05:43:16	←	xff0x_ has quit (Ping timeout: 246 seconds)
2022-04-18 05:45:43	←	redb has quit (Ping timeout: 246 seconds)
2022-04-18 05:50:01	←	Unicorn_Princess has quit (Remote host closed the connection)
2022-04-18 05:51:09	←	kaph has quit (Read error: Connection reset by peer)
2022-04-18 05:51:27	→	redb has joined #haskell
2022-04-18 05:51:37	←	stackdroid18 has quit (Quit: hasta la vista... tchau!)
2022-04-18 05:52:08	→	kaph has joined #haskell
2022-04-18 05:53:25	←	wroathe has quit (Ping timeout: 246 seconds)
2022-04-18 05:56:13	→	stackdroid18 has joined #haskell
2022-04-18 05:56:45	←	Midjak has quit (Quit: This computer has gone to sleep)
2022-04-18 05:56:51	←	redb has quit (Ping timeout: 250 seconds)
2022-04-18 05:57:38	→	redb has joined #haskell
2022-04-18 06:01:52	←	redb has quit (Ping timeout: 248 seconds)
2022-04-18 06:04:12	→	awshua has joined #haskell
2022-04-18 06:09:08	→	EsoAlgo has joined #haskell
2022-04-18 06:09:30	abastro[m]	Yea 9.2.2 is usable
2022-04-18 06:09:39	abastro[m]	Unless you are me and experiencing subtle crash problems
2022-04-18 06:10:00	←	jpds has quit (Remote host closed the connection)
2022-04-18 06:10:08	jerry99	ghc pr ghci crash, or programs that you compile with ghc?
2022-04-18 06:10:11	jerry99	or*
2022-04-18 06:10:27	abastro[m]	Programs compiled with GHC
2022-04-18 06:10:38	jerry99	hmm
2022-04-18 06:10:43	jerry99	what OS?
2022-04-18 06:11:56	abastro[m]	Linux
2022-04-18 06:11:59	jerry99	I don't think I've ever experienced my haskell program crashing (as in segfaulting without an exception), except when I fiddled with FFI
2022-04-18 06:12:13	abastro[m]	Well, if it matters, ubuntu
2022-04-18 06:12:13	abastro[m]	That is the thing
2022-04-18 06:12:23	abastro[m]	It is hard to pinpoint the reason
2022-04-18 06:12:27	→	redb has joined #haskell
2022-04-18 06:12:30	geekosaur	I spent most of a day trying to reproduce it without success
2022-04-18 06:12:33	abastro[m]	Just somehow, some combination of program& ghc makes it crash
2022-04-18 06:12:41	geekosaur	it'sheap corruption detected during a gc
2022-04-18 06:12:42	abastro[m]	Within certain condition
2022-04-18 06:13:18	abastro[m]	geekosaur: Did you try loading from XMONAD_CONFIG_DIR?
2022-04-18 06:13:22	←	merijn has quit (Ping timeout: 246 seconds)
2022-04-18 06:13:25	ℹ	irc: disconnected from server
2022-04-19 06:33:37	→	oxide has joined #haskell
2022-04-19 06:33:37	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-19 06:33:37	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-19 06:33:37	ℹ	Channel #haskell: 696 nicks (1 op, 0 voices, 695 normals)
2022-04-19 06:33:37	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-19 06:33:37	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-19 06:34:23	←	yauhsien has quit (Ping timeout: 256 seconds)
2022-04-19 06:36:19	←	gurkenglas has quit (Ping timeout: 240 seconds)
2022-04-19 06:36:25	→	abastro has joined #haskell
2022-04-19 06:36:54	Axman6	(I am expecting that to fail btw)
2022-04-19 06:37:16	Axman6	Do we have anything that can test if two expressions are algebraically equivalent?
2022-04-19 06:37:32	Axman6	@check \x y z q -> (y /= 0) ==> (((x / y) - z) * q == (x * q / y) - z * (q :: Rational))
2022-04-19 06:37:34	lambdabot	 +++ OK, passed 100 tests.
2022-04-19 06:38:55	→	xff0x_ has joined #haskell
2022-04-19 06:41:16	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-19 06:43:46	←	FinnElija has quit (Remote host closed the connection)
2022-04-19 06:44:23	→	FinnElija has joined #haskell
2022-04-19 06:44:24	←	mtjm has quit (Remote host closed the connection)
2022-04-19 06:44:47	→	littlebobeep has joined #haskell
2022-04-19 06:45:28	→	mtjm has joined #haskell
2022-04-19 06:50:54	←	justsomeguy has quit (Quit: WeeChat 3.4)
2022-04-19 06:51:12	→	andrey__ has joined #haskell
2022-04-19 06:53:39	←	andrey_ has quit (Ping timeout: 256 seconds)
2022-04-19 07:06:50	→	EvanR has joined #haskell
2022-04-19 07:07:32	←	wroathe has quit (Ping timeout: 260 seconds)
2022-04-19 07:11:45	dmj`	vacuous is insane, might I even say absurd.
2022-04-19 07:14:56	←	anomal has quit (Remote host closed the connection)
2022-04-19 07:16:06	←	waleee has quit (Ping timeout: 250 seconds)
2022-04-19 07:16:38	→	merijn has joined #haskell
2022-04-19 07:17:29	abastro	XD
2022-04-19 07:19:33	←	Me-me has quit (Read error: Connection reset by peer)
2022-04-19 07:20:27	←	[itchyjunk] has quit (Ping timeout: 250 seconds)
2022-04-19 07:20:53	EvanR	so uh
2022-04-19 07:21:00	→	Me-me has joined #haskell
2022-04-19 07:21:02	EvanR	> decodeFloat (3.14 :: Float)
2022-04-19 07:21:04	lambdabot	 (13170115,-22)
2022-04-19 07:21:16	EvanR	> 13170115 / 2^22
2022-04-19 07:21:18	lambdabot	 3.140000104904175
2022-04-19 07:21:31	EvanR	> showFFloat (Just 100) (3.14 :: Float) ""
2022-04-19 07:21:33	lambdabot	 "3.1400000000000000000000000000000000000000000000000000000000000000000000000...
2022-04-19 07:21:57	EvanR	how or why is showFFloat giving... the "decimal" expansion of all zeros
2022-04-19 07:23:11	EvanR	> showFFloat (Just 100) (3.140000104904175 :: Float) ""
2022-04-19 07:23:13	lambdabot	 "3.1400000000000000000000000000000000000000000000000000000000000000000000000...
2022-04-19 07:23:16	EvanR	o_O
2022-04-19 07:29:21	ℹ	irc: disconnected from server
2022-04-19 07:29:46	→	oxide has joined #haskell
2022-04-19 07:29:46	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-19 07:29:46	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-19 07:29:46	ℹ	Channel #haskell: 693 nicks (1 op, 0 voices, 692 normals)
2022-04-19 07:29:46	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-19 07:29:47	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-19 07:30:02	abastro	> showEFloat (Just 10) (3.14 :: Float)
2022-04-19 07:30:06	lambdabot	 <[Char] -> [Char]>
2022-04-19 07:30:13	abastro	Oh meh
2022-04-19 07:30:18	abastro	> showEFloat (Just 10) (3.14 :: Float) ""
2022-04-19 07:30:20	lambdabot	 "3.1400000000e0"
2022-04-19 07:30:24	←	Me-me has quit (Changing host)
2022-04-19 07:30:24	→	Me-me has joined #haskell
2022-04-19 07:30:31	abastro	Hmm yea, this is weird
2022-04-19 07:30:41	abastro	Actually
2022-04-19 07:31:07	abastro	> (13170115 / 2^22) :: Float
2022-04-19 07:31:10	lambdabot	 3.14
2022-04-19 07:31:16	EvanR	yeah I caught that after, but still
2022-04-19 07:31:17	abastro	^ That is the reason I guess
2022-04-19 07:31:56	EvanR	if I corrected it to not switch types how do I print the right far digits of '3.14'
2022-04-19 07:32:03	←	Me-me has quit (Quit: Disconnecting on purpose.)
2022-04-19 07:32:26	EvanR	or 0.1
2022-04-19 07:32:44	→	Me-me has joined #haskell
2022-04-19 07:34:16	←	Me-me has quit (Changing host)
2022-04-19 07:34:16	→	Me-me has joined #haskell
2022-04-19 07:35:05	abastro	> floatToDigits 10 (3.14 :: Float)
2022-04-19 07:35:08	lambdabot	 ([3,1,4],1)
2022-04-19 07:35:18	EvanR	lol
2022-04-19 07:35:22	abastro	> floatToDigits 10 (3.14 :: Double)
2022-04-19 07:35:24	lambdabot	 ([3,1,4],1)
2022-04-19 07:35:34	EvanR	:t floatToDigits
2022-04-19 07:35:35	abastro	Hmm I meant
2022-04-19 07:35:36	lambdabot	RealFloat a => Integer -> a -> ([Int], Int)
2022-04-19 07:36:36	EvanR	to read 3.14 or 0.1 as a float, then present it as 0.100000000000000000... is hella confusing
2022-04-19 07:36:37	abastro	> floatToDigits 10 (realToFrac @_ @Double (3.14 :: Float))
2022-04-19 07:36:39	lambdabot	 <hint>:1:33: error: parse error on input ‘@’
2022-04-19 07:36:56	abastro	% floatToDigits 10 (realToFrac @Float @Double 3.14)
2022-04-19 07:36:57	yahb	abastro: ([3,1,4,0,0,0,0,1,0,4,9,0,4,1,7,5],1)
2022-04-19 07:37:35	abastro	% floatToDigits 10 (3.14 :: Float)
2022-04-19 07:37:36	yahb	abastro: ([3,1,4],1)
2022-04-19 07:37:40	EvanR	that's doing the same precision shenanigan as before
2022-04-19 07:37:45	abastro	So.. it comes from there
2022-04-19 07:38:15	EvanR	> (13170115 / 2^22) :: CReal
2022-04-19 07:38:16	lambdabot	 3.1400001049041748046875
2022-04-19 07:39:18	EvanR	> 7070651414971679 / 2 ^ 51 :: CReal
2022-04-19 07:39:20	lambdabot	 3.1400000000000001243449787580175325274467
2022-04-19 07:39:32	→	deadmarshal_ has joined #haskell
2022-04-19 07:39:57	EvanR	could have sworn there was a way to get this info without CReal
2022-04-19 07:40:14	EvanR	since the input is rational
2022-04-19 07:40:17	→	Macbethwin has joined #haskell
2022-04-19 07:40:38	abastro	Wdym get info?
2022-04-19 07:41:00	EvanR	the tail in the last example isn't infinite zeros like showFFloat shows
2022-04-19 07:41:10	abastro	Uh
2022-04-19 07:41:27	abastro	That's because there is less precision loss
2022-04-19 07:41:35	abastro	(If you use CReal)
2022-04-19 07:42:21	abastro	I think it is reasonable for the algorithm to compensate for possible errors from calculation
2022-04-19 07:42:36	EvanR	the number 3.1400000000000001243449787580175325274467... is the actual value you get when you parse 3.14
2022-04-19 07:42:43	EvanR	it just doesn't display that way
2022-04-19 07:42:52	abastro	No
2022-04-19 07:43:01	abastro	It's not the "actual value" or anything
2022-04-19 07:43:13	EvanR	yes that's what the double value represents
2022-04-19 07:43:19	abastro	You should never consider a floating number as a concrete number.
2022-04-19 07:43:20	EvanR	that particular rational number
2022-04-19 07:43:38	abastro	I mean, Float -> Double conversion is lossful
2022-04-19 07:43:45	EvanR	I'm not talking about that conversion
2022-04-19 07:44:04	abastro	What are you talking about then?
2022-04-19 07:44:04	EvanR	also no it isn't
2022-04-19 07:44:08	→	wroathe has joined #haskell
2022-04-19 07:44:08	←	wroathe has quit (Changing host)
2022-04-19 07:44:08	→	wroathe has joined #haskell
2022-04-19 07:44:22	Axman6	>  showFFloat (Just 100) (read "3.140000104904175" :: Float) ""
2022-04-19 07:44:24	lambdabot	 "3.1400000000000000000000000000000000000000000000000000000000000000000000000...
2022-04-19 07:44:26	abastro	It is, there is conversion error still involved
2022-04-19 07:44:30	Axman6	>  showFFloat (Just 100) (read "3.14" :: Float) ""
2022-04-19 07:44:32	lambdabot	 "3.1400000000000000000000000000000000000000000000000000000000000000000000000...
2022-04-19 07:44:50	EvanR	Axman6, right
2022-04-19 07:44:53	abastro	The thing is, floating point number should never be considered as a concrete number.
2022-04-19 07:45:01	abastro	It never is.
2022-04-19 07:45:04	EvanR	it definitely is a concrete number
2022-04-19 07:45:22	EvanR	unless it's NaN
2022-04-19 07:45:27	Axman6	Sorry, just checking if the read instance directly (rather than the Rational instance -> Float conversion) would do anything different
2022-04-19 07:45:57	EvanR	it must be from the obscure rule where you display the number with the least amount of digits necessary to reproduce it
2022-04-19 07:46:00	Axman6	abastro: every non NaN ieee-754 number represents some exact value, it is possible to know exactly what number that is
2022-04-19 07:46:46	Axman6	EvanR: bringing back memories of a bug in PHP (and subsequently several other languages) which caused an infinite loop when parsing a certain floating point number
2022-04-19 07:46:55	EvanR	that was a good one
2022-04-19 07:47:21	abastro	I mean, even different architectures have different rules for computing floating number
2022-04-19 07:47:47	abastro	By rules, I mean it computes different number for same operation modulo some errors
2022-04-19 07:48:09	EvanR	I would believe that for something like inverse sine function
2022-04-19 07:48:13	abastro	While it is true that you could have it represent specific number, it is never meant to be used like that.
2022-04-19 07:48:19	←	deadmarshal_ has quit (Ping timeout: 240 seconds)
2022-04-19 07:48:42	EvanR	yeah, you describe it as a sort of random function
2022-04-19 07:48:51	EvanR	I don't like that picture
2022-04-19 07:48:51	Axman6	abastro: I think you are missing the problem EvanR is having
2022-04-19 07:48:54	abastro	I did not say random function
2022-04-19 07:49:09	abastro	I mean, I did not mean it as a random function
2022-04-19 07:49:20	EvanR	we're not even doing a computation here, just talking about the value
2022-04-19 07:49:23	abastro	Rather, it is not supposed to be used without consideration for the calculation errors.
2022-04-19 07:49:24	EvanR	> decodeFloat 3.14
2022-04-19 07:49:26	lambdabot	 (7070651414971679,-51)
2022-04-19 07:49:40	EvanR	after parsing that is the value
2022-04-19 07:49:45	Axman6	abastro: EvanRis trying to see what the errors are
2022-04-19 07:49:51	abastro	Converting (3.14 :: Float) to Double is computation
2022-04-19 07:50:03	EvanR	that's not on topic
2022-04-19 07:50:13	EvanR	it's "3.14" to Double, or Float
2022-04-19 07:50:18	EvanR	and back
2022-04-19 07:51:18	←	merijn has quit (Ping timeout: 276 seconds)
2022-04-19 07:51:20	abastro	Well, why would that represent the exact number of (3.14 :: Float)
2022-04-19 07:51:25	Axman6	I swear bos has a package for past parsing/rendering of ieee-754 doubles and floats
2022-04-19 07:51:34	Axman6	it doesn't, and that's the point abastro
2022-04-19 07:51:47	EvanR	the longer decimal expansion is the exact value
2022-04-19 07:51:48	abastro	I mean, why do you want that behavior?
2022-04-19 07:51:57	abastro	Duh, what is this "exact" thing
2022-04-19 07:51:59	→	eggplantade has joined #haskell
2022-04-19 07:52:02	EvanR	you would want that to compare to the approximation
2022-04-19 07:52:11	Axman6	the string "3.14" is parsed into some specific Float value, and EvanR is trying to see exactly whatch float value it is, including the error in the parsing
2022-04-19 07:52:16	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-19 07:52:34	abastro	You want to print "3.14 :: Float" to find the error?
2022-04-19 07:52:36	abastro	What?
2022-04-19 07:52:39	←	bontaq has quit (Ping timeout: 240 seconds)
2022-04-19 07:52:46	EvanR	I'm very surprised to see all those zeros, which is usually how you express increased precision
2022-04-19 07:53:01	EvanR	which in this case shows the wrong value
2022-04-19 07:53:24	abastro	That's because it isn't supposed to be for that purpose
2022-04-19 07:53:41	←	abastro has quit (Remote host closed the connection)
2022-04-19 07:53:52	EvanR	in any case it can't be used for that purpose, but I could have sworn it acted differently before
2022-04-19 07:53:58	Axman6	fucksake, abastro if you don't undertstand the problem, stop commenting on it, you're negatively contributing to this discussion at this piont
2022-04-19 07:54:14	→	abastro has joined #haskell
2022-04-19 07:54:27	EvanR	like, to display the digits, you just need a division algorithm and not a real number library
2022-04-19 07:54:29	abastro[m]	What
2022-04-19 07:54:54	abastro	Like, whining about something that is not supposed to be working as you suggest is okay then?
2022-04-19 07:55:45	EvanR	at least I confirmed showFFloat is "supposed" to act like this, which I'll call "wrong" for the sake of argument xD
2022-04-19 07:55:47	→	bitdex has joined #haskell
2022-04-19 07:56:18	Axman6	let me try to spell it out for you again: The string "3.14" is parsed into _some_ Float value, whose actual value is 3.140000104904175. EvanR is trying to print out that actual value to see what the error is from the idealised 3.14 which cannot be represented in a Float. do you understand?
2022-04-19 07:56:26	abastro	....
2022-04-19 07:56:40	abastro	The printing isn't just for that.
2022-04-19 07:57:20	Axman6	what are you talking about?
2022-04-19 07:58:12	Axman6	% import Data.Double.Conversion.Text
2022-04-19 07:58:12	yahb	Axman6: ; <no location info>: error:; Could not find module `Data.Double.Conversion.Text'; It is not a module in the current program, or in any known package.
2022-04-19 07:58:15	←	abhixec has quit (Ping timeout: 256 seconds)
2022-04-19 07:58:16	EvanR	up to this point I would have said printing is for seeing the value
2022-04-19 07:58:36	Axman6	Are you able to test what https://hackage.haskell.org/package/double-conversion-2.0.4.1/docs/Data-Double-Conversion-Text.html does?
2022-04-19 07:58:59	EvanR	alright hold my beer
2022-04-19 08:00:15	ℹ	travisb_ is now known as tabemann
2022-04-19 08:00:50	→	deadmarshal_ has joined #haskell
2022-04-19 08:00:51	abastro	Showing as string is for giving rough representation
2022-04-19 08:01:11	abastro	Exact value is more the implementation detail anyway
2022-04-19 08:01:16	EvanR	Data.Double.Conversion.Text> toFixed 100 3.14
2022-04-19 08:01:16	EvanR	"*** Exception: Data.Double.Conversion.Text.toFixed: conversion failed (invalid precision requested)
2022-04-19 08:01:18	EvanR	xD
2022-04-19 08:01:41	Axman6	abastro: and it's exactly the details that EvanR is trying to find out. how hard is that to understand?
2022-04-19 08:02:12	EvanR	*Main Data.Double.Conversion.Text> toFixed 30 3.14   => "3.140000000000000124344978758018"
2022-04-19 08:02:24	abastro	Then just do not use the showFFloat lol
2022-04-19 08:02:31	abastro	It isn't for the purpose
2022-04-19 08:02:36	Axman6	you absolutely should not treat your numeric types as black boxes which produce unpredictable results, you should be able to find out what the errors are and categorise them
2022-04-19 08:02:43	abastro	Lol
2022-04-19 08:02:54	Axman6	jesus chrtist, that's literally the whole point of this conversation
2022-04-19 08:03:06	EvanR	yeah as a wise man once said "I like to understand my code" or something
2022-04-19 08:03:11	abastro	I guess that aligns with your point about storing literal utf-8 bitstream
2022-04-19 08:03:42	abastro	Well, the "I like to understand" could go the way of "I want to understand what a transistor does when I run this program"
2022-04-19 08:03:44	Axman6	EvanR: glag double-conversion worked for you, and good to know it can be used for that
2022-04-19 08:03:47	Axman6	glad*
2022-04-19 08:04:14	EvanR	it doesn't go up to 100 though
2022-04-19 08:04:25	EvanR	which you might need in order to see the repeating decimals
2022-04-19 08:05:14	EvanR	there's probably a slick one liner that gives the decimal expansion
2022-04-19 08:05:23	sm	EvanR: how about using Decimal instead ?
2022-04-19 08:05:37	EvanR	yeah if the goal was to use literal 3.14
2022-04-19 08:05:59	EvanR	I was curious about the float
2022-04-19 08:06:12	sm	ah
2022-04-19 08:06:14	Axman6	abastro: a word of advice: Whenever you think that the answer to someone's question should begin with "Just do X", that is a good time to stop and think whether you actually understand the question. When someone tells you you don't understand the question is an even better time to have that thought
2022-04-19 08:06:17	abastro	Anyway, this is quite a niche usage so it was not implemented
2022-04-19 08:06:32	abastro	Why do you think I do not understand lol
2022-04-19 08:06:48	abastro	I am saying that it is not implemented this way for a reason
2022-04-19 08:06:54	EvanR	yeah we should stick to mainstream usage of Haskell
2022-04-19 08:06:55	Axman6	the overwhelming torrent of evidence from the last half an hour showing that was the case?
2022-04-19 08:06:57	abastro	And what you are doing is just whining
2022-04-19 08:07:23	abastro	Bunch of whines
2022-04-19 08:07:45	EvanR	arnold sound board from the late 90s "STOP WHINING"
2022-04-19 08:07:52	abastro	...
2022-04-19 08:08:01	sm	can we agree to disagree on this
2022-04-19 08:08:35	Axman6	I literally just one hour ago fixed a very closely related bug in our financial system because of knowing about problems like this. This is a system which will handle hundreds of millions of dollars of financial transactions per day. this shit matters. just because you don't think it does doesn't mean it doesn't
2022-04-19 08:08:48	EvanR	end of the day, showFFloat is doing something more akin to toShortest which is oddly described as "Compute the shortest string of digits that correct represent the input number"
2022-04-19 08:09:08	abastro	...well why are you using floating point number for financial system at all...
2022-04-19 08:09:38	EvanR	if your money is made of base 2 fractions then you're good
2022-04-19 08:09:41	abastro	Fixed precision numbers are for that precise reason, isn't it..
2022-04-19 08:09:57	Axman6	no
2022-04-19 08:10:09	abastro	The point you get into floating point number with financials, you are asking for trouble
2022-04-19 08:10:20	Axman6	and I'm not using floating point numbers, at least not IEEE-754 oves
2022-04-19 08:10:36	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-19 08:10:43	abastro	Yea, I mean then that one is rather orthogonal issue.
2022-04-19 08:11:27	Axman6	that's why we're using Scala/Java's BigDecimal. there's possibly as better representation for this computation but this one works for all values we care about
2022-04-19 08:11:36	EvanR	earlier I was testing my game algorithm using rational numbers, then went to store them in sqlite and it went no
2022-04-19 08:11:48	sm	just no ?
2022-04-19 08:11:50	EvanR	haha
2022-04-19 08:11:56	Axman6	and our contract language, Daml, doesn't even have floats or doubles
2022-04-19 08:11:57	EvanR	more like, they don't have a rational number
2022-04-19 08:12:07	→	bitdex has joined #haskell
2022-04-19 08:12:13	abastro	Yea, those issues are orthogonal to floating point numbers
2022-04-19 08:12:32	Axman6	sm: SQLite comes with JSON extensions by default now, just store them as an array of integers :P
2022-04-19 08:12:37	abastro	Well, I mean, the most uses of floating point numbers other than where precision doesn't matter is for physical simulations and such
2022-04-19 08:12:59	Axman6	except they aren't orthogonal, because the order of operations caused precision to be lost in computations
2022-04-19 08:13:05	abastro	And for physical simulations, you ALWAYS have to consider the error - and well, you won't calculate the deviation from precise value
2022-04-19 08:13:07	EvanR	you certainly need to know how accurate your physics simulation is
2022-04-19 08:13:35	abastro	This is not the way you would check the accuracy of physics simulation, btw
2022-04-19 08:13:52	abastro	It should rather be theoretically modelled without computing at runtime
2022-04-19 08:13:57	EvanR	you could check steps against the same steps using real numbers
2022-04-19 08:14:07	EvanR	just to see
2022-04-19 08:14:15	abastro	I mean, with BigDecimals and such, the logic should be completely different
2022-04-19 08:14:30	EvanR	exact real arithmetic is pretty snazzy
2022-04-19 08:14:40	abastro	Evan, that is not how physics simulation work in those labs I've been to
2022-04-19 08:15:17	abastro	Well many of them do consider the IEEE floats as a bit of black box, some doesn't but does not calculate those numbers in runtime anyway.
2022-04-19 08:15:42	abastro	They always consider the error ranges which are taken into account when they run the simulations.
2022-04-19 08:15:46	abastro	I mean
2022-04-19 08:15:51	abastro	When they design* the simulations
2022-04-19 08:15:54	EvanR	they're certainly not a black hole or black box
2022-04-19 08:16:08	EvanR	which was the entire point of having standards
2022-04-19 08:16:16	abastro	That is why I mentioned that some don't treat them as a black box
2022-04-19 08:16:47	abastro	That doesn't mean they check the exact value stored
2022-04-19 08:17:11	abastro	Also there are better ways to see exact values stored, you can get the fraction
2022-04-19 08:17:15	EvanR	don't ask don't tell, but for floats
2022-04-19 08:17:16	Axman6	I see you still don't understand what thew problem was -_-
2022-04-19 08:17:18	abastro	You don't need to convert them to strings
2022-04-19 08:18:05	abastro	I simply mean that you are trying to use `showFFloat` for wrong purpose
2022-04-19 08:18:18	Axman6	> (7070651414971679 / 2^51 :: CReal, (7070651414971679 - 1) / 2^51 :: CReal)
2022-04-19 08:18:20	lambdabot	 (3.1400000000000001243449787580175325274467,3.139999999999999680255768907954...
2022-04-19 08:18:22	abastro	And possibly even misunderstanding floating point numbers, as everyone does
2022-04-19 08:18:42	sm	Axman6: is Daml your company's main product ? are there customers yet ?
2022-04-19 08:21:01	Axman6	I'm contracted to Digital Asset, so not technically "my company", but I'm not sure if I'd describe it as the main product - they've developed several large systems for various clients, but using Daml. I gues the language could be considered the secret sauce in some sense
2022-04-19 08:21:41	Axman6	https://www.digitalasset.com/customer-stories lists some of the projects they have built, including the project I'm on
2022-04-19 08:22:26	EvanR	you're using haskell?
2022-04-19 08:22:38	EvanR	(please say yes)
2022-04-19 08:22:48	abastro	I won't claim I understand floating point numbers as well, I just think everyone misunderstands them in a way or the other. I just mean that whining for some behavior where one behavior is clear-cut better is not great
2022-04-19 08:22:58	abastro	Lol who would use haskell for that purpose
2022-04-19 08:23:05	Axman6	I genuinelt think that Daml is a super interesting point in the space of contract languages though, it solves a lot of problems which others seem to be less interested in (the concept of what information is visible to which parties is a core concept in the language)
2022-04-19 08:23:10	sm	abastro, please stop accusing folks of whining, let's move on
2022-04-19 08:23:20	abastro	Well okaya
2022-04-19 08:23:28	abastro	s/okaya/okay
2022-04-19 08:23:38	sm	thank you :)
2022-04-19 08:24:23	Axman6	EvanR: The currently Daml imprlmentation is built on top of GHC, and it basically feels like Haskell++; several useful extensions are enabled by default, and it has some syntax additions for the contract specific stuff (which any haskell developer would immediately see through the veneer to the code that gets generated)
2022-04-19 08:24:32	abastro	Imagine building on haskell lol
2022-04-19 08:24:48	sm	Axman6: how does it compare to plutus , marlowe etc. ? 
2022-04-19 08:24:59	abastro	Which is for now an unstable research language (which might change later but eh)
2022-04-19 08:25:01	Axman6	I'm not familliar enough with those to comment
2022-04-19 08:25:43	sm	Haskell++, sounds more complex than those then. Perhaps more for analysis than implementing contracts ?
2022-04-19 08:26:33	←	RevoGen has quit (Remote host closed the connection)
2022-04-19 08:26:42	sm	and sorry if it's all spelled out on this fine page, the field is a bit confusing
2022-04-19 08:26:42	EvanR	this is like the 4th or 5th thing I heard of that hijacks GHC for their own nefarious purposes, must be pretty feasible to do such things xD
2022-04-19 08:26:50	→	RevoGen has joined #haskell
2022-04-19 08:27:09	Axman6	It's literally a strict (as in not lazy) Haskell dialect, with some syntactic features added to the parser. It's definitely aimes at writing applications more than the relatively small contracts that most smart contract languages seem to target
2022-04-19 08:27:46	Axman6	I'd definitely recommend going through the Daml tutorial, I had a lot of fun doing it.
2022-04-19 08:27:47	sm	I see.. intended to run off chain, then ?
2022-04-19 08:28:46	Axman6	So, Daml is aimed at being ledger agnostic, it isn't written for a specific blockchain, and in fact their Canton system allows you to bridge multiple ledgers together
2022-04-19 08:29:05	sm	"Daml empowers developers to build, deploy, and run multi-party applications on a distributed ledger in days"
2022-04-19 08:29:26	Axman6	ignore the businessese =)
2022-04-19 08:29:43	sm	this is actually the clearest thing I've read so far :)
2022-04-19 08:30:13	sm	your comments excluded of course. Cool, thanks for the info
2022-04-19 08:32:09	Axman6	the videos on https://www.digitalasset.com/developers/learn should be more developer oriented. I honestly found doing the Daml tutorial was the easiest way to get a good idea of what it's all about. There's anice talk somewhere about how a doctor's office could use the Daml to facilitate payment for medical procedures involving the patient's insurance, their bank, etc. while maintain privacy of the medical data from the parties who don't need to know it
2022-04-19 08:35:55	→	kaph__ has joined #haskell
2022-04-19 08:35:56	sm	I found my way to https://docs.daml.com and https://www.digitalasset.com/developers/examples > Applications and Libraries
2022-04-19 08:36:26	sm	is there any publicly-visible real world application you know of ?
2022-04-19 08:37:13	sm	maybe some of these are
2022-04-19 08:37:20	Axman6	I'm not sure, being a contractor I don't see much of what goes on in the rest of the company
2022-04-19 08:38:10	←	kaph_ has quit (Ping timeout: 246 seconds)
2022-04-19 08:38:24	Axman6	trying to see if anyone has a good video introduction though
2022-04-19 08:38:52	←	mvk has quit (Ping timeout: 250 seconds)
2022-04-19 08:38:59	←	abastro has quit (Remote host closed the connection)
2022-04-19 08:40:06	→	abastro has joined #haskell
2022-04-19 08:40:21	Axman6	I wouldn't recommend jumping into applications without understanding the basics though, the whole template/contract/choice, consuming choices, disclosure etc are pretty new concepts and the example code won't make sense without understand what they mean
2022-04-19 08:40:29	←	abastro has quit (Remote host closed the connection)
2022-04-19 08:40:43	sm	I guess these are like simple (mostly) web apps, but distributed across multiple users, machines, and possibly blockchains, yet relatively easy to build with some correctness guarantees because of Daml
2022-04-19 08:42:01	→	abastro has joined #haskell
2022-04-19 08:42:03	Axman6	they might have web apps, but Daml is mostly agnostic of that. We use Scala (sadly) to turn the handle, so to speak. you need something external putting data into the system to actually have the application "run"
2022-04-19 08:43:49	Axman6	I've been recommended https://www.youtube.com/watch?v=AGxt4yQceXA (dev focused) and https://www.youtube.com/watch?v=ztFPc6GOtlE (higher level)
2022-04-19 08:44:24	→	mbuf has joined #haskell
2022-04-19 08:44:52	Axman6	There are some subtlties to the contract model that have some really big ramifications in how you design things, which can complicate designs a bit, but the result is much more robust
2022-04-19 08:45:27	sm	thanks, I just was taking a shot at understanding more of what this is without having to watch a video or do a tutorial 
2022-04-19 08:47:32	sm	my attention span vs their technical writing :)
2022-04-19 08:49:28	←	abastro has quit (Remote host closed the connection)
2022-04-19 08:51:17	→	tvandinther has joined #haskell
2022-04-19 08:52:07	tvandinther	Hi all. I am just starting out with Haskell, and I am trying to set up an IDE to work with it. I have tried following various guides online to setting things up but they're all either incomplete or outdated. Are there any up-to-date and complete guides you can recommend to get me set up with a good integrated environment? I'd prefer to use IntelliJ
2022-04-19 08:52:07	tvandinther	or Atom as the editor.
2022-04-19 08:53:25	glguy	tvandinther: the easiest to get working is vscode
2022-04-19 08:54:35	tvandinther	Does that have an integrated repl?
2022-04-19 08:57:12	←	[itchyjunk] has quit (Remote host closed the connection)
2022-04-19 08:57:38	→	inversed_ has joined #haskell
2022-04-19 08:57:51	←	inversed has quit (Ping timeout: 272 seconds)
2022-04-19 08:58:23	Axman6	it has an integrated terminal which can run ghci, is there anything you need beyond that?
2022-04-19 08:58:28	glguy	The repl gets started with the 'cabal repl' command. vscode has embedded terminal windows, that part doesn't have much to do with editor integration
2022-04-19 08:59:32	glguy	I've also got vim+coc+hls working; that wasn't too hard
2022-04-19 09:00:16	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-19 09:00:21	tvandinther	Cool, I can give it a go setting up VSCode, which extensions will I need? (I currently also have Stack installed)
2022-04-19 09:00:23	Axman6	VS code is definitely the way to go though if you're not a vim or emacs user, that's where most of the effort has gone with Haskell Language Server's integration, because it's definitely become the most popular IDE to work with Haskell on in the last few years
2022-04-19 09:01:08	Axman6	tvandinther: I would recommend going wiht using ghcup to manage GHC installs and haskell language server (this will be the default with the next version of the Haskell plugin for VS Code luckily)
2022-04-19 09:01:09	←	jao has quit (Ping timeout: 256 seconds)
2022-04-19 09:01:28	Axman6	you can use ghcup to install and manage stack too
2022-04-19 09:02:08	tvandinther	So I understand it, is GHCup a similar tool to something like NVM for node.js?
2022-04-19 09:03:10	Axman6	I'm not sure what NVM does, but it's a tool that manages GHC installations, as well as cabal-install (haskell package manager command), hls (the haskell language server for VS code etc.), stack, etc.
2022-04-19 09:03:24	Axman6	it makes switching between compilers really easy, which sometimes you'll need to do
2022-04-19 09:03:44	tvandinther	cool, yeah sounds useful. I'll install it now
2022-04-19 09:03:54	→	bitdex has joined #haskell
2022-04-19 09:04:06	Axman6	https://www.haskell.org/ghcup/
2022-04-19 09:05:16	Axman6	you can do it with out the curl | sh if you prefer (I would do curl > install.sh; less install.sh, and then sh install.sh personally)
2022-04-19 09:09:31	tvandinther	alright, I got ghcup installed on WSL2
2022-04-19 09:10:15	Axman6	nice - WSL should work ok, but be warned that development on windows can be a bit harder than *nix system. I think WSL should be fine though
2022-04-19 09:11:18	tvandinther	Yeah hopefully. Only issues I've seemed to have with it is IDE integration from a windows installation across to tools installed on WSL. But VS Code supposedly has that sorted.
2022-04-19 09:11:27	tvandinther	What's the next step?
2022-04-19 09:11:41	Axman6	fire up VS code, install the Haskell plugin
2022-04-19 09:13:14	tvandinther	Cool, got that now.
2022-04-19 09:14:39	Axman6	not sure what the best next step is - possible running `stack new MyNewProject simple` somewhere you want your code to be, then opening that folder in VS code (you can also use `cabal init -i` to make a cabal project without stack)
2022-04-19 09:16:47	tvandinther	Looks good. I guess from here my main 2 questions are 1) How do I run this from the VS Code as opposed to using the command line, and 2) How do I open a REPL terminal which loads my current project
2022-04-19 09:17:06	Axman6	once you have a haskell project, opening a .hs file should let you hover over things and get their types, and I think ctrl clicking (or something, I don't use windows) should take you to definitions if they're in your project
2022-04-19 09:17:58	Axman6	I don't think there's any integration that makes a new Haskell project in VS Code itself (would be a good plugin feature request).
2022-04-19 09:18:34	Axman6	I usually just use the built in terminal and run cabal repl. for stack it would be stack repl I think. Stack might have the ability to reload on save too, I can't remember
2022-04-19 09:19:28	tvandinther	ok yeah I see. So once I'm in the cabal repl, any time I save a file, the REPL will reload that file into it?
2022-04-19 09:19:51	Axman6	no
2022-04-19 09:20:03	maerwald[m]	tvandinther: https://www.haskell.org/ghcup/steps/
2022-04-19 09:20:14	maerwald[m]	There is an introduction 
2022-04-19 09:20:22	Axman6	maerwald[m]++
2022-04-19 09:20:29	Axman6	maerwald++
2022-04-19 09:20:43	Axman6	(just to make sure lambdabot's karma goes to the right place!)
2022-04-19 09:21:08	tvandinther	Thank you for that link
2022-04-19 09:21:33	←	wroathe has quit (Ping timeout: 256 seconds)
2022-04-19 09:21:40	Axman6	definitely a better idea to read all the docs than listen to me :P
2022-04-19 09:21:59	←	renzhi has quit (Ping timeout: 240 seconds)
2022-04-19 09:22:08	tvandinther	So as far as IDE features go with VS Code, it's just the syntax highlighting and type information. The rest of the workflow is done through the terminal, is that correct?
2022-04-19 09:22:16	tvandinther	You've been very helpful
2022-04-19 09:22:44	Axman6	Haskell language server does a lot more than that, it runs hlint for you to give hints, and it can even write your code for you 
2022-04-19 09:24:15	Axman6	https://haskell-language-server.readthedocs.io/en/latest/features.html covers them
2022-04-19 09:24:16	tvandinther	Nice, I suppose if nothing else needs configuration I will just have a play with what I've got here.
2022-04-19 09:28:33	←	RevoGen has quit (Remote host closed the connection)
2022-04-19 09:28:50	→	RevoGen has joined #haskell
2022-04-19 09:29:09	Axman6	tvandinther: if you've got it working, feel free to stick around and ask questions
2022-04-19 09:30:22	tvandinther	Thanks for the help Axman. I will certainly drop any questions that I am stuck with. For now I'm quite new that I'll go through some of the exercises on exercism.org and read through learnyouahaskell.com
2022-04-19 09:30:39	tvandinther	I'm very new to functional programming :)
2022-04-19 09:30:40	Axman6	good plan
2022-04-19 09:31:31	Axman6	have fun learning how to write the fibonacci sequence in many different ways!
2022-04-19 09:31:55	tvandinther	I look forward to having difficulty with fizzbuzz once again.
2022-04-19 09:32:12	tvandinther	Although tbh, haskell makes that one look easy with pattern matched function bodies
2022-04-19 09:33:21	zzz	tvandinther: you should watch this https://www.youtube.com/watch?v=VUhlNx_-wYk
2022-04-19 09:34:33	→	cdman has joined #haskell
2022-04-19 09:34:33	←	cdman has quit (Changing host)
2022-04-19 09:34:33	→	cdman has joined #haskell
2022-04-19 09:34:59	←	cdman has quit (Client Quit)
2022-04-19 09:35:54	⚡	Axman6 is reminded of http://www.willamette.edu/~fruehr/haskell/evolution.html
2022-04-19 09:36:00	→	cdman has joined #haskell
2022-04-19 09:36:00	←	cdman has quit (Changing host)
2022-04-19 09:36:00	→	cdman has joined #haskell
2022-04-19 09:41:32	→	benin has joined #haskell
2022-04-19 09:41:57	zzz	i hadn't thought of that one since i couldn't understand most of it
2022-04-19 09:42:11	zzz	nice throwback
2022-04-19 09:44:00	←	Macbethwin has quit (Remote host closed the connection)
2022-04-19 09:44:00	←	chargen has quit (Remote host closed the connection)
2022-04-19 09:44:19	→	Macbethwin has joined #haskell
2022-04-19 09:44:20	→	chargen has joined #haskell
2022-04-19 09:44:56	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-19 09:45:37	Axman6	I haven't watched all that video... but is it going to just be lambda calculus in Ruby?
2022-04-19 09:47:09	→	merijn has joined #haskell
2022-04-19 09:48:18	←	motherfsck has quit (Ping timeout: 276 seconds)
2022-04-19 09:49:38	→	bitdex has joined #haskell
2022-04-19 09:52:02	←	jakalx has left #haskell (Error from remote client)
2022-04-19 09:54:27	→	jakalx has joined #haskell
2022-04-19 09:54:34	tvandinther	Should the syntax highlighting in vs code differentiate functions from values? Although I know technically functions can be values but I'm getting a lot of white text which is a little hard to differentiate
2022-04-19 09:55:10	tvandinther	to be more precise, differentiating functions from the parameters
2022-04-19 10:03:05	→	motherfsck has joined #haskell
2022-04-19 10:06:09	→	takuan has joined #haskell
2022-04-19 10:10:33	←	motherfsck has quit (Quit: quit)
2022-04-19 10:18:53	←	zebrag has quit (Quit: Konversation terminated!)
2022-04-19 10:22:06	←	merijn has quit (Ping timeout: 276 seconds)
2022-04-19 10:41:08	tvandinther	How do I use the `fromListWith` function? It says it is out of scope but I am unsure how to import it
2022-04-19 10:43:08	tvandinther	I want the one from the map module
2022-04-19 10:44:32	Cale	tvandinther: It would probably be good if it distinguished the value being defined from other variables, regardless of whether it was a function.
2022-04-19 10:44:47	←	cdman has quit (Remote host closed the connection)
2022-04-19 10:45:20	→	cdman has joined #haskell
2022-04-19 10:45:20	←	cdman has quit (Changing host)
2022-04-19 10:45:20	→	cdman has joined #haskell
2022-04-19 10:45:54	Cale	import Data.Map qualified as Map
2022-04-19 10:46:02	Cale	Map.fromListWith ...
2022-04-19 10:46:10	Cale	oops
2022-04-19 10:46:16	Cale	import qualified Data.Map as Map
2022-04-19 10:48:22	Cale	You may alongside that want to also have an import like import Data.Map (Map) so that you don't have to qualify Map in types.
2022-04-19 10:49:52	←	whatsupdoc has quit (Quit: Connection closed for inactivity)
2022-04-19 10:54:50	←	chargen has quit (Remote host closed the connection)
2022-04-19 10:55:10	→	chargen has joined #haskell
2022-04-19 11:05:19	→	Guest34 has joined #haskell
2022-04-19 11:05:31	←	Guest34 has quit (Client Quit)
2022-04-19 11:06:25	→	abhixec has joined #haskell
2022-04-19 11:08:42	←	hgolden has quit (Remote host closed the connection)
2022-04-19 11:10:13	→	hgolden has joined #haskell
2022-04-19 11:12:31	←	Me-me has quit (Ping timeout: 246 seconds)
2022-04-19 11:13:17	←	geekosaur has quit (Remote host closed the connection)
2022-04-19 11:14:48	→	Me-me has joined #haskell
2022-04-19 11:15:19	→	geekosaur has joined #haskell
2022-04-19 11:15:49	→	motherfsck has joined #haskell
2022-04-19 11:15:50	←	chargen has quit (Quit: Leaving)
2022-04-19 11:17:12	←	Macbethwin has quit (Quit: Leaving)
2022-04-19 11:17:42	→	Maxdamantus has joined #haskell
2022-04-19 11:19:03	←	hgolden has quit (Remote host closed the connection)
2022-04-19 11:19:26	→	odnes has joined #haskell
2022-04-19 11:26:17	←	Me-me has quit (Changing host)
2022-04-19 11:26:17	→	Me-me has joined #haskell
2022-04-19 11:29:47	→	hgolden has joined #haskell
2022-04-19 11:33:47	→	yauhsien has joined #haskell
2022-04-19 11:36:41	←	jerry99 has quit (Quit: CGI:IRC (Session timeout))
2022-04-19 11:37:05	←	statusbot has quit (Remote host closed the connection)
2022-04-19 11:37:19	→	statusbot has joined #haskell
2022-04-19 11:38:48	←	yauhsien has quit (Ping timeout: 276 seconds)
2022-04-19 11:39:19	→	mikoto-chan has joined #haskell
2022-04-19 11:42:54	→	phma_ has joined #haskell
2022-04-19 11:44:03	←	phma has quit (Read error: Connection reset by peer)
2022-04-19 11:45:05	←	werneta has quit (Quit: Lost terminal)
2022-04-19 11:48:13	←	dwt_ has quit (Ping timeout: 246 seconds)
2022-04-19 11:50:48	→	dwt_ has joined #haskell
2022-04-19 11:53:45	←	mikoto-chan has quit (Ping timeout: 276 seconds)
2022-04-19 11:54:05	→	_ht has joined #haskell
2022-04-19 11:57:16	→	yauhsien has joined #haskell
2022-04-19 12:03:31	→	dhouthoo has joined #haskell
2022-04-19 12:07:08	→	machinedgod has joined #haskell
2022-04-19 12:09:14	→	fendor has joined #haskell
2022-04-19 12:11:20	→	[itchyjunk] has joined #haskell
2022-04-19 12:12:06	→	Wstfgl0 has joined #haskell
2022-04-19 12:12:24	←	Me-me has quit (Read error: Connection reset by peer)
2022-04-19 12:12:53	ℹ	Wstfgl0 is now known as Me-me
2022-04-19 12:13:55	→	chele has joined #haskell
2022-04-19 12:14:51	←	Me-me has quit (Changing host)
2022-04-19 12:14:51	→	Me-me has joined #haskell
2022-04-19 12:16:57	Axman6	tvandinther: you might want to try switching your VS Code theme or installing new ones (through the same extensions tab you installed the Haskell plugin - see https://vscodethemes.com to easily fine ones you like). Some do a much better job than others differentiating between differents of sorts of lexemes than others - I particularly like the Monokai theme for HAskell in VS Code because it differentiated between more things than most themes
2022-04-19 12:17:33	→	merijn has joined #haskell
2022-04-19 12:18:32	Axman6	once you have a few themes you like installed, hit ... whatever the equivalent of cmd-shift-p is, tyupe in "theme" and select Preferences: Color Theme. That'll give you a list of themes which will change as you move up and down them live so you can see what your actual code looks like
2022-04-19 12:19:19	←	kaph__ has quit (Ping timeout: 240 seconds)
2022-04-19 12:20:51	→	acidjnk has joined #haskell
2022-04-19 12:21:30	→	akegalj has joined #haskell
2022-04-19 12:22:14	→	julian has joined #haskell
2022-04-19 12:26:32	←	RevoGen has quit (Remote host closed the connection)
2022-04-19 12:27:57	←	_ht has quit (Remote host closed the connection)
2022-04-19 12:29:50	→	gehmehgeh has joined #haskell
2022-04-19 12:31:30	→	Wstfgl0 has joined #haskell
2022-04-19 12:31:37	←	Me-me has quit (Read error: Connection reset by peer)
2022-04-19 12:31:44	→	lortabac has joined #haskell
2022-04-19 12:33:19	←	shriekingnoise has quit (Quit: Quit)
2022-04-19 12:33:43	ℹ	Wstfgl0 is now known as Me-me
2022-04-19 12:34:58	Axman6	zzz: enjoying this Ruby video, even if I know everything that's going on it's still fun
2022-04-19 12:46:18	→	coot has joined #haskell
2022-04-19 12:46:22	←	daniii_ has quit ()
2022-04-19 12:47:09	→	romesrf has joined #haskell
2022-04-19 12:49:36	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-19 12:50:16	←	yauhsien has quit (Remote host closed the connection)
2022-04-19 12:50:54	→	bitdex has joined #haskell
2022-04-19 12:52:33	→	yauhsien has joined #haskell
2022-04-19 12:54:04	tvandinther	Thanks Axman6
2022-04-19 12:54:21	←	julian has quit (Remote host closed the connection)
2022-04-19 12:55:02	→	julian has joined #haskell
2022-04-19 12:57:12	→	bahamas has joined #haskell
2022-04-19 12:57:27	←	yauhsien has quit (Ping timeout: 256 seconds)
2022-04-19 12:59:47	←	Sgeo has quit (Read error: Connection reset by peer)
2022-04-19 13:00:24	→	kaph has joined #haskell
2022-04-19 13:00:42	romesrf	o/
2022-04-19 13:01:11	→	anomal has joined #haskell
2022-04-19 13:02:18	→	abastro has joined #haskell
2022-04-19 13:02:19	Axman6	o/
2022-04-19 13:13:07	→	zeenk has joined #haskell
2022-04-19 13:14:05	→	mastarija has joined #haskell
2022-04-19 13:16:37	→	chomwitt has joined #haskell
2022-04-19 13:18:15	→	yauhsien has joined #haskell
2022-04-19 13:22:54	→	michalz has joined #haskell
2022-04-19 13:24:02	→	kamyar has joined #haskell
2022-04-19 13:25:48	→	kamyar71 has joined #haskell
2022-04-19 13:25:57	kamyar71	Hello there
2022-04-19 13:26:00	kamyar71	please check this
2022-04-19 13:26:00	kamyar71	https://zerobin.net/?70b967b7e82b889b#jwW2a5GSS7iAHhiJuIzRtLedFfdTcdYXUtJKIDYD/rI=
2022-04-19 13:26:13	kamyar71	Help me fix the problem
2022-04-19 13:26:28	kamyar71	here: evaluate (PLAtomic p) f = f p
2022-04-19 13:28:56	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-19 13:29:27	←	kamyar has quit (Quit: Leaving...)
2022-04-19 13:29:42	kamyar71	Anyone can help please?
2022-04-19 13:30:46	ℹ	phma_ is now known as phma
2022-04-19 13:30:53	←	jmdaemon has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-19 13:31:00	←	nahcetan has quit (Read error: Connection reset by peer)
2022-04-19 13:31:25	mastarija	kamyar71, what exactly is the problem?
2022-04-19 13:31:42	kamyar71	 Couldn't match expected type ‘a1’ with actual type ‘a’
2022-04-19 13:31:55	→	nahcetan has joined #haskell
2022-04-19 13:33:27	mastarija	Just a sec
2022-04-19 13:35:47	mastarija	kamyar71, your instance is too general
2022-04-19 13:36:07	kamyar71	How can I fix?
2022-04-19 13:36:10	→	hsw has joined #haskell
2022-04-19 13:36:10	mastarija	why are you using a class instead of just implementing the evaluate function?
2022-04-19 13:36:33	←	foul_owl has quit (Ping timeout: 256 seconds)
2022-04-19 13:36:49	kamyar71	Since I want to be able to create multiple instances but with the same parts
2022-04-19 13:37:15	mastarija	I recommend you just use plain functions
2022-04-19 13:37:24	kamyar71	OK thanks letme try
2022-04-19 13:37:27	mastarija	There's no difference other than naming
2022-04-19 13:38:19	mastarija	kamyar71, https://zerobin.net/?a9aa438e3e9c81b0#cahom5dSwWuQS1GvmNAtg0w0ifXXiNVsX30/3FtR6DI=
2022-04-19 13:39:09	kamyar71	But the wanted thing is just one evaluate function
2022-04-19 13:39:15	kamyar71	there are more types like PLSentence
2022-04-19 13:39:32	←	redb has quit (Ping timeout: 260 seconds)
2022-04-19 13:40:00	mastarija	For every instance you create a new function, it's just that they have the same name
2022-04-19 13:40:09	mastarija	This can cause type inference problems later
2022-04-19 13:40:46	mastarija	Anyway, in your case you had a class `class Interpretation p where evaluate :: p -> (a -> Bool) -> Bool`
2022-04-19 13:40:47	→	ccntrq has joined #haskell
2022-04-19 13:41:33	mastarija	however, you have a variable `a` in your `evaluate` type signature
2022-04-19 13:42:55	mastarija	And compiler doesn't know what that `a` is in relation to `p` so it can't match your `a` from `PLSentence a` to that `a` in `a -> Bool`
2022-04-19 13:44:48	kamyar71	Yes I know but I did not find any better way
2022-04-19 13:44:58	kamyar71	I do not want to use multi parameter class feature
2022-04-19 13:45:04	mastarija	You could use multiparam
2022-04-19 13:45:16	mastarija	Yes... not gonna work without that
2022-04-19 13:45:29	mastarija	But type classes aren't needed in this case
2022-04-19 13:45:50	mastarija	Does anyone know where I can find a detailed explanation on how to read inference rules? I did find some sources, but that is in relation to pure logic. I'm more interested in understanding symbol conventions in the context of programming languages.
2022-04-19 13:47:01	mastarija	I kind of understand what's going on, but it's never explicitly explained what certain symbols mean. They are just "presented" and I'm supposed to pick it up through osmosis or something.
2022-04-19 13:48:38	mastarija	Like, what's `Γ(x) = v | Γ ⊢ x ⇓ v` supposed to mean?
2022-04-19 13:48:53	mastarija	Or rather, how am I supposed to read that?
2022-04-19 13:49:24	mastarija	If there's v assigned to x in context Gamma, then x evaluates to v in context Gamma?
2022-04-19 13:49:59	mastarija	Also, I'm not sure what those parentheses around x mean.
2022-04-19 13:50:31	abastro	I do not have knowledge on this other than my uni class on Proglangs, but I think the meaning should be dependent on each paper.
2022-04-19 13:50:45	abastro	Usually papers begin with defining what they mean with these syntax
2022-04-19 13:50:55	→	foul_owl has joined #haskell
2022-04-19 13:51:16	→	Midjak has joined #haskell
2022-04-19 13:51:19	abastro	Perhaps it was mentioned in papers this paper is referring to
2022-04-19 13:51:37	abastro	Never seen that `|` part, personally
2022-04-19 13:52:47	mastarija	That's just a horizontal dividing line separating premises from the conclusions
2022-04-19 13:53:00	mastarija	Adapted for our plain text experience :)
2022-04-19 13:53:49	mastarija	abastro, I've found some Harward lectures from CS153 so I'm looking through that
2022-04-19 13:54:03	mastarija	but that same notation is everywhere
2022-04-19 13:54:37	mastarija	with gamma and delta environments, where gamma is usually for types if I've figured it out correctly
2022-04-19 13:56:19	abastro	Oh in that case, I guess it makes sense
2022-04-19 13:56:35	abastro	I think this is for evaluation, tho I might be mistaken
2022-04-19 13:56:57	abastro	When the environment has mapped `x` to `v`, under that envionment, `x` evaluates to v.
2022-04-19 13:57:13	mastarija	abastro, yes, that is for evaluation from my understanding
2022-04-19 13:57:32	mastarija	but my problem is same as yours : "I might be mistaken"
2022-04-19 13:57:50	abastro	Haha
2022-04-19 13:57:51	mastarija	and I can't find any resource that explicitly states what this means
2022-04-19 13:57:56	abastro	Yea, I mean
2022-04-19 13:58:01	abastro	I learned similar expression
2022-04-19 13:58:22	→	kuribas has joined #haskell
2022-04-19 13:58:42	abastro	Never seen ⇓ being used instead of =>
2022-04-19 13:58:59	abastro	In this way*
2022-04-19 13:59:11	abastro	Tho, considering how it reads, I think that one should be evaluation
2022-04-19 13:59:55	mastarija	Yes, I've found => in another source
2022-04-19 13:59:57	→	werneta has joined #haskell
2022-04-19 14:00:23	mastarija	I mean, what's the point if everyone just writes things any way they like.
2022-04-19 14:00:24	abastro	Indeed
2022-04-19 14:00:39	abastro	Agreed!
2022-04-19 14:01:57	mastarija	abastro, also, when I'm manually trying to type check a piece of code, I'm assuming I'm building the derivation tree from bottom up
2022-04-19 14:02:20	mastarija	At the bottom is my whole piece of code that I'm trying to "check", and from there I build my premises?
2022-04-19 14:02:33	mastarija	Or is it other way around?
2022-04-19 14:02:34	abastro	Yep, conceptually. (Not always though, I think)
2022-04-19 14:02:40	mastarija	Goddamnit
2022-04-19 14:02:47	abastro	Yea you start from bottom *usually*
2022-04-19 14:03:02	mastarija	With the whole expression, which I then try to decompose
2022-04-19 14:03:04	abastro	Tho rules might be complicated enough so that you sometimes have to.. meh
2022-04-19 14:03:25	mastarija	Ok, so it's handwawy
2022-04-19 14:03:38	mastarija	*handwavy
2022-04-19 14:04:30	→	redb has joined #haskell
2022-04-19 14:04:38	abastro	At least HM type system allows you to build tree from bottom to up
2022-04-19 14:04:52	abastro	Dividing into pieces, and then at the top you decide the type
2022-04-19 14:05:03	abastro	Then you come back down combining the types
2022-04-19 14:05:15	abastro	Oh wait, perhaps you still need variables to unify with HM. hmm
2022-04-19 14:07:19	lortabac	mastarija: "Does anyone know where I can find..." -> Types and Programming Languages by Pierce is a good introduction to the topic
2022-04-19 14:09:18	→	frost has joined #haskell
2022-04-19 14:09:27	←	redb has quit (Ping timeout: 272 seconds)
2022-04-19 14:10:35	→	raehik has joined #haskell
2022-04-19 14:15:13	→	gurkenglas has joined #haskell
2022-04-19 14:15:17	←	mastarija has quit (Quit: Leaving)
2022-04-19 14:15:47	←	eggplantade has quit (Remote host closed the connection)
2022-04-19 14:17:57	→	aman has joined #haskell
2022-04-19 14:18:47	←	kamyar71 has quit (Quit: Client closed)
2022-04-19 14:21:42	→	redb has joined #haskell
2022-04-19 14:23:36	←	azimut has quit (Ping timeout: 240 seconds)
2022-04-19 14:23:45	→	krappix has joined #haskell
2022-04-19 14:25:34	→	azimut has joined #haskell
2022-04-19 14:26:10	←	x_kuru has quit (Read error: Connection reset by peer)
2022-04-19 14:26:30	←	redb has quit (Ping timeout: 276 seconds)
2022-04-19 14:27:30	→	mastarija has joined #haskell
2022-04-19 14:28:33	→	xkuru has joined #haskell
2022-04-19 14:28:55	→	Unicorn_Princess has joined #haskell
2022-04-19 14:30:09	←	Artem[m] has quit (Quit: You have been kicked for being idle)
2022-04-19 14:30:15	←	hughjfchen[m] has quit (Quit: You have been kicked for being idle)
2022-04-19 14:31:37	←	bahamas has quit (Ping timeout: 272 seconds)
2022-04-19 14:37:31	←	rembo10 has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-19 14:38:26	→	rembo10 has joined #haskell
2022-04-19 14:40:04	←	krappix has quit (Ping timeout: 250 seconds)
2022-04-19 14:40:13	→	bitdex has joined #haskell
2022-04-19 14:42:13	→	ubert has joined #haskell
2022-04-19 14:54:00	→	coot_ has joined #haskell
2022-04-19 14:54:57	→	titi has joined #haskell
2022-04-19 14:55:28	→	redb has joined #haskell
2022-04-19 14:57:03	←	coot has quit (Ping timeout: 276 seconds)
2022-04-19 14:59:04	←	xkuru has quit (Read error: Connection reset by peer)
2022-04-19 14:59:37	←	titi has quit (Remote host closed the connection)
2022-04-19 14:59:39	←	redb has quit (Ping timeout: 240 seconds)
2022-04-19 15:01:36	←	acidjnk has quit (Ping timeout: 248 seconds)
2022-04-19 15:10:17	abastro	Is there a safe replacement for `zip l (tail l)`?
2022-04-19 15:10:44	abastro	Like, the one which gives empty list or something
2022-04-19 15:12:08	→	nattiestnate has joined #haskell
2022-04-19 15:16:28	→	eggplantade has joined #haskell
2022-04-19 15:18:21	tomsmeding	abastro: `zip l (drop 1 l)`
2022-04-19 15:20:15	←	abastro has quit (Ping timeout: 256 seconds)
2022-04-19 15:21:06	←	eggplantade has quit (Ping timeout: 276 seconds)
2022-04-19 15:21:07	←	nattiestnate has quit (Quit: WeeChat 3.5)
2022-04-19 15:21:13	tomsmeding	mastarija: perhaps https://www.cs.uu.nl/docs/vakken/mcpd/2021/website/notes/Semantics_notes.pdf together with section 1.3 of https://www.cs.uu.nl/docs/vakken/mcpd/2021/website/notes/MinHs_notes.pdf ?
2022-04-19 15:23:56	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-19 15:25:05	←	yauhsien has quit (Remote host closed the connection)
2022-04-19 15:27:37	←	deadmarshal_ has quit (Ping timeout: 256 seconds)
2022-04-19 15:28:46	tomsmeding	abastro[m]: mastarija: that ⇓  for evaluation is super common and indicates big-step semantics
2022-04-19 15:28:49	→	redb has joined #haskell
2022-04-19 15:28:50	←	phma has quit (Read error: Connection reset by peer)
2022-04-19 15:28:57	tomsmeding	it is indeed read as "evaluates to" with low precedence
2022-04-19 15:29:50	→	phma has joined #haskell
2022-04-19 15:30:03	tomsmeding	horizontal arrows are generally used for small-step semantics (small-step means "single step at a time", non-recursive, single atomic operation; big-step means basically tree-walking interpreter as you'd naturally write in haskell over an AST)
2022-04-19 15:31:36	→	littlebobeep has joined #haskell
2022-04-19 15:32:39	→	CiaoSen has joined #haskell
2022-04-19 15:33:17	←	redb has quit (Ping timeout: 256 seconds)
2022-04-19 15:40:16	←	xff0x_ has quit (Ping timeout: 246 seconds)
2022-04-19 15:47:56	→	Null_A_ has joined #haskell
2022-04-19 15:48:51	→	pretty_dumm_guy has joined #haskell
2022-04-19 15:49:05	←	pretty_dumm_guy has quit (Client Quit)
2022-04-19 15:49:11	←	Null_A has quit (Ping timeout: 250 seconds)
2022-04-19 15:50:41	abastro[m]	tomsmeding: Oh I was dumb..
2022-04-19 15:50:57	abastro[m]	I forgot about drop 1
2022-04-19 15:50:59	abastro[m]	Btw
2022-04-19 15:51:09	abastro[m]	In my uni, the notation was inverted.
2022-04-19 15:51:25	abastro[m]	=> was used for big step semantics
2022-04-19 15:51:57	abastro[m]	 ⇓  was used for small step semantics
2022-04-19 15:52:16	abastro[m]	Which was why I was somewhat confused.
2022-04-19 15:52:38	tomsmeding	O.o
2022-04-19 15:52:40	→	pretty_dumm_guy has joined #haskell
2022-04-19 15:53:43	←	econo has quit (Quit: Connection closed for inactivity)
2022-04-19 15:54:31	←	tvandinther has quit (Quit: Client closed)
2022-04-19 15:56:56	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-19 15:58:42	→	bitdex has joined #haskell
2022-04-19 16:02:59	→	redb has joined #haskell
2022-04-19 16:06:16	→	Lord_of_Life_ has joined #haskell
2022-04-19 16:06:18	→	tromp has joined #haskell
2022-04-19 16:06:43	←	Lord_of_Life has quit (Ping timeout: 256 seconds)
2022-04-19 16:06:59	←	redb has quit (Ping timeout: 240 seconds)
2022-04-19 16:09:01	ℹ	Lord_of_Life_ is now known as Lord_of_Life
2022-04-19 16:09:32	←	odnes has quit (Remote host closed the connection)
2022-04-19 16:09:54	→	odnes has joined #haskell
2022-04-19 16:10:56	⚡	abastro[m] uploaded an image: (120KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/CduWXAxUUmHTibMxijZbeyVC/Screenshot_20220419-194024_Drive.jpg >
2022-04-19 16:11:41	tomsmeding	interesting
2022-04-19 16:11:53	abastro[m]	tomsmeding: I guess I was taught wrong
2022-04-19 16:11:57	tomsmeding	¯\_(ツ)_/¯
2022-04-19 16:12:02	tomsmeding	it's just notation in the end
2022-04-19 16:12:02	←	kaph has quit (Read error: Connection reset by peer)
2022-04-19 16:12:07	←	theproffesor has quit (Ping timeout: 246 seconds)
2022-04-19 16:12:16	abastro[m]	By a stubborm professor
2022-04-19 16:12:17	abastro[m]	Oh.
2022-04-19 16:12:38	tomsmeding	maybe the common notation changed over time, or customs differ between sub-communities within theoretical CS?
2022-04-19 16:12:42	→	theproffesor has joined #haskell
2022-04-19 16:12:49	←	merijn has quit (Ping timeout: 246 seconds)
2022-04-19 16:13:25	abastro[m]	Yep, I guess
2022-04-19 16:14:23	tomsmeding	I mean, people get all flame-war about notation, but in the end it's just notation :p
2022-04-19 16:14:42	tomsmeding	it's good and useful to have a single standard notation for stuff though
2022-04-19 16:16:32	abastro[m]	Well I remembered the small step thing wrong, '->' was used in the class
2022-04-19 16:16:47	abastro[m]	The downward arrow is used for continuation-involving evaluation
2022-04-19 16:17:08	⚡	abastro[m] uploaded an image: (235KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/tuCHZAsDZrjMxrrKMtJAzSUo/Screenshot_20220419-194541_Drive.jpg >
2022-04-19 16:18:08	abastro[m]	Likely wanted to use fancy arrows at one place
2022-04-19 16:18:27	abastro[m]	(I disliked how the class was taught in scala btw)
2022-04-19 16:20:45	tomsmeding	ooh continuations
2022-04-19 16:21:05	tomsmeding	ah scala, maybe this is standard in the scala community? That's exactly my point, my custom is from the haskell community
2022-04-19 16:22:24	←	odnes has quit (Quit: Leaving)
2022-04-19 16:24:03	←	raym has quit (Quit: kernel update, rebooting...)
2022-04-19 16:25:35	→	raym has joined #haskell
2022-04-19 16:35:24	abastro[m]	Programming language semantics differ for scala community vs haskell community?
2022-04-19 16:35:25	abastro[m]	Wow
2022-04-19 16:36:38	→	redb has joined #haskell
2022-04-19 16:37:47	←	cdman has quit (Remote host closed the connection)
2022-04-19 16:40:16	→	deadmarshal_ has joined #haskell
2022-04-19 16:40:39	←	redb has quit (Ping timeout: 240 seconds)
2022-04-19 16:41:55	tomsmeding	programming language semantics _notation_
2022-04-19 16:42:19	abastro[m]	Aah
2022-04-19 16:42:21	tomsmeding	but I don't know, too lazy to check
2022-04-19 16:43:58	←	akegalj has quit (Ping timeout: 246 seconds)
2022-04-19 16:44:19	←	deadmarshal_ has quit (Ping timeout: 240 seconds)
2022-04-19 16:51:03	→	abastro has joined #haskell
2022-04-19 16:57:21	←	chele has quit (Remote host closed the connection)
2022-04-19 16:59:34	→	merijn has joined #haskell
2022-04-19 16:59:48	→	chele has joined #haskell
2022-04-19 17:00:46	←	CAT_S has quit (Ping timeout: 246 seconds)
2022-04-19 17:00:46	←	simeon has quit (Ping timeout: 246 seconds)
2022-04-19 17:01:02	→	DNH has joined #haskell
2022-04-19 17:01:16	←	Lears has quit (Remote host closed the connection)
2022-04-19 17:01:37	→	simeon has joined #haskell
2022-04-19 17:01:44	→	CAT_S has joined #haskell
2022-04-19 17:02:15	→	[Leary] has joined #haskell
2022-04-19 17:02:26	→	cdman has joined #haskell
2022-04-19 17:02:35	→	off^ has joined #haskell
2022-04-19 17:06:15	→	redb has joined #haskell
2022-04-19 17:08:19	→	kaph has joined #haskell
2022-04-19 17:09:25	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-19 17:10:34	←	redb has quit (Ping timeout: 246 seconds)
2022-04-19 17:11:53	→	yauhsien has joined #haskell
2022-04-19 17:13:05	→	MajorBiscuit has joined #haskell
2022-04-19 17:14:04	→	bahamas has joined #haskell
2022-04-19 17:17:00	←	yauhsien has quit (Ping timeout: 260 seconds)
2022-04-19 17:23:35	→	schuelermine has joined #haskell
2022-04-19 17:23:54	→	redb has joined #haskell
2022-04-19 17:24:16	schuelermine	Wouldn’t it (maybe) be a good idea to extend record syntax from constructors to arbitrary functions to allow named parameters?
2022-04-19 17:24:33	schuelermine	It seems like a natural and convenient extension of the syntax
2022-04-19 17:25:02	schuelermine	You could also allow defining defaults in the record parameters lazily
2022-04-19 17:25:20	schuelermine	This is used, for instance, in Nix, to great effect, to make smart “constructors”
2022-04-19 17:25:29	←	schuelermine has left #haskell
2022-04-19 17:28:12	←	redb has quit (Ping timeout: 260 seconds)
2022-04-19 17:28:36	geekosaur	bit late since they left, but I think most people consider record syntax a mistake
2022-04-19 17:39:41	abastro	Which record syntax?
2022-04-19 17:40:29	merijn	schuelermine[m]: I mean, you can just change your function to accept a record as input and get 100% of that functionality without any changes?
2022-04-19 17:40:43	merijn	geekosaur: Record syntax is fine, derived field selectors are a mistake
2022-04-19 17:40:56	merijn	All hail -XNoFieldSelectors
2022-04-19 17:41:01	abastro	derived field selectors?
2022-04-19 17:41:16	abastro	Oh you mean the autogenerated functions for each field of record?
2022-04-19 17:41:22	abastro	Obtaining that field from record
2022-04-19 17:41:30	merijn	abastro: The fact that "data Foo = Foo { bar :: Int }" generates a function "bar :: Foo -> Int"
2022-04-19 17:41:30	geekosaur	yes
2022-04-19 17:41:42	abastro	Yea, eww
2022-04-19 17:41:46	→	schuelermine has joined #haskell
2022-04-19 17:42:01	abastro	I also dislike it. Tho I guess it was good for brevity
2022-04-19 17:42:17	merijn	I say make NoFieldSelectors and NamedFieldPuns the default in Haskell Prime (ha! as if that'll happen)
2022-04-19 17:42:28	merijn	And then records are already a ton nicer
2022-04-19 17:42:50	abastro	NamedFieldPuns?
2022-04-19 17:42:53	schuelermine	you could use record syntax for map literals
2022-04-19 17:43:08	schuelermine	abastro: means you can pattern match by writing
2022-04-19 17:43:10	schuelermine	f { foo } = foo
2022-04-19 17:43:14	abastro	Eh
2022-04-19 17:43:18	abastro	Ehhhh
2022-04-19 17:43:21	merijn	Instead of having to write 
2022-04-19 17:43:24	abastro	I guess that is good for brevity
2022-04-19 17:43:32	merijn	'f Foo{foo = x} = x'
2022-04-19 17:43:36	merijn	Which, frankly, sucks
2022-04-19 17:43:41	abastro	Yea indeed, provides great brevity
2022-04-19 17:44:05	abastro	Oh right, with NoFieldSelectors those won't be shadowing the field selectors right?
2022-04-19 17:44:11	abastro	That was why I was concerned
2022-04-19 17:44:14	abastro	Hmmm
2022-04-19 17:44:16	schuelermine	'foo (Foo . bar) (\Foo {foo = foo} = foo)'
2022-04-19 17:45:06	←	abastro has quit (Quit: testing xmonad)
2022-04-19 17:46:44	schuelermine	oh god xmonad
2022-04-19 17:46:47	schuelermine	I just hoogled '(||*)' and it turns out xmonad provides a horrendous family of operators
2022-04-19 17:46:49	schuelermine	(****||*), (****||***), (***||*), (***||**), (**||*), (**||***), (*||*)
2022-04-19 17:51:35	←	benin has quit (Quit: The Lounge - https://thelounge.chat)
2022-04-19 17:52:25	schuelermine	Oh also puns means you can do `f foo = Foo { foo }` instead of `f foo = Foo { foo = foo }`
2022-04-19 17:53:47	→	abastro has joined #haskell
2022-04-19 17:54:04	←	schuelermine has quit (Quit: WeeChat 3.4.1)
2022-04-19 17:55:48	→	zincy has joined #haskell
2022-04-19 17:56:35	→	redb has joined #haskell
2022-04-19 17:56:36	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-19 17:59:41	←	frost has quit (Quit: Client closed)
2022-04-19 17:59:56	←	zincy has quit (Remote host closed the connection)
2022-04-19 18:00:23	←	chexum has quit (Remote host closed the connection)
2022-04-19 18:00:36	→	chexum has joined #haskell
2022-04-19 18:01:39	←	redb has quit (Ping timeout: 276 seconds)
2022-04-19 18:03:05	geekosaur	those are trying to visually indicate how they divide up the screen
2022-04-19 18:03:25	geekosaur	and yes, some parts of contrib are … interesting
2022-04-19 18:05:12	→	Pickchea has joined #haskell
2022-04-19 18:09:16	←	kjak has quit (Ping timeout: 260 seconds)
2022-04-19 18:09:31	ℹ	irc: disconnected from server
2022-04-19 18:45:52	→	oxide has joined #haskell
2022-04-19 18:45:52	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-19 18:45:52	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-19 18:45:52	ℹ	Channel #haskell: 703 nicks (1 op, 0 voices, 702 normals)
2022-04-19 18:45:52	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-19 18:45:52	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-19 18:47:21	→	mikoto-chan has joined #haskell
2022-04-19 18:47:31	→	redb has joined #haskell
2022-04-19 18:49:42	→	sprout has joined #haskell
2022-04-19 18:50:30	←	aeka has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-19 18:51:00	→	mastarija_ has joined #haskell
2022-04-19 18:53:44	→	Sgeo has joined #haskell
2022-04-19 18:53:46	→	akegalj_ has joined #haskell
2022-04-19 18:54:08	←	mastarija has quit (Ping timeout: 248 seconds)
2022-04-19 18:56:16	←	redb has quit (Ping timeout: 248 seconds)
2022-04-19 18:56:26	→	zebrag has joined #haskell
2022-04-19 19:03:22	→	tromp has joined #haskell
2022-04-19 19:07:03	→	redb has joined #haskell
2022-04-19 19:07:25	→	tomboy64 has joined #haskell
2022-04-19 19:07:32	←	akegalj_ has quit (Quit: leaving)
2022-04-19 19:08:03	←	Pickchea has quit (Ping timeout: 256 seconds)
2022-04-19 19:09:39	←	sprout has quit (Ping timeout: 240 seconds)
2022-04-19 19:10:40	←	vysn has quit (Ping timeout: 250 seconds)
2022-04-19 19:11:27	←	redb has quit (Ping timeout: 256 seconds)
2022-04-19 19:11:52	←	pavonia has quit (Read error: Connection reset by peer)
2022-04-19 19:12:59	←	MajorBiscuit has quit (Ping timeout: 240 seconds)
2022-04-19 19:14:09	→	sprout has joined #haskell
2022-04-19 19:14:53	←	aman has quit (Quit: aman)
2022-04-19 19:15:25	→	pavonia has joined #haskell
2022-04-19 19:16:24	→	MajorBiscuit has joined #haskell
2022-04-19 19:17:49	←	abastro has quit (Remote host closed the connection)
2022-04-19 19:19:00	tomsmeding	Why can I not use a [t| |] splice in a typed $$( ) splice?
2022-04-19 19:19:15	tomsmeding	s/[t| |] splice/[t| |] quote/
2022-04-19 19:20:38	→	wroathe has joined #haskell
2022-04-19 19:20:38	←	wroathe has quit (Changing host)
2022-04-19 19:20:38	→	wroathe has joined #haskell
2022-04-19 19:20:40	→	mastarija__ has joined #haskell
2022-04-19 19:23:51	→	aeka has joined #haskell
2022-04-19 19:23:58	←	jakalx has left #haskell (Error from remote client)
2022-04-19 19:23:59	←	mastarija_ has quit (Ping timeout: 240 seconds)
2022-04-19 19:24:27	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-19 19:25:00	geekosaur	looks like you need to use a typed quotation in a typed splice? [t|| ... ||]
2022-04-19 19:25:33	tomsmeding	geekosaur: [t|| doesn't exist, and wouldn't make sense, because it should return a Type and not an Exp
2022-04-19 19:25:39	→	Guest85 has joined #haskell
2022-04-19 19:26:02	tomsmeding	it would make sense if there was a phantom-typed wrapper TType or something, just like there is 'TExp a' around 'Exp'
2022-04-19 19:26:30	geekosaur	as of 9.2.2 it's Code Q Type, looks as if
2022-04-19 19:26:44	→	redb has joined #haskell
2022-04-19 19:26:53	tomsmeding	I'm on 9.2.2
2022-04-19 19:27:04	←	Guest85 has quit (Client Quit)
2022-04-19 19:27:53	→	jakalx has joined #haskell
2022-04-19 19:28:49	tomsmeding	geekosaur: 'Code Q Type' is ismomorphic (newtype wrapper) to 'Q (TExp Type)', which is isomorphic (newtype wrapper) to 'Q Exp'
2022-04-19 19:28:58	tomsmeding	it's an expression that returns a type at runtime, which is not what I want
2022-04-19 19:29:16	tomsmeding	(and not what [t| does, which is return the Type at compile-time)
2022-04-19 19:29:25	tomsmeding	I was confused for a while too :p
2022-04-19 19:29:56	tomsmeding	(but thanks for checking!)
2022-04-19 19:30:36	←	bahamas has quit (Ping timeout: 250 seconds)
2022-04-19 19:31:17	←	redb has quit (Ping timeout: 256 seconds)
2022-04-19 19:31:58	→	redb has joined #haskell
2022-04-19 19:32:59	←	mastarija__ has quit (Ping timeout: 240 seconds)
2022-04-19 19:34:41	→	mastarija__ has joined #haskell
2022-04-19 19:37:32	←	redb has quit (Ping timeout: 250 seconds)
2022-04-19 19:37:55	schuelermine[m]	Can you generate setters for only some properties using the lens library?
2022-04-19 19:40:36	Taneb	schuelermine[m]: you can use https://hackage.haskell.org/package/lens-5.1/docs/Control-Lens-TH.html#v:makeLensesFor makeLensesFor
2022-04-19 19:40:48	schuelermine[m]	thanks!
2022-04-19 19:41:12	→	Pickchea has joined #haskell
2022-04-19 19:42:59	←	wroathe has quit (Ping timeout: 240 seconds)
2022-04-19 19:43:11	←	stefan-_ has quit (Ping timeout: 256 seconds)
2022-04-19 19:44:48	→	haritz has joined #haskell
2022-04-19 19:44:48	←	haritz has quit (Changing host)
2022-04-19 19:44:48	→	haritz has joined #haskell
2022-04-19 19:48:57	→	kjak has joined #haskell
2022-04-19 19:49:03	→	tromp has joined #haskell
2022-04-19 19:52:09	maerwald	tomsmeding: is it time to move the playground out of beta?
2022-04-19 19:53:00	tomsmeding	maerwald: I haven't had time to work on it anymore in the past weeks sorry
2022-04-19 19:53:47	tomsmeding	maerwald: I feel like there are a few items in this list that would need to be fixed first https://github.com/tomsmeding/pastebin-haskell/blob/play/TODO.txt
2022-04-19 19:54:41	tomsmeding	in particular: https (I should do that), tab key, -N (I should do that), handshake, memory limit, SIGKILL
2022-04-19 19:55:17	tomsmeding	I will probably have some time coming weekend
2022-04-19 19:56:39	→	shriekingnoise has joined #haskell
2022-04-19 19:56:40	→	redb has joined #haskell
2022-04-19 19:56:48	→	stefan-_ has joined #haskell
2022-04-19 19:57:09	→	bontaq has joined #haskell
2022-04-19 19:58:00	maerwald	make it so :D
2022-04-19 19:58:05	tomsmeding	:p
2022-04-19 19:58:07	tomsmeding	I'll try
2022-04-19 19:58:41	maerwald	arjun wanted to work on the CSS, but I'm worried he ragequitted
2022-04-19 19:58:47	tomsmeding	lol
2022-04-19 19:58:51	tomsmeding	I can have a look at css too
2022-04-19 19:58:57	maerwald	well, css can only give you grief, so
2022-04-19 19:59:05	tomsmeding	I won't be as fast and won't be as """modern""" probably, but eh
2022-04-19 19:59:13	tomsmeding	perhaps I can use the same framework as I used for paste.tomsmeding.com
2022-04-19 19:59:20	maerwald	it's like harvesting asparagus
2022-04-19 19:59:23	tomsmeding	might be nice if the theme is consistent as well
2022-04-19 19:59:32	⚡	tomsmeding doesn't know anything about harvesting asparagus
2022-04-19 19:59:51	maerwald	bleeding hands
2022-04-19 20:01:54	←	gurkenglas has quit (Ping timeout: 276 seconds)
2022-04-19 20:03:47	schuelermine[m]	Do you have to explicitly declare your library as a dependency of your test suite in cabal?
2022-04-19 20:03:57	→	bahamas has joined #haskell
2022-04-19 20:04:23	tomsmeding	eys
2022-04-19 20:04:26	tomsmeding	schuelermine[m]: *yes
2022-04-19 20:04:51	schuelermine[m]	goodness
2022-04-19 20:04:56	schuelermine[m]	should I just write == <current-version>
2022-04-19 20:05:03	tomsmeding	just don't put a version
2022-04-19 20:05:18	tomsmeding	cabal will always use the version produced in the current package
2022-04-19 20:05:27	tomsmeding	so in fact a version annotation there is always redundant
2022-04-19 20:05:40	tomsmeding	(and cabal will even warn on that, IIRC)
2022-04-19 20:05:52	→	abastro has joined #haskell
2022-04-19 20:06:53	←	jlamothe has quit (Quit: leaving)
2022-04-19 20:08:42	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-19 20:08:55	→	Vajb has joined #haskell
2022-04-19 20:09:03	←	bahamas has quit (Ping timeout: 276 seconds)
2022-04-19 20:09:49	←	aeka has quit (Ping timeout: 256 seconds)
2022-04-19 20:10:09	→	vysn has joined #haskell
2022-04-19 20:10:23	→	bahamas has joined #haskell
2022-04-19 20:10:53	→	aeka has joined #haskell
2022-04-19 20:13:23	→	waleee has joined #haskell
2022-04-19 20:14:48	←	bahamas has quit (Ping timeout: 250 seconds)
2022-04-19 20:15:06	→	DNH has joined #haskell
2022-04-19 20:16:28	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-19 20:16:39	→	Vajb has joined #haskell
2022-04-19 20:19:04	←	geekosaur has quit (Quit: Leaving)
2022-04-19 20:19:08	←	CiaoSen has quit (Ping timeout: 250 seconds)
2022-04-19 20:19:41	→	dyeplexer has joined #haskell
2022-04-19 20:19:56	→	sibnull[m] has joined #haskell
2022-04-19 20:21:46	→	bitmapper has joined #haskell
2022-04-19 20:23:25	←	Pickchea has quit (Ping timeout: 256 seconds)
2022-04-19 20:24:17	→	jlamothe has joined #haskell
2022-04-19 20:25:31	←	hgolden has quit (Remote host closed the connection)
2022-04-19 20:26:30	→	geekosaur has joined #haskell
2022-04-19 20:27:07	→	hgolden has joined #haskell
2022-04-19 20:27:28	→	yauhsien has joined #haskell
2022-04-19 20:29:56	ℹ	Andrew is now known as AndrewYu
2022-04-19 20:30:02	→	_ht has joined #haskell
2022-04-19 20:32:29	←	yauhsien has quit (Ping timeout: 256 seconds)
2022-04-19 20:37:21	←	anomal has quit (Remote host closed the connection)
2022-04-19 20:38:39	←	kuribas has quit (Ping timeout: 240 seconds)
2022-04-19 20:42:36	←	MajorBiscuit has quit (Ping timeout: 240 seconds)
2022-04-19 20:42:45	→	jgeerds has joined #haskell
2022-04-19 20:43:01	→	MajorBiscuit has joined #haskell
2022-04-19 20:49:21	←	MajorBiscuit has quit (Ping timeout: 276 seconds)
2022-04-19 20:50:22	←	lortabac has quit (Quit: WeeChat 2.8)
2022-04-19 20:50:34	→	Natch has joined #haskell
2022-04-19 20:52:27	→	TCZ has joined #haskell
2022-04-19 20:52:59	←	TCZ has left #haskell (...)
2022-04-19 20:54:42	→	krappix has joined #haskell
2022-04-19 20:55:09	→	fciocan has joined #haskell
2022-04-19 20:55:46	←	xff0x_ has quit (Read error: Connection reset by peer)
2022-04-19 20:56:32	←	fciocan has quit (Client Quit)
2022-04-19 20:59:09	→	gurkenglas has joined #haskell
2022-04-19 21:00:40	→	abiss27 has joined #haskell
2022-04-19 21:03:15	→	bahamas has joined #haskell
2022-04-19 21:03:56	→	stackdroid18 has joined #haskell
2022-04-19 21:05:18	albet70	what's the join implement for Cont?
2022-04-19 21:05:18	←	krappix has quit (Ping timeout: 250 seconds)
2022-04-19 21:07:31	←	bahamas has quit (Ping timeout: 246 seconds)
2022-04-19 21:11:01	←	machinedgod has quit (Ping timeout: 256 seconds)
2022-04-19 21:11:40	kritzefitz	albet70: join is not a method, so it's the same for Cont as for any other monad.
2022-04-19 21:12:06	kritzefitz	namely: `join x =  x >>= id`
2022-04-19 21:14:27	→	zer0bitz has joined #haskell
2022-04-19 21:15:38	albet70	https://hackage.haskell.org/package/transformers-0.6.0.4/docs/src/Control.Monad.Trans.Cont.html#ContT
2022-04-19 21:16:05	←	ccntrq has quit (Remote host closed the connection)
2022-04-19 21:16:43	albet70	join is not required to make type as an instance of monad?
2022-04-19 21:17:08	←	abastro has quit (Remote host closed the connection)
2022-04-19 21:17:48	kritzefitz	No, join is defined in terms of `>>=` for all Monads.
2022-04-19 21:17:58	kritzefitz	i.e. it is not required.
2022-04-19 21:19:03	geekosaur	in Haskell the fundamental Monad operations are return and >>=
2022-04-19 21:19:19	geekosaur	not the mathematical version which uses join instead of >>=
2022-04-19 21:20:02	albet70	join (*) = \x -> x * x, so join (*) = (*) >>= id?
2022-04-19 21:20:44	albet70	> (*) >>= id $ 3
2022-04-19 21:20:46	lambdabot	 9
2022-04-19 21:21:15	albet70	> join (*) 3
2022-04-19 21:21:17	lambdabot	 9
2022-04-19 21:21:41	→	fciocan has joined #haskell
2022-04-19 21:21:42	→	eggplantade has joined #haskell
2022-04-19 21:21:49	←	eggplantade has quit (Remote host closed the connection)
2022-04-19 21:22:04	→	eggplantade has joined #haskell
2022-04-19 21:22:30	←	fciocan has quit (Client Quit)
2022-04-19 21:22:41	geekosaur	so if I recall correctly m >>= f is mathematically join (fmap f m), so given the functor laws you recover join by making f id
2022-04-19 21:24:50	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-19 21:25:44	→	Vajb has joined #haskell
2022-04-19 21:25:56	→	justsomeguy has joined #haskell
2022-04-19 21:27:46	albet70	> join (fmap (+1) [1..])
2022-04-19 21:27:47	lambdabot	 error:
2022-04-19 21:27:47	lambdabot	     • No instance for (Num [()]) arising from a use of ‘e_111’
2022-04-19 21:27:47	lambdabot	     • In the expression: e_111
2022-04-19 21:27:57	←	pavonia has quit (Quit: Bye!)
2022-04-19 21:29:09	→	abastro has joined #haskell
2022-04-19 21:29:20	→	lbseale has joined #haskell
2022-04-19 21:29:52	←	lbseale has quit (Client Quit)
2022-04-19 21:30:12	←	chele has quit (Remote host closed the connection)
2022-04-19 21:30:14	→	lbseale has joined #haskell
2022-04-19 21:32:19	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-19 21:32:48	→	Vajb has joined #haskell
2022-04-19 21:34:45	geekosaur	that looks wrong
2022-04-19 21:36:05	monochrom	Yeah, join m = m >>= id
2022-04-19 21:37:04	monochrom	More concretely m >>= \foo -> foo so it's like saying "obtain the procedure, now run it".
2022-04-19 21:37:04	abastro[m]	And I thought `[()] ~ Natural`
2022-04-19 21:37:31	albet70	m >>= id, id is same as return?
2022-04-19 21:37:34	←	ubert has quit (Remote host closed the connection)
2022-04-19 21:37:41	albet70	m >>= return?
2022-04-19 21:39:07	←	cdman has quit (Ping timeout: 272 seconds)
2022-04-19 21:39:53	monochrom	Ugh why would you think that? But no.
2022-04-19 21:39:54	←	eggplantade has quit (Remote host closed the connection)
2022-04-19 21:40:16	→	eggplantade has joined #haskell
2022-04-19 21:40:23	←	redb has quit (Ping timeout: 272 seconds)
2022-04-19 21:40:54	monochrom	If you work at the layperson level of "they are similar therefore they are equal" you will never get anywhere in STEM.
2022-04-19 21:41:11	albet70	> [3] >>= id
2022-04-19 21:41:12	lambdabot	 error:
2022-04-19 21:41:13	lambdabot	     • No instance for (Num [()]) arising from a use of ‘e_13’
2022-04-19 21:41:13	lambdabot	     • In the expression: e_13
2022-04-19 21:41:28	←	vysn has quit (Ping timeout: 250 seconds)
2022-04-19 21:41:49	←	merijn has quit (Ping timeout: 246 seconds)
2022-04-19 21:41:53	albet70	> (Just 3) >>= id
2022-04-19 21:41:55	lambdabot	 error:
2022-04-19 21:41:56	lambdabot	     • No instance for (Num (Maybe ())) arising from a use of ‘e_13’
2022-04-19 21:41:56	lambdabot	     • In the expression: e_13
2022-04-19 21:42:20	←	waleee has quit (Ping timeout: 250 seconds)
2022-04-19 21:43:27	geekosaur	it's join, you gave it nothing to join
2022-04-19 21:43:31	→	tzh has joined #haskell
2022-04-19 21:43:35	geekosaur	> Just (Just 3) >>= id
2022-04-19 21:43:36	lambdabot	 Just 3
2022-04-19 21:44:25	albet70	:t (Just 3) >>=
2022-04-19 21:44:26	lambdabot	error:
2022-04-19 21:44:27	lambdabot	    parse error (possibly incorrect indentation or mismatched brackets)
2022-04-19 21:44:51	albet70	:t (>>=) (Just 3)
2022-04-19 21:44:52	lambdabot	Num a => (a -> Maybe b) -> Maybe b
2022-04-19 21:45:50	←	FinnElija has quit (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
2022-04-19 21:45:50	→	finn_elija has joined #haskell
2022-04-19 21:45:50	ℹ	finn_elija is now known as FinnElija
2022-04-19 21:45:50	albet70	:t id
2022-04-19 21:45:51	lambdabot	a -> a
2022-04-19 21:47:14	←	fjmorazan has quit (Quit: fjmorazan)
2022-04-19 21:47:28	→	fjmorazan has joined #haskell
2022-04-19 21:49:04	←	jgeerds has quit (Ping timeout: 248 seconds)
2022-04-19 21:50:03	←	cheategg has quit (Quit: BitchX: the official IRC client of the 2004 Olympic Games)
2022-04-19 21:50:09	←	eggplantade has quit (Remote host closed the connection)
2022-04-19 21:51:13	←	fjmorazan has quit (Client Quit)
2022-04-19 21:51:28	→	bahamas has joined #haskell
2022-04-19 21:51:38	→	wootehfoot has joined #haskell
2022-04-19 21:51:54	→	fjmorazan has joined #haskell
2022-04-19 21:56:02	abastro[m]	Recognizing similarity as equality would not serve well in any context imho
2022-04-19 21:56:18	←	bahamas has quit (Ping timeout: 276 seconds)
2022-04-19 21:56:37	albet70	I wonder join Fix(Fix a) would get
2022-04-19 21:56:52	←	abastro has quit (Ping timeout: 246 seconds)
2022-04-19 21:57:07	→	jerry99 has joined #haskell
2022-04-19 22:00:15	→	redb has joined #haskell
2022-04-19 22:00:19	→	cheater has joined #haskell
2022-04-19 22:00:55	→	[itchyjunk] has joined #haskell
2022-04-19 22:03:49	→	bahamas has joined #haskell
2022-04-19 22:04:42	→	odnes has joined #haskell
2022-04-19 22:07:07	←	redb has quit (Ping timeout: 256 seconds)
2022-04-19 22:09:59	←	stackdroid18 has quit (Quit: hasta la vista... tchau!)
2022-04-19 22:10:45	→	deadmarshal_ has joined #haskell
2022-04-19 22:12:27	→	redb has joined #haskell
2022-04-19 22:14:04	EvanR	abastro[m], if we're talking strict data structures, then yeah they are bijective
2022-04-19 22:14:28	←	off^ has quit (Remote host closed the connection)
2022-04-19 22:15:09	→	stackdroid18 has joined #haskell
2022-04-19 22:17:32	EvanR	but strict data structures is a terrible default!
2022-04-19 22:18:22	janus	but how would stuff like 'zip [1..]' work if lists were strict?
2022-04-19 22:18:52	janus	what's the point of some weird mix? isn't it better to be consistent?
2022-04-19 22:21:03	EvanR	strict data fits into the framework haskell gives us, it has a flat definedness hierarchy. It's fine
2022-04-19 22:21:30	EvanR	i.e. wouldn't machine int work better if the bits were lazy? no
2022-04-19 22:21:44	EvanR	not in this century maybe
2022-04-19 22:25:01	←	slaydr has quit (Remote host closed the connection)
2022-04-19 22:25:35	janus	what do people mean when they say 'data'? if a record contains a function, is it data or not?
2022-04-19 22:27:59	EvanR	that leads to the next question, what do you mean by "function" xD
2022-04-19 22:28:19	EvanR	because a lambda expression is cromulent data
2022-04-19 22:28:34	janus	every time somebody says 'zero argument function' they get scolded...
2022-04-19 22:28:57	EvanR	yeah not those
2022-04-19 22:29:12	ℹ	cheater is now known as cheategg
2022-04-19 22:29:53	janus	what do you mean by 'cromulent'?
2022-04-19 22:29:56	EvanR	lol
2022-04-19 22:30:07	janus	you can't get Eq on functions, i think that is a big difference
2022-04-19 22:30:07	EvanR	I guess I deserve that
2022-04-19 22:30:59	janus	i don't mean to be daft, it's just that i don't understand whether there even is a technically correct definition or not
2022-04-19 22:31:00	EvanR	you think deciding the extensional equality of functions is bad? Let me introduce you to the value of real numbers
2022-04-19 22:31:17	EvanR	decidable equality is not a given, generally, it's a special power
2022-04-19 22:31:23	EvanR	only some data types can do it
2022-04-19 22:31:54	janus	Idris has the Dec type
2022-04-19 22:31:57	EvanR	another example is comparing two infinite lists
2022-04-19 22:31:59	janus	do you think that makes sense?
2022-04-19 22:32:14	EvanR	Dec is for talking about decidable equality so yes
2022-04-19 22:32:17	janus	they have strict data structures by default, no? so you consider that wrong?
2022-04-19 22:32:27	EvanR	rather, for decidable things
2022-04-19 22:33:44	EvanR	earlier I said strict data is a terrible default, this was supposed to be a throw away strong opinion based on nothing but audience
2022-04-19 22:34:10	EvanR	particular situations could use strict data for fun and profit
2022-04-19 22:34:40	janus	right, so i gather that since Idris has Lazy, it isn't so bad that it is the default
2022-04-19 22:34:58	janus	but in haskell, there is no Lazy, so it would be a bad default?
2022-04-19 22:35:16	EvanR	you get to decide because there's a pragma for it
2022-04-19 22:36:06	EvanR	I feel like typical use of haskell would break badly if everything was strict
2022-04-19 22:36:38	geekosaur	so do I
2022-04-19 22:36:55	janus	but it seems that you can write Idris programs that looks a lot like Haskell programs
2022-04-19 22:37:04	geekosaur	there are people who are convinced that haskell should default to strict and make you annotate the lazy stuff though
2022-04-19 22:37:04	EvanR	I haven't seen that
2022-04-19 22:37:05	→	eggplantade has joined #haskell
2022-04-19 22:37:34	EvanR	idris programs are more like classic functional programming, with accumulating parameters, carefully avoiding stack use
2022-04-19 22:37:55	janus	to me, a typical haskell program is a HTTP server that talks to a postgres database
2022-04-19 22:37:56	EvanR	when doing recursion
2022-04-19 22:38:15	janus	the only things that need lazyness, that i can think of, is stuff like `zip [1..]`
2022-04-19 22:38:35	EvanR	a web request handler is a very special case environment, you almost don't even need garbage collection
2022-04-19 22:38:36	janus	and when i write my http2 library in idris, i don't seem to run into any hurdles
2022-04-19 22:38:53	EvanR	just handle the request and tear everything down
2022-04-19 22:39:02	janus	ok, so seems like we have different definitions of 'typical' ;)
2022-04-19 22:39:03	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-19 22:39:17	Franciman	my typical haskell program is an interpreter
2022-04-19 22:39:29	Franciman	i really enjoy the interpreter point of view
2022-04-19 22:39:29	EvanR	yeah I'm on stage 11 of recovering from "web programming is typical"
2022-04-19 22:39:43	Franciman	a web server is an interpreter
2022-04-19 22:39:55	←	gdd has quit (Ping timeout: 272 seconds)
2022-04-19 22:39:58	Franciman	fortunately haskell is very smart about its runtime
2022-04-19 22:40:03	janus	yeah, it's interpreting RealWorld# which comes from Postgres :P
2022-04-19 22:40:22	→	gdd has joined #haskell
2022-04-19 22:40:28	EvanR	I still see everything as a database, it's not good
2022-04-19 22:40:36	Franciman	EvanR: is ghc a database?
2022-04-19 22:40:47	EvanR	it probably has many 
2022-04-19 22:41:05	EvanR	many databases with some compiler caked on the outside
2022-04-19 22:41:16	Franciman	dope
2022-04-19 22:41:24	Franciman	i see databases as logic programming
2022-04-19 22:41:34	Franciman	am i totally astray?
2022-04-19 22:41:49	EvanR	if it was logical that would be better
2022-04-19 22:42:03	janus	Franciman: yes, because if you try swapping out your postgres layer for LogicT, you're gonna have a hard time
2022-04-19 22:42:29	EvanR	sqlite takes a table definition that says floats go in column, and allows "strings"
2022-04-19 22:42:32	janus	databases are about indexing and query optimization ;)
2022-04-19 22:42:55	←	cosimone has quit (Remote host closed the connection)
2022-04-19 22:43:04	EvanR	databases could have nice laws and logic but usually don't
2022-04-19 22:43:37	→	cosimone has joined #haskell
2022-04-19 22:43:49	←	odnes has quit (Quit: Leaving)
2022-04-19 22:43:51	Franciman	janus: uh uhuh thanks
2022-04-19 22:44:26	EvanR	some of it can't be avoided, some of it entrenched 1980s ideology. Join the 90s, like haskell
2022-04-19 22:44:33	janus	Franciman: do you disagree? i am genuinely curious whether you could use LogicT instead of Postgres
2022-04-19 22:44:58	Franciman	if you speak of performance, i don't think it's possible
2022-04-19 22:45:09	Franciman	but conceptually it seemed to me a pretty straightforward thing to do
2022-04-19 22:45:10	→	RevoGen has joined #haskell
2022-04-19 22:45:28	EvanR	datalog exists
2022-04-19 22:46:07	janus	but datomic doesn't allow you to work like you do with LogicT
2022-04-19 22:46:16	EvanR	well datomic is datomic
2022-04-19 22:46:18	dolio	LogicT isn't a logic language, it's just part of an implementation strategy for one.
2022-04-19 22:46:41	←	dyeplexer has quit (Remote host closed the connection)
2022-04-19 22:47:30	geekosaur	logic language? https://curry.pages.ps.informatik.uni-kiel.de/curry-lang.org/
2022-04-19 22:47:43	Franciman	so you get to code in both haskell and burry
2022-04-19 22:47:45	Franciman	curry*
2022-04-19 22:47:52	Franciman	you just have to also learn B, and you'll know
2022-04-19 22:47:55	Franciman	haskell b curry
2022-04-19 22:48:07	janus	hahah :D
2022-04-19 22:49:13	←	turlando has quit (Ping timeout: 260 seconds)
2022-04-19 22:49:40	→	turlando has joined #haskell
2022-04-19 22:49:40	←	turlando has quit (Changing host)
2022-04-19 22:49:40	→	turlando has joined #haskell
2022-04-19 22:52:13	→	MajorBiscuit has joined #haskell
2022-04-19 22:52:56	←	jerry99 has quit (Quit: CGI:IRC (Ping timeout))
2022-04-19 22:53:12	←	RevoGen has quit (Ping timeout: 250 seconds)
2022-04-19 22:55:43	→	mrosenbe has joined #haskell
2022-04-19 22:55:46	←	wootehfoot has quit (Read error: Connection reset by peer)
2022-04-19 22:56:10	→	wootehfoot has joined #haskell
2022-04-19 23:00:15	→	merijn has joined #haskell
2022-04-19 23:00:48	→	wroathe has joined #haskell
2022-04-19 23:00:48	←	wroathe has quit (Changing host)
2022-04-19 23:00:48	→	wroathe has joined #haskell
2022-04-19 23:02:57	→	JordiGH has joined #haskell
2022-04-19 23:03:16	JordiGH	Is there a simple way to syntactically transliterate `int x = y = 42` from C?
2022-04-19 23:03:50	geekosaur	not if you expect them to subsequently be C-like variables
2022-04-19 23:04:06	→	RevoGen has joined #haskell
2022-04-19 23:04:25	←	euandreh has quit (Quit: WeeChat 3.5)
2022-04-19 23:04:31	JordiGH	That's what I thought, Haskell doesn't really have an assingment operator, right? Like, you can't do (=) x 5
2022-04-19 23:04:42	JordiGH	(I forget the syntax for calling operators without infix notation)
2022-04-19 23:05:17	→	whatsupdoc has joined #haskell
2022-04-19 23:05:18	geekosaur	right
2022-04-19 23:05:41	→	rawley has joined #haskell
2022-04-19 23:05:44	geekosaur	closest you get is writeIORef/writeSTRef, I think
2022-04-19 23:06:21	JordiGH	Oh that is the syntax.
2022-04-19 23:06:21	geekosaur	unless you count State in which case lens has some operators that look like assignment and modification
2022-04-19 23:06:37	←	redb has quit (Ping timeout: 256 seconds)
2022-04-19 23:10:07	JordiGH	So in particular, there are no associativity rules for = because you just can't put more than one per statement.
2022-04-19 23:10:14	→	jgeerds has joined #haskell
2022-04-19 23:10:38	←	justsomeguy has quit (Quit: WeeChat 3.4)
2022-04-19 23:11:17	ℹ	mstksg is now known as jle`
2022-04-19 23:12:47	geekosaur	it's not even a statement, really, unless you mean do syntax
2022-04-19 23:12:56	geekosaur	let … in is an expression
2022-04-19 23:13:34	geekosaur	let {<bindings>} in <expression> (braces are usually replaced by layout)
2022-04-19 23:13:49	→	redb has joined #haskell
2022-04-19 23:14:00	geekosaur	and a binding is <pattern> = <expression>
2022-04-19 23:14:01	→	euandreh has joined #haskell
2022-04-19 23:14:20	geekosaur	(which can be quite useful, but watch out for failed pattern matches)
2022-04-19 23:17:01	←	clever has quit (Ping timeout: 240 seconds)
2022-04-19 23:17:25	→	econo has joined #haskell
2022-04-19 23:18:31	←	redb has quit (Ping timeout: 256 seconds)
2022-04-19 23:20:43	→	tromp has joined #haskell
2022-04-19 23:21:15	→	niemand has joined #haskell
2022-04-19 23:22:06	←	wroathe has quit (Ping timeout: 276 seconds)
2022-04-19 23:23:41	←	niemand has quit (Client Quit)
2022-04-19 23:25:19	←	deadmarshal_ has quit (Ping timeout: 256 seconds)
2022-04-19 23:28:12	←	RevoGen has quit (Remote host closed the connection)
2022-04-19 23:29:19	←	eggplantade has quit (Remote host closed the connection)
2022-04-19 23:29:22	←	merijn has quit (Ping timeout: 250 seconds)
2022-04-19 23:29:42	→	slack1256 has joined #haskell
2022-04-19 23:32:53	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-19 23:36:28	→	machinedgod has joined #haskell
2022-04-19 23:36:33	→	redb has joined #haskell
2022-04-19 23:40:39	←	redb has quit (Ping timeout: 240 seconds)
2022-04-19 23:41:35	←	bitmapper has quit (Quit: Connection closed for inactivity)
2022-04-19 23:42:32	→	redb has joined #haskell
2022-04-19 23:43:00	←	sprout has quit (Ping timeout: 240 seconds)
2022-04-19 23:47:49	←	redb has quit (Ping timeout: 246 seconds)
2022-04-19 23:52:58	slack1256	Does a complementary package for aeson exist to parsed malformed JSONs on a best effort basis?
2022-04-19 23:54:57	→	waleee has joined #haskell
2022-04-19 23:55:37	→	redb has joined #haskell
2022-04-19 23:56:42	mrosenbe	the docs for withMVar say it is atomic if there are no other producers, does that mean that two withMVars will be atomic, but withMVar and putMVar aren't atomic?
2022-04-19 23:58:26	→	sprout has joined #haskell
2022-04-20 00:00:55	←	fryguybob has quit (Quit: leaving)
2022-04-20 00:01:19	←	dhouthoo has quit (Quit: WeeChat 3.5)
2022-04-20 00:02:02	←	coot_ has quit (Quit: coot_)
2022-04-20 00:02:26	→	myme has joined #haskell
2022-04-20 00:03:20	→	coot has joined #haskell
2022-04-20 00:08:29	→	neceve has joined #haskell
2022-04-20 00:08:48	←	sprout has quit (Ping timeout: 248 seconds)
2022-04-20 00:17:54	→	tromp has joined #haskell
2022-04-20 00:19:19	←	redb has quit (Ping timeout: 246 seconds)
2022-04-20 00:19:29	→	acidjnk has joined #haskell
2022-04-20 00:20:15	→	redb has joined #haskell
2022-04-20 00:22:49	←	mbuf has quit (Quit: Leaving)
2022-04-20 00:23:57	→	bollu4 has joined #haskell
2022-04-20 00:25:03	←	bollu has quit (Ping timeout: 272 seconds)
2022-04-20 00:25:03	ℹ	bollu4 is now known as bollu
2022-04-20 00:25:24	→	jinsun__ has joined #haskell
2022-04-20 00:25:42	←	MajorBiscuit has quit (Ping timeout: 250 seconds)
2022-04-20 00:27:39	←	nerdypepper has quit (Ping timeout: 256 seconds)
2022-04-20 00:27:53	←	abiss27 has quit (Quit: hasta la vista... tchau!)
2022-04-20 00:28:11	→	nerdypepper has joined #haskell
2022-04-20 00:29:03	←	jinsun has quit (Ping timeout: 276 seconds)
2022-04-20 00:29:55	→	eggplantade has joined #haskell
2022-04-20 00:31:03	→	Tuplanolla has joined #haskell
2022-04-20 00:31:59	←	jgeerds has quit (Ping timeout: 240 seconds)
2022-04-20 00:32:03	EvanR	mrosenbe, it's referring to how withMVar will do a take, run your code, then do a put. Obviously there is time there for someone else to put their own thing back before you do
2022-04-20 00:32:23	→	dsrt^ has joined #haskell
2022-04-20 00:32:31	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2022-04-20 00:32:38	EvanR	which would break atomicity
2022-04-20 00:33:17	EvanR	if multiple threads are doing withMVar, it's ok because everyone is waiting to take
2022-04-20 00:34:27	←	eggplantade has quit (Ping timeout: 256 seconds)
2022-04-20 00:35:10	EvanR	see TVars for something less brittle
2022-04-20 00:36:43	→	DNH has joined #haskell
2022-04-20 00:39:19	→	MajorBiscuit has joined #haskell
2022-04-20 00:46:16	←	redb has quit (Ping timeout: 246 seconds)
2022-04-20 00:48:44	←	myme has quit (Quit: WeeChat 3.4.1)
2022-04-20 00:51:20	→	eggplantade has joined #haskell
2022-04-20 00:55:04	→	redb has joined #haskell
2022-04-20 00:59:19	←	redb has quit (Ping timeout: 240 seconds)
2022-04-20 01:01:56	→	myme has joined #haskell
2022-04-20 01:02:04	→	jmdaemon has joined #haskell
2022-04-20 01:03:21	←	bahamas has quit (Ping timeout: 256 seconds)
2022-04-20 01:04:43	→	sprout has joined #haskell
2022-04-20 01:07:00	→	anomal has joined #haskell
2022-04-20 01:13:03	→	redb has joined #haskell
2022-04-20 01:13:53	mrosenbe	EvanR: mvar is fine for my uses, I mostly wanted to make sure my interpretation of that was correct, and it sounds like it is.
2022-04-20 01:18:14	←	eggplantade has quit (Remote host closed the connection)
2022-04-20 01:19:22	←	zer0bitz has quit (Read error: Connection reset by peer)
2022-04-20 01:20:24	←	redb has quit (Ping timeout: 276 seconds)
2022-04-20 01:20:52	←	geekosaur has quit (Remote host closed the connection)
2022-04-20 01:21:00	→	Guest292 has joined #haskell
2022-04-20 01:21:57	←	Guest292 has quit (Client Quit)
2022-04-20 01:22:05	→	redb has joined #haskell
2022-04-20 01:24:20	→	geekosaur has joined #haskell
2022-04-20 01:26:23	→	merijn has joined #haskell
2022-04-20 01:26:31	←	redb has quit (Ping timeout: 246 seconds)
2022-04-20 01:30:41	→	redb has joined #haskell
2022-04-20 01:30:48	←	neurocyte8614492 has quit (Ping timeout: 276 seconds)
2022-04-20 01:32:54	→	pavonia has joined #haskell
2022-04-20 01:34:22	←	_ht has quit (Remote host closed the connection)
2022-04-20 01:37:19	←	MajorBiscuit has quit (Ping timeout: 240 seconds)
2022-04-20 01:37:30	←	Inoperable has quit (Quit: All your buffer are belong to us!)
2022-04-20 01:38:02	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-20 01:38:29	←	redb has quit (Ping timeout: 256 seconds)
2022-04-20 01:39:16	←	FinnElija has quit (Ping timeout: 240 seconds)
2022-04-20 01:39:45	→	FinnElija has joined #haskell
2022-04-20 01:42:09	→	redb has joined #haskell
2022-04-20 01:42:53	←	romesrf has quit (Quit: WeeChat 3.4.1)
2022-04-20 01:44:01	→	MajorBiscuit has joined #haskell
2022-04-20 01:47:33	←	dcoutts_ has quit (Ping timeout: 256 seconds)
2022-04-20 01:50:19	←	redb has quit (Ping timeout: 240 seconds)
2022-04-20 01:50:26	→	tromp has joined #haskell
2022-04-20 01:51:06	←	takuan has quit (Remote host closed the connection)
2022-04-20 01:54:21	→	dcoutts_ has joined #haskell
2022-04-20 01:55:50	→	akegalj has joined #haskell
2022-04-20 01:55:58	→	redb has joined #haskell
2022-04-20 01:57:52	→	Inoperable has joined #haskell
2022-04-20 01:57:55	→	lbseale_ has joined #haskell
2022-04-20 02:00:10	←	redb has quit (Ping timeout: 250 seconds)
2022-04-20 02:00:49	←	lbseale has quit (Ping timeout: 246 seconds)
2022-04-20 02:01:21	←	merijn has quit (Ping timeout: 276 seconds)
2022-04-20 02:02:12	→	redb has joined #haskell
2022-04-20 02:09:09	←	redb has quit (Ping timeout: 276 seconds)
2022-04-20 02:10:32	→	redb has joined #haskell
2022-04-20 02:12:33	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-20 02:14:39	←	redb has quit (Ping timeout: 240 seconds)
2022-04-20 02:16:36	→	redb has joined #haskell
2022-04-20 02:18:52	→	eggplantade has joined #haskell
2022-04-20 02:20:59	←	redb has quit (Ping timeout: 256 seconds)
2022-04-20 02:23:15	←	eggplantade has quit (Ping timeout: 256 seconds)
2022-04-20 02:23:34	→	Pickchea has joined #haskell
2022-04-20 02:24:11	ggVGc	I think "it's fine for my use-case" is how every story leading up to a race condition starts
2022-04-20 02:24:30	→	tromp has joined #haskell
2022-04-20 02:24:30	ggVGc	(not that I haven't also said it to myself, and used MVars)
2022-04-20 02:26:12	ggVGc	sometimes I wonder if geekosaur remembers how much I was pestering him 10 years ago while trying to use xmonad and knowing 0 Haskell
2022-04-20 02:26:30	geekosaur	I do, actually :)
2022-04-20 02:26:34	ggVGc	actually... it's more like 12 years now :(
2022-04-20 02:26:37	ggVGc	haha
2022-04-20 02:26:45	ggVGc	well here I am writing Haskell and not using xmonad
2022-04-20 02:26:53	ggVGc	so it worked out in the end I guess
2022-04-20 02:27:25	→	redb has joined #haskell
2022-04-20 02:27:30	ggVGc	I think "I'll use xmonad so I'll learn Haskell" is a pretty bad trap that I see many people fall into
2022-04-20 02:27:35	ggVGc	but there's no stopping it
2022-04-20 02:29:35	←	fendor has quit (Remote host closed the connection)
2022-04-20 02:31:37	←	redb has quit (Ping timeout: 246 seconds)
2022-04-20 02:31:48	←	akegalj has quit (Quit: leaving)
2022-04-20 02:33:12	←	neceve has quit (Ping timeout: 276 seconds)
2022-04-20 02:37:36	→	kaph has joined #haskell
2022-04-20 02:40:38	←	anomal has quit (Remote host closed the connection)
2022-04-20 02:40:57	→	anomal has joined #haskell
2022-04-20 02:44:17	janus	ggVGc: Wayland can stop it
2022-04-20 02:44:20	→	redb has joined #haskell
2022-04-20 02:45:04	geekosaur	waymonad exists :þ
2022-04-20 02:45:22	geekosaur	that said, xmonad can work asan intro to haskell *if* you're willing to put in the work
2022-04-20 02:45:38	geekosaur	but most folks just copy around configs and don't try to figureout what they're doing
2022-04-20 02:46:47	janus	geekosaur: which is the better intro to haskell, tidal cycles or waymonad? :D
2022-04-20 02:46:48	geekosaur	and we don't generally try to teach Haskell because most people just want a working config and don't care about the why
2022-04-20 02:47:38	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-20 02:48:31	geekosaur	no idea about tidal cyclesbut I noteits repo has ports to js and python so I assume it's not exactly grabbing people into haskell very well :)
2022-04-20 02:48:46	geekosaur	then again I hgave no idea how well waymonad is doing in that area either
2022-04-20 02:51:06	janus	i think there are ports to other languages because e.g. indian classical music aren't as strongly correlated intrests as workspace organization and haskell are
2022-04-20 02:52:16	←	redb has quit (Ping timeout: 246 seconds)
2022-04-20 02:52:22	ggVGc	Personally I don't think xmonad was a good intro to Haskell for me. I had already been doing F# for a while, so was no stranger to functional programming in general, but xmonad is too much "Real world" for beginner Haskell, in my personal experience
2022-04-20 02:52:55	ggVGc	it also doesn't help that, as you say, the user wants "it to work" because it's your WM...
2022-04-20 02:53:10	ggVGc	so there's a bad pressure to make things work, rather than learning
2022-04-20 02:53:13	geekosaur	dig too deepand you find yourself learning more about X11 than about Haskell
2022-04-20 02:53:17	systemfault	Reminds me of "Real-world Haskell"... which was, in a hindsight, not real "real world"
2022-04-20 02:53:27	systemfault	*really
2022-04-20 02:53:39	geekosaur	actually xmonad's an examplein there :)
2022-04-20 02:53:52	janus	if xmonad is of the real world, is tidal cycles from the unreal realm? :O
2022-04-20 02:54:12	→	tromp has joined #haskell
2022-04-20 02:54:20	→	redb has joined #haskell
2022-04-20 02:55:11	→	renzhi has joined #haskell
2022-04-20 02:58:34	←	redb has quit (Ping timeout: 246 seconds)
2022-04-20 03:01:11	←	rawley has quit (Remote host closed the connection)
2022-04-20 03:05:27	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-20 03:06:54	←	michalz has quit (Remote host closed the connection)
2022-04-20 03:08:25	←	MajorBiscuit has quit (Quit: WeeChat 3.4)
2022-04-20 03:09:55	→	redb has joined #haskell
2022-04-20 03:11:20	→	eggplantade has joined #haskell
2022-04-20 03:14:48	←	redb has quit (Ping timeout: 276 seconds)
2022-04-20 03:18:02	←	coot has quit (Quit: coot)
2022-04-20 03:19:58	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2022-04-20 03:22:35	→	redb has joined #haskell
2022-04-20 03:27:06	→	xkuru has joined #haskell
2022-04-20 03:27:32	→	nihilazo has joined #haskell
2022-04-20 03:28:10	nihilazo	hi, what would be the best way to learn haskell for somebody who already knows FP but only in dynamic languages (haskell for a lisper, basically)? is learn you a haskell still considered good?
2022-04-20 03:29:45	←	redb has quit (Ping timeout: 276 seconds)
2022-04-20 03:29:47	←	gehmehgeh has quit (Quit: Leaving)
2022-04-20 03:30:00	nihilazo	I tried learning before from "real-world haskell" but found myself feeling like I was fighting against haskell's type system instead of really grokking it
2022-04-20 03:30:02	←	Pickchea has quit (Quit: Leaving)
2022-04-20 03:32:19	←	mikoto-chan has quit (Ping timeout: 240 seconds)
2022-04-20 03:32:22	→	redb has joined #haskell
2022-04-20 03:32:23	←	hyiltiz_ has quit (Ping timeout: 256 seconds)
2022-04-20 03:33:23	←	wootehfoot has quit (Quit: Leaving)
2022-04-20 03:33:59	→	python476 has joined #haskell
2022-04-20 03:34:05	←	python476 has quit (Remote host closed the connection)
2022-04-20 03:34:49	→	agumonkey has joined #haskell
2022-04-20 03:35:26	geekosaur	RWH is perhaps notthe best for a beginner, it's more of an intermediate book I think
2022-04-20 03:35:36	→	hyiltiz has joined #haskell
2022-04-20 03:35:45	→	DNH has joined #haskell
2022-04-20 03:35:55	←	kaph has quit (Read error: Connection reset by peer)
2022-04-20 03:36:03	→	kaph has joined #haskell
2022-04-20 03:36:05	geekosaur	LYAH… is okay if you can find some exercises to do along with it; otherwise it's kinda the "grand tour", you can mostly read code after it but not really write it
2022-04-20 03:36:17	geekosaur	currently we prefer something like
2022-04-20 03:36:21	geekosaur	@where cis194
2022-04-20 03:36:21	lambdabot	https://www.seas.upenn.edu/~cis194/spring13/lectures.html
2022-04-20 03:36:55	←	slack1256 has quit (Ping timeout: 256 seconds)
2022-04-20 03:37:46	←	redb has quit (Ping timeout: 246 seconds)
2022-04-20 03:38:51	→	redb has joined #haskell
2022-04-20 03:42:05	→	xff0x_ has joined #haskell
2022-04-20 03:42:22	←	zeenk has quit (Quit: Konversation terminated!)
2022-04-20 03:42:39	geekosaur	I can't think of anything specifically for folks who know some FP but not strong typing or laziness
2022-04-20 03:43:19	geekosaur	closest I can think of is the old "Gentle Introduction" but that still assumes strong typing / SML background
2022-04-20 03:47:50	sm	there's no universal "best", but how about 
2022-04-20 03:47:50	sm	@where HTAC
2022-04-20 03:47:50	lambdabot	"Haskell Tutorial and Cookbook" by Mark Watson in 2017-09-04 at <https://leanpub.com/haskell-cookbook>
2022-04-20 03:47:57	←	redb has quit (Ping timeout: 276 seconds)
2022-04-20 03:49:24	sm	@where books
2022-04-20 03:49:24	sm	has the rest, if not 
2022-04-20 03:49:24	lambdabot	https://www.extrema.is/articles/haskell-books, see also @where LYAH, RWH, YAHT, SOE, HR, PIH, TFwH, wikibook, PCPH, HPFFP, HTAC, TwT, FoP, PFAD, WYAH, non-haskell-books
2022-04-20 03:49:24	←	cosimone has quit (Read error: Connection reset by peer)
2022-04-20 03:50:01	→	deadmarshal_ has joined #haskell
2022-04-20 03:50:11	←	anomal has quit (Remote host closed the connection)
2022-04-20 03:50:19	←	waleee has quit (Ping timeout: 240 seconds)
2022-04-20 03:50:30	→	anomal has joined #haskell
2022-04-20 03:50:31	←	Unicorn_Princess has quit (Ping timeout: 256 seconds)
2022-04-20 03:51:39	←	Midjak has quit (Ping timeout: 260 seconds)
2022-04-20 03:53:06	←	mastarija__ has quit (Read error: Connection reset by peer)
2022-04-20 03:53:10	geekosaur	@where TwT
2022-04-20 03:53:11	lambdabot	"Thinking with Types: Type-Level Programming in Haskell" by Sandy Maguire in 2019-01-10 at <https://leanpub.com/thinking-with-types>
2022-04-20 03:53:16	geekosaur	hm, no
2022-04-20 03:54:00	→	redb has joined #haskell
2022-04-20 03:54:27	←	deadmarshal_ has quit (Ping timeout: 260 seconds)
2022-04-20 03:54:55	→	waleee has joined #haskell
2022-04-20 03:54:56	←	Moyst_ has quit (Ping timeout: 260 seconds)
2022-04-20 03:56:28	→	RevoGen has joined #haskell
2022-04-20 03:56:37	→	vall456 has joined #haskell
2022-04-20 03:57:03	←	vall456 has quit (Quit: Leaving)
2022-04-20 03:58:08	←	redb has quit (Ping timeout: 248 seconds)
2022-04-20 03:59:04	Las[m]	Does anyone know whether there's literature on what sound restrictions would be on overlapping instances to ensure coherence?
2022-04-20 03:59:57	→	redb has joined #haskell
2022-04-20 04:01:31	→	statusbot1 has joined #haskell
2022-04-20 04:01:36	←	statusbot has quit (Remote host closed the connection)
2022-04-20 04:01:47	→	merijn has joined #haskell
2022-04-20 04:02:02	geekosaur	hm, I didn't think coherence was the problem, just an inability to guarantee that the intended instance would be chosen in some module which used the class but didn't have all instances in scope?
2022-04-20 04:02:27	←	Tuplanolla has quit (Quit: Leaving.)
2022-04-20 04:03:14	Las[m]	Is that possible in the absence of orphan instances?
2022-04-20 04:03:32	Las[m]	https://downloads.haskell.org/ghc/latest/docs/html/users_guide/exts/instances.html?highlight=overlapping has an example of incoherence
2022-04-20 04:04:32	←	redb has quit (Ping timeout: 248 seconds)
2022-04-20 04:04:35	geekosaur	sure. you don't have to have all instances known at a use site. something that uses fmap doesn't have to know every possible Functor instance
2022-04-20 04:06:06	Las[m]	well what would the sound restriction be then?
2022-04-20 04:06:26	Las[m]	If possible I want to implement checks in GHC to allow coherent use of overlapping instances
2022-04-20 04:07:34	geekosaur	well, that would be an exampleof what I said
2022-04-20 04:07:53	geekosaur	I suppose that does mean incoherence, hm
2022-04-20 04:14:19	←	n3t has quit (Quit: WeeChat 2.9)
2022-04-20 04:16:39	→	redb has joined #haskell
2022-04-20 04:19:32	←	bgs has quit (Remote host closed the connection)
2022-04-20 04:19:46	→	bgs has joined #haskell
2022-04-20 04:20:13	→	Moyst has joined #haskell
2022-04-20 04:20:39	←	redb has quit (Ping timeout: 240 seconds)
2022-04-20 04:22:34	→	perrierj1 has joined #haskell
2022-04-20 04:23:44	←	perrierjouet has quit (Ping timeout: 248 seconds)
2022-04-20 04:24:10	→	cosimone has joined #haskell
2022-04-20 04:25:05	←	agumonkey has quit (Ping timeout: 256 seconds)
2022-04-20 04:27:33	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2022-04-20 04:28:19	→	DNH has joined #haskell
2022-04-20 04:30:14	→	redb has joined #haskell
2022-04-20 04:30:51	←	machinedgod has quit (Ping timeout: 276 seconds)
2022-04-20 04:31:25	←	merijn has quit (Ping timeout: 272 seconds)
2022-04-20 04:34:59	←	JordiGH has quit (Ping timeout: 240 seconds)
2022-04-20 04:37:04	←	acidjnk has quit (Ping timeout: 248 seconds)
2022-04-20 04:39:03	→	yauhsien has joined #haskell
2022-04-20 04:40:12	←	cosimone has quit (Quit: ERC 5.4 (IRC client for GNU Emacs 28.1))
2022-04-20 04:42:47	→	bitmapper has joined #haskell
2022-04-20 04:43:31	shapr	category theory joke: what makes everything feel good? an endorphism
2022-04-20 04:45:39	←	yauhsien has quit (Ping timeout: 240 seconds)
2022-04-20 04:51:54	→	Guest99 has joined #haskell
2022-04-20 04:53:23	←	kaskal has quit (Ping timeout: 252 seconds)
2022-04-20 04:53:38	→	kaskal has joined #haskell
2022-04-20 04:53:48	→	bgs_ has joined #haskell
2022-04-20 04:55:07	←	bgs has quit (Ping timeout: 256 seconds)
2022-04-20 04:55:23	ℹ	bgs_ is now known as bgs
2022-04-20 04:55:50	←	Guest99 has quit (Client Quit)
2022-04-20 04:56:03	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2022-04-20 04:56:57	hpc	that pun made me want to yawneda
2022-04-20 05:00:28	←	pretty_dumm_guy has quit (Quit: WeeChat 3.5)
2022-04-20 05:00:39	←	chomwitt has quit (Ping timeout: 240 seconds)
2022-04-20 05:00:43	←	gurkenglas has quit (Ping timeout: 260 seconds)
2022-04-20 05:03:50	→	rsify[m] has joined #haskell
2022-04-20 05:04:21	→	machinedgod has joined #haskell
2022-04-20 05:05:41	EvanR	ggVGc, cheers, good to see you survived the freenode-a-lypse
2022-04-20 05:07:11	EvanR	so I'm about to mix makefiles and cabal
2022-04-20 05:07:22	EvanR	if I'm not back in 30 minutes you know what to do
2022-04-20 05:07:46	→	bitdex has joined #haskell
2022-04-20 05:07:58	sm	what happened poor Freenode since, anyway
2022-04-20 05:08:05	→	wroathe has joined #haskell
2022-04-20 05:08:06	←	wroathe has quit (Changing host)
2022-04-20 05:08:06	→	wroathe has joined #haskell
2022-04-20 05:08:29	sm	looks like a reddit now
2022-04-20 05:10:34	EvanR	a reddit-class soul destroyer
2022-04-20 05:18:36	→	allbery_b has joined #haskell
2022-04-20 05:18:41	←	geekosaur has quit (Killed (NickServ (GHOST command used by allbery_b)))
2022-04-20 05:18:49	→	Midjak has joined #haskell
2022-04-20 05:20:25	Axman6	nihilazo: was there anything in particular you felt you were getting stuck on?
2022-04-20 05:23:39	Axman6	... wtf? what on earth did they do?
2022-04-20 05:26:17	→	geekosaur has joined #haskell
2022-04-20 05:26:26	Axman6	Clicked on "Node of the day" on freenode... and it's an empty... subreddit? what the actual fuck are they doing, this is so bad. it's just a bunch of job ads for cryptocurrency and conspiracies?
2022-04-20 05:26:35	EvanR	be the first to post in /n/lilo
2022-04-20 05:27:05	Axman6	New Post: What the flip is LILO?
2022-04-20 05:27:20	Axman6	all these subreddit things were created by [Deleted]
2022-04-20 05:27:46	←	Midjak has quit (Quit: This computer has gone to sleep)
2022-04-20 05:28:00	EvanR	lilo was the founder of freenode
2022-04-20 05:28:10	Axman6	Deleted a comment with reason "shane" <- haha, wtdf
2022-04-20 05:28:13	Axman6	wtf*
2022-04-20 05:28:20	Axman6	https://freenode.net/n/conspiracy/sublog
2022-04-20 05:29:02	←	waleee has quit (Ping timeout: 250 seconds)
2022-04-20 05:29:07	←	raehik has quit (Ping timeout: 256 seconds)
2022-04-20 05:29:26	Axman6	... their equivalent of reddit's karma, and I swear I'm not making this up, is called "Phuks given"
2022-04-20 05:29:28	←	allbery_b has quit (Ping timeout: 250 seconds)
2022-04-20 05:30:03	ℹ	rsify[m] is now known as rsify
2022-04-20 05:30:22	Axman6	Deleted a post with reason "goats"
2022-04-20 05:30:29	geekosaur	deddit
2022-04-20 05:33:22	←	Natch has quit (Ping timeout: 250 seconds)
2022-04-20 05:34:56	←	rsify has quit (Quit: Reconnecting)
2022-04-20 05:35:03	Axman6	Ha, they even have their own self trolling sub: https://freenode.net/n/pissnet/hot
2022-04-20 05:35:10	→	rsify has joined #haskell
2022-04-20 05:36:39	←	bontaq has quit (Ping timeout: 272 seconds)
2022-04-20 05:47:56	←	rsify has quit (Quit: Reconnecting)
2022-04-20 05:48:09	→	rsify has joined #haskell
2022-04-20 05:51:07	→	JordiGH has joined #haskell
2022-04-20 05:52:39	←	redb has quit (Ping timeout: 240 seconds)
2022-04-20 05:57:10	janus	can libera.chat can be bigger than freenode ever was? then, was it so bad freenode went crazy?
2022-04-20 05:59:18	←	jakalx has left #haskell (Error from remote client)
2022-04-20 06:03:49	→	vysn has joined #haskell
2022-04-20 06:03:49	←	xff0x_ has quit (Read error: Connection reset by peer)
2022-04-20 06:04:25	→	jakalx has joined #haskell
2022-04-20 06:05:32	sm	of course it can, and yes it was bad for eg consuming a lot of time and energy, but maybe libera and foss communities have had some useful cleanup, for one
2022-04-20 06:10:38	←	TheCoffeMaker has quit (Ping timeout: 250 seconds)
2022-04-20 06:12:19	→	TheCoffeMaker has joined #haskell
2022-04-20 06:12:44	←	vicfred has quit (Quit: Leaving)
2022-04-20 06:14:18	sm	though actually, with matrix etc, it might not reach that size again
2022-04-20 06:14:50	→	redb has joined #haskell
2022-04-20 06:19:35	abastro[m]	Matrix could be bridged right?
2022-04-20 06:20:07	←	redb has quit (Ping timeout: 256 seconds)
2022-04-20 06:21:57	sm	yup, I'm speaking to you over a bridge
2022-04-20 06:22:20	←	machinedgod has quit (Ping timeout: 250 seconds)
2022-04-20 06:23:03	ℹ	AndrewYu is now known as Andrew
2022-04-20 06:24:22	←	TheCoffeMaker has quit (Ping timeout: 246 seconds)
2022-04-20 06:24:32	←	RevoGen has quit (Remote host closed the connection)
2022-04-20 06:24:44	→	RevoGen has joined #haskell
2022-04-20 06:26:21	→	TheCoffeMaker has joined #haskell
2022-04-20 06:26:24	sclv	if you think that matrix is better than irc, buddy ive got a bridge to sell you
2022-04-20 06:26:39	←	perrierj1 has quit (Ping timeout: 240 seconds)
2022-04-20 06:26:55	abastro[m]	XD
2022-04-20 06:29:00	sm	it's better in lots of ways. Not all
2022-04-20 06:29:30	sm	nice that we have at least two great alternatives to proprietary chat
2022-04-20 06:32:31	→	merijn has joined #haskell
2022-04-20 06:33:24	→	abastro has joined #haskell
2022-04-20 06:35:10	←	abastro has quit (Remote host closed the connection)
2022-04-20 06:35:21	→	abastro has joined #haskell
2022-04-20 06:35:46	←	wroathe has quit (Ping timeout: 250 seconds)
2022-04-20 06:36:06	abastro	To put '.' on the end of the comment sentence or not, that is the question(.)
2022-04-20 06:37:51	→	redb has joined #haskell
2022-04-20 06:37:55	sm	Indeed! And, to use correct grammar, punctuation and capitalisation at all times ? The folks who do this impress me.
2022-04-20 06:48:43	ℹ	hexeme is now known as ldlework
2022-04-20 06:50:15	→	andrey_ has joined #haskell
2022-04-20 06:52:39	←	andrey__ has quit (Ping timeout: 240 seconds)
2022-04-20 06:54:10	←	zebrag has quit (Quit: Konversation terminated!)
2022-04-20 06:59:54	→	xff0x_ has joined #haskell
2022-04-20 07:02:14	abastro	Exactly!
2022-04-20 07:02:18	←	merijn has quit (Ping timeout: 276 seconds)
2022-04-20 07:05:37	←	whatsupdoc has quit (Quit: Connection closed for inactivity)
2022-04-20 07:06:43	→	wroathe has joined #haskell
2022-04-20 07:06:43	←	wroathe has quit (Changing host)
2022-04-20 07:06:43	→	wroathe has joined #haskell
2022-04-20 07:06:54	→	pieguy128_ has joined #haskell
2022-04-20 07:06:54	→	maerwald_ has joined #haskell
2022-04-20 07:07:26	→	dobblego has joined #haskell
2022-04-20 07:07:27	←	dobblego has quit (Changing host)
2022-04-20 07:07:27	→	dobblego has joined #haskell
2022-04-20 07:07:36	→	forell_ has joined #haskell
2022-04-20 07:07:38	←	inversed_ has quit (Read error: Connection reset by peer)
2022-04-20 07:07:38	←	forell has quit (Quit: ZNC - https://znc.in)
2022-04-20 07:07:38	←	maerwald has quit (Quit: gone)
2022-04-20 07:07:38	←	sm[i] has quit (Remote host closed the connection)
2022-04-20 07:07:38	←	avpx has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-20 07:07:38	←	Ekho has quit (Quit: CORE ERROR, SYSTEM HALTED.)
2022-04-20 07:07:38	←	pieguy128 has quit (Remote host closed the connection)
2022-04-20 07:07:38	←	wagle has quit (Remote host closed the connection)
2022-04-20 07:07:38	→	inversed has joined #haskell
2022-04-20 07:07:38	←	dibblego has quit (Read error: Connection reset by peer)
2022-04-20 07:07:38	←	auri has quit (Remote host closed the connection)
2022-04-20 07:07:38	←	acowley has quit (Ping timeout: 272 seconds)
2022-04-20 07:07:38	←	loonycyborg has quit (Quit: ZNC - http://znc.sourceforge.net)
2022-04-20 07:07:51	←	agrosant has quit (Ping timeout: 272 seconds)
2022-04-20 07:07:51	←	wolfshappen has quit (Ping timeout: 272 seconds)
2022-04-20 07:07:51	←	Cheery_ has quit (Ping timeout: 272 seconds)
2022-04-20 07:07:54	→	avpx has joined #haskell
2022-04-20 07:07:59	→	wagle has joined #haskell
2022-04-20 07:08:04	→	loonycyborg_ has joined #haskell
2022-04-20 07:08:19	ℹ	dobblego is now known as dibblego
2022-04-20 07:08:20	→	auri has joined #haskell
2022-04-20 07:08:25	←	abastro has quit (Remote host closed the connection)
2022-04-20 07:08:37	→	wolfshappen has joined #haskell
2022-04-20 07:09:01	→	sweater2 has joined #haskell
2022-04-20 07:09:03	←	zaquest has quit (Remote host closed the connection)
2022-04-20 07:09:06	→	ezzieygu1wuf has joined #haskell
2022-04-20 07:09:22	→	Cheery has joined #haskell
2022-04-20 07:09:36	→	chronon_ has joined #haskell
2022-04-20 07:09:55	→	cross_ has joined #haskell
2022-04-20 07:10:04	→	mstksg has joined #haskell
2022-04-20 07:10:20	→	ncopa8 has joined #haskell
2022-04-20 07:10:56	→	infinity0_ has joined #haskell
2022-04-20 07:11:00	←	infinity0 has quit (Killed (strontium.libera.chat (Nickname regained by services)))
2022-04-20 07:11:00	ℹ	infinity0_ is now known as infinity0
2022-04-20 07:11:02	→	noctux1 has joined #haskell
2022-04-20 07:11:03	→	frost has joined #haskell
2022-04-20 07:11:10	→	dumptruckman_ has joined #haskell
2022-04-20 07:11:46	→	CodeKiwi has joined #haskell
2022-04-20 07:12:14	←	ezzieyguywuf has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:14	←	noctuks has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:14	←	Rembane has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:14	←	stvc has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:14	←	totte has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:14	←	mmaruseacph2 has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:14	←	Jonno_FTW has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:14	←	cross has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:14	←	chronon has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:14	←	edwtjo has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:14	←	jle` has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:14	←	hugo has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:14	←	gentauro has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:14	←	pooryorick has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:14	←	Igloo has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:17	←	inversed has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:17	←	sweater1 has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:17	←	xstill- has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:17	←	dumptruckman has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:17	←	akhesacaro has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:17	←	byorgey has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:17	ℹ	dumptruckman_ is now known as dumptruckman
2022-04-20 07:12:43	→	mmaruseacph2 has joined #haskell
2022-04-20 07:12:46	→	pooryorick has joined #haskell
2022-04-20 07:12:55	←	stefan-_ has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:55	←	Brandon_IX has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:55	←	absence has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:55	←	Ranhir has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:55	←	ncopa has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:55	←	DigitalKiwi has quit (Ping timeout: 272 seconds)
2022-04-20 07:12:55	ℹ	ncopa8 is now known as ncopa
2022-04-20 07:12:55	→	Igloo has joined #haskell
2022-04-20 07:13:03	→	absence has joined #haskell
2022-04-20 07:13:10	→	Rembane has joined #haskell
2022-04-20 07:13:15	→	zaquest has joined #haskell
2022-04-20 07:13:19	→	gentauro has joined #haskell
2022-04-20 07:13:23	→	akhesacaro has joined #haskell
2022-04-20 07:13:26	→	Brandon_IX has joined #haskell
2022-04-20 07:13:29	→	byorgey has joined #haskell
2022-04-20 07:13:33	→	agrosant has joined #haskell
2022-04-20 07:13:48	→	sm[i] has joined #haskell
2022-04-20 07:13:53	→	inversed has joined #haskell
2022-04-20 07:14:14	→	xstill- has joined #haskell
2022-04-20 07:14:25	→	acowley has joined #haskell
2022-04-20 07:14:37	→	stefan-_ has joined #haskell
2022-04-20 07:15:00	→	inversed_ has joined #haskell
2022-04-20 07:15:27	→	hugo- has joined #haskell
2022-04-20 07:15:39	→	Ranhir has joined #haskell
2022-04-20 07:16:36	←	wroathe has quit (Ping timeout: 276 seconds)
2022-04-20 07:16:41	→	Jonno_FTW has joined #haskell
2022-04-20 07:16:41	←	Jonno_FTW has quit (Changing host)
2022-04-20 07:16:41	→	Jonno_FTW has joined #haskell
2022-04-20 07:17:24	→	Ekho has joined #haskell
2022-04-20 07:18:32	→	totte has joined #haskell
2022-04-20 07:18:37	←	inversed has quit (Ping timeout: 272 seconds)
2022-04-20 07:21:03	→	edwtjo has joined #haskell
2022-04-20 07:21:04	←	edwtjo has quit (Changing host)
2022-04-20 07:21:04	→	edwtjo has joined #haskell
2022-04-20 07:21:22	←	lbseale_ has quit (Quit: Leaving)
2022-04-20 07:29:48	ℹ	irc: disconnected from server
2022-04-20 07:30:14	→	oxide has joined #haskell
2022-04-20 07:30:14	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-20 07:30:14	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-20 07:30:14	ℹ	Channel #haskell: 691 nicks (1 op, 0 voices, 690 normals)
2022-04-20 07:30:15	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-20 07:30:15	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-20 07:35:00	→	avpx_ has joined #haskell
2022-04-20 07:35:02	→	sjanssen has joined #haskell
2022-04-20 07:35:04	→	efertone_ has joined #haskell
2022-04-20 07:35:39	→	omantere_ has joined #haskell
2022-04-20 07:36:34	→	kaph_ has joined #haskell
2022-04-20 07:36:40	→	mjs2600_ has joined #haskell
2022-04-20 07:37:27	←	avpx has quit (Ping timeout: 272 seconds)
2022-04-20 07:37:27	→	inversed has joined #haskell
2022-04-20 07:37:27	←	efertone has quit (Ping timeout: 272 seconds)
2022-04-20 07:37:27	←	mjs2600 has quit (Ping timeout: 272 seconds)
2022-04-20 07:37:27	←	omantere has quit (Ping timeout: 272 seconds)
2022-04-20 07:37:27	←	inversed_ has quit (Ping timeout: 272 seconds)
2022-04-20 07:37:27	→	inversed_ has joined #haskell
2022-04-20 07:39:21	←	kaph has quit (Ping timeout: 276 seconds)
2022-04-20 07:39:58	←	inversed has quit (Ping timeout: 272 seconds)
2022-04-20 07:41:02	←	inversed_ has quit (Read error: Connection reset by peer)
2022-04-20 07:41:49	→	justsomeguy has joined #haskell
2022-04-20 07:44:19	→	inversed has joined #haskell
2022-04-20 07:46:40	→	lainon has joined #haskell
2022-04-20 07:46:48	←	lainon has quit (Remote host closed the connection)
2022-04-20 07:47:01	←	inversed has quit (Read error: Connection reset by peer)
2022-04-20 07:49:51	→	inversed has joined #haskell
2022-04-20 07:49:51	→	inversed_ has joined #haskell
2022-04-20 07:51:04	←	JordiGH has quit (Ping timeout: 260 seconds)
2022-04-20 07:51:16	←	RevoGen has quit (Remote host closed the connection)
2022-04-20 07:52:07	→	stvc has joined #haskell
2022-04-20 07:52:49	←	inversed has quit (Ping timeout: 272 seconds)
2022-04-20 07:53:52	→	jerry99 has joined #haskell
2022-04-20 07:54:18	←	redb has quit (Ping timeout: 276 seconds)
2022-04-20 07:55:53	←	[Leary] has quit (Ping timeout: 256 seconds)
2022-04-20 07:56:04	←	FinnElija has quit (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
2022-04-20 07:56:04	→	finn_elija has joined #haskell
2022-04-20 07:56:04	ℹ	finn_elija is now known as FinnElija
2022-04-20 07:56:24	→	AlexNoo_ has joined #haskell
2022-04-20 07:58:43	←	Alex_test has quit (Ping timeout: 256 seconds)
2022-04-20 07:58:53	←	AlexZenon has quit (Ping timeout: 246 seconds)
2022-04-20 07:59:03	→	merijn has joined #haskell
2022-04-20 07:59:47	←	AlexNoo has quit (Ping timeout: 240 seconds)
2022-04-20 08:01:41	→	yauhsien has joined #haskell
2022-04-20 08:01:54	←	inversed_ has quit (Ping timeout: 272 seconds)
2022-04-20 08:01:54	→	inversed has joined #haskell
2022-04-20 08:01:54	→	inversed_ has joined #haskell
2022-04-20 08:01:54	←	inversed has quit (Ping timeout: 272 seconds)
2022-04-20 08:02:35	→	Alex_test has joined #haskell
2022-04-20 08:02:45	←	Vajb has quit (Ping timeout: 276 seconds)
2022-04-20 08:02:59	→	AlexZenon has joined #haskell
2022-04-20 08:03:27	←	merijn has quit (Ping timeout: 240 seconds)
2022-04-20 08:05:31	→	redb has joined #haskell
2022-04-20 08:07:14	←	yauhsien has quit (Ping timeout: 256 seconds)
2022-04-20 08:08:39	←	inversed_ has quit (Ping timeout: 272 seconds)
2022-04-20 08:09:09	→	inversed has joined #haskell
2022-04-20 08:10:09	→	Vajb has joined #haskell
2022-04-20 08:11:08	←	alphabeta has quit (Read error: Connection reset by peer)
2022-04-20 08:24:23	→	[Leary] has joined #haskell
2022-04-20 08:24:45	→	chenqisu1 has joined #haskell
2022-04-20 08:25:36	→	benin has joined #haskell
2022-04-20 08:28:23	→	abastro has joined #haskell
2022-04-20 08:33:16	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-20 08:37:13	→	bitdex has joined #haskell
2022-04-20 08:52:21	←	stackdroid18 has quit (Quit: hasta la vista... tchau!)
2022-04-20 08:52:38	←	wroathe has quit (Quit: Lost terminal)
2022-04-20 08:55:50	→	wroathe has joined #haskell
2022-04-20 08:55:50	←	wroathe has quit (Changing host)
2022-04-20 08:55:50	→	wroathe has joined #haskell
2022-04-20 09:00:30	←	abastro has quit (Ping timeout: 256 seconds)
2022-04-20 09:03:51	→	Natch has joined #haskell
2022-04-20 09:26:48	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-20 09:27:09	jerry99	hmm, freenode still exists, I thought it died. same channels too
2022-04-20 09:27:12	→	Vajb has joined #haskell
2022-04-20 09:32:27	←	[itchyjunk] has quit (Remote host closed the connection)
2022-04-20 09:34:14	Axman6	it "exists" but last I saw had nearly no users at all
2022-04-20 09:34:48	jerry99	just idlers from what I'm seeing
2022-04-20 09:36:23	EvanR	freenode, a classical existence
2022-04-20 09:41:14	←	mtjm has quit (Remote host closed the connection)
2022-04-20 09:41:33	←	wroathe has quit (Ping timeout: 276 seconds)
2022-04-20 09:41:53	→	mtjm has joined #haskell
2022-04-20 09:42:04	sm	  a cautionary tale
2022-04-20 09:42:32	sm	a monument to hubris and sloppy governance
2022-04-20 09:43:28	→	cdman has joined #haskell
2022-04-20 09:43:28	←	cdman has quit (Changing host)
2022-04-20 09:43:28	→	cdman has joined #haskell
2022-04-20 09:43:38	⚡	sm imagines a buried city in the desert
2022-04-20 09:43:54	Axman6	The doublespeak that was going on from... I've forgotten his name... at the time was astounding
2022-04-20 09:44:56	→	sammelweis has joined #haskell
2022-04-20 09:45:17	Axman6	the stuff he's put on irc.com now is just as bad
2022-04-20 09:46:01	←	sammelweis_ has quit (Ping timeout: 250 seconds)
2022-04-20 09:48:31	→	slack1256 has joined #haskell
2022-04-20 09:59:50	→	merijn has joined #haskell
2022-04-20 10:04:07	→	rekahsoft has joined #haskell
2022-04-20 10:04:47	→	zyklotomic has joined #haskell
2022-04-20 10:05:17	zyklotomic	apologies if my google-fu isn't good enough, is https://hackage.haskell.org/package/random-1.2.1/docs/System-Random.html#v:mkStdGen determinstic across platforms?
2022-04-20 10:06:33	Axman6	According to the source it's just mkStdGen = StdGen . SM.mkSMGen . fromIntegral
2022-04-20 10:06:40	→	abastro has joined #haskell
2022-04-20 10:07:17	Axman6	which uses https://hackage.haskell.org/package/splitmix-0.1.0.4/docs/System-Random-SplitMix.html#v:mkSMGen
2022-04-20 10:07:25	Axman6	"Preferred way to deterministically construct SMGen."
2022-04-20 10:07:37	zyklotomic	ah yup, i'm on https://hackage.haskell.org/package/splitmix too
2022-04-20 10:08:10	zyklotomic	i see, thank you so much for confirming
2022-04-20 10:10:19	←	merijn has quit (Ping timeout: 240 seconds)
2022-04-20 10:11:04	←	abastro has quit (Remote host closed the connection)
2022-04-20 10:11:14	→	abastro has joined #haskell
2022-04-20 10:15:29	←	renzhi has quit (Ping timeout: 250 seconds)
2022-04-20 10:21:27	→	takuan has joined #haskell
2022-04-20 10:25:09	→	dyeplexer has joined #haskell
2022-04-20 10:25:37	→	yauhsien has joined #haskell
2022-04-20 10:27:12	→	coot has joined #haskell
2022-04-20 10:30:19	←	yauhsien has quit (Ping timeout: 240 seconds)
2022-04-20 10:33:10	→	deadmarshal_ has joined #haskell
2022-04-20 10:35:54	→	nattiestnate has joined #haskell
2022-04-20 10:43:56	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-20 10:45:06	→	bitdex has joined #haskell
2022-04-20 10:49:52	→	DNH has joined #haskell
2022-04-20 10:53:42	←	rekahsoft has quit (Ping timeout: 276 seconds)
2022-04-20 10:54:10	→	michalz has joined #haskell
2022-04-20 10:55:07	→	JimL has joined #haskell
2022-04-20 11:03:44	←	lemonsnicks has quit (Ping timeout: 248 seconds)
2022-04-20 11:06:36	←	nattiestnate has quit (Quit: WeeChat 3.5)
2022-04-20 11:06:50	→	nattiestnate has joined #haskell
2022-04-20 11:07:18	←	abastro has quit (Remote host closed the connection)
2022-04-20 11:07:43	←	nattiestnate has quit (Client Quit)
2022-04-20 11:08:40	→	abastro has joined #haskell
2022-04-20 11:08:57	→	lemonsnicks has joined #haskell
2022-04-20 11:11:23	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2022-04-20 11:11:49	←	zaquest has quit (Ping timeout: 250 seconds)
2022-04-20 11:13:28	→	tromp has joined #haskell
2022-04-20 11:14:00	←	chenqisu1 has quit (Remote host closed the connection)
2022-04-20 11:14:23	→	chenqisu1 has joined #haskell
2022-04-20 11:14:46	←	bliminse has quit (Quit: leaving)
2022-04-20 11:14:57	→	acidjnk has joined #haskell
2022-04-20 11:16:12	→	agumonkey has joined #haskell
2022-04-20 11:19:29	←	Batzy has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2022-04-20 11:19:53	→	Batzy has joined #haskell
2022-04-20 11:20:53	→	odnes has joined #haskell
2022-04-20 11:22:21	→	bliminse has joined #haskell
2022-04-20 11:24:39	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-20 11:31:23	←	phma has quit (Read error: Connection reset by peer)
2022-04-20 11:31:54	←	jeffz has quit (Remote host closed the connection)
2022-04-20 11:32:03	→	jeffz has joined #haskell
2022-04-20 11:32:22	←	deadmarshal_ has quit (Ping timeout: 256 seconds)
2022-04-20 11:32:22	→	phma has joined #haskell
2022-04-20 11:33:16	→	benin5 has joined #haskell
2022-04-20 11:35:11	←	benin has quit (Ping timeout: 256 seconds)
2022-04-20 11:35:12	ℹ	benin5 is now known as benin
2022-04-20 11:36:34	→	kaph__ has joined #haskell
2022-04-20 11:37:18	←	kaph_ has quit (Read error: Connection reset by peer)
2022-04-20 11:42:11	→	vorpuni has joined #haskell
2022-04-20 11:48:37	→	benin4 has joined #haskell
2022-04-20 11:50:00	←	chenqisu1 has quit (Remote host closed the connection)
2022-04-20 11:50:54	←	benin has quit (Ping timeout: 276 seconds)
2022-04-20 11:50:55	ℹ	benin4 is now known as benin
2022-04-20 11:51:27	→	chenqisu1 has joined #haskell
2022-04-20 11:55:41	←	echoreply has quit (Quit: WeeChat 2.8)
2022-04-20 11:56:16	→	slack6398 has joined #haskell
2022-04-20 11:56:32	→	echoreply has joined #haskell
2022-04-20 11:58:19	←	slack1256 has quit (Ping timeout: 240 seconds)
2022-04-20 11:59:27	→	tromp has joined #haskell
2022-04-20 12:00:55	→	slack1256 has joined #haskell
2022-04-20 12:01:56	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-20 12:02:59	←	slack6398 has quit (Ping timeout: 240 seconds)
2022-04-20 12:06:59	→	merijn has joined #haskell
2022-04-20 12:10:53	←	slack1256 has quit (Ping timeout: 256 seconds)
2022-04-20 12:10:54	←	agumonkey has quit (Ping timeout: 256 seconds)
2022-04-20 12:20:22	→	gehmehgeh has joined #haskell
2022-04-20 12:20:30	←	gehmehgeh has quit (Remote host closed the connection)
2022-04-20 12:21:11	→	gehmehgeh has joined #haskell
2022-04-20 12:22:51	←	kaph__ has quit (Read error: Connection reset by peer)
2022-04-20 12:23:40	→	lortabac has joined #haskell
2022-04-20 12:23:55	→	zer0bitz has joined #haskell
2022-04-20 12:30:15	←	anomal has quit (Remote host closed the connection)
2022-04-20 12:31:07	←	img has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-20 12:32:47	→	fendor has joined #haskell
2022-04-20 12:37:34	→	chele has joined #haskell
2022-04-20 12:40:59	←	merijn has quit (Ping timeout: 246 seconds)
2022-04-20 12:42:34	→	img has joined #haskell
2022-04-20 12:42:52	→	zeenk has joined #haskell
2022-04-20 12:46:50	→	Midjak has joined #haskell
2022-04-20 12:48:06	→	MajorBiscuit has joined #haskell
2022-04-20 12:50:35	→	Major_Biscuit has joined #haskell
2022-04-20 12:53:19	←	MajorBiscuit has quit (Ping timeout: 240 seconds)
2022-04-20 13:04:34	→	perrierjouet has joined #haskell
2022-04-20 13:07:36	←	shriekingnoise has quit (Quit: Quit)
2022-04-20 13:09:36	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-20 13:11:19	→	bitdex has joined #haskell
2022-04-20 13:13:42	→	ccntrq has joined #haskell
2022-04-20 13:15:36	→	merijn has joined #haskell
2022-04-20 13:17:51	→	anomal has joined #haskell
2022-04-20 13:18:52	→	machinedgod has joined #haskell
2022-04-20 13:19:18	←	odnes has quit (Ping timeout: 276 seconds)
2022-04-20 13:25:52	←	wagle has quit (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
2022-04-20 13:26:20	→	wagle has joined #haskell
2022-04-20 13:32:09	→	littlebobeep has joined #haskell
2022-04-20 13:33:02	→	bahamas has joined #haskell
2022-04-20 13:38:24	←	some02 has quit (Ping timeout: 248 seconds)
2022-04-20 13:39:09	→	bontaq has joined #haskell
2022-04-20 13:43:36	ℹ	AlexNoo_ is now known as AlexNoo
2022-04-20 13:45:21	→	sudden has joined #haskell
2022-04-20 13:46:31	←	sprout has quit (Ping timeout: 250 seconds)
2022-04-20 13:50:10	→	akegalj has joined #haskell
2022-04-20 13:51:16	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-20 13:52:49	→	bitdex has joined #haskell
2022-04-20 13:53:08	ggVGc	EvanR: I'm expecting to be on IRC for life :) Also, I'm expecting to write Makefiles for life...
2022-04-20 13:53:13	ggVGc	not all of those things are good things
2022-04-20 13:53:31	juri_	ggVGc: I compile haskell with a Makefile. ;)
2022-04-20 13:55:20	ggVGc	as in, you call ghc directly? Sounds cumbersome
2022-04-20 13:55:25	ggVGc	Why do you need to do that?
2022-04-20 13:55:53	abastro	Thought I could use `Makefile` to call cabal as well
2022-04-20 13:55:59	←	acidjnk has quit (Ping timeout: 240 seconds)
2022-04-20 13:56:03	abastro	Guess that is impossible?
2022-04-20 13:56:39	→	gurkenglas has joined #haskell
2022-04-20 13:57:02	ggVGc	I mean, you can use make to call anything, as makefiles can just be used as "task runners". But that's not really using make for what it is
2022-04-20 13:57:15	ggVGc	People abuse make as a task runner all the time
2022-04-20 13:57:30	ggVGc	if you call cabal from a makefile, then cabal is still the build system
2022-04-20 14:00:20	abastro	Ah I misinterpreted that part
2022-04-20 14:04:44	←	derelict has quit (Quit: bye)
2022-04-20 14:05:59	→	derelict has joined #haskell
2022-04-20 14:06:22	→	jgeerds has joined #haskell
2022-04-20 14:07:43	juri_	ggVGc: I call cabal.
2022-04-20 14:08:25	juri_	which is still painful. i grumble about it, and write dumb make stuff to work around cabal's duplicate information requirements.
2022-04-20 14:10:14	juri_	https://github.com/Haskell-Things/HSlice/blob/master/Makefile , if one wants to stare.
2022-04-20 14:11:18	←	bahamas has quit (Ping timeout: 276 seconds)
2022-04-20 14:11:35	←	tzh has quit (Quit: zzz)
2022-04-20 14:11:43	→	Unicorn_Princess has joined #haskell
2022-04-20 14:11:52	←	loonycyborg_ has quit (Quit: ZNC - http://znc.sourceforge.net)
2022-04-20 14:12:24	→	loonycyborg has joined #haskell
2022-04-20 14:12:36	←	redb has quit (Ping timeout: 276 seconds)
2022-04-20 14:13:29	→	CiaoSen has joined #haskell
2022-04-20 14:14:16	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-20 14:18:59	←	merijn has quit (Ping timeout: 240 seconds)
2022-04-20 14:22:25	→	cosimone has joined #haskell
2022-04-20 14:23:15	⚡	abastro <del>being dumb & writes Haskell script for this</del>
2022-04-20 14:26:16	→	mikoto-chan has joined #haskell
2022-04-20 14:29:17	→	odnes has joined #haskell
2022-04-20 14:29:41	Hecate	.2
2022-04-20 14:30:09	←	abastro has quit (Ping timeout: 276 seconds)
2022-04-20 14:32:32	←	chenqisu1 has quit (Quit: Leaving)
2022-04-20 14:34:15	←	akegalj has quit (Ping timeout: 256 seconds)
2022-04-20 14:35:11	←	jerry99 has quit (Quit: CGI:IRC (Session timeout))
2022-04-20 14:35:31	→	bliminse_ has joined #haskell
2022-04-20 14:36:39	←	bliminse has quit (Ping timeout: 276 seconds)
2022-04-20 14:37:06	→	mmhat has joined #haskell
2022-04-20 14:42:49	←	xkuru has quit (Read error: Connection reset by peer)
2022-04-20 14:43:42	→	redb has joined #haskell
2022-04-20 14:44:13	→	DNH has joined #haskell
2022-04-20 14:46:44	←	cosimone has quit (Remote host closed the connection)
2022-04-20 14:48:25	←	redb has quit (Ping timeout: 256 seconds)
2022-04-20 14:51:06	→	deadmarshal_ has joined #haskell
2022-04-20 14:56:23	→	cosimone has joined #haskell
2022-04-20 15:00:44	→	kritzefitz_ has joined #haskell
2022-04-20 15:01:03	←	kritzefitz has quit (Ping timeout: 250 seconds)
2022-04-20 15:06:39	ℹ	kritzefitz_ is now known as kritzefitz
2022-04-20 15:07:36	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-20 15:08:25	←	cosimone has quit (Remote host closed the connection)
2022-04-20 15:09:22	→	cosimone has joined #haskell
2022-04-20 15:09:54	→	bitdex has joined #haskell
2022-04-20 15:14:12	→	redb has joined #haskell
2022-04-20 15:15:17	←	anomal has quit (Remote host closed the connection)
2022-04-20 15:17:36	←	cosimone has quit (Ping timeout: 248 seconds)
2022-04-20 15:18:27	←	redb has quit (Ping timeout: 256 seconds)
2022-04-20 15:24:00	←	jmdaemon has quit (Ping timeout: 248 seconds)
2022-04-20 15:24:08	→	pagnol has joined #haskell
2022-04-20 15:24:55	→	cosimone has joined #haskell
2022-04-20 15:27:11	←	econo has quit (Quit: Connection closed for inactivity)
2022-04-20 15:30:56	←	cosimone has quit (Ping timeout: 248 seconds)
2022-04-20 15:33:11	←	deadmarshal_ has quit (Ping timeout: 246 seconds)
2022-04-20 15:34:39	→	deadmarshal_ has joined #haskell
2022-04-20 15:35:51	←	ccntrq has quit (Quit: ccntrq)
2022-04-20 15:37:45	←	xff0x_ has quit (Ping timeout: 276 seconds)
2022-04-20 15:37:54	→	ccntrq has joined #haskell
2022-04-20 15:38:40	→	sprout has joined #haskell
2022-04-20 15:39:08	←	CiaoSen has quit (Ping timeout: 260 seconds)
2022-04-20 15:39:14	←	Unicorn_Princess has quit (Remote host closed the connection)
2022-04-20 15:39:42	→	Moyst_ has joined #haskell
2022-04-20 15:41:59	←	Moyst has quit (Ping timeout: 240 seconds)
2022-04-20 15:45:39	→	redb has joined #haskell
2022-04-20 15:46:51	←	eggplantade has quit (Remote host closed the connection)
2022-04-20 15:49:59	←	redb has quit (Ping timeout: 246 seconds)
2022-04-20 15:53:08	→	ubert has joined #haskell
2022-04-20 15:56:53	→	cosimone has joined #haskell
2022-04-20 15:58:08	←	cosimone has quit (Remote host closed the connection)
2022-04-20 15:59:22	→	cosimone has joined #haskell
2022-04-20 16:01:28	→	chomwitt has joined #haskell
2022-04-20 16:01:55	→	redb has joined #haskell
2022-04-20 16:04:59	←	flukiluke has quit (Remote host closed the connection)
2022-04-20 16:05:58	→	flukiluke has joined #haskell
2022-04-20 16:06:19	←	Lord_of_Life has quit (Ping timeout: 240 seconds)
2022-04-20 16:06:50	→	Lord_of_Life has joined #haskell
2022-04-20 16:06:58	→	raehik has joined #haskell
2022-04-20 16:08:01	←	michalz has quit (Read error: Connection reset by peer)
2022-04-20 16:09:02	←	ubert has quit (Quit: ubert)
2022-04-20 16:09:14	→	ubert1 has joined #haskell
2022-04-20 16:09:56	←	redb has quit (Ping timeout: 260 seconds)
2022-04-20 16:11:19	←	dsrt^ has quit (Remote host closed the connection)
2022-04-20 16:11:32	ℹ	ubert1 is now known as ubert
2022-04-20 16:11:34	→	michalz has joined #haskell
2022-04-20 16:13:22	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-20 16:13:23	→	wybpip[m] has joined #haskell
2022-04-20 16:13:28	←	wybpip[m] has left #haskell
2022-04-20 16:15:12	←	sprout has quit (Ping timeout: 248 seconds)
2022-04-20 16:15:47	→	sprout has joined #haskell
2022-04-20 16:15:48	→	merijn has joined #haskell
2022-04-20 16:19:32	abastro[m]	What could I use to read a file alike stock `Read` instance reads?
2022-04-20 16:20:14	abastro[m]	The stock Read class is quite cumbersome (No error messages, constrained to String), but its format is beautiful
2022-04-20 16:20:43	abastro[m]	So I'd like to know how.
2022-04-20 16:21:10	→	redb has joined #haskell
2022-04-20 16:22:29	←	deadmarshal_ has quit (Ping timeout: 256 seconds)
2022-04-20 16:25:07	←	redb has quit (Ping timeout: 240 seconds)
2022-04-20 16:28:47	←	sprout has quit (Ping timeout: 240 seconds)
2022-04-20 16:31:56	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-20 16:31:58	→	jerry99 has joined #haskell
2022-04-20 16:32:45	→	Vajb has joined #haskell
2022-04-20 16:34:04	→	bitdex has joined #haskell
2022-04-20 16:39:32	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-20 16:40:01	→	littlebobeep has joined #haskell
2022-04-20 16:40:23	→	sprout has joined #haskell
2022-04-20 16:45:29	→	redb has joined #haskell
2022-04-20 16:47:14	→	bahamas has joined #haskell
2022-04-20 16:47:27	→	eggplantade has joined #haskell
2022-04-20 16:50:05	→	zebrag has joined #haskell
2022-04-20 16:50:33	←	merijn has quit (Ping timeout: 276 seconds)
2022-04-20 16:50:39	←	redb has quit (Ping timeout: 240 seconds)
2022-04-20 16:52:00	←	eggplantade has quit (Ping timeout: 248 seconds)
2022-04-20 16:53:20	→	tromp has joined #haskell
2022-04-20 16:58:29	←	littlebobeep has quit (Remote host closed the connection)
2022-04-20 16:58:45	→	littlebobeep has joined #haskell
2022-04-20 16:59:30	→	Unicorn_Princess has joined #haskell
2022-04-20 17:01:12	→	acidjnk has joined #haskell
2022-04-20 17:03:28	←	zeenk has quit (Quit: Konversation terminated!)
2022-04-20 17:03:59	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-20 17:05:21	←	jgeerds has quit (Ping timeout: 248 seconds)
2022-04-20 17:09:11	←	wz1000 has quit (Remote host closed the connection)
2022-04-20 17:09:59	←	zyklotomic has quit (Ping timeout: 240 seconds)
2022-04-20 17:12:11	→	zyklotomic has joined #haskell
2022-04-20 17:13:17	←	dminuoso has quit (Changing host)
2022-04-20 17:13:17	→	dminuoso has joined #haskell
2022-04-20 17:13:22	←	ridcully has quit (Remote host closed the connection)
2022-04-20 17:13:35	→	ridcully has joined #haskell
2022-04-20 17:14:57	←	sprout has quit (Ping timeout: 250 seconds)
2022-04-20 17:15:13	ℹ	bah_ is now known as bah
2022-04-20 17:15:57	→	sprout has joined #haskell
2022-04-20 17:16:05	→	razetime has joined #haskell
2022-04-20 17:16:39	razetime	is haskell matchmaker being hosted online somewhere?
2022-04-20 17:16:53	→	redb has joined #haskell
2022-04-20 17:19:16	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-20 17:21:31	→	CiaoSen has joined #haskell
2022-04-20 17:21:45	←	redb has quit (Ping timeout: 276 seconds)
2022-04-20 17:21:59	←	bahamas has quit (Ping timeout: 240 seconds)
2022-04-20 17:22:03	→	dhouthoo has joined #haskell
2022-04-20 17:24:20	→	littlebobeep has joined #haskell
2022-04-20 17:24:44	←	mjs2600_ has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-20 17:26:09	→	mjs2600 has joined #haskell
2022-04-20 17:31:57	→	abastro has joined #haskell
2022-04-20 17:33:59	←	acidjnk has quit (Ping timeout: 240 seconds)
2022-04-20 17:37:09	→	tromp has joined #haskell
2022-04-20 17:40:48	→	zeenk has joined #haskell
2022-04-20 17:42:56	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-20 17:44:14	→	zaquest has joined #haskell
2022-04-20 17:46:15	→	bitdex has joined #haskell
2022-04-20 17:47:05	→	JordiGH has joined #haskell
2022-04-20 17:49:26	→	redb has joined #haskell
2022-04-20 17:50:37	←	sprout has quit (Ping timeout: 240 seconds)
2022-04-20 17:51:30	→	merijn has joined #haskell
2022-04-20 17:51:42	→	xff0x_ has joined #haskell
2022-04-20 17:53:27	→	sprout has joined #haskell
2022-04-20 17:54:15	←	redb has quit (Ping timeout: 276 seconds)
2022-04-20 18:00:47	←	qwedfg has quit (Read error: Connection reset by peer)
2022-04-20 18:03:22	→	qwedfg has joined #haskell
2022-04-20 18:05:40	←	sprout has quit (Ping timeout: 260 seconds)
2022-04-20 18:05:56	←	ubert has quit (Remote host closed the connection)
2022-04-20 18:06:08	→	ubert has joined #haskell
2022-04-20 18:08:09	→	redb has joined #haskell
2022-04-20 18:08:23	→	sprout has joined #haskell
2022-04-20 18:10:52	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-20 18:12:26	←	redb has quit (Ping timeout: 246 seconds)
2022-04-20 18:13:36	→	kaph has joined #haskell
2022-04-20 18:15:36	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-20 18:16:30	→	redb has joined #haskell
2022-04-20 18:17:50	→	tromp has joined #haskell
2022-04-20 18:20:15	→	bitdex has joined #haskell
2022-04-20 18:20:56	←	redb has quit (Ping timeout: 256 seconds)
2022-04-20 18:22:51	→	redb has joined #haskell
2022-04-20 18:26:57	→	acidjnk has joined #haskell
2022-04-20 18:27:10	←	redb has quit (Ping timeout: 256 seconds)
2022-04-20 18:30:01	→	wz1000 has joined #haskell
2022-04-20 18:33:57	←	merijn has quit (Ping timeout: 256 seconds)
2022-04-20 18:34:13	←	ArshiaAghaei[m] has quit (Ping timeout: 240 seconds)
2022-04-20 18:34:27	→	ArshiaAghaei[m] has joined #haskell
2022-04-20 18:35:42	←	razetime has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2022-04-20 18:38:29	→	redb has joined #haskell
2022-04-20 18:43:00	←	acidjnk has quit (Ping timeout: 260 seconds)
2022-04-20 18:44:57	←	redb has quit (Ping timeout: 276 seconds)
2022-04-20 18:45:18	←	gurkenglas has quit (Ping timeout: 256 seconds)
2022-04-20 18:52:13	→	redb has joined #haskell
2022-04-20 18:55:13	←	jespada has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2022-04-20 18:55:24	←	kaph has quit (Read error: Connection reset by peer)
2022-04-20 18:57:01	→	ystael has joined #haskell
2022-04-20 18:58:24	←	redb has quit (Ping timeout: 248 seconds)
2022-04-20 19:00:56	ℹ	nerdypepper is now known as np
2022-04-20 19:01:41	←	wyrd has quit (Remote host closed the connection)
2022-04-20 19:04:12	→	romesrf has joined #haskell
2022-04-20 19:05:24	→	jespada has joined #haskell
2022-04-20 19:05:33	→	merijn has joined #haskell
2022-04-20 19:06:56	→	wyrd has joined #haskell
2022-04-20 19:07:42	→	redb has joined #haskell
2022-04-20 19:08:39	←	romesrf has quit (Ping timeout: 240 seconds)
2022-04-20 19:10:09	→	akegalj has joined #haskell
2022-04-20 19:12:29	←	redb has quit (Ping timeout: 256 seconds)
2022-04-20 19:13:09	→	anomal has joined #haskell
2022-04-20 19:13:43	→	wroathe has joined #haskell
2022-04-20 19:13:43	←	wroathe has quit (Changing host)
2022-04-20 19:13:43	→	wroathe has joined #haskell
2022-04-20 19:14:23	→	redb has joined #haskell
2022-04-20 19:15:20	←	raym has quit (Read error: Connection reset by peer)
2022-04-20 19:16:45	→	raym has joined #haskell
2022-04-20 19:18:53	←	redb has quit (Ping timeout: 260 seconds)
2022-04-20 19:19:24	←	vysn has quit (Ping timeout: 260 seconds)
2022-04-20 19:20:03	→	redb has joined #haskell
2022-04-20 19:20:27	←	CiaoSen has quit (Ping timeout: 240 seconds)
2022-04-20 19:22:22	→	[itchyjunk] has joined #haskell
2022-04-20 19:22:22	←	michalz has quit (Read error: Connection reset by peer)
2022-04-20 19:24:43	←	redb has quit (Ping timeout: 260 seconds)
2022-04-20 19:24:58	→	michalz has joined #haskell
2022-04-20 19:26:32	←	nihilazo has left #haskell (Leaving)
2022-04-20 19:27:34	←	troydm has quit (Quit: What is Hope? That all of your wishes and all of your dreams come true? To turn back time because things were not supposed to happen like that (C) Rau Le Creuset)
2022-04-20 19:31:05	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-20 19:31:26	←	Sgeo has quit (Read error: Connection reset by peer)
2022-04-20 19:33:42	←	bgamari has quit (Ping timeout: 276 seconds)
2022-04-20 19:34:32	→	shriekingnoise has joined #haskell
2022-04-20 19:35:10	→	redb has joined #haskell
2022-04-20 19:35:41	→	bgamari has joined #haskell
2022-04-20 19:36:48	←	justsomeguy has quit (Ping timeout: 248 seconds)
2022-04-20 19:37:33	←	wroathe has quit (Ping timeout: 260 seconds)
2022-04-20 19:38:18	→	Sgeo has joined #haskell
2022-04-20 19:42:09	→	mastarija has joined #haskell
2022-04-20 19:42:23	←	redb has quit (Ping timeout: 246 seconds)
2022-04-20 19:43:30	←	anomal has quit (Remote host closed the connection)
2022-04-20 19:43:47	←	koz has quit (Ping timeout: 240 seconds)
2022-04-20 19:45:13	→	koz has joined #haskell
2022-04-20 19:45:13	←	michalz has quit (Read error: Connection reset by peer)
2022-04-20 19:45:26	→	troydm has joined #haskell
2022-04-20 19:46:40	→	tromp has joined #haskell
2022-04-20 19:48:13	→	michalz has joined #haskell
2022-04-20 19:49:24	→	anomal has joined #haskell
2022-04-20 19:50:34	→	redb has joined #haskell
2022-04-20 19:50:55	→	rekahsoft has joined #haskell
2022-04-20 19:52:02	juri_	hey, how do i get my quickcheck tests of pure code to parallelize across multiple cores? -j, it and +RTS -N is doing nothing. 
2022-04-20 19:52:56	mastarija	Can maybe someone take a quick look at my type derivation tree for a simple program? I'm not sure I'm passing extended context correctly.
2022-04-20 19:53:00	mastarija	https://pastebin.com/e4f7SvEh
2022-04-20 19:53:07	geekosaur	wouldn't you have to use `par`?
2022-04-20 19:53:56	juri_	geekosaur: i was hoping they would come up with N random value sets, then call N copies of my code.
2022-04-20 19:54:22	geekosaur	I think QC is not smart enough to do that
2022-04-20 19:55:18	mastarija	The inference rules in question : https://imagebin.ca/v/6ePRnUrxveXy
2022-04-20 19:55:48	←	redb has quit (Ping timeout: 276 seconds)
2022-04-20 19:57:15	→	deadmarshal_ has joined #haskell
2022-04-20 19:57:27	←	mikoto-chan has quit (Ping timeout: 240 seconds)
2022-04-20 19:58:44	→	redb has joined #haskell
2022-04-20 19:59:39	→	xcombelle has joined #haskell
2022-04-20 19:59:42	→	mikoto-chan has joined #haskell
2022-04-20 20:00:07	←	zeenk has quit (Quit: Konversation terminated!)
2022-04-20 20:01:01	←	bitdex has quit (Quit: = "")
2022-04-20 20:02:48	←	redb has quit (Ping timeout: 240 seconds)
2022-04-20 20:04:53	←	JordiGH has left #haskell (Leaving)
2022-04-20 20:06:03	←	adanwan has quit (Quit: _)
2022-04-20 20:06:05	→	redb has joined #haskell
2022-04-20 20:07:37	→	adanwan has joined #haskell
2022-04-20 20:11:02	→	slack1256 has joined #haskell
2022-04-20 20:15:00	slack1256	Has anyone used the FFI to call function that should be run on a realtime scheduler?
2022-04-20 20:15:37	merijn	No, but depending on the details of what you mean, that's either easy or impossible :p
2022-04-20 20:15:53	→	bahamas has joined #haskell
2022-04-20 20:17:40	slack1256	I did a C program to read output from a digital scale chip (HX711). When reading bit-for-bit I got to respect some timings. Each reading is no longer that 100 micro sec.
2022-04-20 20:18:33	slack1256	I want to integrate that on a larger haskell program, I though about using the FFI. Do you see this as difficult? I can always "fork and pipe" to get the result back.
2022-04-20 20:18:39	merijn	slack1256: I'm pretty sure the POSIX realtime extensions are on a per-thread level, no?
2022-04-20 20:19:18	merijn	slack1256: You can always just fire up a new POSIX threat from Haskell and set things up there (or call a C function that sets up the pthread correctly)
2022-04-20 20:19:52	merijn	slack1256: To be pedantic: You can never *fork* and pipe, creating a new subprocess and pipe is reasonable, though
2022-04-20 20:20:07	←	albet70 has quit (Remote host closed the connection)
2022-04-20 20:21:24	slack1256	merijn: I think you are right, realtime scheduling seems to be process oriented. Having it at thread level would lead to priority inversion.
2022-04-20 20:21:56	merijn	slack1256: OS level scheduling happens at the thread level
2022-04-20 20:22:30	merijn	Even if GHC's runtime/threading supported realtime (it doesn't), the OS could randomly suspend your thread and you'd miss the deadline
2022-04-20 20:22:38	c_wraith	merijn: "You can always just fire up a new POSIX threat from Haskell" I'm not a huge fan of POSIX either, but that seems excessive. :P
2022-04-20 20:22:40	←	sprout has quit (Ping timeout: 248 seconds)
2022-04-20 20:23:08	merijn	posix realtime extensions need OS support to guarantee realtime scheduling behaviour and I'm pretty sure that can be done per thread
2022-04-20 20:23:58	→	mvk has joined #haskell
2022-04-20 20:25:37	←	redb has quit (Ping timeout: 250 seconds)
2022-04-20 20:26:11	←	natto has quit (Quit: a.)
2022-04-20 20:26:13	→	albet70 has joined #haskell
2022-04-20 20:28:33	→	sprout has joined #haskell
2022-04-20 20:29:34	→	natto has joined #haskell
2022-04-20 20:32:15	→	redb has joined #haskell
2022-04-20 20:35:09	→	gurkenglas has joined #haskell
2022-04-20 20:36:01	←	pagnol has quit (Ping timeout: 250 seconds)
2022-04-20 20:36:17	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-20 20:37:41	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-20 20:37:54	→	Vajb has joined #haskell
2022-04-20 20:39:06	→	waleee has joined #haskell
2022-04-20 20:41:42	←	akegalj has quit (Quit: leaving)
2022-04-20 20:41:59	←	Vajb has quit (Ping timeout: 240 seconds)
2022-04-20 20:42:46	→	Vajb has joined #haskell
2022-04-20 20:43:59	←	michalz has quit (Read error: Connection reset by peer)
2022-04-20 20:44:51	←	abastro has quit (Ping timeout: 256 seconds)
2022-04-20 20:47:19	→	michalz has joined #haskell
2022-04-20 20:47:25	←	sprout has quit (Ping timeout: 240 seconds)
2022-04-20 20:48:11	→	sprout has joined #haskell
2022-04-20 20:49:11	←	cdman has quit (Quit: Leaving)
2022-04-20 20:49:47	shapr	I had someone ask me yesterday why there's a Data.OldList
2022-04-20 20:50:09	shapr	my first guess was that it's from before Foldable was a thing, where the functions were specialized to just []
2022-04-20 20:50:16	shapr	does anyone have more info?
2022-04-20 20:51:28	lortabac	shapr: where did you find Data.OldList? I don't see it in the docs
2022-04-20 20:51:52	lortabac	do you mean GHC.OldList?
2022-04-20 20:52:10	shapr	aha, This legacy module provides access to the list-specialised operations of Data.List.
2022-04-20 20:52:12	shapr	yes, that one
2022-04-20 20:52:16	shapr	https://hackage.haskell.org/package/base-4.16.1.0/docs/GHC-OldList.html
2022-04-20 20:53:42	lortabac	yes, if I remember correctly it's the old Data.List
2022-04-20 20:54:12	shapr	thanks
2022-04-20 20:54:44	←	lortabac has quit (Quit: WeeChat 2.8)
2022-04-20 20:56:11	←	merijn has quit (Ping timeout: 256 seconds)
2022-04-20 20:56:58	abastro[m]	I wonder why they changed functions of Data.List to be polymorphic..
2022-04-20 20:57:42	→	slac72554 has joined #haskell
2022-04-20 20:58:21	lyxia	One could argue having name conflicts when you import both Data.List and Data.Foldable is not very nice.
2022-04-20 20:59:51	←	slack1256 has quit (Ping timeout: 250 seconds)
2022-04-20 21:00:21	→	lbseale has joined #haskell
2022-04-20 21:00:23	ℹ	slac72554 is now known as slack1256
2022-04-20 21:00:56	abastro[m]	Hmm
2022-04-20 21:01:36	abastro[m]	Doesn't container libraries go that route tho?
2022-04-20 21:01:53	abastro[m]	Prioritizing qualified imports
2022-04-20 21:03:41	→	romesrf has joined #haskell
2022-04-20 21:04:23	→	slac89659 has joined #haskell
2022-04-20 21:05:04	→	sammelweis_ has joined #haskell
2022-04-20 21:05:33	←	sammelweis has quit (Read error: Connection reset by peer)
2022-04-20 21:06:23	←	slack1256 has quit (Ping timeout: 246 seconds)
2022-04-20 21:06:48	←	waleee has quit (Ping timeout: 260 seconds)
2022-04-20 21:08:30	←	mastarija has quit (Quit: Leaving)
2022-04-20 21:11:06	ℹ	slac89659 is now known as slack1256
2022-04-20 21:12:19	→	_ht has joined #haskell
2022-04-20 21:12:35	←	bitmapper has quit (Quit: Connection closed for inactivity)
2022-04-20 21:12:56	lyxia	Sure. Hindsight is also 20/20.
2022-04-20 21:15:11	→	justsomeguy has joined #haskell
2022-04-20 21:15:23	→	eggplantade has joined #haskell
2022-04-20 21:15:27	←	bahamas has quit (Ping timeout: 256 seconds)
2022-04-20 21:18:46	→	waleee has joined #haskell
2022-04-20 21:23:47	←	waleee has quit (Ping timeout: 240 seconds)
2022-04-20 21:23:59	←	motherfsck has quit (Ping timeout: 240 seconds)
2022-04-20 21:25:02	→	mixfix41 has joined #haskell
2022-04-20 21:27:55	←	xff0x_ has quit (Ping timeout: 256 seconds)
2022-04-20 21:29:18	←	wz1000 has quit (Quit: WeeChat 2.8)
2022-04-20 21:29:30	→	wz1000 has joined #haskell
2022-04-20 21:30:07	←	TimothyBess[m] has quit (Quit: You have been kicked for being idle)
2022-04-20 21:31:26	→	foundationer76 has joined #haskell
2022-04-20 21:31:28	←	werneta has quit (Ping timeout: 260 seconds)
2022-04-20 21:35:27	←	eggplantade has quit (Remote host closed the connection)
2022-04-20 21:37:57	→	yauhsien has joined #haskell
2022-04-20 21:39:19	→	tromp has joined #haskell
2022-04-20 21:47:02	→	son0p has joined #haskell
2022-04-20 21:47:03	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-20 21:47:54	→	Vajb has joined #haskell
2022-04-20 21:49:41	←	ubert has quit (Remote host closed the connection)
2022-04-20 21:49:42	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-20 21:49:48	→	Vajb has joined #haskell
2022-04-20 21:52:17	←	romesrf has quit (Ping timeout: 256 seconds)
2022-04-20 21:58:02	→	bahamas has joined #haskell
2022-04-20 21:59:18	←	sprout has quit (Ping timeout: 260 seconds)
2022-04-20 21:59:33	←	jakalx has left #haskell
2022-04-20 22:02:00	←	foundationer76 has quit (Quit: Leaving)
2022-04-20 22:02:24	←	bahamas has quit (Ping timeout: 248 seconds)
2022-04-20 22:04:34	→	eggplantade has joined #haskell
2022-04-20 22:05:56	→	sprout has joined #haskell
2022-04-20 22:06:06	→	jakalx has joined #haskell
2022-04-20 22:07:34	→	motherfsck has joined #haskell
2022-04-20 22:07:47	←	justsomeguy has quit (Quit: WeeChat 3.4)
2022-04-20 22:12:09	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-20 22:13:03	→	tromp has joined #haskell
2022-04-20 22:13:49	←	sprout has quit (Ping timeout: 240 seconds)
2022-04-20 22:20:53	←	anomal has quit (Remote host closed the connection)
2022-04-20 22:21:55	→	`2jt has joined #haskell
2022-04-20 22:23:50	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-20 22:26:55	→	ph88 has joined #haskell
2022-04-20 22:27:08	←	ph88 has quit (Client Quit)
2022-04-20 22:30:15	←	`2jt has quit (Remote host closed the connection)
2022-04-20 22:31:25	→	pavonia_ has joined #haskell
2022-04-20 22:31:49	←	qwedfg has quit (Quit: ZNC - https://znc.in)
2022-04-20 22:32:26	geekosaur	polymorphic Data.List came along with Foldable/Traversable
2022-04-20 22:32:45	→	`2jt has joined #haskell
2022-04-20 22:32:46	geekosaur	since many of its functions are now methods of one or the other
2022-04-20 22:33:11	←	infinity0 has quit (Ping timeout: 246 seconds)
2022-04-20 22:33:11	←	sweater2 has quit (Ping timeout: 246 seconds)
2022-04-20 22:33:23	geekosaur	the original was saved as GHC.OldList to provide the method implementations for lists
2022-04-20 22:33:31	ℹ	irc: disconnected from server
2022-04-21 01:46:02	→	oxide has joined #haskell
2022-04-21 01:46:02	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-21 01:46:02	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-21 01:46:02	ℹ	Channel #haskell: 720 nicks (1 op, 0 voices, 719 normals)
2022-04-21 01:46:02	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-21 01:46:02	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-21 01:49:15	→	slack1256 has joined #haskell
2022-04-21 01:50:29	→	fendor_ has joined #haskell
2022-04-21 01:51:15	←	anomal has quit (Remote host closed the connection)
2022-04-21 01:52:39	←	fendor has quit (Ping timeout: 240 seconds)
2022-04-21 01:54:26	←	wootehfoot has quit (Quit: Leaving)
2022-04-21 01:55:36	→	merijn has joined #haskell
2022-04-21 01:55:46	→	tromp has joined #haskell
2022-04-21 01:58:19	←	TonyStone has quit (Remote host closed the connection)
2022-04-21 01:59:38	shapr	hpc: oh, I just saw your yawneda joke, ha!
2022-04-21 02:01:14	janus	@yowneda
2022-04-21 02:01:14	lambdabot	Unknown command, try @list
2022-04-21 02:02:02	ℹ	avpx_ is now known as avpx
2022-04-21 02:03:34	←	Midjak has quit (Quit: This computer has gone to sleep)
2022-04-21 02:03:39	←	neceve has quit (Ping timeout: 240 seconds)
2022-04-21 02:08:14	→	Major_Biscuit has joined #haskell
2022-04-21 02:10:36	←	mvk has quit (Ping timeout: 240 seconds)
2022-04-21 02:12:01	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-21 02:14:48	→	TonyStone has joined #haskell
2022-04-21 02:15:37	←	Batzy has quit (Quit: No Ping reply in 180 seconds.)
2022-04-21 02:17:04	→	Batzy has joined #haskell
2022-04-21 02:17:50	→	acarrico1 has joined #haskell
2022-04-21 02:19:57	→	tromp has joined #haskell
2022-04-21 02:20:16	→	eggplantade has joined #haskell
2022-04-21 02:23:29	←	Major_Biscuit has quit (Ping timeout: 246 seconds)
2022-04-21 02:24:31	←	eggplantade has quit (Ping timeout: 246 seconds)
2022-04-21 02:25:37	avpx	I'm trying to make a program that accepts an arbitrary number of command-line arguments (think like tar, ls, or other utilities that can take many files on the command line):
2022-04-21 02:25:56	avpx	./myprogram --verbose --someotheroption file1 file2
2022-04-21 02:26:45	avpx	I'm unclear how to do it in optparse-applicative. I can see how to get a (Parser String) for one argument using strArgument
2022-04-21 02:26:57	←	takuan has quit (Remote host closed the connection)
2022-04-21 02:27:42	avpx	https://paste.tomsmeding.com/J3ApjwyT
2022-04-21 02:28:16	←	jmdaemon has quit (Ping timeout: 260 seconds)
2022-04-21 02:29:09	avpx	One thought I had was to make a Parser [String] by chaining together an infinite number of Parser Strings. But I'm kind of worried that will make something infinite loop e.g. when printing --help
2022-04-21 02:29:52	geekosaur	did youu look at argument parsers?
2022-04-21 02:30:05	geekosaur	looks like they're intended for that use case
2022-04-21 02:30:08	←	merijn has quit (Ping timeout: 260 seconds)
2022-04-21 02:30:48	avpx	You mean this one? https://hackage.haskell.org/package/optparse-applicative-0.17.0.0/docs/Options-Applicative.html#v:argument
2022-04-21 02:31:26	avpx	Yeah I could see how to build a parser for *one* argument using that
2022-04-21 02:31:43	→	jmdaemon has joined #haskell
2022-04-21 02:32:51	geekosaur	"To accept an arbitrary number of arguments, combine the argument builder with either the many or some combinator" fromthe README
2022-04-21 02:33:02	avpx	Oh thannk you!
2022-04-21 02:33:10	geekosaur	(remember, some is 1 or more, many is 0 or more)
2022-04-21 02:34:04	monochrom	Yeah I used `some (strArgument ...)`
2022-04-21 02:34:13	avpx	Interesting, so under the hood it basically is "chaining together an arbitrary number of/Kleene star of strArguments"
2022-04-21 02:34:17	geekosaur	and you probably want strArgument unless you're doing special processing duringt parsing
2022-04-21 02:34:24	monochrom	Actually `some (strArgument (metavar "FILES" <> help "files to be tested"))` to be exact.
2022-04-21 02:34:40	←	fendor_ has quit (Remote host closed the connection)
2022-04-21 02:34:46	←	vorpuni has quit (Remote host closed the connection)
2022-04-21 02:35:14	monochrom	Although, it has been a few years, not sure whether it works under the latest version.
2022-04-21 02:36:11	avpx	It works perfectly. Thanks folks!
2022-04-21 02:38:35	→	Stotteren has joined #haskell
2022-04-21 02:40:45	→	dut has joined #haskell
2022-04-21 02:40:57	→	slac71531 has joined #haskell
2022-04-21 02:41:45	→	merijn has joined #haskell
2022-04-21 02:42:07	←	dut has quit (Read error: Connection reset by peer)
2022-04-21 02:42:29	→	dut has joined #haskell
2022-04-21 02:42:53	→	machinedgod has joined #haskell
2022-04-21 02:43:21	←	slack1256 has quit (Ping timeout: 276 seconds)
2022-04-21 02:43:41	hpc	shapr: :D
2022-04-21 02:45:59	←	Batzy has quit (Ping timeout: 240 seconds)
2022-04-21 02:46:13	←	merijn has quit (Ping timeout: 246 seconds)
2022-04-21 02:48:14	←	Guest27 has quit (Quit: Client closed)
2022-04-21 02:51:17	→	xkuru has joined #haskell
2022-04-21 02:53:47	←	deadmarshal_ has quit (Ping timeout: 240 seconds)
2022-04-21 02:57:24	→	Batzy has joined #haskell
2022-04-21 03:02:49	←	coot has quit (Ping timeout: 256 seconds)
2022-04-21 03:05:50	energizer	does this function have a common name? `foo f g a b c = g (f a b) (f b c)`
2022-04-21 03:05:53	→	deadmarshal_ has joined #haskell
2022-04-21 03:07:50	energizer	like `foo (<) (&&) 1 2 3` is $$ 1 < 2 < 3 $$
2022-04-21 03:09:27	dolio	I don't think so.
2022-04-21 03:10:40	energizer	what is a concise way of doing comparison chaining?
2022-04-21 03:11:17	Rembane	energizer: Monoids! 
2022-04-21 03:11:19	←	werneta has quit (Ping timeout: 256 seconds)
2022-04-21 03:12:18	monochrom	How does Monoid help?
2022-04-21 03:13:06	energizer	is there a shorter way than (a < b) && (b < c) ?
2022-04-21 03:13:29	energizer	perhaps using the fact that b is shared or that < is shared (or both)
2022-04-21 03:13:35	geekosaur	not without writing it yourself, I think
2022-04-21 03:14:03	geekosaur	conceivably Monoid could have been used to do it, but it got used for something more general instead
2022-04-21 03:14:04	Rembane	monochrom: Not at all, I mixed 'em up. :D
2022-04-21 03:14:34	Rembane	A fold perhaps, but for four variables it's not too useful. 
2022-04-21 03:15:38	←	ChaiTRex has quit (Remote host closed the connection)
2022-04-21 03:16:08	→	ChaiTRex has joined #haskell
2022-04-21 03:16:57	→	werneta has joined #haskell
2022-04-21 03:18:41	→	stackdroid18 has joined #haskell
2022-04-21 03:18:59	geekosaur	fold would only work if we had an Icon-like comparison operator setup (which would presumably be Ord a => Either () a)
2022-04-21 03:19:15	←	deadmarshal_ has quit (Ping timeout: 256 seconds)
2022-04-21 03:19:55	geekosaur	mm, more generally Either Ordering a
2022-04-21 03:20:38	energizer	what about by applying id and flip to (<) 
2022-04-21 03:21:34	monochrom	You mean id < flip ?
2022-04-21 03:22:07	monochrom	Ugh the vagueness of this discussion is too high for me.
2022-04-21 03:22:32	→	Guest18 has joined #haskell
2022-04-21 03:22:47	Rembane	This is not very elegant but could work: f x = all (uncurry (<)) $ zip xs $ tail xs
2022-04-21 03:23:29	←	Guest18 has quit (Client Quit)
2022-04-21 03:25:40	geekosaur	I think at this point I just write a bespoke inRange function
2022-04-21 03:25:56	geekosaur	rather than try to get tricky with operators
2022-04-21 03:26:15	geekosaur	come to think of it, there should already be one in Data.Ix
2022-04-21 03:26:21	hpc	:t on
2022-04-21 03:26:21	geekosaur	@hoogle inRange
2022-04-21 03:26:22	lambdabot	Data.Ix inRange :: Ix a => (a, a) -> a -> Bool
2022-04-21 03:26:22	lambdabot	GHC.Arr inRange :: Ix a => (a, a) -> a -> Bool
2022-04-21 03:26:22	lambdabot	GHC.Ix inRange :: Ix a => (a, a) -> a -> Bool
2022-04-21 03:26:22	lambdabot	(b -> b -> c) -> (a -> b) -> a -> a -> c
2022-04-21 03:26:39	hpc	:t over
2022-04-21 03:26:40	lambdabot	ASetter s t a b -> (a -> b) -> s -> t
2022-04-21 03:26:47	hpc	hmm, on is almost it
2022-04-21 03:28:29	←	Topsi has quit (Read error: Connection reset by peer)
2022-04-21 03:30:01	→	abiss27 has joined #haskell
2022-04-21 03:32:01	←	gehmehgeh has quit (Quit: Leaving)
2022-04-21 03:32:06	←	werneta has quit (Ping timeout: 276 seconds)
2022-04-21 03:38:30	→	mvk has joined #haskell
2022-04-21 03:39:37	abastro[m]	Actual range datatype would be great
2022-04-21 03:39:50	→	xff0x_ has joined #haskell
2022-04-21 03:40:17	abastro[m]	Which can act as foldable
2022-04-21 03:44:08	←	mikoto-chan has quit (Ping timeout: 250 seconds)
2022-04-21 03:45:39	←	[Leary] has quit (Ping timeout: 240 seconds)
2022-04-21 03:49:39	←	ubert has quit (Ping timeout: 240 seconds)
2022-04-21 03:49:57	→	ubert has joined #haskell
2022-04-21 03:53:42	←	__monty__ has quit (Quit: leaving)
2022-04-21 03:54:45	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-21 03:55:15	→	justsomeguy has joined #haskell
2022-04-21 03:57:04	←	Pickchea has quit (Quit: Leaving)
2022-04-21 03:58:48	←	acidjnk has quit (Ping timeout: 260 seconds)
2022-04-21 04:01:28	→	tromp has joined #haskell
2022-04-21 04:05:26	→	Guest27 has joined #haskell
2022-04-21 04:06:40	←	zyklotomic has quit (Ping timeout: 250 seconds)
2022-04-21 04:08:37	→	zyklotomic has joined #haskell
2022-04-21 04:09:39	Guest27	If I have a do-block of the form
2022-04-21 04:09:39	Guest27	```
2022-04-21 04:09:40	Guest27	a <- ma
2022-04-21 04:09:40	Guest27	b <- f a
2022-04-21 04:09:41	Guest27	someBigOperation b
2022-04-21 04:09:41	Guest27	```
2022-04-21 04:09:42	Guest27	Is this a memory leak? Is a reference to `a` being held when it isn't needed anymore?
2022-04-21 04:11:46	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-21 04:12:45	geekosaur	the compiler should see it isn't needed any more
2022-04-21 04:14:17	geekosaur	I wouldn't be surprised to see there be no reference, in fact: that could easily compile down to
2022-04-21 04:14:35	geekosaur	@. pl undo do { a <- ma; b <- f a; someBigOperation b }
2022-04-21 04:14:35	lambdabot	someBigOperation =<< f =<< ma
2022-04-21 04:14:38	→	renzhi has joined #haskell
2022-04-21 04:16:22	Guest27	geekosaur Thanks. If no optimizations were applied would that still be true? I'm unsure how to reason about reference lifetimes in Haskell in general
2022-04-21 04:16:52	geekosaur	it should still be true, I think
2022-04-21 04:17:12	geekosaur	things are held in scope by actual references, not just bindings
2022-04-21 04:17:32	geekosaur	like avg xs = sum xs / length xs holds xs because it's used twice
2022-04-21 04:17:47	geekosaur	but just having xs be there unused would not count as a reference
2022-04-21 04:18:00	geekosaur	it's not a "variable" that has space allocated for it or etc.
2022-04-21 04:18:26	Guest27	Thanks, that's a great explanation
2022-04-21 04:18:34	geekosaur	(well, with the right coercions so that typechecks)
2022-04-21 04:22:52	→	Guest91 has joined #haskell
2022-04-21 04:24:16	←	joo-_ has quit (Ping timeout: 248 seconds)
2022-04-21 04:24:53	←	redb has quit (Ping timeout: 260 seconds)
2022-04-21 04:24:59	Guest91	I am a systems administrator.  I wish to install the latest set of Haskell tools -- a custom list -- centrally on my servers.  I have so far found no way to do this; everything wants to install in my home directory.  I specifically do not want anything installed in ~/.ghc or ~/.cabal, as my goal at the end of this is 'rm -rf ~/.ghc ~/.cabal' and
2022-04-21 04:25:00	Guest91	have everything I install still present -- libraries, dependencies, documentation -- in a central directory somewhere else.  Is there documentation anywhere on how to do this?
2022-04-21 04:25:45	→	redb has joined #haskell
2022-04-21 04:25:55	←	Tuplanolla has quit (Quit: Leaving.)
2022-04-21 04:26:11	→	joo-_ has joined #haskell
2022-04-21 04:26:11	←	joo-_ has quit (Changing host)
2022-04-21 04:26:11	→	joo-_ has joined #haskell
2022-04-21 04:26:18	geekosaur	maerwald? ^^
2022-04-21 04:27:13	geekosaur	ghcup has some options that can make it work globally, and cabal install has a strongly disrecommended --global flag. the problem with --global is it pretty much locks you into the exact versions of libraries you have installed globally
2022-04-21 04:28:15	Guest91	This is for a class being taught; lock-in is desirable, as it makes consistent grading much easier.
2022-04-21 04:28:19	sclv	you can install ghc itself globally, and cabal the executable globally
2022-04-21 04:28:55	sclv	you can then cabal v1-install —global individual libs. However i really urge you not to
2022-04-21 04:29:21	Guest91	I've tried the --global flag in various flavors.  It keeps thinking it has everything installed in my home directory and only installs the new thing in the place I've specified with --prefix --installdir and --libdir.  It's also so far barfed on trying to install ghc there.
2022-04-21 04:29:26	sclv	Just install the tools globally and let cabal and ghc manage per user lib envs — thats how things are designed to worj
2022-04-21 04:29:29	sclv	Work
2022-04-21 04:30:12	Guest91	Per-user library environments are exactly the problem I'm trying to avoid.  Makes grading difficult when the instructor has no ready way to see what version the student has grabbed.  Everyone should be using the central libraries, nothing else.
2022-04-21 04:30:39	sclv	you can say they must specify their deps in a cabal file
2022-04-21 04:31:22	sclv	to install ghc globally dont use ghcup, use the installer directly from ghchq
2022-04-21 04:31:34	sclv	or just use a distro package manager
2022-04-21 04:31:46	Guest91	Distro version is too old, so installer it is.
2022-04-21 04:31:55	←	Batzy has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2022-04-21 04:32:03	sm	you could force them to use stack with a specific resolver and no extra-deps
2022-04-21 04:32:04	←	Guest27 has quit (Quit: Client closed)
2022-04-21 04:32:15	←	redb has quit (Ping timeout: 250 seconds)
2022-04-21 04:32:52	Guest91	Instructor has specifically told me to use cabal, not stack.  Last I tried building stack, it would not play at all with cabal, but that was probably 3-4 years ago.  Have things improved since then, that I can install both?
2022-04-21 04:32:58	sclv	or just give a skeleton project with a cabal file with pinned deps and tell them they can’t alter those deps
2022-04-21 04:33:41	→	redb has joined #haskell
2022-04-21 04:33:47	exarkun	Guest91: stack uses cabal, so depending on what you mean, they play quite well together.
2022-04-21 04:34:01	sm	you could also set up your own hackage server I guess and force them to use that. (Sounds like a lot of effort)
2022-04-21 04:34:23	→	Batzy has joined #haskell
2022-04-21 04:34:40	Guest91	'cabal install --global [umpty flags] stack' blew up in multiple ways I could not fix at the time.  Haven't tried this round, as the whole --global thing I left myself notes on from last time is no longer working.
2022-04-21 04:34:54	geekosaur	both of them use the same mechanism to whack ghc over the head and make it use the right librariesneither stack nor cabal can see the other's sandboxed libraries. this is irrelevant if you'reinstalling everything in the global db though
2022-04-21 04:35:14	geekosaur	whoops
2022-04-21 04:35:29	geekosaur	neither stack nor cabal can see the other's sandboxed libraries. this is irrelevant if you'reinstalling everything in the global db though
2022-04-21 04:36:09	Guest91	Is using the global db going to involve cabal and stack stepping on each other as I try to get a central install working?
2022-04-21 04:36:14	geekosaur	and anything you did a few years ago with cabal install now needs to be cabal v1-install
2022-04-21 04:36:16	sm	installing stack with cabal would be a waste of effort, there are many easier ways 
2022-04-21 04:36:38	geekosaur	(and I don't think stack can do global installs at all)
2022-04-21 04:36:47	monochrom	ghcup can get you cabal or stack or both.
2022-04-21 04:36:55	Guest91	I'm pretty sure the last time I invoked 'cabal install' in earnest was in 2018.
2022-04-21 04:36:59	sclv	you're getting too much conflicting advice here from everyone. but i think stack is a red herring
2022-04-21 04:37:04	monochrom	But there is no longer any --global
2022-04-21 04:37:23	sclv	the first step is a global ghc -- do that by installing ghc from ghchq
2022-04-21 04:37:36	sclv	second, get a cabal executable and place it in the global /bin
2022-04-21 04:37:36	←	tired has quit (Quit: /)
2022-04-21 04:37:41	sclv	finally, worry about the libs
2022-04-21 04:37:53	Guest91	Got it.  Will try that; many thanks.
2022-04-21 04:37:59	←	redb has quit (Ping timeout: 240 seconds)
2022-04-21 04:38:11	sm	well, it's an interesting problem with many solutions, none of them easy
2022-04-21 04:38:37	sclv	vis a vis the libs you can either "cabal v1-install --global LIBNAME" _or_ my preferred way would be to give every student a template cabal project with the allowed libs pinned and just tell them "don't alter em"
2022-04-21 04:38:45	Guest91	This is why I take notes.  But my notes are no good, which was leading me to getting a flat spot on my forehead.
2022-04-21 04:39:04	→	tired has joined #haskell
2022-04-21 04:39:16	sclv	a lot has changed in the last few years, so it requires thinking through the goals again based on the current state of tools
2022-04-21 04:39:22	←	geekosaur has quit (Remote host closed the connection)
2022-04-21 04:39:24	→	redb has joined #haskell
2022-04-21 04:39:25	←	Unicorn_Princess has quit (Remote host closed the connection)
2022-04-21 04:39:37	sm	haskell notes decay in about six months :)
2022-04-21 04:40:15	Guest91	...and these last worked in July 2018.  Well decayed by now.
2022-04-21 04:40:56	Guest91	OK, off to run the steps sclv listed.  Thanks!
2022-04-21 04:41:12	→	geekosaur has joined #haskell
2022-04-21 04:41:23	sm	I would suggest an amendment, start with ghcup. Why wouldn't you
2022-04-21 04:42:57	Guest91	I already tried ghcup.  It put ghc in my home directory along with all the other tools.  I then tried using the cabal that came with to 'cabal install --global [umpty path flags] ghc', which failed with a version conflict on the first dependency it tried.
2022-04-21 04:43:22	Guest91	Unfortunately, the specific error is out of my scrollback, so I'd have to rebuild that whole sequence to reproduce it.
2022-04-21 04:43:39	←	bontaq has quit (Ping timeout: 240 seconds)
2022-04-21 04:44:02	sm	Guest91: ah right, you don't want things installed in $HOME
2022-04-21 04:44:03	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2022-04-21 04:44:09	Guest91	Not even a little bit.
2022-04-21 04:44:15	←	redb has quit (Ping timeout: 256 seconds)
2022-04-21 04:44:42	sm	cabal install-ing ghc would be crazy, unless you are really intent on building everything from source ?
2022-04-21 04:45:10	→	redb has joined #haskell
2022-04-21 04:45:28	Guest91	That's certainly how I've done it in the past.  Using the distro elderly ghc to bootstrap my way up to latest, then grabbing a cabal binary and doing the same with that, then installing tools.
2022-04-21 04:45:45	jackdk	If you want this level of control, have you considered Nix?
2022-04-21 04:46:20	Guest91	I don't know Nix.  nix-shell ?
2022-04-21 04:46:21	sm	I see... what about GHC binaries from haskell.org/ghc ?
2022-04-21 04:46:49	Guest91	Part of the problem here is that I'm a sysadmin -- I am not a Haskell user.  I put stuff in place, other people use it.
2022-04-21 04:47:19	sm	maerwald: does/should ghcup have an option to install things elsewhere than $HOME ?
2022-04-21 04:49:17	Guest91	Hah, having just looked at the binary distros on haskell.org, my OS isn't there -- RHEL 8.  I suspect I'm going to have to build at least ghc from source regardless.
2022-04-21 04:49:47	Guest91	With luck my notes for that haven't decayed quite so badly.
2022-04-21 04:50:13	sm	note, `cabal install ghc` does not install GHC, but the `ghc` API package 
2022-04-21 04:50:33	Guest91	Aha, useful to know.  Thank you.  I was figuring it was the compiler itself.
2022-04-21 04:51:08	sm	and perhaps you don't need a RHEL 8 specific binary ? Just Linux (ARCH)
2022-04-21 04:51:22	→	chenqisu1 has joined #haskell
2022-04-21 04:51:46	Guest91	We put things in weird places to avoid disturbing the system binaries & libraries, so I often need to build to make sure that any baked-in paths are correct.
2022-04-21 04:52:44	sm	you have a fun job don't you :)
2022-04-21 04:53:10	Guest91	Academic sysadmin!  It has its moments.  Dealing with Haskell and cabal are... not my favorite, I must say.
2022-04-21 04:53:33	sm	I was going to throw docker into the mix... 
2022-04-21 04:54:27	←	redb has quit (Ping timeout: 256 seconds)
2022-04-21 04:54:29	Guest91	So far managed to avoid that one.  We use VMWare to good effect, and have handed user-level docker privs on specific machines to the three users who so far have required that.
2022-04-21 04:55:01	←	cawfee has quit (Ping timeout: 240 seconds)
2022-04-21 04:55:16	←	cosimone has quit (Ping timeout: 260 seconds)
2022-04-21 04:55:41	→	redb has joined #haskell
2022-04-21 04:55:43	→	cosimone` has joined #haskell
2022-04-21 04:55:59	⚡	geekosaur has been there
2022-04-21 04:56:09	Guest91	Yup, here's the ghc bootstrapping I was expecting.  Can't build 9.2.2 with my distro's version 8.2.2.  Interstitial versions, here I come...
2022-04-21 04:56:13	←	kronicma1 has quit (Ping timeout: 240 seconds)
2022-04-21 04:56:29	geekosaur	bindist shouldn't need to bootstrap
2022-04-21 04:56:35	geekosaur	did I miss something?
2022-04-21 04:56:40	sm	ohh so old. I would definitely be trying the 9.2.2 binaries
2022-04-21 04:57:09	geekosaur	(managed cluster and grad student machines for Carnegie Mellon ECE for a decade, around a decade ago)
2022-04-21 04:57:27	→	kronicma1 has joined #haskell
2022-04-21 04:57:35	geekosaur	ECE, so no compiler stuff unless you count Verilog
2022-04-21 04:58:19	Guest91	geekosaur no bindist for RHEL 8, and I'm already leery of our odd install pathing, so bootstrapping my way from 8.2.2 to 9.2.2.
2022-04-21 04:58:38	→	cawfee has joined #haskell
2022-04-21 04:59:37	monochrom	Are you sure the one for Fedora 27 isn't good enough?
2022-04-21 04:59:53	monochrom	Are you already on https://www.haskell.org/ghc/download_ghc_9_2_2.html#linux_x86_64 ?
2022-04-21 05:00:09	geekosaur	RHEL is usually fairly old, so probably it's not
2022-04-21 05:00:24	←	redb has quit (Ping timeout: 260 seconds)
2022-04-21 05:00:26	monochrom	OK yikes
2022-04-21 05:00:35	geekosaur	had to deal with RHEL at my last job, it makes Debian look like rolling release
2022-04-21 05:01:03	Guest91	RHEL 8 is based on Fedora 28, might work.  But I've done bootstrap in the past to good effect, so bootstrap here should -- I hope! -- still work.
2022-04-21 05:01:07	monochrom	Perhaps CentOS 7 is closer?
2022-04-21 05:01:18	sm	since you already succeeded installing a modern ghc with ghcup: there's also the option of doing that and just moving it
2022-04-21 05:01:26	→	redb has joined #haskell
2022-04-21 05:01:30	geekosaur	that should be since CentOS is more or less free RHEL
2022-04-21 05:01:36	geekosaur	*should be OK
2022-04-21 05:02:54	Guest91	sm: no baked in paths to worry about?  I've been bit by that on various occasions.
2022-04-21 05:03:02	monochrom	At any rate they are built for you to just say "./configure --prefix=/foo/bar && make install" so you can choose whatever /foo/bar you want, maximum flexibility.
2022-04-21 05:03:17	sm	I don't know, but I sure would give it a try before bootstrapping through multiple GHC versions on an ancient system
2022-04-21 05:03:35	monochrom	There are install-time bake-in paths.
2022-04-21 05:03:49	geekosaur	ghc doesn't bake in paths, and you'll find that an installed ghc uses wrapper scripts which pass -B options to find itself
2022-04-21 05:03:50	monochrom	But they are install-time.
2022-04-21 05:04:13	geekosaur	at need you can edit the wrappers
2022-04-21 05:04:58	geekosaur	oh, package db registrations have baked-in paths also. but you can edit the registration files and then run ghc-pkg recache --global
2022-04-21 05:05:13	←	zebrag has quit (Quit: Konversation terminated!)
2022-04-21 05:05:29	monochrom	That gets out of hand quickly.
2022-04-21 05:05:38	Guest91	Eh, I have 8.6.5 building with 8.2.2.  Next up: 8.10.7, and then 9.2.2.  I vaguely remember not being able to skip quite so many versions last time I did this.
2022-04-21 05:05:51	geekosaur	hopefully it's only done once while provisioning the machine
2022-04-21 05:06:01	monochrom	I mean for those of us who deeply understand how GHC organizes itself it looks "trivial".
2022-04-21 05:06:28	→	ec has joined #haskell
2022-04-21 05:07:13	geekosaur	Guest91, somewhere mid-8.x ghc went from "support one prior version" to "support two prior versions"
2022-04-21 05:07:28	Guest91	That'd explain it.  Much appreciated!
2022-04-21 05:07:36	monochrom	I use ghcup but I pull a GHCUP_INSTALL_BASE_PREFIX=/usr/local trick. :)
2022-04-21 05:07:37	←	redb has quit (Ping timeout: 246 seconds)
2022-04-21 05:07:54	sm	monochrom: ah, there it is, nice
2022-04-21 05:08:00	←	zer0bitz has quit (Ping timeout: 248 seconds)
2022-04-21 05:08:04	Guest91	Hm!  I may try that separately while this interstitial is building.
2022-04-21 05:08:25	Guest91	It'll probably still leave me a pile of things in ~/.ghc and ~/.cabal.
2022-04-21 05:08:34	monochrom	But then it means /usr/local/.ghcup (generally $GHCUP_INSTALL_BASE_PREFIX/.ghcup).
2022-04-21 05:08:40	Guest91	Ooog.
2022-04-21 05:08:56	monochrom	But no matter, I then set up symlinks to get nicer directory names.
2022-04-21 05:09:10	→	redb has joined #haskell
2022-04-21 05:09:57	Guest91	Our install paths are weird because we install everything into a per-version directory and then symlink into a common bin & lib & other stuff directory set.  Lets us keep old versions around in case someone is relying on them.
2022-04-21 05:10:07	geekosaur	yup
2022-04-21 05:10:17	monochrom	ghcup does that internally too.
2022-04-21 05:10:35	Guest91	But many things look askance at being installed into a directory like /usr/local/ghc-9.2.2, which is why I'm leery of binary distros.
2022-04-21 05:10:54	←	jgeerds has quit (Ping timeout: 276 seconds)
2022-04-21 05:11:05	geekosaur	ghc's "binary distro" has a configure script
2022-04-21 05:11:06	monochrom	Although, to be fair, "does it internally" also means not according to your established scheme.
2022-04-21 05:11:18	sclv	i'd also check if the prof really wants 9.2.2 -- the stable-tho-somewhat-old version still in production many places is 8.10.7
2022-04-21 05:11:42	sm	+1
2022-04-21 05:11:44	jackdk	I am aware of at least one academic institution that's still teaching with 8.6.5
2022-04-21 05:11:48	Guest91	Latest release by request!  That much I know.
2022-04-21 05:11:53	geekosaur	and 9.2.2 did change some details of parsing
2022-04-21 05:12:06	monochrom	Yes you should make the prof decide on the version and sign it black and white and witnessed by a lawyer and a justice of peace.
2022-04-21 05:12:16	geekosaur	notably spaces arenowrequires in someplaces where they were optional
2022-04-21 05:12:24	→	yauhsien has joined #haskell
2022-04-21 05:12:26	geekosaur	*are now required
2022-04-21 05:12:30	Guest91	The prof is quite good about being consistent on these things.  One of our best customers in that regard.
2022-04-21 05:12:53	sm	but hey, if 9.2.2 is acceptable it's faster and probably nicer all round and why not save a bunch of students some pain
2022-04-21 05:13:18	Guest91	And I'll have 8.10.7 as an interstitial anyhow, so I might as well keep it.
2022-04-21 05:13:56	←	redb has quit (Ping timeout: 260 seconds)
2022-04-21 05:14:54	→	redb has joined #haskell
2022-04-21 05:15:22	monochrom	But yeah putting different versions in different directories is a good idea.
2022-04-21 05:16:06	←	raehik has quit (Ping timeout: 276 seconds)
2022-04-21 05:16:09	jackdk	When you have time, I think you should give Nix (not the whole OS, just the package manager/build tool/floor wax)  a good look - its whole point is that everything it builds lives under /nix/store, with a lot of work going into hardcoding rpaths etc such that it's not depending on system libs etc. Not sure if they support RHEL 8 though.
2022-04-21 05:16:32	Guest91	jackdk: I'll have a look while I'm building these interstitials.
2022-04-21 05:16:52	←	yauhsien has quit (Ping timeout: 250 seconds)
2022-04-21 05:16:53	←	russruss has quit (Ping timeout: 250 seconds)
2022-04-21 05:17:09	→	cynomys has joined #haskell
2022-04-21 05:17:11	jackdk	It also seems like a useful thing to have for reproducible science
2022-04-21 05:17:44	geekosaur	downside is you end up with Nix-flavored duplicates of half your system libraries
2022-04-21 05:17:54	Guest91	Yup.  Another reason I dislike the default behavior of cabal putting everything in $HOME.
2022-04-21 05:18:04	geekosaur	as a sysadmin I find that annoying
2022-04-21 05:18:43	monochrom	I'm a sysadmin-wannabe so I have some of that sentiment too.
2022-04-21 05:19:12	monochrom	Although, I'm sysadminning for just one user (myself) so I am not really impacted.
2022-04-21 05:19:28	←	redb has quit (Ping timeout: 250 seconds)
2022-04-21 05:20:23	sibnull[m]	I'm a developer, and NixOS is great, because all the sysamin stuff is basically outsourced to professionals, and all I do is reproduce their curated configuration on my computer.
2022-04-21 05:20:41	→	redb has joined #haskell
2022-04-21 05:23:12	geekosaur	I think nix*os* makes more sense than nix itself
2022-04-21 05:23:58	geekosaur	specifically because nix has to duplicate the host system to ensure its curated configuration is used
2022-04-21 05:25:07	←	redb has quit (Ping timeout: 250 seconds)
2022-04-21 05:26:26	→	redb has joined #haskell
2022-04-21 05:30:12	Guest91	One other thing I did notice while messing around with the cabal that ghcup gave me: the --enable-tests and --run-tests flags no longer worked for things I told cabal to install.  Is that something that works again in the latest version of cabal, or is that set of flags now repurposed?
2022-04-21 05:30:16	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-21 05:30:45	←	redb has quit (Ping timeout: 250 seconds)
2022-04-21 05:30:46	sclv	old behavior is with v1-install
2022-04-21 05:30:54	←	jerry99 has quit (Quit: CGI:IRC (Ping timeout))
2022-04-21 05:31:00	sclv	new behavior is a totally different workflow.
2022-04-21 05:31:02	Guest91	OK, guess I'll be using v1-install a lot then.
2022-04-21 05:31:24	sclv	right. new is an extremely per-user workflow
2022-04-21 05:31:46	Guest91	Or is there a way in the new workflow to get the test suites to run for the thing I'm installing and all the deps too?
2022-04-21 05:31:51	sclv	you should warn the prof that in a few years we will be new behavior only
2022-04-21 05:32:03	Guest91	Will do.
2022-04-21 05:32:12	→	redb has joined #haskell
2022-04-21 05:32:33	sclv	in the new workflow “installing” a lib is a fiction. its project based and manages lib deps behind the scenes
2022-04-21 05:32:34	Guest91	Also, I fear that if I'm doing this again in four years, I may end up bald from ripping out my own hair.
2022-04-21 05:32:58	Guest91	Ooof.  No obvious way to work with a central setup there at all.
2022-04-21 05:33:21	sclv	they should move to a teaching plan based on projects with fixed deps, and not try to centrally manage libs
2022-04-21 05:33:43	sclv	it doesn’t make things pedagogically harder, and teaches a modern approach
2022-04-21 05:33:44	←	xff0x_ has quit (Read error: Connection reset by peer)
2022-04-21 05:34:08	geekosaur	note that a stack resolver or a cabal freeze file will do almost all of what your prof wants, and both work with a modern workflow
2022-04-21 05:34:33	←	stackdroid18 has left #haskell
2022-04-21 05:34:36	Guest91	Got bit years ago like that with Ruby when CVE-2009-1904 dropped and one web app we had was carrying around its own version of every gem instead of using system ones.  We ended up just killing the app outright.
2022-04-21 05:34:39	sclv	Or just giving a skeleton project with the deps already fixed
2022-04-21 05:34:49	sclv	just have the students git clone it and off they fo
2022-04-21 05:35:59	geekosaur	Guest91, you'd be bitten by that with Haskell anyway because of cross-module inlining
2022-04-21 05:36:15	geekosaur	even if you replace the global one you *still* have to recompile everything that uses it
2022-04-21 05:36:26	Guest91	Hah, I am warned.  So far nobody's tried putting up Haskell code on the web server, though.
2022-04-21 05:37:57	→	jerry99 has joined #haskell
2022-04-21 05:38:04	Guest91	Python, Ruby, Perl, PHP, JavaScript, sure.  No Haskell.
2022-04-21 05:38:09	←	abiss27 has quit (Quit: hasta la vista... tchau!)
2022-04-21 05:40:39	←	gurkenglas has quit (Ping timeout: 240 seconds)
2022-04-21 05:45:21	←	chomwitt has quit (Ping timeout: 248 seconds)
2022-04-21 05:46:32	Guest91	Thanks for all the help and pointers.  I'm going to leave this build of 8.6.5 running and pick up tomorrow.
2022-04-21 05:47:40	←	pretty_dumm_guy has quit (Quit: WeeChat 3.5)
2022-04-21 05:47:43	←	ralu1 has quit (Ping timeout: 256 seconds)
2022-04-21 05:49:22	←	mvk has quit (Ping timeout: 250 seconds)
2022-04-21 05:51:44	←	euandreh has quit (Ping timeout: 260 seconds)
2022-04-21 06:01:36	←	machinedgod has quit (Ping timeout: 276 seconds)
2022-04-21 06:06:58	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-21 06:08:25	→	wroathe has joined #haskell
2022-04-21 06:08:26	←	wroathe has quit (Changing host)
2022-04-21 06:08:26	→	wroathe has joined #haskell
2022-04-21 06:10:56	→	deadmarshal_ has joined #haskell
2022-04-21 06:11:37	monochrom	The problem with cabal/stack-project-based at school for student accounts is that schools give student accounts very limited disk quota.
2022-04-21 06:11:57	monochrom	I have had students exceeding disk quota just by a "cabal update".
2022-04-21 06:12:44	monochrom	The error message did not say that either, too.
2022-04-21 06:13:35	monochrom	Multiple students got that problem before the nth one cleverly discovered it was a "disk out of space" error.
2022-04-21 06:15:25	monochrom	My solution for now is that I don't involve anything that doesn't come with GHC.  Hell I rolled my own unit-test library and include it in every assignment.  "cabal repl --build-depends HUnit" is out of the question, see above.
2022-04-21 06:15:54	←	deadmarshal_ has quit (Ping timeout: 276 seconds)
2022-04-21 06:16:05	sclv	gak
2022-04-21 06:16:21	sclv	nix would work but its awful heavyweight
2022-04-21 06:17:09	monochrom	My previous solution was I did manual dependency chasing for HUnit and prepared a zip file containing HUnit's tarball, its dependencies' tarballs, and a shell script.  The shell script called "runghc Setup.hs build/copy/register" in the right order.  At least it took much less disk space.
2022-04-21 06:17:34	sclv	i think that a "local hackage" would be like that but nicer
2022-04-21 06:17:37	monochrom	I am not my school's sysadmin, I cannot just decree "nix".
2022-04-21 06:18:06	sclv	there's a tool that's in development iirc that makes bundling up a "local hackage" easier
2022-04-21 06:18:37	sclv	students would still have the hit of building at least once the libs they needed and the on-disk binary cost of that
2022-04-21 06:18:54	sclv	but thats much smaller than the footprint of a full 01-index tarball
2022-04-21 06:20:55	←	mmhat has quit (Quit: WeeChat 3.5)
2022-04-21 06:22:36	dolio	Isn't cabal v1-update going to blow up the disks, too?
2022-04-21 06:23:08	dolio	It's the same list of packages.
2022-04-21 06:23:12	sclv	with a local hackage it won't :-)
2022-04-21 06:23:25	←	lbseale has quit (Read error: Connection reset by peer)
2022-04-21 06:23:32	sclv	otherwise i think the idea is all these other solutions avoid ever having to update, by having all the packages distributed directly
2022-04-21 06:23:33	dolio	Well, right.
2022-04-21 06:23:34	→	euandreh has joined #haskell
2022-04-21 06:23:58	dolio	Yeah, you can use a project file with all the dependencies in a repo or something.
2022-04-21 06:24:32	dolio	Presumably.
2022-04-21 06:29:20	jackdk	monochrom: yeah, this disk quota issue will become a serious problem for teaching Haskell soon, unless you want to confine yourself to included packages.
2022-04-21 06:29:55	→	xff0x_ has joined #haskell
2022-04-21 06:30:49	jackdk	dolio: The way one academic institution did this was the lab base image did a bunch of cabal v1-install of everything the courses needed at start of semester, all at once, and this provided packages in the global db so cabal v2-install would solve and find them
2022-04-21 06:31:41	→	yauhsien has joined #haskell
2022-04-21 06:31:58	←	kristjansson has quit (Excess Flood)
2022-04-21 06:32:20	→	kristjansson has joined #haskell
2022-04-21 06:32:22	→	Vajb has joined #haskell
2022-04-21 06:34:14	→	dmenz has joined #haskell
2022-04-21 06:34:33	abastro[m]	Oh, Haskell build tool is still not ideal
2022-04-21 06:34:50	←	jerry99 has quit (Quit: CGI:IRC)
2022-04-21 06:35:09	→	jerry99 has joined #haskell
2022-04-21 06:35:20	abastro[m]	Btw can I maintain a cabal store independent of user?
2022-04-21 06:35:41	abastro[m]	So that I would have other users capable of accessing it
2022-04-21 06:36:05	monochrom	cabal assumes write permissions fundamentally.
2022-04-21 06:36:38	abastro[m]	Ouch
2022-04-21 06:37:09	monochrom	Hell, cabal assumes single user fundamentally.
2022-04-21 06:37:33	abastro[m]	Why is cabal so bas
2022-04-21 06:37:36	→	cesar- has joined #haskell
2022-04-21 06:37:39	←	yauhsien has quit (Remote host closed the connection)
2022-04-21 06:37:40	abastro[m]	s/bas/bad
2022-04-21 06:38:05	abastro[m]	It somewhat wastes disk spaces
2022-04-21 06:38:23	jackdk	Because package management is a hard problem
2022-04-21 06:38:45	→	yauhsien has joined #haskell
2022-04-21 06:38:59	abastro[m]	At least ability to link the built packages would be great..
2022-04-21 06:39:23	sclv	a read only store is perfectly reasonable
2022-04-21 06:39:35	sclv	there’s just some manual plumbing involved
2022-04-21 06:40:14	abastro[m]	Wish "Read only stores linked from personal store" was easier
2022-04-21 06:40:26	←	dmenz has quit (Quit: Leaving)
2022-04-21 06:41:23	→	vysn has joined #haskell
2022-04-21 06:41:28	abastro[m]	If haskell had more manpower, cabal would not be in such a state, right?
2022-04-21 06:41:36	abastro[m]	I heard of how great rust package manager is
2022-04-21 06:42:12	sclv	there’s virtually no demand for the thing you’re asking for
2022-04-21 06:42:18	→	werneta has joined #haskell
2022-04-21 06:42:59	sclv	academic labs are a very strange and particular case. it would be good to support them better, but its not a normal development workfloe
2022-04-21 06:43:23	abastro[m]	Well, I mean, even I want to limit disk space usage
2022-04-21 06:43:33	monochrom	01-index.tar is the fundamental bottleneck. (Build products are dwarved by that.) I don't know that cargo or pip or gem... are really doing better there.
2022-04-21 06:43:54	sclv	but what you are asking for is unrelated to single user disk usage
2022-04-21 06:43:55	abastro[m]	Oh?
2022-04-21 06:43:59	abastro[m]	How big is 01-index.tar
2022-04-21 06:44:30	←	yauhsien has quit (Ping timeout: 276 seconds)
2022-04-21 06:44:36	abastro[m]	I thought built packages take the most of the space
2022-04-21 06:44:40	abastro[m]	But index file?
2022-04-21 06:44:44	sclv	a fixed shared store is about one computer with Many users
2022-04-21 06:44:47	←	neurocyte8614492 has quit (Ping timeout: 240 seconds)
2022-04-21 06:45:20	abastro[m]	Yep
2022-04-21 06:45:31	sclv	no modern compiled language goes easy on disk afaik.
2022-04-21 06:45:49	abastro[m]	I mean
2022-04-21 06:45:54	davean	abastro[m]: Why do you think this isn't how all the other ones work?
2022-04-21 06:45:56	sclv	and arguably even noncompiled languages get nutty with large dep trees
2022-04-21 06:46:06	abastro[m]	One could perhaps have one for each computer
2022-04-21 06:46:42	sclv	one what? one store? if you have a single user on each computer, you Do
2022-04-21 06:46:54	abastro[m]	And then one computer for many users shared
2022-04-21 06:47:05	sclv	*facepalm*
2022-04-21 06:47:20	abastro[m]	I mean, why would disk quotas be small here
2022-04-21 06:47:51	abastro[m]	Isn't it because each computer is shared by lots of users?
2022-04-21 06:48:25	sclv	Yes. and as i said a teaching lab is a unique case, not common to any standard modern development env
2022-04-21 06:48:58	abastro[m]	Sorry but could you explain more about teaching lab?
2022-04-21 06:49:12	→	andrey has joined #haskell
2022-04-21 06:49:45	abastro[m]	I thought of a typical cloud environment running on server where each computers are shared by many users
2022-04-21 06:49:56	abastro[m]	Guess this case is a bit different?
2022-04-21 06:50:09	sclv	a typical cloud env is nothing like that
2022-04-21 06:50:29	abastro[m]	Eh?
2022-04-21 06:50:50	abastro[m]	I mean, it's not like one user is assigned entire computer
2022-04-21 06:51:11	sclv	the “cloud” usually gives individual users/orgs an entire virtual computer that secretly is running on shared hardware
2022-04-21 06:51:28	←	andrey_ has quit (Ping timeout: 248 seconds)
2022-04-21 06:51:30	sclv	you don’t have a linux install with 100+ accounts able to login
2022-04-21 06:51:43	abastro[m]	Yea
2022-04-21 06:51:44	abastro[m]	Yep.. oh wait
2022-04-21 06:51:44	abastro[m]	Isn't it the same situation?
2022-04-21 06:51:46	abastro[m]	Oh right
2022-04-21 06:51:49	abastro[m]	Wait
2022-04-21 06:52:08	abastro[m]	Isn't virtualization exactly for this thing
2022-04-21 06:53:17	abastro[m]	Virtual computer giving illusion of owning the computer when it doesn't, actually.
2022-04-21 06:54:00	monochrom	Here is the real difference between cloud and school student account:
2022-04-21 06:54:56	monochrom	The cloud gives you 100GB disk space and charges you I don't know a hundred dollars per year maybe.
2022-04-21 06:55:04	abastro[m]	Now I realized what you mean, so in the academic lab, one computer OS comes with many users... whhhh
2022-04-21 06:55:24	monochrom	The schoold gives you 100MB disk space and charges you I don't know ten thousand dollars per year maybe. >_<
2022-04-21 06:55:32	sclv	lmao
2022-04-21 06:55:58	abastro[m]	Wat
2022-04-21 06:55:59	abastro[m]	Ten thousands lul
2022-04-21 06:56:15	abastro[m]	"We don't have that money, it needs to go into constructing buildings"
2022-04-21 06:56:24	abastro[m]	Tho I think lots of startups begin with free version which doesn't give much disk space
2022-04-21 06:56:39	monochrom	I think it's 7000 cdn$ in Canadian universities.  And the US is strictly more expensive.
2022-04-21 06:56:42	abastro[m]	Also free versions does provide like 10GB at least
2022-04-21 06:56:55	abastro[m]	Or was ir 100GB
2022-04-21 06:56:59	abastro[m]	Now I guess I see
2022-04-21 06:57:16	abastro[m]	Disk spaces are cheap but uni cannot somehow afford it. Wow?
2022-04-21 06:57:56	abastro[m]	(I thought my uni was more conventional, it often gives us 10GB disk space at least as well. Enough to run small haskell project)
2022-04-21 06:58:00	sclv	Willing to bet that cloud providers somehow have fewer middle manager administrators than campuses these days
2022-04-21 06:58:23	monochrom	Anyway it's somewhat below $10k in Canada and somewhat above $10k in US so let's say the "average" is $10k heh.  (yay ballparks.)
2022-04-21 06:59:01	monochrom	To be fair, $10k at a university also buys you courses, not just a computer account.
2022-04-21 06:59:17	monochrom	Right? I want to make money too!
2022-04-21 06:59:36	monochrom	And my TAs want to make money too.
2022-04-21 06:59:42	monochrom	It all adds up quickly.
2022-04-21 07:00:05	monochrom	But I just like the comedy of comparing cloud with school accounts >:)
2022-04-21 07:02:55	←	xkuru has quit (Read error: Connection reset by peer)
2022-04-21 07:03:19	←	vysn has quit (Ping timeout: 240 seconds)
2022-04-21 07:05:13	←	[itchyjunk] has quit (Ping timeout: 246 seconds)
2022-04-21 07:05:54	←	Me-me has quit (Quit: Disconnecting on purpose.)
2022-04-21 07:05:57	→	AlexNoo_ has joined #haskell
2022-04-21 07:06:23	→	Me-me has joined #haskell
2022-04-21 07:07:07	←	AlexNoo has quit (Read error: Connection reset by peer)
2022-04-21 07:07:25	abastro[m]	Well you do need to state the problematic side
2022-04-21 07:07:32	abastro[m]	BUILDINGS!!
2022-04-21 07:07:40	abastro[m]	More Buildings!!!
2022-04-21 07:07:47	⚡	abastro[m] sigh
2022-04-21 07:07:54	←	Me-me has quit (Changing host)
2022-04-21 07:07:54	→	Me-me has joined #haskell
2022-04-21 07:08:16	abastro[m]	Once heard 40~50% of uni budget goes into buildings
2022-04-21 07:09:33	→	[itchyjunk] has joined #haskell
2022-04-21 07:13:19	→	littlebobeep has joined #haskell
2022-04-21 07:15:47	→	ralu1 has joined #haskell
2022-04-21 07:15:56	←	vicfred has quit (Quit: Leaving)
2022-04-21 07:21:25	←	TonyStone has quit (Remote host closed the connection)
2022-04-21 07:30:30	ℹ	irc: disconnected from server
2022-04-21 07:31:01	→	oxide has joined #haskell
2022-04-21 07:31:01	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-21 07:31:01	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-21 07:31:01	ℹ	Channel #haskell: 699 nicks (1 op, 0 voices, 698 normals)
2022-04-21 07:31:01	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-21 07:31:02	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-21 07:31:36	←	waleee has quit (Ping timeout: 260 seconds)
2022-04-21 07:31:53	←	EvanR has quit (Quit: Leaving)
2022-04-21 07:33:49	→	eggplantade has joined #haskell
2022-04-21 07:36:23	←	Guest91 has quit (Quit: Client closed)
2022-04-21 07:42:35	janus	abastro[m]: doesn't seem like that is true for iowa: https://fmb.fo.uiowa.edu/university-wide-budgeted-expenditures-fy2020
2022-04-21 07:42:48	←	earthy has quit (Ping timeout: 260 seconds)
2022-04-21 07:43:10	→	[Leary] has joined #haskell
2022-04-21 07:43:22	janus	BLDG RENEWAL is part of the red 2.5% at the bottom
2022-04-21 07:43:22	abastro	Oh, TIL that was regional one.
2022-04-21 07:43:39	abastro	Interesting that how salaries are of huge portion there
2022-04-21 07:44:03	abastro	Perhaps higher salary standard affecting?
2022-04-21 07:44:12	←	JordiGH has quit (Ping timeout: 260 seconds)
2022-04-21 07:47:29	ℹ	irc: disconnected from server
2022-04-21 07:47:54	→	oxide has joined #haskell
2022-04-21 07:47:54	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-21 07:47:54	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-21 07:47:54	ℹ	Channel #haskell: 696 nicks (1 op, 0 voices, 695 normals)
2022-04-21 07:47:55	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-21 07:47:55	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-21 07:48:12	←	jinsun__ has quit (Ping timeout: 276 seconds)
2022-04-21 07:48:47	→	frost has joined #haskell
2022-04-21 07:49:00	→	aman_ has joined #haskell
2022-04-21 07:50:10	→	JordiGH has joined #haskell
2022-04-21 07:52:13	→	bitdex has joined #haskell
2022-04-21 07:55:17	Axman6	Universities literally exist to emply people to do research, so it's no surprise their major expenditure is salaries
2022-04-21 07:55:37	←	FinnElija has quit (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
2022-04-21 07:55:37	→	finn_elija has joined #haskell
2022-04-21 07:55:37	ℹ	finn_elija is now known as FinnElija
2022-04-21 07:56:20	→	lifter has joined #haskell
2022-04-21 07:56:22	→	earthy has joined #haskell
2022-04-21 07:58:35	lifter	Am I correct that there really isn't a practical application of the "fix" function given that there is nothing you can do with "fix" that you cannot accomplish by some other, more idiomatic means?
2022-04-21 07:58:38	←	Hash has quit (Read error: Connection reset by peer)
2022-04-21 08:00:18	→	Hash has joined #haskell
2022-04-21 08:00:49	Axman6	it's just a convenience function, it's Haskell equivalent of the Y-combinator
2022-04-21 08:01:23	Axman6	sometimes you don't want to name a function to make a recursive function, and that's exactly what fix allows you to do
2022-04-21 08:01:51	lifter	Ah OK I can see that I think.
2022-04-21 08:01:51	Axman6	let f x = ... f ... === fix (\f x -> ...f ...)
2022-04-21 08:03:12	lifter	Well you've still named your recursive function "f", right?
2022-04-21 08:03:46	Axman6	only within the lambda - f is not a name that is useable by any other code
2022-04-21 08:04:33	dolio	> fix ?? 5 $ \fac n -> if n == 0 then 1 else n * fac (n-1)
2022-04-21 08:04:35	lambdabot	 120
2022-04-21 08:05:08	Axman6	> fix ('a':) -- recursion without having to use any names at all
2022-04-21 08:05:10	lambdabot	 "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...
2022-04-21 08:05:22	←	tcard has quit (Quit: Leaving)
2022-04-21 08:05:28	lifter	I'm aware of those examples. Just searching for a practical application.3
2022-04-21 08:05:51	dolio	That is a practical example.
2022-04-21 08:05:56	→	Sgeo_ has joined #haskell
2022-04-21 08:06:01	dolio	They define macros in Scheme for that.
2022-04-21 08:06:26	Axman6	but like many functions in the prelude, fix is just a convenience for those times when it makes sense to use, just like flip, const, ap, id (hmmm, I wonder of those are turing complete...)
2022-04-21 08:06:38	lifter	I mean you could just do `['a','a'..]`
2022-04-21 08:06:40	←	JordiGH has quit (Ping timeout: 248 seconds)
2022-04-21 08:06:46	dibblego	why use map f instead of foldr ((:) . f) []? Just searching for a practical application of map
2022-04-21 08:06:56	Axman6	that actually produces a different value in memory
2022-04-21 08:06:57	zzz	dolio: what's the `??` ?
2022-04-21 08:07:06	dolio	It's infix flip.
2022-04-21 08:07:31	Axman6	the fix version is a self recursive list, whereas the ['a','a'..] version will build up a larger and larger list as more of it is avaluated
2022-04-21 08:07:55	ℹ	irc: disconnected from server
2022-04-21 08:08:52	→	oxide has joined #haskell
2022-04-21 08:08:52	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-21 08:08:52	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-21 08:08:52	ℹ	Channel #haskell: 700 nicks (1 op, 0 voices, 699 normals)
2022-04-21 08:08:53	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-21 08:08:53	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-21 08:09:00	←	Sgeo has quit (Ping timeout: 276 seconds)
2022-04-21 08:09:26	Axman6	in ['a','a'..], each cons cell is distinct, they are not the same location in memory
2022-04-21 08:09:47	lifter	Well OK I can see that what's happening under the hood is different. Wow that's pretty wild.
2022-04-21 08:10:09	Axman6	@src repeat
2022-04-21 08:10:09	lambdabot	repeat x = xs where xs = x : xs
2022-04-21 08:10:29	Axman6	if you had used repeat the result is identical to the fix version
2022-04-21 08:10:39	Axman6	repeat x = fix (x:)
2022-04-21 08:11:01	lifter	OK that's interesting.
2022-04-21 08:11:49	Axman6	if you think about it in terms of C, it's like having a linked list struct which points to itself
2022-04-21 08:13:46	Sgeo_	Is there a name for the concept that s -> a is the same as (a->r)->s->r? Something with continuations or continuation passing style?
2022-04-21 08:14:28	dolio	The Yoneda lemma.
2022-04-21 08:14:49	Axman6	yoneda a bigger lemma
2022-04-21 08:15:31	←	eggplantade has quit (Remote host closed the connection)
2022-04-21 08:16:02	Sgeo_	Thank you
2022-04-21 08:16:50	ℹ	irc: disconnected from server
2022-04-21 08:17:10	→	oxide has joined #haskell
2022-04-21 08:17:10	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-21 08:17:10	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-21 08:17:10	ℹ	Channel #haskell: 698 nicks (1 op, 0 voices, 697 normals)
2022-04-21 08:17:10	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-21 08:17:11	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-21 08:18:02	ℹ	irc: disconnected from server
2022-04-21 08:18:47	→	oxide has joined #haskell
2022-04-21 08:18:47	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-21 08:18:47	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-21 08:18:47	ℹ	Channel #haskell: 698 nicks (1 op, 0 voices, 697 normals)
2022-04-21 08:18:47	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-21 08:18:48	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-21 08:20:03	ℹ	irc: disconnected from server
2022-04-21 08:20:32	→	oxide has joined #haskell
2022-04-21 08:20:32	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-21 08:20:32	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-21 08:20:32	ℹ	Channel #haskell: 698 nicks (1 op, 0 voices, 697 normals)
2022-04-21 08:20:33	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-21 08:20:33	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-21 08:21:06	ℹ	aman_ is now known as aman
2022-04-21 08:26:54	ℹ	irc: disconnected from server
2022-04-21 08:31:41	→	oxide has joined #haskell
2022-04-21 08:31:41	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-21 08:31:41	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-21 08:31:41	ℹ	Channel #haskell: 698 nicks (1 op, 0 voices, 697 normals)
2022-04-21 08:31:41	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-21 08:31:41	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-21 08:32:12	→	JordiGH has joined #haskell
2022-04-21 08:35:03	ℹ	irc: disconnected from server
2022-04-21 08:35:29	→	oxide has joined #haskell
2022-04-21 08:35:29	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-21 08:35:29	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-21 08:35:29	ℹ	Channel #haskell: 699 nicks (1 op, 0 voices, 698 normals)
2022-04-21 08:35:30	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-21 08:35:30	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-21 08:38:35	lifter	jackdk: Yeah that's a neat example, thanks!
2022-04-21 08:39:43	jackdk	lifter: yw. I sometimes find it nicer than the combinators in `monad-loops`, as you let control fall out the bottom of the function when you're done
2022-04-21 08:53:56	Axman6	I wonder how hard it would be to write something which gives you the same semantics for looping as continue, break etc. in other languages; loop \continue break -> do ... when done break; when shouldSkip continue; ...
2022-04-21 08:54:13	Axman6	feels doable using Cont(T)
2022-04-21 08:56:09	Axman6	https://hackage.haskell.org/package/loops-0.2.0.2/docs/Control-Monad-Loop.html
2022-04-21 08:57:27	←	JordiGH has quit (Ping timeout: 260 seconds)
2022-04-21 08:57:52	←	pavonia has quit (Quit: Bye!)
2022-04-21 09:00:46	→	eggplantade has joined #haskell
2022-04-21 09:01:44	→	yauhsien has joined #haskell
2022-04-21 09:02:38	←	cesar- has quit (Ping timeout: 250 seconds)
2022-04-21 09:03:30	→	tcard has joined #haskell
2022-04-21 09:05:58	←	yauhsien has quit (Ping timeout: 246 seconds)
2022-04-21 09:20:06	←	wyrd has quit (Quit: leaving)
2022-04-21 09:28:29	ℹ	irc: disconnected from server
2022-04-21 09:28:56	→	oxide has joined #haskell
2022-04-21 09:28:56	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-21 09:28:56	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-21 09:28:56	ℹ	Channel #haskell: 697 nicks (1 op, 0 voices, 696 normals)
2022-04-21 09:28:56	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-21 09:28:56	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-21 09:30:50	ℹ	CodeKiwi is now known as DigitalKiwi
2022-04-21 09:31:01	albet70	how you pronounce >=>?
2022-04-21 09:31:13	dolio	That's a fish.
2022-04-21 09:31:20	dibblego	"are you gonna go my way?"
2022-04-21 09:32:13	albet70	so f >=> g is f fish g?
2022-04-21 09:32:42	dibblego	are you, f, gonna go my, g, way?
2022-04-21 09:32:57	←	[itchyjunk] has quit (Read error: Connection reset by peer)
2022-04-21 09:34:10	ℹ	irc: disconnected from server
2022-04-21 09:34:33	→	oxide has joined #haskell
2022-04-21 09:34:33	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-21 09:34:33	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-21 09:34:33	ℹ	Channel #haskell: 696 nicks (1 op, 0 voices, 695 normals)
2022-04-21 09:34:34	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-21 09:34:34	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-21 09:38:19	←	abastro has quit (Ping timeout: 240 seconds)
2022-04-21 09:38:57	albet70	>=> is Kleisli arrow?
2022-04-21 09:39:06	dibblego	kleisli composition
2022-04-21 09:42:01	albet70	which scenario would use Kleisli composition? I barely used it ever
2022-04-21 09:42:38	dibblego	every time you need a function of type Monad m => (a -> m b) -> (b -> m c) -> a -> m 
2022-04-21 09:43:51	albet70	fish = \g, f -> \x, y -> f (g x y) y
2022-04-21 09:44:55	dibblego	fish f g = \a -> f a >>= g
2022-04-21 09:45:42	albet70	without (), it's easy to misunderstand
2022-04-21 09:46:35	albet70	\a->(f a >>= g) or (\a -> f a) >>= g
2022-04-21 09:46:55	dibblego	fish f g = (\a -> ((f a) >>= g))
2022-04-21 09:46:58	zzz	albet70: one of the most.familiar cases might be the composition of functions of the type a -> Either b a
2022-04-21 09:52:01	→	cdman has joined #haskell
2022-04-21 09:52:02	←	cdman has quit (Changing host)
2022-04-21 09:52:02	→	cdman has joined #haskell
2022-04-21 09:53:07	→	yauhsien has joined #haskell
2022-04-21 09:55:58	←	lifter has quit ()
2022-04-21 10:00:27	→	deadmarshal_ has joined #haskell
2022-04-21 10:01:13	→	pilyn has joined #haskell
2022-04-21 10:12:45	←	jerry99 has quit (Quit: CGI:IRC (EOF))
2022-04-21 10:13:12	←	pilyn has quit (Remote host closed the connection)
2022-04-21 10:13:51	→	pilyn has joined #haskell
2022-04-21 10:15:56	→	vysn has joined #haskell
2022-04-21 10:17:17	→	bahamas has joined #haskell
2022-04-21 10:21:16	→	EvanR has joined #haskell
2022-04-21 10:25:39	←	renzhi has quit (Ping timeout: 240 seconds)
2022-04-21 10:27:32	←	img has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-21 10:28:58	→	img has joined #haskell
2022-04-21 10:33:07	zzz	is there any reason why we have to surround operators in parens when asking ghci for their type?
2022-04-21 10:34:15	←	yauhsien has quit (Remote host closed the connection)
2022-04-21 10:34:22	zzz	@type $
2022-04-21 10:34:23	lambdabot	error:
2022-04-21 10:34:24	lambdabot	    parse error on input ‘$’
2022-04-21 10:34:24	lambdabot	    Perhaps you intended to use TemplateHaskell
2022-04-21 10:35:28	←	son0p has quit (Ping timeout: 248 seconds)
2022-04-21 10:35:46	zzz	:info $ works just fine
2022-04-21 10:36:22	zzz	i guess :type demands an expression
2022-04-21 10:36:53	←	pilyn has quit (Quit: Leaving)
2022-04-21 10:39:04	←	wroathe has quit (Ping timeout: 246 seconds)
2022-04-21 10:39:16	→	yauhsien has joined #haskell
2022-04-21 10:43:24	abastro[m]	:t $
2022-04-21 10:43:25	lambdabot	error:
2022-04-21 10:43:25	lambdabot	    parse error on input ‘$’
2022-04-21 10:43:25	lambdabot	    Perhaps you intended to use TemplateHaskell
2022-04-21 10:43:27	←	earthy has quit (Ping timeout: 240 seconds)
2022-04-21 10:43:29	abastro[m]	Oh
2022-04-21 10:44:20	jackdk	zzz: I think asking `:t` for the type of anything but an expression is an ill-posed question
2022-04-21 10:44:24	→	earthy has joined #haskell
2022-04-21 10:44:39	←	yauhsien has quit (Ping timeout: 256 seconds)
2022-04-21 10:44:50	dsal	:t ($)
2022-04-21 10:44:51	lambdabot	(a -> b) -> a -> b
2022-04-21 10:45:05	jackdk	% :info id
2022-04-21 10:45:06	yahb	jackdk: id :: a -> a -- Defined in `GHC.Base'
2022-04-21 10:45:15	jackdk	% :info $
2022-04-21 10:45:15	yahb	jackdk: ($) :: (a -> b) -> a -> b -- Defined in `GHC.Base'; infixr 0 $
2022-04-21 10:45:27	jackdk	% infixr 0 id
2022-04-21 10:45:28	yahb	jackdk: ; <interactive>:124:10: error: parse error on input `id'
2022-04-21 10:45:35	jackdk	% infixr 0 `id`
2022-04-21 10:45:35	yahb	jackdk: ; <interactive>:125:10: error:; The fixity signature for `id' lacks an accompanying binding; (The fixity signature must be given where `id' is declared)
2022-04-21 10:45:40	jackdk	darn
2022-04-21 10:46:59	→	jbarot has joined #haskell
2022-04-21 10:47:47	ℹ	jbarot is now known as pawikan_
2022-04-21 10:48:00	pawikan_	Hi. I'm learning haskell.
2022-04-21 10:48:36	←	redb has quit (Ping timeout: 240 seconds)
2022-04-21 10:48:47	dragestil	Are there any modern successors of haskell-indexer or haskell-code-explorer? both seem unmaintained now.  And haskell-language-server does not support cross-library find-definition either.
2022-04-21 10:49:25	→	Neon has joined #haskell
2022-04-21 10:49:49	←	pawikan_ has quit (Client Quit)
2022-04-21 10:54:39	→	redb has joined #haskell
2022-04-21 10:55:39	→	yauhsien has joined #haskell
2022-04-21 10:59:23	←	redb has quit (Ping timeout: 256 seconds)
2022-04-21 11:02:29	→	takuan has joined #haskell
2022-04-21 11:03:55	←	deadmarshal_ has quit (Ping timeout: 256 seconds)
2022-04-21 11:05:18	←	aman has quit (Remote host closed the connection)
2022-04-21 11:05:58	→	aman has joined #haskell
2022-04-21 11:07:49	→	xkuru has joined #haskell
2022-04-21 11:09:53	←	jakalx has left #haskell (Disconnected: Replaced by new connection)
2022-04-21 11:09:54	→	jakalx has joined #haskell
2022-04-21 11:23:22	→	Midjak has joined #haskell
2022-04-21 11:24:53	←	bahamas has quit (Ping timeout: 256 seconds)
2022-04-21 11:25:00	←	inversed has quit (Read error: Connection reset by peer)
2022-04-21 11:25:07	→	michalz has joined #haskell
2022-04-21 11:27:46	←	zmt01 has quit (Quit: Leaving)
2022-04-21 11:27:50	→	redb has joined #haskell
2022-04-21 11:28:02	maerwald[m]	dragestil: there's a trick to allor cross-library find definition 
2022-04-21 11:28:19	maerwald[m]	You "vendor" all dependencies (add them as packages in cabal.project)
2022-04-21 11:28:31	maerwald[m]	Local packages work in HLS
2022-04-21 11:29:53	maerwald[m]	https://cabal.readthedocs.io/en/stable/cabal-project.html?highlight=optional-packages#cfg-field-optional-packages
2022-04-21 11:30:13	←	yauhsien has quit (Remote host closed the connection)
2022-04-21 11:30:21	→	zmt00 has joined #haskell
2022-04-21 11:31:13	→	yauhsien has joined #haskell
2022-04-21 11:31:33	dragestil	maerwald[m]: ok, but can I point to hls packages already in the local filesystem this way?
2022-04-21 11:32:15	←	redb has quit (Ping timeout: 256 seconds)
2022-04-21 11:32:29	dragestil	or do I have to get an extra copy of the package I want to find definitions through cabal?
2022-04-21 11:33:08	→	redb has joined #haskell
2022-04-21 11:33:59	dragestil	say I have two projects A and B, both depending on module C.  Will I have to download C twice, if I want to find definitions in both projects, of symbols defined in C?
2022-04-21 11:35:39	←	jao has quit (Ping timeout: 240 seconds)
2022-04-21 11:35:53	→	gpncarl has joined #haskell
2022-04-21 11:36:13	←	yauhsien has quit (Ping timeout: 256 seconds)
2022-04-21 11:37:19	←	redb has quit (Ping timeout: 240 seconds)
2022-04-21 11:38:05	→	pretty_dumm_guy has joined #haskell
2022-04-21 11:38:35	←	gpncarl has quit (Quit: WeeChat 3.4.1)
2022-04-21 11:44:41	→	redb has joined #haskell
2022-04-21 11:47:39	←	slac71531 has quit (Ping timeout: 240 seconds)
2022-04-21 11:49:04	←	redb has quit (Ping timeout: 246 seconds)
2022-04-21 11:49:36	→	yauhsien has joined #haskell
2022-04-21 11:50:08	albet70	% :t (>=>) @[]
2022-04-21 11:50:08	yahb	albet70: (a -> [b]) -> (b -> [c]) -> a -> [c]
2022-04-21 11:51:53	albet70	>=> = \g, f -> \a -> join (f <$> (g a))?
2022-04-21 11:52:40	→	hololeap has joined #haskell
2022-04-21 11:52:57	albet70	f :: b -> [c], but g a:: [b]
2022-04-21 11:53:30	→	deadmarshal_ has joined #haskell
2022-04-21 11:53:48	albet70	so fmap f (g a) would get [[c]]
2022-04-21 11:53:56	albet70	is that right?
2022-04-21 11:54:50	→	pagnol has joined #haskell
2022-04-21 11:55:27	←	tzh has quit (Remote host closed the connection)
2022-04-21 11:55:52	→	coot has joined #haskell
2022-04-21 11:57:20	hololeap	your syntax is a little weird, but you're essentially correct
2022-04-21 11:57:39	→	acidjnk has joined #haskell
2022-04-21 11:57:57	albet70	what's your syntax?
2022-04-21 11:58:37	dragestil	OK, reading the docs I added optional package pointing to a local ghc repo in a project, restarting the language server it still cannot find reference to some symbols defined in ghc
2022-04-21 11:58:37	hololeap	I was referring to this: >=> = \g, f -> \a -> join (f <$> (g a))?
2022-04-21 11:58:47	→	dyeplexer has joined #haskell
2022-04-21 11:59:53	albet70	>=> = \g, f-> \a -> (g a) >>= f?
2022-04-21 12:00:40	hololeap	(>=>) = \f g -> join . fmap g . f
2022-04-21 12:01:00	→	redb has joined #haskell
2022-04-21 12:01:01	hololeap	or, f >=> g = join . fmap g . f
2022-04-21 12:01:20	←	Ram-Z has quit (Ping timeout: 260 seconds)
2022-04-21 12:02:04	→	abastro has joined #haskell
2022-04-21 12:02:31	hololeap	or this, which is what I think you were going for: (>=>) = \f g -> \a -> join (g <$> f a)
2022-04-21 12:02:57	hololeap	it was really just the comma that made it "weird"
2022-04-21 12:03:34	hololeap	and also if you define an infix function like that, you need to wrap it in parens
2022-04-21 12:04:17	←	geekosaur has quit (Remote host closed the connection)
2022-04-21 12:04:41	→	geekosaur has joined #haskell
2022-04-21 12:04:58	→	jbarot has joined #haskell
2022-04-21 12:05:07	ℹ	jbarot is now known as pawikan_
2022-04-21 12:05:10	pawikan_	hello everyone
2022-04-21 12:05:36	←	redb has quit (Ping timeout: 276 seconds)
2022-04-21 12:05:49	hololeap	yo
2022-04-21 12:05:58	pawikan_	how long are you using haskell?
2022-04-21 12:06:25	hololeap	I dunno, I think I first tried it out around 2016 or so
2022-04-21 12:06:27	→	mikoto-chan has joined #haskell
2022-04-21 12:07:07	pagnol	I've returned to writing some Haskell after a long break and what I'm struggling to get used to is the absence of 'proper' records
2022-04-21 12:07:22	pawikan_	Good for you @hololeap
2022-04-21 12:07:27	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-21 12:07:34	pawikan_	I'm just starting learning haskell.
2022-04-21 12:07:45	albet70	"hololeap :it was really just the comma that made it "weird"", is that , in lambda is available?
2022-04-21 12:07:54	→	Vajb has joined #haskell
2022-04-21 12:08:02	albet70	\f g and \f, g
2022-04-21 12:08:04	←	mikoto-chan has quit (Read error: Connection reset by peer)
2022-04-21 12:08:13	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-21 12:08:23	hololeap	no, you can't put a comma in a lambda like that
2022-04-21 12:08:32	albet70	some languages use , to split parameter in lambda
2022-04-21 12:08:43	albet70	"hololeap :no, you can't put a comma in a lambda like that", ok
2022-04-21 12:09:39	hololeap	the only place commas are used are structures with separated values, like tuples and lists
2022-04-21 12:09:56	hololeap	that might not be 100% true, but more or less is
2022-04-21 12:10:01	albet70	why some people use \f g and some using \g f, is there a rule?
2022-04-21 12:10:30	hololeap	no, not really a rule, just convention, but it's mostly preference
2022-04-21 12:11:36	albet70	about fmap on list, use recursive to define and use list compression to define, are ok?
2022-04-21 12:11:50	albet70	list comprehension
2022-04-21 12:12:37	hololeap	define fmap on a list? like as an exercise?
2022-04-21 12:12:46	albet70	use iteration, not recursion
2022-04-21 12:12:58	hololeap	fmap's already defined for lists
2022-04-21 12:13:41	albet70	fmap f xs = [ f x |x <- xs ]
2022-04-21 12:13:47	→	mikoto-chan has joined #haskell
2022-04-21 12:13:53	hololeap	all you need to do is walk the list and convert each value using the given function, so recursion is fine for that
2022-04-21 12:14:28	hololeap	defining fmap for lists using list comprehensions seems silly, since list comprehensions rely on fmap being defined for lists :p
2022-04-21 12:14:30	albet70	"hololeap :all you need to do is walk the list and convert each value using the given function, so recursion is fine for that", but what if there is no tail call optimization
2022-04-21 12:14:52	hololeap	ghc figures that out for you
2022-04-21 12:15:54	←	mikoto-chan has quit (Read error: Connection reset by peer)
2022-04-21 12:16:21	zzz	list comprehensions are silly. fight me
2022-04-21 12:17:41	hololeap	you might have to add some eager evaluation in there to prevent a buildup of thunks on long lists, but other than that, ghc should figure it out for you
2022-04-21 12:20:12	zzz	id = \x -> [ a | a <- x ]
2022-04-21 12:21:40	Axman6	pawikan_: is there anything we can help you with? Please feel free to ask
2022-04-21 12:22:06	→	mikoto-chan has joined #haskell
2022-04-21 12:23:03	←	xkuru has quit (Read error: Connection reset by peer)
2022-04-21 12:27:22	→	dhouthoo has joined #haskell
2022-04-21 12:29:43	←	phma has quit (Read error: Connection reset by peer)
2022-04-21 12:30:27	→	phma has joined #haskell
2022-04-21 12:33:24	→	inversed has joined #haskell
2022-04-21 12:33:41	→	redb has joined #haskell
2022-04-21 12:38:25	←	redb has quit (Ping timeout: 246 seconds)
2022-04-21 12:39:50	abastro	I also think list comprehension is silly
2022-04-21 12:40:37	→	tromp has joined #haskell
2022-04-21 12:42:01	albet70	using list comprehension can express prime in one line
2022-04-21 12:43:54	←	shriekingnoise has quit (Quit: Quit)
2022-04-21 12:44:54	albet70	> p = s [2..] where s (x : xs) = s [i <- xs, mod i x /= 0]
2022-04-21 12:44:56	lambdabot	 <hint>:1:3: error: parse error on input ‘=’
2022-04-21 12:45:17	albet70	> s [2..] where s (x : xs) = s [i <- xs, mod i x /= 0]
2022-04-21 12:45:19	lambdabot	 <hint>:1:9: error: parse error on input ‘where’
2022-04-21 12:47:13	tomsmeding	> let p = s [2..] where s (x : xs) = s [i <- xs, mod i x /= 0] in p
2022-04-21 12:47:16	lambdabot	 <hint>:1:41: error:
2022-04-21 12:47:16	lambdabot	     parse error on input ‘<-’
2022-04-21 12:47:16	lambdabot	     Perhaps this statement should be within a 'do' block?
2022-04-21 12:47:26	tomsmeding	> let p = s [2..] where s (x : xs) = s [i | i <- xs, mod i x /= 0] in p
2022-04-21 12:47:32	lambdabot	 mueval-core: Time limit exceeded
2022-04-21 12:47:40	tomsmeding	¯\_(ツ)_/¯
2022-04-21 12:47:55	→	fendor has joined #haskell
2022-04-21 12:48:57	→	son0p has joined #haskell
2022-04-21 12:48:58	janus	@src catMaybes
2022-04-21 12:48:58	lambdabot	catMaybes ls = [x | Just x <- ls]
2022-04-21 12:49:39	→	redb has joined #haskell
2022-04-21 12:49:39	janus	zzz: how would you prefer to express catMaybes? with do-notation?
2022-04-21 12:49:50	←	Neon has quit (Quit: Leaving)
2022-04-21 12:50:09	→	Major_Biscuit has joined #haskell
2022-04-21 12:50:51	tomsmeding	base defines catMaybes using 'mapMaybe id', and mapMaybe using recursion
2022-04-21 12:51:44	janus	but it is unclear what base optimizes for, i don't think it is readability ;)
2022-04-21 12:51:50	tomsmeding	indeed :p
2022-04-21 12:51:51	→	Pickchea has joined #haskell
2022-04-21 12:52:23	→	zeenk has joined #haskell
2022-04-21 12:54:04	→	jinsun has joined #haskell
2022-04-21 12:54:21	←	redb has quit (Ping timeout: 276 seconds)
2022-04-21 12:54:57	→	chele has joined #haskell
2022-04-21 12:57:22	→	gurkenglas has joined #haskell
2022-04-21 12:59:34	abastro	Hm, isn't it that hard with do notation?
2022-04-21 13:00:06	abastro	I mean
2022-04-21 13:00:22	abastro	Is primes that hard to achieve with do notation
2022-04-21 13:00:30	→	lortabac has joined #haskell
2022-04-21 13:00:41	→	merijn has joined #haskell
2022-04-21 13:00:44	abastro	I dislike how there are two somewhat competing syntaxes for lists
2022-04-21 13:00:55	→	gehmehgeh has joined #haskell
2022-04-21 13:01:02	→	pretty_d1 has joined #haskell
2022-04-21 13:01:45	←	pretty_d1 has quit (Client Quit)
2022-04-21 13:01:47	←	pretty_dumm_guy has quit (Ping timeout: 256 seconds)
2022-04-21 13:03:52	→	`2jt has joined #haskell
2022-04-21 13:05:21	→	pretty_dumm_guy has joined #haskell
2022-04-21 13:06:46	←	pawikan_ has quit (Quit: Leaving)
2022-04-21 13:08:57	→	Vajb has joined #haskell
2022-04-21 13:09:18	tdammers	list comprehensions combine several common operations on lists into a single, compact syntax: cartesian product, filtering (including via pattern matching), and mapping.
2022-04-21 13:10:07	tdammers	and they're not "competing syntaxes", really; you can write the same stuff in different ways, but each has different tradeoffs when it comes to readability and signalling intent
2022-04-21 13:10:47	←	mikoto-chan has quit (Read error: Connection reset by peer)
2022-04-21 13:13:47	→	Ram-Z has joined #haskell
2022-04-21 13:15:23	→	mmhat has joined #haskell
2022-04-21 13:15:34	tomsmeding	abastro: https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/exts/monad_comprehensions.html#extension-MonadComprehensions
2022-04-21 13:16:23	→	mikoto-chan has joined #haskell
2022-04-21 13:18:35	→	machinedgod has joined #haskell
2022-04-21 13:19:01	←	zyklotomic has quit (Ping timeout: 246 seconds)
2022-04-21 13:20:17	→	jgeerds has joined #haskell
2022-04-21 13:21:01	←	Sgeo_ has quit (Read error: Connection reset by peer)
2022-04-21 13:21:01	→	redb has joined #haskell
2022-04-21 13:21:03	→	zyklotomic has joined #haskell
2022-04-21 13:24:24	←	acidjnk has quit (Ping timeout: 260 seconds)
2022-04-21 13:25:35	←	redb has quit (Ping timeout: 256 seconds)
2022-04-21 13:27:50	abastro	Existence of monad comprehension is the proof of the competition ime
2022-04-21 13:28:37	abastro	You could say it is not competing syntax, yeah, but then haskell got tons of syntax sugars which is hard to learn for beginners
2022-04-21 13:31:56	←	bitdex has quit (Remote host closed the connection)
2022-04-21 13:31:57	tomsmeding	abastro: haskell has lots of places where there are multiple ways to do the same thing
2022-04-21 13:32:05	→	CiaoSen has joined #haskell
2022-04-21 13:32:21	tomsmeding	function argument patterns / case expressions / pattern guards
2022-04-21 13:32:52	tomsmeding	MultiParamTypeClasses + FunctionalDependencies / TypeFamilies
2022-04-21 13:32:58	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-21 13:34:09	tomsmeding	[1..10] / enumFromTo 1 10
2022-04-21 13:34:16	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-21 13:34:22	tomsmeding	maybe/either / pattern matching
2022-04-21 13:34:44	←	hololeap has quit (Excess Flood)
2022-04-21 13:34:46	tomsmeding	f (g x) / f $ g x
2022-04-21 13:34:53	tomsmeding	$ / &
2022-04-21 13:34:56	tomsmeding	:')
2022-04-21 13:36:00	→	bitdex has joined #haskell
2022-04-21 13:36:06	zzz	janus: i don't have a specially favorite way, but there are no shortage of alternatives like `catMaybes = map fromJust . filter isJust`
2022-04-21 13:36:46	→	littlebobeep has joined #haskell
2022-04-21 13:40:15	→	hololeap has joined #haskell
2022-04-21 13:44:47	→	anomal has joined #haskell
2022-04-21 13:47:48	abastro	Multiple ways to do the same thing, tbh I don't like some of that
2022-04-21 13:48:14	abastro	Particularly because it is hard to say what is idiomatic.
2022-04-21 13:49:04	abastro	FunDeps vs TypeFamilies are one problem  I think. (Btw I recall using '&' was discouraged)
2022-04-21 13:50:30	abastro	Eww pattern guards..
2022-04-21 13:50:57	→	ccntrq has joined #haskell
2022-04-21 13:51:22	zzz	some convenient sugar is good but in haskell there's a lot of bloat. if ... else ... then is completely unnecessary for example
2022-04-21 13:51:57	abastro	Yep, that as well
2022-04-21 13:52:11	zzz	pattern guards i like though
2022-04-21 13:52:27	abastro	If blockarguments were a thing, `bool` can replace if-then-else
2022-04-21 13:52:45	abastro	The problem with pattern guards as I see is how they add to the possible syntax
2022-04-21 13:53:24	abastro	Actually yea, maybe pattern guards are not that problematic
2022-04-21 13:53:32	abastro	..hm
2022-04-21 13:53:41	abastro	How is pattern guards distinct from viewpatterns?
2022-04-21 13:53:55	→	redb has joined #haskell
2022-04-21 13:54:00	←	abastro has quit (Remote host closed the connection)
2022-04-21 13:54:32	→	abastro has joined #haskell
2022-04-21 13:54:40	merijn	Well, one requires an extension, one does not...
2022-04-21 13:55:14	abastro	I mean ofc other than that
2022-04-21 13:55:15	←	chenqisu1 has quit (Quit: Leaving)
2022-04-21 13:55:15	merijn	One is implicit function application voodoo, then other is explicit syntax
2022-04-21 13:56:21	abastro	Implicit function application voodoo?
2022-04-21 13:56:56	abastro	(I now think maybe pattern guard is fine? But then, it still adds to existing pile of syntax)
2022-04-21 13:56:58	←	michalz has quit (Read error: Connection reset by peer)
2022-04-21 13:58:45	zzz	i use pattern guards instead of matching + testing if True/False, so in my approach i effectively reduce syntactic complexity
2022-04-21 14:00:58	abastro	How do you achieve that?
2022-04-21 14:01:03	abastro	Could you show an example?
2022-04-21 14:01:16	[Leary]	Pattern guards are important when your scrutinee is of unknown type, e.g. casting from an existential into several possible types. Case-of would require a bunch of pointless nesting.
2022-04-21 14:01:29	zzz	i will write https://paste.jrvieira.com/1650529874386
2022-04-21 14:01:51	←	redb has quit (Ping timeout: 256 seconds)
2022-04-21 14:03:03	→	michalz has joined #haskell
2022-04-21 14:05:35	zzz	or *i would* write, in a perfect world where `if` was not a reserved word
2022-04-21 14:06:18	merijn	zzz: eh...that's is a bad example, since it's needlessly complex :p
2022-04-21 14:06:38	merijn	zzz: https://paste.tomsmeding.com/ziG9PMWq
2022-04-21 14:06:56	abastro	There is also `bool t f p`
2022-04-21 14:07:47	zzz	merijn: it's only needlessy complex because there is alternative syntax. my point is to reduce syntax
2022-04-21 14:07:51	→	redb has joined #haskell
2022-04-21 14:08:11	←	yauhsien has quit (Remote host closed the connection)
2022-04-21 14:08:15	zzz	i don't like that guards test for True/False
2022-04-21 14:08:30	abastro	I mean, you could use `bool`
2022-04-21 14:08:38	abastro	Or hypothetically, make `if` function
2022-04-21 14:08:44	→	yauhsien has joined #haskell
2022-04-21 14:08:47	→	tzh has joined #haskell
2022-04-21 14:08:59	←	xff0x_ has quit (Ping timeout: 240 seconds)
2022-04-21 14:09:02	zzz	yes
2022-04-21 14:09:14	zzz	but at some point we are just writing lisp
2022-04-21 14:09:37	zzz	and noone wants that also :p
2022-04-21 14:12:17	abastro	Could useBlockArguments
2022-04-21 14:12:28	←	redb has quit (Ping timeout: 250 seconds)
2022-04-21 14:13:37	←	yauhsien has quit (Ping timeout: 246 seconds)
2022-04-21 14:14:11	zzz	the hell with do notation!
2022-04-21 14:14:23	abastro	https://paste.tomsmeding.com/I1gXsBMs
2022-04-21 14:14:25	merijn	Hot take: BlockArguments is terrible extension
2022-04-21 14:14:54	→	raehik has joined #haskell
2022-04-21 14:15:06	abastro	Well I like how parens could be avoided with BlockArguments
2022-04-21 14:15:51	zzz	merijn: i tend to agree. what makes it terrible in your opinion?
2022-04-21 14:16:23	abastro	Perhaps if-then-else also encourages proliferation of "Bool", so it deserves to be lengthy
2022-04-21 14:16:46	←	rembo10 has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-21 14:17:33	zzz	Bool should not benefit from special treatment
2022-04-21 14:17:41	→	rembo10 has joined #haskell
2022-04-21 14:17:52	←	tzh has quit (Quit: zzz)
2022-04-21 14:17:53	zzz	nor should lists
2022-04-21 14:18:01	abastro	True
2022-04-21 14:18:13	zzz	:)
2022-04-21 14:19:59	←	infinity0 has quit (Ping timeout: 240 seconds)
2022-04-21 14:22:46	←	pretty_dumm_guy has quit (Quit: WeeChat 3.5)
2022-04-21 14:24:23	→	tatsumaru has joined #haskell
2022-04-21 14:24:24	→	chomwitt has joined #haskell
2022-04-21 14:27:19	←	aman has quit (Ping timeout: 240 seconds)
2022-04-21 14:27:44	→	aman has joined #haskell
2022-04-21 14:27:58	←	Pickchea has quit (Ping timeout: 246 seconds)
2022-04-21 14:29:45	←	tatsumaru has left #haskell
2022-04-21 14:31:52	→	ubert1 has joined #haskell
2022-04-21 14:32:33	←	byorgey has quit (Quit: leaving)
2022-04-21 14:36:12	→	kuribas has joined #haskell
2022-04-21 14:37:05	tdammers	I have all sorts of complaints about lisp, but "too many parenthesizes" is not one of htem
2022-04-21 14:40:17	→	redb has joined #haskell
2022-04-21 14:40:18	←	deadmarshal_ has quit (Ping timeout: 276 seconds)
2022-04-21 14:42:16	→	DNH has joined #haskell
2022-04-21 14:42:28	kuribas	tdammers: +1
2022-04-21 14:42:42	→	tromp has joined #haskell
2022-04-21 14:44:28	→	fef has joined #haskell
2022-04-21 14:44:32	←	redb has quit (Ping timeout: 250 seconds)
2022-04-21 14:46:00	→	yauhsien has joined #haskell
2022-04-21 14:47:05	kuribas	lisps offer a great deal of flexibility, but it's easy for code to become only readable by the author.
2022-04-21 14:47:37	kuribas	types reduce the expressivity, but make code more readable by other programmers.
2022-04-21 14:49:34	abastro	I saw ppl finding typical Haskell code quite unreadable though
2022-04-21 14:51:23	merijn	abastro: Sure, if you don't bother to learn the syntax
2022-04-21 14:55:24	kuribas	abastro: you can make unreadable, complicated code in any language.
2022-04-21 14:55:44	kuribas	IMO most unreadable haskell snippets use the (->) monad or functor.
2022-04-21 14:55:56	kuribas	That or use unnecessary abstractions.
2022-04-21 14:56:21	zzz	can you write unreadable code in APL?
2022-04-21 14:57:19	→	__monty__ has joined #haskell
2022-04-21 14:57:20	kuribas	"can you write readable code in APL" FTFY
2022-04-21 14:57:23	←	abastro has quit (Ping timeout: 256 seconds)
2022-04-21 14:58:07	zzz	prespective
2022-04-21 14:58:37	merijn	kuribas: No :D
2022-04-21 15:01:17	←	eggplantade has quit (Remote host closed the connection)
2022-04-21 15:04:51	kuribas	hmm, dynamic types are just dependent pairs...
2022-04-21 15:05:45	kuribas	And partial functions over those pairs.
2022-04-21 15:07:49	←	aman has quit (Quit: aman)
2022-04-21 15:08:23	→	aman has joined #haskell
2022-04-21 15:09:13	→	redb has joined #haskell
2022-04-21 15:09:53	lortabac	kuribas: 'Dynamic' in Haskell is a dependent pair, but I don't think it makes sense to generalize this specific representation to a universal definition of dynamic types
2022-04-21 15:12:16	←	CiaoSen has quit (Ping timeout: 248 seconds)
2022-04-21 15:12:23	tdammers	when people say "unreadable", they usually mean "I am not familiar with this language and its idioms"
2022-04-21 15:14:57	←	redb has quit (Ping timeout: 256 seconds)
2022-04-21 15:16:36	kuribas	tdammers: yeah, "(+) <$> [1, 2] <$> [3, 4]" would be weird to an outsider.
2022-04-21 15:16:56	kuribas	erm "(+) <$> [1, 2] <*> [3, 4]"
2022-04-21 15:17:50	kuribas	lortabac: dynamic types are most of the time implemented by a tag + value.
2022-04-21 15:18:02	kuribas	lortabac: then they pattern match on the tag internally.
2022-04-21 15:23:29	ℹ	irc: disconnected from server
2022-04-21 15:25:00	→	oxide has joined #haskell
2022-04-21 15:25:00	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-21 15:25:00	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-21 15:25:00	ℹ	Channel #haskell: 717 nicks (1 op, 0 voices, 716 normals)
2022-04-21 15:25:00	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-21 15:25:00	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-21 15:25:03	tdammers	abastro[m]: so? Go looks very similar to languages people are already familiar with, so that's no surprise.
2022-04-21 15:25:08	kuribas	lortabac: I really disagree.
2022-04-21 15:25:21	kuribas	lortabac: They are easy to do in haskell, but we don't like the solution because it is partial.
2022-04-21 15:25:41	kuribas	lortabac: or involves passing a Aeson Value everywhere.
2022-04-21 15:26:00	←	yauhsien has quit (Remote host closed the connection)
2022-04-21 15:26:01	abastro[m]	Indeed
2022-04-21 15:26:30	kuribas	You could make a static language with an "Any" type, which will have an implicit unsafe cast wherever used.
2022-04-21 15:26:30	abastro[m]	Also imperative style is similar to how ppl perform commands themselves
2022-04-21 15:27:27	abastro[m]	E.g. loop statement could be intuitive to even beginners
2022-04-21 15:28:08	tdammers	kuribas: not all those things are necessarily partial. In some cases, the problem is rather that Haskell largely uses nominal types rather than structural; conceptually, any value inhabits exactly one type. An example of an architecture where this matters is Ring middlewares. For example, you can make a middleware that augments a JSON request with a parsed body; any middlewares that don't care
2022-04-21 15:28:10	tdammers	about the parsed payload can just pass it through, but those that do care about it can match on it and use it.
2022-04-21 15:28:28	lortabac	kuribas: you would need a whole ecosystem of dynamically-typed Haskell in order to make it really usable
2022-04-21 15:28:28	lortabac	and also some syntactic sugar
2022-04-21 15:28:31	→	pretty_dumm_guy has joined #haskell
2022-04-21 15:28:56	tdammers	if we want to do this in Haskell, things get awkward; we need to define separate types for "request without parsed payload" and "request with parsed payload"
2022-04-21 15:29:26	tdammers	a structural type system could, in principle, make this more ergonomic, without sacrificing type safety
2022-04-21 15:30:09	→	acidjnk has joined #haskell
2022-04-21 15:30:21	abastro[m]	Structural type system is also unwieldy in other ways iirc
2022-04-21 15:30:38	abastro[m]	How do you do Typeclasses in structural types
2022-04-21 15:31:31	kuribas	tdammers: I think higher kinded extensible records are a great solution for this.
2022-04-21 15:31:41	←	pagnol has quit (Ping timeout: 246 seconds)
2022-04-21 15:32:44	←	aman has quit (Quit: aman)
2022-04-21 15:32:57	kuribas	lortabac: yeah, I am thinking about a language that mixes static with dynamic.
2022-04-21 15:33:28	lortabac	btw GHC already has Any
2022-04-21 15:33:44	abastro[m]	:i Any
2022-04-21 15:33:49	→	redb has joined #haskell
2022-04-21 15:33:51	lortabac	but you have to unsafeCoerce explicitly in order to use it
2022-04-21 15:34:09	abastro[m]	Eh that does not work..
2022-04-21 15:36:22	←	fendor has quit (Remote host closed the connection)
2022-04-21 15:38:59	←	redb has quit (Ping timeout: 240 seconds)
2022-04-21 15:39:52	→	infinity0 has joined #haskell
2022-04-21 15:40:30	→	dextaa has joined #haskell
2022-04-21 15:40:50	kuribas	> 2 :: Any
2022-04-21 15:40:52	lambdabot	 error:
2022-04-21 15:40:52	lambdabot	     • No instance for (Num Any) arising from the literal ‘2’
2022-04-21 15:40:52	lambdabot	     • In the expression: 2 :: Any
2022-04-21 15:40:59	kuribas	> (2 :: Int) :: Any
2022-04-21 15:41:01	lambdabot	 error:
2022-04-21 15:41:01	lambdabot	     • Couldn't match expected type ‘Any’ with actual type ‘Int’
2022-04-21 15:41:01	lambdabot	     • In the expression: (2 :: Int) :: Any
2022-04-21 15:41:21	kuribas	> (undefined :: Any) + 2
2022-04-21 15:41:23	lambdabot	 error:
2022-04-21 15:41:23	lambdabot	     • No instance for (Num Any) arising from a use of ‘+’
2022-04-21 15:41:23	lambdabot	     • In the expression: (undefined :: Any) + 2
2022-04-21 15:41:34	kuribas	lortabac: yeah.
2022-04-21 15:41:40	lortabac	this is another Any
2022-04-21 15:42:22	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2022-04-21 15:42:54	lortabac	I'm talking about GHC.Exts.Any
2022-04-21 15:43:44	←	zebrag has quit (Quit: Konversation terminated!)
2022-04-21 15:47:05	→	zebrag has joined #haskell
2022-04-21 15:47:51	→	Aseel has joined #haskell
2022-04-21 15:48:04	←	zeenk has quit (Quit: Konversation terminated!)
2022-04-21 15:48:06	→	pagnol has joined #haskell
2022-04-21 15:48:34	→	krappix has joined #haskell
2022-04-21 15:50:29	kuribas	lortabac: how is it different?
2022-04-21 15:51:27	krappix	Hello all, how can I convert a string datetime to dataTime data: for example `"2022-04-21T10:13:31Z"` become `{day = 2022-04-21, time = 10:13:31}`
2022-04-21 15:51:44	←	jmdaemon has quit (Ping timeout: 248 seconds)
2022-04-21 15:52:16	←	acidjnk has quit (Ping timeout: 248 seconds)
2022-04-21 15:52:51	→	akegalj has joined #haskell
2022-04-21 15:53:10	→	deadmarshal_ has joined #haskell
2022-04-21 15:53:53	merijn	there's a parse function in the time package
2022-04-21 15:53:56	merijn	@hackage time
2022-04-21 15:53:57	lambdabot	https://hackage.haskell.org/package/time
2022-04-21 15:54:29	merijn	Specifically parseTimeM
2022-04-21 15:54:30	merijn	https://hackage.haskell.org/package/time-1.12.1/docs/Data-Time-Format.html#v:parseTimeM
2022-04-21 15:55:53	←	jinsun has quit (Read error: Connection reset by peer)
2022-04-21 15:56:08	→	jinsun has joined #haskell
2022-04-21 15:58:09	←	zzz has quit (Ping timeout: 248 seconds)
2022-04-21 15:58:18	←	deadmarshal_ has quit (Ping timeout: 276 seconds)
2022-04-21 15:58:54	krappix	merijn: thank you
2022-04-21 15:58:56	→	acidjnk has joined #haskell
2022-04-21 16:02:27	→	eggplantade has joined #haskell
2022-04-21 16:02:32	←	econo has quit (Quit: Connection closed for inactivity)
2022-04-21 16:03:30	←	mmhat has quit (Ping timeout: 276 seconds)
2022-04-21 16:03:55	→	mmhat has joined #haskell
2022-04-21 16:06:39	←	eggplantade has quit (Ping timeout: 240 seconds)
2022-04-21 16:07:01	→	Lord_of_Life_ has joined #haskell
2022-04-21 16:07:21	←	mcglk has quit (Read error: Connection reset by peer)
2022-04-21 16:08:42	←	Lord_of_Life has quit (Ping timeout: 276 seconds)
2022-04-21 16:09:02	→	mcglk has joined #haskell
2022-04-21 16:09:03	→	redb has joined #haskell
2022-04-21 16:09:42	→	dextaa9 has joined #haskell
2022-04-21 16:09:45	ℹ	Lord_of_Life_ is now known as Lord_of_Life
2022-04-21 16:11:57	←	dextaa has quit (Ping timeout: 276 seconds)
2022-04-21 16:11:57	ℹ	dextaa9 is now known as dextaa
2022-04-21 16:12:11	←	jinsun has quit (Ping timeout: 256 seconds)
2022-04-21 16:12:13	→	jinsun__ has joined #haskell
2022-04-21 16:13:10	←	krappix has quit (Ping timeout: 250 seconds)
2022-04-21 16:13:54	←	redb has quit (Ping timeout: 276 seconds)
2022-04-21 16:14:50	dminuoso	Are there any well maintained haskell libraries that also expose a flake?
2022-04-21 16:14:59	→	DNH has joined #haskell
2022-04-21 16:15:07	dminuoso	Trying to get a gist of how haskell packages usually write their flakes
2022-04-21 16:23:30	→	deadmarshal_ has joined #haskell
2022-04-21 16:24:39	←	ralu1 has quit (Ping timeout: 240 seconds)
2022-04-21 16:25:52	←	jgeerds has quit (Ping timeout: 248 seconds)
2022-04-21 16:31:53	→	yauhsien has joined #haskell
2022-04-21 16:32:40	→	CiaoSen has joined #haskell
2022-04-21 16:32:41	←	fef has quit (Quit: Leaving)
2022-04-21 16:35:34	lortabac	kuribas: the Any in lambdabot is the bool monoid (true if at least one element is true)
2022-04-21 16:36:33	←	yauhsien has quit (Ping timeout: 256 seconds)
2022-04-21 16:41:59	←	acidjnk has quit (Ping timeout: 240 seconds)
2022-04-21 16:42:38	→	redb has joined #haskell
2022-04-21 16:43:57	→	aman has joined #haskell
2022-04-21 16:46:24	←	merijn has quit (Ping timeout: 276 seconds)
2022-04-21 16:46:33	dminuoso	Unrelatedly, if I bump cabal-version from >=1.10 to 3.0, does this warrant a major version bump?
2022-04-21 16:46:55	←	akegalj has quit (Quit: leaving)
2022-04-21 16:46:59	→	fendor has joined #haskell
2022-04-21 16:47:07	dminuoso	If I take PVP literally, it seems not
2022-04-21 16:47:26	dminuoso	Dunno
2022-04-21 16:47:28	dminuoso	"Note that modifying imports or depending on a newer version of another package may cause extra orphan instances to be exported and thus force a major version change.
2022-04-21 16:47:43	dminuoso	Is cabal itself "a package you depend upon"?
2022-04-21 16:49:58	__monty__	Doesn't cabal-install discard package versions with incompatible cabal-version constraints?
2022-04-21 16:50:50	dminuoso	I guess if it did, it doesnt matter
2022-04-21 16:52:54	←	anomal has quit (Remote host closed the connection)
2022-04-21 16:58:38	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-21 16:59:02	→	Pickchea has joined #haskell
2022-04-21 17:00:08	→	Unicorn_Princess has joined #haskell
2022-04-21 17:09:41	←	deadmarshal_ has quit (Ping timeout: 246 seconds)
2022-04-21 17:12:37	kuribas	tdammers: why would a middleware want to pass a parsed request?
2022-04-21 17:14:39	kuribas	tdammers: you mean like parse bytestring into JSON, to avoid every middleware having to do that?
2022-04-21 17:16:11	kuribas	tdammers: you could use "vault" for that.
2022-04-21 17:16:27	kuribas	Create a key for JSON body, and put it in the vault.
2022-04-21 17:16:41	←	pagnol has quit (Remote host closed the connection)
2022-04-21 17:16:45	kuribas	tdammers: I don't see how this needs dynamic types.
2022-04-21 17:20:42	→	tromp has joined #haskell
2022-04-21 17:21:15	→	merijn has joined #haskell
2022-04-21 17:26:25	←	merijn has quit (Ping timeout: 256 seconds)
2022-04-21 17:27:57	abastro[m]	What is "vault"?
2022-04-21 17:28:59	←	Pickchea has quit (Ping timeout: 240 seconds)
2022-04-21 17:30:34	←	meinside has quit (Quit: Connection closed for inactivity)
2022-04-21 17:35:37	→	merijn has joined #haskell
2022-04-21 17:42:05	kuribas	abastro[m]: https://hackage.haskell.org/package/wai-3.2.3/docs/Network-Wai.html#v:vault
2022-04-21 17:42:45	abastro[m]	Oh, so an invisible store
2022-04-21 17:44:29	kuribas	more like a store that allows you to put any type in it.
2022-04-21 17:44:39	←	qwedfg has quit (Ping timeout: 240 seconds)
2022-04-21 17:44:44	tdammers	kuribas: it doesn't, that's the thing. The middleware is essentially (Request -> Response) -> (RequestWithMaybeJSONPayload -> Response) or sth like that. Which would work, except that now Request and RequestWithMaybeJSONPayload are no longer the same type, even for non-JSON requests
2022-04-21 17:45:21	kuribas	tdammers: put JSON in the vault?
2022-04-21 17:45:46	tdammers	that removes the JSON parsing aspect from the type entirely
2022-04-21 17:46:06	→	JordiGH has joined #haskell
2022-04-21 17:46:32	kuribas	so just like the dynamic solution, right?
2022-04-21 17:46:50	tdammers	well, vault is kind of out-of-band
2022-04-21 17:47:00	→	dcoutts__ has joined #haskell
2022-04-21 17:47:11	tdammers	the way Ring does it, you just extend the request object with an additional field
2022-04-21 17:47:15	→	ralu1 has joined #haskell
2022-04-21 17:47:26	tdammers	I guess you could use some sort of extensible-records solution for that in Haskell
2022-04-21 17:49:07	←	dcoutts_ has quit (Ping timeout: 240 seconds)
2022-04-21 17:52:58	←	aman has quit (Quit: aman)
2022-04-21 17:56:28	←	JordiGH has quit (Ping timeout: 260 seconds)
2022-04-21 17:57:26	←	Aseel has quit (Remote host closed the connection)
2022-04-21 18:05:34	abastro[m]	Static types are often problematic like in this case, I gusss
2022-04-21 18:05:49	abastro[m]	I should have said nominal type duh
2022-04-21 18:08:18	←	`2jt has quit (Ping timeout: 276 seconds)
2022-04-21 18:08:45	abastro[m]	(Hmm I wonder how structural typing could be done well)
2022-04-21 18:11:00	tdammers	I've been thinking about that myself (the "structural typing done well" thing)
2022-04-21 18:14:11	abastro[m]	Oh, could you give the gist of results?
2022-04-21 18:14:59	kuribas	tdammers: but "Application -> Application" doesn't change the type.
2022-04-21 18:15:08	kuribas	I don't see how anything other than vault can help here...
2022-04-21 18:15:58	kuribas	higher kinded extensible-records are nice since you can have variations of the same kind of data, and also apply generic methods over them.
2022-04-21 18:16:08	tdammers	abastro[m]: currently, the results I have are "I will have to make a little toy language to try out a bunch of things", and "I will likely have to sacrifice type inference to a large extent"
2022-04-21 18:16:12	kuribas	I am experimenting in idris with them.
2022-04-21 18:16:27	abastro[m]	Oh no. Losing type inference..
2022-04-21 18:16:38	kuribas	So you can do folds over fields, mapping fields, zipping records, etc...
2022-04-21 18:16:41	tdammers	kuribas: obviously the Middleware type would have to change
2022-04-21 18:16:51	abastro[m]	It was not fun in Scala with less and unreliable type inference
2022-04-21 18:16:54	kuribas	tdammers: so it wouldn't be middleware anymore.
2022-04-21 18:17:16	kuribas	Middleware is something transparent between.
2022-04-21 18:17:28	abastro[m]	Kuribas, interesting that you could avoid doing lots of proofs
2022-04-21 18:17:42	kuribas	abastro[m]: which proofs?
2022-04-21 18:18:11	tdammers	oh, if that's your definition, then the clojure one doesn't qualify either, because it's not transparent either
2022-04-21 18:18:28	tdammers	idk., call it a "filter" or a "combinator" then
2022-04-21 18:18:32	kuribas	yeah, I guess not
2022-04-21 18:19:27	kuribas	abastro[m]: the type of map: mapRecord : ({a : k} -> f a -> g a) -> Record f l -> Record g l
2022-04-21 18:19:31	abastro[m]	Proofs that the records could be folded, zipped with types matching
2022-04-21 18:19:32	abastro[m]	That and extension as well
2022-04-21 18:20:02	kuribas	abastro[m]: I have: data RecordList : (k -> Type) -> List (String, k) -> Type
2022-04-21 18:20:09	kuribas	abastro[m]: Record is just a wrapper.
2022-04-21 18:21:05	kuribas	abastro[m]: "get" involves a "proof" that the field exists.
2022-04-21 18:21:19	abastro[m]	Yea, those ones
2022-04-21 18:21:20	kuribas	abastro[m]: which interestingly resolves to an integer (the index in the list).
2022-04-21 18:21:32	abastro[m]	I wonder if one of the proofs could be problematic
2022-04-21 18:21:46	kuribas	abastro[m]: nah, the proof is a simple induction.
2022-04-21 18:22:47	kuribas	abastro[m]: and the proof is done automatically by idris.
2022-04-21 18:22:52	kuribas	using proof search.
2022-04-21 18:23:05	tdammers	so, red herring - my point is, if I want to use the design of that Ring middleware in a nominally typed language, it gets ugly, but that's not because the language is typed, it's because the types are nominal
2022-04-21 18:23:42	kuribas	abastro[m]: so idris will just search all constructors for the right type.  If found it is then converted to an integer (the index in the list).
2022-04-21 18:24:18	abastro[m]	Interesting, so that deptypes could be useful for certain usecases like this
2022-04-21 18:24:56	abastro[m]	Sometimes structural types feel like dynamic to me
2022-04-21 18:25:06	kuribas	IMO subtypes are problematic.
2022-04-21 18:25:16	kuribas	It's better to have polymorphism.
2022-04-21 18:25:24	kuribas	with constraints.
2022-04-21 18:25:34	kuribas	TypeWithFeature t => t -> ...
2022-04-21 18:25:52	kuribas	the constraint can be any proof in fact.
2022-04-21 18:26:12	ℹ	AlexNoo_ is now known as AlexNoo
2022-04-21 18:26:45	tdammers	kuribas: in general I agree; however, if you're going to do the "incremental enrichment" style processing that clojure people love so much, then this still means you have to introduce a lot of types, with the potential for a combinatorial explosion
2022-04-21 18:26:47	kuribas	For example {0 t:String} -> TableInSchema (s:Schema) t => t -> ...
2022-04-21 18:27:33	abastro[m]	Extensible records?
2022-04-21 18:27:45	abastro[m]	Oh right
2022-04-21 18:28:12	abastro[m]	Those records are subtyping-capable ones
2022-04-21 18:29:58	abastro[m]	<del>In the end, OOP wins in practical world I guess</del>
2022-04-21 18:30:08	kuribas	tdammers: I think it's easier to use a HKD record with Maybe.
2022-04-21 18:31:42	tdammers	kuribas: but now you have to tell everyone in the chain about the JSON value you may or may not be adding somewhere along the way, even all the parts of the chain that will do absolutely nothing with it other than pass it along unchanged
2022-04-21 18:32:49	abastro[m]	Time to use duck typing?
2022-04-21 18:33:01	tdammers	that is exactly what I want to avoid
2022-04-21 18:33:16	abastro[m]	What is wrong with duck typing tho
2022-04-21 18:33:33	tdammers	in a nutshell: jesus.save() and file.save() aren't the same thing
2022-04-21 18:33:41	abastro[m]	It is basis of incredible amount of SW infrastructure
2022-04-21 18:34:10	abastro[m]	Yea but some tradeoff is inevitable
2022-04-21 18:37:02	abastro[m]	In which way is dynamic typing different?
2022-04-21 18:37:13	→	acidjnk has joined #haskell
2022-04-21 18:37:26	abastro[m]	I guess I wrongly equated dynamic typing with duck typing
2022-04-21 18:39:56	tdammers	"dynamic typing" means you don't perform type checks; if there are any type errors in your program, it will crash at runtime.
2022-04-21 18:40:38	abastro[m]	How about duck typing?
2022-04-21 18:40:55	kuribas	tdammers: then use vault?
2022-04-21 18:41:09	kuribas	tdammers: either it's in the type, or not, there is nothing between :)
2022-04-21 18:41:19	tdammers	duck typing basically means that instead of asking an object "are you a duck", you ask it to quack; if it can quack, then you treat it as a duck
2022-04-21 18:41:49	tdammers	kuribas: it should be in the type, yes, but, hmm, let me see if I can come up with a boiled-down example
2022-04-21 18:42:30	kuribas	tdammers: make the "extra fields" type polymorphic.
2022-04-21 18:42:42	kuribas	tdammers: and then a constraint on that field when you require it to have something.
2022-04-21 18:43:11	→	boxscape_ has joined #haskell
2022-04-21 18:44:10	abastro[m]	Oh, so dynamic typing may crash if the type is wrong, before seeing its behavior
2022-04-21 18:44:16	boxscape_	It looks like if define a symbol and import a symbol with the same name, and then use it, GHC will prefer the symbol defined in that module, and not say anything about ambiguity. Is that generally true?
2022-04-21 18:44:18	boxscape_	for some reason I fully expected an error, but I'd much prefer to rely on the former behavior for a plugin I'm writing
2022-04-21 18:45:15	←	lottaquestions has quit (Quit: Konversation terminated!)
2022-04-21 18:45:25	abastro[m]	Confused because considerable portion of dynamic typing world is consisted of duck typing. I think there should be a good reason why it is so widespread.
2022-04-21 18:47:34	→	jgeerds has joined #haskell
2022-04-21 18:48:41	boxscape_	duck typing seems like a strange mixture of nominal and structural typing. You're asking whether a value has the right structure by checking if it has a method with the right name
2022-04-21 18:48:45	tdammers	duck typing is popular in dynamic languages, because nominal type checks ("is-a") don't really buy you anything
2022-04-21 18:48:48	←	acidjnk has quit (Ping timeout: 260 seconds)
2022-04-21 18:48:58	tdammers	either way, things crash at runtime
2022-04-21 18:49:14	tdammers	"this thing isn't declared to be a duck" vs. "this thing cannot quack" - but in both cases, it crashes
2022-04-21 18:49:18	→	pavonia has joined #haskell
2022-04-21 18:50:01	tdammers	nominal checks however require more ceremony - you have to declare the type and its inheritance chain, and you have to add those type checks before accessing the quack() method
2022-04-21 18:50:15	abastro[m]	Yep, it is good enough for dynamic typing
2022-04-21 18:50:33	tdammers	it's more that Java-style type checks don't buy you anything in a dynamic language
2022-04-21 18:50:40	boxscape_	(actually I guess my previous statement applies to regular structural typing, too, since you check whether record fields have the right names)
2022-04-21 18:50:57	tdammers	PHP did cargo-cult Java's class model, including the is-a checks, but in practice, they're pretty much worthless
2022-04-21 18:51:38	abastro[m]	Java style type checks lol
2022-04-21 18:51:50	dminuoso	tdammers: I guess duck-typing is just an awkward phrasing of protocols/interfaces.
2022-04-21 18:52:07	dminuoso	Particularly for languages that lack the formalism to talk about protocols.
2022-04-21 18:52:08	abastro[m]	(Imho Java itself is lol. Got a good time at 2000 IT boom)
2022-04-21 18:52:35	tdammers	boxscape_: in principle, yes, but 1) the checks are done statically, so they still buy you a lot compared to dynamic duck typing, and 2) you can design the "names" system such that names are actually unique, so "jesus.save" and "file.save" would reference *different* 'save' labels
2022-04-21 18:52:41	abastro[m]	I heard protocols are not alike interfaces
2022-04-21 18:52:52	abastro[m]	But to my eyes it is closer to interfaces than typeclasses
2022-04-21 18:52:56	boxscape_	tdammers right, good point
2022-04-21 18:53:28	tdammers	dminuoso: I'd say duck typing is "protocols/interfaces, but implicit, and only checked at runtime"
2022-04-21 18:53:32	dminuoso	Yeah.
2022-04-21 18:53:41	dminuoso	Sounds about right
2022-04-21 18:54:33	dminuoso	Perhaps one important aspect about duck typing that is rarely mentioned, is that duck typing in particular makes sense for languages with monkey patching or meta programming abilities
2022-04-21 18:54:47	abastro[m]	Dynamic protocols sound quite good tbh
2022-04-21 18:54:48	dminuoso	Say Ruby's method_missing, which you can drive as dynamic as you want
2022-04-21 18:54:56	→	n3t has joined #haskell
2022-04-21 18:55:53	dminuoso	Someone else might amend your thing with new methods/capabilities after the fact, allowing to satisfy some particular interface
2022-04-21 18:56:20	abastro[m]	OOP at its finest
2022-04-21 18:56:35	tdammers	yeah, so if you're going to miss out on static assertions anyway, at least make maximum use of the freedom that gives you
2022-04-21 18:56:45	dminuoso	Well, in some sense this is *actual* OOP in the original sense of smalltalk
2022-04-21 18:56:51	tdammers	yep
2022-04-21 18:56:58	abastro[m]	Oh
2022-04-21 18:57:49	abastro[m]	Python is rightful successor of smalltalk then?
2022-04-21 18:57:58	dminuoso	Hardly
2022-04-21 18:58:11	abastro[m]	Hmm
2022-04-21 18:58:19	dminuoso	Quite a many languages offer the capabilities, but it's not widely used and certainly doesnt influence design choices by authors.
2022-04-21 18:58:30	dminuoso	The core theme of OOP is that you have these objects that interact by exchanging "messages", they talk to each other. 
2022-04-21 18:58:46	dminuoso	While objects can have internal state
2022-04-21 18:59:05	dminuoso	The only somewhat common example of this pattern Ive seen is in the Erlang world
2022-04-21 18:59:33	abastro[m]	Oh, so duck typing is only part of it
2022-04-21 19:00:04	abastro[m]	Funny that I saw some ppl consider Erlang as functional (along with oop ofc)
2022-04-21 19:00:47	boxscape_	this looks like a good explanation of Alan Kay's original view of OOP https://ovid.github.io/articles/alan-kay-and-oo-programming.html
2022-04-21 19:03:42	abastro[m]	Enterprise OOP got bigger though, because ppl love blunt classification
2022-04-21 19:04:56	←	Major_Biscuit has quit (Quit: WeeChat 3.4)
2022-04-21 19:05:30	abastro[m]	E.g. "A bat is a bird, it can fly and has similar behaviors"
2022-04-21 19:07:36	geekosaur	which is still slightly better than "a bat is a mouse with wings"
2022-04-21 19:08:23	exarkun	https://stackoverflow.com/questions/13737458/cycle-in-type-synonym-declarations why is the type in the question not allowed but the newtype in the answer is allowed
2022-04-21 19:09:00	→	wroathe has joined #haskell
2022-04-21 19:09:00	←	wroathe has quit (Changing host)
2022-04-21 19:09:00	→	wroathe has joined #haskell
2022-04-21 19:09:00	merijn	exarkun: type synonyms are effectively just textual aliases
2022-04-21 19:09:01	boxscape_	ah, hm, looks like what I said above about ambiguous names is actually only true in ghci, in ghc you do get an error :/
2022-04-21 19:09:22	merijn	exarkun: so a cyclic/recursive definition would expand to infinite size during type checking
2022-04-21 19:09:32	⚡	abastro[m] sent a hs code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/483e85e0656278159253d51df5df0abb2ad74a27
2022-04-21 19:09:33	merijn	exarkun: A newtype creates a new *opaque* type
2022-04-21 19:09:57	merijn	exarkun: Which means the expansion only happens when you "unpack" the newtype, which happens one finite step at a time
2022-04-21 19:10:01	geekosaur	boxscape_, yes, in ghci every line shadows every preceding line and creates a new local declaration
2022-04-21 19:10:13	merijn	(very handwavy explanation, but that's the gist)
2022-04-21 19:10:55	boxscape_	geekosaur and right, makes sense that it would work if it's being treated as a local declaration
2022-04-21 19:11:00	boxscape_	s/and/ah
2022-04-21 19:11:28	←	frost has quit (*.net *.split)
2022-04-21 19:11:28	←	hololeap has quit (*.net *.split)
2022-04-21 19:11:28	←	littlebobeep has quit (*.net *.split)
2022-04-21 19:11:28	←	bitdex has quit (*.net *.split)
2022-04-21 19:11:28	←	gehmehgeh has quit (*.net *.split)
2022-04-21 19:11:28	←	FinnElija has quit (*.net *.split)
2022-04-21 19:11:28	←	ChaiTRex has quit (*.net *.split)
2022-04-21 19:11:28	←	azimut has quit (*.net *.split)
2022-04-21 19:11:28	←	adanwan has quit (*.net *.split)
2022-04-21 19:11:28	←	chexum has quit (*.net *.split)
2022-04-21 19:11:28	←	jpds has quit (*.net *.split)
2022-04-21 19:11:28	←	califax has quit (*.net *.split)
2022-04-21 19:11:28	←	stiell_ has quit (*.net *.split)
2022-04-21 19:11:35	merijn	exarkun: In essence, the type synonym is an infinitely big (and thus irrepresentible in the type checker) term, whereas the newtype is a finite (but recursive) one
2022-04-21 19:11:38	geekosaur	ghci is just a bit weird, but it'd be even weirder if it behaved like an actual file
2022-04-21 19:11:55	boxscape_	so ghci kind of has local type declarations
2022-04-21 19:12:08	exarkun	merijn: Should I be concerned with why this difference exists, or is it just because?
2022-04-21 19:12:10	→	akegalj has joined #haskell
2022-04-21 19:13:10	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-21 19:13:20	→	JordiGH has joined #haskell
2022-04-21 19:13:25	merijn	exarkun: I'd say it's due to a bit of a misnomer of type (which kinda implies it's defining a new (ha!) type, but is really defining a synonym/textual alias, whereas newtype defines a, well, new type ;)
2022-04-21 19:13:37	geekosaur	ghci makes a little moresense if you treat it as the inside of a `do` (which was the original intent)
2022-04-21 19:13:49	abastro[m]	I think newtypes are effectively datatypes, but they are optimized so that the conversion takes no cost in runtine.
2022-04-21 19:14:07	merijn	exarkun: So when you write "type Foo = Int" you can use Foo and Int interchangably. If you write "newtype Foo = Foo Int" you need to explicitly wrap/unwrap Foo to get an Int
2022-04-21 19:14:10	boxscape_	geekosaur right, do + the ability to declare types
2022-04-21 19:14:36	boxscape_	(which also shadow imports
2022-04-21 19:14:37	boxscape_	)
2022-04-21 19:14:45	exarkun	merijn: okay, I might understand that.  thanks.
2022-04-21 19:14:55	abastro[m]	exarkun I'd say `type` is like macros
2022-04-21 19:15:09	abastro[m]	Tho I'd be quite wrong with this
2022-04-21 19:15:23	abastro[m]	They do behave somewhat alike typedef in C
2022-04-21 19:15:56	geekosaur	it creates an alias in the typechecker
2022-04-21 19:16:21	←	redb has quit (Ping timeout: 256 seconds)
2022-04-21 19:17:47	→	zer0bitz has joined #haskell
2022-04-21 19:18:00	→	Pickchea has joined #haskell
2022-04-21 19:19:26	abastro[m]	Type alias, yea that should be better and correct term
2022-04-21 19:19:56	→	abastro has joined #haskell
2022-04-21 19:21:19	→	xff0x_ has joined #haskell
2022-04-21 19:22:06	→	jonathanx has joined #haskell
2022-04-21 19:22:17	dminuoso	Maybe we should have named `type` `alias`, and `newtype` just `type`. :)
2022-04-21 19:22:31	dminuoso	But alas, hysterical raisins.
2022-04-21 19:22:35	abastro	Great naming!
2022-04-21 19:22:44	abastro	Btw what does alias does, exactly?
2022-04-21 19:22:54	geekosaur	all three are kinda misnamed, but it's far too late now
2022-04-21 19:23:16	abastro	Idris do took `data` IIRC
2022-04-21 19:23:21	abastro	Or perhaps I misremembered
2022-04-21 19:23:36	boxscape_	Idris took most of the Haskell98 syntax
2022-04-21 19:23:48	dminuoso	It's just a bit sad because while it doesn't really have a meaningful impact on advanced users of Haskell, it does present one other hurdle for newcomers.
2022-04-21 19:23:54	abastro	`type A = B` does not literally replace all occurrences of A with B, right?
2022-04-21 19:24:02	dminuoso	abastro:  correct
2022-04-21 19:24:20	dminuoso	abastro:  once you have type aliases you get a whole lot of fun in GHC in facft.
2022-04-21 19:24:21	abastro	Yep, as it does not literally replace, what does it do?
2022-04-21 19:24:32	dminuoso	Sometimes GHC will show you the aliased name, sometimes not..
2022-04-21 19:24:35	Alex_test	[quote=Falcon post_id=437033 time=1650547944 user_id=7]
2022-04-21 19:24:36	Alex_test	Ïðÿìî êàê â îñòðîñþæåòíîì ôèëüìå "Îñíîâíîé èíñòèíêò"! *óäèâë¸ííî*
2022-04-21 19:24:36	Alex_test	[/quote]
2022-04-21 19:24:36	Alex_test	    Ïëàãèàò?!?!
2022-04-21 19:24:36	Alex_test	Ëþáèìàÿ õôèëüìà À.Ä. Ì., êñòàòè... *ìðà÷íî*
2022-04-21 19:24:52	dminuoso	Heck, you sometimes have something like Expected `[Unaliased]` but got `Aliased`
2022-04-21 19:24:56	dminuoso	Real fun this way
2022-04-21 19:25:14	Alex_test	îé.
2022-04-21 19:25:35	dminuoso	abastro: its just a statement of equality . `type T = Int` is just saying these two things are the same thing.
2022-04-21 19:25:45	abastro	I see
2022-04-21 19:25:45	dminuoso	That means you can substitute one for the other anywhere
2022-04-21 19:25:50	abastro	So implementation dependent it is
2022-04-21 19:25:54	dminuoso	No, not at all
2022-04-21 19:25:56	dminuoso	That's the point
2022-04-21 19:25:58	abastro	I mean
2022-04-21 19:26:27	abastro	Whether GHC would replace occurrences of `T` to `Int` for `type T = Int`
2022-04-21 19:27:27	dminuoso	If you specify -fprint-expanded-synonyms it will always expand all mentions to the expanded type
2022-04-21 19:27:33	dminuoso	If not, it's largely implementation dependent
2022-04-21 19:28:14	dminuoso	Now before you imagine -fprint-expanded-synonyms to be something you would always want
2022-04-21 19:28:41	←	cdman has quit (Quit: Leaving)
2022-04-21 19:28:48	boxscape_	abastro there are some things that wouldn't be true if it would just replace it, like e.g. in Haskell98 you can't use type synonyms in instances, though with -XTypeSynonymInstances you can
2022-04-21 19:28:52	abastro	How does GHC even manage to print with all these?
2022-04-21 19:29:03	dminuoso	age :: Lens T Int
2022-04-21 19:29:04	dminuoso	looks nice
2022-04-21 19:29:12	abastro	Oh I mean
2022-04-21 19:29:27	abastro	How does GHC manage to type check with all the type aliases/
2022-04-21 19:29:32	abastro	It must be "fun"
2022-04-21 19:30:20	dminuoso	I dont think this is a particular challenge
2022-04-21 19:30:56	abastro	Why?
2022-04-21 19:30:57	→	califax has joined #haskell
2022-04-21 19:31:03	→	FinnElija has joined #haskell
2022-04-21 19:31:11	→	adanwan has joined #haskell
2022-04-21 19:31:15	→	azimut has joined #haskell
2022-04-21 19:31:19	dminuoso	As long as you know T is a type synonym, you could either always normalize, or just rig an type equality check to normalize whenever the other thing is not a type alias?
2022-04-21 19:31:19	→	chexum has joined #haskell
2022-04-21 19:31:41	abastro	I see, interesting
2022-04-21 19:31:54	→	gehmehgeh has joined #haskell
2022-04-21 19:31:56	dminuoso	The former is a bit simpler, but a bit more annoying on diagnostics
2022-04-21 19:32:00	dminuoso	Given my above example:
2022-04-21 19:32:03	dminuoso	age :: Lens T Int
2022-04-21 19:32:14	→	jpds has joined #haskell
2022-04-21 19:32:15	geekosaur	the only "fun" part about it is trying to remember when an alias was used so the error messages better match the source
2022-04-21 19:32:15	→	littlebobeep has joined #haskell
2022-04-21 19:32:19	dminuoso	type Lens s t a b = forall f . Functor f => (a -> f b) -> s -> f t
2022-04-21 19:32:41	dminuoso	The left hand side is nice to look at, the right hand side is not.
2022-04-21 19:33:03	abastro	I see. Btw... <del>value alias in haskell when</del>
2022-04-21 19:33:06	→	slack1256 has joined #haskell
2022-04-21 19:33:06	→	bitdex has joined #haskell
2022-04-21 19:33:15	geekosaur	let-in
2022-04-21 19:33:21	→	hololeap has joined #haskell
2022-04-21 19:35:12	abastro	`let` enables sharing, no?
2022-04-21 19:35:37	abastro	I heard `type` does not enable sharing of the involved types
2022-04-21 19:36:26	→	deadmarshal_ has joined #haskell
2022-04-21 19:36:32	dminuoso	type-level evaluation works almost, but not quite, entirely different from value-level evaluation
2022-04-21 19:36:37	dminuoso	Not sure what "sharing" would even mean at the type level
2022-04-21 19:36:41	→	ChaiTRex has joined #haskell
2022-04-21 19:37:54	abastro	Now I wonder how dependent typing would even be possible
2022-04-21 19:38:01	abastro	With such distinctions
2022-04-21 19:38:40	→	stiell_ has joined #haskell
2022-04-21 19:39:10	→	redb has joined #haskell
2022-04-21 19:40:32	→	tromp has joined #haskell
2022-04-21 19:42:31	→	[itchyjunk] has joined #haskell
2022-04-21 19:42:39	←	wroathe has quit (Ping timeout: 240 seconds)
2022-04-21 19:42:45	←	nehsou^ has quit (Remote host closed the connection)
2022-04-21 19:43:20	←	redb has quit (Ping timeout: 246 seconds)
2022-04-21 19:43:24	geekosaur	let *may* enable sharing, it's up to the compiler
2022-04-21 19:43:35	geekosaur	types, it's not clear that "sharing" is a concept
2022-04-21 19:43:55	abastro	Oh noo.. I thought it was enforced.
2022-04-21 19:43:58	geekosaur	in a language like Omega it would
2022-04-21 19:44:06	geekosaur	I believe ghc takes it as a hint
2022-04-21 19:44:25	abastro	I again reveals that my haskell is not properly learned 
2022-04-21 19:45:09	boxscape_	dminuoso presumably sharing would mean that if you have `type Sum = 3 + 5`, 3 + 5 is only computed once, regardless of how often you use the type Sum
2022-04-21 19:45:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-21 19:45:56	→	Guest97 has joined #haskell
2022-04-21 19:46:12	dminuoso	boxscape_: Oh boy, now I want TypeTrace!
2022-04-21 19:46:14	←	Katarushisu has quit (Quit: The Lounge - https://thelounge.chat)
2022-04-21 19:46:22	boxscape_	oh yeah, that would be nice
2022-04-21 19:46:30	→	waleee has joined #haskell
2022-04-21 19:46:35	→	Katarushisu has joined #haskell
2022-04-21 19:46:56	boxscape_	maybe you can implement it with custom type warnings https://github.com/ghc-proposals/ghc-proposals/pull/454
2022-04-21 19:47:02	→	yauhsien has joined #haskell
2022-04-21 19:47:14	dminuoso	boxscape_:  but anyway, I dont have any real type theory expertise to presume to know whether sharing at the type level even makes sense.
2022-04-21 19:47:25	dminuoso	In the presence of type inference and all
2022-04-21 19:47:35	boxscape_	fair, same here I suppose
2022-04-21 19:47:43	←	marquis_andras has quit (Ping timeout: 260 seconds)
2022-04-21 19:48:23	abastro	TypeTrace XD
2022-04-21 19:48:39	←	gurkenglas has quit (Ping timeout: 256 seconds)
2022-04-21 19:49:36	←	bitdex has quit (Remote host closed the connection)
2022-04-21 19:49:46	←	Guest97 has quit (Client Quit)
2022-04-21 19:50:33	→	bitdex has joined #haskell
2022-04-21 19:51:56	←	pie_ has quit (Quit: pie_)
2022-04-21 19:53:21	→	littlebobeep has joined #haskell
2022-04-21 19:56:06	←	sammelweis_ has quit (Remote host closed the connection)
2022-04-21 19:56:24	→	redb has joined #haskell
2022-04-21 19:58:32	→	vicfred has joined #haskell
2022-04-21 19:58:37	abastro	https://paste.tomsmeding.com/8AqrxpWX
2022-04-21 19:58:59	abastro	I guess I like having fun with useless abstractions
2022-04-21 19:59:31	→	marquis_andras has joined #haskell
2022-04-21 20:00:53	←	redb has quit (Ping timeout: 250 seconds)
2022-04-21 20:01:34	dminuoso	abastro: Lookup TOCTOU
2022-04-21 20:01:44	→	MajorBiscuit has joined #haskell
2022-04-21 20:01:47	dminuoso	On a multi-user system that code has TOCTOU races
2022-04-21 20:02:21	→	pie_ has joined #haskell
2022-04-21 20:02:28	←	pie_ has quit (Client Quit)
2022-04-21 20:02:40	abastro	You got why I said "useless"
2022-04-21 20:03:38	abastro	But if my executable is working on a directory not intended for user access and user accessed anyway, is it my fault?
2022-04-21 20:03:41	→	pie_ has joined #haskell
2022-04-21 20:05:12	←	benin has quit (Quit: The Lounge - https://thelounge.chat)
2022-04-21 20:06:06	←	deadmarshal_ has quit (Ping timeout: 246 seconds)
2022-04-21 20:11:39	←	pretty_dumm_guy has quit (Ping timeout: 240 seconds)
2022-04-21 20:12:52	←	yauhsien has quit (Remote host closed the connection)
2022-04-21 20:13:27	→	yauhsien has joined #haskell
2022-04-21 20:13:48	maerwald_	that's why I dislike the 'path' package
2022-04-21 20:13:55	maerwald_	It makes that distinction as well
2022-04-21 20:14:27	←	michalz has quit (Remote host closed the connection)
2022-04-21 20:15:51	→	shriekingnoise has joined #haskell
2022-04-21 20:17:54	abastro	Oh, path package existed
2022-04-21 20:18:07	abastro	Apparently it depends on heavyweight aeson
2022-04-21 20:18:20	←	yauhsien has quit (Ping timeout: 246 seconds)
2022-04-21 20:18:21	→	sammelweis has joined #haskell
2022-04-21 20:19:11	→	pretty_dumm_guy has joined #haskell
2022-04-21 20:19:17	abastro	Is it really bad if I assume no one should interfere with certain directories in my program?
2022-04-21 20:19:35	maerwald_	yes
2022-04-21 20:19:41	maerwald_	the filesystem is mutable
2022-04-21 20:20:19	abastro	Then how do I manage the directories
2022-04-21 20:22:20	maerwald_	you handle failure when you operate on the file, so filesystem code usually has a lot of try/catch
2022-04-21 20:22:36	maerwald_	and you try to avoid checking the file type explicitly
2022-04-21 20:22:58	→	emad has joined #haskell
2022-04-21 20:23:24	←	emad has quit (Remote host closed the connection)
2022-04-21 20:23:57	abastro	I mean, isn't throwing IO exception equal to "We would not care about this specific case"
2022-04-21 20:24:07	abastro	oh you mean handling every possible exceptions
2022-04-21 20:24:47	→	Sgeo has joined #haskell
2022-04-21 20:24:47	→	ec has joined #haskell
2022-04-21 20:24:48	←	merijn has quit (Ping timeout: 276 seconds)
2022-04-21 20:26:28	abastro	But that's not always practical
2022-04-21 20:26:29	geekosaur	you don't have to catch every possible exception, but for example if you expect a file and it's a directory then openFile will throw (except with a local directory on *bsd)
2022-04-21 20:27:51	abastro	Yep, I think in some cases, one just want to throw the error as "unexpected"
2022-04-21 20:28:17	abastro	Because it is likely a user error or hardware fault
2022-04-21 20:28:50	←	akegalj has quit (Ping timeout: 246 seconds)
2022-04-21 20:29:02	→	redb has joined #haskell
2022-04-21 20:29:21	abastro	I think for small scripts, if I created a directory for my executable's usage, and someone modified it, then it is okay to throw error
2022-04-21 20:29:45	←	elkcl has quit (Read error: Connection reset by peer)
2022-04-21 20:29:58	→	elkcl has joined #haskell
2022-04-21 20:31:06	←	dextaa has quit (Remote host closed the connection)
2022-04-21 20:32:15	→	dextaa has joined #haskell
2022-04-21 20:32:31	abastro[m]	But yeah, "this directory better exists so I can avoid creating it by mistake" is dumb
2022-04-21 20:33:00	←	dextaa has quit (Remote host closed the connection)
2022-04-21 20:33:03	abastro[m]	Still think Executable part is worth remaining tho
2022-04-21 20:33:44	←	abastro has quit (Ping timeout: 260 seconds)
2022-04-21 20:33:50	abastro[m]	As I dislike when suddenly `/usr/bin/sudo` disappears
2022-04-21 20:34:12	abastro[m]	(Could happen regularly I guess)
2022-04-21 20:35:34	←	lortabac has quit (Quit: WeeChat 2.8)
2022-04-21 20:35:48	→	dextaa has joined #haskell
2022-04-21 20:35:50	abastro[m]	If filesystem is mutable, how do you manage cleaning up files?
2022-04-21 20:37:09	←	redb has quit (Ping timeout: 276 seconds)
2022-04-21 20:37:34	←	dextaa has quit (Remote host closed the connection)
2022-04-21 20:37:35	←	xff0x_ has quit (Read error: Connection reset by peer)
2022-04-21 20:39:01	→	dextaa has joined #haskell
2022-04-21 20:41:14	abastro[m]	Is "trying to remove files" enough?
2022-04-21 20:44:35	←	dextaa has quit (Remote host closed the connection)
2022-04-21 20:44:59	c_wraith	there are hierarchies of how much to care. Is the file in a user-owned application-specific space? Then if something else the user does interferes with it, that's their fault.
2022-04-21 20:45:08	←	maerwald_ has quit (Changing host)
2022-04-21 20:45:08	→	maerwald_ has joined #haskell
2022-04-21 20:45:15	ℹ	maerwald_ is now known as maerwald
2022-04-21 20:45:18	c_wraith	Is the file in the shared temporary space? Best not to expect anything of it
2022-04-21 20:45:37	c_wraith	and there's a spectrum in between
2022-04-21 20:45:44	→	dextaa has joined #haskell
2022-04-21 20:45:52	→	redb has joined #haskell
2022-04-21 20:46:07	maerwald	abastro[m]: removePathForcibly
2022-04-21 20:46:17	maerwald	and on windows, you also need retry strategies due to file locking
2022-04-21 20:47:23	c_wraith	The most dangerous cases are when you're writing a long-running program that will run with elevated privileges that creates temporary files in /tmp. 
2022-04-21 20:47:48	abastro[m]	c_wraith: yea, I assume it is in user-owned app-specific space. So I think it's okay to crash while doing restartable tasks
2022-04-21 20:48:18	abastro[m]	maerwald: Surely `removePathForcibly` can fail
2022-04-21 20:48:24	maerwald	sure
2022-04-21 20:48:33	maerwald	you just `try` it an ignore errors then
2022-04-21 20:48:50	abastro[m]	c_wraith: oh no, elevated privilege
2022-04-21 20:49:11	abastro[m]	Yea, in the end, there is a scope in which you ignore vs consider
2022-04-21 20:49:16	→	yauhsien has joined #haskell
2022-04-21 20:50:30	maerwald	hideError errs = handleIO (\e -> if ioeGetErrorType e `elem` errs then pure () else liftIO . ioError $ e)
2022-04-21 20:51:33	←	redb has quit (Ping timeout: 256 seconds)
2022-04-21 20:53:53	abastro[m]	Accumulating errors to log might be good hmm
2022-04-21 20:54:09	→	kenran has joined #haskell
2022-04-21 20:54:15	abastro[m]	Wait I could just `stderr`
2022-04-21 20:55:19	geekosaur	until you have multiple threads and they interleave
2022-04-21 20:55:59	←	justsomeguy has quit (Ping timeout: 240 seconds)
2022-04-21 21:00:20	→	merijn has joined #haskell
2022-04-21 21:02:53	←	Pickchea has quit (Ping timeout: 256 seconds)
2022-04-21 21:03:22	→	pagnol has joined #haskell
2022-04-21 21:04:53	←	merijn has quit (Ping timeout: 246 seconds)
2022-04-21 21:05:10	abastro[m]	Hehe
2022-04-21 21:05:11	abastro[m]	Wait that could be messup
2022-04-21 21:06:02	abastro[m]	"Error: Foo"... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/16cd4b824228d3f7911017caf66cb8acc9333650)
2022-04-21 21:06:48	geekosaur	it gets pretty bad, yep
2022-04-21 21:07:10	geekosaur	especially since buffering doesn't work the same way in Haskell as in C
2022-04-21 21:09:34	←	jpds has quit (Ping timeout: 240 seconds)
2022-04-21 21:09:49	→	_ht has joined #haskell
2022-04-21 21:12:26	→	redb has joined #haskell
2022-04-21 21:13:09	→	jpds has joined #haskell
2022-04-21 21:14:56	abastro[m]	Is it different in C?
2022-04-21 21:15:18	←	zaquest has quit (Remote host closed the connection)
2022-04-21 21:15:59	←	jgeerds has quit (Ping timeout: 240 seconds)
2022-04-21 21:16:23	→	zaquest has joined #haskell
2022-04-21 21:16:54	geekosaur	C's string output will write to the buffer as a chunk. Haskell's putStr is literally mapM_ putChar, so another thread can interleave at the character level
2022-04-21 21:16:59	→	akegalj has joined #haskell
2022-04-21 21:18:06	c_wraith	yeah, you discover that very quickly if you're doing output from multiple threads.
2022-04-21 21:18:08	←	waleee has quit (Ping timeout: 260 seconds)
2022-04-21 21:18:19	abastro[m]	Now that is another gripe of String
2022-04-21 21:18:31	pagnol	does this correspond to anything in Haskell or cat theory? https://ramdajs.com/docs/#applySpec
2022-04-21 21:18:42	pagnol	(minus the recursion)
2022-04-21 21:19:20	c_wraith	that looks a lot like a catamorphism
2022-04-21 21:19:35	c_wraith	which is a fancy word for a specific kind of fold
2022-04-21 21:19:48	pagnol	means nothing to me but I'll look into it, thanks
2022-04-21 21:20:08	←	pagnol has quit (Remote host closed the connection)
2022-04-21 21:21:14	c_wraith	oh, I misread. too bad they didn't stick around for a correction.
2022-04-21 21:21:48	→	pagnol has joined #haskell
2022-04-21 21:22:10	c_wraith	pagnol: I misread. that's not it at all
2022-04-21 21:22:20	pagnol	c_wraith: my battery died, did you write anything more in response to my question?
2022-04-21 21:22:28	abastro[m]	Weird mix of record
2022-04-21 21:22:48	→	carl has joined #haskell
2022-04-21 21:22:54	c_wraith	yeah, I wrote "I misread, it's not a catamorphism at all"
2022-04-21 21:23:03	abastro[m]	The API looks like weird mix of records to me*
2022-04-21 21:24:20	pagnol	If we disregard the recursion/nesting, then it's somewhat like A -> Map String (A -> ... whatever )
2022-04-21 21:24:23	c_wraith	I don't think that's anything especially interesting theoretically. maybe you could claim there's something interesting about the preservation of shape, but mostly it's a convenient shorthand for constructing a flavor of function
2022-04-21 21:24:36	hololeap	kinda looks like: Map k (a -> v) -> a -> Map k v
2022-04-21 21:25:46	pagnol	ah yes
2022-04-21 21:25:52	←	coot has quit (Quit: coot)
2022-04-21 21:26:26	→	coot has joined #haskell
2022-04-21 21:26:39	←	machinedgod has quit (Ping timeout: 240 seconds)
2022-04-21 21:27:07	pagnol	maybe in Haskell it's a bit awkward due to the lack of a proper record type, but I find myself reaching for this pattern in other languages quite often
2022-04-21 21:28:17	c_wraith	> sequence (M.fromList [("foo", (+1))]) 1
2022-04-21 21:28:18	lambdabot	 fromList [("foo",2)]
2022-04-21 21:28:28	abastro[m]	For the specified example there, one can use Monoid
2022-04-21 21:28:40	c_wraith	or just sequence.
2022-04-21 21:29:12	abastro[m]	> foldMap (\a -> (Sum a, Product a)) [1..5]
2022-04-21 21:29:13	pagnol	well usually one would like to use the type system to make sure that exactly certain keys are present
2022-04-21 21:29:14	lambdabot	 (Sum {getSum = 15},Product {getProduct = 120})
2022-04-21 21:30:03	abastro[m]	Instead of a tuple, one could create record datatype which implements Monoid
2022-04-21 21:30:30	c_wraith	if you have a data type, just make it Traversable
2022-04-21 21:31:12	c_wraith	that gets you basically the functionality there.
2022-04-21 21:32:20	c_wraith	of course, you typically wouldn't require that all your fields be the same type in Haskell. that's where things get more complex.
2022-04-21 21:32:32	pagnol	right
2022-04-21 21:33:39	→	lbseale has joined #haskell
2022-04-21 21:34:37	abastro[m]	I don't think we would get this kind of pattern that often in nominally typed languages
2022-04-21 21:35:12	abastro[m]	Could be useful for js
2022-04-21 21:35:48	c_wraith	we certainly have "build a record from an input"
2022-04-21 21:36:14	c_wraith	it just tends to get abstracted in a totally different direction
2022-04-21 21:36:16	abastro[m]	Oh, from single input?
2022-04-21 21:36:57	→	eggplantade has joined #haskell
2022-04-21 21:36:59	abastro[m]	Right.
2022-04-21 21:37:12	c_wraith	like, parser combinators for instance
2022-04-21 21:37:24	pagnol	alright, that's been an enlightening discussion thank you everybody for your responses
2022-04-21 21:38:11	abastro[m]	Actually I don't see the `applySpec` saving much keystrokes
2022-04-21 21:38:47	abastro[m]	Could use lambdas and apply parameter to each
2022-04-21 21:38:58	←	boxscape_ has quit (Quit: Connection closed)
2022-04-21 21:39:06	abastro[m]	I could be mistaken though, like perhaps the records are large
2022-04-21 21:40:23	c_wraith	well, if you use it consistently, it gives you a kind of reuse.
2022-04-21 21:40:35	c_wraith	with how it supports nested records
2022-04-21 21:41:12	←	carl has quit (Quit: WeeChat 3.5)
2022-04-21 21:41:34	←	kenran has quit (Quit: WeeChat info:version)
2022-04-21 21:42:02	pagnol	I find it useful in TypeScript because you can define a new type based an existing one and also supply a mapping in a type-safe manner
2022-04-21 21:42:07	←	vysn has quit (Ping timeout: 240 seconds)
2022-04-21 21:42:12	c_wraith	that's what made me think of parser combinators - the way they can be nested simply
2022-04-21 21:42:56	→	kenran has joined #haskell
2022-04-21 21:43:10	←	kenran has quit (Client Quit)
2022-04-21 21:43:23	→	kenran has joined #haskell
2022-04-21 21:44:44	←	ubert1 has quit (Remote host closed the connection)
2022-04-21 21:45:01	pagnol	I thought conceptually perhaps there is a connection to lenses somewhere
2022-04-21 21:47:31	←	eggplantade has quit (Remote host closed the connection)
2022-04-21 21:48:41	c_wraith	I thought about that a bit, when I was connecting it up with Traversable, as lenses are sort of a generalization of Traversable. but you quickly get into incredibly ad-hoc things that work like `each' if you try to go that way
2022-04-21 21:49:17	c_wraith	> (1, 2) & each +~ 6
2022-04-21 21:49:19	lambdabot	 (7,8)
2022-04-21 21:49:48	c_wraith	handy, but so hard to predict
2022-04-21 21:49:49	←	coot has quit (Quit: coot)
2022-04-21 21:50:29	←	vicfred has quit (Quit: Leaving)
2022-04-21 21:53:19	←	zyklotomic has quit (Ping timeout: 240 seconds)
2022-04-21 21:53:22	←	geekosaur has quit (Remote host closed the connection)
2022-04-21 21:54:30	←	ralu1 has quit (Ping timeout: 276 seconds)
2022-04-21 21:54:42	c_wraith	or more directly...
2022-04-21 21:54:44	c_wraith	> sequenceOf each ((+2), (*3)) 5
2022-04-21 21:54:46	lambdabot	 (7,15)
2022-04-21 21:55:02	→	geekosaur has joined #haskell
2022-04-21 21:55:23	→	zyklotomic has joined #haskell
2022-04-21 21:55:41	c_wraith	ultimately, anything working like that in Haskell has the restriction that the functions must all have the same output type as well as the same input type
2022-04-21 21:56:27	←	jinsun__ has quit ()
2022-04-21 21:57:14	→	merijn has joined #haskell
2022-04-21 21:57:55	c_wraith	however, I've just realized... you can do a combinator interface without anything special at all
2022-04-21 21:58:38	→	jinsun has joined #haskell
2022-04-21 21:59:02	c_wraith	> (pure (,) <*> show <*> (* 3)) 2
2022-04-21 21:59:04	lambdabot	 ("2",6)
2022-04-21 21:59:27	c_wraith	the function instance for Applicative does everything already
2022-04-21 22:00:10	c_wraith	that's probably the most Haskellish interpretation of the purpose of that function
2022-04-21 22:02:58	c_wraith	at least when you look at applying it to records rather than the way TS uses dictionaries
2022-04-21 22:05:24	←	jakalx has left #haskell (Error from remote client)
2022-04-21 22:06:11	←	kuribas has quit (Remote host closed the connection)
2022-04-21 22:06:30	→	jakalx has joined #haskell
2022-04-21 22:08:20	→	bitmapper has joined #haskell
2022-04-21 22:08:55	bitmapper	is snap still ok to use or has development been slow for so long that it is no longer up to date
2022-04-21 22:09:45	←	ccntrq has quit (Remote host closed the connection)
2022-04-21 22:11:56	→	heichro has joined #haskell
2022-04-21 22:13:31	→	eggplantade has joined #haskell
2022-04-21 22:13:49	hololeap	bitmapper: I haven't done any extensive testing with it, but we still package it for gentoo-haskell by loosening a bunch of upper bounds of dependencies in the cabal file
2022-04-21 22:13:55	hololeap	https://github.com/gentoo-haskell/gentoo-haskell/blob/master/dev-haskell/snap/snap-1.1.3.1-r5.ebuild#L61-L69
2022-04-21 22:14:45	bitmapper	it's just i really don't like Yesod and would greatly prefer to use Snap
2022-04-21 22:15:40	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-21 22:16:22	hololeap	anyway it compiles with ghc-9.0.2 and aeson-1.5.6.0 if you just edit the cabal file a bit
2022-04-21 22:22:08	→	econo has joined #haskell
2022-04-21 22:22:48	bitmapper	it's pretty annoying needing to use GHC 9.2.2
2022-04-21 22:23:15	←	yauhsien has quit (Remote host closed the connection)
2022-04-21 22:24:12	→	deadmarshal_ has joined #haskell
2022-04-21 22:26:44	janus	bitmapper: if you annoy mightybite on discord he seems to respond
2022-04-21 22:27:04	janus	bitmapper: i just had the a text-2 revision updated for snap-core like that
2022-04-21 22:27:31	janus	my strategy is to annoy no more than once every month, so i'd recommend making a schedule such that you don't forget to annoy him when it seems socially acceptable
2022-04-21 22:28:04	janus	*mightybyte
2022-04-21 22:28:29	→	ralu1 has joined #haskell
2022-04-21 22:28:57	←	deadmarshal_ has quit (Ping timeout: 276 seconds)
2022-04-21 22:29:08	janus	i also really deemphasize the urgency of it every time, to make it seem like i am a super cool relaxed person that doesn't really care about version bounds
2022-04-21 22:30:39	←	MajorBiscuit has quit (Quit: WeeChat 3.4)
2022-04-21 22:31:38	←	merijn has quit (Ping timeout: 260 seconds)
2022-04-21 22:42:04	←	thaumavorio has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-21 22:42:55	→	thaumavorio has joined #haskell
2022-04-21 22:42:58	janus	> [1 | True]
2022-04-21 22:43:00	lambdabot	 [1]
2022-04-21 22:43:04	janus	> [1 | False]
2022-04-21 22:43:06	lambdabot	 []
2022-04-21 22:43:12	janus	never saw this syntax before :O
2022-04-21 22:43:18	→	qwedfg has joined #haskell
2022-04-21 22:43:45	geekosaur	it's just a minimized list comprehension
2022-04-21 22:44:09	geekosaur	@undo [ 1 | False ]
2022-04-21 22:44:09	lambdabot	if False then [1] else []
2022-04-21 22:44:21	←	kenran has quit (Quit: WeeChat info:version)
2022-04-21 22:49:53	dminuoso	> [ 1 | otherwise ]
2022-04-21 22:49:55	lambdabot	 [1]
2022-04-21 22:50:08	dminuoso	I can see this being useful for random obfuscation tricks.
2022-04-21 22:50:28	←	pretty_dumm_guy has quit (Ping timeout: 260 seconds)
2022-04-21 22:50:31	dminuoso	singleton x = [ x | otherwise ]
2022-04-21 22:50:36	dminuoso	Just put this into your code for good measure.
2022-04-21 22:50:58	dminuoso	Keeps your coworkers on their toes.
2022-04-21 22:53:00	←	dut has quit (Ping timeout: 276 seconds)
2022-04-21 22:55:27	→	tzh has joined #haskell
2022-04-21 23:01:22	opqdonut	dminuoso: lovely
2022-04-21 23:02:39	→	vicfred has joined #haskell
2022-04-21 23:02:55	→	wootehfoot has joined #haskell
2022-04-21 23:05:52	hololeap	even better if you have MonadComprehensions on
2022-04-21 23:07:57	←	pagnol has quit (Ping timeout: 276 seconds)
2022-04-21 23:08:11	dminuoso	Okay, now with yahb in the mix, I've created a monster!
2022-04-21 23:08:14	dminuoso	% sing = flip (const id) [ x | otherwise ] [ undefined ]
2022-04-21 23:08:14	yahb	dminuoso: 
2022-04-21 23:08:19	dminuoso	% sing
2022-04-21 23:08:19	yahb	dminuoso: [[<<Integer>>,<<[Char]>>,<<Char>>]]
2022-04-21 23:08:36	→	incertia_ has joined #haskell
2022-04-21 23:08:44	dminuoso	Spot this one! :)
2022-04-21 23:09:20	dminuoso	I should maintain a file with all these cute tricks.
2022-04-21 23:09:24	←	incertia has quit (Ping timeout: 240 seconds)
2022-04-21 23:09:25	ℹ	incertia_ is now known as incertia
2022-04-21 23:12:30	→	tromp has joined #haskell
2022-04-21 23:13:33	opqdonut	dminuoso: was there a previous definition of x just lying around or is that a useful definition like the lambdabot Expr stuff?
2022-04-21 23:13:34	←	hololeap has quit (Ping timeout: 240 seconds)
2022-04-21 23:13:43	dminuoso	The latter. :)
2022-04-21 23:14:01	geekosaur	% :t x
2022-04-21 23:14:02	yahb	geekosaur: [Dynamic]
2022-04-21 23:14:15	opqdonut	% x+1
2022-04-21 23:14:15	yahb	opqdonut: ; <interactive>:150:2: error:; * No instance for (Num [Dynamic]) arising from a use of `+'; * In the expression: x + 1; In an equation for `it': it = x + 1
2022-04-21 23:14:49	→	p_____ has joined #haskell
2022-04-21 23:14:58	←	p_____ has quit (Remote host closed the connection)
2022-04-21 23:16:31	→	hololeap has joined #haskell
2022-04-21 23:17:57	→	machinedgod has joined #haskell
2022-04-21 23:18:22	←	geekosaur has quit (Remote host closed the connection)
2022-04-21 23:19:13	→	neceve has joined #haskell
2022-04-21 23:20:10	→	geekosaur has joined #haskell
2022-04-21 23:26:20	→	aman has joined #haskell
2022-04-21 23:31:00	→	stackdroid18 has joined #haskell
2022-04-21 23:33:11	←	jakalx has left #haskell
2022-04-21 23:33:18	←	redb has quit (Ping timeout: 276 seconds)
2022-04-21 23:34:01	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-21 23:34:59	→	tromp has joined #haskell
2022-04-21 23:35:34	←	hololeap has quit (Ping timeout: 240 seconds)
2022-04-21 23:35:52	→	`2jt has joined #haskell
2022-04-21 23:35:52	←	tromp has quit (Client Quit)
2022-04-21 23:36:55	←	mikoto-chan has quit (Quit: mikoto-chan)
2022-04-21 23:37:44	→	tromp has joined #haskell
2022-04-21 23:38:59	→	hololeap has joined #haskell
2022-04-21 23:39:30	→	jakalx has joined #haskell
2022-04-21 23:39:57	→	acidjnk has joined #haskell
2022-04-21 23:43:12	←	ec has quit (Quit: ec)
2022-04-21 23:46:40	←	akegalj has quit (Quit: leaving)
2022-04-21 23:47:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-21 23:48:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-04-21 23:49:40	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-21 23:49:58	→	mikoto-chan has joined #haskell
2022-04-21 23:50:08	←	CiaoSen has quit (Ping timeout: 248 seconds)
2022-04-21 23:52:40	→	hololeap has joined #haskell
2022-04-21 23:53:02	→	tromp has joined #haskell
2022-04-21 23:54:51	←	eggplantade has quit (Remote host closed the connection)
2022-04-21 23:55:08	←	aman has quit (Quit: aman)
2022-04-21 23:55:57	←	`2jt has quit (Remote host closed the connection)
2022-04-21 23:55:58	←	dyeplexer has quit (Remote host closed the connection)
2022-04-21 23:56:35	→	redb has joined #haskell
2022-04-21 23:59:38	→	coot has joined #haskell
2022-04-22 00:01:15	←	redb has quit (Ping timeout: 276 seconds)
2022-04-22 00:02:25	→	redb has joined #haskell
2022-04-22 00:02:29	→	xkuru has joined #haskell
2022-04-22 00:03:50	→	jerry99 has joined #haskell
2022-04-22 00:04:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-04-22 00:07:05	→	waleee has joined #haskell
2022-04-22 00:07:12	→	hololeap has joined #haskell
2022-04-22 00:09:38	→	aman has joined #haskell
2022-04-22 00:15:17	←	redb has quit (Ping timeout: 246 seconds)
2022-04-22 00:16:07	→	eggplantade has joined #haskell
2022-04-22 00:18:24	Hecate	dminuoso: you messed up powerdns' description markup :)
2022-04-22 00:20:08	dminuoso	huh what?
2022-04-22 00:20:54	Hecate	https://hackage.haskell.org/package/powerdns-0.4.1
2022-04-22 00:20:55	dminuoso	Mmm. This is surprising, I guess something changed between cabal 1.10 and 3.0
2022-04-22 00:20:57	dminuoso	This is curious
2022-04-22 00:21:09	Hecate	dminuoso: you mean, between three major, breaking releases?
2022-04-22 00:21:16	Hecate	yeah something's bound to change :-P
2022-04-22 00:22:55	←	aman has quit (Quit: aman)
2022-04-22 00:22:58	→	jhagborg has joined #haskell
2022-04-22 00:24:24	dminuoso	Hecate:  This is one is curious. I dont quite understand why this would be the case.
2022-04-22 00:24:49	←	mrosenbe has quit (Remote host closed the connection)
2022-04-22 00:25:29	→	redb has joined #haskell
2022-04-22 00:25:48	→	bahamas has joined #haskell
2022-04-22 00:26:24	dminuoso	Let me run haddock on this locally
2022-04-22 00:28:28	dminuoso	Could this possibly be a haddock bug?
2022-04-22 00:29:21	dminuoso	The description field hasnt changed, its freeform. It's haddock that interprets this as markup, but apparently not for when the cabal-version is 3.0
2022-04-22 00:29:59	←	redb has quit (Ping timeout: 240 seconds)
2022-04-22 00:34:10	←	dhouthoo has quit (Quit: WeeChat 3.5)
2022-04-22 00:35:49	←	eggplantade has quit (Remote host closed the connection)
2022-04-22 00:42:44	→	jgeerds has joined #haskell
2022-04-22 00:42:52	→	jmdaemon has joined #haskell
2022-04-22 00:49:00	→	redb has joined #haskell
2022-04-22 00:53:54	←	redb has quit (Ping timeout: 276 seconds)
2022-04-22 00:54:31	→	redb has joined #haskell
2022-04-22 00:57:42	→	Guest27 has joined #haskell
2022-04-22 00:59:39	←	redb has quit (Ping timeout: 272 seconds)
2022-04-22 01:02:02	←	bahamas has quit (Read error: Connection reset by peer)
2022-04-22 01:02:10	dminuoso	Hecate: Im beginning to suspect this could be a cabal-install bug. 
2022-04-22 01:02:25	dminuoso	Presumably hackage ends up invoking `cabal haddock` right?
2022-04-22 01:04:22	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-22 01:06:20	→	MajorBiscuit has joined #haskell
2022-04-22 01:10:21	←	stackdroid18 has quit (Quit: hasta la vista... tchau!)
2022-04-22 01:10:45	→	redb has joined #haskell
2022-04-22 01:11:00	→	stackdroid18 has joined #haskell
2022-04-22 01:11:16	→	eggplantade has joined #haskell
2022-04-22 01:15:21	←	redb has quit (Ping timeout: 276 seconds)
2022-04-22 01:18:31	→	tromp has joined #haskell
2022-04-22 01:21:01	←	tv has quit (Ping timeout: 240 seconds)
2022-04-22 01:23:38	→	anomal has joined #haskell
2022-04-22 01:28:05	←	jonathanx has quit (Ping timeout: 246 seconds)
2022-04-22 01:28:25	dminuoso	Hecate: Okay I have a testcase now. Im almost entirely convinced this is a cabal-install bug.
2022-04-22 01:28:35	dminuoso	Phew!
2022-04-22 01:28:57	←	_ht has quit (Remote host closed the connection)
2022-04-22 01:30:40	→	yauhsien has joined #haskell
2022-04-22 01:31:00	sclv	the description field isn't rendered by cabal-install or by haddock -- its rendered by hackage
2022-04-22 01:31:47	dminuoso	Mmm. I think I understand the reason now. In cabal-version 3.0 it was changed that empty lines are preserved and dots get processed as input now.
2022-04-22 01:31:53	dminuoso	That screwed up the haddock markdown.
2022-04-22 01:32:43	→	redb has joined #haskell
2022-04-22 01:33:49	→	Tuplanolla has joined #haskell
2022-04-22 01:36:12	dminuoso	Hecate: Okay, luckily I can simply use a revision here. Thanks for the headsup and sorry for the noise.
2022-04-22 01:36:15	←	jerry99 has quit (Quit: CGI:IRC (Ping timeout))
2022-04-22 01:38:17	←	jhagborg has quit (Ping timeout: 256 seconds)
2022-04-22 01:38:59	←	redb has quit (Ping timeout: 240 seconds)
2022-04-22 01:40:49	→	tv has joined #haskell
2022-04-22 01:41:36	←	heichro has quit (Quit: ERC (IRC client for Emacs 27.2))
2022-04-22 01:49:17	→	redb has joined #haskell
2022-04-22 01:51:11	→	fendor_ has joined #haskell
2022-04-22 01:52:16	→	jhagborg has joined #haskell
2022-04-22 01:53:35	←	fendor has quit (Ping timeout: 256 seconds)
2022-04-22 01:53:38	←	redb has quit (Ping timeout: 246 seconds)
2022-04-22 01:55:23	←	stackdroid18 has quit (Quit: hasta la vista... tchau!)
2022-04-22 01:56:59	→	redb has joined #haskell
2022-04-22 02:01:20	←	redb has quit (Ping timeout: 246 seconds)
2022-04-22 02:02:21	→	off^ has joined #haskell
2022-04-22 02:06:20	→	neurocyte8614492 has joined #haskell
2022-04-22 02:06:20	←	neurocyte8614492 has quit (Changing host)
2022-04-22 02:06:20	→	neurocyte8614492 has joined #haskell
2022-04-22 02:06:56	←	slack1256 has quit (Ping timeout: 246 seconds)
2022-04-22 02:10:51	→	redb has joined #haskell
2022-04-22 02:10:56	→	Guest91 has joined #haskell
2022-04-22 02:11:12	←	cross_ has quit (Remote host closed the connection)
2022-04-22 02:11:15	Guest91	Guest91: Well, I've managed to get 8.6.5 to build for me.  Took some doing, and two separate edits to the same part of a single conf.py file to fix two different problems with it.  I'll see if that set of bugs persists into 9.2.2 before reporting it.  (Problems are both with LaTeX config in a .py file.  Python's Unicode handling hates the
2022-04-22 02:11:15	Guest91	single \ that LaTeX uses, but changing those to \\ seems to fix it.  And LaTeX bugs out on the font specifications in the same config having spaces in them.)
2022-04-22 02:14:59	←	redb has quit (Ping timeout: 246 seconds)
2022-04-22 02:16:35	EvanR	are you sure you're in the right room
2022-04-22 02:16:58	→	deadmarshal_ has joined #haskell
2022-04-22 02:18:08	Guest91	For Haskell 8.6.5?  Yup.  Got some help here yesterday for a custom central build of GHC and several Haskell packages, figured I'd report back on progress in case anyone cared.
2022-04-22 02:18:34	Guest91	Step 1, still in progress, getting 9.2.2 built when all I have to work with initially is 8.2.2.
2022-04-22 02:18:50	→	littlebobeep has joined #haskell
2022-04-22 02:19:17	EvanR	oh ok
2022-04-22 02:19:54	Guest91	I was surprised to see .py files in the GHC source tree, but there they were.
2022-04-22 02:20:07	Rembane	Python 2 or 3?
2022-04-22 02:21:03	EvanR	build system stone soup
2022-04-22 02:21:14	Guest91	Dunno!  They're conf.py files without a shebang at the top.  Let me see what the configurator found.
2022-04-22 02:21:49	geekosaur	the test environment is in python
2022-04-22 02:22:02	geekosaur	s/environment/harness/
2022-04-22 02:22:08	Guest91	Configurator log doesn't say.  Given that, it's probably using the first thing that answers 'python' in my PATH, which is Python 3.
2022-04-22 02:22:11	geekosaur	dunno about anything else
2022-04-22 02:22:18	Rembane	Guest91: Sounds good. 
2022-04-22 02:22:39	←	neceve has quit (Ping timeout: 240 seconds)
2022-04-22 02:22:40	Rembane	I guess Python is nicer to build a test harness in than bash
2022-04-22 02:23:29	Guest91	geekosaur: this particular conf.py file looks to be part of the documentation build.
2022-04-22 02:26:14	→	redb has joined #haskell
2022-04-22 02:27:41	←	geekosaur has quit (Killed (NickServ (GHOST command used by allbery_b)))
2022-04-22 02:27:41	→	allbery_b has joined #haskell
2022-04-22 02:27:43	ℹ	allbery_b is now known as geekosaur
2022-04-22 02:27:56	monochrom	If you go back 10 years, you would find a perl script, too. >:)
2022-04-22 02:28:07	Guest91	I can go look in the tarballs I have stashed away!
2022-04-22 02:28:11	geekosaur	I gather it's still there, for LLVM
2022-04-22 02:28:15	Guest91	I may even have one that old.
2022-04-22 02:28:18	monochrom	Oh haha
2022-04-22 02:29:28	←	Guest27 has quit (Quit: Client closed)
2022-04-22 02:30:20	Guest91	Hm, nope.  I do have an elderly Haskell Platform build from 2011 -- for RHEL 5 -- but apparently wasn't saving tarballs at the time.  Probably should just delete that; we have no RHEL 5 hosts left.
2022-04-22 02:32:42	←	MajorBiscuit has quit (Ping timeout: 276 seconds)
2022-04-22 02:34:39	←	redb has quit (Ping timeout: 272 seconds)
2022-04-22 02:35:28	←	zer0bitz has quit (Ping timeout: 248 seconds)
2022-04-22 02:36:34	→	redb has joined #haskell
2022-04-22 02:36:59	←	jhagborg has quit (Ping timeout: 240 seconds)
2022-04-22 02:37:59	→	jao has joined #haskell
2022-04-22 02:38:09	←	wootehfoot has quit (Quit: Leaving)
2022-04-22 02:38:21	←	cheategg has quit (Ping timeout: 256 seconds)
2022-04-22 02:38:50	geekosaur	imagine being able to remove old platforms
2022-04-22 02:39:28	Rembane	In a few thousand years it should be possible.
2022-04-22 02:39:31	geekosaur	I couldn't even remove the pmax_ul4 stuff in 2010, when we'd desupported them in 2000 because the y2k patch didn't come out until late
2022-04-22 02:40:15	Guest91	Hah.  I'm not as confident as I'd like to be that nobody's using this, so I'll have to dig to make sure.  But at a guess, nobody wants Haskell Platform 2011.2.0.1 for anything anymore.
2022-04-22 02:40:19	geekosaur	at least I didn't have to try to build stuff for them any more
2022-04-22 02:40:47	EvanR	if you remove enough platforms is it really the original ship of ghthecius
2022-04-22 02:40:53	←	redb has quit (Ping timeout: 246 seconds)
2022-04-22 02:41:22	EvanR	I don't envy the job of software archeologist
2022-04-22 02:42:23	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-22 02:42:35	⚡	geekosaur is *almost* tempted to install AFS just to poke and see if pmax support is *still* in the depot tree
2022-04-22 02:42:45	→	zeenk has joined #haskell
2022-04-22 02:43:00	←	cosimone` has quit (Remote host closed the connection)
2022-04-22 02:43:04	Guest91	If you do, make sure to have a good bottle of scotch to hand.
2022-04-22 02:43:12	Guest91	You'll probably need it.
2022-04-22 02:43:16	→	pretty_dumm_guy has joined #haskell
2022-04-22 02:43:33	→	redb has joined #haskell
2022-04-22 02:45:12	←	chele has quit (Remote host closed the connection)
2022-04-22 02:46:00	←	fendor_ has quit (Remote host closed the connection)
2022-04-22 02:46:08	→	aman has joined #haskell
2022-04-22 02:47:49	→	cheategg has joined #haskell
2022-04-22 02:47:53	←	redb has quit (Ping timeout: 246 seconds)
2022-04-22 02:49:03	→	redb has joined #haskell
2022-04-22 02:52:03	←	takuan has quit (Remote host closed the connection)
2022-04-22 02:56:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-04-22 02:56:08	←	aman has quit (Quit: aman)
2022-04-22 02:56:54	→	abrantesasf has joined #haskell
2022-04-22 02:57:41	←	redb has quit (Ping timeout: 246 seconds)
2022-04-22 02:58:45	→	boxscape_ has joined #haskell
2022-04-22 02:59:05	←	abrantesasf has quit (Remote host closed the connection)
2022-04-22 02:59:36	←	sammelweis has quit (Remote host closed the connection)
2022-04-22 03:00:23	→	hololeap has joined #haskell
2022-04-22 03:00:43	→	sammelweis has joined #haskell
2022-04-22 03:01:02	→	abrantesasf has joined #haskell
2022-04-22 03:01:18	←	abrantesasf has quit (Remote host closed the connection)
2022-04-22 03:02:57	→	redb has joined #haskell
2022-04-22 03:03:59	←	jao has quit (Ping timeout: 246 seconds)
2022-04-22 03:05:18	→	tvandinther has joined #haskell
2022-04-22 03:06:01	→	jao has joined #haskell
2022-04-22 03:07:14	tvandinther	Hi again. I recently got started with Haskell and I'm using VS Code with the language server installed through ghcup. I just started using modules and now the language server doesn't work with the project anymore. It also comes up with an error when I restart the language server: "Multi Cradle: No prefixes matched" I am not sure what the easiest
2022-04-22 03:07:14	tvandinther	solution is and why this happens. Appreciate any pointers :)
2022-04-22 03:07:48	←	redb has quit (Ping timeout: 276 seconds)
2022-04-22 03:10:16	←	Midjak has quit (Quit: This computer has gone to sleep)
2022-04-22 03:11:47	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-22 03:12:59	→	Vajb has joined #haskell
2022-04-22 03:13:14	sm	#haskell-language-server:libera.chat knows most tvandinther 
2022-04-22 03:13:48	boxscape_	(that's #haskell-language-server if you're not using matrix)
2022-04-22 03:14:12	sm	thanks
2022-04-22 03:16:40	←	tvandinther has quit (Quit: Client closed)
2022-04-22 03:16:55	→	tvandinther has joined #haskell
2022-04-22 03:17:01	tvandinther	thanks
2022-04-22 03:17:59	←	deadmarshal_ has quit (Ping timeout: 246 seconds)
2022-04-22 03:18:59	→	redb has joined #haskell
2022-04-22 03:22:59	←	redb has quit (Ping timeout: 240 seconds)
2022-04-22 03:23:41	←	joo-_ has quit (Ping timeout: 256 seconds)
2022-04-22 03:23:43	←	coot has quit (Quit: coot)
2022-04-22 03:24:17	←	califax has quit (Remote host closed the connection)
2022-04-22 03:24:36	→	califax has joined #haskell
2022-04-22 03:25:05	←	zeenk has quit (Quit: Konversation terminated!)
2022-04-22 03:25:19	→	joo-_ has joined #haskell
2022-04-22 03:25:19	←	joo-_ has quit (Changing host)
2022-04-22 03:25:19	→	joo-_ has joined #haskell
2022-04-22 03:28:29	←	eggplantade has quit (Remote host closed the connection)
2022-04-22 03:29:30	←	boxscape_ has quit (Quit: Connection closed)
2022-04-22 03:29:32	←	DNH has quit (Quit: Textual IRC Client: www.textualapp.com)
2022-04-22 03:30:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-04-22 03:30:43	→	redb has joined #haskell
2022-04-22 03:33:20	→	hololeap has joined #haskell
2022-04-22 03:35:45	←	redb has quit (Ping timeout: 276 seconds)
2022-04-22 03:37:35	←	mikoto-chan has quit (Ping timeout: 246 seconds)
2022-04-22 03:41:29	→	cosimone has joined #haskell
2022-04-22 03:42:43	←	__monty__ has quit (Quit: leaving)
2022-04-22 03:42:56	→	xff0x_ has joined #haskell
2022-04-22 03:47:39	→	DNH has joined #haskell
2022-04-22 03:51:01	←	gehmehgeh has quit (Quit: Leaving)
2022-04-22 03:53:56	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-22 03:54:44	→	Vajb has joined #haskell
2022-04-22 04:02:13	←	dextaa has quit (Ping timeout: 256 seconds)
2022-04-22 04:03:40	→	redb has joined #haskell
2022-04-22 04:04:12	←	cosimone has quit (Remote host closed the connection)
2022-04-22 04:04:27	→	eggplantade has joined #haskell
2022-04-22 04:04:53	tvandinther	Would somebody be able to walk me through some imports and modules and how to make them work in the repl and in a stack project?
2022-04-22 04:05:27	tvandinther	I have a module where I import System.Random, when I load the module the REPL says it cant find the module for System.Random
2022-04-22 04:06:03	geekosaur	if you are using stack to install modules (this is actually not a good idea), you need to use stack ghci to access them
2022-04-22 04:06:36	→	cosimone has joined #haskell
2022-04-22 04:06:56	tvandinther	I read about not using the `stack install` command. Not fully sure why that is but I haven't run it
2022-04-22 04:06:57	ℹ	sander is now known as sndr
2022-04-22 04:07:37	geekosaur	because you don't install libraries with stack (or modern cabal), you let stack or cabal install them as part of a project which produces executables
2022-04-22 04:07:39	←	redb has quit (Ping timeout: 240 seconds)
2022-04-22 04:07:47	tvandinther	My project was started using `stack MontyHall new simple`.
2022-04-22 04:08:16	tvandinther	Right, and `stack install` is a global install?
2022-04-22 04:08:39	←	acidjnk has quit (Ping timeout: 240 seconds)
2022-04-22 04:08:40	geekosaur	actually it does nothing useful for a package which only consists of libraries
2022-04-22 04:09:10	geekosaur	anyway use "stack ghci" instead of "ghci", if you have random specified as a dependency, and it should work
2022-04-22 04:09:39	EvanR	cabal for lyfe
2022-04-22 04:09:48	→	jerry99 has joined #haskell
2022-04-22 04:10:10	tvandinther	I am using the `cabal repl` at the moment. How does that differ?
2022-04-22 04:10:28	EvanR	eyebrow, you are managing the project with stack but then did cabal repl
2022-04-22 04:10:29	geekosaur	it won't see anything installed by stack
2022-04-22 04:10:46	geekosaur	(contrariwise stack won't see anything installed via cabal)
2022-04-22 04:11:08	EvanR	they are kind of parallel tools instead of complimentary
2022-04-22 04:11:30	tvandinther	Oh okay. I was just told to make a new project with stack and then make a repl with cabal.
2022-04-22 04:11:31	geekosaur	they have some disagreements as to how to do some things
2022-04-22 04:11:36	geekosaur	o.O
2022-04-22 04:11:38	tvandinther	I notice that my stack project has a cabal file in it though
2022-04-22 04:12:09	EvanR	in the beginning there was cabal, and cabal hell, so thus stack was born. Then cabal was fixed
2022-04-22 04:12:21	geekosaur	"cabal" actually stands for two things: there is the Cabal library which everything uses as it's the interface to ghc'spackage databases, and there is cabal-install which is the "cabal" program
2022-04-22 04:12:57	janus	and stack is only compatible with old versions of the cabal library afaik?
2022-04-22 04:13:00	tvandinther	I see. so a cabal file /= cabal cli
2022-04-22 04:13:39	geekosaur	right
2022-04-22 04:13:51	geekosaur	and everything uses cabal files because they're package registration files
2022-04-22 04:14:00	tvandinther	As a beginner is it best to forget about cabal as a command line tool?
2022-04-22 04:14:21	EvanR	As a beginner is it best to forget about stack ?
2022-04-22 04:14:47	tvandinther	Hahaha, I suppose the question is, how do I learn Haskell and not get caught in the holy war :P
2022-04-22 04:15:12	EvanR	it seems to me you have to understand cabal anyway
2022-04-22 04:15:18	EvanR	and stack is optional
2022-04-22 04:16:52	sclv	if you are in a project, then depending on if you are using stack or cabal, you either say `stack ghci` or `cabal repl` to get a ghci session with the libraries the project depends on in scope
2022-04-22 04:16:59	sclv	thats the simplest way to explain it
2022-04-22 04:17:21	tvandinther	To take my question right back to where I first had issues. I had a simple project with my own modules, then I wanted to use functions from the System.Random package. I figured because it was just a system package that the import would just resolve but then the repl had issues loading my module, and also the language server complained about the
2022-04-22 04:17:21	tvandinther	import. What would be the right step to import a system module like this?
2022-04-22 04:17:31	sclv	both tools are project based and manage dependencies of your project for you, but in both cases raw "ghci" doesn't know about those dependencies unless you invoke it _through_ the tool
2022-04-22 04:17:58	sclv	ok, well you need to add random as a dependency to your project
2022-04-22 04:18:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-04-22 04:18:24	tvandinther	by just adding this line to the cabal file? `  build-depends:       random`
2022-04-22 04:18:28	sclv	yes
2022-04-22 04:18:55	tvandinther	Is there a list syntax for that or do I make a new key-value pair for each dependency
2022-04-22 04:19:06	sclv	its a list syntax
2022-04-22 04:19:40	sclv	you cn read through some example cabal files from hackage or whatever to get a sense of their syntax https://hackage.haskell.org/package/bytestring-0.11.3.0/bytestring.cabal
2022-04-22 04:20:11	sclv	or read the general docs https://cabal.readthedocs.io/en/3.6/cabal-package.html
2022-04-22 04:21:30	←	Tuplanolla has quit (Quit: Leaving.)
2022-04-22 04:21:36	←	yauhsien has quit (Remote host closed the connection)
2022-04-22 04:21:43	→	hololeap has joined #haskell
2022-04-22 04:24:18	tvandinther	thank you
2022-04-22 04:24:38	→	gurkenglas has joined #haskell
2022-04-22 04:25:08	←	albet70 has quit (Remote host closed the connection)
2022-04-22 04:25:11	←	pretty_dumm_guy has quit (Quit: WeeChat 3.5)
2022-04-22 04:26:33	←	cosimone has quit (Quit: ERC 5.4 (IRC client for GNU Emacs 28.1))
2022-04-22 04:31:17	→	albet70 has joined #haskell
2022-04-22 04:32:40	→	redb has joined #haskell
2022-04-22 04:35:09	←	jerry99 has quit (Quit: CGI:IRC)
2022-04-22 04:36:12	←	haritz has quit (Ping timeout: 276 seconds)
2022-04-22 04:38:29	←	redb has quit (Ping timeout: 256 seconds)
2022-04-22 04:40:17	→	redb has joined #haskell
2022-04-22 04:41:01	←	AkechiShiro has quit (Quit: WeeChat 3.2.1)
2022-04-22 04:41:36	←	mmhat has quit (Quit: WeeChat 3.5)
2022-04-22 04:42:27	→	haritz has joined #haskell
2022-04-22 04:42:27	←	haritz has quit (Changing host)
2022-04-22 04:42:27	→	haritz has joined #haskell
2022-04-22 04:45:07	←	jgeerds has quit (Ping timeout: 240 seconds)
2022-04-22 04:46:27	sm	System. and other hierarchical module names have no real meaning unfortunately.  They can come from any package, sometimes even from more than one
2022-04-22 04:46:59	←	redb has quit (Ping timeout: 256 seconds)
2022-04-22 04:47:55	→	teo has joined #haskell
2022-04-22 04:47:56	←	chomwitt has quit (Ping timeout: 260 seconds)
2022-04-22 04:48:00	sm	when you're building, the package names are more important, when coding, the module names are more important.
2022-04-22 04:49:21	→	rekahsoft has joined #haskell
2022-04-22 04:50:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-04-22 04:50:19	←	rekahsoft has quit (Remote host closed the connection)
2022-04-22 04:50:47	→	rekahsoft has joined #haskell
2022-04-22 04:50:51	←	raehik has quit (Ping timeout: 250 seconds)
2022-04-22 04:53:05	→	raehik has joined #haskell
2022-04-22 04:54:14	→	hololeap has joined #haskell
2022-04-22 04:56:10	←	Guest91 has quit (Quit: Client closed)
2022-04-22 04:57:36	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-22 04:59:20	→	redb has joined #haskell
2022-04-22 05:00:04	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-22 05:04:35	→	Vajb has joined #haskell
2022-04-22 05:05:38	→	chenqisu1 has joined #haskell
2022-04-22 05:05:59	←	nomagno has left #haskell
2022-04-22 05:07:24	←	redb has quit (Ping timeout: 276 seconds)
2022-04-22 05:15:28	←	foul_owl has quit (Ping timeout: 260 seconds)
2022-04-22 05:15:29	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-22 05:17:23	→	Vajb has joined #haskell
2022-04-22 05:17:59	→	redb has joined #haskell
2022-04-22 05:18:22	→	bitdex has joined #haskell
2022-04-22 05:19:17	→	yauhsien has joined #haskell
2022-04-22 05:21:05	←	tvandinther has quit (Quit: Client closed)
2022-04-22 05:22:11	→	stackdroid18 has joined #haskell
2022-04-22 05:22:41	←	redb has quit (Ping timeout: 256 seconds)
2022-04-22 05:24:40	→	tvandinther has joined #haskell
2022-04-22 05:25:04	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-22 05:25:59	→	jerry99 has joined #haskell
2022-04-22 05:26:50	→	bitdex has joined #haskell
2022-04-22 05:29:24	→	mvk has joined #haskell
2022-04-22 05:30:14	→	foul_owl has joined #haskell
2022-04-22 05:31:17	←	jerry99 has quit (Quit: CGI:IRC (Ping timeout))
2022-04-22 05:32:32	←	xff0x_ has quit (Read error: Connection reset by peer)
2022-04-22 05:35:05	←	azimut has quit (Quit: ZNC - https://znc.in)
2022-04-22 05:35:22	→	azimut has joined #haskell
2022-04-22 05:36:19	←	anomal has quit (Remote host closed the connection)
2022-04-22 05:37:13	→	ec has joined #haskell
2022-04-22 05:40:53	←	DNH has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2022-04-22 05:43:07	→	wroathe has joined #haskell
2022-04-22 05:43:07	←	wroathe has quit (Changing host)
2022-04-22 05:43:07	→	wroathe has joined #haskell
2022-04-22 05:44:45	Axman6	tvandinther: I'm probably the one who told you to use stack, but only because you mentioned you were already using it. I would recommend sticking with just cabal these days
2022-04-22 05:44:47	←	machinedgod has quit (Ping timeout: 240 seconds)
2022-04-22 05:45:47	←	ralu1 has quit (Ping timeout: 240 seconds)
2022-04-22 05:46:22	→	DNH has joined #haskell
2022-04-22 05:47:04	←	jpds has quit (Ping timeout: 240 seconds)
2022-04-22 05:47:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-22 05:47:57	←	DNH has quit (Client Quit)
2022-04-22 05:48:20	→	redb has joined #haskell
2022-04-22 05:48:58	→	jpds has joined #haskell
2022-04-22 05:49:01	→	DNH has joined #haskell
2022-04-22 05:52:19	←	redb has quit (Ping timeout: 240 seconds)
2022-04-22 05:53:41	←	DNH has quit (Ping timeout: 250 seconds)
2022-04-22 05:53:41	←	vicfred has quit (Quit: Leaving)
2022-04-22 05:55:54	←	rekahsoft has quit (Remote host closed the connection)
2022-04-22 05:58:34	←	jpds has quit (Ping timeout: 240 seconds)
2022-04-22 05:58:57	←	gurkenglas has quit (Ping timeout: 256 seconds)
2022-04-22 05:59:01	jackdk	I agree with Axman6. Stack was a good improvement at the time, but that time has passed.
2022-04-22 05:59:05	←	yauhsien has quit (Remote host closed the connection)
2022-04-22 05:59:13	←	raehik has quit (Ping timeout: 272 seconds)
2022-04-22 05:59:47	Axman6	I still think that for application development, there is some benefit to the LTS approach, but that's about it
2022-04-22 06:00:15	→	yauhsien has joined #haskell
2022-04-22 06:00:21	jackdk	`cabal freeze` covers that these days IMHO
2022-04-22 06:02:05	→	jpds has joined #haskell
2022-04-22 06:04:20	←	dka has quit (Quit: My Ex-Girlfriend once told me: I'm not a slut, I'm just popular)
2022-04-22 06:05:09	→	dka has joined #haskell
2022-04-22 06:05:13	→	renzhi has joined #haskell
2022-04-22 06:05:43	→	redb has joined #haskell
2022-04-22 06:05:46	sm	stack will still be a smoother experience for most new users most of the time. 
2022-04-22 06:06:26	sm	but that'll keep declining as long as it's not getting maintenance
2022-04-22 06:09:15	jackdk	I believe that is no longer true as of some time in the past, given that we now have ghcup, the v2-* commands are default, etc.
2022-04-22 06:09:21	→	jerry99 has joined #haskell
2022-04-22 06:09:59	←	redb has quit (Ping timeout: 240 seconds)
2022-04-22 06:10:35	→	ralu1 has joined #haskell
2022-04-22 06:11:18	sm	I see one tool with fewer footguns as simpler than all that, again most of the time, it's highly dependent. But YMMV
2022-04-22 06:11:35	jerry99	is there a shorter way of doing this?
2022-04-22 06:11:50	jerry99	:t let f = undefined :: Int -> String -> IO (); g = undefined :: IO Int; h = undefined :: IO String in join $ f <$> g <*> h
2022-04-22 06:11:51	lambdabot	IO ()
2022-04-22 06:12:29	←	jerry99 has quit (Client Quit)
2022-04-22 06:12:54	→	jerry99 has joined #haskell
2022-04-22 06:13:52	←	yauhsien has quit (Remote host closed the connection)
2022-04-22 06:14:50	→	yauhsien has joined #haskell
2022-04-22 06:15:03	jackdk	jerry99: Nothing comes to mind. You could write it out in `do` notation if you feel that's clearer
2022-04-22 06:16:04	←	jpds has quit (Ping timeout: 240 seconds)
2022-04-22 06:16:24	→	frost has joined #haskell
2022-04-22 06:17:17	←	hughjfchen has quit (Quit: WeeChat 2.8)
2022-04-22 06:18:01	sm	how could that really be much shorter ? I mean, come on :)
2022-04-22 06:19:00	sm	with a multiline paste maybe I'd see it
2022-04-22 06:19:02	→	jpds has joined #haskell
2022-04-22 06:19:42	←	Unicorn_Princess has quit (Quit: Leaving)
2022-04-22 06:19:55	←	yauhsien has quit (Ping timeout: 256 seconds)
2022-04-22 06:20:12	→	notzmv has joined #haskell
2022-04-22 06:22:35	→	hughjfchen has joined #haskell
2022-04-22 06:23:50	jerry99	I find it reasonably clean, I was just wondering if I missed some operators or functions
2022-04-22 06:24:30	jerry99	(it being join $ f <$> g <*> h)
2022-04-22 06:24:33	←	lbseale has quit (Read error: Connection reset by peer)
2022-04-22 06:24:41	←	teo has quit (Remote host closed the connection)
2022-04-22 06:27:15	→	redb has joined #haskell
2022-04-22 06:27:22	→	xff0x_ has joined #haskell
2022-04-22 06:30:56	sm	if you happen to be using any of these packages, they seem to define a helper: https://hoogle.haskell.org/?hoogle=(Int%20-%3E%20String%20-%3E%20IO%20())%20-%3E%20IO%20Int%20-%3E%20IO%20String%20-%3E%20IO%20()
2022-04-22 06:32:09	←	redb has quit (Ping timeout: 272 seconds)
2022-04-22 06:39:51	→	jhagborg has joined #haskell
2022-04-22 06:40:51	←	JordiGH has quit (Quit: Jacking out)
2022-04-22 06:41:09	←	albet70 has quit (Remote host closed the connection)
2022-04-22 06:44:11	←	neurocyte8614492 has quit (Ping timeout: 272 seconds)
2022-04-22 06:44:31	→	vysn has joined #haskell
2022-04-22 06:45:27	→	razetime has joined #haskell
2022-04-22 06:47:16	→	albet70 has joined #haskell
2022-04-22 06:48:04	←	jpds has quit (Ping timeout: 240 seconds)
2022-04-22 06:49:19	→	andrey_ has joined #haskell
2022-04-22 06:51:09	→	jpds has joined #haskell
2022-04-22 06:51:39	←	andrey has quit (Ping timeout: 240 seconds)
2022-04-22 06:52:31	→	redb has joined #haskell
2022-04-22 06:53:16	←	zebrag has quit (Quit: Konversation terminated!)
2022-04-22 06:55:18	←	califax has quit (Remote host closed the connection)
2022-04-22 06:55:32	→	califax has joined #haskell
2022-04-22 06:57:04	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-22 06:57:29	←	redb has quit (Ping timeout: 272 seconds)
2022-04-22 06:59:23	←	geekosaur has quit (Ping timeout: 272 seconds)
2022-04-22 07:00:10	→	bitdex has joined #haskell
2022-04-22 07:00:36	→	geekosaur has joined #haskell
2022-04-22 07:09:30	→	redb has joined #haskell
2022-04-22 07:13:45	←	redb has quit (Ping timeout: 256 seconds)
2022-04-22 07:19:34	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-22 07:20:34	→	bitdex has joined #haskell
2022-04-22 07:21:20	←	waleee has quit (Ping timeout: 248 seconds)
2022-04-22 07:21:29	←	euandreh has quit (Quit: WeeChat 3.5)
2022-04-22 07:31:22	→	merijn has joined #haskell
2022-04-22 07:31:38	→	redb has joined #haskell
2022-04-22 07:35:56	←	redb has quit (Ping timeout: 250 seconds)
2022-04-22 07:36:48	hololeap	@pf join $ f <$> g <*> h
2022-04-22 07:36:49	lambdabot	Maybe you meant: pl bf
2022-04-22 07:36:53	hololeap	@pl join $ f <$> g <*> h
2022-04-22 07:36:53	lambdabot	join (f <$> g <*> h)
2022-04-22 07:37:55	hololeap	I think it would be more clear with do notation, but that's just me
2022-04-22 07:42:27	←	[itchyjunk] has quit (Ping timeout: 250 seconds)
2022-04-22 07:42:33	hololeap	I also tried to reduce it with the knowledge that (\f -> join . fmap f) = (=<<), but it doesn't actually reduce that way
2022-04-22 07:45:31	hololeap	you end up with: \f g h -> (join . ((<*>) . fmap f) g) h
2022-04-22 07:46:26	→	[itchyjunk] has joined #haskell
2022-04-22 07:47:23	→	littlebobeep has joined #haskell
2022-04-22 07:53:21	→	nate1 has joined #haskell
2022-04-22 07:53:47	→	redb has joined #haskell
2022-04-22 08:00:47	←	nate1 has quit (Ping timeout: 256 seconds)
2022-04-22 08:01:21	←	redb has quit (Ping timeout: 256 seconds)
2022-04-22 08:04:12	←	bitdex has quit (Quit: = "")
2022-04-22 08:05:20	←	merijn has quit (Ping timeout: 246 seconds)
2022-04-22 08:05:35	←	stackdroid18 has quit (Quit: hasta la vista... tchau!)
2022-04-22 08:05:52	→	bitdex has joined #haskell
2022-04-22 08:06:04	←	califax has quit (Ping timeout: 240 seconds)
2022-04-22 08:06:45	→	redb has joined #haskell
2022-04-22 08:07:04	←	jpds has quit (Ping timeout: 240 seconds)
2022-04-22 08:07:30	→	jpds has joined #haskell
2022-04-22 08:07:34	→	califax has joined #haskell
2022-04-22 08:07:55	Axman6	join $ liftA2 f g h might be a little shorter
2022-04-22 08:09:01	←	bitdex has quit (Remote host closed the connection)
2022-04-22 08:10:03	→	bitdex has joined #haskell
2022-04-22 08:10:48	tvandinther	Quick question, I have a function that returns `IO Int` and I want to create a list of tuples of these integers `n` long. How would I do that?
2022-04-22 08:11:10	Axman6	what result type do you want?
2022-04-22 08:11:21	←	redb has quit (Ping timeout: 276 seconds)
2022-04-22 08:11:43	hololeap	tvandinther: so your function returns a different `IO Int` each time and you want to collect a few of those results?
2022-04-22 08:11:52	tvandinther	`IO (Int, Int)`  I suppose for the return
2022-04-22 08:12:03	tvandinther	yeah, basically a list of random integer tuples
2022-04-22 08:12:14	Axman6	the first thing that somes to mind is replicateN n ((,) <$> f <*> f)
2022-04-22 08:12:41	Axman6	IO (Int, Int) or IO [(Int, Int)]?
2022-04-22 08:12:56	tvandinther	yeah the list one
2022-04-22 08:13:04	hololeap	:t replicateM
2022-04-22 08:13:05	lambdabot	Applicative m => Int -> m a -> m [a]
2022-04-22 08:13:27	Axman6	looks like you want what I said above then
2022-04-22 08:14:13	hololeap	% :t \(f :: IO Int) (n :: Int) -> replicateM n ((,) <$> f <*> f)
2022-04-22 08:14:13	yahb	hololeap: IO Int -> Int -> IO [(Int, Int)]
2022-04-22 08:14:24	Axman6	though there might be better solutionms if you tell us where that IO Int comes from
2022-04-22 08:14:41	tvandinther	Cool, I think I'm getting closer to what I want. Am I correct in that I should define my pipeline functions as pure and then use `fmap` to get them to work with the IO monad?
2022-04-22 08:15:10	Axman6	I don't think you've given us enough information to be able to answer that
2022-04-22 08:15:52	hololeap	it's almost always a good idea to use the purest functions possible and then lift them into IO (or whatever abstraction) when you need to
2022-04-22 08:16:22	tvandinther	I have transformations that take the int tuple and checks if the integers are equal and returns a boolean, then I count how many matches there are. Then there is another variation on that where I change one of the ints in the tuple before comparison
2022-04-22 08:17:18	hololeap	change it with something from IO or something pure?
2022-04-22 08:17:32	tvandinther	change based on something pure
2022-04-22 08:18:44	hololeap	then you should be fine writing your two functions purely and piping in the IO Ints at the end
2022-04-22 08:19:13	hololeap	"piping" meaning just regular haskell function stuff, not the pipes package or anything
2022-04-22 08:21:18	tvandinther	Yes, I mean just passing outputs into inputs
2022-04-22 08:21:21	←	hgolden has quit (Remote host closed the connection)
2022-04-22 08:23:09	hololeap	your first function would be something like: (Int, Int) -> Bool
2022-04-22 08:23:23	hololeap	second would be: (Int -> Int) -> (Int, Int) -> (Int, Int)
2022-04-22 08:25:44	hololeap	then you would just grab your (IO [(Int, Int)]) using relicateM or repeatM in a do block, and pass them to those functions and count the results
2022-04-22 08:26:29	hololeap	you would end up with (IO Int) because 1) you are counting the results (Int) and 2) once you enter the IO monad your results have to be (IO a)
2022-04-22 08:27:19	hololeap	does that make sense?
2022-04-22 08:28:04	tvandinther	That makes sense. I just have questions about how to enter the IO monad
2022-04-22 08:28:06	tvandinther	I have a function `createTuple :: Int -> Int -> (Int, Int)` and a function `randomInt :: IO Int` and I want to apply them so that I can call something like `createTuple randomInt randomInt`
2022-04-22 08:29:08	hololeap	the most idiomatic way is to call randomInt twice in a do block to catch the results, then just end with `return (createTuple x y)` to get a `IO (Int, Int)` result
2022-04-22 08:29:14	tvandinther	and then `replicateM n createTuple'`
2022-04-22 08:29:34	hololeap	I can write up a quick example if you want
2022-04-22 08:29:38	tvandinther	I see, let me try that
2022-04-22 08:30:03	←	haasn has quit (Quit: ZNC 1.7.5+deb4 - https://znc.in)
2022-04-22 08:30:24	←	jhagborg has quit (Remote host closed the connection)
2022-04-22 08:30:44	→	redb has joined #haskell
2022-04-22 08:30:49	→	jhagborg has joined #haskell
2022-04-22 08:31:25	→	haasn has joined #haskell
2022-04-22 08:34:20	tvandinther	I made `createTuple' :: IO (Int, Int)` and then used it `tuples <- replicateM n createTuple'` but apparently tuples is type `[(Int, Int)]` when I expect it to be `[IO (Int, Int)]`. What am I missing?
2022-04-22 08:35:16	Axman6	:t replicateM
2022-04-22 08:35:17	lambdabot	Applicative m => Int -> m a -> m [a]
2022-04-22 08:35:30	Axman6	why do you expect it to be [IO (Int, Int)]?
2022-04-22 08:36:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-22 08:37:48	tvandinther	Oh should it be `IO [(Int, Int)]`?
2022-04-22 08:38:03	Axman6	if you're using replicateM, yes
2022-04-22 08:38:27	Axman6	if, for some reason, you want [IO (Int, Int)] then you can use replicate, but I doube that's what you want
2022-04-22 08:38:32	tvandinther	the type hint still shows me the pure list
2022-04-22 08:38:39	←	redb has quit (Ping timeout: 240 seconds)
2022-04-22 08:39:18	jackdk	can you copy paste from your ghci exactly what you typed and what it returned?
2022-04-22 08:39:31	→	littlebobeep has joined #haskell
2022-04-22 08:40:00	tvandinther	sure, I just have to fix my file cos its got some errors
2022-04-22 08:40:50	jackdk	no worries =)
2022-04-22 08:42:12	jackdk	Meanwhile, I think I understand what's going on. When you say you wrote `tuples <- replicateM n createTuple'` but apparently tuples is type `[(Int, Int)]`, was this in GHCi?
2022-04-22 08:43:15	tvandinther	it wasn't, so perhaps I am being misled by HLS.
2022-04-22 08:43:32	jackdk	It would've been inside a `do` block, then?
2022-04-22 08:43:34	hololeap	tvandinther: http://sprunge.us/b5BvyB?haskell
2022-04-22 08:43:38	tvandinther	Quick dumb question, how do I unpack a data record? Can I do that in a where clause?
2022-04-22 08:44:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-22 08:44:25	→	hgolden has joined #haskell
2022-04-22 08:44:38	jackdk	you can pattern-match like `let MyRecordConstructor { field1 = x, field2 = y } = myRecord in ..` (or the equivalent in a `where`)
2022-04-22 08:45:02	hololeap	you can give each field of the data record a name, which creates a function that unpacks that particular field
2022-04-22 08:45:10	jackdk	also that
2022-04-22 08:45:11	Axman6	you can also pattern match on it: let MyRecordConstructor x y z = myRecord
2022-04-22 08:45:16	jackdk	also also that
2022-04-22 08:45:34	←	califax has quit (Ping timeout: 240 seconds)
2022-04-22 08:45:44	Axman6	or you can turn on record dot syntax and use myRecord.field1, myRecord.filed2 :P
2022-04-22 08:45:56	jackdk	also also also that but let's not get ahead of ourselves =P
2022-04-22 08:46:08	hololeap	Axman6: when was that implemented?
2022-04-22 08:46:11	→	califax has joined #haskell
2022-04-22 08:46:20	hololeap	is that a 9.2 thing?
2022-04-22 08:46:36	jackdk	hololeap: yeah https://downloads.haskell.org/ghc/latest/docs/html/users_guide/exts/overloaded_record_dot.html#extension-OverloadedRecordDot
2022-04-22 08:46:48	hololeap	I mean, it's sorely needed
2022-04-22 08:47:38	hololeap	tvandinther: I never actually used the createTuple function in that example, but it wasn't really needed
2022-04-22 08:48:19	jackdk	tvandinther: so anyway, when  you write `x <- expression`, if `expression :: m a` for some monad `m`, then `x` has type `a`. This is because `do`-notation transforms `x <- expression` into `expression >>= \x -> ...`
2022-04-22 08:48:50	tvandinther	hololeap thanks for the code snippet. I'll take a closer look at it
2022-04-22 08:51:30	→	redb has joined #haskell
2022-04-22 08:54:53	tvandinther	Ahh I see. Because when I ran the same expression in ghci with :t I got IO [tuple]
2022-04-22 08:55:41	→	dyeplexer has joined #haskell
2022-04-22 08:56:33	←	redb has quit (Ping timeout: 272 seconds)
2022-04-22 08:56:35	tvandinther	and to check my understanding >>= is the bind operator which allows connecting the expression monad to the next expression using the output x?
2022-04-22 08:57:36	tvandinther	equivalent to unwrapping x from IO and calling the next function x -> IO y?
2022-04-22 08:57:49	tvandinther	I'm probably wrong somewhere
2022-04-22 08:58:18	→	redb has joined #haskell
2022-04-22 09:02:53	←	redb has quit (Ping timeout: 272 seconds)
2022-04-22 09:03:28	→	redb has joined #haskell
2022-04-22 09:04:12	hololeap	no, you're right. unwrapping x from IO and passing it to (x -> IO y) is what (>>=) does
2022-04-22 09:04:27	hololeap	do notation is just syntactic sugar for that
2022-04-22 09:04:49	c_wraith	as long as you only think of the "unwrapping" on the type level.
2022-04-22 09:05:07	hololeap	right, it's a conceptual thing
2022-04-22 09:05:34	c_wraith	at the value level, "unwrapping" is way too limited of a perspective to explain what's going on in IO
2022-04-22 09:08:30	tvandinther	So then now I have a function which is `x -> y` how do I make it `x -> IO y` so that I can pass x into it in this do block?
2022-04-22 09:08:47	tvandinther	I thought thats what fmap did but it doesn't seem to change it
2022-04-22 09:08:54	Axman6	that is what fmap does
2022-04-22 09:09:02	Axman6	% :t fmap @IO
2022-04-22 09:09:02	yahb	Axman6: (a -> b) -> IO a -> IO b
2022-04-22 09:10:02	→	littlebobeep has joined #haskell
2022-04-22 09:10:09	hololeap	well, what you're probably looking for is (return . f) or (pure . f) -- return and pure are synonyms
2022-04-22 09:10:21	tvandinther	Hmm. this is what it tells me:  Couldn't match type ‘[]’ with ‘IO’
2022-04-22 09:10:21	tvandinther	  Expected: IO [Bool]
2022-04-22 09:10:22	tvandinther	    Actual: [[Bool]]
2022-04-22 09:10:25	hololeap	return and pure take a pure function and lift it to an Applicative/Monad
2022-04-22 09:10:36	←	jhagborg has quit (Remote host closed the connection)
2022-04-22 09:10:44	hololeap	*a pure value
2022-04-22 09:11:01	→	jhagborg has joined #haskell
2022-04-22 09:11:09	←	redb has quit (Ping timeout: 276 seconds)
2022-04-22 09:11:22	hololeap	when I said in the comment that you have to end with an IO action, you can use return or pure which are essentially "nullary" actions
2022-04-22 09:12:58	hololeap	you can also use a let statement in the do block which is a pure way to assign a variable in a do block
2022-04-22 09:12:58	tvandinther	okay I seemed to get it with `let y = map xToYFunc [x]`
2022-04-22 09:13:09	tvandinther	what is the let statement sugar for?
2022-04-22 09:13:15	Axman6	nothing
2022-04-22 09:13:27	Axman6	it defines names
2022-04-22 09:13:40	←	frost has quit (Ping timeout: 252 seconds)
2022-04-22 09:13:45	tvandinther	ooh right. I figured thats what `x <-` was
2022-04-22 09:13:50	→	geranim0 has joined #haskell
2022-04-22 09:13:51	→	bob has joined #haskell
2022-04-22 09:14:04	hololeap	no, <- is the syntactic sugar part of the do block
2022-04-22 09:14:07	Axman6	though in do notation, I guess we have the sugar: ...; let x = y; ... which is equivalent to ...; let x = y in ...
2022-04-22 09:14:11	hololeap	that's what maps to (>>=)
2022-04-22 09:14:26	Axman6	let and <- do different things (pun intended)
2022-04-22 09:14:28	→	redb has joined #haskell
2022-04-22 09:14:54	Axman6	x <- y; other ==> y >>= \x -> other
2022-04-22 09:15:07	Axman6	let x = y; other ==> let x = y in other
2022-04-22 09:15:09	tvandinther	so the token to the left of `<-` needs to be used immediately in the next statement? or can you use it twice?
2022-04-22 09:15:15	Axman6	no
2022-04-22 09:15:23	Axman6	it is in scope from then onwards
2022-04-22 09:15:48	tvandinther	does it "unsugar" into a mess of nested brackets?
2022-04-22 09:15:55	tvandinther	if you weave the usage of it
2022-04-22 09:16:00	Axman6	> do {x <- [1,2,3]; y <- [10,20,30]; pure (x+y) }
2022-04-22 09:16:02	lambdabot	 [11,21,31,12,22,32,13,23,33]
2022-04-22 09:16:16	hololeap	@undo do {x <- [1,2,3]; y <- [10,20,30]; pure (x+y) }
2022-04-22 09:16:17	lambdabot	[1, 2, 3] >>= \ x -> [10, 20, 30] >>= \ y -> pure (x + y)
2022-04-22 09:16:17	Axman6	whether it does or not is irrelevant
2022-04-22 09:17:04	hololeap	you can write it out on pen and paper if you want, but do notation is there to save your brain cells and your sanity from all that
2022-04-22 09:17:39	dibblego	https://github.com/system-f/fp-course/blob/master/README.markdown?plain=1#L325
2022-04-22 09:17:57	tvandinther	yeah I can see that. I'm just trying to get my head around how the do block actually helps us. If you used x in that example do block again after the y, does it result in brackets?
2022-04-22 09:18:39	←	redb has quit (Ping timeout: 240 seconds)
2022-04-22 09:18:59	Axman6	I'm not sure how that's relevant
2022-04-22 09:19:04	←	mvk has quit (Ping timeout: 250 seconds)
2022-04-22 09:19:13	hololeap	yes, it can result in statements wrapped in parens, if it is complex enough
2022-04-22 09:19:18	dibblego	when the question is itself confused, in learning environment, we stop using do-notation altogether
2022-04-22 09:19:25	dibblego	go back to using functions >>=
2022-04-22 09:19:48	Axman6	do { x <- fx; y <- fy; g x y } ==> fx >>= (\x -> fy >>= \y -> g x y))
2022-04-22 09:20:00	hololeap	I think they understand the concept of (>>=) but want to make sure do notation works as they intend it to
2022-04-22 09:20:15	→	redb has joined #haskell
2022-04-22 09:20:27	Axman6	do { x <- fx; y <- fy; g x y } ==> fx >>= (\x -> fy >>= (\y -> g x y)) -- forgot a bracket
2022-04-22 09:20:48	tvandinther	Cool, I think it starts to make sense to me how the do block works
2022-04-22 09:21:09	hololeap	tvandinther: you can use @undo in the chat to convert a do statement to (>>=) spaghetti, or send a PM to lambdabot
2022-04-22 09:21:18	tvandinther	I can see it tries to turn procedural statements into nested and composed function calls
2022-04-22 09:21:25	tvandinther	thanks for the tip
2022-04-22 09:22:21	hololeap	do notation can look like procedural code, but you have to remember in haskell it's all function composition
2022-04-22 09:22:38	hololeap	there just happens to be a 1:1 correlation between the two
2022-04-22 09:22:54	tvandinther	makes sense
2022-04-22 09:23:05	tvandinther	thanks for all your help
2022-04-22 09:23:18	tvandinther	my program now works and compiles
2022-04-22 09:23:47	tvandinther	it runs n simulations of the monty all problem and reports how many times you win the car for swapping doors and not swapping doors
2022-04-22 09:23:54	tvandinther	monty hall*
2022-04-22 09:24:03	hololeap	nice
2022-04-22 09:26:32	←	sammelweis has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2022-04-22 09:29:50	→	akurilin_ has joined #haskell
2022-04-22 09:41:03	→	sammelweis has joined #haskell
2022-04-22 09:47:25	←	gabiruh has quit (Remote host closed the connection)
2022-04-22 09:47:40	→	gabiruh has joined #haskell
2022-04-22 09:48:46	→	cdman has joined #haskell
2022-04-22 09:48:47	←	cdman has quit (Changing host)
2022-04-22 09:48:47	→	cdman has joined #haskell
2022-04-22 09:50:48	←	jhagborg has quit (Ping timeout: 276 seconds)
2022-04-22 09:51:01	←	littlebobeep has quit (Remote host closed the connection)
2022-04-22 09:51:16	→	littlebobeep has joined #haskell
2022-04-22 09:52:45	→	jhagborg has joined #haskell
2022-04-22 09:54:16	→	takuan has joined #haskell
2022-04-22 09:56:09	hololeap	@undo do { let x = 3; let y = 4; pure (x+y) }
2022-04-22 09:56:09	lambdabot	<unknown>.hs:1:17:Parse error: let
2022-04-22 10:00:00	int-e	@undo do let { x = 3 }; let { y = 4 }; pure (x + y)
2022-04-22 10:00:01	lambdabot	let { x = 3} in let { y = 4} in pure (x + y)
2022-04-22 10:00:27	→	deadmarshal_ has joined #haskell
2022-04-22 10:02:03	hololeap	hm, I don't understand the distinction there
2022-04-22 10:02:14	→	hsw_ has joined #haskell
2022-04-22 10:02:31	int-e	you need braces for the let blocks; otherwise they extend as far to the right as it goes, leading to parse errors
2022-04-22 10:02:49	int-e	you /can/ put those outer braces as well, but those are optional.
2022-04-22 10:03:25	→	hsw__ has joined #haskell
2022-04-22 10:03:52	hololeap	@undo do { let x = 3; y = 4 }; pure (x + y)
2022-04-22 10:03:52	lambdabot	<unknown>.hs:1:24:Parse error: Last statement in a do-block must be an expression
2022-04-22 10:03:53	int-e	@undo do let { x = 3; y = 4 }; pure (x + y)
2022-04-22 10:03:53	lambdabot	let { x = 3; y = 4} in pure (x + y)
2022-04-22 10:04:18	hololeap	ok. good to know
2022-04-22 10:04:53	→	jonathanx has joined #haskell
2022-04-22 10:04:54	←	hsw__ has quit (Remote host closed the connection)
2022-04-22 10:05:11	→	hsw__ has joined #haskell
2022-04-22 10:05:44	←	hsw has quit (Ping timeout: 260 seconds)
2022-04-22 10:06:18	int-e	fortunately this doesn't come up when writing code with layout... indenting the let bindings happens naturally
2022-04-22 10:07:08	←	hsw_ has quit (Ping timeout: 260 seconds)
2022-04-22 10:09:03	int-e	"those are optional" ... in this example, where the  `do` block is the outermost block of interest.
2022-04-22 10:09:38	hololeap	@undo do { let { x = 3; y = 4 }; pure (x + y) }
2022-04-22 10:09:39	lambdabot	let { x = 3; y = 4} in pure (x + y)
2022-04-22 10:09:42	int-e	I suppose it's more common to run into this in the form of `> let foo = do { bar; baz } in blah`...
2022-04-22 10:10:28	hololeap	yeah this only comes up for me in chat with one-line code blocks
2022-04-22 10:11:13	int-e	Hmm. Actually that works without braces. But it stops working if you want to have a second binding in the `let`...
2022-04-22 10:11:52	int-e	so context matters a lot for which braces can be omitted
2022-04-22 10:11:58	hololeap	@undo do { let { x = 3 }; let { y = 4 }; pure (x+y) }
2022-04-22 10:11:58	lambdabot	let { x = 3} in let { y = 4} in pure (x + y)
2022-04-22 10:12:05	hololeap	seems to work
2022-04-22 10:12:24	hololeap	that could be useful
2022-04-22 10:13:17	hololeap	:t do { z <- { let { x = 3 }; let { y = 4 }; pure (x+y) }; pure z }
2022-04-22 10:13:18	lambdabot	error: parse error on input ‘{’
2022-04-22 10:13:31	int-e	@undo do let { x = 3; }; pure 42
2022-04-22 10:13:31	lambdabot	let { x = 3} in pure 42
2022-04-22 10:14:03	int-e	Hmm. I wonder why it puts the closing brace there without a space. Oh well.
2022-04-22 10:14:39	←	hsw__ has quit (Ping timeout: 240 seconds)
2022-04-22 10:15:03	hololeap	the mystery of the prize
2022-04-22 10:21:17	hololeap	https://www.youtube.com/watch?v=BGPZMt3e4vM
2022-04-22 10:21:38	←	hololeap has quit (Remote host closed the connection)
2022-04-22 10:22:06	←	phma has quit (Read error: Connection reset by peer)
2022-04-22 10:22:52	→	phma has joined #haskell
2022-04-22 10:24:34	←	adanwan has quit (Ping timeout: 240 seconds)
2022-04-22 10:24:47	→	adanwan_ has joined #haskell
2022-04-22 10:27:34	→	hololeap has joined #haskell
2022-04-22 10:29:33	→	Guest27 has joined #haskell
2022-04-22 10:35:03	→	yauhsien has joined #haskell
2022-04-22 10:36:19	←	jao has quit (Remote host closed the connection)
2022-04-22 10:46:19	←	wroathe has quit (Ping timeout: 240 seconds)
2022-04-22 10:46:42	→	gpncarl has joined #haskell
2022-04-22 10:46:49	←	bob has quit (Quit: Leaving)
2022-04-22 10:46:49	←	geranim0 has quit (Quit: Leaving)
2022-04-22 10:48:12	→	geranim0 has joined #haskell
2022-04-22 10:48:18	→	bob has joined #haskell
2022-04-22 10:50:03	←	bob has quit (Client Quit)
2022-04-22 10:50:04	←	geranim0 has quit (Client Quit)
2022-04-22 10:50:36	→	geranim0 has joined #haskell
2022-04-22 10:50:47	→	bob has joined #haskell
2022-04-22 10:51:21	←	bob has quit (Remote host closed the connection)
2022-04-22 10:51:21	←	geranim0 has quit (K-Lined)
2022-04-22 10:51:58	→	Midjak has joined #haskell
2022-04-22 10:53:19	→	jao has joined #haskell
2022-04-22 10:55:09	→	tromp has joined #haskell
2022-04-22 10:57:08	←	monochrom has quit (Quit: NO CARRIER)
2022-04-22 10:58:48	←	notzmv has quit (Read error: Connection reset by peer)
2022-04-22 10:59:33	←	zaquest has quit (Remote host closed the connection)
2022-04-22 11:01:23	→	zaquest has joined #haskell
2022-04-22 11:04:15	←	jhagborg has quit (Remote host closed the connection)
2022-04-22 11:04:39	→	jhagborg has joined #haskell
2022-04-22 11:04:43	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-22 11:04:46	←	jakalx has left #haskell
2022-04-22 11:04:54	←	deadmarshal_ has quit (Ping timeout: 276 seconds)
2022-04-22 11:06:04	→	jakalx has joined #haskell
2022-04-22 11:06:56	→	gurkenglas has joined #haskell
2022-04-22 11:07:19	←	jao has quit (Ping timeout: 240 seconds)
2022-04-22 11:13:48	→	monochrom has joined #haskell
2022-04-22 11:15:06	←	Guest27 has quit (Quit: Client closed)
2022-04-22 11:18:12	→	michalz has joined #haskell
2022-04-22 11:20:48	→	_ht has joined #haskell
2022-04-22 11:23:41	←	yauhsien has quit (Remote host closed the connection)
2022-04-22 11:24:20	→	yauhsien has joined #haskell
2022-04-22 11:28:44	→	coot has joined #haskell
2022-04-22 11:29:36	←	yauhsien has quit (Ping timeout: 276 seconds)
2022-04-22 11:31:52	←	jerry99 has quit (Quit: CGI:IRC (Ping timeout))
2022-04-22 11:34:29	→	tromp has joined #haskell
2022-04-22 11:43:54	←	cheategg has quit (Ping timeout: 276 seconds)
2022-04-22 11:45:13	→	Guest84 has joined #haskell
2022-04-22 11:47:06	→	cheategg has joined #haskell
2022-04-22 11:54:51	→	Guest|58 has joined #haskell
2022-04-22 11:55:34	←	Guest|58 has quit (Client Quit)
2022-04-22 11:58:26	←	_ht has quit (Remote host closed the connection)
2022-04-22 11:59:44	dminuoso	Anyone with nix flakes experience? Im trying to override a dependency in callCabal2nix, which appears to work in principle, except it doesnt appear to recognize the version of the replaced dependency.
2022-04-22 12:00:33	→	acidjnk has joined #haskell
2022-04-22 12:01:08	dminuoso	Initially I thought I could just swap out a haskell dependency `dep` by providing it in the attrset in `callCabal2nix "foo" self { dep = dep; }`
2022-04-22 12:04:42	←	raym has quit (Quit: kernel update, rebooting...)
2022-04-22 12:04:45	→	jinsun__ has joined #haskell
2022-04-22 12:05:27	←	[itchyjunk] has quit (Read error: Connection reset by peer)
2022-04-22 12:06:31	→	raym has joined #haskell
2022-04-22 12:08:36	←	jinsun has quit (Ping timeout: 276 seconds)
2022-04-22 12:09:58	→	mikoto-chan has joined #haskell
2022-04-22 12:10:32	→	dut has joined #haskell
2022-04-22 12:10:51	→	gehmehgeh has joined #haskell
2022-04-22 12:13:12	→	deadmarshal_ has joined #haskell
2022-04-22 12:19:31	←	codedmart has left #haskell
2022-04-22 12:21:06	→	dhouthoo has joined #haskell
2022-04-22 12:22:27	→	fendor has joined #haskell
2022-04-22 12:22:36	→	hsw has joined #haskell
2022-04-22 12:24:28	Axman6	TIL it's actually alowable to indent all top level definitions in a Haskell module: https://stackoverflow.com/questions/71963606/indented-import-statement-causes-parsing-error-in-stylish-haskell 
2022-04-22 12:24:33	Axman6	I'm not ok with this
2022-04-22 12:25:51	dminuoso	On second thought this seems quite consistent.
2022-04-22 12:26:18	dminuoso	For the most part, there's not really a difference between top level declaration groups and nested declaration groups
2022-04-22 12:26:30	Axman6	I won't stand for it!
2022-04-22 12:26:44	Axman6	Up with this I will not put!
2022-04-22 12:26:50	dminuoso	The real question just becomes, why cant we have multiple modules per file!
2022-04-22 12:26:59	←	Guest84 has quit (Quit: Client closed)
2022-04-22 12:27:40	dminuoso	But yeah, this will break my regular flow of `rg ^foo`
2022-04-22 12:27:54	dminuoso	I wonder whether hasktags plays nice with this
2022-04-22 12:31:49	→	yauhsien has joined #haskell
2022-04-22 12:34:30	←	hsw has quit (Quit: Leaving)
2022-04-22 12:37:35	[Leary]	dminuoso: You could always overlay the override into the haskell package set you pull callCabal2nix from. I'm not sure if there's a nicer way to do it using the final argument.
2022-04-22 12:40:03	dminuoso	[Leary]: I think I finally figured it out. I kept writing `outputs = { self, powerdns }: ... callCabal2nix "powerdns-gerd" self { inherit powerdns; }`, but I should have referred to the correct powerdns output.
2022-04-22 12:40:23	dminuoso	This is the price for not having a nominal or even structural type system.
2022-04-22 12:40:49	dminuoso	As long as the attrvalues in that set are sets themselves, callCabal2nix is happy.
2022-04-22 12:41:29	←	gpncarl has quit (Ping timeout: 246 seconds)
2022-04-22 12:41:31	→	gpncarl_ has joined #haskell
2022-04-22 12:42:53	←	jinsun__ has quit (Ping timeout: 246 seconds)
2022-04-22 12:43:09	→	jinsun has joined #haskell
2022-04-22 12:44:45	←	cdman has quit (Quit: Leaving)
2022-04-22 12:51:14	→	odnes has joined #haskell
2022-04-22 12:54:35	←	yauhsien has quit (Remote host closed the connection)
2022-04-22 12:55:11	→	yauhsien has joined #haskell
2022-04-22 12:56:03	←	gehmehgeh has quit (Remote host closed the connection)
2022-04-22 12:57:14	→	gehmehgeh has joined #haskell
2022-04-22 12:59:36	→	zeenk has joined #haskell
2022-04-22 13:00:36	←	yauhsien has quit (Ping timeout: 276 seconds)
2022-04-22 13:01:38	←	awpr has quit (Quit: Connection closed for inactivity)
2022-04-22 13:02:28	→	anomal has joined #haskell
2022-04-22 13:04:31	←	yahb has quit (Ping timeout: 256 seconds)
2022-04-22 13:06:14	←	hololeap has quit (Remote host closed the connection)
2022-04-22 13:08:19	←	jhagborg has quit (Ping timeout: 240 seconds)
2022-04-22 13:10:59	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 13:11:36	→	jgeerds has joined #haskell
2022-04-22 13:11:39	←	zyklotomic has quit (Ping timeout: 276 seconds)
2022-04-22 13:12:13	←	jmdaemon has quit (Ping timeout: 250 seconds)
2022-04-22 13:12:16	←	mniip_ has quit (Ping timeout: 620 seconds)
2022-04-22 13:13:23	→	CiaoSen has joined #haskell
2022-04-22 13:13:27	→	zyklotomic has joined #haskell
2022-04-22 13:14:55	→	michalz has joined #haskell
2022-04-22 13:15:57	→	cdman has joined #haskell
2022-04-22 13:15:57	←	cdman has quit (Changing host)
2022-04-22 13:15:57	→	cdman has joined #haskell
2022-04-22 13:15:57	←	Sgeo has quit (Read error: Connection reset by peer)
2022-04-22 13:17:23	→	chele has joined #haskell
2022-04-22 13:19:17	→	machinedgod has joined #haskell
2022-04-22 13:20:03	←	machinedgod has quit (Remote host closed the connection)
2022-04-22 13:21:13	→	machinedgod has joined #haskell
2022-04-22 13:21:13	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 13:21:53	←	econo has quit (Quit: Connection closed for inactivity)
2022-04-22 13:26:21	→	michalz has joined #haskell
2022-04-22 13:26:59	←	coot has quit (Ping timeout: 272 seconds)
2022-04-22 13:28:19	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 13:32:32	←	acidjnk has quit (Ping timeout: 248 seconds)
2022-04-22 13:32:57	→	vpan has joined #haskell
2022-04-22 13:33:17	→	michalz has joined #haskell
2022-04-22 13:33:55	←	zeenk has quit (Quit: Konversation terminated!)
2022-04-22 13:34:28	→	frost has joined #haskell
2022-04-22 13:36:22	←	geekosaur has quit (Remote host closed the connection)
2022-04-22 13:37:47	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 13:39:10	→	acidjnk has joined #haskell
2022-04-22 13:39:57	←	vysn has quit (Ping timeout: 250 seconds)
2022-04-22 13:40:49	→	geekosaur has joined #haskell
2022-04-22 13:42:55	→	michalz has joined #haskell
2022-04-22 13:45:20	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 13:45:39	→	chomwitt has joined #haskell
2022-04-22 13:46:26	→	EvanR_ has joined #haskell
2022-04-22 13:47:05	←	tzh has quit (Quit: zzz)
2022-04-22 13:47:24	←	EvanR has quit (Ping timeout: 260 seconds)
2022-04-22 13:49:04	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-22 13:49:51	→	michalz has joined #haskell
2022-04-22 13:50:28	→	bitdex has joined #haskell
2022-04-22 13:51:22	→	cosimone has joined #haskell
2022-04-22 13:52:28	←	eggplantade has quit (Remote host closed the connection)
2022-04-22 13:53:50	→	ccntrq has joined #haskell
2022-04-22 13:53:51	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 13:56:07	←	jgeerds has quit (Ping timeout: 272 seconds)
2022-04-22 13:56:16	←	acidjnk has quit (Ping timeout: 260 seconds)
2022-04-22 13:59:04	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-22 13:59:07	→	michalz has joined #haskell
2022-04-22 14:00:11	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 14:03:48	→	bitdex has joined #haskell
2022-04-22 14:04:11	→	michalz has joined #haskell
2022-04-22 14:04:27	→	Pickchea has joined #haskell
2022-04-22 14:06:27	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 14:06:45	→	michalz has joined #haskell
2022-04-22 14:09:07	←	deadmarshal_ has quit (Ping timeout: 256 seconds)
2022-04-22 14:09:42	→	deadmarshal_ has joined #haskell
2022-04-22 14:11:27	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 14:13:18	←	xkuru has quit (Read error: Connection reset by peer)
2022-04-22 14:15:15	→	pagnol has joined #haskell
2022-04-22 14:15:33	→	MajorBiscuit has joined #haskell
2022-04-22 14:16:09	→	kimjetwav has joined #haskell
2022-04-22 14:16:20	→	michalz has joined #haskell
2022-04-22 14:17:52	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 14:19:27	←	dminuoso has quit (Quit: ZNC 1.7.5 - https://znc.in)
2022-04-22 14:19:32	←	m1dnight has quit (Quit: WeeChat 3.5)
2022-04-22 14:20:04	→	dminuoso has joined #haskell
2022-04-22 14:20:54	→	m1dnight has joined #haskell
2022-04-22 14:21:39	→	michalz has joined #haskell
2022-04-22 14:22:50	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 14:26:33	←	phma has quit (Read error: Connection reset by peer)
2022-04-22 14:26:46	→	michalz has joined #haskell
2022-04-22 14:27:06	→	phma has joined #haskell
2022-04-22 14:28:06	←	michalz has quit (Remote host closed the connection)
2022-04-22 14:28:29	albet70	% :t join @((->)(a->b))
2022-04-22 14:29:17	albet70	:t join @((->)(_->_))
2022-04-22 14:29:18	lambdabot	error: parse error on input ‘->’
2022-04-22 14:30:10	←	AdamConner-Sax[m has quit (Quit: You have been kicked for being idle)
2022-04-22 14:31:02	albet70	join :: ((a->b) -> (a->b)->c) -> (a->b)->c
2022-04-22 14:31:15	→	AdamConner-Sax[m has joined #haskell
2022-04-22 14:31:15	←	AdamConner-Sax[m has left #haskell
2022-04-22 14:31:22	albet70	which senecio would use this join?
2022-04-22 14:34:14	→	michalz has joined #haskell
2022-04-22 14:35:37	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 14:35:39	←	cosimone has quit (Ping timeout: 240 seconds)
2022-04-22 14:38:24	←	ikke has quit (Quit: WeeChat 3.2)
2022-04-22 14:40:19	→	cosimone has joined #haskell
2022-04-22 14:40:34	→	michalz has joined #haskell
2022-04-22 14:41:51	→	zer0bitz has joined #haskell
2022-04-22 14:43:14	→	briandaed has joined #haskell
2022-04-22 14:44:35	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 14:48:08	←	bitmapper has quit (Quit: Connection closed for inactivity)
2022-04-22 14:49:46	→	michalz has joined #haskell
2022-04-22 14:53:10	→	eggplantade has joined #haskell
2022-04-22 14:58:11	←	eggplantade has quit (Ping timeout: 272 seconds)
2022-04-22 15:01:34	→	mmhat has joined #haskell
2022-04-22 15:02:32	→	Unicorn_Princess has joined #haskell
2022-04-22 15:02:59	←	deadmarshal_ has quit (Ping timeout: 240 seconds)
2022-04-22 15:04:59	←	redb has quit (Ping timeout: 240 seconds)
2022-04-22 15:07:03	←	chomwitt has quit (Ping timeout: 250 seconds)
2022-04-22 15:12:53	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 15:13:16	←	cyphase has quit (Ping timeout: 260 seconds)
2022-04-22 15:14:01	←	xff0x_ has quit (Ping timeout: 272 seconds)
2022-04-22 15:17:30	→	michalz has joined #haskell
2022-04-22 15:18:03	→	cyphase has joined #haskell
2022-04-22 15:18:43	→	chomwitt has joined #haskell
2022-04-22 15:20:50	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 15:22:57	←	Pickchea has quit (Ping timeout: 276 seconds)
2022-04-22 15:30:09	ℹ	irc: disconnected from server
2022-04-22 15:30:33	→	oxide has joined #haskell
2022-04-22 15:30:33	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-22 15:30:33	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-22 15:30:34	ℹ	Channel #haskell: 699 nicks (1 op, 0 voices, 698 normals)
2022-04-22 15:30:34	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-22 15:30:34	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-22 15:31:45	→	acidjnk has joined #haskell
2022-04-22 15:33:02	→	michalz has joined #haskell
2022-04-22 15:33:14	→	akegalj has joined #haskell
2022-04-22 15:33:33	←	mikoto-chan has quit (Ping timeout: 256 seconds)
2022-04-22 15:34:14	→	__monty__ has joined #haskell
2022-04-22 15:36:31	→	redb has joined #haskell
2022-04-22 15:39:28	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 15:39:54	→	michalz has joined #haskell
2022-04-22 15:40:55	←	redb has quit (Ping timeout: 256 seconds)
2022-04-22 15:41:47	akegalj	Do I remember correctly that there were 1200 active users in this channel 5+ years ago (on freenode network at that time)? Did this drop happen when #haskell changed networks or is there some other dynamics at play? I really enjoy reading discussion and tips and tricks shered in this channel and I hope it stays healthy :)
2022-04-22 15:42:18	geekosaur	happened with the cutover from freenode
2022-04-22 15:42:30	geekosaur	we figure there were never 1200 *active* users
2022-04-22 15:44:04	→	raehik has joined #haskell
2022-04-22 15:44:04	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 15:44:13	akegalj	yeah, I am mostly in read only mode as well. But if I feel confident contributing (which i rarelly do :D) I step in
2022-04-22 15:44:48	akegalj	ok, so freenode cutover is main reason
2022-04-22 15:48:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-22 15:48:49	→	michalz has joined #haskell
2022-04-22 15:50:39	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 15:52:04	←	tvandinther has quit (Quit: Client closed)
2022-04-22 15:55:05	←	crameleon has quit (Quit: I love you.)
2022-04-22 15:55:15	→	michalz has joined #haskell
2022-04-22 15:58:27	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 15:58:29	sm	in two ways: cleaning out of inactive nicks, and people taking the opportunity to try newer chat systems
2022-04-22 16:00:34	←	haskl[error] has quit (Read error: Connection reset by peer)
2022-04-22 16:00:50	yushyin	i still see all the regulars from before the network change (and also lots of new nicks) ^^
2022-04-22 16:03:04	→	haskl has joined #haskell
2022-04-22 16:03:42	→	michalz has joined #haskell
2022-04-22 16:05:38	←	Batzy has quit (Quit: No Ping reply in 180 seconds.)
2022-04-22 16:06:54	←	odnes_ has quit (Remote host closed the connection)
2022-04-22 16:07:05	→	Batzy has joined #haskell
2022-04-22 16:07:13	→	odnes_ has joined #haskell
2022-04-22 16:07:37	→	Lord_of_Life_ has joined #haskell
2022-04-22 16:08:08	→	acidsys has joined #haskell
2022-04-22 16:08:19	←	Lord_of_Life has quit (Ping timeout: 240 seconds)
2022-04-22 16:09:10	→	coot has joined #haskell
2022-04-22 16:09:39	→	jgeerds has joined #haskell
2022-04-22 16:10:18	ℹ	Lord_of_Life_ is now known as Lord_of_Life
2022-04-22 16:10:41	→	redb has joined #haskell
2022-04-22 16:18:06	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 16:19:19	←	jakalx has left #haskell
2022-04-22 16:19:43	→	jakalx has joined #haskell
2022-04-22 16:19:53	←	redb has quit (Ping timeout: 272 seconds)
2022-04-22 16:20:52	→	deadmarshal_ has joined #haskell
2022-04-22 16:21:21	←	odnes_ has quit (Quit: Leaving)
2022-04-22 16:22:52	→	michalz has joined #haskell
2022-04-22 16:24:04	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-22 16:24:04	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 16:25:34	←	deadmarshal_ has quit (Ping timeout: 272 seconds)
2022-04-22 16:26:17	→	bitdex has joined #haskell
2022-04-22 16:29:05	←	Vajb has quit (Ping timeout: 256 seconds)
2022-04-22 16:29:09	→	michalz has joined #haskell
2022-04-22 16:29:43	→	Vajb has joined #haskell
2022-04-22 16:29:44	←	akegalj has quit (Quit: leaving)
2022-04-22 16:30:15	→	yauhsien has joined #haskell
2022-04-22 16:31:12	←	chenqisu1 has quit (Ping timeout: 276 seconds)
2022-04-22 16:33:11	→	abastro has joined #haskell
2022-04-22 16:34:23	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 16:36:26	←	yauhsien has quit (Remote host closed the connection)
2022-04-22 16:37:11	→	redb has joined #haskell
2022-04-22 16:37:57	→	yauhsien has joined #haskell
2022-04-22 16:38:48	→	mikoto-chan has joined #haskell
2022-04-22 16:39:38	→	michalz has joined #haskell
2022-04-22 16:40:27	←	acidjnk has quit (Ping timeout: 240 seconds)
2022-04-22 16:41:14	←	redb has quit (Ping timeout: 246 seconds)
2022-04-22 16:51:39	←	xcombelle has quit (Ping timeout: 240 seconds)
2022-04-22 16:56:00	←	joo-_ has quit (Quit: leaving)
2022-04-22 16:56:14	→	joo-_ has joined #haskell
2022-04-22 16:56:14	←	joo-_ has quit (Changing host)
2022-04-22 16:56:14	→	joo-_ has joined #haskell
2022-04-22 16:57:24	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 17:02:30	→	michalz has joined #haskell
2022-04-22 17:03:45	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-22 17:04:34	→	Vajb has joined #haskell
2022-04-22 17:05:29	→	acidjnk has joined #haskell
2022-04-22 17:05:52	→	redb has joined #haskell
2022-04-22 17:13:39	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 17:14:59	←	redb has quit (Ping timeout: 240 seconds)
2022-04-22 17:18:36	→	michalz has joined #haskell
2022-04-22 17:18:46	←	jgeerds has quit (Ping timeout: 272 seconds)
2022-04-22 17:19:54	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-22 17:22:18	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 17:23:38	←	califax has quit (Remote host closed the connection)
2022-04-22 17:24:37	→	califax has joined #haskell
2022-04-22 17:26:11	←	zer0bitz has quit (Read error: Connection reset by peer)
2022-04-22 17:27:33	→	michalz has joined #haskell
2022-04-22 17:27:39	←	img has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-22 17:27:57	→	img has joined #haskell
2022-04-22 17:29:16	←	bitdex has quit (Quit: = "")
2022-04-22 17:29:37	→	euandreh has joined #haskell
2022-04-22 17:31:52	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 17:36:56	→	michalz has joined #haskell
2022-04-22 17:38:42	←	euandreh has quit (Ping timeout: 250 seconds)
2022-04-22 17:38:43	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 17:39:55	→	ubert1 has joined #haskell
2022-04-22 17:42:01	→	michalz has joined #haskell
2022-04-22 17:43:49	→	redb has joined #haskell
2022-04-22 17:43:49	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 17:47:09	→	michalz has joined #haskell
2022-04-22 17:47:59	←	redb has quit (Ping timeout: 240 seconds)
2022-04-22 17:48:40	←	acidjnk has quit (Ping timeout: 260 seconds)
2022-04-22 17:51:38	←	razetime has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2022-04-22 17:53:47	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 17:54:14	→	michalz has joined #haskell
2022-04-22 17:55:19	→	euandreh has joined #haskell
2022-04-22 17:55:19	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 17:56:25	←	yauhsien has quit (Remote host closed the connection)
2022-04-22 17:57:01	→	yauhsien has joined #haskell
2022-04-22 17:58:26	→	xff0x_ has joined #haskell
2022-04-22 17:58:56	→	abrantesasf has joined #haskell
2022-04-22 17:58:56	→	redb has joined #haskell
2022-04-22 17:59:00	→	michalz has joined #haskell
2022-04-22 17:59:20	←	abrantesasf has quit (Remote host closed the connection)
2022-04-22 18:01:13	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 18:01:38	→	michalz has joined #haskell
2022-04-22 18:02:01	←	yauhsien has quit (Ping timeout: 256 seconds)
2022-04-22 18:03:08	←	redb has quit (Ping timeout: 246 seconds)
2022-04-22 18:06:17	←	michalz has quit (Read error: Connection reset by peer)
2022-04-22 18:10:43	→	yauhsien has joined #haskell
2022-04-22 18:12:37	←	cheategg has quit (Ping timeout: 272 seconds)
2022-04-22 18:12:50	→	cheategg has joined #haskell
2022-04-22 18:20:27	←	perrierjouet has quit (Ping timeout: 240 seconds)
2022-04-22 18:24:28	←	abastro has quit (Remote host closed the connection)
2022-04-22 18:25:15	←	Ram-Z has quit (Ping timeout: 256 seconds)
2022-04-22 18:27:18	→	fluxit has joined #haskell
2022-04-22 18:32:45	→	Pickchea has joined #haskell
2022-04-22 18:33:35	→	stef204 has joined #haskell
2022-04-22 18:33:58	→	redb has joined #haskell
2022-04-22 18:34:01	→	tromp has joined #haskell
2022-04-22 18:34:12	←	sammelweis has quit (Ping timeout: 240 seconds)
2022-04-22 18:38:08	←	redb has quit (Ping timeout: 246 seconds)
2022-04-22 18:39:27	→	szkl has joined #haskell
2022-04-22 18:40:18	←	yauhsien has quit (Remote host closed the connection)
2022-04-22 18:40:51	→	meinside has joined #haskell
2022-04-22 18:41:34	→	yauhsien has joined #haskell
2022-04-22 18:43:08	→	zer0bitz has joined #haskell
2022-04-22 18:44:53	→	sammelweis has joined #haskell
2022-04-22 18:47:32	←	coot has quit (Quit: coot)
2022-04-22 18:49:53	→	deadmarshal_ has joined #haskell
2022-04-22 18:51:05	←	mikoto-chan has quit (Ping timeout: 246 seconds)
2022-04-22 18:53:19	→	mikoto-chan has joined #haskell
2022-04-22 18:54:17	carter	Matrix channels have those accidental conference notifications
2022-04-22 18:54:51	←	deadmarshal_ has quit (Ping timeout: 276 seconds)
2022-04-22 18:56:02	→	abrantesasf has joined #haskell
2022-04-22 18:56:11	←	abrantesasf has quit (Remote host closed the connection)
2022-04-22 18:57:12	→	coot has joined #haskell
2022-04-22 18:57:48	→	abastro has joined #haskell
2022-04-22 18:58:31	←	stef204 has quit (Quit: WeeChat 3.5)
2022-04-22 18:59:20	←	rembo10 has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-22 19:00:11	←	gpncarl_ has quit (Ping timeout: 250 seconds)
2022-04-22 19:00:13	→	rembo10 has joined #haskell
2022-04-22 19:06:09	→	Ram-Z has joined #haskell
2022-04-22 19:06:22	→	redb has joined #haskell
2022-04-22 19:09:23	←	frost has quit (Quit: Client closed)
2022-04-22 19:10:53	←	abastro has quit (Remote host closed the connection)
2022-04-22 19:11:06	←	redb has quit (Ping timeout: 276 seconds)
2022-04-22 19:11:30	→	abastro has joined #haskell
2022-04-22 19:11:41	←	Unicorn_Princess has quit (Read error: Connection reset by peer)
2022-04-22 19:11:51	→	Unicorn_Princess has joined #haskell
2022-04-22 19:12:14	→	redb has joined #haskell
2022-04-22 19:12:38	←	ubert1 has quit (Quit: ubert1)
2022-04-22 19:12:55	→	wroathe has joined #haskell
2022-04-22 19:12:55	←	wroathe has quit (Changing host)
2022-04-22 19:12:55	→	wroathe has joined #haskell
2022-04-22 19:15:38	←	anomal has quit (Remote host closed the connection)
2022-04-22 19:15:57	→	anomal has joined #haskell
2022-04-22 19:16:05	←	pavonia has quit (Quit: Bye!)
2022-04-22 19:16:57	←	redb has quit (Ping timeout: 276 seconds)
2022-04-22 19:19:11	→	abrantesasf has joined #haskell
2022-04-22 19:19:27	←	abrantesasf has quit (Remote host closed the connection)
2022-04-22 19:19:54	→	abrantesasf has joined #haskell
2022-04-22 19:20:05	←	abrantesasf has quit (Remote host closed the connection)
2022-04-22 19:24:10	←	Pickchea has quit (Ping timeout: 272 seconds)
2022-04-22 19:24:43	←	geekosaur has quit (Quit: Leaving)
2022-04-22 19:25:24	←	mikoto-chan has quit (Ping timeout: 276 seconds)
2022-04-22 19:26:12	→	Sgeo has joined #haskell
2022-04-22 19:26:17	→	geekosaur has joined #haskell
2022-04-22 19:26:38	→	mikoto-chan has joined #haskell
2022-04-22 19:29:04	→	deadmarshal_ has joined #haskell
2022-04-22 19:30:39	→	gpncarl_ has joined #haskell
2022-04-22 19:30:42	←	img has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-22 19:31:08	←	Sgeo has quit (Ping timeout: 272 seconds)
2022-04-22 19:32:05	→	vysn has joined #haskell
2022-04-22 19:33:51	←	deadmarshal_ has quit (Ping timeout: 276 seconds)
2022-04-22 19:35:01	→	img has joined #haskell
2022-04-22 19:39:52	→	Sgeo has joined #haskell
2022-04-22 19:41:43	→	redb has joined #haskell
2022-04-22 19:42:35	←	ec has quit (Quit: ec)
2022-04-22 19:45:36	←	mmhat has quit (Quit: WeeChat 3.5)
2022-04-22 19:46:02	←	redb has quit (Ping timeout: 246 seconds)
2022-04-22 19:47:30	→	frost has joined #haskell
2022-04-22 19:48:59	←	off^ has quit (Remote host closed the connection)
2022-04-22 19:52:42	→	redb has joined #haskell
2022-04-22 19:55:42	←	frost has quit (Ping timeout: 252 seconds)
2022-04-22 19:55:50	⚡	lagash is mostly lurking these days.
2022-04-22 19:56:05	shapr	hi lagash, writing any cool code?
2022-04-22 19:56:15	←	berberman has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-22 19:56:35	→	berberman has joined #haskell
2022-04-22 19:57:39	→	eggplantade has joined #haskell
2022-04-22 19:58:17	←	redb has quit (Ping timeout: 246 seconds)
2022-04-22 20:01:11	→	jmdaemon has joined #haskell
2022-04-22 20:01:33	→	justsomeguy has joined #haskell
2022-04-22 20:01:43	lagash	sadly no, at least, not in Haskell.. although I was thinking of writing a dictionary conversion tool using some Haskell XML library..
2022-04-22 20:02:09	←	eggplantade has quit (Ping timeout: 256 seconds)
2022-04-22 20:07:15	→	waleee has joined #haskell
2022-04-22 20:08:34	→	abrantesasf has joined #haskell
2022-04-22 20:08:43	←	abrantesasf has quit (Remote host closed the connection)
2022-04-22 20:13:23	←	coot has quit (Quit: coot)
2022-04-22 20:20:34	→	[itchyjunk] has joined #haskell
2022-04-22 20:25:27	←	jakalx has left #haskell
2022-04-22 20:25:54	→	redb has joined #haskell
2022-04-22 20:26:02	oak-	at least hxt is somewhat reasonable XML-library for Haskell
2022-04-22 20:26:09	→	jakalx has joined #haskell
2022-04-22 20:27:20	←	Ram-Z has quit (Ping timeout: 246 seconds)
2022-04-22 20:33:17	←	redb has quit (Ping timeout: 246 seconds)
2022-04-22 20:35:43	→	redb has joined #haskell
2022-04-22 20:36:32	←	ccntrq has quit (Ping timeout: 248 seconds)
2022-04-22 20:37:41	←	cdman has quit (Quit: Leaving)
2022-04-22 20:39:30	→	tfeb has joined #haskell
2022-04-22 20:39:59	←	redb has quit (Ping timeout: 240 seconds)
2022-04-22 20:40:42	→	redb has joined #haskell
2022-04-22 20:42:05	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-22 20:42:14	→	Ram-Z has joined #haskell
2022-04-22 20:44:37	←	jakalx has left #haskell
2022-04-22 20:44:47	→	jakalx has joined #haskell
2022-04-22 20:46:09	←	azimut has quit (Remote host closed the connection)
2022-04-22 20:46:47	←	yauhsien has quit (Remote host closed the connection)
2022-04-22 20:46:57	→	azimut has joined #haskell
2022-04-22 20:47:14	→	_ht has joined #haskell
2022-04-22 20:47:56	←	tfeb has quit (Quit: died)
2022-04-22 20:51:15	raehik	When I try generating Haddocks with `cabal haddock`, I get a haddock internal error telling me one of the dependencies is missing a file `<pkg>/share/doc/html/doc-index.json`
2022-04-22 20:51:41	→	yauhsien has joined #haskell
2022-04-22 20:51:43	raehik	I can't figure out how to either generate that file, or not require it
2022-04-22 20:52:01	raehik	(this is GHC 9.2, Cabal 3.6, but it occurred with Cabal 3.4 also)
2022-04-22 20:53:26	monochrom	I don't know how to unrequire it. But I would have built all dependencies with library docs enabled. Hell, I do, my .cabal/config has "documentation: True", which is sadly non-default.
2022-04-22 20:53:31	geekosaur	generally you have to install all dependencies with 'documentation: True'
2022-04-22 20:53:59	monochrom	cabal has a lot of wrong defaults
2022-04-22 20:54:11	geekosaur	if you don't do what monochrom says, you can add it to cabal.package as a stanza 'package *\n    documentation: True'
2022-04-22 20:54:15	→	tfeb has joined #haskell
2022-04-22 20:54:28	monochrom	Well, they are the right defaults for xmonad users who otherwise wouldn't use Haskell, really.
2022-04-22 20:54:29	raehik	I'm running `cabal haddock --enable-documentation` - does that not do the same?
2022-04-22 20:54:56	monochrom	That does not say "do it for dependencies too".
2022-04-22 20:55:07	geekosaur	it doesn't go back and run haddock for dependencies
2022-04-22 20:55:33	monochrom	"cabal build" is usually the deadline for saying how to build dependencies.
2022-04-22 20:55:56	monochrom	"That ship has sailed"
2022-04-22 20:55:58	raehik	gotcha. thanks
2022-04-22 20:56:01	sclv	hrm, so would `cabal build --enable-documentation` and then `cabal haddock --enable-documentation` then work?
2022-04-22 20:56:18	monochrom	Then that second command is redundant.
2022-04-22 20:56:18	sclv	in general cabal v2-haddock has a lot of rough edges iirc
2022-04-22 20:56:23	←	yauhsien has quit (Ping timeout: 246 seconds)
2022-04-22 20:56:49	sclv	do you think this would warrant a patch to cabal to make `cabal haddock --enable-documentation` recursively ensure dep docs are built too?
2022-04-22 20:57:39	monochrom	Yeah "cabal haddock" came from even before v1 time.  When the workflow was analogous to C people, a "make configure", "make build", "make build docs", "make install".
2022-04-22 20:57:49	raehik	checking exact behaviour for build -> haddock, haddock with a cabal.project
2022-04-22 20:58:12	monochrom	I would remove "cabal haddock" altogether.
2022-04-22 20:58:15	raehik	should I just do a `cabal build --enable-docs --haddock-for-hackage`, is that better? (does that last flag work?)
2022-04-22 20:58:41	sclv	the last flag does something, but it may not be what you want for local, i don't recall
2022-04-22 20:58:50	sclv	it sets a bunch of default flags to make things the way hackage expects
2022-04-22 20:59:02	raehik	(this is for a CI run that generates Haddock artifacts so I don't have to do locally)
2022-04-22 21:00:27	←	justsomeguy has quit (Quit: WeeChat 3.4)
2022-04-22 21:01:39	→	tromp has joined #haskell
2022-04-22 21:04:11	←	tfeb has quit (Quit: died)
2022-04-22 21:04:17	→	eggplantade has joined #haskell
2022-04-22 21:04:38	←	euandreh has quit (Quit: WeeChat 3.5)
2022-04-22 21:04:52	←	mikoto-chan has quit (Ping timeout: 272 seconds)
2022-04-22 21:05:43	→	mikoto-chan has joined #haskell
2022-04-22 21:06:56	←	chele has quit (Remote host closed the connection)
2022-04-22 21:07:59	←	MajorBiscuit has quit (Ping timeout: 240 seconds)
2022-04-22 21:11:17	raehik	I'm still not generating that doc-index.json file. I get doc-index.html s, and the Haddock is certainly built, but when the dependencies are finished, it fails with the same error
2022-04-22 21:12:28	←	chomwitt has quit (Ping timeout: 272 seconds)
2022-04-22 21:13:04	→	yauhsien has joined #haskell
2022-04-22 21:15:00	←	xff0x_ has quit (Read error: Connection reset by peer)
2022-04-22 21:15:23	←	CiaoSen has quit (Ping timeout: 250 seconds)
2022-04-22 21:17:16	raehik	I've solved it by adding `haddock-options: --quickjump` to my cabal.project . My setup is super barebones, tiny project, GHC 9.2 via ghcup, latest everything. Is this a bug?
2022-04-22 21:17:58	sclv	its certainly a bad user interface experience
2022-04-22 21:18:05	raehik	without that --quickjump, the dependencies apparently don't build with it, even though the main project will (and so errors)
2022-04-22 21:18:06	→	romesrf has joined #haskell
2022-04-22 21:18:13	sclv	I'm not sure if the fault lies with haddock here or how cabal invokes haddock
2022-04-22 21:18:30	sclv	Ah -- I think I see the problem.
2022-04-22 21:18:32	raehik	I think the latter
2022-04-22 21:18:37	sclv	haddock-for-hackage implies quickjump
2022-04-22 21:18:46	→	chomwitt has joined #haskell
2022-04-22 21:18:50	monochrom	:)
2022-04-22 21:19:10	sclv	but documentation: true does not
2022-04-22 21:19:13	raehik	I see, thanks! why has it only recently broken? :/
2022-04-22 21:19:41	sclv	well v2 haddock was effectively not working for quite some time, i don't think it ever worked well
2022-04-22 21:20:12	raehik	I'm using `cabal build` now, same issue
2022-04-22 21:20:30	sclv	right, by "cabal haddock" i meant v2 support for haddock in general
2022-04-22 21:20:38	raehik	ah, understand
2022-04-22 21:20:43	raehik	s/and/ood/
2022-04-22 21:22:04	sclv	I think we need three things here -- A) make `cabal haddock` ensure haddocks of dependencies exist, B) make `--haddock-for-hackage` imply the quickjump flag for dependencies of the package being haddocked, and C) make haddock not fail when quickjump doesn't find that file
2022-04-22 21:22:54	raehik	yes, sounds about right
2022-04-22 21:23:11	sclv	feel free to open some tickets in both repos about this
2022-04-22 21:23:27	raehik	A) might not be a problem -- dependencies were having their docs built. but, might be because of --enable-docs
2022-04-22 21:23:58	raehik	cheers sclv , I'll make an issue for cabal
2022-04-22 21:24:02	sclv	ah so if it weren't for quicjump, the `haddock` workflow might work correctly? nice
2022-04-22 21:24:18	←	dhouthoo has quit (Quit: WeeChat 3.5)
2022-04-22 21:24:24	sclv	also i do think haddock should not hard fail if it can't find the quickjump index-doc whatever
2022-04-22 21:24:48	sclv	in general i didn't think quikjump jumped to dependencies as well, so its a bit confusing
2022-04-22 21:26:01	→	tfeb has joined #haskell
2022-04-22 21:27:02	→	Guest6488 has joined #haskell
2022-04-22 21:27:30	→	euandreh has joined #haskell
2022-04-22 21:29:45	←	Guest6488 has quit (Client Quit)
2022-04-22 21:30:19	romesrf	Could someone help me fix a GHC error on the `notes` test?
2022-04-22 21:30:39	romesrf	The output says a note was deleted, but it wasn't ;_;
2022-04-22 21:30:58	romesrf	What's the formatting for notes?
2022-04-22 21:32:13	geekosaur	did you want to ask that in #ghc? most of us are end users
2022-04-22 21:33:53	romesrf	geekosaur: my mistake
2022-04-22 21:34:43	←	eggplantade has quit (Remote host closed the connection)
2022-04-22 21:35:05	←	mikoto-chan has quit (Ping timeout: 256 seconds)
2022-04-22 21:35:16	→	wootehfoot has joined #haskell
2022-04-22 21:35:57	→	lbseale has joined #haskell
2022-04-22 21:37:00	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-22 21:37:05	→	mikoto-chan has joined #haskell
2022-04-22 21:37:23	→	notzmv has joined #haskell
2022-04-22 21:38:25	←	tfeb has quit (Remote host closed the connection)
2022-04-22 21:38:39	←	abastro has quit (Ping timeout: 276 seconds)
2022-04-22 21:40:48	monochrom	IMO "cabal build --appropriate-options-and-or-cabal.project-settings" already supercedes "cabal haddock" so "cabal haddock" should be removed to eliminate confusion rather than stay and get fixed and be a time sink.
2022-04-22 21:41:24	→	titibandit has joined #haskell
2022-04-22 21:41:27	←	Techcable has quit (Ping timeout: 240 seconds)
2022-04-22 21:42:11	monochrom	The command came from an ancient workflow metaphor that no longer applies today.
2022-04-22 21:44:55	←	azimut has quit (Remote host closed the connection)
2022-04-22 21:45:14	→	azimut has joined #haskell
2022-04-22 21:47:11	→	econo has joined #haskell
2022-04-22 21:48:12	sclv	i don't think that resolves either of the two underlying issues here, but i'd probably be ok with that.
2022-04-22 21:48:20	→	neceve has joined #haskell
2022-04-22 21:49:36	→	tromp has joined #haskell
2022-04-22 21:50:45	←	pagnol has quit (Remote host closed the connection)
2022-04-22 21:53:28	←	dut has quit (Quit: Leaving)
2022-04-22 21:53:30	←	vysn has quit (Ping timeout: 250 seconds)
2022-04-22 21:53:58	→	dcoutts_ has joined #haskell
2022-04-22 21:56:07	←	dcoutts__ has quit (Ping timeout: 240 seconds)
2022-04-22 22:00:41	←	titibandit has quit (Remote host closed the connection)
2022-04-22 22:00:50	→	titibandit has joined #haskell
2022-04-22 22:01:51	→	ec has joined #haskell
2022-04-22 22:02:16	→	vicfred has joined #haskell
2022-04-22 22:04:22	←	romesrf has quit (Quit: WeeChat 3.4.1)
2022-04-22 22:10:03	→	eggplantade has joined #haskell
2022-04-22 22:10:08	←	titibandit has quit (Remote host closed the connection)
2022-04-22 22:10:18	→	titibandit has joined #haskell
2022-04-22 22:12:43	←	sammelweis has quit (Read error: Connection reset by peer)
2022-04-22 22:13:06	→	sammelweis has joined #haskell
2022-04-22 22:17:46	→	stackdroid18 has joined #haskell
2022-04-22 22:19:21	←	wootehfoot has quit (Quit: Leaving)
2022-04-22 22:19:46	abastro[m]	What does `-haddock` ghc-option do?
2022-04-22 22:20:02	abastro[m]	+ What is documentation: True
2022-04-22 22:20:58	→	coot has joined #haskell
2022-04-22 22:21:04	geekosaur	"documentation: True" is a cabal configuration option to generate documentation for a groupof packages (in cabal.project) or all packages (in ~/.cabal/config)
2022-04-22 22:22:20	geekosaur	hm. does ghc even have a -haddock option any more? I thought haddock was offloaded instead of being built in these days
2022-04-22 22:22:49	geekosaur	I guess it does. it must run haddock for you
2022-04-22 22:22:57	→	Tuplanolla has joined #haskell
2022-04-22 22:23:07	abastro[m]	I cannot see the documentation with -haddock flag off.
2022-04-22 22:23:11	geekosaur	(haddock wants access to the typechecker so it can generate documentation for types)
2022-04-22 22:24:20	abastro[m]	So ye it works, and I do not know of any other way to view haddock
2022-04-22 22:29:34	→	romesrf has joined #haskell
2022-04-22 22:29:40	←	vpan has quit (Quit: Leaving.)
2022-04-22 22:29:54	←	titibandit has quit (Ping timeout: 250 seconds)
2022-04-22 22:30:00	←	wroathe has quit (Ping timeout: 276 seconds)
2022-04-22 22:34:14	→	Core1633 has joined #haskell
2022-04-22 22:39:25	sclv	"By default, GHC ignores Haddock comments (-- | ... and -- ^ ...) and does not check that they’re associated with a valid term, such as a top-level type-signature. With this flag GHC will parse Haddock comments and include them in the interface file it produces."
2022-04-22 22:40:03	sclv	so ghc doesn't run haddock for you, but haddock requires its interface file output, and that flag is necessary to generate that output such that haddock can consume it
2022-04-22 22:40:48	geekosaur	guess that explains the discussions about fat interface files in #ghc
2022-04-22 22:41:15	geekosaur	where was that hidden? it's not in the flag reference
2022-04-22 22:41:29	geekosaur	(sadly that seems to be true of a number of flags)
2022-04-22 22:43:24	→	jao has joined #haskell
2022-04-22 22:43:56	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-22 22:44:11	→	cafkafk has joined #haskell
2022-04-22 22:48:44	←	eggplantade has quit (Remote host closed the connection)
2022-04-22 22:50:27	←	redb has quit (Ping timeout: 256 seconds)
2022-04-22 22:54:21	→	redb has joined #haskell
2022-04-22 22:54:59	→	eggplantade has joined #haskell
2022-04-22 22:54:59	←	waleee has quit (Ping timeout: 256 seconds)
2022-04-22 22:56:36	→	acidjnk has joined #haskell
2022-04-22 22:59:31	←	romesrf has quit (Ping timeout: 272 seconds)
2022-04-22 23:01:03	←	ec has quit (Remote host closed the connection)
2022-04-22 23:02:14	→	ec has joined #haskell
2022-04-22 23:04:57	→	wroathe has joined #haskell
2022-04-22 23:04:57	←	wroathe has quit (Changing host)
2022-04-22 23:04:57	→	wroathe has joined #haskell
2022-04-22 23:07:34	←	ec has quit (Ping timeout: 240 seconds)
2022-04-22 23:08:24	→	tzh has joined #haskell
2022-04-22 23:08:33	→	tromp has joined #haskell
2022-04-22 23:09:12	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-22 23:09:32	→	Vajb has joined #haskell
2022-04-22 23:10:56	sclv	geekosaur: https://ghc.gitlab.haskell.org/ghc/doc/users_guide/using.html#haddock
2022-04-22 23:13:10	⚡	geekosaur wonders if a PR would be accepted that gathered up all those flags missing from the master flag reference and at least pointed to the places where they're explained
2022-04-22 23:13:12	←	dyeplexer has quit (Remote host closed the connection)
2022-04-22 23:15:05	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-22 23:15:49	→	Vajb has joined #haskell
2022-04-22 23:18:14	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-22 23:23:32	→	titibandit has joined #haskell
2022-04-22 23:24:51	→	ec has joined #haskell
2022-04-22 23:24:51	←	yauhsien has quit (Read error: Connection reset by peer)
2022-04-22 23:24:53	→	yauhsien_ has joined #haskell
2022-04-22 23:26:45	→	romesrf has joined #haskell
2022-04-22 23:29:00	←	jakalx has left #haskell (Error from remote client)
2022-04-22 23:32:59	→	jakalx has joined #haskell
2022-04-22 23:38:31	←	cafkafk has quit (Quit: WeeChat 3.3)
2022-04-22 23:39:24	←	eggplantade has quit (Remote host closed the connection)
2022-04-22 23:44:37	←	nek0 has quit (Quit: The Lounge - https://thelounge.chat)
2022-04-22 23:47:10	shapr	Huh, I can't find an ics parser on hackage
2022-04-22 23:47:32	shapr	oh wait, looks like iCalendar handles ics?
2022-04-22 23:49:07	ℹ	irc: disconnected from server
2022-04-23 06:02:03	→	oxide has joined #haskell
2022-04-23 06:02:03	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-23 06:02:03	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-23 06:02:03	ℹ	Channel #haskell: 696 nicks (1 op, 0 voices, 695 normals)
2022-04-23 06:02:04	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-23 06:02:04	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-23 06:02:19	←	xff0x_ has quit (Ping timeout: 240 seconds)
2022-04-23 06:02:31	←	Midjak has quit (Quit: This computer has gone to sleep)
2022-04-23 06:04:40	→	xff0x_ has joined #haskell
2022-04-23 06:08:54	←	Techcable has quit (Remote host closed the connection)
2022-04-23 06:09:38	←	sammelweis has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2022-04-23 06:10:20	→	Techcable has joined #haskell
2022-04-23 06:11:37	←	zebrag has quit (Quit: Konversation terminated!)
2022-04-23 06:12:14	←	Techcable has quit (Remote host closed the connection)
2022-04-23 06:12:22	→	Techcable has joined #haskell
2022-04-23 06:12:22	←	cosimone has quit (Remote host closed the connection)
2022-04-23 06:13:09	→	sammelweis has joined #haskell
2022-04-23 06:16:18	→	laolmtdea^ has joined #haskell
2022-04-23 06:18:40	←	Unicorn_Princess has quit (Remote host closed the connection)
2022-04-23 06:23:36	→	abastro has joined #haskell
2022-04-23 06:25:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-23 06:26:35	→	littlebobeep has joined #haskell
2022-04-23 06:27:45	←	raehik has quit (Ping timeout: 256 seconds)
2022-04-23 06:43:20	←	agrosant has quit (Quit: Leaving)
2022-04-23 06:44:00	←	neurocyte8614492 has quit (Ping timeout: 276 seconds)
2022-04-23 06:44:27	←	lbseale has quit (Quit: Leaving)
2022-04-23 06:48:24	→	andrey__ has joined #haskell
2022-04-23 06:50:56	←	andrey_ has quit (Ping timeout: 248 seconds)
2022-04-23 06:54:08	←	mikoto-chan has quit (Ping timeout: 248 seconds)
2022-04-23 07:01:57	→	harveypwca has joined #haskell
2022-04-23 07:13:28	→	ralu1 has joined #haskell
2022-04-23 07:17:39	←	ralu1 has quit (Ping timeout: 240 seconds)
2022-04-23 07:21:38	→	eggplantade has joined #haskell
2022-04-23 07:22:37	→	ralu1 has joined #haskell
2022-04-23 07:28:33	←	waleee has quit (Ping timeout: 250 seconds)
2022-04-23 07:36:17	←	Null_A_ has quit ()
2022-04-23 07:54:39	→	deadmarshal_ has joined #haskell
2022-04-23 07:56:20	→	AlexNoo_ has joined #haskell
2022-04-23 07:56:48	←	jhagborg has quit (Ping timeout: 276 seconds)
2022-04-23 07:57:59	←	Alex_test has quit (Ping timeout: 240 seconds)
2022-04-23 07:58:29	←	machinedgod has quit (Ping timeout: 272 seconds)
2022-04-23 07:58:45	←	AlexZenon has quit (Ping timeout: 276 seconds)
2022-04-23 07:59:45	←	deadmarshal_ has quit (Ping timeout: 272 seconds)
2022-04-23 08:00:07	←	AlexNoo has quit (Ping timeout: 256 seconds)
2022-04-23 08:02:21	→	jhagborg has joined #haskell
2022-04-23 08:02:55	→	Alex_test has joined #haskell
2022-04-23 08:03:15	→	AlexZenon has joined #haskell
2022-04-23 08:10:35	←	[itchyjunk] has quit (Ping timeout: 250 seconds)
2022-04-23 08:10:53	←	td_ has quit (Ping timeout: 256 seconds)
2022-04-23 08:12:46	→	td_ has joined #haskell
2022-04-23 08:14:44	→	[itchyjunk] has joined #haskell
2022-04-23 08:14:49	←	stackdroid18 has quit (Quit: hasta la vista... tchau!)
2022-04-23 08:32:53	←	anomal has quit (Remote host closed the connection)
2022-04-23 08:33:58	abastro	What is inverse of parser combinators?
2022-04-23 08:34:10	abastro	We have inverse of read, show
2022-04-23 08:34:43	monochrom	pretty printer
2022-04-23 08:35:12	monochrom	pretty printer combinators :)
2022-04-23 08:35:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-23 08:41:15	→	littlebobeep has joined #haskell
2022-04-23 08:42:04	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-23 08:45:01	→	bitdex has joined #haskell
2022-04-23 08:45:07	←	zaquest has quit (Remote host closed the connection)
2022-04-23 08:47:50	→	zaquest has joined #haskell
2022-04-23 08:48:59	←	califax has quit (Remote host closed the connection)
2022-04-23 08:49:24	←	littlebobeep has quit (Remote host closed the connection)
2022-04-23 08:50:26	→	califax has joined #haskell
2022-04-23 08:53:10	abastro	Pretty printer?
2022-04-23 08:54:19	←	wroathe has quit (Ping timeout: 240 seconds)
2022-04-23 08:54:50	abastro	Which pretty printer do you mean, monochrom?
2022-04-23 08:55:22	monochrom	That is analogous to "which parser do you mean?".
2022-04-23 08:55:46	monochrom	And the answer to both is "it shouldn't matter, I'm referring to the concept".
2022-04-23 08:56:11	abastro	Hmm
2022-04-23 08:56:33	→	wroathe has joined #haskell
2022-04-23 08:56:34	←	wroathe has quit (Changing host)
2022-04-23 08:56:34	→	wroathe has joined #haskell
2022-04-23 08:56:56	abastro	Perhaps I am missing something. After my shallow skim, it seems like pretty printers are for colors
2022-04-23 08:59:23	→	littlebobeep has joined #haskell
2022-04-23 09:00:53	→	deadmarshal_ has joined #haskell
2022-04-23 09:01:07	EvanR_	the opposite of a pretty printer is to dump all information on one line, possibly word wrapped so as to be incomprehensible
2022-04-23 09:01:36	EvanR_	the analogous concept to parsers is parsing by using regex
2022-04-23 09:02:12	ℹ	EvanR_ is now known as EvanR
2022-04-23 09:18:45	←	xff0x_ has quit (Read error: Connection reset by peer)
2022-04-23 09:22:05	←	jhagborg has quit (Ping timeout: 272 seconds)
2022-04-23 09:24:17	→	cdman has joined #haskell
2022-04-23 09:24:17	←	cdman has quit (Changing host)
2022-04-23 09:24:17	→	cdman has joined #haskell
2022-04-23 09:25:15	←	redb has quit (Ping timeout: 272 seconds)
2022-04-23 09:27:44	→	jhagborg has joined #haskell
2022-04-23 09:27:57	←	lemonsnicks has quit (Ping timeout: 256 seconds)
2022-04-23 09:28:42	→	lemonsnicks has joined #haskell
2022-04-23 09:37:34	→	gpncarl_ has joined #haskell
2022-04-23 09:42:51	←	jao has quit (Remote host closed the connection)
2022-04-23 09:43:39	←	wroathe has quit (Ping timeout: 240 seconds)
2022-04-23 09:43:44	→	jao has joined #haskell
2022-04-23 09:45:33	→	wroathe has joined #haskell
2022-04-23 09:45:33	←	wroathe has quit (Changing host)
2022-04-23 09:45:33	→	wroathe has joined #haskell
2022-04-23 09:46:54	→	nate1 has joined #haskell
2022-04-23 09:47:46	→	redb has joined #haskell
2022-04-23 09:48:36	←	jao has quit (Ping timeout: 276 seconds)
2022-04-23 09:52:30	←	redb has quit (Ping timeout: 276 seconds)
2022-04-23 09:53:12	→	redb has joined #haskell
2022-04-23 10:01:57	←	abastro has quit (Ping timeout: 256 seconds)
2022-04-23 10:03:53	←	deadmarshal_ has quit (Ping timeout: 272 seconds)
2022-04-23 10:07:34	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-23 10:12:49	→	bitdex has joined #haskell
2022-04-23 10:18:34	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-23 10:21:37	←	wroathe has quit (Ping timeout: 272 seconds)
2022-04-23 10:29:16	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-23 10:29:36	→	Vajb has joined #haskell
2022-04-23 10:35:31	←	[itchyjunk] has quit (Remote host closed the connection)
2022-04-23 10:43:42	→	deadmarshal_ has joined #haskell
2022-04-23 10:45:00	→	benin has joined #haskell
2022-04-23 10:49:29	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-23 10:49:36	→	Vajb has joined #haskell
2022-04-23 10:58:21	←	gpncarl_ has quit (Ping timeout: 272 seconds)
2022-04-23 10:58:59	←	deadmarshal_ has quit (Ping timeout: 272 seconds)
2022-04-23 10:59:37	←	inversed has quit (Ping timeout: 272 seconds)
2022-04-23 11:02:40	→	deadmarshal_ has joined #haskell
2022-04-23 11:04:52	→	gpncarl_ has joined #haskell
2022-04-23 11:05:53	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-23 11:06:05	→	Vajb has joined #haskell
2022-04-23 11:06:28	→	coot has joined #haskell
2022-04-23 11:07:07	→	takuan has joined #haskell
2022-04-23 11:07:55	→	Pickchea has joined #haskell
2022-04-23 11:09:00	→	briandaed has joined #haskell
2022-04-23 11:09:45	←	gpncarl_ has quit (Ping timeout: 272 seconds)
2022-04-23 11:18:56	→	Guest84 has joined #haskell
2022-04-23 11:23:04	←	Guest84 has quit (Client Quit)
2022-04-23 11:27:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-23 11:29:13	←	ralu1 has quit (Ping timeout: 256 seconds)
2022-04-23 11:31:57	←	son0p has quit (Ping timeout: 276 seconds)
2022-04-23 11:33:27	←	troydm has quit (Ping timeout: 240 seconds)
2022-04-23 11:33:28	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-23 11:33:59	←	Pickchea has quit (Ping timeout: 240 seconds)
2022-04-23 11:34:59	←	nate1 has quit (Ping timeout: 240 seconds)
2022-04-23 11:35:35	→	Vajb has joined #haskell
2022-04-23 11:39:08	→	inversed has joined #haskell
2022-04-23 11:44:11	→	gpncarl_ has joined #haskell
2022-04-23 11:50:03	→	chomwitt has joined #haskell
2022-04-23 11:50:49	→	littlebobeep has joined #haskell
2022-04-23 11:55:02	←	chomwitt has quit (Ping timeout: 250 seconds)
2022-04-23 11:55:53	←	littlebobeep has quit (Quit: leaving)
2022-04-23 11:55:59	←	zyklotomic has quit (Ping timeout: 272 seconds)
2022-04-23 11:56:11	→	littlebobeep has joined #haskell
2022-04-23 11:57:45	→	zyklotomic has joined #haskell
2022-04-23 11:58:57	←	xkuru has quit (Read error: Connection reset by peer)
2022-04-23 12:03:07	→	AlexZenon_2 has joined #haskell
2022-04-23 12:04:39	←	deadmarshal_ has quit (Ping timeout: 240 seconds)
2022-04-23 12:05:07	←	AlexZenon has quit (Ping timeout: 276 seconds)
2022-04-23 12:06:19	←	bontaq has quit (Ping timeout: 240 seconds)
2022-04-23 12:13:53	→	deadmarshal_ has joined #haskell
2022-04-23 12:19:58	→	gehmehgeh has joined #haskell
2022-04-23 12:21:03	→	tromp has joined #haskell
2022-04-23 12:25:06	←	phma has quit (Read error: Connection reset by peer)
2022-04-23 12:26:15	→	phma has joined #haskell
2022-04-23 12:30:11	←	jmdaemon has quit (Ping timeout: 246 seconds)
2022-04-23 12:33:55	←	jhagborg has quit (Remote host closed the connection)
2022-04-23 12:34:20	→	jhagborg has joined #haskell
2022-04-23 12:35:04	→	acidjnk has joined #haskell
2022-04-23 12:40:24	→	titibandit has joined #haskell
2022-04-23 12:40:37	←	hueso has quit (Ping timeout: 256 seconds)
2022-04-23 12:44:06	←	redb has quit (Ping timeout: 276 seconds)
2022-04-23 12:44:07	→	abhixec has joined #haskell
2022-04-23 12:48:03	→	odnes has joined #haskell
2022-04-23 12:49:57	←	titibandit has quit (Remote host closed the connection)
2022-04-23 12:50:06	→	titibandit has joined #haskell
2022-04-23 12:52:59	←	titibandit has quit (Remote host closed the connection)
2022-04-23 12:53:08	→	titibandit has joined #haskell
2022-04-23 12:55:17	→	anomal has joined #haskell
2022-04-23 13:01:05	←	titibandit has quit (Remote host closed the connection)
2022-04-23 13:01:15	→	titibandit has joined #haskell
2022-04-23 13:02:07	←	titibandit has quit (Remote host closed the connection)
2022-04-23 13:02:16	→	titibandit has joined #haskell
2022-04-23 13:04:34	←	titibandit has quit (Remote host closed the connection)
2022-04-23 13:04:42	→	titibandit has joined #haskell
2022-04-23 13:10:06	←	titibandit has quit (Ping timeout: 276 seconds)
2022-04-23 13:12:26	→	redb has joined #haskell
2022-04-23 13:14:03	→	b0o has joined #haskell
2022-04-23 13:16:39	←	redb has quit (Ping timeout: 240 seconds)
2022-04-23 13:17:18	→	chomwitt has joined #haskell
2022-04-23 13:17:31	←	coot has quit (Quit: coot)
2022-04-23 13:29:38	→	Midjak has joined #haskell
2022-04-23 13:31:12	→	abastro has joined #haskell
2022-04-23 13:31:37	←	abhixec has quit (Ping timeout: 272 seconds)
2022-04-23 13:31:51	→	acidjnk_new has joined #haskell
2022-04-23 13:32:37	ℹ	irc: disconnected from server
2022-04-23 13:32:58	→	oxide has joined #haskell
2022-04-23 13:32:58	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-23 13:32:58	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-23 13:32:58	ℹ	Channel #haskell: 689 nicks (1 op, 0 voices, 688 normals)
2022-04-23 13:32:59	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-23 13:32:59	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-23 13:34:16	→	ralu1 has joined #haskell
2022-04-23 13:35:24	←	acidjnk has quit (Ping timeout: 260 seconds)
2022-04-23 13:39:49	→	yauhsien has joined #haskell
2022-04-23 13:39:52	→	son0p has joined #haskell
2022-04-23 13:40:41	→	dostoevsky has joined #haskell
2022-04-23 13:43:29	←	tzh has quit (Quit: zzz)
2022-04-23 13:44:26	→	redb has joined #haskell
2022-04-23 13:44:49	←	yauhsien has quit (Quit: Leaving)
2022-04-23 13:47:07	→	Pickchea has joined #haskell
2022-04-23 13:49:21	←	redb has quit (Ping timeout: 272 seconds)
2022-04-23 13:51:59	←	jhagborg has quit (Ping timeout: 240 seconds)
2022-04-23 13:53:32	←	Sgeo has quit (Read error: Connection reset by peer)
2022-04-23 13:53:43	→	vorpuni has joined #haskell
2022-04-23 13:57:05	→	zer0bitz has joined #haskell
2022-04-23 13:57:35	←	deadmarshal_ has quit (Ping timeout: 272 seconds)
2022-04-23 13:59:23	→	coot has joined #haskell
2022-04-23 14:04:26	→	jgeerds has joined #haskell
2022-04-23 14:04:28	anomal	Does the brain map well to functional programming?
2022-04-23 14:04:35	anomal	As in can we have a functional ANN?
2022-04-23 14:04:43	anomal	I think not
2022-04-23 14:06:50	→	redb has joined #haskell
2022-04-23 14:07:16	tomsmeding	I think standard dense neural networks are pretty functional
2022-04-23 14:10:45	[Leary]	There's nothing imperative about NNs---they're all compositions of pure functions.
2022-04-23 14:12:10	tomsmeding	well you have these weird LSTM things that seem to have memory -- though I could be misunderstanding those
2022-04-23 14:13:03	[Leary]	So does the state monad.
2022-04-23 14:13:41	tomsmeding	sure
2022-04-23 14:13:59	dibblego	https://www.youtube.com/watch?v=tRszt-AlKOc
2022-04-23 14:14:18	tomsmeding	but it's a question of perspective anyway: a state monad can be seen as 's -> (a, s)' which is purely functional, or a computation returning an 'a' with state, which is not functional
2022-04-23 14:14:30	tomsmeding	"being functional" is subjective and dependent on perspective
2022-04-23 14:17:47	[Leary]	¯\_(ツ)_/¯
2022-04-23 14:20:37	←	jakalx has left #haskell (Error from remote client)
2022-04-23 14:21:29	←	anomal has quit (Remote host closed the connection)
2022-04-23 14:22:19	tomsmeding	I think that's precisely the appropriate response :p
2022-04-23 14:22:19	←	redb has quit (Ping timeout: 240 seconds)
2022-04-23 14:24:04	←	azimut has quit (Ping timeout: 240 seconds)
2022-04-23 14:25:45	→	azimut has joined #haskell
2022-04-23 14:27:18	←	laolmtdea^ has quit (Remote host closed the connection)
2022-04-23 14:30:09	←	charukiewicz[m] has quit (Quit: You have been kicked for being idle)
2022-04-23 14:34:31	abastro[m]	We don't know how true brains are done
2022-04-23 14:34:55	abastro[m]	Btw what is the result of the video dibblego posted?
2022-04-23 14:35:05	←	abastro has quit (Ping timeout: 256 seconds)
2022-04-23 14:35:10	abastro[m]	Don't wanna watch personally
2022-04-23 14:49:29	→	neurocyte8614492 has joined #haskell
2022-04-23 14:49:29	←	neurocyte8614492 has quit (Changing host)
2022-04-23 14:49:29	→	neurocyte8614492 has joined #haskell
2022-04-23 14:50:22	→	hueso has joined #haskell
2022-04-23 14:50:42	→	dextaa has joined #haskell
2022-04-23 14:51:00	→	redb has joined #haskell
2022-04-23 14:51:12	→	titibandit has joined #haskell
2022-04-23 14:51:18	←	eggplantade has quit (Remote host closed the connection)
2022-04-23 14:51:27	→	jakalx has joined #haskell
2022-04-23 14:56:03	←	redb has quit (Ping timeout: 276 seconds)
2022-04-23 14:56:11	→	CiaoSen has joined #haskell
2022-04-23 15:02:13	→	troydm has joined #haskell
2022-04-23 15:03:36	←	acidjnk_new has quit (Ping timeout: 260 seconds)
2022-04-23 15:11:09	→	titusg has joined #haskell
2022-04-23 15:11:57	←	jakalx has left #haskell
2022-04-23 15:12:18	←	titibandit has quit (Ping timeout: 276 seconds)
2022-04-23 15:18:30	→	jakalx has joined #haskell
2022-04-23 15:23:20	→	gurkenglas has joined #haskell
2022-04-23 15:23:38	→	redb has joined #haskell
2022-04-23 15:29:54	ℹ	irc: disconnected from server
2022-04-23 15:30:21	→	oxide has joined #haskell
2022-04-23 15:30:21	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-23 15:30:21	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-23 15:30:21	ℹ	Channel #haskell: 693 nicks (1 op, 0 voices, 692 normals)
2022-04-23 15:30:21	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-23 15:30:21	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-23 15:38:14	→	zeenk has joined #haskell
2022-04-23 15:41:41	←	CiaoSen has quit (Ping timeout: 250 seconds)
2022-04-23 15:48:39	←	gurkenglas has quit (Ping timeout: 240 seconds)
2022-04-23 15:52:29	→	eggplantade has joined #haskell
2022-04-23 15:53:29	←	briandaed has quit (Ping timeout: 272 seconds)
2022-04-23 15:56:39	←	eggplantade has quit (Ping timeout: 240 seconds)
2022-04-23 15:56:55	→	redb has joined #haskell
2022-04-23 16:00:38	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-23 16:00:59	←	redb has quit (Ping timeout: 240 seconds)
2022-04-23 16:06:39	←	vysn has quit (Ping timeout: 240 seconds)
2022-04-23 16:06:50	←	econo has quit (Quit: Connection closed for inactivity)
2022-04-23 16:06:59	→	razetime has joined #haskell
2022-04-23 16:07:20	→	Unicorn_Princess has joined #haskell
2022-04-23 16:07:38	→	Vajb has joined #haskell
2022-04-23 16:07:55	→	briandaed has joined #haskell
2022-04-23 16:08:19	←	sammelweis has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2022-04-23 16:08:32	→	Lord_of_Life_ has joined #haskell
2022-04-23 16:08:35	→	acidjnk_new has joined #haskell
2022-04-23 16:09:06	→	gurkenglas has joined #haskell
2022-04-23 16:09:57	←	Lord_of_Life has quit (Ping timeout: 272 seconds)
2022-04-23 16:11:14	ℹ	Lord_of_Life_ is now known as Lord_of_Life
2022-04-23 16:11:19	→	abastro has joined #haskell
2022-04-23 16:12:40	←	chenqisu1 has quit (Quit: Leaving)
2022-04-23 16:13:26	→	redb has joined #haskell
2022-04-23 16:17:39	←	redb has quit (Ping timeout: 256 seconds)
2022-04-23 16:18:19	←	gurkenglas has quit (Ping timeout: 240 seconds)
2022-04-23 16:19:19	←	acidjnk_new has quit (Ping timeout: 240 seconds)
2022-04-23 16:21:36	→	acidjnk has joined #haskell
2022-04-23 16:21:44	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-23 16:26:25	←	zyklotomic has quit (Ping timeout: 272 seconds)
2022-04-23 16:28:16	→	zyklotomic has joined #haskell
2022-04-23 16:29:25	→	acidjnk_new has joined #haskell
2022-04-23 16:33:31	←	acidjnk has quit (Ping timeout: 256 seconds)
2022-04-23 16:35:55	←	briandaed has quit (Ping timeout: 272 seconds)
2022-04-23 16:39:25	→	briandaed has joined #haskell
2022-04-23 16:44:06	→	redb has joined #haskell
2022-04-23 16:45:18	→	xff0x_ has joined #haskell
2022-04-23 16:48:50	←	redb has quit (Ping timeout: 256 seconds)
2022-04-23 16:49:13	←	Pickchea has quit (Ping timeout: 272 seconds)
2022-04-23 16:50:07	→	machinedgod has joined #haskell
2022-04-23 16:51:06	←	neurocyte8614492 has quit (Ping timeout: 276 seconds)
2022-04-23 16:51:59	←	odnes has quit (Ping timeout: 240 seconds)
2022-04-23 16:52:13	→	redb has joined #haskell
2022-04-23 16:53:01	←	xff0x_ has quit (Ping timeout: 272 seconds)
2022-04-23 16:53:08	→	sammelweis has joined #haskell
2022-04-23 16:53:14	→	odnes has joined #haskell
2022-04-23 16:53:18	→	eggplantade has joined #haskell
2022-04-23 16:53:51	←	odnes has quit (Remote host closed the connection)
2022-04-23 16:54:06	→	odnes has joined #haskell
2022-04-23 16:54:33	→	xff0x_ has joined #haskell
2022-04-23 16:54:34	←	odnes has quit (Remote host closed the connection)
2022-04-23 16:54:47	→	odnes has joined #haskell
2022-04-23 16:54:47	→	__monty__ has joined #haskell
2022-04-23 16:56:32	→	michalz has joined #haskell
2022-04-23 16:56:53	←	michalz has quit (Remote host closed the connection)
2022-04-23 16:58:15	←	eggplantade has quit (Ping timeout: 276 seconds)
2022-04-23 16:59:33	←	xff0x_ has quit (Ping timeout: 276 seconds)
2022-04-23 16:59:33	←	redb has quit (Ping timeout: 276 seconds)
2022-04-23 17:00:51	→	xff0x_ has joined #haskell
2022-04-23 17:02:16	→	raehik has joined #haskell
2022-04-23 17:08:05	←	xff0x_ has quit (Ping timeout: 256 seconds)
2022-04-23 17:09:52	→	michalz has joined #haskell
2022-04-23 17:10:28	←	michalz has quit (Remote host closed the connection)
2022-04-23 17:11:26	→	xff0x_ has joined #haskell
2022-04-23 17:14:31	→	Core1633_ has joined #haskell
2022-04-23 17:14:31	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-23 17:14:46	→	Vajb has joined #haskell
2022-04-23 17:17:04	←	Core1633 has quit (Ping timeout: 260 seconds)
2022-04-23 17:17:36	←	acidjnk_new has quit (Ping timeout: 248 seconds)
2022-04-23 17:17:41	→	deadmarshal_ has joined #haskell
2022-04-23 17:17:45	←	geekosaur has quit (Ping timeout: 276 seconds)
2022-04-23 17:18:05	→	namkeleser has joined #haskell
2022-04-23 17:22:18	←	xff0x_ has quit (Ping timeout: 276 seconds)
2022-04-23 17:22:44	→	redb has joined #haskell
2022-04-23 17:26:59	←	redb has quit (Ping timeout: 240 seconds)
2022-04-23 17:27:39	→	geekosaur has joined #haskell
2022-04-23 17:28:28	←	jakalx has left #haskell
2022-04-23 17:29:17	→	redb has joined #haskell
2022-04-23 17:33:34	→	zebrag has joined #haskell
2022-04-23 17:34:11	←	redb has quit (Ping timeout: 272 seconds)
2022-04-23 17:34:34	→	Hiring has joined #haskell
2022-04-23 17:34:45	→	jakalx has joined #haskell
2022-04-23 17:40:00	←	sprout has quit (Ping timeout: 248 seconds)
2022-04-23 17:40:49	→	mvk has joined #haskell
2022-04-23 17:44:04	→	xff0x_ has joined #haskell
2022-04-23 17:44:34	←	zeenk has quit (Quit: Konversation terminated!)
2022-04-23 17:44:50	Hiring	HR Manager hiring programmers and certified specialists in readteaming. Interested ppl DM me and we will exchange with our linkedin etc
2022-04-23 17:45:54	__monty__	What even is readteaming?
2022-04-23 17:45:55	←	ChaiTRex has quit (Remote host closed the connection)
2022-04-23 17:46:20	→	ChaiTRex has joined #haskell
2022-04-23 17:47:16	Hiring	https://en.wikipedia.org/wiki/Red_team
2022-04-23 17:47:48	hpc	is it haskell-related?
2022-04-23 17:48:03	Hiring	Yes.
2022-04-23 17:50:11	hpc	maybe post a link or something, so it's not just a solicitation for PMs
2022-04-23 17:50:27	hpc	it could be interesting even to people that don't apply, and this is a discussion channel after all :P
2022-04-23 17:52:23	→	kaph has joined #haskell
2022-04-23 17:56:52	→	redb has joined #haskell
2022-04-23 18:01:39	←	deadmarshal_ has quit (Ping timeout: 240 seconds)
2022-04-23 18:06:29	←	redb has quit (Ping timeout: 272 seconds)
2022-04-23 18:06:37	→	redb has joined #haskell
2022-04-23 18:07:20	←	kaph has quit (Read error: Connection reset by peer)
2022-04-23 18:08:32	→	mikoto-chan has joined #haskell
2022-04-23 18:11:18	→	Guest|48 has joined #haskell
2022-04-23 18:14:03	→	sprout has joined #haskell
2022-04-23 18:21:35	ManofLetters[m]	your daily type-level puzzle (both errors are puzzling me): https://paste.tomsmeding.com/W1DfJbNL
2022-04-23 18:21:56	ℹ	AlexZenon_2 is now known as AlexZenon
2022-04-23 18:22:13	ℹ	AlexNoo_ is now known as AlexNoo
2022-04-23 18:23:10	tomsmeding	ManofLetters[m]: first error is because `f` cannot be called without type applications (because `z` is then always ambiguous)
2022-04-23 18:23:30	tomsmeding	GHC prevents you from accidentally writing such a type signature, and requires AllowAmbiguousTypes to disable the check
2022-04-23 18:23:35	←	jgeerds has quit (Ping timeout: 272 seconds)
2022-04-23 18:23:59	ManofLetters[m]	TIL
2022-04-23 18:24:07	←	namkeleser has quit (Quit: Client closed)
2022-04-23 18:25:21	←	Guest|48 has quit (Quit: Connection closed)
2022-04-23 18:25:26	←	geekosaur has quit (Ping timeout: 246 seconds)
2022-04-23 18:26:49	tomsmeding	ManofLetters[m]: the second I don't know exactly, but I suspect that that is because type class dictionaries are applied implicitly, so `c => a` unifies with `a` unifies with `d => a`, hence `y` in g's type signature is ambiguous
2022-04-23 18:26:50	tomsmeding	but not sure
2022-04-23 18:28:55	tomsmeding	in any case it does work if you add a `Proxy x` argument to the argument of `f` and to the type of `g`
2022-04-23 18:29:06	→	geekosaur has joined #haskell
2022-04-23 18:29:27	tomsmeding	ManofLetters[m]: more info about the first error: https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/exts/ambiguous_types.html#extension-AllowAmbiguousTypes
2022-04-23 18:31:00	ManofLetters[m]	got it, thank you; Proxies would be so sad ;(
2022-04-23 18:31:25	tomsmeding	ManofLetters[m]: lol your example is literally there in the docs
2022-04-23 18:31:49	tomsmeding	(though without explanation about why)
2022-04-23 18:34:03	ManofLetters[m]	wow, amazing; but it's sad, because it means I need to duplicate the type applications (once per each added proxy); oh well; thank you!
2022-04-23 18:34:17	tomsmeding	you don't, right?
2022-04-23 18:34:28	tomsmeding	`forall x. KnownNat x => Proxy x -> ()`
2022-04-23 18:34:34	tomsmeding	then `f (Proxy @42)` is enough
2022-04-23 18:34:41	tomsmeding	don't need `f @42 (Proxy @42)`
2022-04-23 18:35:38	ManofLetters[m]	oh, ok, I thought it's `f (Proxy @42) (g (Proxy @42))
2022-04-23 18:35:53	ManofLetters[m]	will try and report
2022-04-23 18:36:01	ManofLetters[m]	(try in the real life code)
2022-04-23 18:36:08	tomsmeding	hm, true, though `f` happens to work without proxy in this toy example :p
2022-04-23 18:36:53	←	razetime has quit (Ping timeout: 272 seconds)
2022-04-23 18:37:14	→	xkuru has joined #haskell
2022-04-23 18:40:21	→	pretty_dumm_guy has joined #haskell
2022-04-23 18:42:15	←	gpncarl_ has quit (Ping timeout: 276 seconds)
2022-04-23 18:42:23	←	mvk has quit (Ping timeout: 250 seconds)
2022-04-23 18:42:39	→	gpncarl_ has joined #haskell
2022-04-23 18:44:18	→	razetime has joined #haskell
2022-04-23 18:48:33	→	justsomeguy has joined #haskell
2022-04-23 18:51:00	ManofLetters[m]	ok, tried out, it's not so bad, no code duplication (which is error-prone), fortunately
2022-04-23 18:51:13	ManofLetters[m]	`f (Proxy @42) g` is enough
2022-04-23 18:51:21	ManofLetters[m]	and `f` applies the proxy to `g`
2022-04-23 18:51:59	ManofLetters[m]	the biggest pain is that all the `g`-like function require (multiple, because there are many type parameters) proxies
2022-04-23 18:52:13	ManofLetters[m]	ta
2022-04-23 18:54:18	←	ChaiTRex has quit (Remote host closed the connection)
2022-04-23 18:54:38	→	ChaiTRex has joined #haskell
2022-04-23 18:55:42	ManofLetters[m]	tomsmeding: ta
2022-04-23 18:55:55	tomsmeding	ta?
2022-04-23 18:58:53	ManofLetters[m]	thank you again :)
2022-04-23 18:58:57	ManofLetters[m]	thanks again?
2022-04-23 18:59:18	tomsmeding	ah, didn't know that abbreviation
2022-04-23 18:59:19	tomsmeding	cheers :)
2022-04-23 19:00:17	→	kb72 has joined #haskell
2022-04-23 19:00:41	←	kb72 has quit (Client Quit)
2022-04-23 19:04:49	→	gpncarl has joined #haskell
2022-04-23 19:05:23	←	gpncarl_ has quit (Ping timeout: 256 seconds)
2022-04-23 19:05:55	→	namkeleser has joined #haskell
2022-04-23 19:06:56	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-23 19:07:07	→	Vajb has joined #haskell
2022-04-23 19:12:29	→	deadmarshal_ has joined #haskell
2022-04-23 19:17:09	←	vorpuni has quit (Quit: bye)
2022-04-23 19:20:56	→	CiaoSen has joined #haskell
2022-04-23 19:24:37	→	eggplantade has joined #haskell
2022-04-23 19:25:43	←	odnes has quit (Read error: Connection reset by peer)
2022-04-23 19:25:44	→	odnes_ has joined #haskell
2022-04-23 19:28:39	←	eggplantade has quit (Ping timeout: 240 seconds)
2022-04-23 19:31:57	←	coot has quit (Quit: coot)
2022-04-23 19:33:41	←	deadmarshal_ has quit (Ping timeout: 246 seconds)
2022-04-23 19:40:13	←	gpncarl has quit (Ping timeout: 272 seconds)
2022-04-23 19:47:17	→	rekahsoft has joined #haskell
2022-04-23 19:49:00	→	jao has joined #haskell
2022-04-23 19:49:35	←	rekahsoft has quit (Remote host closed the connection)
2022-04-23 19:49:57	→	rekahsoft has joined #haskell
2022-04-23 19:50:59	←	redb has quit (Ping timeout: 240 seconds)
2022-04-23 19:51:20	←	razetime has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2022-04-23 19:56:05	←	CiaoSen has quit (Quit: CiaoSen)
2022-04-23 20:02:27	←	namkeleser has quit (Quit: Client closed)
2022-04-23 20:15:32	→	redb has joined #haskell
2022-04-23 20:18:38	←	cdman has quit (Quit: Leaving)
2022-04-23 20:22:37	←	xkuru has quit (Read error: Connection reset by peer)
2022-04-23 20:25:16	→	nate1 has joined #haskell
2022-04-23 20:25:52	→	kayprish has joined #haskell
2022-04-23 20:26:35	←	kayprish has quit (Client Quit)
2022-04-23 20:26:51	→	kayprish has joined #haskell
2022-04-23 20:26:53	→	sammelweis_ has joined #haskell
2022-04-23 20:27:41	←	sammelweis has quit (Ping timeout: 250 seconds)
2022-04-23 20:31:22	→	cosimone has joined #haskell
2022-04-23 20:31:46	→	gpncarl has joined #haskell
2022-04-23 20:36:55	→	CiaoSen has joined #haskell
2022-04-23 20:38:05	←	redb has quit (Ping timeout: 246 seconds)
2022-04-23 20:40:15	←	dextaa has quit (Remote host closed the connection)
2022-04-23 20:40:57	→	marinelli has joined #haskell
2022-04-23 20:43:23	→	redb has joined #haskell
2022-04-23 20:43:47	→	bontaq has joined #haskell
2022-04-23 20:44:00	←	marinelli has quit (Quit: marinelli)
2022-04-23 20:44:51	←	jinsun has quit (Read error: Connection reset by peer)
2022-04-23 20:46:43	←	nate1 has quit (Ping timeout: 272 seconds)
2022-04-23 20:47:00	→	dextaa has joined #haskell
2022-04-23 20:49:22	→	jinsun has joined #haskell
2022-04-23 20:50:04	→	stackdroid18 has joined #haskell
2022-04-23 20:50:36	→	[itchyjunk] has joined #haskell
2022-04-23 20:51:36	←	stefan-_ has quit (Ping timeout: 276 seconds)
2022-04-23 20:52:16	→	dextaa4 has joined #haskell
2022-04-23 20:52:18	←	dextaa4 has quit (Remote host closed the connection)
2022-04-23 20:53:02	→	dextaa4 has joined #haskell
2022-04-23 20:54:32	←	benin has quit (Quit: The Lounge - https://thelounge.chat)
2022-04-23 20:54:51	←	dextaa has quit (Ping timeout: 276 seconds)
2022-04-23 20:55:29	→	stefan-_ has joined #haskell
2022-04-23 20:58:38	←	dextaa4 has quit (Remote host closed the connection)
2022-04-23 20:59:38	→	dextaa4 has joined #haskell
2022-04-23 21:00:19	←	dextaa4 has quit (Remote host closed the connection)
2022-04-23 21:01:52	→	dextaa4 has joined #haskell
2022-04-23 21:02:52	→	perrierjouet has joined #haskell
2022-04-23 21:09:11	←	dextaa4 has quit (Remote host closed the connection)
2022-04-23 21:09:30	tomsmeding	maerwald: styling is not yet improved, but the layout using css is much more stable now that I've used css grid (thanks arjun I guess for the suggestion): https://play-haskell.tomsmeding.com/play
2022-04-23 21:10:20	tomsmeding	you said that working with css is like harvesting asparagus; maybe it's still unpleasant, but css grid does make this particular application a lot more intuitive
2022-04-23 21:10:42	→	dextaa4 has joined #haskell
2022-04-23 21:12:41	maerwald	tomsmeding: nice
2022-04-23 21:15:24	tomsmeding	maerwald: see also the new button at the top :p
2022-04-23 21:15:51	←	abastro has quit (Ping timeout: 272 seconds)
2022-04-23 21:15:54	maerwald	tomsmeding: I'm trying to come up with an example that blows up heap size, but doesn't time out
2022-04-23 21:15:56	maerwald	any idea?
2022-04-23 21:17:53	tomsmeding	as in, use lots of memory in little time?
2022-04-23 21:18:10	tomsmeding	let l = [1..1000000] in sum l + product l + length l
2022-04-23 21:19:00	tomsmeding	hm
2022-04-23 21:20:13	maerwald	times out
2022-04-23 21:20:20	tomsmeding	yeah I noticed :p
2022-04-23 21:20:33	tomsmeding	ah {-# NOINLINE l #-}
2022-04-23 21:21:09	tomsmeding	with 100000000
2022-04-23 21:21:34	tomsmeding	ghc being too smart again
2022-04-23 21:22:12	tomsmeding	https://play-haskell.tomsmeding.com/cd85IVb8
2022-04-23 21:22:47	maerwald	tomsmeding: https://play-haskell.tomsmeding.com/LdCgMv9k
2022-04-23 21:22:50	maerwald	doesn't work for me
2022-04-23 21:23:31	maerwald	yours also times out
2022-04-23 21:23:35	←	redb has quit (Ping timeout: 246 seconds)
2022-04-23 21:23:56	tomsmeding	it's on the border then apparently
2022-04-23 21:24:17	tomsmeding	if I remove '+ length l' and add an 'Int' annotation to l, it gives heap exhausted fairly often, but not always
2022-04-23 21:24:57	[_________]	what's the time limit ? putStrLn might always reach it if there's a lot of data
2022-04-23 21:25:00	abastro[m]	Could I get dark mode for the playground
2022-04-23 21:25:09	maerwald	tomsmeding: 9.2.2 worked
2022-04-23 21:25:40	tomsmeding	[_________]: timeout is here https://github.com/tomsmeding/pastebin-haskell/blob/play/GHCPool.hs#L37 , print is just an Int here so that's not it
2022-04-23 21:25:54	tomsmeding	abastro[m]: noted, I would like it too
2022-04-23 21:27:06	abastro[m]	Thanks!!!
2022-04-23 21:27:20	tomsmeding	but no promises as to delivery time :p
2022-04-23 21:27:25	maerwald	tomsmeding: so did you get your bubblewrap line reviewed?
2022-04-23 21:27:35	tomsmeding	not by a professional
2022-04-23 21:27:45	←	dextaa4 has quit (Remote host closed the connection)
2022-04-23 21:28:03	maerwald	are there bubblewrap professionals other than the author?
2022-04-23 21:28:12	tomsmeding	:')
2022-04-23 21:29:29	tomsmeding	maerwald: this one is much more efficient at exhausting heap https://play-haskell.tomsmeding.com/HrZJmcvi
2022-04-23 21:30:42	→	o-90 has joined #haskell
2022-04-23 21:31:19	maerwald	you set max heap size to 500mb?
2022-04-23 21:31:31	tomsmeding	Yes
2022-04-23 21:31:40	tomsmeding	Is that too small?
2022-04-23 21:31:41	maerwald	so there's only one worker thread?
2022-04-23 21:31:45	tomsmeding	3
2022-04-23 21:31:47	maerwald	I was thinking smaller
2022-04-23 21:31:50	maerwald	hmm
2022-04-23 21:32:02	→	AkechiShiro has joined #haskell
2022-04-23 21:32:17	tomsmeding	machine has 3.7G ram according to htop, and 3 cores
2022-04-23 21:32:33	maerwald	I think I'd set it to 50mb and increase workers
2022-04-23 21:32:46	tomsmeding	is it useful to have more workers than cores
2022-04-23 21:32:49	maerwald	write efficient code :p
2022-04-23 21:33:01	tomsmeding	I already have queueing functionality, if there's more jobs than workers they get queued
2022-04-23 21:33:03	maerwald	no idea
2022-04-23 21:33:14	tomsmeding	though the maximum queue length is also 3, no idea what's a good choice there
2022-04-23 21:34:41	tomsmeding	maerwald: also have this ulimit because it's trivial to System.Cmd.system your way out of the RTS limits https://github.com/tomsmeding/pastebin-haskell/blob/play/bwrap-files/start.sh#L40
2022-04-23 21:35:31	maerwald	3 workers seems a lil small imo... maybe the heap size can be a function of the number of workers
2022-04-23 21:35:35	→	wootehfoot has joined #haskell
2022-04-23 21:35:46	maerwald	and the current queue size
2022-04-23 21:35:57	←	o-90 has quit (Quit: Leaving)
2022-04-23 21:35:59	tomsmeding	maerwald: I doubt adding more workers than cores is helpful
2022-04-23 21:36:14	maerwald	why does it have so few cores
2022-04-23 21:36:19	tomsmeding	Rather run it on a bigger machine, for which I need $ :p
2022-04-23 21:36:24	tomsmeding	Because I rented a cheap vps
2022-04-23 21:36:28	maerwald	um
2022-04-23 21:36:37	maerwald	ping HF
2022-04-23 21:36:46	tomsmeding	I mean it's not that expensive, but poor phd
2022-04-23 21:36:57	maerwald	100$ per month should be cheap for them
2022-04-23 21:37:18	maerwald	Hecate: can we make this happen?
2022-04-23 21:37:25	Hecate	hello
2022-04-23 21:37:29	←	AkechiShiro has quit (Quit: WeeChat 3.2.1)
2022-04-23 21:37:36	maerwald	we want a big machine for the haskell playground
2022-04-23 21:37:42	maerwald	https://play-haskell.tomsmeding.com/play/paste/cd85IVb8/1
2022-04-23 21:37:45	←	justsomeguy has quit (Ping timeout: 276 seconds)
2022-04-23 21:37:50	→	AkechiShiro has joined #haskell
2022-04-23 21:37:59	←	AkechiShiro has quit (Client Quit)
2022-04-23 21:38:09	Hecate	maerwald: you should contact haskell.org first I guess? 
2022-04-23 21:38:14	Hecate	they have the infra
2022-04-23 21:38:19	→	AkechiShiro has joined #haskell
2022-04-23 21:38:42	Hecate	maerwald: and Tom Ellis is on the board of Haskell.org btw
2022-04-23 21:38:45	maerwald	this is not hosted on haskell.org
2022-04-23 21:38:49	Hecate	this should
2022-04-23 21:39:06	→	vicfred has joined #haskell
2022-04-23 21:39:08	tomsmeding	yeah I guess this shouldn't continue to be hosted on my personal domain :p
2022-04-23 21:39:09	maerwald	not sure, that's up to tomsmeding 
2022-04-23 21:39:10	Hecate	this is too important to be left on someone's personal infra
2022-04-23 21:39:28	Hecate	I mean, at a private individual's burden and cost
2022-04-23 21:39:29	←	vicfred has quit (Remote host closed the connection)
2022-04-23 21:39:42	Hecate	this is the kind of stuff that would benefit from mutualising the costs 
2022-04-23 21:40:16	tomsmeding	you guys figure this out, I'm going to make some food :p
2022-04-23 21:40:21	tomsmeding	be back in a while
2022-04-23 21:40:27	maerwald	tomsmeding: we can prolly also make the ghc backend a microservice and scale it horizontally?
2022-04-23 21:40:45	mikoto-chan	is there also a "namespace" for global packages with cabal?
2022-04-23 21:40:54	Hecate	mikoto-chan: there isn't, and shouldn't
2022-04-23 21:41:10	Hecate	if you're trying to do what I'm thinking you're trying to do: don't do it
2022-04-23 21:41:19	←	AkechiShiro has quit (Client Quit)
2022-04-23 21:41:27	mikoto-chan	Hecate: so even for a simple hello world that needs an external package I need to create a new project?
2022-04-23 21:41:44	→	AkechiShiro has joined #haskell
2022-04-23 21:41:51	mikoto-chan	what happens when I run `cabal install foo` in my home directory?
2022-04-23 21:42:05	Hecate	mikoto-chan: it created an abomination and we learned our lesson
2022-04-23 21:42:15	maerwald	mikoto-chan: https://www.haskell.org/ghcup/steps/#an-interactive-environment
2022-04-23 21:42:15	Hecate	see: The Python ecosystem
2022-04-23 21:42:30	maerwald	mikoto-chan: this explains how to add dependencies ad-hoc so you can use them in a repl
2022-04-23 21:42:41	mikoto-chan	Hecate: idk about Python, I have a Go background
2022-04-23 21:42:47	maerwald	https://www.haskell.org/ghcup/steps/#using-external-packages-in-ghci rather
2022-04-23 21:42:49	mikoto-chan	maerwald: thanks :)
2022-04-23 21:42:53	geekosaur	if foo is a library, it installs in cabal's internal package database and does nothing else. you can't access it without e.g. cabal repl --build-depends=foo
2022-04-23 21:42:54	mikoto-chan	oh
2022-04-23 21:43:10	mikoto-chan	geekosaur: so cabal has a repl too?
2022-04-23 21:43:13	Hecate	yes
2022-04-23 21:43:19	geekosaur	if it's an executable, the executable is installed in ~/.cabal/bin (or windows equivalent)
2022-04-23 21:43:46	←	jakalx has left #haskell (Error from remote client)
2022-04-23 21:44:07	geekosaur	"cabal repl" runs ghci with youtr dependencies. if you have no current project it uses a fake one, and you can use --build-depends to add packages to that fake one
2022-04-23 21:45:06	mikoto-chan	thanks, that answers my question
2022-04-23 21:45:21	→	tzh has joined #haskell
2022-04-23 21:46:03	monochrom	"A simple hello world" would not have any dependency other than what GHC already provides.
2022-04-23 21:46:26	maerwald	monochrom: it needs 'say'
2022-04-23 21:46:39	maerwald	https://hackage.haskell.org/package/say-0.1.0.1/docs/Say.html :p
2022-04-23 21:46:50	mikoto-chan	maerwald: XD
2022-04-23 21:46:51	Hecate	hahaha
2022-04-23 21:47:47	geekosaur	I have expected some kind of lambdasay (see cowsay)
2022-04-23 21:47:54	geekosaur	*half expected
2022-04-23 21:48:13	monochrom	Ugh the package is not an April 1st joke...
2022-04-23 21:48:17	→	redb has joined #haskell
2022-04-23 21:48:18	albet70	if a language doesn't support tail call optimization, using fixed point call can avoid the recursive limit?
2022-04-23 21:49:13	→	vysn has joined #haskell
2022-04-23 21:49:43	monochrom	That depends on what else the language supports and the semantics of "fixed point call" in that language.
2022-04-23 21:50:01	←	CiaoSen has quit (Ping timeout: 250 seconds)
2022-04-23 21:50:06	monochrom	Fully specify the language you have in mind, and then the question can be answered.
2022-04-23 21:50:27	albet70	"monochrom :Fully specify the language you have in mind, and then the question can be answered.", python or javascript
2022-04-23 21:50:35	monochrom	Broad "conceptual" "intuitive" vague questions don't work.
2022-04-23 21:51:15	←	xff0x_ has quit (Read error: Connection reset by peer)
2022-04-23 21:51:15	monochrom	What is "fixed point call" in Python?
2022-04-23 21:51:20	albet70	fib _fib = _fib, call fib in the last of _fib, could avoid?
2022-04-23 21:51:43	monochrom	Have you benchmarked that?
2022-04-23 21:51:51	albet70	not yet
2022-04-23 21:51:56	albet70	just wondering
2022-04-23 21:52:02	mikoto-chan	monochrom: can you link me your Haskell writeups again?
2022-04-23 21:52:18	monochrom	http://www.vex.net/~trebla/haskell/
2022-04-23 21:52:26	maerwald	tomsmeding: please also add "access to stackage LTS dependencies" to playground TODO. That shouldn't even be hard to implement via a script.
2022-04-23 21:52:45	→	jakalx has joined #haskell
2022-04-23 21:54:52	←	FinnElija has quit (Remote host closed the connection)
2022-04-23 21:55:14	→	FinnElija has joined #haskell
2022-04-23 21:55:40	←	pavonia has quit (Quit: Bye!)
2022-04-23 21:56:42	→	waleee has joined #haskell
2022-04-23 21:56:56	→	justsomeguy has joined #haskell
2022-04-23 21:57:33	→	neurocyte8614492 has joined #haskell
2022-04-23 21:57:33	←	neurocyte8614492 has quit (Changing host)
2022-04-23 21:57:33	→	neurocyte8614492 has joined #haskell
2022-04-23 21:59:00	→	dextaa4 has joined #haskell
2022-04-23 21:59:22	←	AkechiShiro has quit (Quit: WeeChat 3.2.1)
2022-04-23 21:59:27	←	vysn has quit (Ping timeout: 240 seconds)
2022-04-23 22:00:01	→	AkechiShiro has joined #haskell
2022-04-23 22:00:03	albet70	how to construct a function f by its fixed point _f? if _f is defined
2022-04-23 22:00:09	←	geekosaur has quit (Remote host closed the connection)
2022-04-23 22:00:25	albet70	no with the 'const' way
2022-04-23 22:00:46	→	geekosaur has joined #haskell
2022-04-23 22:02:45	←	mikoto-chan has quit (Quit: mikoto-chan)
2022-04-23 22:02:59	→	mikoto-chan has joined #haskell
2022-04-23 22:03:40	→	kenran has joined #haskell
2022-04-23 22:03:50	←	kenran has quit (Client Quit)
2022-04-23 22:06:55	←	sprout has quit (Ping timeout: 250 seconds)
2022-04-23 22:07:00	→	mvk has joined #haskell
2022-04-23 22:07:04	hpc	i am not sure that it's possible
2022-04-23 22:07:29	hpc	try doing it to a specific recursive definition, like the factorial function
2022-04-23 22:07:39	←	gpncarl has quit (Ping timeout: 276 seconds)
2022-04-23 22:08:01	monochrom	You should not even be sure what that question means. It's deranged.
2022-04-23 22:08:25	←	redb has quit (Ping timeout: 256 seconds)
2022-04-23 22:09:10	→	gpncarl has joined #haskell
2022-04-23 22:09:16	←	dextaa4 has quit (Remote host closed the connection)
2022-04-23 22:10:25	EvanR	damn
2022-04-23 22:10:54	←	machinedgod has quit (Ping timeout: 276 seconds)
2022-04-23 22:13:39	←	gpncarl has quit (Ping timeout: 240 seconds)
2022-04-23 22:14:43	→	gpncarl has joined #haskell
2022-04-23 22:15:44	EvanR	in context where optimization doesn't change behavior but only performance, tail call optimization should be called tail call not-brokenation
2022-04-23 22:16:27	EvanR	TCNB
2022-04-23 22:17:12	albet70	it's hard to implement? and why so many languages don't support it?
2022-04-23 22:17:25	EvanR	I think most languages don't think it's important
2022-04-23 22:17:32	albet70	I only know scheme and haskell support it
2022-04-23 22:17:42	EvanR	scheme and haskell both support tail call not brokenation
2022-04-23 22:17:59	EvanR	in wildly different ways
2022-04-23 22:18:19	albet70	but scheme make it within its standard
2022-04-23 22:18:53	←	gpncarl has quit (Ping timeout: 247 seconds)
2022-04-23 22:19:00	←	notzmv has quit (Ping timeout: 260 seconds)
2022-04-23 22:19:04	albet70	despite its so many variants implement
2022-04-23 22:19:06	EvanR	stuff being not broken is a much more general concept and often not something you even bring up
2022-04-23 22:19:25	EvanR	like, a lot of people just assume things aren't broken
2022-04-23 22:20:08	EvanR	but schema and javascript both assume the same background function call strategy, using a call stack
2022-04-23 22:21:27	←	justsomeguy has quit (Ping timeout: 256 seconds)
2022-04-23 22:21:47	EvanR	haskell's call by name stuff doesn't work that way, it happens recursive tail calling isn't automatically broken, so it awkward to even bring it up
2022-04-23 22:23:50	EvanR	I guess it's more constructive to say javascript features broken recursion
2022-04-23 22:24:10	→	gurkenglas has joined #haskell
2022-04-23 22:24:33	→	redb has joined #haskell
2022-04-23 22:24:44	albet70	"call me by your name"
2022-04-23 22:27:18	→	eggplantade has joined #haskell
2022-04-23 22:27:27	EvanR	tbf writing code in most languages as if it were scheme is probably bad
2022-04-23 22:27:48	EvanR	your coworkers would revolt
2022-04-23 22:28:27	EvanR	in haskell it's likely to lead to breakage too
2022-04-23 22:30:19	mikoto-chan	maerwald: the real question is, why does say operate on the Text set by default and not String like print?
2022-04-23 22:31:19	←	eggplantade has quit (Ping timeout: 240 seconds)
2022-04-23 22:31:32	monochrom	String = [Char] gets old quickly.  (One of the few things I agree with Snoyman.)  (Yes Snoyman is involved, follow the links to see his post.)
2022-04-23 22:32:29	←	redb has quit (Ping timeout: 272 seconds)
2022-04-23 22:34:00	→	_ht has joined #haskell
2022-04-23 22:34:59	→	tromp has joined #haskell
2022-04-23 22:35:03	EvanR	the next real question might be, why doesn't say operate on the abstract intersection of things it would need from Text or String
2022-04-23 22:35:16	monochrom	EvanR: Haskell's is s/name/need/.  The difference: "(\x -> x*x)(2+2)" do I get two copies of "2+2"?  call-by-name: yes.  call-by-need: no.
2022-04-23 22:35:41	EvanR	I was pretty sure I used the wrong call by
2022-04-23 22:36:51	monochrom	Perhaps there is insufficient interest in the "say" package altogether to advance on that front (or any front).
2022-04-23 22:37:37	→	redb has joined #haskell
2022-04-23 22:38:01	monochrom	Like, I know the issue, but I have another solution already.  Have a service thread dedicated for putStrLn, every other thread has to message it to output to stdout.
2022-04-23 22:38:55	monochrom	Even putStrLn itself (generally GHC's Handle system) already has some degree of atomicity.
2022-04-23 22:39:01	EvanR	I guess that improves the random ordering of characters to random ordering of lines
2022-04-23 22:41:14	→	econo has joined #haskell
2022-04-23 22:42:20	←	redb has quit (Ping timeout: 260 seconds)
2022-04-23 22:42:48	→	redb has joined #haskell
2022-04-23 22:44:20	←	cosimone has quit (Read error: Connection reset by peer)
2022-04-23 22:47:31	←	redb has quit (Ping timeout: 256 seconds)
2022-04-23 22:48:43	→	cosimone has joined #haskell
2022-04-23 22:49:35	→	abhixec has joined #haskell
2022-04-23 22:52:08	→	zmv has joined #haskell
2022-04-23 22:52:23	←	zmv has quit (Changing host)
2022-04-23 22:52:23	→	zmv has joined #haskell
2022-04-23 22:52:33	ℹ	zmv is now known as notzmv
2022-04-23 22:52:39	→	roconnor has joined #haskell
2022-04-23 22:53:11	roconnor	Is there a varient of Data.Array.! somewhere that returns a Maybe element?
2022-04-23 22:54:54	monochrom	I think no.  vector has it.
2022-04-23 22:55:17	→	redb has joined #haskell
2022-04-23 22:57:04	EvanR	you can cook one up using Control.Exception, maybe
2022-04-23 22:57:33	geekosaur	or with bounds
2022-04-23 22:57:58	roconnor	ya, I've written my own for now.
2022-04-23 22:58:07	monochrom	Yeah please use "inRange" instead of waiting for an async exception.
2022-04-23 22:58:21	EvanR	double the bounds checking, since it already has to check bounds to throw an exception xD
2022-04-23 22:58:21	roconnor	but I'm at the point where I'll need to write my own module just to export it to various places.
2022-04-23 22:58:53	EvanR	I guess checking bounds combined with unsafe index
2022-04-23 22:59:30	roconnor	I'm sure Lens has something.
2022-04-23 22:59:33	monochrom	Yeah it should have been in the standard library.
2022-04-23 23:00:13	monochrom	Who knows, probably someone proposed this 10 years ago already and the library comittee is still like "the jury is still out on this" haha.
2022-04-23 23:00:46	geekosaur	I'd thought array already had at :(
2022-04-23 23:01:02	roconnor	It would obviously be called Data.Array.lookup
2022-04-23 23:01:52	roconnor	maybe it means I should just use Vector. :')
2022-04-23 23:02:15	monochrom	Leslie Lamport speaks of "the part-time parliament". You would think that such a parliament would be the worst committee ever.
2022-04-23 23:02:16	←	redb has quit (Ping timeout: 256 seconds)
2022-04-23 23:02:54	EvanR	I respect a committee that veers on the side of doing nothing, as opposed to messing everything up regularly
2022-04-23 23:03:12	dolio	Pretty sure the library committee would say not to use Array.
2022-04-23 23:03:23	roconnor	dolio: oh really?
2022-04-23 23:03:46	→	sprout has joined #haskell
2022-04-23 23:03:51	roconnor	Okay then I will switch to Vector.
2022-04-23 23:04:04	dolio	Yeah, there's been a replacement for like 15 years.
2022-04-23 23:04:49	dolio	I think array is only still around for backwards compatibility.
2022-04-23 23:05:33	⚡	roconnor opens up GHC to find ... type Array i e = (i,Vector e)   j/k
2022-04-23 23:06:10	←	wootehfoot has quit (Read error: Connection reset by peer)
2022-04-23 23:06:38	monochrom	There is a circular-dependency obstacle discouraging that.
2022-04-23 23:07:00	monochrom	Either that, or "oh so that's why GHC is a 500MB download and a 2GB install"
2022-04-23 23:07:07	←	geekosaur has quit (Killed (NickServ (GHOST command used by allbery_b)))
2022-04-23 23:07:07	→	allbery_b has joined #haskell
2022-04-23 23:07:10	ℹ	allbery_b is now known as geekosaur
2022-04-23 23:07:33	→	anomal has joined #haskell
2022-04-23 23:07:39	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-23 23:12:10	→	CiaoSen has joined #haskell
2022-04-23 23:15:23	roconnor	dolio: How about DiffArray :P
2022-04-23 23:15:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-23 23:16:54	dolio	I never use it.
2022-04-23 23:19:17	→	alp_ has joined #haskell
2022-04-23 23:19:28	→	redb has joined #haskell
2022-04-23 23:20:19	→	Sgeo has joined #haskell
2022-04-23 23:21:32	←	abhixec has quit (Ping timeout: 260 seconds)
2022-04-23 23:23:15	←	ix has quit (Read error: Connection reset by peer)
2022-04-23 23:23:18	→	qy has joined #haskell
2022-04-23 23:28:49	→	littlebobeep has joined #haskell
2022-04-23 23:30:57	→	tromp has joined #haskell
2022-04-23 23:36:59	←	redb has quit (Ping timeout: 240 seconds)
2022-04-23 23:39:34	→	abhixec has joined #haskell
2022-04-23 23:40:40	→	redb has joined #haskell
2022-04-23 23:42:07	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-23 23:43:51	→	michalz has joined #haskell
2022-04-23 23:45:48	←	son0p has quit (Ping timeout: 276 seconds)
2022-04-23 23:46:27	←	abhixec has quit (Ping timeout: 276 seconds)
2022-04-23 23:48:14	→	[_] has joined #haskell
2022-04-23 23:48:18	←	[itchyjunk] has quit (Read error: Connection reset by peer)
2022-04-23 23:49:23	→	son0p has joined #haskell
2022-04-23 23:50:22	→	ccntrq has joined #haskell
2022-04-23 23:51:19	→	AlexNoo_ has joined #haskell
2022-04-23 23:51:21	←	AlexNoo has quit (Read error: Connection reset by peer)
2022-04-23 23:51:26	←	notzmv has quit (Remote host closed the connection)
2022-04-23 23:52:00	→	zmv has joined #haskell
2022-04-23 23:52:17	←	zmv has quit (Changing host)
2022-04-23 23:52:17	→	zmv has joined #haskell
2022-04-23 23:52:27	ℹ	zmv is now known as notzmv
2022-04-23 23:53:03	tomsmeding	maerwald: horizontally scalable backend sounds like a great idea; stackage added to TODO
2022-04-23 23:55:31	→	acidjnk_new has joined #haskell
2022-04-23 23:56:48	←	jao has quit (Remote host closed the connection)
2022-04-23 23:56:49	→	coot has joined #haskell
2022-04-24 00:03:36	→	jao has joined #haskell
2022-04-24 00:04:05	→	titibandit has joined #haskell
2022-04-24 00:05:49	→	wroathe has joined #haskell
2022-04-24 00:05:49	←	wroathe has quit (Changing host)
2022-04-24 00:05:49	→	wroathe has joined #haskell
2022-04-24 00:05:54	←	waleee has quit (Quit: WeeChat 3.5)
2022-04-24 00:06:10	→	bahamas has joined #haskell
2022-04-24 00:06:31	←	alp_ has quit (Remote host closed the connection)
2022-04-24 00:07:20	→	waleee has joined #haskell
2022-04-24 00:07:50	→	alp_ has joined #haskell
2022-04-24 00:09:51	Brandon_IX	why does [x | x <- [20..1], 20 `mod` x == 0] give me an empty list?
2022-04-24 00:10:10	tomsmeding	> ([20..1], [20,19..1])
2022-04-24 00:10:12	lambdabot	 ([],[20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1])
2022-04-24 00:10:30	tomsmeding	the step is +1 by default, unless you explicitly override it
2022-04-24 00:10:45	geekosaur	the .. syntax is not "smart" and does not realize you want it to count backwards
2022-04-24 00:11:04	Brandon_IX	perfect tyvm
2022-04-24 00:11:20	monochrom	But it's smart and realize that [20, 19 .. 1] means the step is 19-20.
2022-04-24 00:12:34	←	bahamas has quit (Quit: leaving)
2022-04-24 00:12:46	monochrom	As a result if I try to translate BASIC "for i=37 to 3 step -4" I have to think "OK what is 37-4 again?"
2022-04-24 00:12:59	Brandon_IX	it's probably a naive questions to ask but couldn't the interpreter just check if the first number is greater than the second
2022-04-24 00:13:18	tomsmeding	the [..] syntax technically also works for types that don't have a (<) operation
2022-04-24 00:13:29	tomsmeding	:t \x -> [x..x]
2022-04-24 00:13:30	lambdabot	Enum a => a -> [a]
2022-04-24 00:13:36	tomsmeding	only has an Enum constraint, not an Ord
2022-04-24 00:14:14	tomsmeding	though that's a weak argument because Enum also includes a bijection with Int...
2022-04-24 00:14:27	tomsmeding	so I guess the correct answer is "dunno, it doesn't"
2022-04-24 00:14:38	monochrom	Because there are times I want [5..4] to be the empty list.
2022-04-24 00:16:12	←	tzh has quit (Remote host closed the connection)
2022-04-24 00:16:32	→	tzh has joined #haskell
2022-04-24 00:18:12	←	tzh has quit (Remote host closed the connection)
2022-04-24 00:18:33	→	tzh has joined #haskell
2022-04-24 00:19:42	←	tzh has quit (Remote host closed the connection)
2022-04-24 00:21:15	→	tzh has joined #haskell
2022-04-24 00:22:00	→	tromp has joined #haskell
2022-04-24 00:22:12	←	tzh has quit (Remote host closed the connection)
2022-04-24 00:22:31	→	tzh has joined #haskell
2022-04-24 00:23:32	→	sedman has joined #haskell
2022-04-24 00:27:30	→	nate1 has joined #haskell
2022-04-24 00:27:53	→	tzh_ has joined #haskell
2022-04-24 00:27:59	←	sedman has left #haskell
2022-04-24 00:28:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-24 00:28:42	←	tzh_ has quit (Remote host closed the connection)
2022-04-24 00:29:22	→	tzh_ has joined #haskell
2022-04-24 00:30:26	Hecate	monochrom: you mean ]4;5[?
2022-04-24 00:30:42	←	tzh_ has quit (Read error: Connection reset by peer)
2022-04-24 00:30:55	←	tzh has quit (Ping timeout: 272 seconds)
2022-04-24 00:31:26	→	tzh_ has joined #haskell
2022-04-24 00:31:39	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-24 00:32:12	←	tzh_ has quit (Remote host closed the connection)
2022-04-24 00:33:07	hpc	Hecate: that evaluates to ꙱
2022-04-24 00:34:05	←	wroathe has quit (Ping timeout: 272 seconds)
2022-04-24 00:35:30	monochrom	I mean [5..4].
2022-04-24 00:37:42	→	tzh has joined #haskell
2022-04-24 00:37:42	←	tzh has quit (Remote host closed the connection)
2022-04-24 00:38:09	→	tzh has joined #haskell
2022-04-24 00:38:41	monochrom	Consider the mathematical convention of "Sigma i=5 to 7" to mean 3 terms, "i=5 to 5" to mean one term, "i=5 to 4" to mean the empty sum.
2022-04-24 00:39:42	←	tzh has quit (Remote host closed the connection)
2022-04-24 00:41:54	geekosaur	also consider the case of [5..x] where x might be 4. sometimes you want to reverse them, sometimes you want it to be empty
2022-04-24 00:42:12	geekosaur	so haskell refuses to guess, as usual; it makes you tell it which you mean
2022-04-24 00:44:24	→	tromp has joined #haskell
2022-04-24 00:44:36	→	Dorkside67 has joined #haskell
2022-04-24 00:45:33	→	machinedgod has joined #haskell
2022-04-24 00:46:27	←	Dorkside6 has quit (Ping timeout: 240 seconds)
2022-04-24 00:46:27	ℹ	Dorkside67 is now known as Dorkside6
2022-04-24 06:22:34	ℹ	irc: disconnected from server
2022-04-24 06:23:00	→	oxide has joined #haskell
2022-04-24 06:23:00	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-24 06:23:00	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-24 06:23:00	ℹ	Channel #haskell: 704 nicks (1 op, 0 voices, 703 normals)
2022-04-24 06:23:00	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-24 06:23:01	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-24 06:23:47	→	gpncarl has joined #haskell
2022-04-24 06:24:49	←	nehsou^ has quit (Ping timeout: 256 seconds)
2022-04-24 06:27:24	→	nate1 has joined #haskell
2022-04-24 06:28:38	→	abhixec has joined #haskell
2022-04-24 06:28:45	←	gpncarl has quit (Ping timeout: 272 seconds)
2022-04-24 06:29:40	→	zincy has joined #haskell
2022-04-24 06:30:00	→	slack1256 has joined #haskell
2022-04-24 06:30:33	←	Unicorn_Princess has quit (Quit: Leaving)
2022-04-24 06:30:42	←	namkeleser has quit (Quit: Client closed)
2022-04-24 06:33:55	←	zincy has quit (Ping timeout: 250 seconds)
2022-04-24 06:35:30	←	bontaq has quit (Remote host closed the connection)
2022-04-24 06:40:48	←	nate1 has quit (Ping timeout: 248 seconds)
2022-04-24 06:41:14	→	vicfred has joined #haskell
2022-04-24 06:42:15	→	redb has joined #haskell
2022-04-24 06:43:57	←	jao has quit (Ping timeout: 272 seconds)
2022-04-24 06:47:29	→	andrey_ has joined #haskell
2022-04-24 06:50:00	←	andrey__ has quit (Ping timeout: 260 seconds)
2022-04-24 06:50:17	←	redb has quit (Ping timeout: 272 seconds)
2022-04-24 06:52:34	→	sleym has joined #haskell
2022-04-24 06:54:17	←	joo-_ has quit (Ping timeout: 256 seconds)
2022-04-24 06:54:48	→	nate1 has joined #haskell
2022-04-24 06:55:56	→	joo-_ has joined #haskell
2022-04-24 06:55:56	←	joo-_ has quit (Changing host)
2022-04-24 06:55:56	→	joo-_ has joined #haskell
2022-04-24 06:56:42	←	sleym has quit (Changing host)
2022-04-24 06:56:42	→	sleym has joined #haskell
2022-04-24 06:56:52	jackdk	Trying to use polymorphic code in Dhall, for example, is often worse than writing stuff out longhand
2022-04-24 06:57:58	abastro[m]	Why?
2022-04-24 07:00:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-24 07:02:11	→	jao has joined #haskell
2022-04-24 07:04:13	←	kilolympus has quit (Quit: Quitting IRC :()
2022-04-24 07:04:39	→	kilolympus has joined #haskell
2022-04-24 07:05:04	→	littlebobeep has joined #haskell
2022-04-24 07:05:15	→	frost has joined #haskell
2022-04-24 07:06:59	→	redb has joined #haskell
2022-04-24 07:07:45	←	kimjetwav has quit (Read error: Connection reset by peer)
2022-04-24 07:08:06	←	EvanR has quit (Remote host closed the connection)
2022-04-24 07:08:27	→	EvanR has joined #haskell
2022-04-24 07:09:59	←	nate1 has quit (Ping timeout: 240 seconds)
2022-04-24 07:11:42	←	redb has quit (Ping timeout: 276 seconds)
2022-04-24 07:11:55	←	sleym has quit (Quit: sleym)
2022-04-24 07:13:22	monochrom	I don't think anyone is suggesting unconditional universal explicitness.  Just explicit forall specifically.
2022-04-24 07:15:04	monochrom	Here is an example where you will have trouble confusing yourself under explicit forall: f :: forall a. a -> a; f x = let { y :: forall a. a; y = x } in y
2022-04-24 07:16:13	abastro[m]	Is this one assuming ScopedTypeVariables on?
2022-04-24 07:17:18	monochrom	It is showing a common error "f :: a -> a; f x = let { y :: a; y = x } in y" which looks very intuitive and people cannot spot what went wrong.
2022-04-24 07:17:21	→	redb has joined #haskell
2022-04-24 07:17:58	monochrom	An erroneous code snippet that looks so intuitive you can't see why the computer would reject it
2022-04-24 07:18:30	monochrom	vs under explict forall it looks so wrong you can't see why any human would write it in the first place.
2022-04-24 07:18:32	→	kimjetwav has joined #haskell
2022-04-24 07:18:53	→	abastro has joined #haskell
2022-04-24 07:20:19	abastro[m]	Oh, I see. you meant an example where explicit forall is good
2022-04-24 07:20:19	←	gentauro has quit (Read error: Connection reset by peer)
2022-04-24 07:22:06	←	redb has quit (Ping timeout: 276 seconds)
2022-04-24 07:24:32	→	razetime has joined #haskell
2022-04-24 07:25:22	jackdk	Dhall requires explicit type application and explicit forall. It's noisu
2022-04-24 07:25:35	jackdk	Still better than straight YAML though
2022-04-24 07:26:12	→	gentauro has joined #haskell
2022-04-24 07:26:23	←	tommd has quit (Ping timeout: 272 seconds)
2022-04-24 07:26:34	→	redb has joined #haskell
2022-04-24 07:32:32	←	pretty_dumm_guy has quit (Quit: WeeChat 3.5)
2022-04-24 07:35:07	abastro	I did not mean the explicit type application though.
2022-04-24 07:35:39	←	machinedgod has quit (Ping timeout: 240 seconds)
2022-04-24 07:35:49	→	gpncarl has joined #haskell
2022-04-24 07:38:33	EvanR	actually I've seen a lot of beginners (used to other programming langauges) also get confused by the syntax of application (or lack there of)
2022-04-24 07:38:42	EvanR	too
2022-04-24 07:39:09	EvanR	f @ x may help them xD
2022-04-24 07:39:24	←	maerwald has quit (Changing host)
2022-04-24 07:39:24	→	maerwald has joined #haskell
2022-04-24 07:40:19	jackdk	I was referring to EvanR's comment about explicitness being a slippery slope
2022-04-24 07:41:00	←	sammelweis_ has quit (Ping timeout: 240 seconds)
2022-04-24 07:45:54	←	jao has quit (Remote host closed the connection)
2022-04-24 07:53:52	←	waleee has quit (Ping timeout: 248 seconds)
2022-04-24 07:58:45	←	zebrag has quit (Quit: Konversation terminated!)
2022-04-24 08:01:24	←	mvk has quit (Ping timeout: 260 seconds)
2022-04-24 08:03:18	monochrom	On the other side of the debate, there are proponents of "#2 - #1" to mean (\x y -> y - x).  There are even proponents of "# - #" at which point everyone goes bananas.
2022-04-24 08:09:51	EvanR	@pl (\x y -> y - x)
2022-04-24 08:09:51	lambdabot	subtract
2022-04-24 08:10:05	←	td_ has quit (Ping timeout: 272 seconds)
2022-04-24 08:10:11	EvanR	even less letters than #2 - #1 xD
2022-04-24 08:10:48	EvanR	ok, less letters than "#2 - #1 xD"
2022-04-24 08:11:27	→	td_ has joined #haskell
2022-04-24 08:17:16	←	terrorjack has quit (Quit: The Lounge - https://thelounge.chat)
2022-04-24 08:18:31	→	terrorjack has joined #haskell
2022-04-24 08:20:26	←	abhixec has quit (Remote host closed the connection)
2022-04-24 08:23:46	←	dostoevsky has quit (Read error: Connection reset by peer)
2022-04-24 08:24:12	→	dostoevsky has joined #haskell
2022-04-24 08:34:20	←	roconnor has quit (Quit: Konversation terminated!)
2022-04-24 08:44:14	→	[itchyjunk] has joined #haskell
2022-04-24 08:45:57	←	abastro has quit (Ping timeout: 276 seconds)
2022-04-24 08:47:49	←	[_] has quit (Ping timeout: 250 seconds)
2022-04-24 08:52:05	←	ccntrq has quit (Remote host closed the connection)
2022-04-24 08:52:07	←	xff0x_ has quit (Read error: Connection reset by peer)
2022-04-24 08:56:07	←	wroathe has quit (Ping timeout: 256 seconds)
2022-04-24 09:04:09	←	stefan-_ has quit (Ping timeout: 276 seconds)
2022-04-24 09:04:57	ℹ	irc: disconnected from server
2022-04-24 09:06:07	→	oxide has joined #haskell
2022-04-24 09:06:07	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-24 09:06:07	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-24 09:06:07	ℹ	Channel #haskell: 693 nicks (1 op, 0 voices, 692 normals)
2022-04-24 09:06:07	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-24 09:06:07	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-24 09:06:10	→	bontaq has joined #haskell
2022-04-24 09:07:49	←	kimjetwav has quit (Read error: Connection reset by peer)
2022-04-24 09:08:12	→	stefan-_ has joined #haskell
2022-04-24 09:12:35	→	kimjetwav has joined #haskell
2022-04-24 09:19:39	←	raehik has quit (Ping timeout: 240 seconds)
2022-04-24 09:21:44	←	cosimone has quit (Remote host closed the connection)
2022-04-24 09:21:48	→	cdman has joined #haskell
2022-04-24 09:23:23	←	kimjetwav has quit (Remote host closed the connection)
2022-04-24 09:23:51	→	kimjetwav has joined #haskell
2022-04-24 09:24:16	→	deadmarshal_ has joined #haskell
2022-04-24 09:24:38	→	cosimone has joined #haskell
2022-04-24 09:47:10	→	Sgeo has joined #haskell
2022-04-24 09:56:54	→	Sgeo_ has joined #haskell
2022-04-24 10:01:26	←	slack1256 has quit (Remote host closed the connection)
2022-04-24 10:01:33	←	Sgeo has quit (Ping timeout: 272 seconds)
2022-04-24 10:02:16	→	mbuf has joined #haskell
2022-04-24 10:04:39	←	[itchyjunk] has quit (Remote host closed the connection)
2022-04-24 10:13:37	←	zaquest has quit (Remote host closed the connection)
2022-04-24 10:19:35	→	kaph__ has joined #haskell
2022-04-24 10:21:59	←	kaph_ has quit (Ping timeout: 246 seconds)
2022-04-24 10:23:25	→	zaquest has joined #haskell
2022-04-24 10:27:01	→	coot has joined #haskell
2022-04-24 10:29:06	→	tromp has joined #haskell
2022-04-24 10:29:45	←	tromp has quit (Client Quit)
2022-04-24 10:31:20	←	rekahsoft has quit (Ping timeout: 256 seconds)
2022-04-24 10:38:43	→	sevvie has joined #haskell
2022-04-24 10:40:12	←	sevvie has quit (Client Quit)
2022-04-24 10:41:38	jackdk	Let's rename the channel to #h then
2022-04-24 10:55:12	←	notzmv has quit (Ping timeout: 248 seconds)
2022-04-24 10:57:38	←	cosimone has quit (Remote host closed the connection)
2022-04-24 10:58:28	→	cosimone has joined #haskell
2022-04-24 10:58:33	←	deadmarshal_ has quit (Ping timeout: 276 seconds)
2022-04-24 11:04:53	←	napping has quit (Ping timeout: 272 seconds)
2022-04-24 11:05:51	→	zmv has joined #haskell
2022-04-24 11:06:05	→	napping has joined #haskell
2022-04-24 11:06:06	←	zmv has quit (Changing host)
2022-04-24 11:06:06	→	zmv has joined #haskell
2022-04-24 11:07:39	←	kimjetwav has quit (Read error: Connection reset by peer)
2022-04-24 11:07:53	ℹ	zmv is now known as notzmv
2022-04-24 11:10:00	→	Pickchea has joined #haskell
2022-04-24 11:10:58	→	Core4993 has joined #haskell
2022-04-24 11:11:36	→	takuan has joined #haskell
2022-04-24 11:13:19	←	bontaq has quit (Ping timeout: 240 seconds)
2022-04-24 11:27:55	←	harveypwca has quit (Quit: Leaving)
2022-04-24 11:29:06	→	kimjetwav has joined #haskell
2022-04-24 11:31:46	jonathanx	I have two values :: Lens' (Matrix a) (Vector a)
2022-04-24 11:32:10	jonathanx	I want to combine them, by mappending the output vector
2022-04-24 11:32:46	jonathanx	I assumed I could do (lens1 <> lens2) :: Lens' (Matrix a) (Vector a)
2022-04-24 11:33:07	jonathanx	But it complains about not being able to deduce semigroup
2022-04-24 11:38:05	←	kaph__ has quit (Read error: Connection reset by peer)
2022-04-24 11:38:06	→	sammelweis has joined #haskell
2022-04-24 11:42:32	←	img has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-24 11:42:50	→	img has joined #haskell
2022-04-24 11:46:20	←	jargon has quit (Remote host closed the connection)
2022-04-24 11:49:10	→	acidjnk_new has joined #haskell
2022-04-24 11:51:10	jonathanx	(context: I want to have a lens into two of the columns of the matrix, combined into a vector, for read/write access into the column pair)
2022-04-24 11:56:02	←	Pickchea has quit (Quit: Leaving)
2022-04-24 12:05:41	→	kenran has joined #haskell
2022-04-24 12:07:24	←	kimjetwav has quit (Read error: Connection reset by peer)
2022-04-24 12:09:22	→	kimjetwav has joined #haskell
2022-04-24 12:11:45	←	kenran has quit (Quit: WeeChat info:version)
2022-04-24 12:16:06	abastro[m]	Note that this operation is unlawful
2022-04-24 12:16:28	→	abhixec has joined #haskell
2022-04-24 12:16:34	abastro[m]	Since it violates lens laws when the two columns are the same parts
2022-04-24 12:18:33	←	monochrom has quit (Quit: NO CARRIER)
2022-04-24 12:20:20	→	tromp has joined #haskell
2022-04-24 12:22:01	jonathanx	are the same parts?
2022-04-24 12:22:25	abastro[m]	Same columns
2022-04-24 12:22:37	→	deadmarshal_ has joined #haskell
2022-04-24 12:22:47	→	monochrom has joined #haskell
2022-04-24 12:23:08	abastro[m]	It is problematic when the two columns are the same columns of the matrix
2022-04-24 12:23:16	jonathanx	okay, but if I combine two different columns then there should not be a problem right?
2022-04-24 12:23:25	abastro[m]	Because you cannot distinguish which one you set
2022-04-24 12:23:27	abastro[m]	Indeed.
2022-04-24 12:23:49	abastro[m]	So, there is relevant lens combinator in Unsound module
2022-04-24 12:23:56	abastro[m]	Let me recall the full name..
2022-04-24 12:24:42	abastro[m]	Control.Lens.Unsound
2022-04-24 12:25:25	abastro[m]	You can work with `lensProduct` then combine 2 into one vector using Iso I guess
2022-04-24 12:29:03	jonathanx	I'll look into it, thanks :)
2022-04-24 12:33:27	←	razetime has quit (Ping timeout: 276 seconds)
2022-04-24 12:37:51	→	Kevin578 has joined #haskell
2022-04-24 12:48:24	←	jmdaemon has quit (Ping timeout: 260 seconds)
2022-04-24 12:53:59	←	joo-_ has quit (Ping timeout: 240 seconds)
2022-04-24 12:56:03	→	joo-_ has joined #haskell
2022-04-24 12:56:03	←	joo-_ has quit (Changing host)
2022-04-24 12:56:03	→	joo-_ has joined #haskell
2022-04-24 12:57:18	→	jinsun__ has joined #haskell
2022-04-24 12:58:19	←	jinsun has quit (Ping timeout: 240 seconds)
2022-04-24 13:03:13	←	abhixec has quit (Remote host closed the connection)
2022-04-24 13:05:58	jonathanx	Thank you, it worked out quite nicely!
2022-04-24 13:07:31	→	razetime has joined #haskell
2022-04-24 13:08:23	→	gehmehgeh has joined #haskell
2022-04-24 13:09:45	abastro[m]	Good! =D
2022-04-24 13:10:45	→	odnes has joined #haskell
2022-04-24 13:17:19	←	shriekingnoise has quit (Quit: Quit)
2022-04-24 13:20:40	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-24 13:20:52	→	Vajb has joined #haskell
2022-04-24 13:41:42	←	Kevin578 has quit (Ping timeout: 276 seconds)
2022-04-24 13:41:44	→	Kevin578_ has joined #haskell
2022-04-24 13:42:11	→	[itchyjunk] has joined #haskell
2022-04-24 13:42:35	←	deadmarshal_ has quit (Ping timeout: 272 seconds)
2022-04-24 13:45:00	←	chenqisu1 has quit (Quit: Leaving)
2022-04-24 13:48:08	→	deadmarshal_ has joined #haskell
2022-04-24 13:48:51	←	coot has quit (Quit: coot)
2022-04-24 13:51:12	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-24 13:51:41	←	geekosaur has quit (Remote host closed the connection)
2022-04-24 13:52:15	→	titibandit has joined #haskell
2022-04-24 13:52:46	→	Vajb has joined #haskell
2022-04-24 13:53:01	→	coot has joined #haskell
2022-04-24 13:53:20	←	cosimone has quit (Remote host closed the connection)
2022-04-24 13:54:00	→	cosimone has joined #haskell
2022-04-24 14:02:51	←	coot has quit (Ping timeout: 272 seconds)
2022-04-24 14:06:37	←	pavonia has quit (Read error: Connection reset by peer)
2022-04-24 14:07:02	→	pavonia has joined #haskell
2022-04-24 14:08:26	→	geekosaur has joined #haskell
2022-04-24 14:08:38	←	titusg has quit (Remote host closed the connection)
2022-04-24 14:10:19	←	Kevin578_ has quit (Ping timeout: 240 seconds)
2022-04-24 14:10:32	→	Kevin578 has joined #haskell
2022-04-24 14:10:35	→	vorpuni has joined #haskell
2022-04-24 14:13:37	←	jinsun__ has quit (Ping timeout: 272 seconds)
2022-04-24 14:13:38	→	jinsun has joined #haskell
2022-04-24 14:13:48	←	vysn has quit (Ping timeout: 240 seconds)
2022-04-24 14:19:50	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-24 14:19:59	→	Vajb has joined #haskell
2022-04-24 14:21:30	→	tzh_ has joined #haskell
2022-04-24 14:21:42	←	tzh has quit (Remote host closed the connection)
2022-04-24 14:27:10	←	eggplantade has quit (Remote host closed the connection)
2022-04-24 14:30:08	←	kevin[m] has quit (Quit: You have been kicked for being idle)
2022-04-24 14:30:09	←	cdsmith has quit (Quit: You have been kicked for being idle)
2022-04-24 14:34:52	→	dextaa4 has joined #haskell
2022-04-24 14:40:51	←	Kevin578 has quit (Ping timeout: 272 seconds)
2022-04-24 14:44:59	←	acidjnk_new has quit (Ping timeout: 240 seconds)
2022-04-24 14:46:56	→	odnes_ has joined #haskell
2022-04-24 14:46:57	←	odnes has quit (Read error: Connection reset by peer)
2022-04-24 14:48:25	[exa]	Is there any good tutorial/reading material that would support stuff implemented in recursion-schemes-ix ?
2022-04-24 14:48:38	[exa]	("recursion schemes over indexed functors")
2022-04-24 14:49:08	[exa]	looks valid for one of my usecases but I can't decide if there's an overlap, guessing a bit of extra reading material might help
2022-04-24 14:50:58	←	tzh_ has quit (Quit: zzz)
2022-04-24 14:57:47	←	odnes_ has quit (Ping timeout: 246 seconds)
2022-04-24 14:57:50	←	Core4993 has quit (Remote host closed the connection)
2022-04-24 15:00:20	→	fr33domlover has joined #haskell
2022-04-24 15:02:46	→	odnes has joined #haskell
2022-04-24 15:06:24	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-24 15:06:59	←	odnes has quit (Ping timeout: 240 seconds)
2022-04-24 15:09:57	←	Sgeo_ has quit (Read error: Connection reset by peer)
2022-04-24 15:15:03	→	Kevin578 has joined #haskell
2022-04-24 15:16:56	→	_ht has joined #haskell
2022-04-24 15:18:33	←	mstksg has quit (Ping timeout: 276 seconds)
2022-04-24 15:19:30	←	anomal has quit (Remote host closed the connection)
2022-04-24 15:19:54	→	mstksg has joined #haskell
2022-04-24 15:21:51	→	tromp has joined #haskell
2022-04-24 15:23:20	→	acidjnk has joined #haskell
2022-04-24 15:23:41	→	abastro has joined #haskell
2022-04-24 15:23:58	→	gurkenglas has joined #haskell
2022-04-24 15:30:14	ℹ	irc: disconnected from server
2022-04-24 15:30:45	→	oxide has joined #haskell
2022-04-24 15:30:45	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-24 15:30:45	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-24 15:30:45	ℹ	Channel #haskell: 694 nicks (1 op, 0 voices, 693 normals)
2022-04-24 15:30:47	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-24 15:30:47	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-24 15:32:47	←	eggplantade has quit (Ping timeout: 256 seconds)
2022-04-24 15:32:55	→	CiaoSen has joined #haskell
2022-04-24 15:35:01	→	razetime_ has joined #haskell
2022-04-24 15:35:08	←	razetime_ has quit (Client Quit)
2022-04-24 15:38:19	→	xff0x_ has joined #haskell
2022-04-24 15:41:12	→	shiraeeshi has joined #haskell
2022-04-24 15:48:48	→	kaph has joined #haskell
2022-04-24 15:53:10	→	Core4993 has joined #haskell
2022-04-24 15:56:22	→	vysn has joined #haskell
2022-04-24 15:58:40	←	acidjnk has quit (Ping timeout: 248 seconds)
2022-04-24 15:59:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-24 16:01:00	←	econo has quit (Quit: Connection closed for inactivity)
2022-04-24 16:03:51	→	littlebobeep has joined #haskell
2022-04-24 16:09:15	←	Lord_of_Life has quit (Ping timeout: 276 seconds)
2022-04-24 16:09:42	→	Lord_of_Life has joined #haskell
2022-04-24 16:11:28	←	Core4993 has quit (Read error: Connection reset by peer)
2022-04-24 16:11:32	→	dcoutts_ has joined #haskell
2022-04-24 16:11:43	→	Core4993 has joined #haskell
2022-04-24 16:14:37	←	jonathanx has quit (Remote host closed the connection)
2022-04-24 16:14:40	←	sprout has quit (Ping timeout: 248 seconds)
2022-04-24 16:17:35	←	titibandit has quit (Ping timeout: 246 seconds)
2022-04-24 16:23:01	←	kaph has quit (Read error: Connection reset by peer)
2022-04-24 16:24:06	→	jonathanx has joined #haskell
2022-04-24 16:25:07	→	jargon has joined #haskell
2022-04-24 16:30:47	←	wolfshappen has quit (Quit: later)
2022-04-24 16:32:33	←	gpncarl has quit (Quit: WeeChat 3.4.1)
2022-04-24 16:32:46	→	gpncarl has joined #haskell
2022-04-24 16:32:59	←	abastro has quit (Remote host closed the connection)
2022-04-24 16:33:16	tomsmeding	abastro[m]: https://play-haskell.tomsmeding.com/play now has dark mode
2022-04-24 16:33:46	geekosaur	yay
2022-04-24 16:34:29	tomsmeding	though the code syntax highlighting is still javascript lol
2022-04-24 16:37:11	→	sprout has joined #haskell
2022-04-24 16:41:22	→	Unicorn_Princess has joined #haskell
2022-04-24 16:41:47	←	xkuru has quit (Read error: Connection reset by peer)
2022-04-24 16:42:39	←	fr33domlover has quit (Ping timeout: 240 seconds)
2022-04-24 16:43:25	→	fr33domlover has joined #haskell
2022-04-24 16:43:29	→	abastro has joined #haskell
2022-04-24 16:45:20	←	acarrico1 has quit (Ping timeout: 250 seconds)
2022-04-24 16:45:49	→	pretty_dumm_guy has joined #haskell
2022-04-24 16:48:06	→	fr33domlover_ has joined #haskell
2022-04-24 16:48:09	←	fr33domlover has quit (Ping timeout: 272 seconds)
2022-04-24 16:48:23	→	__monty__ has joined #haskell
2022-04-24 16:50:14	←	xff0x_ has quit (Read error: Connection reset by peer)
2022-04-24 16:53:52	→	acidjnk has joined #haskell
2022-04-24 16:55:36	→	xff0x_ has joined #haskell
2022-04-24 16:56:13	→	zincy has joined #haskell
2022-04-24 16:59:00	→	nehsou^ has joined #haskell
2022-04-24 16:59:16	←	abastro has quit (Remote host closed the connection)
2022-04-24 16:59:25	←	Unicorn_Princess has quit (Quit: Leaving)
2022-04-24 17:01:45	←	Kevin578 has quit (Ping timeout: 256 seconds)
2022-04-24 17:02:38	→	crazazy has joined #haskell
2022-04-24 17:05:27	→	phma_ has joined #haskell
2022-04-24 17:06:17	→	abastro has joined #haskell
2022-04-24 17:06:51	←	phma has quit (Read error: Connection reset by peer)
2022-04-24 17:09:02	←	jakalx has left #haskell
2022-04-24 17:10:42	→	jakalx has joined #haskell
2022-04-24 17:14:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-24 17:15:35	→	jerry99 has joined #haskell
2022-04-24 17:18:09	←	nehsou^ has quit (Remote host closed the connection)
2022-04-24 17:23:08	←	abastro has quit (Remote host closed the connection)
2022-04-24 17:24:42	→	abastro has joined #haskell
2022-04-24 17:26:33	→	raehik has joined #haskell
2022-04-24 17:28:11	→	littlebobeep has joined #haskell
2022-04-24 17:30:23	←	shiraeeshi has quit (Ping timeout: 246 seconds)
2022-04-24 17:30:48	←	jargon has quit (Remote host closed the connection)
2022-04-24 17:31:44	←	abastro has quit (Remote host closed the connection)
2022-04-24 17:31:44	→	jargon has joined #haskell
2022-04-24 17:32:55	←	razetime has quit (Ping timeout: 256 seconds)
2022-04-24 17:37:41	→	MajorBiscuit has joined #haskell
2022-04-24 17:40:28	←	califax has quit (Remote host closed the connection)
2022-04-24 17:40:48	→	califax has joined #haskell
2022-04-24 17:42:13	→	zebrag has joined #haskell
2022-04-24 17:42:55	←	jargon has quit (Remote host closed the connection)
2022-04-24 17:44:19	←	sander has quit (Ping timeout: 240 seconds)
2022-04-24 17:45:12	→	sander has joined #haskell
2022-04-24 17:56:02	→	abastro has joined #haskell
2022-04-24 17:56:44	←	abastro has quit (Remote host closed the connection)
2022-04-24 17:58:35	→	bitdex has joined #haskell
2022-04-24 17:59:15	→	machinedgod has joined #haskell
2022-04-24 17:59:24	←	califax has quit (Remote host closed the connection)
2022-04-24 17:59:39	→	califax has joined #haskell
2022-04-24 18:00:21	←	raehik has quit (Ping timeout: 272 seconds)
2022-04-24 18:00:41	←	caubert has quit (Ping timeout: 256 seconds)
2022-04-24 18:00:50	→	razetime has joined #haskell
2022-04-24 18:00:59	→	mikoto-chan has joined #haskell
2022-04-24 18:01:39	←	acidjnk has quit (Ping timeout: 240 seconds)
2022-04-24 18:01:54	→	caubert has joined #haskell
2022-04-24 18:02:00	→	raehik has joined #haskell
2022-04-24 18:08:00	→	abastro has joined #haskell
2022-04-24 18:08:00	→	pera has joined #haskell
2022-04-24 18:08:55	←	abastro has quit (Remote host closed the connection)
2022-04-24 18:10:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-24 18:14:30	→	littlebobeep has joined #haskell
2022-04-24 18:16:51	→	abastro has joined #haskell
2022-04-24 18:18:37	→	dextaa42 has joined #haskell
2022-04-24 18:20:10	→	o-90 has joined #haskell
2022-04-24 18:20:39	←	dextaa4 has quit (Ping timeout: 240 seconds)
2022-04-24 18:20:39	ℹ	dextaa42 is now known as dextaa4
2022-04-24 18:25:16	←	abastro has quit (Remote host closed the connection)
2022-04-24 18:25:52	←	vysn has quit (Ping timeout: 248 seconds)
2022-04-24 18:29:29	←	dextaa4 has quit (Ping timeout: 272 seconds)
2022-04-24 18:30:45	→	eggplantade has joined #haskell
2022-04-24 18:31:35	→	abastro has joined #haskell
2022-04-24 18:31:59	←	jinsun has quit (Ping timeout: 240 seconds)
2022-04-24 18:35:15	←	eggplantade has quit (Ping timeout: 256 seconds)
2022-04-24 18:37:04	→	dextaa4 has joined #haskell
2022-04-24 18:39:04	←	o-90 has quit (Ping timeout: 240 seconds)
2022-04-24 18:39:40	←	bitdex has quit (Quit: = "")
2022-04-24 18:40:26	←	abastro has quit (Remote host closed the connection)
2022-04-24 18:40:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-24 18:43:02	←	jerry99 has quit (Quit: CGI:IRC (Ping timeout))
2022-04-24 18:43:20	←	dextaa4 has quit (Remote host closed the connection)
2022-04-24 18:44:41	→	dextaa4 has joined #haskell
2022-04-24 18:44:50	←	dextaa4 has quit (Remote host closed the connection)
2022-04-24 18:45:48	→	dextaa4 has joined #haskell
2022-04-24 18:48:00	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-24 18:51:27	←	[itchyjunk] has quit (Remote host closed the connection)
2022-04-24 18:54:28	←	Core4993 has quit (Read error: Connection reset by peer)
2022-04-24 18:54:47	→	Core4993 has joined #haskell
2022-04-24 18:54:58	←	Core4993 has quit (Read error: Connection reset by peer)
2022-04-24 18:55:12	→	Core4993 has joined #haskell
2022-04-24 18:56:19	←	Core4993 has quit (Read error: Connection reset by peer)
2022-04-24 19:08:09	→	Pickchea has joined #haskell
2022-04-24 19:12:11	←	pera has quit (Quit: leaving)
2022-04-24 19:22:21	→	wolfshappen has joined #haskell
2022-04-24 19:24:00	←	CiaoSen has quit (Ping timeout: 248 seconds)
2022-04-24 19:36:23	→	coot has joined #haskell
2022-04-24 19:37:20	→	Kevin578 has joined #haskell
2022-04-24 19:42:57	←	Kevin578 has quit (Ping timeout: 272 seconds)
2022-04-24 19:43:55	→	andrey has joined #haskell
2022-04-24 19:45:36	←	andrey_ has quit (Ping timeout: 260 seconds)
2022-04-24 19:47:58	→	vysn has joined #haskell
2022-04-24 19:49:25	→	tromp has joined #haskell
2022-04-24 19:50:34	→	wroathe has joined #haskell
2022-04-24 19:50:34	←	wroathe has quit (Changing host)
2022-04-24 19:50:34	→	wroathe has joined #haskell
2022-04-24 20:03:13	←	troydm has quit (Ping timeout: 272 seconds)
2022-04-24 20:04:30	abastro[m]	tomsmeding: Cheers!!!
2022-04-24 20:04:46	←	coot has quit (Quit: coot)
2022-04-24 20:05:29	→	Core4993 has joined #haskell
2022-04-24 20:06:41	→	coot has joined #haskell
2022-04-24 20:06:47	→	troydm has joined #haskell
2022-04-24 20:06:48	←	Core4993 has quit (Client Quit)
2022-04-24 20:07:50	→	Dslyexic has joined #haskell
2022-04-24 20:09:04	←	gehmehgeh has quit (Ping timeout: 240 seconds)
2022-04-24 20:10:26	→	gehmehgeh has joined #haskell
2022-04-24 20:11:04	→	odnes has joined #haskell
2022-04-24 20:13:51	ℹ	phma_ is now known as phma
2022-04-24 20:15:13	←	vorpuni has quit (Quit: bye)
2022-04-24 20:15:31	→	mvk has joined #haskell
2022-04-24 20:17:32	→	vorpuni has joined #haskell
2022-04-24 20:17:49	←	mjs2600 has quit (Read error: Connection reset by peer)
2022-04-24 20:18:11	→	mjs2600 has joined #haskell
2022-04-24 20:22:55	←	pooryorick has quit (Ping timeout: 256 seconds)
2022-04-24 20:28:17	←	Dslyexic has quit (Remote host closed the connection)
2022-04-24 20:28:22	←	haveo has quit (Remote host closed the connection)
2022-04-24 20:30:30	→	haveo has joined #haskell
2022-04-24 20:35:27	←	haveo has quit (Remote host closed the connection)
2022-04-24 20:39:42	→	pooryorick has joined #haskell
2022-04-24 20:39:52	←	frost has quit (Ping timeout: 252 seconds)
2022-04-24 20:40:30	←	vicfred has quit (Quit: Leaving)
2022-04-24 20:42:11	←	pretty_dumm_guy has quit (Ping timeout: 256 seconds)
2022-04-24 20:45:10	←	mjs2600 has quit (Read error: Connection reset by peer)
2022-04-24 20:45:40	←	odnes has quit (Read error: Connection reset by peer)
2022-04-24 20:45:46	→	mjs2600 has joined #haskell
2022-04-24 20:45:52	→	odnes has joined #haskell
2022-04-24 20:45:58	←	kmein has quit (Quit: ciao kakao)
2022-04-24 20:46:34	→	kmein has joined #haskell
2022-04-24 20:48:33	←	razetime has quit (Remote host closed the connection)
2022-04-24 20:51:00	→	geranim0 has joined #haskell
2022-04-24 20:53:29	zebrag	How do I setup `stack` system wide resolver? I do have a `~/.stack/global-project/stack.yaml` file, but should I edit it by hand?
2022-04-24 20:54:16	zebrag	I'm just trying to upgrade pandoc, which is stuck to a very old version
2022-04-24 20:55:34	←	dextaa4 has quit (Remote host closed the connection)
2022-04-24 20:56:09	napping	I don't know how to do that, but if you just want to build a newer pandoc cabal install should work
2022-04-24 20:57:49	zebrag	yeah, it's just I digged out some stack command for pandoc from my bash history, so I want to reuse it. I'll edit the stack.yaml file by hand
2022-04-24 21:00:15	napping	Ah, if you did install with stack in the first place that sounds good. I was trying to get ghc-core the other day and found it wasn't even in any stackage revisions
2022-04-24 21:00:19	→	jmdaemon has joined #haskell
2022-04-24 21:03:04	←	FinnElija has quit (Ping timeout: 240 seconds)
2022-04-24 21:03:19	←	troydm has quit (Ping timeout: 240 seconds)
2022-04-24 21:03:42	→	troydm has joined #haskell
2022-04-24 21:03:54	→	FinnElija has joined #haskell
2022-04-24 21:04:20	→	neurocyte8614492 has joined #haskell
2022-04-24 21:04:20	←	neurocyte8614492 has quit (Changing host)
2022-04-24 21:04:20	→	neurocyte8614492 has joined #haskell
2022-04-24 21:05:36	zebrag	Initially I just wanted to "build" some pdf documentation file. The whole process already has installed GB of dependencies, and worked my cpu to its limits for an almost an hour
2022-04-24 21:05:51	tomsmeding	pandoc is not the lightest binary :p
2022-04-24 21:05:59	tomsmeding	s/binary/library/
2022-04-24 21:06:02	napping	Did that pull in TeX too?
2022-04-24 21:06:24	tomsmeding	there may be a pandoc in your system package manager too, just in case
2022-04-24 21:06:41	zebrag	I think I already had tex, otherwise it'd been endless
2022-04-24 21:06:56	zebrag	it's not all done yet
2022-04-24 21:06:57	←	wroathe has quit (Ping timeout: 276 seconds)
2022-04-24 21:07:17	napping	Ah, being able to reuse more compiled packages is nice part of stack
2022-04-24 21:07:45	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-24 21:08:08	←	geekosaur has quit (Remote host closed the connection)
2022-04-24 21:08:12	zebrag	I need a bigger computer
2022-04-24 21:09:07	tomsmeding	zebrag: https://tomsmeding.com/ss/get/tomsmeding/bv3cAL
2022-04-24 21:10:28	zebrag	yeah, I'm sure I could have pulled it out of debian packages, but I've got standards
2022-04-24 21:10:47	→	geekosaur has joined #haskell
2022-04-24 21:11:14	→	bontaq has joined #haskell
2022-04-24 21:11:36	→	eggplantade has joined #haskell
2022-04-24 21:12:14	←	mikoto-chan has quit (Quit: mikoto-chan)
2022-04-24 21:12:16	zebrag	what is that tool you are using, it's rater cute
2022-04-24 21:13:06	tomsmeding	htop
2022-04-24 21:13:17	tomsmeding	(this is a university machine, don't have that at home lol)
2022-04-24 21:15:08	→	boxscape_ has joined #haskell
2022-04-24 21:20:33	←	coot has quit (Quit: coot)
2022-04-24 21:23:23	boxscape_	% ()
2022-04-24 21:23:27	boxscape_	hm what happened to yahb?
2022-04-24 21:23:42	tomsmeding	rip yahb
2022-04-24 21:23:57	tomsmeding	play-haskell.tomsmeding.com needs ghci functionality
2022-04-24 21:24:13	boxscape_	that does sound like it would be neat
2022-04-24 21:24:22	tomsmeding	stretch goal though :p
2022-04-24 21:24:34	boxscape_	understandable
2022-04-24 21:25:52	→	wootehfoot has joined #haskell
2022-04-24 21:26:39	→	dextaa4 has joined #haskell
2022-04-24 21:29:02	→	mikoto-chan has joined #haskell
2022-04-24 21:30:10	←	ac has quit (Quit: You have been kicked for being idle)
2022-04-24 21:33:55	geekosaur	mm, mniip isn't around either
2022-04-24 21:34:18	→	jao has joined #haskell
2022-04-24 21:35:29	→	haveo has joined #haskell
2022-04-24 21:38:17	←	xff0x_ has quit (Ping timeout: 256 seconds)
2022-04-24 21:41:39	→	[itchyjunk] has joined #haskell
2022-04-24 21:44:21	←	vysn has quit (Ping timeout: 250 seconds)
2022-04-24 21:54:41	←	neurocyte8614492 has quit (Ping timeout: 272 seconds)
2022-04-24 21:57:20	→	tromp has joined #haskell
2022-04-24 22:00:21	→	shriekingnoise has joined #haskell
2022-04-24 22:02:14	←	pavonia has quit (Quit: Bye!)
2022-04-24 22:07:43	←	qy has quit (Remote host closed the connection)
2022-04-24 22:07:53	→	ix has joined #haskell
2022-04-24 22:09:15	←	mikoto-chan has quit (Ping timeout: 272 seconds)
2022-04-24 22:12:11	←	jakalx has left #haskell
2022-04-24 22:14:42	→	jinsun has joined #haskell
2022-04-24 22:14:52	←	mbuf has quit (Quit: Leaving)
2022-04-24 22:16:50	→	jakalx has joined #haskell
2022-04-24 22:17:46	←	eggplantade has quit (Remote host closed the connection)
2022-04-24 22:18:02	→	abhixec has joined #haskell
2022-04-24 22:22:04	←	cdman has quit (Quit: Leaving)
2022-04-24 22:28:14	←	dextaa4 has quit (Ping timeout: 246 seconds)
2022-04-24 22:34:42	→	titibandit has joined #haskell
2022-04-24 22:34:47	←	sprout has quit (Ping timeout: 240 seconds)
2022-04-24 22:35:20	→	hololeap has joined #haskell
2022-04-24 22:38:14	→	eggplantade has joined #haskell
2022-04-24 22:39:04	→	azimut_ has joined #haskell
2022-04-24 22:40:09	→	econo has joined #haskell
2022-04-24 22:41:34	←	azimut has quit (Ping timeout: 240 seconds)
2022-04-24 22:42:48	→	stackdroid18 has joined #haskell
2022-04-24 22:42:59	ℹ	fendor__ is now known as fendor
2022-04-24 22:44:01	←	boxscape_ has quit (Ping timeout: 256 seconds)
2022-04-24 22:44:44	→	boxscape_ has joined #haskell
2022-04-24 22:45:40	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-24 22:45:45	→	shiraeeshi has joined #haskell
2022-04-24 22:46:06	Andrew	Any ideas/packages to help create an async tcp server?
2022-04-24 22:46:56	→	tzh has joined #haskell
2022-04-24 22:49:23	ℹ	fr33domlover_ is now known as fr33domlover
2022-04-24 22:50:23	→	f-a has joined #haskell
2022-04-24 22:50:50	f-a	hello. windows question: I am invoking ghci (9.2.2) with ghci -with-rtsopts=--io-manager=native
2022-04-24 22:51:01	→	alp_ has joined #haskell
2022-04-24 22:51:06	f-a	but it still errors on
2022-04-24 22:51:06	f-a	ghci> putStrLn "→"
2022-04-24 22:51:07	f-a	*** Exception: <stdout>: hPutChar: invalid argument (invalid character)
2022-04-24 22:52:57	geekosaur	hm. should you be using -with-rtsopts or +RTS?
2022-04-24 22:53:30	→	sprout has joined #haskell
2022-04-24 22:53:32	f-a	geekosaur: how would I invoke ghc w/ +RTS?
2022-04-24 22:54:27	geekosaur	ghc understands +RTS. I'm not sureif the Windows wrapper for ghci will do the right thing with it though, might need to use ghc --interactive directly
2022-04-24 22:54:42	geekosaur	hrm, Phyx isn't in here
2022-04-24 22:55:00	geekosaur	I don't have Windows so I can't test it locally
2022-04-24 22:55:04	exarkun	Andrew: Which part are you stuck on?
2022-04-24 22:56:01	EvanR	Andrew, sounds obvious but... 'async' xD
2022-04-24 22:56:07	EvanR	(the library)
2022-04-24 22:56:09	→	o-90 has joined #haskell
2022-04-24 22:56:50	dsal	i.e., you don't make an async service a la libev or whatever.
2022-04-24 22:58:45	→	tromp has joined #haskell
2022-04-24 22:58:46	f-a	ghc --interactive -with-rtsopts=--io-manager=native   ← still errors, geekosaur , I will try to send my friend a cabal project and see if it works
2022-04-24 22:59:10	geekosaur	with that one you definitely want +RTS instead of -with-rtsopts
2022-04-24 22:59:24	geekosaur	-with-rtsopts applies to a program you compile with ghc, not to ghc itself
2022-04-24 22:59:45	f-a	ah I see
2022-04-24 23:01:00	geekosaur	it basically bakes in a +RTS to a program
2022-04-24 23:01:11	←	titibandit has quit (Ping timeout: 272 seconds)
2022-04-24 23:03:04	←	o-90 has quit (Ping timeout: 240 seconds)
2022-04-24 23:04:49	→	Sgeo has joined #haskell
2022-04-24 23:07:35	→	ccntrq has joined #haskell
2022-04-24 23:10:09	→	vicfred has joined #haskell
2022-04-24 23:11:48	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-24 23:14:17	Andrew	I see, thanks
2022-04-24 23:18:16	←	jakalx has left #haskell (Error from remote client)
2022-04-24 23:20:19	←	Pickchea has quit (Ping timeout: 240 seconds)
2022-04-24 23:21:03	←	zincy has quit (Remote host closed the connection)
2022-04-24 23:22:39	←	qhong has quit (Read error: Connection reset by peer)
2022-04-24 23:23:07	←	mstksg has quit (Ping timeout: 256 seconds)
2022-04-24 23:23:59	→	jakalx has joined #haskell
2022-04-24 23:25:16	→	mstksg has joined #haskell
2022-04-24 23:31:00	←	ix has quit (Remote host closed the connection)
2022-04-24 23:31:10	→	ix has joined #haskell
2022-04-24 23:33:19	←	deadmarshal_ has quit (Ping timeout: 240 seconds)
2022-04-24 23:44:17	zebrag	3GB later, hours of cpu, `aptitude install texlive-xetex`, I'm sure I'll have my pdf soon, if I don't run out of disk space before. I have to move tex/latex in user space, not enough room in "root" partition
2022-04-24 23:44:44	←	f-a has left #haskell
2022-04-24 23:45:02	dsal	If you use nixos, you can use tex without even intalling it!
2022-04-24 23:45:59	monochrom	What magic is that?  Can I also use GHC without installing it?
2022-04-24 23:46:39	→	mixfix41 has joined #haskell
2022-04-24 23:46:40	exarkun	just flexible definition of "install"
2022-04-24 23:46:42	zebrag	my nixos laptop is in the cupboard, not enough room on my desk to put it on
2022-04-24 23:47:05	→	bitdex has joined #haskell
2022-04-24 23:47:14	monochrom	Haha you run out of room on both your desktop and your desktop
2022-04-24 23:47:21	→	Unicorn_Princess has joined #haskell
2022-04-24 23:47:53	monochrom	Achievement unlock: Both logical and physical space exhaustion.
2022-04-24 23:47:55	→	pretty_dumm_guy has joined #haskell
2022-04-24 23:48:04	hpc	that's the nice thing about laptops
2022-04-24 23:48:05	exarkun	in this project I started w/ cabal, I am getting away with `data (HasThings t, HasContainment c) => BigWorld t c = BigWorld` but when I extract this while trying to produce a minimal example of something, bare `ghc ...` tells me it is illegal.  what's going on?
2022-04-24 23:48:10	hpc	but they're really hard to use with a standing desk :P
2022-04-24 23:49:24	sclv	missing some ghc extensions enabled in the extracted bit?
2022-04-24 23:49:45	geekosaur	ugh, don't use DatatypeContexts
2022-04-24 23:50:04	exarkun	sclv: I mean, I guess so, but I didn't turn DatatypeContexts on in my cabal file
2022-04-24 23:50:23	exarkun	ghc suggests I turn it on, then when I turn it on with a pragma, it tells me it is deprecated and I shouldnt use it :)
2022-04-24 23:50:27	geekosaur	Haskell98?
2022-04-24 23:50:45	exarkun	cabal file says `default-language: Haskell2010`
2022-04-24 23:50:58	exarkun	What does `ghc Some.hs` do?
2022-04-24 23:51:39	exarkun	I wonder (1) why cabal is giving me this extension (and w/o the deprecation warning) and (2) why DatatypeContexts is bad and (3) what I should do instead
2022-04-24 23:52:03	→	xkuru has joined #haskell
2022-04-24 23:52:15	geekosaur	DatatypeContexts is bad because it only does something during construction; you can't recover the conmtext with pattern matching
2022-04-24 23:52:42	geekosaur	whihc makes it close to useless (some would argue worse than useless; SPJ calls it "stupid theta")
2022-04-24 23:52:49	→	carl has joined #haskell
2022-04-24 23:53:53	←	carl has quit (Client Quit)
2022-04-24 23:54:22	geekosaur	you can get a working version with GADTs
2022-04-24 23:55:40	geekosaur	I can't answer (1)
2022-04-24 23:55:58	geekosaur	(or reproduce it, for that matter)
2022-04-24 23:57:48	→	zincy has joined #haskell
2022-04-24 23:58:43	→	waleee has joined #haskell
2022-04-24 23:59:40	→	justsomeguy has joined #haskell
2022-04-25 00:03:57	←	gawen has quit (Quit: cya)
2022-04-25 00:05:14	exarkun	refreshing my memory of GADTs now
2022-04-25 00:06:29	→	tzxun has joined #haskell
2022-04-25 00:08:20	tomsmeding	`data BigWorld t c where BigWorld :: (HasThings t, HasContainment c) => BigWorld t c`
2022-04-25 00:09:10	tomsmeding	the notation is nicely (and accurately, in fact) suggestive that the context becomes a field in the data type this way
2022-04-25 00:09:19	←	tzxun has left #haskell
2022-04-25 00:09:51	→	gawen has joined #haskell
2022-04-25 00:09:56	hpc	it also has some nice parallels with type class definitions
2022-04-25 00:10:12	→	tzxun has joined #haskell
2022-04-25 00:10:16	hpc	and it's (imo) a bit easier to learn than regular syntax
2022-04-25 00:10:43	tomsmeding	opinions differ on the latter point :)
2022-04-25 00:10:44	hpc	data Type type = Value Type | Value type | ...
2022-04-25 00:11:00	←	tzxun has quit (Quit: Leaving)
2022-04-25 00:11:33	→	tzxun has joined #haskell
2022-04-25 00:11:51	←	redb has quit (Ping timeout: 256 seconds)
2022-04-25 00:12:25	←	simeon has quit (Ping timeout: 256 seconds)
2022-04-25 00:13:02	←	tzxun has quit (Client Quit)
2022-04-25 00:18:18	→	coot has joined #haskell
2022-04-25 00:18:34	→	tzxun has joined #haskell
2022-04-25 00:21:02	←	tzxun has quit (Quit: tzxun)
2022-04-25 00:21:26	→	tzxun has joined #haskell
2022-04-25 00:21:34	→	tromp has joined #haskell
2022-04-25 00:21:40	←	fr33domlover has quit (Quit: fr33domlover)
2022-04-25 00:23:00	←	tzxun has quit (Client Quit)
2022-04-25 00:23:04	→	gensyst has joined #haskell
2022-04-25 00:23:14	→	redb has joined #haskell
2022-04-25 00:23:36	→	Kevin578 has joined #haskell
2022-04-25 00:23:54	→	simeon has joined #haskell
2022-04-25 00:25:26	gensyst	If this question makes any sense, look forward to answers: Creating a typeclass with data types as instances of that type class   VERSUS a bit more complex data type with type parameters and records where the "instances" are just new values of that data type (with each "instance creation function" simply having whatever parameters makes sense).
2022-04-25 00:25:50	gensyst	It seems it's sometimes not clear which design pattern to pick :S
2022-04-25 00:27:00	tomsmeding	one is open-world (advantage: anyone can add new instances; disadvantage: no exhaustive case analysis), the other is closed-world (advantage: you know for sure what the full list of cases is; disadvantage: not extensible without access to the declaration)
2022-04-25 00:27:57	←	redb has quit (Ping timeout: 272 seconds)
2022-04-25 00:28:00	gensyst	tomsmeding, how do you know this stuff lol :D
2022-04-25 00:28:08	gensyst	thanks!
2022-04-25 00:28:11	tomsmeding	¯\_(ツ)_/¯
2022-04-25 00:28:12	hpc	this is a fairly common question
2022-04-25 00:28:16	←	vicfred has quit (Quit: Leaving)
2022-04-25 00:28:22	tomsmeding	is this not also "the expression problem"
2022-04-25 00:28:39	tomsmeding	that the big brains of FP have been thinking about since the inception of FP
2022-04-25 00:28:51	hpc	usually you want the data type approach though
2022-04-25 00:28:54	hpc	for example, Handle
2022-04-25 00:28:58	→	anomal has joined #haskell
2022-04-25 00:29:08	tomsmeding	and every few years someone designs a construction where you can have both somehow, and somehow it's always less convenient in practice than one of the two
2022-04-25 00:29:09	hpc	it can be an open file, an open network connection, etc
2022-04-25 00:29:19	hpc	but they all have send, receive, and close
2022-04-25 00:29:23	tomsmeding	+1 if a data type works, probably a data type is nicest
2022-04-25 00:29:38	hpc	and you want to be able to mix and match, so they all have to be Handle if you want to make a [Handle]
2022-04-25 00:29:42	→	vicfred has joined #haskell
2022-04-25 00:30:38	→	redb has joined #haskell
2022-04-25 00:31:29	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-25 00:35:33	←	redb has quit (Ping timeout: 272 seconds)
2022-04-25 00:35:38	←	geekosaur has quit (Remote host closed the connection)
2022-04-25 00:36:33	←	ubert has quit (Quit: ubert)
2022-04-25 00:36:47	→	redb has joined #haskell
2022-04-25 00:37:38	gensyst	I still don't get when you should pick which :)
2022-04-25 00:37:45	gensyst	I guess it's a hard decision sometimes!
2022-04-25 00:38:58	←	mvk has quit (Ping timeout: 250 seconds)
2022-04-25 00:39:13	tomsmeding	gensyst: another important difference: with type classes, there's exactly one implementation per "constructor"
2022-04-25 00:39:25	tomsmeding	because you cannot have two different instances of the same class for the same type
2022-04-25 00:39:48	tomsmeding	in return for that restriction, you don't have to explicitly pass the objects around, it gets done implicitly using type class resolution
2022-04-25 00:40:03	EvanR	usually if it seems like both would work, but you feel that you should go with type class "because it's there", you probably should go with a data type xD
2022-04-25 00:40:05	←	justsomeguy has quit (Quit: WeeChat 3.4)
2022-04-25 00:41:08	EvanR	type classes work well when they take the place of some kind of mathematical thing that would have an annoying context passed around everywhere
2022-04-25 00:41:33	EvanR	that is invisible in actual math because of the power of clever notation
2022-04-25 00:48:44	gensyst	tomsmeding, aaaah. when you said "list of cases", you're probably talking about sum types. yet i didn't even have in mind sum types at all. i was talking about a single type with one value constructor. the function creating values of this type can have a bunch of parameters (for purposes of populating the records).
2022-04-25 00:48:58	gensyst	so in this case, there is no question of "knowing all cases" benefit.
2022-04-25 00:49:09	tomsmeding	ah, there would be only one instance anyway?
2022-04-25 00:49:33	tomsmeding	(yes, I was thinking about sum types :p)
2022-04-25 00:49:43	tomsmeding	If there would only be one case, this is exactly what record types are for
2022-04-25 00:49:48	tomsmeding	use a record type :p
2022-04-25 00:49:53	gensyst	sure at the type level, but in practice you can create a bunch of instances because the records can be FUNCTIONS
2022-04-25 00:50:04	gensyst	man... so much flexibility
2022-04-25 00:50:06	gensyst	no idea which to use
2022-04-25 00:50:13	tomsmeding	I'm not sure I follow there
2022-04-25 00:50:24	tomsmeding	a function is still a single value, right?
2022-04-25 00:50:36	tomsmeding	if you say "the records", do you mean "the record fields" or something else?
2022-04-25 00:50:39	→	tromp has joined #haskell
2022-04-25 00:50:42	gensyst	yes, record fields
2022-04-25 00:50:57	tomsmeding	data MyThing = MyThing { field1 :: a -> b, field2 :: Int 
2022-04-25 00:50:58	tomsmeding	}
2022-04-25 00:51:11	tomsmeding	what's wrong with functions in a record
2022-04-25 00:52:39	←	Kevin578 has quit (Ping timeout: 256 seconds)
2022-04-25 00:54:33	←	redb has quit (Ping timeout: 272 seconds)
2022-04-25 00:55:56	gensyst	Nothing, but the question is more when to pick
2022-04-25 00:55:56	gensyst	data Beast beast = Beast { initBeast :: IO (), echoBeast :: IO String } and later niceBeast :: Int Double Float String -> Beast   VERSUS
2022-04-25 00:55:56	gensyst	class Beast a where   and make a NiceBeast instance of Beast.
2022-04-25 00:56:25	gensyst	(with all those Int, Double, Float, String being records of NiceBeast)
2022-04-25 00:56:43	tomsmeding	s/records/record fields/?
2022-04-25 00:56:50	gensyst	yeah
2022-04-25 00:56:52	tomsmeding	the record is the entire thing :p
2022-04-25 00:57:12	hpc	do you need the type variable?
2022-04-25 00:57:44	gensyst	hpc, in that example nope, sorry about that
2022-04-25 00:57:49	tomsmeding	given the example, I feel like it makes no sense to go with a type class here, because there is not by definition only one possible value of Beast
2022-04-25 00:58:30	→	laolmtdea^ has joined #haskell
2022-04-25 00:58:42	tomsmeding	oh your point is that the different instantiations would be different instances, _NOW_ I get it lol
2022-04-25 00:59:17	hpc	i mean, once you are done with the type
2022-04-25 00:59:18	tomsmeding	yes for sure a record, not a type class
2022-04-25 00:59:22	→	Fischmiep has joined #haskell
2022-04-25 00:59:22	gensyst	and also that I could do badBeast :: Double -> Double -> Double -> Beast
2022-04-25 00:59:37	tomsmeding	because if you go with a type class, you will have to communicate to functions what instance you want them to use
2022-04-25 00:59:43	tomsmeding	hence you need some kind of tag type to put the instance on
2022-04-25 00:59:50	tomsmeding	so you're passing around a data value anyhow
2022-04-25 01:00:02	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-25 01:00:40	→	geekosaur has joined #haskell
2022-04-25 01:00:51	→	redb has joined #haskell
2022-04-25 01:01:06	Unhammer	https://i.imgur.com/hpTMCxF.png searched for haskell brick :D
2022-04-25 01:01:12	tomsmeding	if you want you can even use -XRecordWildCards so that you can write `f Beast{..} = ... {- can simply use 'echoBeast' here, which references the field from the parameter -}`
2022-04-25 01:01:41	tomsmeding	Unhammer: https://www.haskellfoundation.org/
2022-04-25 01:02:18	→	mikoto-chan has joined #haskell
2022-04-25 01:02:37	tomsmeding	gensyst: "and also that I could do badBeast :: Double -> Double ->Double -> 
2022-04-25 01:02:41	tomsmeding	oops
2022-04-25 01:02:57	←	mikoto-chan has quit (Client Quit)
2022-04-25 01:03:05	tomsmeding	but re that line: only with the data type version, with the type class version you'd need to make `data BadBeast = BadBeast; instance Beast BadBeast where ...`
2022-04-25 01:04:29	gensyst	well, data BadBeast = BadBeast { arm1 :: Double, arm2 :: Double, arm3 :: Double }; instance Beast BadBeast where
2022-04-25 01:04:39	gensyst	so in a way function parameters go into record fields
2022-04-25 01:04:41	gensyst	hmmmmmm
2022-04-25 01:04:44	tomsmeding	true
2022-04-25 01:04:57	tomsmeding	still, go with data type until you notice that it really doesn't work
2022-04-25 01:05:00	Rembane	Unhammer: That's a good find! :)
2022-04-25 01:05:10	tomsmeding	in most cases data types are nicer to work with
2022-04-25 01:05:17	tomsmeding	(if you have the choice)
2022-04-25 01:06:09	←	redb has quit (Ping timeout: 276 seconds)
2022-04-25 01:06:54	→	redb has joined #haskell
2022-04-25 01:07:45	gensyst	tomsmeding, it feels to me like "badBeast :: Double -> Double -> Double -> Beast" would be just thunks sitting there as opposed to " data BadBeast = BadBeast { arm1 :: Double, arm2 :: Double, arm3 :: Double }" which are full-fledged things in memory (not that this makes any huge difference)
2022-04-25 01:07:49	Unhammer	tomsmeding haha good one
2022-04-25 01:08:08	tomsmeding	gensyst: 0 difference in thunk behaviour
2022-04-25 01:08:29	←	gurkenglas has quit (Ping timeout: 272 seconds)
2022-04-25 01:08:47	tomsmeding	also the two things you're giving are not alternatives of each other?
2022-04-25 01:08:48	hpc	how about data Beast = Beast {..., bad :: Bool}
2022-04-25 01:08:54	Unhammer	The 4th Annual Haskell Foundation Golf Classic
2022-04-25 01:09:25	Unhammer	(was looking to compare brick with https://www.textualize.io/ )
2022-04-25 01:10:05	→	mikoto-chan has joined #haskell
2022-04-25 01:12:17	←	odnes has quit (Quit: Leaving)
2022-04-25 01:13:36	→	tromp has joined #haskell
2022-04-25 01:13:59	←	gabriel_sevecek has quit (Quit: WeeChat 3.5)
2022-04-25 01:14:41	→	gabriel_sevecek has joined #haskell
2022-04-25 01:14:59	←	redb has quit (Ping timeout: 240 seconds)
2022-04-25 01:15:19	←	machinedgod has quit (Ping timeout: 256 seconds)
2022-04-25 01:15:28	→	o-90 has joined #haskell
2022-04-25 01:16:25	→	pavonia has joined #haskell
2022-04-25 01:19:34	←	o-90 has quit (Ping timeout: 240 seconds)
2022-04-25 01:21:44	←	_ht has quit (Remote host closed the connection)
2022-04-25 01:23:05	→	acidjnk has joined #haskell
2022-04-25 01:24:40	→	mc47 has joined #haskell
2022-04-25 01:25:27	→	titibandit has joined #haskell
2022-04-25 01:25:51	→	redb has joined #haskell
2022-04-25 01:26:38	→	gurkenglas has joined #haskell
2022-04-25 01:26:39	←	jonathanx has quit (Ping timeout: 256 seconds)
2022-04-25 01:26:55	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-25 01:30:35	←	redb has quit (Ping timeout: 246 seconds)
2022-04-25 01:32:55	→	tromp has joined #haskell
2022-04-25 01:35:06	←	coot has quit (Quit: coot)
2022-04-25 01:35:19	→	acarrico1 has joined #haskell
2022-04-25 01:39:13	→	deadmarshal_ has joined #haskell
2022-04-25 01:39:58	→	jgeerds has joined #haskell
2022-04-25 01:42:14	→	Kevin578 has joined #haskell
2022-04-25 01:43:57	←	deadmarshal_ has quit (Ping timeout: 272 seconds)
2022-04-25 01:44:42	→	haskellberry has joined #haskell
2022-04-25 01:44:52	→	coot has joined #haskell
2022-04-25 01:45:20	←	laolmtdea^ has quit (Remote host closed the connection)
2022-04-25 01:47:07	←	Kevin578 has quit (Ping timeout: 272 seconds)
2022-04-25 01:48:19	←	wootehfoot has quit (Quit: Leaving)
2022-04-25 01:49:09	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-25 01:51:08	→	fendor_ has joined #haskell
2022-04-25 01:51:32	←	Fischmiep has quit (Quit: WeeChat 3.0)
2022-04-25 01:52:06	→	Fischmiep has joined #haskell
2022-04-25 01:52:51	shiraeeshi	I've installed haskell-language-server and I'm trying to use it with ircbrowse project to see if it works
2022-04-25 01:53:19	←	fendor has quit (Ping timeout: 240 seconds)
2022-04-25 01:53:27	←	boxscape_ has quit (Ping timeout: 272 seconds)
2022-04-25 01:53:44	shiraeeshi	when I run "haskell-language-server-wrapper" command from inside the project folder, it gives me the error
2022-04-25 01:54:01	→	redb has joined #haskell
2022-04-25 01:54:27	tomsmeding	shiraeeshi: what error
2022-04-25 01:54:50	shiraeeshi	the source of error is the command "cabal v2-exec ghc -v0 -- --numeric-version" (I shortened it a bit)
2022-04-25 01:55:03	shiraeeshi	cabal: Could not resolve dependencies:
2022-04-25 01:55:17	tomsmeding	full output in a paste perhaps?
2022-04-25 01:55:19	tomsmeding	@where paste
2022-04-25 01:55:19	lambdabot	Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
2022-04-25 01:55:31	tomsmeding	(because it works for me)
2022-04-25 01:55:52	→	wroathe has joined #haskell
2022-04-25 01:55:52	←	wroathe has quit (Changing host)
2022-04-25 01:55:52	→	wroathe has joined #haskell
2022-04-25 01:56:23	shiraeeshi	here is the output
2022-04-25 01:56:24	shiraeeshi	https://paste.tomsmeding.com/gae89eFT
2022-04-25 01:56:51	tomsmeding	ah
2022-04-25 01:56:55	tomsmeding	git submodule update --init --recursive
2022-04-25 01:57:50	shiraeeshi	tried it, the error persists
2022-04-25 01:58:06	tomsmeding	does a 'cabal build' work?
2022-04-25 01:58:07	geekosaur	base 4.9??
2022-04-25 01:58:09	shiraeeshi	perhaps it's caused by version mismatch?
2022-04-25 01:58:23	shiraeeshi	I'm running it with cabal-3.4
2022-04-25 01:58:24	tomsmeding	clogparse should be vendored in with a submodule, the hackage version is mega old
2022-04-25 01:58:31	←	redb has quit (Ping timeout: 272 seconds)
2022-04-25 01:58:48	tomsmeding	oh wait it's not even a submodule, it's just in the tree
2022-04-25 01:59:00	tomsmeding	is HLS not seeing the cabal.project or something
2022-04-25 01:59:04	geekosaur	[__1] rejecting: base-4.9.1.0/installed-4.9.1.0 (constraint from project config TODO requires ==4.14.3.0)
2022-04-25 01:59:26	←	gurkenglas has quit (Read error: Connection reset by peer)
2022-04-25 01:59:27	←	zincy has quit (Remote host closed the connection)
2022-04-25 01:59:28	tomsmeding	/upstream/clogparse/clogparse.cabal has an updated version
2022-04-25 01:59:34	tomsmeding	and /cabal.project refers to it
2022-04-25 02:00:55	→	gurkenglas has joined #haskell
2022-04-25 02:01:07	tomsmeding	OH
2022-04-25 02:01:11	geekosaur	as I read that, installed base version 4.9 which corresponds to ghc 8.0
2022-04-25 02:01:19	tomsmeding	shiraeeshi: I suddenly realise you're probably using chrisdone's original repo
2022-04-25 02:01:21	tomsmeding	that's mega old
2022-04-25 02:01:34	tomsmeding	shiraeeshi: https://github.com/tomsmeding/ircbrowse is the version that's currently running
2022-04-25 02:01:44	shiraeeshi	tomsmeding, no, I'm using your version
2022-04-25 02:01:48	tomsmeding	ah
2022-04-25 02:02:04	shiraeeshi	I've used stack before
2022-04-25 02:02:05	→	Pickchea has joined #haskell
2022-04-25 02:02:15	→	redb has joined #haskell
2022-04-25 02:02:28	shiraeeshi	I've installed cabal and ghc today
2022-04-25 02:02:53	tomsmeding	if I literally do 'git clone git@github.com:tomsmeding/ircbrowse; cd ircbrowse; haskell-language-server-wrapper' then it works
2022-04-25 02:02:58	tomsmeding	ghc 8.10.7
2022-04-25 02:04:29	shiraeeshi	"ghc -- --version" outputs 8.0.2
2022-04-25 02:04:36	tomsmeding	O.o
2022-04-25 02:04:39	tomsmeding	please upgrade lol
2022-04-25 02:04:53	tomsmeding	so that's where the 4.9 comes from
2022-04-25 02:05:00	tomsmeding	how did you install ghc?
2022-04-25 02:05:57	←	coot has quit (Quit: coot)
2022-04-25 02:05:59	shiraeeshi	apt install ghc-8.8
2022-04-25 02:06:11	tomsmeding	why does ghc-8.8 give ghc-8.0
2022-04-25 02:06:14	shiraeeshi	but I think I've installed an older version before
2022-04-25 02:06:19	tomsmeding	right
2022-04-25 02:06:28	tomsmeding	scour all ghcs from your system and use ghcup
2022-04-25 02:06:30	←	redb has quit (Ping timeout: 250 seconds)
2022-04-25 02:06:35	→	zincy has joined #haskell
2022-04-25 02:06:36	tomsmeding	or use hvr's ppa I think
2022-04-25 02:07:24	tomsmeding	hm the ppa only goes to 8.10.4, but that should also work I guess (but use ghcup if you're at all willing to do so)
2022-04-25 02:08:34	←	hololeap has quit (Ping timeout: 240 seconds)
2022-04-25 02:08:42	→	tromp has joined #haskell
2022-04-25 02:08:59	←	titibandit has quit (Ping timeout: 240 seconds)
2022-04-25 02:10:52	→	mshiraeeshi has joined #haskell
2022-04-25 02:10:58	→	hololeap has joined #haskell
2022-04-25 02:11:01	mshiraeeshi	now it gives the same error, but with base-4.13.0.0 instead of 4.9
2022-04-25 02:12:01	tomsmeding	mshiraeeshi: right, because you're using ghc-8.8 instead of 8.10.7; you can try 'rm cabal.project.freeze' and then try again
2022-04-25 02:12:10	tomsmeding	may work, 8.8 should be recent enough
2022-04-25 02:12:37	tomsmeding	(the freeze file pins all dependencies, including 'base' which as a side effect pins the GHC version -- see also https://wiki.haskell.org/Base_package )
2022-04-25 02:13:11	mshiraeeshi	now it says "unknown package: timezone-series (dependency of clogparse)"
2022-04-25 02:13:26	←	shiraeeshi has quit (Ping timeout: 250 seconds)
2022-04-25 02:13:30	tomsmeding	https://hackage.haskell.org/package/timezone-series
2022-04-25 02:13:35	tomsmeding	have you run 'cabal update'?
2022-04-25 02:13:41	mshiraeeshi	no
2022-04-25 02:13:48	tomsmeding	ah, you have to, at least once
2022-04-25 02:14:03	tomsmeding	then it downloads the list of packages from hackage so that it knows what exists
2022-04-25 02:14:35	tomsmeding	(and at what versions -- so if something requires a package version newer than what was available the last time you ran 'cabal update', you may need to run it again)
2022-04-25 02:15:11	→	dextaa4 has joined #haskell
2022-04-25 02:15:12	tomsmeding	stack automatically downloads whatever snapshot a stack.yaml prescribes; cabal doesn't automatically download the package index for some reason
2022-04-25 02:15:51	geekosaur	it does print a warning if it's missing or old
2022-04-25 02:16:11	tomsmeding	maybe it got lost in the output that HLS-wrapper also puts out
2022-04-25 02:16:26	mshiraeeshi	I've run out of space while updating, I need to free some
2022-04-25 02:16:30	tomsmeding	:')
2022-04-25 02:16:37	→	littlebobeep has joined #haskell
2022-04-25 02:17:08	tomsmeding	mshiraeeshi: make 1GiB free or something
2022-04-25 02:17:40	tomsmeding	ircbrowse itself including compiled products is ~200MiB, and there's a bunch of dependencies as well that it puts in ~/.cabal that I don't know the sizes of
2022-04-25 02:17:44	→	redb has joined #haskell
2022-04-25 02:18:12	tomsmeding	note also, in case you weren't aware, that ircbrowse requires a running instance of postgresql that needs to be set up with a user account in some manner
2022-04-25 02:18:42	tomsmeding	(I don't like its dependency on postgresql precisely because it's annoying to set up quickly, but I haven't gotten around to removing that dependency yet)
2022-04-25 02:19:19	←	notzmv has quit (Ping timeout: 240 seconds)
2022-04-25 02:19:42	mshiraeeshi	I can check that postgresql credentials in configs, right?
2022-04-25 02:19:59	tomsmeding	there's instructions in README.md
2022-04-25 02:20:17	tomsmeding	(oh I see that still references stack lol)
2022-04-25 02:20:29	←	acarrico1 has quit (Ping timeout: 256 seconds)
2022-04-25 02:20:35	tomsmeding	(well, maybe stack still works, I haven't tried in a while)
2022-04-25 02:20:39	←	takuan has quit (Remote host closed the connection)
2022-04-25 02:21:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-04-25 02:21:07	tomsmeding	but editing and compiling ircbrowse should work of course, it will just throw an error at runtime if there's no postgresql
2022-04-25 02:22:11	←	mikoto-chan has quit (Ping timeout: 256 seconds)
2022-04-25 02:23:22	→	hololeap has joined #haskell
2022-04-25 02:24:02	→	mikoto-chan has joined #haskell
2022-04-25 02:25:45	←	redb has quit (Ping timeout: 272 seconds)
2022-04-25 02:26:18	→	redb has joined #haskell
2022-04-25 02:26:20	←	dextaa4 has quit (Remote host closed the connection)
2022-04-25 02:26:26	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-25 02:27:00	→	mvk has joined #haskell
2022-04-25 02:28:27	←	gensyst has quit (Quit: Leaving)
2022-04-25 02:29:16	tomsmeding	(I'm off to bed)
2022-04-25 02:30:55	mshiraeeshi	thanks for the help, I'm freeing some space, gonna try after
2022-04-25 02:31:54	→	dextaa4 has joined #haskell
2022-04-25 02:33:54	←	vicfred has quit (Ping timeout: 276 seconds)
2022-04-25 02:33:59	←	vorpuni has quit (Ping timeout: 240 seconds)
2022-04-25 02:38:39	←	MajorBiscuit has quit (Ping timeout: 240 seconds)
2022-04-25 02:38:51	→	kaph has joined #haskell
2022-04-25 02:40:43	→	tromp has joined #haskell
2022-04-25 02:41:12	→	Brandon_IX has joined #haskell
2022-04-25 02:41:35	←	dextaa4 has quit (Ping timeout: 272 seconds)
2022-04-25 02:42:04	→	epolanski has joined #haskell
2022-04-25 02:42:15	←	jakalx has left #haskell (Error from remote client)
2022-04-25 02:45:30	→	vicfred has joined #haskell
2022-04-25 02:46:13	→	jakalx has joined #haskell
2022-04-25 02:46:36	←	zincy has quit (Remote host closed the connection)
2022-04-25 02:48:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-25 02:49:11	←	wroathe has quit (Ping timeout: 272 seconds)
2022-04-25 02:49:16	←	vicfred has quit (Client Quit)
2022-04-25 02:50:54	→	mmhat has joined #haskell
2022-04-25 02:50:56	→	vicfred has joined #haskell
2022-04-25 02:51:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-04-25 02:52:04	←	theproffesor has quit (Read error: Connection reset by peer)
2022-04-25 02:52:21	←	haskellberry has quit (Ping timeout: 272 seconds)
2022-04-25 02:55:03	→	hololeap has joined #haskell
2022-04-25 02:55:27	→	littlebobeep has joined #haskell
2022-04-25 02:58:43	Brandon_IX	is it possible to write a list comprehension that lists all possible pairs of numbers in a list without including a pairs made up of the same element
2022-04-25 02:58:52	→	littlebo1eep has joined #haskell
2022-04-25 02:59:11	Brandon_IX	I'm not sure if that's a clear enough question
2022-04-25 02:59:28	exarkun	You want to exclude the diagonal from top left to bottom right, sounds like?
2022-04-25 02:59:38	Brandon_IX	exarkun: yeah
2022-04-25 02:59:39	→	zmv has joined #haskell
2022-04-25 02:59:53	exarkun	it is surely possible.  the real question is how many different ways can #haskell imagine to do it.
2022-04-25 03:00:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-25 03:00:58	Brandon_IX	exarkun: okay, ill give it another go and come back, thanks
2022-04-25 03:01:09	exarkun	:)
2022-04-25 03:02:30	←	kaskal has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-25 03:02:30	←	mshiraeeshi has quit (Read error: Connection reset by peer)
2022-04-25 03:07:43	←	kaph has quit (Read error: Connection reset by peer)
2022-04-25 03:09:38	←	fendor_ has quit (Remote host closed the connection)
2022-04-25 03:09:50	ℹ	zmv is now known as notzmv
2022-04-25 03:09:53	←	Pickchea has quit (Quit: Leaving)
2022-04-25 03:10:02	←	notzmv has quit (Changing host)
2022-04-25 03:10:02	→	notzmv has joined #haskell
2022-04-25 03:11:11	yushyin	if you need a hint, let us know :)
2022-04-25 03:20:35	←	kimjetwav has quit (Remote host closed the connection)
2022-04-25 03:21:11	←	mikoto-chan has quit (Ping timeout: 246 seconds)
2022-04-25 03:21:15	→	machinedgod has joined #haskell
2022-04-25 03:23:26	→	mikoto-chan has joined #haskell
2022-04-25 03:26:04	←	littlebo1eep has quit (Ping timeout: 240 seconds)
2022-04-25 03:27:04	→	dostoevsky2 has joined #haskell
2022-04-25 03:29:03	←	dostoevsky has quit (Ping timeout: 256 seconds)
2022-04-25 03:29:04	ℹ	dostoevsky2 is now known as dostoevsky
2022-04-25 03:31:24	←	mvk has quit (Ping timeout: 240 seconds)
2022-04-25 03:34:09	←	juri_ has quit (Ping timeout: 256 seconds)
2022-04-25 03:34:39	→	Kevin578 has joined #haskell
2022-04-25 03:34:47	←	mikoto-chan has quit (Ping timeout: 272 seconds)
2022-04-25 03:35:50	→	mikoto-chan has joined #haskell
2022-04-25 03:36:56	←	Profpatsch has quit (Quit: WeeChat 3.3)
2022-04-25 03:37:59	←	acidjnk has quit (Ping timeout: 240 seconds)
2022-04-25 03:38:39	←	Kevin578 has quit (Ping timeout: 240 seconds)
2022-04-25 03:40:43	→	xff0x_ has joined #haskell
2022-04-25 03:41:20	←	gehmehgeh has quit (Quit: Leaving)
2022-04-25 03:41:29	tomsmeding	> curry ((>>) <$> (guard . uncurry (/=)) <*> return) <$> [1..4] <*> [1..4] >>= id
2022-04-25 03:41:30	lambdabot	 [(1,2),(1,3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]
2022-04-25 03:41:36	tomsmeding	is this sufficiently obfuscated?
2022-04-25 03:41:51	monochrom	Yes. I don't understand it. :)
2022-04-25 03:41:57	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-25 03:42:25	monochrom	Transitioning from [1..4] to [1..] is also problematic.
2022-04-25 03:42:46	monochrom	I hate the original wording anyway. Programmers can't write.
2022-04-25 03:43:29	tomsmeding	monochrom: hint: the '>>= id' is concatMap
2022-04-25 03:43:51	tomsmeding	s/Map//
2022-04-25 03:44:59	tomsmeding	incidentally, that `(>>) <$> (guard . uncurry (/=)) <*> return` is _significantly_ nicer than what lambdabot produces if you @pl the readable version
2022-04-25 03:45:22	tomsmeding	in particular, it has 4 let points
2022-04-25 03:45:28	tomsmeding	s/let/less/
2022-04-25 03:48:19	←	crazazy has quit (Ping timeout: 240 seconds)
2022-04-25 03:48:43	←	joo-_ has quit (Ping timeout: 272 seconds)
2022-04-25 03:49:52	→	joo-_ has joined #haskell
2022-04-25 03:49:52	←	joo-_ has quit (Changing host)
2022-04-25 03:49:52	→	joo-_ has joined #haskell
2022-04-25 03:51:42	←	eggplantade has quit (Remote host closed the connection)
2022-04-25 03:51:55	←	__monty__ has quit (Quit: leaving)
2022-04-25 03:55:20	→	littlebobeep has joined #haskell
2022-04-25 04:02:01	←	mikoto-chan has quit (Ping timeout: 272 seconds)
2022-04-25 04:02:42	←	cosimone has quit (Quit: ERC 5.4 (IRC client for GNU Emacs 28.1))
2022-04-25 04:05:34	←	jao has quit (Remote host closed the connection)
2022-04-25 04:05:49	→	juri_ has joined #haskell
2022-04-25 04:07:58	→	tommd has joined #haskell
2022-04-25 04:08:50	→	jao has joined #haskell
2022-04-25 04:09:50	→	acidjnk has joined #haskell
2022-04-25 04:14:39	←	gentauro has quit (Ping timeout: 240 seconds)
2022-04-25 04:20:04	←	anomal has quit (Remote host closed the connection)
2022-04-25 04:21:50	→	gentauro has joined #haskell
2022-04-25 04:26:07	←	cynomys has quit (Quit: leaving)
2022-04-25 04:28:55	→	eggplantade has joined #haskell
2022-04-25 04:32:25	←	machinedgod has quit (Ping timeout: 272 seconds)
2022-04-25 04:36:15	←	geranim0 has quit (Remote host closed the connection)
2022-04-25 04:39:18	→	AlexZenon_2 has joined #haskell
2022-04-25 04:41:18	←	AlexZenon has quit (Ping timeout: 276 seconds)
2022-04-25 04:45:19	←	jgeerds has quit (Ping timeout: 240 seconds)
2022-04-25 04:46:56	←	acidjnk has quit (Ping timeout: 260 seconds)
2022-04-25 04:49:12	boxscape	huh, just found out that in a do block, `(foo :: Num a => a) <- pure 4` is different from `(foo :: forall a . Num a => a) <- pure 4`
2022-04-25 04:49:18	boxscape	(the first is monomorphic, and the second one doesn't work)
2022-04-25 04:50:42	→	mvk has joined #haskell
2022-04-25 04:51:25	→	jhagborg has joined #haskell
2022-04-25 04:54:20	exarkun	why does haskell-language-server-wrapper `chdir("") = ENOENT` and then exit with an error?
2022-04-25 04:55:33	boxscape	(oh I just realized what I mentioned isn't that different from `(foo :: a)` behaving differently than `(foo :: forall a . a)`, which makes sense
2022-04-25 04:58:29	→	jhagborg_ has joined #haskell
2022-04-25 04:59:39	←	jhagborg has quit (Ping timeout: 240 seconds)
2022-04-25 05:01:34	←	jhagborg_ has quit (Read error: Connection reset by peer)
2022-04-25 05:01:54	→	jhagborg_ has joined #haskell
2022-04-25 05:03:55	geekosaur	the chdir failing is correct per POSIX; why HLS-wrapper does it, I don't know
2022-04-25 05:04:06	←	pretty_dumm_guy has quit (Quit: WeeChat 3.5)
2022-04-25 05:12:24	←	euandreh has quit (Ping timeout: 250 seconds)
2022-04-25 05:12:49	←	mc47 has quit (Remote host closed the connection)
2022-04-25 05:16:37	→	dsrt^ has joined #haskell
2022-04-25 05:18:10	←	jhagborg_ has quit (Remote host closed the connection)
2022-04-25 05:18:37	→	jhagborg_ has joined #haskell
2022-04-25 05:21:07	←	abhixec has quit (Quit: brb)
2022-04-25 05:26:15	←	gurkenglas has quit (Ping timeout: 272 seconds)
2022-04-25 05:28:51	→	shiraeeshi has joined #haskell
2022-04-25 05:33:18	←	stackdroid18 has quit (Quit: hasta la vista... tchau!)
2022-04-25 05:39:52	←	lagash has quit (Remote host closed the connection)
2022-04-25 05:39:59	←	jhagborg_ has quit (Ping timeout: 240 seconds)
2022-04-25 05:40:18	→	lagash has joined #haskell
2022-04-25 05:40:36	←	notzmv has quit (Ping timeout: 260 seconds)
2022-04-25 05:41:13	←	xff0x_ has quit (Read error: Connection reset by peer)
2022-04-25 05:41:39	→	fryguybob has joined #haskell
2022-04-25 05:41:44	→	machinedgod has joined #haskell
2022-04-25 05:42:09	←	alp_ has quit (Ping timeout: 248 seconds)
2022-04-25 05:47:03	→	wroathe has joined #haskell
2022-04-25 05:47:03	←	wroathe has quit (Changing host)
2022-04-25 05:47:03	→	wroathe has joined #haskell
2022-04-25 05:53:52	→	littlebo1eep has joined #haskell
2022-04-25 05:54:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-25 05:56:03	←	zyklotomic has quit (Ping timeout: 276 seconds)
2022-04-25 05:56:33	→	vysn has joined #haskell
2022-04-25 05:57:30	→	zyklotomic has joined #haskell
2022-04-25 05:58:05	←	tommd has quit (Ping timeout: 256 seconds)
2022-04-25 06:05:31	←	machinedgod has quit (Ping timeout: 272 seconds)
2022-04-25 06:16:32	→	euandreh has joined #haskell
2022-04-25 06:20:53	←	shailangsa has quit (Ping timeout: 250 seconds)
2022-04-25 06:21:49	←	epolanski has quit (Quit: Connection closed for inactivity)
2022-04-25 06:28:23	napping	Is there any common name for a function like zipWith max?
2022-04-25 06:34:05	napping	Especially one that makes sense for containers like Vector a
2022-04-25 06:34:19	→	trillp has joined #haskell
2022-04-25 06:35:45	→	xff0x_ has joined #haskell
2022-04-25 06:39:16	←	vicfred has quit (Quit: Leaving)
2022-04-25 06:41:13	←	albet70 has quit (Remote host closed the connection)
2022-04-25 06:43:25	ℹ	irc: disconnected from server
2022-04-26 07:30:14	→	oxide has joined #haskell
2022-04-26 07:30:14	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-26 07:30:14	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-26 07:30:14	ℹ	Channel #haskell: 691 nicks (1 op, 0 voices, 690 normals)
2022-04-26 07:30:15	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-26 07:30:15	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-26 07:30:33	ℹ	ezzieygu1wuf is now known as ezzieyguywuf
2022-04-26 07:30:59	ℹ	irc: disconnected from server
2022-04-26 07:47:41	→	oxide has joined #haskell
2022-04-26 07:47:41	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-26 07:47:41	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-26 07:47:41	ℹ	Channel #haskell: 691 nicks (1 op, 0 voices, 690 normals)
2022-04-26 07:47:41	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-26 07:47:41	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-26 07:47:41	parsnip	my memory is bad, don't haskellers write x <- xs ?
2022-04-26 07:47:53	Axman6	yes
2022-04-26 07:48:24	→	jargon has joined #haskell
2022-04-26 07:48:39	monochrom	I am not sure you can use rational reasoning to understand naming.
2022-04-26 07:48:53	parsnip	lol
2022-04-26 07:49:03	Axman6	r/namenerdcirclejerk would tend to agree with you
2022-04-26 07:49:29	monochrom	Both xs and X could made sense. A ton more alternatives would too. Some bigshot made a choice. End of story.
2022-04-26 07:50:23	→	doppo has joined #haskell
2022-04-26 07:50:23	monochrom	I think the Prolog people started X:Xs.  (It's [X|Xs] in their actual syntax.)
2022-04-26 07:50:30	←	doppo has left #haskell
2022-04-26 07:51:35	monochrom	And in Prolog it couldn't be x:xs.  Lower case for constant atoms (like atoms in Scheme), capitalized for parameters (in general variables waiting for unification).
2022-04-26 07:51:51	←	waleee has quit (Ping timeout: 250 seconds)
2022-04-26 07:52:05	←	eggplantade has quit (Remote host closed the connection)
2022-04-26 07:52:14	monochrom	Err, I mean in Prolog it couldn't be x:X i.e. [x|X].
2022-04-26 07:52:49	monochrom	(To answer why they didn't go with the "x∈X" convention.)
2022-04-26 07:54:27	monochrom	I guess it pays off that I signed up to be a TA of a course that involved Prolog heh.  Now I know more than I ever want to.  Much regret.  :)
2022-04-26 07:54:29	←	Katarushisu has quit (Quit: Ping timeout (120 seconds))
2022-04-26 07:54:48	→	Katarushisu has joined #haskell
2022-04-26 07:55:37	→	eggplantade has joined #haskell
2022-04-26 07:56:22	→	AlexNoo_ has joined #haskell
2022-04-26 07:56:44	monochrom	Oh and I also had to mark an assignment that went "choose one of these six topics and write a tutorial" and I had to mark those who chose "C++ lambda, map, filter, fold" so now I also know way too much C++ than I'm comfortable with haha.
2022-04-26 07:58:06	monochrom	On the bright side I finally understand what's "using t = Myclass::value_type" and why sometimes it has to be "using t = typename Myclass::value_type".
2022-04-26 07:58:57	abastro[m]	Eww C++ lambda
2022-04-26 07:59:01	Axman6	... can you explain why?
2022-04-26 07:59:05	←	AlexZenon has quit (Ping timeout: 272 seconds)
2022-04-26 07:59:39	←	AlexNoo has quit (Ping timeout: 240 seconds)
2022-04-26 07:59:43	←	Alex_test has quit (Ping timeout: 272 seconds)
2022-04-26 07:59:48	←	TonyStone has quit (Remote host closed the connection)
2022-04-26 08:01:21	monochrom	OK I should s/understand/know/ :)
2022-04-26 08:02:25	monochrom	If it begins with say "template<typename Myclass>" then there is something about "Myclass::value_type is a dependent name, assumed non-type unless you say typename".
2022-04-26 08:02:29	Axman6	"Please see sections X, Y, Z and Q.2.1a in the C++2X standard and it should become clear, if you read all parts of the standard that those sections depend on"
2022-04-26 08:02:46	monochrom	Nah I just read Stroustrup's.
2022-04-26 08:03:29	abastro[m]	Oh no
2022-04-26 08:03:43	abastro[m]	Pls do not get converted to C++
2022-04-26 08:03:53	shachaf	Axman6: The reason is that the C++ grammar is awful (partly inherited from C, though C++ made it much worse, and introduced all these problems).
2022-04-26 08:04:02	monochrom	ikr?  I can feel the Stockholm syndrome...
2022-04-26 08:04:23	→	Alex_test has joined #haskell
2022-04-26 08:04:30	←	Guest81 has quit (Ping timeout: 276 seconds)
2022-04-26 08:04:36	shachaf	There are a bunch of ambiguities that need this sort of clarification.
2022-04-26 08:04:41	→	AlexZenon has joined #haskell
2022-04-26 08:04:45	Axman6	I feel like there's a lot to like about C++, except the language itself
2022-04-26 08:05:20	shachaf	For example, "f<x>(y);" can be parsed as "f applied to template argument x and regular argument y", or as "(f < x) > (y);".
2022-04-26 08:05:43	monochrom	People whined about Ada. I feel that C++ is the rightful heir.
2022-04-26 08:05:43	shachaf	To disambugate there you need to know what f is. Which normally you do, but not if f itself is a template argument.
2022-04-26 08:05:55	Axman6	I like many of the ideas, having a lot of control over how to specialise things, allocate things, inline things, data layouts etc, but god there's a lot of awful crap in the language
2022-04-26 08:06:19	monochrom	expressive but bureacratic.
2022-04-26 08:06:21	Axman6	I feel people whine about Ada without knowing Ada - I enjoyed Ada but it did feel very unfamiliart
2022-04-26 08:06:25	Axman6	-t
2022-04-26 08:06:41	←	jhagborg has quit (Ping timeout: 272 seconds)
2022-04-26 08:06:55	shachaf	There's a similar ambiguity with "t * x;" -- is it declaring a pointer x, or multiplying t by x? You need to know what t is to know.
2022-04-26 08:07:01	Axman6	Few languages provide as good tools for concurrency and embedded systems as Ada
2022-04-26 08:07:03	monochrom	And now that C++ also standardizes concurrency, it finally catches up with Ada haha </snark>
2022-04-26 08:07:19	←	td_ has quit (Ping timeout: 272 seconds)
2022-04-26 08:07:30	shachaf	I assume "using t = ambiguous_thing;" is a similar issue, though I'm not sure what the ambiguity is here.
2022-04-26 08:07:32	monochrom	<not snark> To be fair in many other aspects C++ surpassed Ada
2022-04-26 08:07:51	shachaf	C has a lot of control over how to specialize things, allocate things, inline things, data layouts, etc.
2022-04-26 08:08:13	Axman6	I'd be surprised if it did surpass Ada when it comes to concurrency, it provides really useful, high level concepts that would require language changes for C++ to enforce the properties of
2022-04-26 08:08:53	→	td_ has joined #haskell
2022-04-26 08:08:55	Axman6	shachaf: C compilers do, but afair it's mostly ad hoc and everyone just agreed to do the same thing, without a standard for it.
2022-04-26 08:10:02	Axman6	Ada lets you do things like say: "This type takes up exactly one word, and the bits can mean one of these eight different things, and it is only allowed to be used in these specific addresses, which the compiler must ensure it doesn't allocate for any other use, because they are actually memory mapped IO registers"
2022-04-26 08:11:06	monochrom	I feel you. It's why I chose "whined" rather than "complained".
2022-04-26 08:11:11	Axman6	in C, you'd say "struct register[8] = 0x83890000; // Compiler, pls don't do anything to this address
2022-04-26 08:11:30	→	ralu1 has joined #haskell
2022-04-26 08:11:57	←	terrorjack has quit (Quit: The Lounge - https://thelounge.chat)
2022-04-26 08:12:22	shachaf	Well, certainly anything C++ gives you in this regard, C does too.
2022-04-26 08:12:55	→	terrorjack has joined #haskell
2022-04-26 08:12:59	Axman6	(If this sounds like a pretty specific example, it's because it was the example used in my embedded systems course at uni, showing how to program a DSP in Ada, where the interface do it was via some number of memory mapped registers)
2022-04-26 08:13:40	Axman6	yeah both C and C++ are lacking in this kind of control IMO, and you have to resort to linker scripts to try and convince the compiler to not write garbage to things
2022-04-26 08:16:16	maerwald[m]	Expressivity comes with a price, many people forget, including Haskellers
2022-04-26 08:17:13	→	jhagborg has joined #haskell
2022-04-26 08:17:37	monochrom	This is why I gave up expressing OOP and just stick to FP such as Haskell.
2022-04-26 08:19:39	←	wroathe has quit (Ping timeout: 256 seconds)
2022-04-26 08:19:46	jackdk	Axman6: I too liked my experience with Ada, but it wasn't at that high of a level. I ended up writing a parallel floodfill to work through a maze.
2022-04-26 08:20:50	monochrom	That is like one of those National Treasure or Tomb Raider treasure hunt movies.
2022-04-26 08:21:32	→	wroathe has joined #haskell
2022-04-26 08:21:32	←	wroathe has quit (Changing host)
2022-04-26 08:21:32	→	wroathe has joined #haskell
2022-04-26 08:21:57	monochrom	"OMG we are trapped AND water is coming in to drown us!"  "Wait a second two wrongs make a right! Watch where the water is leaving, that's our exit too!"
2022-04-26 08:26:04	→	[itchyjunk] has joined #haskell
2022-04-26 08:28:51	←	geranim0 has quit (Ping timeout: 272 seconds)
2022-04-26 08:30:29	←	slaydr has quit (Ping timeout: 246 seconds)
2022-04-26 08:30:58	←	anomal has quit (Remote host closed the connection)
2022-04-26 08:32:35	→	abastro has joined #haskell
2022-04-26 08:38:36	ℹ	irc: disconnected from server
2022-04-26 08:39:00	→	oxide has joined #haskell
2022-04-26 08:39:00	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-26 08:39:00	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-26 08:39:01	ℹ	Channel #haskell: 688 nicks (1 op, 0 voices, 687 normals)
2022-04-26 08:39:02	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-26 08:39:02	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-26 08:40:52	→	justsomeguy has joined #haskell
2022-04-26 08:43:16	→	littlebobeep has joined #haskell
2022-04-26 08:48:45	←	sammelweis has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2022-04-26 08:50:39	←	justsomeguy has quit (Ping timeout: 276 seconds)
2022-04-26 08:52:28	←	bitdex has quit (Quit: = "")
2022-04-26 08:52:53	→	Guest81 has joined #haskell
2022-04-26 08:53:29	Guest81	really? banned on #haskell-ops as well? this ts so dumb
2022-04-26 08:56:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-26 08:58:29	←	Adran has quit (Quit: Este é o fim.)
2022-04-26 09:01:17	→	sammelweis has joined #haskell
2022-04-26 09:04:02	→	littlebobeep has joined #haskell
2022-04-26 09:05:34	→	Adran has joined #haskell
2022-04-26 09:08:06	←	redb has quit (Ping timeout: 250 seconds)
2022-04-26 09:09:15	[itchyjunk]	Can you use () to group operations?
2022-04-26 09:09:19	←	wroathe has quit (Ping timeout: 240 seconds)
2022-04-26 09:09:39	[itchyjunk]	(blah) ++ (some other blah) to say do two things to create similar lists then merge them
2022-04-26 09:12:38	←	xkuru has quit (Read error: Connection reset by peer)
2022-04-26 09:13:36	→	notzmv has joined #haskell
2022-04-26 09:17:45	monochrom	Yes.
2022-04-26 09:18:14	→	cdman has joined #haskell
2022-04-26 09:21:40	←	Guest81 has quit (Quit: Connection closed)
2022-04-26 09:21:59	←	maerwald has quit (Ping timeout: 256 seconds)
2022-04-26 09:24:45	[itchyjunk]	Argh, it was a typo all along i think..
2022-04-26 09:24:58	→	inversed_ has joined #haskell
2022-04-26 09:25:51	←	inversed has quit (Ping timeout: 272 seconds)
2022-04-26 09:28:23	←	jhagborg has quit (Ping timeout: 272 seconds)
2022-04-26 09:29:44	[itchyjunk]	i think i just need to filter out the things what i need from this
2022-04-26 09:29:45	[itchyjunk]	https://bpa.st/DFOQ
2022-04-26 09:29:45	←	liz has quit (Quit: Lost terminal)
2022-04-26 09:30:03	[itchyjunk]	Either that or the second list i create needs to be different hmmm
2022-04-26 09:31:32	→	redb has joined #haskell
2022-04-26 09:34:37	→	maerwald has joined #haskell
2022-04-26 09:36:10	→	mbuf has joined #haskell
2022-04-26 09:36:37	←	redb has quit (Ping timeout: 272 seconds)
2022-04-26 09:36:40	→	slaydr has joined #haskell
2022-04-26 09:43:39	←	eggplantade has quit (Remote host closed the connection)
2022-04-26 09:44:36	←	maerwald has quit (Ping timeout: 276 seconds)
2022-04-26 09:45:01	→	jhagborg has joined #haskell
2022-04-26 09:45:02	→	kaph has joined #haskell
2022-04-26 09:46:36	←	jhagborg has quit (Remote host closed the connection)
2022-04-26 09:46:59	→	redb has joined #haskell
2022-04-26 09:47:01	→	jhagborg has joined #haskell
2022-04-26 09:50:10	→	yauhsien has joined #haskell
2022-04-26 09:52:01	hololeap	is there a good alternative to dlist that is in the libs bundled with ghc?
2022-04-26 09:52:27	hololeap	oh, wait I don't need dlist, nvm
2022-04-26 09:52:29	→	eggplantade has joined #haskell
2022-04-26 09:52:50	monochrom	I use `("sdkljfl" ++) . ('c' :)`. Does that count? :)
2022-04-26 09:54:22	hololeap	I thought about doing that, but I can just use foldr
2022-04-26 09:54:56	→	tommd has joined #haskell
2022-04-26 09:57:55	hololeap	I'm using `ListT IO FilePath` to scan through a directory tree. honest question, what could go wrong?
2022-04-26 09:58:21	monochrom	Is that [IO FilePath]?
2022-04-26 09:58:45	monochrom	Err wait no.  Is that IO [FilePath]?
2022-04-26 09:58:56	hololeap	that's what it ends up being after runListT
2022-04-26 09:59:52	monochrom	So unless you use unsafeInterleaveIO, it doesn't return until the whole tree is complete.
2022-04-26 10:01:07	monochrom	"ListT m a = newtype (m [a])" has other issues in addition. I think I even heard "not a monad" too.
2022-04-26 10:01:19	←	gpncarl has quit (Ping timeout: 272 seconds)
2022-04-26 10:01:23	hololeap	yeah, it's deprecated, which was the source of my question
2022-04-26 10:01:26	←	yauhsien has quit (Remote host closed the connection)
2022-04-26 10:01:52	hololeap	but the syntax is convenient
2022-04-26 10:01:59	→	yauhsien has joined #haskell
2022-04-26 10:02:00	jackdk	Many streaming libraries advertise themselves as "ListT done right". I would consider using one of those to provide a stream of filenames to iterate through, so you have more precise control over the traversal
2022-04-26 10:02:24	hololeap	one of the constraints of this project is that I have to use packages bundled with GHC only
2022-04-26 10:03:22	monochrom	Oleg's "data L m a = Nil | Cons a (m (L m a))" though is legit.
2022-04-26 10:04:00	hololeap	but it won't fail early in the case of a `throwError`? it will scan the whole tree first and then process it?
2022-04-26 10:05:30	monochrom	throwing an exception early is an orthogonal issue.
2022-04-26 10:05:56	monochrom	more or less
2022-04-26 10:06:04	jackdk	hololeap: `data Stream f m r = Done r | Step (f (Stream f m r)) | Effect (m (Stream f m r))`; `data Of a b = !a :< b deriving Functor`; you now have a streaming type
2022-04-26 10:06:05	hololeap	I'm saying if it hits a throw error on file 50/500, will it look at the other 450?
2022-04-26 10:06:13	jackdk	(inspired by `streaming`)
2022-04-26 10:06:32	hololeap	maybe I can test this somehow
2022-04-26 10:06:39	←	yauhsien has quit (Ping timeout: 240 seconds)
2022-04-26 10:11:15	←	abastro has quit (Ping timeout: 276 seconds)
2022-04-26 10:12:20	←	euandreh has quit (Ping timeout: 260 seconds)
2022-04-26 10:14:17	→	euandreh has joined #haskell
2022-04-26 10:21:19	←	Batzy has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2022-04-26 10:21:29	hololeap	here is the relevant snippet, in all it's unglory: http://sprunge.us/qTGZGQ
2022-04-26 10:21:39	→	maerwald has joined #haskell
2022-04-26 10:22:07	→	coot has joined #haskell
2022-04-26 10:22:26	→	Batzy has joined #haskell
2022-04-26 10:25:58	←	x88x88x has quit (Remote host closed the connection)
2022-04-26 10:26:46	→	x88x88x has joined #haskell
2022-04-26 10:29:04	←	Cale has quit (Ping timeout: 248 seconds)
2022-04-26 10:29:47	→	Cale has joined #haskell
2022-04-26 10:32:15	→	abastro has joined #haskell
2022-04-26 10:41:39	←	euandreh has quit (Ping timeout: 240 seconds)
2022-04-26 10:41:43	→	gpncarl has joined #haskell
2022-04-26 10:41:49	←	eggplantade has quit (Remote host closed the connection)
2022-04-26 10:43:54	→	euandreh has joined #haskell
2022-04-26 10:48:02	→	yauhsien has joined #haskell
2022-04-26 10:48:18	←	jhagborg has quit (Remote host closed the connection)
2022-04-26 10:48:38	→	jhagborg has joined #haskell
2022-04-26 10:48:38	→	littlebo1eep has joined #haskell
2022-04-26 10:49:19	←	[itchyjunk] has quit (Read error: Connection reset by peer)
2022-04-26 10:49:51	Axman6	jackdk: "inspired"
2022-04-26 10:51:01	jackdk	Axman6: "yes"
2022-04-26 10:51:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-26 10:53:49	→	tromp has joined #haskell
2022-04-26 10:55:14	→	deadmarshal_ has joined #haskell
2022-04-26 10:59:37	→	eggplantade has joined #haskell
2022-04-26 11:01:19	←	jhagborg has quit (Ping timeout: 240 seconds)
2022-04-26 11:06:30	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-26 11:06:49	←	tommd has quit (Ping timeout: 256 seconds)
2022-04-26 11:10:37	←	yauhsien has quit (Remote host closed the connection)
2022-04-26 11:10:55	→	vicfred has joined #haskell
2022-04-26 11:11:21	→	yauhsien has joined #haskell
2022-04-26 11:15:19	←	vicfred has quit (Ping timeout: 256 seconds)
2022-04-26 11:16:41	←	yauhsien has quit (Ping timeout: 272 seconds)
2022-04-26 11:33:04	←	littlebo1eep has quit (Ping timeout: 240 seconds)
2022-04-26 11:34:08	→	yauhsien has joined #haskell
2022-04-26 11:35:19	→	littlebobeep has joined #haskell
2022-04-26 11:39:42	←	hughjfchen has quit (Ping timeout: 256 seconds)
2022-04-26 11:40:49	→	tromp has joined #haskell
2022-04-26 11:42:06	→	alp_ has joined #haskell
2022-04-26 11:46:43	→	hughjfchen has joined #haskell
2022-04-26 11:47:04	←	Me-me has quit (Ping timeout: 260 seconds)
2022-04-26 12:01:59	→	mikoto-chan has joined #haskell
2022-04-26 12:05:12	→	acidjnk has joined #haskell
2022-04-26 12:08:38	→	xkuru has joined #haskell
2022-04-26 12:13:06	←	yauhsien has quit (Remote host closed the connection)
2022-04-26 12:13:49	→	yauhsien has joined #haskell
2022-04-26 12:20:36	→	Ram-Z has joined #haskell
2022-04-26 12:22:33	←	ralu1 has quit (Ping timeout: 272 seconds)
2022-04-26 12:31:50	←	yauhsien has quit (Remote host closed the connection)
2022-04-26 12:31:52	→	cfricke has joined #haskell
2022-04-26 12:32:26	→	yauhsien has joined #haskell
2022-04-26 12:34:44	→	chele has joined #haskell
2022-04-26 12:38:11	→	dextaa4 has joined #haskell
2022-04-26 12:38:58	→	michalz has joined #haskell
2022-04-26 12:40:06	←	dextaa4 has quit (Remote host closed the connection)
2022-04-26 12:40:23	→	merijn has joined #haskell
2022-04-26 12:42:38	←	yauhsien has quit (Remote host closed the connection)
2022-04-26 12:43:56	→	mshiraeeshi has joined #haskell
2022-04-26 12:44:25	→	yauhsien has joined #haskell
2022-04-26 12:44:41	←	abastro has quit (Remote host closed the connection)
2022-04-26 12:45:30	→	abastro has joined #haskell
2022-04-26 12:45:38	←	Sgeo has quit (Read error: Connection reset by peer)
2022-04-26 12:46:18	←	shriekingnoise has quit (Quit: Quit)
2022-04-26 12:47:06	←	jargon has quit ()
2022-04-26 12:47:16	→	xaotuk has joined #haskell
2022-04-26 12:51:22	→	lortabac has joined #haskell
2022-04-26 12:52:13	←	abastro has quit (Remote host closed the connection)
2022-04-26 12:52:50	→	fendor has joined #haskell
2022-04-26 12:53:06	←	mikoto-chan has quit (Ping timeout: 276 seconds)
2022-04-26 12:53:16	→	shiraeeshi has joined #haskell
2022-04-26 12:54:44	←	mshiraeeshi has quit (Ping timeout: 246 seconds)
2022-04-26 12:54:51	←	dostoevsky has quit (Ping timeout: 272 seconds)
2022-04-26 12:55:06	←	fendor_ has quit (Ping timeout: 246 seconds)
2022-04-26 13:02:07	←	yauhsien has quit (Remote host closed the connection)
2022-04-26 13:02:56	→	yauhsien has joined #haskell
2022-04-26 13:05:30	←	rembo10 has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-26 13:06:24	→	rembo10 has joined #haskell
2022-04-26 13:10:59	←	jakalx has left #haskell
2022-04-26 13:12:25	→	gehmehgeh has joined #haskell
2022-04-26 13:15:51	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-26 13:17:39	←	xaotuk has quit (Ping timeout: 240 seconds)
2022-04-26 13:19:05	→	machinedgod has joined #haskell
2022-04-26 13:19:12	→	dhouthoo has joined #haskell
2022-04-26 13:20:16	→	jakalx has joined #haskell
2022-04-26 13:24:40	←	jonathanx_ has quit (Remote host closed the connection)
2022-04-26 13:24:52	→	Pikachu[m] has joined #haskell
2022-04-26 13:28:32	←	shiraeeshi has quit (Quit: Leaving)
2022-04-26 13:32:12	→	ccntrq has joined #haskell
2022-04-26 13:32:52	→	yauhsien_ has joined #haskell
2022-04-26 13:34:43	←	yauhsien has quit (Ping timeout: 256 seconds)
2022-04-26 13:39:19	←	coot has quit (Quit: coot)
2022-04-26 13:40:46	→	jonathanx has joined #haskell
2022-04-26 13:42:41	→	dsrt^ has joined #haskell
2022-04-26 13:43:32	→	xaotuk has joined #haskell
2022-04-26 13:45:03	←	yauhsien_ has quit (Remote host closed the connection)
2022-04-26 13:50:01	→	yauhsien has joined #haskell
2022-04-26 13:54:19	←	yauhsien has quit (Ping timeout: 240 seconds)
2022-04-26 14:01:16	→	Pickchea has joined #haskell
2022-04-26 14:06:08	→	mattil has joined #haskell
2022-04-26 14:07:12	→	ralu1 has joined #haskell
2022-04-26 14:07:15	→	jgeerds has joined #haskell
2022-04-26 14:14:23	→	kuribas has joined #haskell
2022-04-26 14:15:11	→	yauhsien has joined #haskell
2022-04-26 14:15:11	→	zeenk has joined #haskell
2022-04-26 14:19:48	←	werneta has quit (Ping timeout: 246 seconds)
2022-04-26 14:20:26	→	gustik has joined #haskell
2022-04-26 14:21:14	←	zeenk has quit (Remote host closed the connection)
2022-04-26 14:21:16	→	coot has joined #haskell
2022-04-26 14:22:10	→	zeenk has joined #haskell
2022-04-26 14:22:25	←	gustik has quit (Remote host closed the connection)
2022-04-26 14:25:23	→	troydm has joined #haskell
2022-04-26 14:26:47	←	zeenk has quit (Excess Flood)
2022-04-26 14:27:11	→	zeenk has joined #haskell
2022-04-26 14:27:16	→	takuan has joined #haskell
2022-04-26 14:30:20	→	mc47 has joined #haskell
2022-04-26 14:32:10	→	searemind has joined #haskell
2022-04-26 14:32:24	←	jmdaemon has quit (Ping timeout: 246 seconds)
2022-04-26 14:33:39	←	dcoutts_ has quit (Ping timeout: 272 seconds)
2022-04-26 14:42:26	ℹ	AlexNoo_ is now known as AlexNoo
2022-04-26 14:42:29	→	cosimone has joined #haskell
2022-04-26 14:43:46	←	searemind has quit (Quit: 0.9.4)
2022-04-26 14:44:39	←	xaotuk has quit (Ping timeout: 240 seconds)
2022-04-26 14:44:48	→	Core4993 has joined #haskell
2022-04-26 14:44:51	→	searemind has joined #haskell
2022-04-26 14:46:16	←	acidjnk has quit (Ping timeout: 260 seconds)
2022-04-26 14:46:41	←	zyklotomic has quit (Ping timeout: 256 seconds)
2022-04-26 14:46:48	→	ubert1 has joined #haskell
2022-04-26 14:48:36	→	zyklotomic has joined #haskell
2022-04-26 14:49:46	←	eggplantade has quit (Remote host closed the connection)
2022-04-26 14:50:05	←	pooryorick has quit (Ping timeout: 256 seconds)
2022-04-26 14:50:20	→	pooryorick has joined #haskell
2022-04-26 14:52:46	←	tzh has quit (Quit: zzz)
2022-04-26 14:57:17	→	zeenk2 has joined #haskell
2022-04-26 14:57:20	←	zeenk has quit (Ping timeout: 248 seconds)
2022-04-26 15:00:36	→	tromp has joined #haskell
2022-04-26 15:03:17	←	searemind has quit (Quit: 0.9.4)
2022-04-26 15:04:50	←	zeenk2 has quit (Quit: Konversation terminated!)
2022-04-26 15:05:07	→	zeenk has joined #haskell
2022-04-26 15:12:06	ℹ	irc: disconnected from server
2022-04-26 15:12:35	→	oxide has joined #haskell
2022-04-26 15:12:35	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-26 15:12:35	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-26 15:12:35	ℹ	Channel #haskell: 706 nicks (1 op, 0 voices, 705 normals)
2022-04-26 15:12:35	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-26 15:12:35	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-26 15:14:11	→	__monty__ has joined #haskell
2022-04-26 15:14:43	←	Core4993 has quit (Quit: CoreIRC for Android - www.coreirc.com)
2022-04-26 15:15:51	←	zeenk has quit (Quit: Konversation terminated!)
2022-04-26 15:16:31	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-26 15:18:40	albet70	what's the quick way to split [1,2,3,4,5,6] to [[1,2],[3,4],[5,6]]? groupBy?
2022-04-26 15:19:47	abastro[m]	split package, I think
2022-04-26 15:20:16	yushyin	chunksOf from split package
2022-04-26 15:23:03	←	yauhsien has quit (Remote host closed the connection)
2022-04-26 15:23:59	→	tromp has joined #haskell
2022-04-26 15:28:04	→	anomal has joined #haskell
2022-04-26 15:32:23	←	econo has quit (Quit: Connection closed for inactivity)
2022-04-26 15:35:39	→	Midjak has joined #haskell
2022-04-26 15:36:54	←	td_ has quit (Ping timeout: 276 seconds)
2022-04-26 15:39:13	→	yauhsien has joined #haskell
2022-04-26 15:42:09	→	xaotuk has joined #haskell
2022-04-26 15:44:42	←	yauhsien has quit (Ping timeout: 276 seconds)
2022-04-26 15:45:28	←	anomal has quit (Remote host closed the connection)
2022-04-26 15:46:07	→	anomal has joined #haskell
2022-04-26 15:48:27	→	td_ has joined #haskell
2022-04-26 15:49:00	←	xaotuk has quit (Ping timeout: 272 seconds)
2022-04-26 15:49:19	→	xaotuk has joined #haskell
2022-04-26 15:50:16	→	eggplantade has joined #haskell
2022-04-26 15:55:49	←	eggplantade has quit (Ping timeout: 256 seconds)
2022-04-26 16:00:13	←	mvk has quit (Ping timeout: 250 seconds)
2022-04-26 16:00:13	→	CiaoSen has joined #haskell
2022-04-26 16:01:40	←	xff0x_ has quit (Ping timeout: 272 seconds)
2022-04-26 16:02:04	→	akegalj has joined #haskell
2022-04-26 16:08:30	→	gurkenglas has joined #haskell
2022-04-26 16:11:05	←	Lord_of_Life has quit (Ping timeout: 246 seconds)
2022-04-26 16:11:25	→	Lord_of_Life has joined #haskell
2022-04-26 16:17:03	→	andrey_ has joined #haskell
2022-04-26 16:17:51	←	pooryorick has quit (Ping timeout: 276 seconds)
2022-04-26 16:18:05	→	pooryorick has joined #haskell
2022-04-26 16:19:36	←	andrey__ has quit (Ping timeout: 260 seconds)
2022-04-26 16:20:45	←	slaydr has quit (Ping timeout: 256 seconds)
2022-04-26 16:20:54	Bulby[m]	So how do I connect to a dbus socket 🤔
2022-04-26 16:22:27	→	zebrag has joined #haskell
2022-04-26 16:23:53	←	ubert1 has quit (Read error: Connection reset by peer)
2022-04-26 16:26:04	→	searemind has joined #haskell
2022-04-26 16:26:35	←	gehmehgeh has quit (Quit: Leaving)
2022-04-26 16:27:35	←	mc47 has quit (Remote host closed the connection)
2022-04-26 16:31:38	←	searemind has quit (Quit: 0.9.4)
2022-04-26 16:32:57	yushyin	you connect to a unix domain socket, either the session bus socket or the system bus socket. however, the actual thing is that you should use a dbus client lib for the heavy lifting
2022-04-26 16:33:46	→	slaydr has joined #haskell
2022-04-26 16:35:23	Bulby[m]	how do I write to it
2022-04-26 16:35:32	Bulby[m]	from elsewhere
2022-04-26 16:38:26	←	jonathanx has quit (Remote host closed the connection)
2022-04-26 16:38:41	→	dhil has joined #haskell
2022-04-26 16:41:44	exarkun	unix domain sockets have mostly the same API as AF_INET sockets
2022-04-26 16:42:13	exarkun	you just pass a different address / address family to create/connect them
2022-04-26 16:42:44	exarkun	I'm not sure what you mean by "from elsewhere".
2022-04-26 16:43:00	Bulby[m]	from command line, sorry
2022-04-26 16:43:20	yushyin	dbus-send
2022-04-26 16:43:30	Bulby[m]	how do I know the socket name
2022-04-26 16:45:12	Bulby[m]	and what lib should I use? dbus (all lowercase) has no docs but DBus does
2022-04-26 16:45:14	yushyin	there are well-known message bus paths, clients will try to find one and just connect to it.
2022-04-26 16:46:01	Bulby[m]	yes, but that dbus-send command will be set in stone (or at best dependent on envvars)
2022-04-26 16:46:35	←	pavonia has quit (Quit: Bye!)
2022-04-26 16:48:42	→	gehmehgeh has joined #haskell
2022-04-26 16:49:58	→	gpncarl_ has joined #haskell
2022-04-26 16:50:10	→	jinsun__ has joined #haskell
2022-04-26 16:50:39	yushyin	seems like the dbus lib is at least somewhat maintained
2022-04-26 16:50:55	Bulby[m]	and two versions back it has docs
2022-04-26 16:50:59	←	gpncarl has quit (Ping timeout: 246 seconds)
2022-04-26 16:51:14	yushyin	check out the examples and/or the freedesktop tutorial on dbus and see what you can do with that
2022-04-26 16:51:17	→	lyiriyah[m] has joined #haskell
2022-04-26 16:51:26	yushyin	https://dbus.freedesktop.org/doc/dbus-tutorial.html
2022-04-26 16:51:27	Bulby[m]	what examples
2022-04-26 16:51:36	yushyin	https://github.com/rblaze/haskell-dbus/tree/master/examples
2022-04-26 16:52:47	Bulby[m]	ah, so the bus is an open thing... and I can tune in to only 1 event than dbus-send will send to
2022-04-26 16:53:37	←	jinsun has quit (Ping timeout: 272 seconds)
2022-04-26 16:53:40	→	jonathanx has joined #haskell
2022-04-26 16:54:22	→	Unicorn_Princess has joined #haskell
2022-04-26 16:59:36	←	machinedgod has quit (Remote host closed the connection)
2022-04-26 17:00:35	→	acidjnk has joined #haskell
2022-04-26 17:00:44	→	machinedgod has joined #haskell
2022-04-26 17:01:45	yushyin	Bulby[m]: it's a message bus for IPC, with some processes providing 'services' via this message bus and other processes accessing these services (sending messages,getting messages)
2022-04-26 17:02:10	Bulby[m]	I will figure it out eventually 😄
2022-04-26 17:03:53	yushyin	it has a pretty high-level object model with interfaces, methods, signals ... one has to read up a bit on the subject first
2022-04-26 17:04:53	Bulby[m]	I HATE READING! I LOVE STUMBLING INTO SOLUTONS!
2022-04-26 17:10:08	→	Hiring has joined #haskell
2022-04-26 17:10:30	→	xff0x_ has joined #haskell
2022-04-26 17:10:55	←	notzmv has quit (Ping timeout: 260 seconds)
2022-04-26 17:11:17	←	coot has quit (Quit: coot)
2022-04-26 17:11:38	←	xaotuk has quit (Ping timeout: 246 seconds)
2022-04-26 17:12:15	geekosaur	mrrr. dbus is client side only, apparently
2022-04-26 17:12:35	geekosaur	DBus was the first release of what is now dbus
2022-04-26 17:12:38	Bulby[m]	i am not sending anything
2022-04-26 17:12:46	geekosaur	ok
2022-04-26 17:13:54	→	xaotuk has joined #haskell
2022-04-26 17:15:08	←	pooryorick has quit (Ping timeout: 246 seconds)
2022-04-26 17:17:16	→	pooryorick has joined #haskell
2022-04-26 17:18:16	geekosaur	well, maybe not ok. sending is notthe point of client side vs. server side, a server might well only receive. you still need the ability to establish a new endpoint versus connecting to an existing one, etc.
2022-04-26 17:18:42	geekosaur	although that little Iknowof the dbus api should cover that part at least
2022-04-26 17:19:02	→	dminuoso has joined #haskell
2022-04-26 17:20:48	Bulby[m]	dbus seems to have no convientional access to the IO monad 😱 meaning unsafePerformIO
2022-04-26 17:21:08	geekosaur	https://github.com/geekosaur/xmonad.hs/blob/skkukuk/xmonad.hs#L241-L252 as client, sending to a server written in C (see also https://github.com/geekosaur/xmonad.hs/blob/skkukuk/xmonad.hs#L80-L82)
2022-04-26 17:21:59	geekosaur	I don't understand that comment, its operations run in IO as shown in my links
2022-04-26 17:22:30	Bulby[m]	I mean I want to println in the callback
2022-04-26 17:22:33	→	_xor has joined #haskell
2022-04-26 17:26:51	Bulby[m]	oh, AutoMethod lets me use IO 😶
2022-04-26 17:27:37	→	jao has joined #haskell
2022-04-26 17:29:02	←	zmt00 has quit (Ping timeout: 250 seconds)
2022-04-26 17:31:02	←	dminuoso has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-26 17:34:37	→	dminuoso has joined #haskell
2022-04-26 17:36:19	←	dminuoso has quit (Client Quit)
2022-04-26 17:39:28	→	dminuoso has joined #haskell
2022-04-26 17:40:23	←	dminuoso has quit (Client Quit)
2022-04-26 17:41:19	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-26 17:42:21	←	jgeerds has quit (Ping timeout: 276 seconds)
2022-04-26 17:42:23	←	mattil has quit (Ping timeout: 272 seconds)
2022-04-26 17:43:15	→	dminuoso has joined #haskell
2022-04-26 17:44:37	←	dminuoso has quit (Client Quit)
2022-04-26 17:44:51	→	tromp has joined #haskell
2022-04-26 17:46:00	→	dminuoso has joined #haskell
2022-04-26 17:52:52	→	eggplantade has joined #haskell
2022-04-26 17:56:12	←	xkuru has quit (Read error: Connection reset by peer)
2022-04-26 17:57:39	←	eggplantade has quit (Ping timeout: 256 seconds)
2022-04-26 18:00:16	→	mikoto-chan has joined #haskell
2022-04-26 18:02:29	→	cross has joined #haskell
2022-04-26 18:02:44	←	jespada_ has quit (Ping timeout: 260 seconds)
2022-04-26 18:05:31	→	jespada has joined #haskell
2022-04-26 18:12:06	→	alx741 has joined #haskell
2022-04-26 18:12:15	←	Pickchea has quit (Ping timeout: 276 seconds)
2022-04-26 18:12:54	←	[Leary] has quit (Remote host closed the connection)
2022-04-26 18:13:08	→	[Leary] has joined #haskell
2022-04-26 18:14:38	→	yauhsien has joined #haskell
2022-04-26 18:18:23	←	cfricke has quit (Quit: WeeChat 3.4.1)
2022-04-26 18:19:11	←	yauhsien has quit (Ping timeout: 246 seconds)
2022-04-26 18:27:59	→	zer0bitz has joined #haskell
2022-04-26 18:28:51	←	jespada has quit (Ping timeout: 250 seconds)
2022-04-26 18:32:03	→	jespada has joined #haskell
2022-04-26 18:38:50	→	geranim0 has joined #haskell
2022-04-26 18:48:17	→	shlevy[m] has joined #haskell
2022-04-26 18:49:59	←	acidjnk has quit (Ping timeout: 240 seconds)
2022-04-26 18:51:16	→	Guest5420 has joined #haskell
2022-04-26 18:51:56	→	Simon76 has joined #haskell
2022-04-26 18:52:25	←	Guest5420 has left #haskell
2022-04-26 18:54:40	→	vorpuni has joined #haskell
2022-04-26 18:57:27	←	Lord_of_Life has quit (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
2022-04-26 18:57:45	→	Lord_of_Life has joined #haskell
2022-04-26 19:00:01	←	ystael has quit (Quit: Lost terminal)
2022-04-26 19:01:59	→	abastro has joined #haskell
2022-04-26 19:11:32	→	wroathe has joined #haskell
2022-04-26 19:11:32	←	wroathe has quit (Changing host)
2022-04-26 19:11:32	→	wroathe has joined #haskell
2022-04-26 19:15:45	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-26 19:20:50	→	tromp has joined #haskell
2022-04-26 19:21:15	ℹ	Andrew is now known as AndrewYu
2022-04-26 19:21:56	→	ubert1 has joined #haskell
2022-04-26 19:23:57	ℹ	AndrewYu is now known as Andrew
2022-04-26 19:24:15	→	[itchyjunk] has joined #haskell
2022-04-26 19:25:03	→	ystael has joined #haskell
2022-04-26 19:26:21	→	jgeerds has joined #haskell
2022-04-26 19:28:10	→	zmt00 has joined #haskell
2022-04-26 19:28:14	→	shriekingnoise has joined #haskell
2022-04-26 19:29:11	←	TheCoffeMaker has quit (Ping timeout: 246 seconds)
2022-04-26 19:30:28	←	wroathe has quit (Ping timeout: 260 seconds)
2022-04-26 19:32:56	←	frost has quit (Ping timeout: 252 seconds)
2022-04-26 19:33:43	→	TheCoffeMaker has joined #haskell
2022-04-26 19:33:58	→	coot has joined #haskell
2022-04-26 19:37:00	←	akegalj has quit (Quit: leaving)
2022-04-26 19:38:15	→	Guest9846 has joined #haskell
2022-04-26 19:38:57	Guest9846	how to install haskell on ubuntu?
2022-04-26 19:39:54	geekosaur	https://haskell.org/ghcup
2022-04-26 19:40:01	geekosaur	the packaged ghc is way too old
2022-04-26 19:40:21	Guest9846	how about haskell-platform
2022-04-26 19:40:49	geekosaur	haskell-platform was discontinued
2022-04-26 19:41:08	geekosaur	it's better to let build tools like stack and cabal manage libraries for you
2022-04-26 19:41:53	Guest9846	ok
2022-04-26 19:42:55	←	Guest9846 has quit (Quit: Guest9846)
2022-04-26 19:43:01	geekosaur	the closest we get to "platforms" is stack LTS resolvers, but even then y... feh
2022-04-26 19:45:12	←	TheCoffeMaker has quit (Ping timeout: 276 seconds)
2022-04-26 19:46:16	→	TheCoffeMaker has joined #haskell
2022-04-26 19:47:21	←	Simon76 has quit (Quit: Client closed)
2022-04-26 19:48:16	←	albet70 has quit (Remote host closed the connection)
2022-04-26 19:53:55	→	searemind has joined #haskell
2022-04-26 19:54:22	→	albet70 has joined #haskell
2022-04-26 19:54:24	→	eggplantade has joined #haskell
2022-04-26 19:55:33	←	searemind has quit (Remote host closed the connection)
2022-04-26 19:55:59	→	searemind has joined #haskell
2022-04-26 19:59:30	←	eggplantade has quit (Ping timeout: 276 seconds)
2022-04-26 19:59:45	←	Brandon_IX has quit (Quit: leaving)
2022-04-26 20:00:34	→	justsomeguy has joined #haskell
2022-04-26 20:01:04	→	dextaa4 has joined #haskell
2022-04-26 20:01:40	→	vicfred has joined #haskell
2022-04-26 20:05:34	←	ec has quit (Ping timeout: 240 seconds)
2022-04-26 20:06:33	→	Sgeo has joined #haskell
2022-04-26 20:06:59	→	Pickchea has joined #haskell
2022-04-26 20:08:50	→	waleee has joined #haskell
2022-04-26 20:09:43	←	searemind has quit (Quit: 0.9.4)
2022-04-26 20:13:38	←	abastro has quit (Ping timeout: 246 seconds)
2022-04-26 20:15:38	→	searemind has joined #haskell
2022-04-26 20:16:19	←	searemind has quit (Client Quit)
2022-04-26 20:17:52	→	mmhat has joined #haskell
2022-04-26 20:18:44	⚡	Bulby[m] sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/6a10a5aac52fcc1a4dd97626b3f8765949929c47
2022-04-26 20:22:54	←	justsomeguy has quit (Ping timeout: 276 seconds)
2022-04-26 20:23:28	→	mvk has joined #haskell
2022-04-26 20:24:28	geekosaur	what's the other side look like? the example code I've seen suggests you don't have that quite right
2022-04-26 20:25:16	←	albet70 has quit (Remote host closed the connection)
2022-04-26 20:25:42	geekosaur	that said I'm not a dbus expert
2022-04-26 20:26:52	→	yauhsien has joined #haskell
2022-04-26 20:27:53	Bulby[m]	https://paste.tomsmeding.com/oIiQXaNe
2022-04-26 20:30:26	←	jonathanx has quit (Quit: Leaving)
2022-04-26 20:31:02	←	cdman has quit (Quit: Leaving)
2022-04-26 20:31:13	←	yauhsien has quit (Ping timeout: 256 seconds)
2022-04-26 20:31:23	→	albet70 has joined #haskell
2022-04-26 20:32:42	geekosaur	hm, that seems to match up, assuming the method you're sending is the Introspect one
2022-04-26 20:32:54	Bulby[m]	yes
2022-04-26 20:33:07	Bulby[m]	so why is it not printing
2022-04-26 20:33:18	←	Pickchea has quit (Ping timeout: 276 seconds)
2022-04-26 20:33:18	←	jgeerds has quit (Ping timeout: 276 seconds)
2022-04-26 20:34:05	geekosaur	UnknownObject suggests the client didn't get registered somehow, unless what it's saying is you missed some step to make it introspectable
2022-04-26 20:34:26	geekosaur	since you don't seem to register any methods, just the object, that may be the problem
2022-04-26 20:36:59	Bulby[m]	that autoMethod function it takes in is `String -> IO String`, so when I call the method it should be printing that string
2022-04-26 20:39:17	→	Brandon_IX has joined #haskell
2022-04-26 20:39:31	geekosaur	but the method you're calling is org.freedesktop.DBus.Introspectable.Introspect, isn't it?
2022-04-26 20:39:59	Bulby[m]	yes, but that can be called on any  client, no?
2022-04-26 20:41:18	geekosaur	I would guess it needs some support so it can send back what methods the client can accept
2022-04-26 20:43:24	←	xaotuk has quit (Ping timeout: 246 seconds)
2022-04-26 20:49:41	←	xff0x_ has quit (Read error: Connection reset by peer)
2022-04-26 20:50:51	←	lortabac has quit (Quit: WeeChat 2.8)
2022-04-26 20:53:03	←	takuan has quit (Remote host closed the connection)
2022-04-26 20:53:19	geekosaur	hm. actually if I read the introspection example correctly you call it differently. (I'm rummaging around in the source package)
2022-04-26 20:53:32	Bulby[m]	ah, I have fixed it, it was my object path
2022-04-26 20:53:38	geekosaur	yes
2022-04-26 20:54:02	→	fendor_ has joined #haskell
2022-04-26 20:54:18	→	takuan has joined #haskell
2022-04-26 20:55:10	⚡	Bulby[m] sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/7154e75622d062b80bc9a88bd43084a1e2844b82
2022-04-26 20:55:59	Bulby[m]	that will be... fun
2022-04-26 20:56:49	←	fendor has quit (Ping timeout: 272 seconds)
2022-04-26 20:57:31	geekosaur	you have to annotate stuff with HasCallStack constraints to get a meaningful call stack
2022-04-26 20:58:04	Bulby[m]	I mean, i'm surprised it showed up here at not over at the main terminal
2022-04-26 20:58:47	→	f-a has joined #haskell
2022-04-26 21:01:55	←	Hiring has quit (Quit: Client closed)
2022-04-26 21:03:19	←	merijn has quit (Ping timeout: 240 seconds)
2022-04-26 21:03:29	→	jgeerds has joined #haskell
2022-04-26 21:03:46	geekosaur	my guess is that's from --print-reply and something unexpected went wrong processing the request
2022-04-26 21:05:32	←	vicfred has quit (Quit: Leaving)
2022-04-26 21:06:19	←	alp_ has quit (Ping timeout: 240 seconds)
2022-04-26 21:08:35	←	waleee has quit (Quit: WeeChat 3.5)
2022-04-26 21:09:11	←	mikoto-chan has quit (Ping timeout: 256 seconds)
2022-04-26 21:09:56	Bulby[m]	😍 IT WORKS
2022-04-26 21:10:12	←	CiaoSen has quit (Ping timeout: 240 seconds)
2022-04-26 21:10:43	→	merijn has joined #haskell
2022-04-26 21:10:58	geekosaur	I'm curious as to why you went with string when dbus supports typed values
2022-04-26 21:11:26	Bulby[m]	you can pipe in any value
2022-04-26 21:13:59	monochrom	I guess you want to accept any string and do your own parsing and basically reinvent the wheel.
2022-04-26 21:14:10	←	f-a has left #haskell
2022-04-26 21:14:20	→	f-a has joined #haskell
2022-04-26 21:14:40	Bulby[m]	no, I don't parse anything. it just gets tossed into a string formatter and displayed on the status bar
2022-04-26 21:16:38	Bulby[m]	that error earlier is me forgetting to fill in the format
2022-04-26 21:16:52	←	anomal has quit (Remote host closed the connection)
2022-04-26 21:16:59	←	slaydr has quit (Remote host closed the connection)
2022-04-26 21:17:03	←	coot has quit (Quit: coot)
2022-04-26 21:17:11	EvanR	what does the d in dbus stand for
2022-04-26 21:17:47	monochrom	Wikipedia says "desktop".
2022-04-26 21:18:05	Bulby[m]	🖥️🚌
2022-04-26 21:18:09	monochrom	I would guess so too, the people are freedesktop.org
2022-04-26 21:18:25	megaTherion	it isnt even busd
2022-04-26 21:18:38	monochrom	heh
2022-04-26 21:18:53	monochrom	They have systemd, we have system fc. >:)
2022-04-26 21:19:13	⚡	monochrom mv /usr/bin/ghc /usr/bin/systemfc
2022-04-26 21:19:16	→	eggplantade has joined #haskell
2022-04-26 21:20:32	→	lbseale has joined #haskell
2022-04-26 21:21:25	←	dsrt^ has quit (Remote host closed the connection)
2022-04-26 21:22:02	EvanR	mv /bin/mv /bin/mv
2022-04-26 21:23:22	monochrom	Oh wait https://richarde.dev/papers/2017/dep-haskell-spec/dep-haskell-spec.pdf has both a system d and a system dc :)
2022-04-26 21:23:44	→	jonathanx has joined #haskell
2022-04-26 21:25:05	jonathanx	I am looking into lenses, and made a Traversable' using = row :: Int -> Traversal' (Matrix a) a
2022-04-26 21:25:05	jonathanx	row r = lens (Matrix.getRow' r) (Matrix.setRow r) . Lens.traverse
2022-04-26 21:25:29	→	comerijn has joined #haskell
2022-04-26 21:25:57	jonathanx	Now I want to turn it into an IndexedTraversable (Where the index is the vector index= Int)
2022-04-26 21:26:13	jonathanx	But when I try to look up how to do it I get lost in lenses typeclasses
2022-04-26 21:27:29	←	merijn has quit (Ping timeout: 246 seconds)
2022-04-26 21:28:07	jonathanx	can anyone hint me in some direction? :)
2022-04-26 21:30:06	←	eddiemundo has quit (Quit: You have been kicked for being idle)
2022-04-26 21:31:25	→	stackdroid18 has joined #haskell
2022-04-26 21:32:32	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-26 21:32:40	←	comerijn has quit (Quit: Lost terminal)
2022-04-26 21:35:12	←	lbseale has quit (Quit: Leaving)
2022-04-26 21:37:39	→	lbseale has joined #haskell
                                                      2022-04-27 18:07:47	→	oxide has joined #haskell
2022-04-27 18:07:47	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-27 18:07:47	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-27 18:07:47	ℹ	Channel #haskell: 721 nicks (1 op, 0 voices, 720 normals)
2022-04-27 18:07:47	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-27 18:07:47	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-27 18:08:13	→	yauhsien has joined #haskell
2022-04-27 18:08:15	←	raym has quit (Ping timeout: 246 seconds)
2022-04-27 18:08:52	dminuoso	exarkun:  Yes.
2022-04-27 18:09:18	←	abastro has quit (Ping timeout: 246 seconds)
2022-04-27 18:09:33	dminuoso	Ah hold on, I didn't spot the (a -> ...) inputs.
2022-04-27 18:11:38	dminuoso	It reminds me of `<+> :: Applicative f => f a -> f b -> f (a, b)` as a different way to think of Applicative
2022-04-27 18:13:11	[exa]	underrated representation^
2022-04-27 18:13:28	dminuoso	Well it's also not completely honest represetation.
2022-04-27 18:14:15	geekosaur	I tried generalizing it to Profunctor and still didn't find anything
2022-04-27 18:15:15	dminuoso	p a b -> p b c -> p a (b, c)
2022-04-27 18:15:18	dminuoso	Certainly looks a bit more charming
2022-04-27 18:15:51	dminuoso	I guess this looks a bit like Strong
2022-04-27 18:17:21	→	abastro has joined #haskell
2022-04-27 18:19:12	→	alx741 has joined #haskell
2022-04-27 18:22:56	dminuoso	uncurry' :: Strong p => p a (b -> c) -> p (a, b) c 
2022-04-27 18:22:58	dminuoso	Mmm
2022-04-27 18:24:16	→	raym has joined #haskell
2022-04-27 18:24:38	exarkun	now I gotta learn about profunctors but before I can do that I gotta learn about hasks
2022-04-27 18:25:57	dminuoso	Honestly you dont.
2022-04-27 18:27:03	dminuoso	If Functor is a type that you can fmap over one type variable, and Contravariant is a type that contramap over one type variable, a Profunctor is both a Functor in one and Contravariant in the other.
2022-04-27 18:27:06	dminuoso	That's it.
2022-04-27 18:27:08	←	jao has quit (Ping timeout: 260 seconds)
2022-04-27 18:27:41	dminuoso	lmap :: (a -> b) -> p b c -> p a c 
2022-04-27 18:27:44	dminuoso	rmap :: (b -> c) -> p a b -> p a c 
2022-04-27 18:27:46	dminuoso	Nothing more.
2022-04-27 18:27:50	[exa]	exarkun: I learned profunctors from prolens in a "type implementations for these types" game
2022-04-27 18:28:55	dminuoso	You can start by the observation that you can covariantly map over (->) in the output type and contravariantly map over the input type. The Profunctor instance of (->) is nothing more than `lmap` (contravariantly mapping over the input) and `rmap` (covariantly mapping over the output).
2022-04-27 18:34:34	←	mmhat has quit (Quit: WeeChat 3.5)
2022-04-27 18:35:10	→	Unicorn_Princess has joined #haskell
2022-04-27 18:44:39	←	raym has quit (Ping timeout: 240 seconds)
2022-04-27 18:50:42	→	raym has joined #haskell
2022-04-27 18:50:43	→	Pickchea has joined #haskell
2022-04-27 18:53:56	←	CiaoSen has quit (Ping timeout: 250 seconds)
2022-04-27 18:54:59	←	raym has quit (Ping timeout: 240 seconds)
2022-04-27 18:56:40	→	geranim0 has joined #haskell
2022-04-27 19:01:00	→	raym has joined #haskell
2022-04-27 19:01:23	→	__monty__ has joined #haskell
2022-04-27 19:06:04	→	eggplantade has joined #haskell
2022-04-27 19:08:59	←	abastro has quit (Ping timeout: 240 seconds)
2022-04-27 19:10:39	←	eggplantade has quit (Ping timeout: 256 seconds)
2022-04-27 19:11:43	←	yauhsien has quit (Remote host closed the connection)
2022-04-27 19:12:16	←	xsarnik has quit (Ping timeout: 248 seconds)
2022-04-27 19:12:28	→	yauhsien has joined #haskell
2022-04-27 19:13:06	←	xstill- has quit (Ping timeout: 276 seconds)
2022-04-27 19:14:35	→	[itchyjunk] has joined #haskell
2022-04-27 19:17:39	←	yauhsien has quit (Ping timeout: 276 seconds)
2022-04-27 19:21:00	→	wroathe has joined #haskell
2022-04-27 19:21:00	←	wroathe has quit (Changing host)
2022-04-27 19:21:00	→	wroathe has joined #haskell
2022-04-27 19:21:12	→	Guest81 has joined #haskell
2022-04-27 19:21:12	→	xsarnik has joined #haskell
2022-04-27 19:21:19	Guest81	Hi
2022-04-27 19:21:35	[exa]	o/
2022-04-27 19:21:40	Guest81	What up
2022-04-27 19:22:59	←	Guest81 has quit (Client Quit)
2022-04-27 19:23:14	→	Guest81 has joined #haskell
2022-04-27 19:24:09	←	raym has quit (Ping timeout: 276 seconds)
2022-04-27 19:24:43	→	xstill- has joined #haskell
2022-04-27 19:24:58	←	Guest81 has quit (Client Quit)
2022-04-27 19:25:24	→	waleee has joined #haskell
2022-04-27 19:25:29	→	yauhsien has joined #haskell
2022-04-27 19:25:32	→	raym has joined #haskell
2022-04-27 19:28:24	→	bontaq has joined #haskell
2022-04-27 19:28:41	→	kaph_ has joined #haskell
2022-04-27 19:28:51	←	kaph has quit (Read error: Connection reset by peer)
2022-04-27 19:36:28	←	albet70 has quit (Remote host closed the connection)
2022-04-27 19:39:56	←	wroathe has quit (Ping timeout: 260 seconds)
2022-04-27 19:40:51	shapr	good MORNING
2022-04-27 19:41:03	←	Pickchea has quit (Ping timeout: 276 seconds)
2022-04-27 19:41:12	geekosaur	ohai
2022-04-27 19:42:34	→	albet70 has joined #haskell
2022-04-27 19:42:41	tomsmeding	good afternoon :)
2022-04-27 19:42:42	absence	what could be wrong when "TimeZone minutes summer name <- getCurrentTimeZone" returns the right name, but the offset (minutes) is 0?
2022-04-27 19:43:05	absence	also summer is false
2022-04-27 19:43:07	shapr	I did a 20 minute presentation on random testing yesterday, was fun https://github.com/shapr/randomtesting
2022-04-27 19:43:52	→	shriekingnoise has joined #haskell
2022-04-27 19:44:56	shapr	I also got a really cool idea from someone during a test run of the presentation, they said "Could QuickCheck memoize random inputs to make each unique?"
2022-04-27 19:45:18	←	frost has quit (Ping timeout: 252 seconds)
2022-04-27 19:45:22	→	zer0bitz has joined #haskell
2022-04-27 19:45:26	shapr	That sounds like an easy change with good benefit?
2022-04-27 19:45:56	tomsmeding	each _what_ unique?
2022-04-27 19:46:54	shapr	It's easy for QC to generate some number of duplicate inputs in a single run, would be nice if inputs were checked for uniqueness in a particular run.
2022-04-27 19:47:12	shapr	like "already tried this input for this run, don't need to try it again" kind of thing
2022-04-27 19:47:27	tomsmeding	that would add an Eq constraint to quickCheck I guess
2022-04-27 19:47:38	tomsmeding	well, Ord to do it remotely efficiently
2022-04-27 19:47:38	shapr	huh, good point
2022-04-27 19:47:51	tomsmeding	(to not resort to O(n^2) checking)
2022-04-27 19:48:34	shapr	while preparing for this presentation I found https://github.com/nick8325/quickcheck-with-counterexamples
2022-04-27 19:49:02	shapr	I'd like to have that as part of a standard testing workflow.
2022-04-27 19:49:14	tomsmeding	also the Arbitrary (a -> b) instance is trouble there
2022-04-27 19:49:20	geekosaur	absence, can't reproduce that here
2022-04-27 19:49:23	tomsmeding	though I guess one should use Fun instead then
2022-04-27 19:49:26	geekosaur	Prelude Data.Time.LocalTime> getCurrentTimeZone >>= \(TimeZone {..}) -> return (timeZoneMinutes, timeZoneSummerOnly)
2022-04-27 19:49:26	geekosaur	(-240,True)
2022-04-27 19:49:50	shapr	Oh, I haven't thought about producing unique functions
2022-04-27 19:49:55	→	Sgeo has joined #haskell
2022-04-27 19:50:10	geekosaur	(sadly the Show instance for TimeZone is crap)
2022-04-27 19:50:15	tomsmeding	well quickcheck has support for generating functions as some kind of decision tree; IIRC that's the 'Fun' type. Those could have Ord easily
2022-04-27 19:50:29	tomsmeding	but you'd be forced to use the newtype
2022-04-27 19:51:05	shapr	It sounds like a worthwhile blog post if nothing else.
2022-04-27 19:51:20	shapr	describe the idea, try it out, see if it helps at all
2022-04-27 19:51:40	tomsmeding	I would kind of doubt that duplicate inputs really occur that often with most generators
2022-04-27 19:52:02	shapr	Happens often when I pay attention, but I don't have any actual recorded data
2022-04-27 19:52:41	shapr	so could be selection bias, I was looking for it when it happened :-)
2022-04-27 19:53:09	shapr	tomsmeding: any other prop testing low hanging fruit comes to mind?
2022-04-27 19:53:13	absence	geekosaur: yeah, it's definitely not normal
2022-04-27 19:53:24	←	raym has quit (Ping timeout: 276 seconds)
2022-04-27 19:53:43	shapr	I'd like to do a demo of *all* the cool tools for prop testing in Haskell
2022-04-27 19:53:45	→	raym has joined #haskell
2022-04-27 19:54:50	geekosaur	anyway it sounds like it thinks you're in UTC. if I ran that in the context of my IRC client it would do that, but that's because I deliberately run my IRC client in UTC
2022-04-27 19:56:02	absence	geekosaur: but then the "name" should've been UTC, and not my local time zone
2022-04-27 19:56:31	geekosaur	hrm
2022-04-27 19:56:56	absence	hm, actually it seems like "name" just contains the first part of whatever the TZ env variable is set to
2022-04-27 19:57:04	absence	i can put garbage in there and it will tell me that's the time zone
2022-04-27 19:58:11	tomsmeding	shapr: hmm, indeed small values seem to be generated lots of times
2022-04-27 19:58:34	geekosaur	I looked at the implementation and it's doing the right thing via system libc functions, so unless that's somehow jacked up it should be correct
2022-04-27 19:58:59	tomsmeding	I told it to test a (Int -> Bool) property 10000 times, and it got zero 323x, -1 242x, ..., 6 140x, ... 37 51x, ... 83 2x
2022-04-27 19:59:17	tomsmeding	shapr: smallcheck feels relevant here
2022-04-27 19:59:40	tomsmeding	there's also hedgehog but that's mostly a different interface for the same idea as quickcheck
2022-04-27 20:00:08	janus	i think the fact that you can choose your distribution and name it is a pretty stark difference
2022-04-27 20:00:19	tomsmeding	absence: what does `timedatectl status` return on the command line
2022-04-27 20:00:30	abastro[m]	Choose distribution?
2022-04-27 20:00:33	tomsmeding	janus: true, the interface is quite different :p
2022-04-27 20:01:09	absence	tomsmeding: command not found :D i guess the docker image doesn't have that
2022-04-27 20:01:10	tomsmeding	abastro[m]: quickcheck has Arbitrary instances, so there's one instance for one type; hedgehog instead lets you pass a generator function, so you don't need to define a new type if you want to use a different random generator
2022-04-27 20:01:20	tomsmeding	docker complicates things
2022-04-27 20:01:35	tomsmeding	absence: does `date` do the right thing :p
2022-04-27 20:02:10	absence	tomsmeding: it too does the wrong thing
2022-04-27 20:02:13	tomsmeding	absence: what does /etc/localtime point to, and what is in /etc/adjtime (not actually sure what the contents of the latter mean, but for comparison)
2022-04-27 20:02:27	janus	abastro[m]: yes, for example 'constant' 'linear' and so on: https://www.youtube.com/watch?v=AIv_9T0xKEo&t=21m22s
2022-04-27 20:02:44	absence	tomsmeding: they don't exist, there's only a TZ env variable
2022-04-27 20:02:56	tomsmeding	absence: does /usr/share/zoneinfo exist
2022-04-27 20:03:05	→	searemind has joined #haskell
2022-04-27 20:03:18	absence	tomsmeding: no, but /share/zoneinfo does... let me try to move it
2022-04-27 20:03:24	tomsmeding	lol
2022-04-27 20:03:25	janus	abastro[m]: if you turn those diagrams 90 deg, they look like distributions, no?
2022-04-27 20:03:28	geekosaur	if the date command is misbehaving the same way, you probably aren't going to fix this readily
2022-04-27 20:03:50	tomsmeding	absence: I would 'strace -o log.txt date' and find erroring syscalls, but not sure if you have strace :D
2022-04-27 20:03:57	tomsmeding	also, not sure if ontopic anymore for #haskell
2022-04-27 20:04:05	janus	e.g. for the 'linearFrom' diagram, the yellow line would be the expected value
2022-04-27 20:04:30	janus	not sure if i am abusing the word 'distribution' but it seem related
2022-04-27 20:04:37	absence	tomsmeding: now i have /usr/share/zoneinfo, and still same problem
2022-04-27 20:05:12	absence	tomsmeding: yeah, it's kinda off topic, but not completely. if some syscall fails, why doesn't the haskell function fail?
2022-04-27 20:06:31	geekosaur	you would have to study how the libc stuff works to understand that. short answer is, the "syscall" never fails, it just defaults to UTC like you are seeing
2022-04-27 20:06:40	tomsmeding	absence: good question, `date` doesn't fail either apparently
2022-04-27 20:06:46	geekosaur	this is for historical reasons
2022-04-27 20:06:53	janus	absence: you should note that you can't represent tzdb offsets accurately using an integer amount of minutes
2022-04-27 20:06:58	tomsmeding	geekosaur: why is "syscall" in scaarequotes
2022-04-27 20:07:00	janus	absence: the tzdb will use seconds for LMT
2022-04-27 20:07:14	geekosaur	because it's not really a system (kernel) call
2022-04-27 20:07:22	geekosaur	the kernel always works in UTC
2022-04-27 20:07:38	tomsmeding	I would look at the strace output to find file system accesses that fail
2022-04-27 20:07:40	janus	absence: so even if you make it work for current dates, it is gonna break for dates before the adoption of time zones, where LMT is used
2022-04-27 20:07:41	geekosaur	user presentation is in userspace
2022-04-27 20:07:49	tomsmeding	like, looking up some time zone database file which fails :p
2022-04-27 20:07:53	←	Sgeo has quit (Read error: Connection reset by peer)
2022-04-27 20:07:56	tomsmeding	_that_'s the syscalls I meant
2022-04-27 20:08:29	geekosaur	also it's complicated by the fact that TZ isn't necessarily looking in the timezone database, there's a TZ syntax to define a timezone in place
2022-04-27 20:08:35	←	searemind has quit (Remote host closed the connection)
2022-04-27 20:08:46	tomsmeding	like, my `date` opens /etc/localtime, and that already doesn't exist on absence's docker image, so I would be curious to see what `date` then tries
2022-04-27 20:08:52	geekosaur	TZ=FOO1:30BAR0:45 is legal and defines a timezone
2022-04-27 20:09:25	janus	absence: if you wanna get away from depending on so much runtime state, you can compile the tzdb into your application using the tz/tzdata packages that i have taken over
2022-04-27 20:09:28	←	vicfred has quit (Quit: Leaving)
2022-04-27 20:09:35	janus	@package tz
2022-04-27 20:09:35	lambdabot	https://hackage.haskell.org/package/tz
2022-04-27 20:11:16	→	Sgeo has joined #haskell
2022-04-27 20:12:27	absence	tomsmeding: i put strace in the docker image, and the problem turned out to be that it was looking for the zoneinfo in a completely unexpected place. setting TZDIR works around the issue. interesting that glibc just does the wrong thing in silence, but that's how it is i guess
2022-04-27 20:12:51	tomsmeding	absence: glibc is interesting in general
2022-04-27 20:13:08	tomsmeding	but nice that you found out :)
2022-04-27 20:13:19	tomsmeding	(what was the 'completely unexpected place'?)
2022-04-27 20:13:55	absence	janus: thanks, i'll keep that in mind for the future. unfortunately i'm currently just calling code that uses the "standard" time zone stuff
2022-04-27 20:13:56	→	Sgeo_ has joined #haskell
2022-04-27 20:14:08	geekosaur	as I mentioned earlier, "does the wrong thing in silence" is for historical reasons
2022-04-27 20:14:43	geekosaur	the timezone stuff is pretty well specified, even the parts that POSIX left out are specced by other standards becuase so much stuff relies on them
2022-04-27 20:14:50	geekosaur	(such as _tzset())
2022-04-27 20:16:21	→	f-a has joined #haskell
2022-04-27 20:16:28	absence	tomsmeding: inside the glibc nix package, but the files are in the tzdata package. there's an open issue on it
2022-04-27 20:16:58	tomsmeding	heh
2022-04-27 20:16:59	←	Sgeo has quit (Ping timeout: 240 seconds)
2022-04-27 20:17:20	tomsmeding	absence: if you'd said "I'm using docker and nix" from the beginning, I would've tableflipped and had no idea
2022-04-27 20:17:29	janus	hahah
2022-04-27 20:17:46	absence	geekosaur: historical or not, i would've preferred to get an indication that something was wrong, and not just the wrong answer when the same system call apparently lies about the time zone name
2022-04-27 20:18:13	⚡	janus patiently waits for maerwald to enter the discussion ( think he has opinions on nix? )
2022-04-27 20:18:21	absence	tomsmeding: good to know, i won't mention that in the future ;D
2022-04-27 20:18:59	tomsmeding	absence: presumably what's doing the thing here is not a system call; glibc (that `date` uses) reads TZ, looks up that timezone in what it thinks is the db, fails, shrugs, returns 0 with name from TZ, and `date` is none the wiser
2022-04-27 20:20:04	←	jpds has quit (Ping timeout: 240 seconds)
2022-04-27 20:20:11	absence	yes.. while indicating some kind of failure would be the best option, the next best would be to not use the name from TZ :)
2022-04-27 20:20:25	tomsmeding	I guess :p
2022-04-27 20:21:32	absence	anyway, i've learned yet another unix footgun the hard way, so that's fun. thanks for the help :)
2022-04-27 20:22:18	f-a	I am battling some Template Haskell (and what I believe is splicing scope) http://paste.debian.net/plain/1239198
2022-04-27 20:22:28	f-a	of course inverting the two lines makes the example work
2022-04-27 20:22:35	f-a	is there any other way around it?
2022-04-27 20:22:56	tomsmeding	don't think so
2022-04-27 20:23:23	f-a	ah! I suspected as much. Disappointing but understandable
2022-04-27 20:23:23	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-27 20:23:39	→	jpds has joined #haskell
2022-04-27 20:26:40	tomsmeding	f-a: you may try `mkName "hey2"` instead of `'hey2`, but that might fail as well
2022-04-27 20:30:58	→	Guest|30 has joined #haskell
2022-04-27 20:31:00	←	Guest|30 has quit (Client Quit)
2022-04-27 20:31:06	→	Vajb has joined #haskell
2022-04-27 20:31:36	f-a	mhh alas indeed it still complains  • Variable not in scope: hey2 :: Card  tomsmeding
2022-04-27 20:32:07	geekosaur	tomsmeding is correct, there is no error return (nor any API for one) at the level of libc
2022-04-27 20:32:40	geekosaur	f-a, I'm pretty sure that is the TH staging restriction and there's no way around it
2022-04-27 20:36:21	←	zfnmxt has quit (Changing host)
2022-04-27 20:36:21	→	zfnmxt has joined #haskell
2022-04-27 20:36:36	abastro[m]	Ahh
2022-04-27 20:36:37	←	lortabac has quit (Quit: WeeChat 2.8)
2022-04-27 20:37:20	f-a	I see, I see, thanks
2022-04-27 20:43:58	←	krappix has quit (Ping timeout: 252 seconds)
2022-04-27 20:45:28	←	cdman has quit (Quit: Leaving)
2022-04-27 20:49:49	→	eggplantade has joined #haskell
2022-04-27 20:51:53	←	yauhsien has quit (Remote host closed the connection)
2022-04-27 20:52:43	→	yauhsien has joined #haskell
2022-04-27 20:57:20	←	yauhsien has quit (Ping timeout: 248 seconds)
2022-04-27 21:01:17	→	dsrt^ has joined #haskell
2022-04-27 21:03:55	←	jakalx has left #haskell
2022-04-27 21:06:29	←	stiell_ has quit (Remote host closed the connection)
2022-04-27 21:06:43	←	epolanski has quit (Quit: Connection closed for inactivity)
2022-04-27 21:06:51	→	stiell_ has joined #haskell
2022-04-27 21:07:33	→	jakalx has joined #haskell
2022-04-27 21:07:47	→	yauhsien has joined #haskell
2022-04-27 21:09:55	←	xff0x_ has quit (Read error: Connection reset by peer)
2022-04-27 21:14:04	←	jpds has quit (Ping timeout: 240 seconds)
2022-04-27 21:14:35	→	jpds has joined #haskell
2022-04-27 21:15:23	←	jgeerds has quit (Ping timeout: 272 seconds)
2022-04-27 21:17:38	→	gensyst has joined #haskell
2022-04-27 21:17:51	gensyst	Is there something like Set, but without the Ord requirement?
2022-04-27 21:18:04	gensyst	(I want a list of elements known to be unique)
2022-04-27 21:18:09	janus	gensyst: HashSet?
2022-04-27 21:19:12	geekosaur	you need *some* constraint to do that. You can choose Ord (Set) or Hashable (HashSet)
2022-04-27 21:19:22	gensyst	ok thanks mates
2022-04-27 21:19:27	geekosaur	probably one could be done with just Eq but it'd be pretty slow
2022-04-27 21:19:56	gensyst	i just wanted a unique "list" of DayOfWeek. i guess i'll just do a newtype of DayOfWeek that implements Ord using fromEnum
2022-04-27 21:20:06	gensyst	will do for this purpose i guess
2022-04-27 21:20:19	gensyst	(assuming i don't assign any greater purpose to this ord)
2022-04-27 21:20:39	←	ccntrq has quit (Remote host closed the connection)
2022-04-27 21:22:24	janus	maybe it is possible to put the newtype in its own module, not export it and then it would be less likely to be abused
2022-04-27 21:23:07	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-27 21:23:54	f-a	another TH question: in a module I have got lots of (top level) `:: Int` declarations, is there a way to get a list of those names to generate/splice — say — a list of all of them?
2022-04-27 21:25:11	gensyst	janus yeah just internal no worries :D
2022-04-27 21:25:32	→	littlebobeep has joined #haskell
2022-04-27 21:30:14	←	ksqsf[m] has quit (Quit: You have been kicked for being idle)
2022-04-27 21:30:14	←	AdamS[m] has quit (Quit: You have been kicked for being idle)
2022-04-27 21:30:42	←	ubert1 has quit (Remote host closed the connection)
2022-04-27 21:32:38	c_wraith	f-a: huh. I would have thought there would be, but I can't actually find anything to do that. I've done similar stuff with instances before, but that's a different sort of problem
2022-04-27 21:33:33	←	eggplantade has quit (Remote host closed the connection)
2022-04-27 21:34:28	geekosaur	I think you can go through Q to get the compilation context, which gets you into functions in the ghc package, but that would be painful at best
2022-04-27 21:35:22	→	lbseale has joined #haskell
2022-04-27 21:35:30	tomsmeding	f-a: fairly sure you can't, quickcheck uses this utter abomination to get all declarations with name "prop_*": https://hackage.haskell.org/package/QuickCheck-2.14.2/docs/src/Test.QuickCheck.All.html#allProperties
2022-04-27 21:36:23	f-a	spicy! thanks
2022-04-27 21:36:41	tomsmeding	I mean, you could copy that code and do your own thing
2022-04-27 21:36:44	tomsmeding	but, y'know
2022-04-27 21:38:06	tomsmeding	gensyst: DayOfWeek implements Ord?
2022-04-27 21:39:02	janus	sunday is the first day of the week, heathens! :O aarararrgh
2022-04-27 21:39:16	geekosaur	@let import Data.Time.LocalTime
2022-04-27 21:39:18	lambdabot	 /sandbox/tmp/.L.hs:123:1: error:
2022-04-27 21:39:18	lambdabot	     Data.Time.LocalTime: Can't be safely imported!
2022-04-27 21:39:18	lambdabot	     The package (time-1.9.3) the module resides in isn't trusted.
2022-04-27 21:39:25	geekosaur	bah
2022-04-27 21:39:33	tomsmeding	% import Data.Time.LocalTime
2022-04-27 21:39:36	geekosaur	% it
2022-04-27 21:39:39	tomsmeding	oh yahb is still dead
2022-04-27 21:39:40	geekosaur	still dead
2022-04-27 21:39:42	tomsmeding	RIP
2022-04-27 21:41:46	geekosaur	hm, ghci for me says no Ord nor Hashable instance
2022-04-27 21:41:49	c_wraith	I'm surprised reifyModule is so limited.
2022-04-27 21:42:21	geekosaur	(with the "time" that comes with 8.10.7 at least)
2022-04-27 21:42:49	tomsmeding	new in time-1.11 apparently
2022-04-27 21:42:50	geekosaur	as of 9.2.2 Ord was added
2022-04-27 21:43:28	c_wraith	I understand why `reifyModule =<< thisModule' is limited - the module isn't complete yet. But if applied to a module that's already compiled, I'd hope for more info.
2022-04-27 21:43:35	janus	i am puzzled why Monday is the first enumeration value, but "toEnum 0" is Sunday
2022-04-27 21:43:42	janus	why did the time author choose one-indexing?
2022-04-27 21:43:49	tomsmeding	geekosaur: 9.2.1 too ;)
2022-04-27 21:44:03	geekosaur	I don't have that installed to check :)
2022-04-27 21:44:06	→	dextaa4 has joined #haskell
2022-04-27 21:44:08	tomsmeding	janus: that's dodgy
2022-04-27 21:44:45	←	mbuf has quit (Quit: Leaving)
2022-04-27 21:44:49	tomsmeding	javascript months all over again, but now for day-of-week
2022-04-27 21:44:55	geekosaur	trying to satisfy too many masters, probaly (US vs. Euro)
2022-04-27 21:45:10	janus	tomsmeding: what is dodgy about it to you? i don't see Enum specifying any first value. and indeed it shouldn't , since that is for bounded, right?
2022-04-27 21:45:11	geekosaur	*probably
2022-04-27 21:45:30	tomsmeding	janus: the 1-basedness is dodgy IMO
2022-04-27 21:45:32	gensyst	tomsmeding, no it doesn't but my newtype wrapper around it now does
2022-04-27 21:45:41	tomsmeding	gensyst: lol yay
2022-04-27 21:45:48	tomsmeding	gensyst: it does starting from ghc-9.2.1
2022-04-27 21:45:55	gensyst	lol nice!
2022-04-27 21:46:00	gensyst	thanks mates :)
2022-04-27 21:46:19	gensyst	i'm scared to upgrade to ghc9.x because of my streamly use
2022-04-27 21:46:20	tomsmeding	probably Ord was omitted before in order for the order of constructors not to matter
2022-04-27 21:46:27	←	xaotuk has quit (Ping timeout: 240 seconds)
2022-04-27 21:46:28	gensyst	streamly could performance degrade suddenly not sure
2022-04-27 21:47:00	janus	i guess the Enum class is just super weird and i shouldn't worry about it...
2022-04-27 21:47:14	tomsmeding	janus: I think that statement holds in general
2022-04-27 21:47:19	tomsmeding	or, it should hold
2022-04-27 21:48:00	c_wraith	yeah, the Enum instances for Float and Double should probably never be used. :)
2022-04-27 21:48:41	c_wraith	the way Enum is defined, it only really makes sense for Int-like things
2022-04-27 21:48:48	janus	c_wraith: is there a way to enforce that with compiler warnings?
2022-04-27 21:49:01	janus	or hlint or modulint
2022-04-27 21:50:38	geekosaur	I don't think hlint knows enough about types, only about code patterns
2022-04-27 21:50:46	tomsmeding	hlint doesn't typecheck
2022-04-27 21:50:47	EvanR	does it even make sense for Int-like things... 
2022-04-27 21:51:30	EvanR	> prev minBound
2022-04-27 21:51:32	lambdabot	 error:
2022-04-27 21:51:32	lambdabot	     • Variable not in scope: prev :: t0 -> t
2022-04-27 21:51:32	lambdabot	     • Perhaps you meant one of these:
2022-04-27 21:51:37	tomsmeding	> pred minBound
2022-04-27 21:51:37	geekosaur	it should be possibe for it to make sense for anything isomorphic to Int (but ideally, Integer). that doesn't mean it does as implemented
2022-04-27 21:51:38	lambdabot	 *Exception: Prelude.Enum.().pred: bad argument
2022-04-27 21:51:43	tomsmeding	> pred minBound :: Int
2022-04-27 21:51:44	lambdabot	 *Exception: Prelude.Enum.pred{Int}: tried to take `pred' of minBound
2022-04-27 21:53:02	→	tromp has joined #haskell
2022-04-27 21:53:04	←	stiell_ has quit (Ping timeout: 240 seconds)
2022-04-27 21:53:25	janus	why not return maxBound for 'prev minBound'?
2022-04-27 21:53:36	tomsmeding	> minBound - 1 :: Int
2022-04-27 21:53:38	lambdabot	 9223372036854775807
2022-04-27 21:53:46	tomsmeding	because the whole point of succ/pred is that they check bounds
2022-04-27 21:53:49	EvanR	depends on what laws we're supposed to have
2022-04-27 21:54:08	EvanR	yeah "bound" is the give away there xD
2022-04-27 21:54:24	tomsmeding	succ is nice for incrementing counters of type Int, because if it ever overflows, at least it'll crash instead of wrap
2022-04-27 21:55:26	←	kuribas has quit (Quit: ERC (IRC client for Emacs 26.3))
2022-04-27 21:55:51	EvanR	sqlite's strategy for incrementing Int, if you try to increment maxBound, go back and roll a random Int until you find an Int not in use, or crash after enough tries xD
2022-04-27 21:56:21	←	Everything has quit (Remote host closed the connection)
2022-04-27 21:59:46	←	dsrt^ has quit (Remote host closed the connection)
2022-04-27 21:59:55	←	acidjnk has quit (Ping timeout: 260 seconds)
2022-04-27 22:00:36	→	stiell_ has joined #haskell
2022-04-27 22:01:12	tomsmeding	Then you should first define "not in use" lol
2022-04-27 22:01:15	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-27 22:02:13	→	Vajb has joined #haskell
2022-04-27 22:02:54	→	justsomeguy has joined #haskell
2022-04-27 22:04:18	EvanR	context would be a table with INTEGER PRIMARY KEY or such
2022-04-27 22:06:39	tomsmeding	EvanR: (offtopic) the thing is, the algorithm you describe is linear in the size of the table worst case, but you can do log time if you have a tree index with sizes of each subtree; sqlite (and psql) do have the index, but not the tree sizes and that's dumb
2022-04-27 22:06:52	→	vorpuni has joined #haskell
2022-04-27 22:07:46	tomsmeding	Not having tree sizes means that SELECT * FROM t OFFSET n; is also linear in n, which is equally dumb
2022-04-27 22:07:50	tomsmeding	</rant>
2022-04-27 22:11:22	EvanR	how dare you question the universal optimality of "just use a dumb array and loop through it"
2022-04-27 22:11:27	EvanR	ism
2022-04-27 22:11:29	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-27 22:13:20	→	eggplantade has joined #haskell
2022-04-27 22:14:33	→	vicfred has joined #haskell
2022-04-27 22:15:43	→	tromp has joined #haskell
2022-04-27 22:16:29	EvanR	(ok not applicable since there's no such thing as an array of size int64)
2022-04-27 22:16:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-27 22:19:06	←	tromp has quit (Client Quit)
2022-04-27 22:22:17	→	mikoto-chan has joined #haskell
2022-04-27 22:28:35	monochrom	ooohhhh randomization but must not generate duplicates... Knuth's books have a section on that.
2022-04-27 22:28:48	→	littlebobeep has joined #haskell
2022-04-27 22:29:21	←	razetime has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2022-04-27 22:31:58	→	tzh has joined #haskell
2022-04-27 22:33:33	←	alx741 has quit (Quit: alx741)
2022-04-27 22:34:22	→	econo has joined #haskell
2022-04-27 22:39:39	→	CiaoSen has joined #haskell
2022-04-27 22:43:58	←	euandreh has quit (Quit: WeeChat 3.5)
2022-04-27 22:45:47	←	CiaoSen has quit (Ping timeout: 240 seconds)
2022-04-27 22:50:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-27 22:52:43	→	littlebobeep has joined #haskell
2022-04-27 23:00:42	→	jao has joined #haskell
2022-04-27 23:04:03	→	werneta has joined #haskell
2022-04-27 23:06:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-27 23:06:27	←	deadmarshal_ has quit (Ping timeout: 276 seconds)
2022-04-27 23:06:39	←	justsomeguy has quit (Ping timeout: 240 seconds)
2022-04-27 23:06:50	←	irfan has quit (Remote host closed the connection)
2022-04-27 23:09:15	→	euandreh has joined #haskell
2022-04-27 23:13:38	←	acarrico1 has quit (Quit: Leaving.)
2022-04-27 23:17:09	→	jgeerds has joined #haskell
2022-04-27 23:17:47	Bulby[m]	When setting up local hoogle can I search hackage-only packages
2022-04-27 23:18:52	f-a	Bulby[m]: does it search anything else?
2022-04-27 23:19:14	Bulby[m]	it searches stackage only 🙁
2022-04-27 23:19:29	Bulby[m]	and no hackage docs
2022-04-27 23:19:47	f-a	oh
2022-04-27 23:20:21	dminuoso	janus: That seems wrong.
2022-04-27 23:20:27	geekosaur	the problem with searching hackage is the indexes get too big iirc
2022-04-27 23:20:28	dminuoso	Oh gosh. I was scrolled up sorry.
2022-04-27 23:20:38	dminuoso	That was re "pred minBound"
2022-04-27 23:20:39	Bulby[m]	...
2022-04-27 23:20:54	geekosaur	which is why the default is to search stackage whoich is a reasonable subset
2022-04-27 23:21:00	Bulby[m]	can I index only local packages?
2022-04-27 23:21:04	geekosaur	yes
2022-04-27 23:21:09	f-a	yes
2022-04-27 23:21:10	f-a	-l
2022-04-27 23:21:15	f-a	when generating
2022-04-27 23:21:27	Bulby[m]	would stack throw a wrench in that at all
2022-04-27 23:21:29	geekosaur	I forget the incantation but you can tell cabal to create a hoogle index for everything it installs
2022-04-27 23:21:39	geekosaur	dunno about stack though, I don't use it
2022-04-27 23:21:50	geekosaur	wouldn't surprise me if it had a similar incantation
2022-04-27 23:22:45	←	eggplantade has quit (Remote host closed the connection)
2022-04-27 23:22:58	Bulby[m]	`stack hoogle` why are you installing stuff 😭
2022-04-27 23:23:13	geekosaur	installing a hoogle for stack?
2022-04-27 23:23:27	geekosaur	stack has this thing about keeping everything it uses under its own tight control
2022-04-27 23:23:38	Bulby[m]	yes. I hope I don't have to do this for each project
2022-04-27 23:23:39	→	tromp has joined #haskell
2022-04-27 23:23:51	geekosaur	it should be able to share it
2022-04-27 23:24:01	Bulby[m]	it better 🔪
2022-04-27 23:25:25	dminuoso	Im in emacs, how can I stop all HLS processes running?
2022-04-27 23:26:09	→	littlebobeep has joined #haskell
2022-04-27 23:32:04	→	acidjnk has joined #haskell
2022-04-27 23:32:52	←	yauhsien has quit (Remote host closed the connection)
2022-04-27 23:40:35	→	yauhsien has joined #haskell
2022-04-27 23:41:44	←	jinsun__ has quit ()
2022-04-27 23:42:03	→	tcsavage has joined #haskell
2022-04-27 23:46:06	←	yauhsien has quit (Ping timeout: 272 seconds)
2022-04-27 23:46:50	→	eggplantade has joined #haskell
2022-04-27 23:47:13	tomsmeding	$ ps -eo pid,cmd | grep haskell-language-server | grep -v grep | awk '{print $1}' | xargs kill
2022-04-27 23:47:45	tomsmeding	(not being serious0
2022-04-27 23:47:48	tomsmeding	s/0/)/
2022-04-27 23:50:04	Bulby[m]	grep -v grep?
2022-04-27 23:50:08	Bulby[m]	lol
2022-04-27 23:50:12	tomsmeding	grep will find itself
2022-04-27 23:50:38	tomsmeding	I mean, if you actually wanted to make this have any kind of robustness, you'd use ps's built-in functionality for filtering processes
2022-04-27 23:50:43	Bulby[m]	what does it do - will it break my system if I run it
2022-04-27 23:50:49	tomsmeding	(which, incidentally, I've rarely been able to make work)
2022-04-27 23:51:07	tomsmeding	Bulby[m]: it'll kill all HLS processes, including anything else that has 'haskell-language-server' in its command line
2022-04-27 23:51:10	←	jgeerds has quit (Ping timeout: 272 seconds)
2022-04-27 23:51:36	tomsmeding	it will likely not break your system, but nevertheless you probably shouldn't run it if you don't have to
2022-04-27 23:51:58	Bulby[m]	lol
2022-04-27 23:53:39	monochrom	Consider pgrep and pkill.
2022-04-27 23:54:07	→	CiaoSen has joined #haskell
2022-04-27 23:54:13	tomsmeding	monochrom: 'pgrep haskell-language-server' returns nothing for me, while there's _definitely_ an HLS running
2022-04-27 23:54:26	tomsmeding	and before you ask, 'pgrep haskell-language-server-8.10.7' also returns nothing
2022-04-27 23:55:19	tomsmeding	monochrom: https://tomsmeding.com/ss/get/tomsmeding/2nIUHt sorry for text-in-image
2022-04-27 23:55:32	tomsmeding	50% of the time when I try to use pgrep it just... doesn't work
2022-04-27 23:55:49	Bulby[m]	yeah wtf
2022-04-27 23:57:27	monochrom	That's strange, because if I do "pgrep key", I successfully get one that turns out to be /usr/bin/gnome-keyring-daemon --daemonize --login
2022-04-27 23:57:57	tomsmeding	Bulby[m]: more details on "what does it do", for practice reading command lines: 'ps -e' lists all processes, but only the 'pid' and 'cmd' columns; filter on HLS, but not grep itself (which also matches while grep runs, of course); print the first field but ignore leading spaces (different from cut -d' ' -f1); kill all the stuff that comes out
2022-04-27 23:58:08	tomsmeding	monochrom: interesting
2022-04-27 23:58:49	tomsmeding	monochrom: 'pgrep key' turns up _two_ gnome-keyring-daemon processes for me, with similarly "complex" command lines
2022-04-27 23:59:03	Bulby[m]	for me the columns seem to be cut off
2022-04-27 23:59:15	tomsmeding	Bulby[m]: on mac?
2022-04-27 23:59:20	Bulby[m]	`haskell-languag`
2022-04-27 23:59:23	Bulby[m]	on linux
2022-04-27 23:59:28	monochrom	It also picks up a "/usr/libexec/gsd-keyboard" and "/usr/libexec/gsd-media-keys" on my ubuntu-laiden laptop.
2022-04-27 23:59:31	tomsmeding	Bulby[m]: you're running 'ps -e', not 'ps -eo pid,cmd'
2022-04-27 23:59:40	Bulby[m]	oh
2022-04-28 00:00:06	tomsmeding	Bulby[m]: default command column is 'comm', which is some crappy AIX legacy compatibility column with limited width; 'cmd' shows the full command
2022-04-28 00:00:42	tomsmeding	monochrom: my arch machine doesn't have those, but that's kind of beside the point :p
2022-04-28 00:00:44	←	hexfive has quit (Quit: WeeChat 3.5)
2022-04-28 00:00:57	tomsmeding	point is I have no idea what pgrep does
2022-04-28 00:01:06	Bulby[m]	haskell-language-server-wrapper is its name
2022-04-28 00:01:15	geekosaur	that's just a script
2022-04-28 00:01:16	Bulby[m]	odd
2022-04-28 00:01:23	tomsmeding	Bulby[m]: that process has a child process with name like 'haskell-language-server-8.10.7'
2022-04-28 00:01:46	tomsmeding	if not, then something is going wrong
2022-04-28 00:02:06	tomsmeding	the wrapper just detects the project setup and starts the right HLS process, which has a version suffix
2022-04-28 00:04:48	gensyst	Is streamly (and other streaming libraries) one of the killer features of Haskell?
2022-04-28 00:04:54	gensyst	(What other langs can do this?)
2022-04-28 00:04:57	gensyst	this blows my mind
2022-04-28 00:05:14	gensyst	others: for loops with state all over the place
2022-04-28 00:05:42	tomsmeding	don't Rust iterators try to do a similar thing
2022-04-28 00:07:23	←	kraftwerk28 has quit (Quit: bruh)
2022-04-28 00:08:29	←	eggplantade has quit (Remote host closed the connection)
2022-04-28 00:10:28	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-28 00:11:40	→	eggplantade has joined #haskell
2022-04-28 00:12:13	←	eggplantade has quit (Remote host closed the connection)
2022-04-28 00:13:31	shapr	tomsmeding: I still think memoization of generated values is good low hanging fruit
2022-04-28 00:14:58	tomsmeding	shapr: idea: extend `Arbitrary a` with `arbCompare :: a -> a -> Ordering ; default arbCompare :: Ord a => a -> a -> Ordering ; arbCompare = compare`
2022-04-28 00:15:06	tomsmeding	(-XDefaultSignatures)
2022-04-28 00:15:16	tomsmeding	then only the instances for non-Ord types need to do anything special
2022-04-28 00:15:18	tomsmeding	minimal breakage
2022-04-28 00:15:53	←	shapr has quit (Remote host closed the connection)
2022-04-28 00:16:27	tomsmeding	@tell shapr (alternatively: add an `Ord a` constraint to `quickCheck`, and have `quickCheckNoMemo` without the constraint; but then you can't memoise over arguments but not others)
2022-04-28 00:16:27	lambdabot	Consider it noted.
2022-04-28 00:16:50	ℹ	irc: disconnected from server
2022-04-28 06:54:10	→	oxide has joined #haskell
2022-04-28 06:54:10	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-28 06:54:10	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-28 06:54:10	ℹ	Channel #haskell: 696 nicks (1 op, 0 voices, 695 normals)
2022-04-28 06:54:10	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-28 06:54:10	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-28 06:57:04	←	stackdroid18 has quit (Quit: hasta la vista... tchau!)
2022-04-28 06:57:42	→	alx741 has joined #haskell
2022-04-28 06:58:04	→	[Leary] has joined #haskell
2022-04-28 07:03:34	liz	is there a good way to write post-subtraction by a fixed number in a pointless-esque fashion? since (-1) has type (Num a) => a rather than (Num a) => a -> a, i've resorted to (\x -> x-1), but is there a nicer way to write that?
2022-04-28 07:03:45	←	alx741 has quit (Ping timeout: 272 seconds)
2022-04-28 07:04:27	shachaf	subtract 1
2022-04-28 07:04:45	shachaf	You can also ask lambdabot:
2022-04-28 07:04:48	shachaf	@pl \x -> x - 1
2022-04-28 07:04:48	lambdabot	subtract 1
2022-04-28 07:04:58	liz	oh wow, i didn't know lambdabot could do that
2022-04-28 07:05:00	liz	thanks
2022-04-28 07:05:26	maerwald[m]	Yeah, shove all your code through @pl :p
2022-04-28 07:05:47	exarkun	what is pl mnemonic for
2022-04-28 07:05:53	→	alx741 has joined #haskell
2022-04-28 07:08:38	maerwald[m]	Pointless
2022-04-28 07:09:01	exarkun	aha
2022-04-28 07:09:33	exarkun	ty
2022-04-28 07:10:07	EvanR	@src subtract
2022-04-28 07:10:07	lambdabot	subtract x y = y - x
2022-04-28 07:10:51	←	jakalx has left #haskell (Error from remote client)
2022-04-28 07:11:03	←	notzmv has quit (Ping timeout: 250 seconds)
2022-04-28 07:11:55	←	[itchyjunk] has quit (Ping timeout: 250 seconds)
2022-04-28 07:13:57	←	alx741 has quit (Ping timeout: 276 seconds)
2022-04-28 07:14:03	→	wroathe has joined #haskell
2022-04-28 07:14:03	←	wroathe has quit (Changing host)
2022-04-28 07:14:03	→	wroathe has joined #haskell
2022-04-28 07:14:33	→	andrey_ has joined #haskell
2022-04-28 07:15:07	→	shailangsa has joined #haskell
2022-04-28 07:15:16	←	waleee has quit (Ping timeout: 260 seconds)
2022-04-28 07:15:47	→	[itchyjunk] has joined #haskell
2022-04-28 07:15:55	→	alx741 has joined #haskell
2022-04-28 07:17:02	→	jakalx has joined #haskell
2022-04-28 07:17:04	←	andrey has quit (Ping timeout: 248 seconds)
2022-04-28 07:18:06	→	eggplantade has joined #haskell
2022-04-28 07:19:21	←	eggplantade has quit (Remote host closed the connection)
2022-04-28 07:19:36	→	eggplantade has joined #haskell
2022-04-28 07:21:29	←	alx741 has quit (Ping timeout: 272 seconds)
2022-04-28 07:22:04	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-28 07:24:04	→	bitdex has joined #haskell
2022-04-28 07:24:06	→	alx741 has joined #haskell
2022-04-28 07:25:15	←	slack1256 has quit (Remote host closed the connection)
2022-04-28 07:25:22	←	Codaraxis has quit (Quit: Leaving)
2022-04-28 07:29:24	←	alx741 has quit (Ping timeout: 246 seconds)
2022-04-28 07:31:02	←	kaph_ has quit (Read error: Connection reset by peer)
2022-04-28 07:31:36	→	alx741 has joined #haskell
2022-04-28 07:32:16	←	Unicorn_Princess has quit (Quit: Leaving)
2022-04-28 07:34:09	←	wroathe has quit (Ping timeout: 272 seconds)
2022-04-28 07:35:53	←	yauhsien has quit (Remote host closed the connection)
2022-04-28 07:36:39	→	yauhsien has joined #haskell
2022-04-28 07:40:55	←	alx741 has quit (Ping timeout: 256 seconds)
2022-04-28 07:41:19	←	yauhsien has quit (Ping timeout: 240 seconds)
2022-04-28 07:42:04	→	werneta has joined #haskell
2022-04-28 07:43:19	energizer	is there a tool that takes an expression and makes it point free?
2022-04-28 07:44:12	maerwald[m]	https://hackage.haskell.org/package/pointfree
2022-04-28 07:46:56	energizer	cool
2022-04-28 07:55:20	abastro[m]	@pointfree \x -> x
2022-04-28 07:55:20	lambdabot	Unknown command, try @list
2022-04-28 07:55:30	abastro[m]	Hm maybe not that
2022-04-28 07:55:38	abastro[m]	Ah right, pointless
2022-04-28 07:58:37	←	king_gs has quit (Remote host closed the connection)
2022-04-28 07:59:55	→	king_gs has joined #haskell
2022-04-28 08:00:33	←	lainon has quit (Ping timeout: 246 seconds)
2022-04-28 08:04:36	dsal	@pl \x -> x + 1 * x + 2
2022-04-28 08:04:36	lambdabot	(2 +) . join (+)
2022-04-28 08:05:19	←	td_ has quit (Ping timeout: 240 seconds)
2022-04-28 08:07:22	→	td_ has joined #haskell
2022-04-28 08:10:19	←	jao has quit (Ping timeout: 240 seconds)
2022-04-28 08:10:48	←	renzhi has quit (Ping timeout: 260 seconds)
2022-04-28 08:14:33	←	gpncarl_ has quit (Ping timeout: 246 seconds)
2022-04-28 08:14:59	→	gpncarl_ has joined #haskell
2022-04-28 08:16:27	←	phma has quit (Read error: Connection reset by peer)
2022-04-28 08:16:58	→	phma has joined #haskell
2022-04-28 08:20:43	→	tomgus1 has joined #haskell
2022-04-28 08:20:46	→	alx741 has joined #haskell
2022-04-28 08:22:18	→	renzhi has joined #haskell
2022-04-28 08:26:43	←	alx741 has quit (Ping timeout: 272 seconds)
2022-04-28 08:26:57	→	mbuf has joined #haskell
2022-04-28 08:28:57	→	alx741 has joined #haskell
2022-04-28 08:28:58	←	king_gs has quit (Read error: Connection reset by peer)
2022-04-28 08:28:59	→	notzmv has joined #haskell
2022-04-28 08:29:43	→	king_gs has joined #haskell
2022-04-28 08:34:33	←	alx741 has quit (Ping timeout: 276 seconds)
2022-04-28 08:36:55	→	alx741 has joined #haskell
2022-04-28 08:38:07	←	AlexZenon has quit (Ping timeout: 272 seconds)
2022-04-28 08:38:07	←	Alex_test has quit (Ping timeout: 272 seconds)
2022-04-28 08:39:45	←	AlexNoo has quit (Ping timeout: 276 seconds)
2022-04-28 08:43:00	←	alx741 has quit (Ping timeout: 276 seconds)
2022-04-28 08:43:28	→	hexfive has joined #haskell
2022-04-28 08:43:30	→	yauhsien has joined #haskell
2022-04-28 08:44:51	→	alx741 has joined #haskell
2022-04-28 08:44:59	→	d34df00d has joined #haskell
2022-04-28 08:46:40	→	Guest|50 has joined #haskell
2022-04-28 08:47:37	←	zaquest has quit (Remote host closed the connection)
2022-04-28 08:48:51	←	yauhsien has quit (Ping timeout: 276 seconds)
2022-04-28 08:49:22	←	Guest|50 has quit (Client Quit)
2022-04-28 08:50:28	←	notzmv has quit (Ping timeout: 260 seconds)
2022-04-28 08:50:48	←	alx741 has quit (Ping timeout: 276 seconds)
2022-04-28 08:50:58	→	zaquest has joined #haskell
2022-04-28 08:51:18	←	Maxdamantus has quit (Ping timeout: 246 seconds)
2022-04-28 08:54:25	→	notzmv has joined #haskell
2022-04-28 09:20:04	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-28 09:22:38	→	bitdex has joined #haskell
2022-04-28 09:23:13	ℹ	irc: disconnected from server
2022-04-28 12:12:15	→	oxide has joined #haskell
2022-04-28 12:12:15	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-28 12:12:15	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-28 12:12:15	ℹ	Channel #haskell: 695 nicks (1 op, 0 voices, 694 normals)
2022-04-28 12:12:15	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-28 12:12:15	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-28 12:13:27	←	deadmarshal_ has quit (Ping timeout: 272 seconds)
2022-04-28 12:14:30	←	_ht has quit (Remote host closed the connection)
2022-04-28 12:19:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-28 12:24:39	←	notzmv has quit (Ping timeout: 240 seconds)
2022-04-28 12:25:36	←	ryanbooker has quit (Quit: Connection closed for inactivity)
2022-04-28 12:27:37	→	dschrempf has joined #haskell
2022-04-28 12:28:22	→	prasad has joined #haskell
2022-04-28 12:29:04	prasad	Hi Can someone help me write https://paste.debian.net/1239277 with do notation
2022-04-28 12:31:44	int-e	Hmm, that wouldn't be an improvement? I guess a <* b would become do result <- a; b; return result.
2022-04-28 12:32:34	→	notzmv has joined #haskell
2022-04-28 12:32:45	→	littlebobeep has joined #haskell
2022-04-28 12:33:09	int-e	@undo do foo
2022-04-28 12:33:10	lambdabot	foo
2022-04-28 12:33:16	int-e	@redo foo
2022-04-28 12:33:17	lambdabot	Maybe you meant: undo todo do
2022-04-28 12:33:23	int-e	aww :P
2022-04-28 12:34:18	→	Macbethwin has joined #haskell
2022-04-28 12:34:24	prasad	So it would assign everything to result till eof and return result
2022-04-28 12:34:24	→	acidjnk has joined #haskell
2022-04-28 12:38:14	int-e	I'd prefer to leave that as is, and learn how to read `<*` and `*>` instead: they point to which action the result comes from (the other result is ignored).
2022-04-28 12:39:38	prasad	Thank you 
2022-04-28 12:39:45	←	prasad has quit (Quit: ERC (IRC client for Emacs 27.1))
2022-04-28 12:40:58	tomsmeding	@do foo
2022-04-28 12:40:59	lambdabot	foo
2022-04-28 12:41:11	tomsmeding	@do a >>= b
2022-04-28 12:41:12	lambdabot	do { c <- a; b c}
2022-04-28 12:41:16	tomsmeding	@do a <* b
2022-04-28 12:41:16	lambdabot	a <* b
2022-04-28 12:41:18	tomsmeding	heh
2022-04-28 12:42:14	tomsmeding	that missing space before the } though
2022-04-28 12:42:33	tomsmeding	int-e: minorest feature request ever, ^
2022-04-28 12:43:01	int-e	yeah I need to give lambdabot some love
2022-04-28 12:43:27	tomsmeding	not sure this particular thing is actually worth spending time on though :p
2022-04-28 12:43:42	→	forell has joined #haskell
2022-04-28 12:43:55	int-e	Though this particular thing may be rooted in haskell-src-exts...
2022-04-28 12:45:39	int-e	(yeah, it is based on that; it uses  prettyPrintWithMode (defaultMode { layout = PPInLine })  to transform an expression back to a string)
2022-04-28 12:46:43	int-e	Of course it may have been fixed there by now...
2022-04-28 12:47:14	int-e	(someone (tm) should test this)
2022-04-28 12:47:35	tomsmeding	`> prettyPrintWithMode (defaultMode { layout = PPInLine }) (Do () [Qualifier () (Var () (UnQual () (Ident () "a")))])` -> `"do { a}"`
2022-04-28 12:47:50	int-e	oh, thanks!
2022-04-28 12:48:28	tomsmeding	seems it chose haskell-src-exts-1.23.1, which is also the latest on hackage
2022-04-28 12:48:51	tomsmeding	int-e: thanks for giving that prettyPrintWithMode syntax, that saved some time :p
2022-04-28 12:50:57	⚡	int-e plays the not-my-bug card then.
2022-04-28 12:51:08	tomsmeding	int-e: looks like this is the culprit? https://hackage.haskell.org/package/haskell-src-exts-1.23.1/docs/src/Language.Haskell.Exts.Pretty.html#flatBlock
2022-04-28 12:51:21	tomsmeding	that space on one side only definitely looks familiar
2022-04-28 12:51:40	tomsmeding	came there through 'instance Pretty (Exp l)' -> 'ppBody' -> 'flatBlock'
2022-04-28 12:51:49	int-e	so it prepends a space, but doesn't append one... yeah, plausible.
2022-04-28 12:52:04	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-28 12:52:09	tomsmeding	lol see also the comment above
2022-04-28 12:52:56	tomsmeding	seems the haskell-src-exts author is of the opinion that there should be spaces on neither side, but because of dumb reasons the initial space is sometimes needed anyway
2022-04-28 12:54:14	→	yauhsien has joined #haskell
2022-04-28 12:54:26	int-e	@do -1 >> -2
2022-04-28 12:54:27	lambdabot	do { -1; -2}
2022-04-28 12:54:31	int-e	(lol)
2022-04-28 12:54:44	tomsmeding	yes
2022-04-28 12:54:50	→	alp_ has joined #haskell
2022-04-28 12:54:51	→	cfricke has joined #haskell
2022-04-28 12:55:04	tomsmeding	I wonder whether the author foresaw that or they got a bug report at some point
2022-04-28 12:55:11	int-e	but I guess we can have both a Monad and a Num instance for the same thing.
2022-04-28 12:55:33	←	yauhsien has quit (Remote host closed the connection)
2022-04-28 12:55:40	tomsmeding	definitely not invalid enough to not support it
2022-04-28 12:56:07	int-e	(ala  instance (Num a, Monad m) => Num (m a) where negate = fmap negate... though not precisely like that, hopefully)
2022-04-28 12:56:56	tomsmeding	aren't polynomials a monad where binding is substitution for the variable
2022-04-28 12:57:51	tomsmeding	(or, easier to see, 'join' just observes that a polynomial over polynomials in x is just, well, a polynomial in x)
2022-04-28 12:57:54	int-e	with implicit variables (like de Bruijn indices)? I suppse they are...
2022-04-28 12:58:02	tomsmeding	no over 1 variable
2022-04-28 12:58:48	int-e	I think we have two different views on the same thing
2022-04-28 12:59:02	←	pwug has quit (Remote host closed the connection)
2022-04-28 12:59:11	→	Midjak has joined #haskell
2022-04-28 12:59:23	int-e	Anyway, yes, it's not totally absurd that a monad action would start with `-`.
2022-04-28 12:59:36	tomsmeding	data Poly c = Poly [c] ; eval :: Num c => c -> Poly c -> c ; eval x (Poly coefs) = sum (zipWith (*) coefs (iterate (*x) 1))
2022-04-28 13:00:01	tomsmeding	or is this just the list monad lol
2022-04-28 13:00:17	int-e	nope, it isn't.
2022-04-28 13:00:40	tomsmeding	in any case, yes, what you said
2022-04-28 13:01:19	→	yauhsien has joined #haskell
2022-04-28 13:02:18	int-e	I guess you don't have a monad in Hask at all... because `join` needs to do arithmetic under both possible interpretations (one interpretation does substitution; the other interpretation equates two variables; actually there may be more...)
2022-04-28 13:02:22	→	bitdex has joined #haskell
2022-04-28 13:02:36	tomsmeding	oh, that's true
2022-04-28 13:03:01	→	xkuru has joined #haskell
2022-04-28 13:04:34	→	kraftwerk28 has joined #haskell
2022-04-28 13:05:03	←	mjacob has quit (Read error: Connection reset by peer)
2022-04-28 13:06:01	←	gpncarl_ has quit (Ping timeout: 272 seconds)
2022-04-28 13:06:12	←	yauhsien has quit (Ping timeout: 240 seconds)
2022-04-28 13:07:47	←	tzh has quit (Quit: zzz)
2022-04-28 13:07:56	←	eggplantade has quit (Remote host closed the connection)
2022-04-28 13:08:04	←	hiredman has quit (Ping timeout: 260 seconds)
2022-04-28 13:10:21	→	mjacob has joined #haskell
2022-04-28 13:11:15	int-e	tomsmeding: I could blindly replace "} by 
2022-04-28 13:11:43	int-e	"}" by " }" in the output. Surely noone would ever use silly things like '}' or "}" in do notation ;-)
2022-04-28 13:12:40	int-e	The realistic outcome is that I won't bother.
2022-04-28 13:13:19	dminuoso	Who is responsible for yahb? I miss it.
2022-04-28 13:14:39	tomsmeding	I have heard say that it was mniip
2022-04-28 13:15:03	tomsmeding	int-e: yeah not sure if text replacement will make the situation really better overall :p
2022-04-28 13:17:51	→	machinedgod has joined #haskell
2022-04-28 13:21:34	←	Macbethwin has quit (Remote host closed the connection)
2022-04-28 13:21:53	→	Macbethwin has joined #haskell
2022-04-28 13:23:49	→	pretty_dumm_guy has joined #haskell
2022-04-28 13:31:30	→	Pickchea has joined #haskell
2022-04-28 13:33:10	→	gpncarl_ has joined #haskell
2022-04-28 13:35:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-28 13:40:47	→	xaotuk has joined #haskell
2022-04-28 13:42:12	←	cosimone has quit (Quit: ERC 5.4 (IRC client for GNU Emacs 28.1))
2022-04-28 13:43:07	→	kuribas has joined #haskell
2022-04-28 13:43:41	→	ccntrq has joined #haskell
2022-04-28 13:45:02	←	_xor has quit (Quit: WeeChat 3.4.1)
2022-04-28 13:46:39	←	sprout has quit (Ping timeout: 240 seconds)
2022-04-28 13:49:03	←	anomal has quit (Remote host closed the connection)
2022-04-28 13:49:05	→	gurkenglas has joined #haskell
2022-04-28 13:50:33	→	gehmehgeh has joined #haskell
2022-04-28 13:50:43	int-e	wow, yahb is almost 5 years old (its first time was 2017-08-02 13:31:34 (UTC? Not sure, whatever the tunes.org logs used...)
2022-04-28 13:51:59	→	dextaa4 has joined #haskell
2022-04-28 13:51:59	int-e	Anyway, mniip was the owner then and I don't think that ever changed. :)
2022-04-28 13:52:58	Andrew	https://termbin.com/cvs3 - Faking Haskell typing and currying in Python
2022-04-28 13:53:58	int-e	Andrew: that's terrible... so in that spirit, can't you name all the functions the same?
2022-04-28 13:54:37	Andrew	int-e: That'd cause some infinite recursion
2022-04-28 13:55:17	←	f-a has left #haskell
2022-04-28 13:55:27	Andrew	At least I assume so
2022-04-28 13:55:47	Andrew	Python lambda expressions would have worked, but then I don't get static typing with mypy
2022-04-28 13:56:28	int-e	Andrew: it wouldn't (I tested it)
2022-04-28 13:56:46	int-e	the scoping works out just the way you need
2022-04-28 13:56:59	abastro[m]	Whag happened with mniip hmm
2022-04-28 13:57:11	Andrew	int-e: That's nice
2022-04-28 13:57:21	←	shriekingnoise has quit (Quit: Quit)
2022-04-28 13:58:34	abastro[m]	% 3 + 2
2022-04-28 13:58:48	abastro[m]	Oh yahb is ded :<
2022-04-28 14:02:29	int-e	Oh, the cloak it used was user/mniip/bot/yahb, that's pretty conclusive.
2022-04-28 14:02:48	←	jmdaemon has quit (Ping timeout: 276 seconds)
2022-04-28 14:03:06	int-e	@seen mniip
2022-04-28 14:03:06	lambdabot	I saw mniip leaving #haskell-offtopic, #haskell-blah, #ghc and #haskell 13d 14h 59m 9s ago.
2022-04-28 14:03:13	int-e	@seen mniip_
2022-04-28 14:03:13	lambdabot	I saw mniip_ leaving #haskell-offtopic, #ghc, #haskell and #haskell-blah 6d 50m 56s ago.
2022-04-28 14:03:26	int-e	@seen yahb
2022-04-28 14:03:27	lambdabot	I saw yahb leaving #haskell-beginners and #haskell 6d 58m 55s ago.
2022-04-28 14:03:48	int-e	(I almost forgot that I reactivated that a while ago)
2022-04-28 14:04:13	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-28 14:08:00	←	gurkenglas has quit (Ping timeout: 276 seconds)
2022-04-28 14:08:35	→	eggplantade has joined #haskell
2022-04-28 14:08:38	←	dextaa4 has quit (Remote host closed the connection)
2022-04-28 14:09:40	→	Guest45 has joined #haskell
2022-04-28 14:09:41	→	mmhat has joined #haskell
2022-04-28 14:10:14	←	Guest45 has quit (Client Quit)
2022-04-28 14:13:03	←	eggplantade has quit (Ping timeout: 256 seconds)
2022-04-28 14:14:35	→	frost has joined #haskell
2022-04-28 14:15:00	abastro[m]	int-e: Oh, mniip lost hope on haskell I guess? :<
2022-04-28 14:16:34	→	dextaa4 has joined #haskell
2022-04-28 14:16:54	Andrew	I'm surprised that there aren't many libraries and packages that handle async TCP sockets
2022-04-28 14:18:04	Andrew	There is `async', but it seems undocumented for the most part
2022-04-28 14:18:27	dminuoso	That's sort of by design.
2022-04-28 14:18:52	dminuoso	Just set up multiple threads and use STM to facilitate communication between them
2022-04-28 14:19:11	Andrew	damn
2022-04-28 14:19:25	dminuoso	The way the GHC RTS is set up with its I/O manager, is that you get a blocking interface but async implementation behind it.
2022-04-28 14:19:44	dminuoso	It's way more comfortable than the alternatives.
2022-04-28 14:22:13	abastro[m]	By design?
2022-04-28 14:22:29	abastro[m]	Why
2022-04-28 14:22:33	Andrew	I also, in Python, define functions inside functions that return the child function to "fake" IO etches
2022-04-28 14:22:53	abastro[m]	Is having no convenience library is by design, hmm
2022-04-28 14:23:30	int-e	abastro[m]: no clue. But the last time mniip "spoke" was https://ircbrowse.tomsmeding.com/day/lchaskell/2021/12/23?id=338036#trid338036 (as far as covered by those logs)... that's 4 months ago...
2022-04-28 14:24:40	Andrew	Having no convenience library by design, bruh
2022-04-28 14:24:47	⚡	Andrew imagines Haskell not having pragmatics
2022-04-28 14:28:23	→	deadmarshal_ has joined #haskell
2022-04-28 14:29:31	→	jgeerds has joined #haskell
2022-04-28 14:30:08	←	justosophy[m] has quit (Quit: You have been kicked for being idle)
2022-04-28 14:30:41	int-e	abastro[m]: He's russian, so there's all sorts of imaginable complications right now. :-/
2022-04-28 14:30:55	→	justosophy[m] has joined #haskell
2022-04-28 14:31:02	←	justosophy[m] has left #haskell
2022-04-28 14:31:40	int-e	(Looking at https://github.com/mniip ...mainly I was checking whether the xsBot repo has any of the yahb-specific stuff... apparently not.)
2022-04-28 14:33:56	int-e	On the positive side, there's /some/ recent activity on github.
2022-04-28 14:37:33	→	coot has joined #haskell
2022-04-28 14:41:07	←	EvanR has quit (Remote host closed the connection)
2022-04-28 14:41:26	→	EvanR has joined #haskell
2022-04-28 14:41:38	→	ubert1 has joined #haskell
2022-04-28 14:52:14	←	coot has quit (Quit: coot)
2022-04-28 14:52:50	→	coot has joined #haskell
2022-04-28 14:54:25	←	werneta has quit (Ping timeout: 256 seconds)
2022-04-28 14:56:11	→	werneta has joined #haskell
2022-04-28 15:03:47	←	econo has quit (Quit: Connection closed for inactivity)
2022-04-28 15:07:43	←	coot has quit (Quit: coot)
2022-04-28 15:07:51	←	zer0bitz has quit (Read error: Connection reset by peer)
2022-04-28 15:08:59	←	cfricke has quit (Ping timeout: 240 seconds)
2022-04-28 15:09:36	→	eggplantade has joined #haskell
2022-04-28 15:10:07	→	zer0bitz has joined #haskell
2022-04-28 15:11:37	←	notzmv has quit (Ping timeout: 250 seconds)
2022-04-28 15:14:35	←	eggplantade has quit (Ping timeout: 272 seconds)
2022-04-28 15:15:37	→	tromp has joined #haskell
2022-04-28 15:15:47	→	raehik has joined #haskell
2022-04-28 15:18:39	→	gurkenglas has joined #haskell
2022-04-28 15:22:19	←	xff0x_ has quit (Ping timeout: 240 seconds)
2022-04-28 15:27:30	←	gpncarl_ has quit (Ping timeout: 246 seconds)
2022-04-28 15:29:41	→	hiredman has joined #haskell
2022-04-28 15:33:06	←	xkuru has quit (Read error: Connection reset by peer)
2022-04-28 15:37:37	→	cfricke has joined #haskell
2022-04-28 15:38:58	←	[Leary] has quit (Remote host closed the connection)
2022-04-28 15:44:29	abastro[m]	int-e: Yea perhaps just lost faith in haskell being alive
2022-04-28 15:44:57	int-e	abastro[m]: Well, I don't know where you got that idea.
2022-04-28 15:45:02	⚡	int-e shrugs.
2022-04-28 15:46:16	←	acidjnk has quit (Ping timeout: 260 seconds)
2022-04-28 15:47:01	abastro[m]	<del>Perhaps I am projecting</del>
2022-04-28 15:47:14	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-28 15:47:18	abastro[m]	I myself did not yet lose faith, at least.
2022-04-28 15:49:17	→	Vajb has joined #haskell
2022-04-28 15:49:21	jackdk	It's never been a better year to write Haskell
2022-04-28 15:49:41	→	cosimone has joined #haskell
2022-04-28 15:49:47	←	dschrempf has quit (Quit: WeeChat 3.4.1)
2022-04-28 15:49:54	abastro[m]	Oh, I did not mean that
2022-04-28 15:50:29	abastro[m]	I meant more like, they perhaps moved on. It's not like haskell is becoming mainstream (I say that as alive)
2022-04-28 15:51:39	→	[Leary] has joined #haskell
2022-04-28 15:51:48	←	hexfive has quit (Quit: WeeChat 3.5)
2022-04-28 15:53:00	→	pja has joined #haskell
2022-04-28 15:53:01	←	kraftwerk28 has quit (Read error: Connection reset by peer)
2022-04-28 15:53:13	←	cfricke has quit (Ping timeout: 272 seconds)
2022-04-28 15:53:19	→	kraftwerk28 has joined #haskell
2022-04-28 15:53:21	tomsmeding	that's a fairly uncommon definition of 'alive' :p
2022-04-28 15:54:24	→	hexfive has joined #haskell
2022-04-28 15:55:12	abastro[m]	Yep, I wanted to classify fortran as dead
2022-04-28 15:59:24	→	sprout has joined #haskell
2022-04-28 16:03:15	→	Guest24 has joined #haskell
2022-04-28 16:04:28	←	Guest24 has quit (Client Quit)
2022-04-28 16:06:15	→	coot has joined #haskell
2022-04-28 16:07:53	maralorn	Honestly my main shift in thinking about this whole topic was that I don't think anymore that Haskell has to be mainstream.
2022-04-28 16:12:09	←	Lord_of_Life has quit (Ping timeout: 276 seconds)
2022-04-28 16:12:09	→	robosexual- has joined #haskell
2022-04-28 16:12:31	→	Lord_of_Life has joined #haskell
2022-04-28 16:15:17	←	pretty_dumm_guy has quit (Quit: WeeChat 3.5)
2022-04-28 16:15:51	←	robosexual- has quit (Client Quit)
2022-04-28 16:16:13	→	pretty_dumm_guy has joined #haskell
2022-04-28 16:16:32	←	liz has quit (Quit: Lost terminal)
2022-04-28 16:20:58	←	coot has quit (Quit: coot)
2022-04-28 16:21:30	→	Unicorn_Princess has joined #haskell
2022-04-28 16:27:23	→	gpncarl_ has joined #haskell
2022-04-28 16:27:30	←	kraftwerk28 has quit (Read error: Connection reset by peer)
2022-04-28 16:30:14	Sqaure	What would you say is the least hassle-free method of installing cabal+ghc for beginners?     
2022-04-28 16:30:43	Sqaure	eh "most hassle-free"* 
2022-04-28 16:30:45	abastro[m]	ghcup
2022-04-28 16:30:57	Sqaure	(...for windows and linux)
2022-04-28 16:30:58	abastro[m]	What
2022-04-28 16:31:10	←	tcard has quit (Quit: Leaving)
2022-04-28 16:31:29	Sqaure	abastro[m], what?
2022-04-28 16:31:38	abastro[m]	Oh, you dislike typing a bit powershell?
2022-04-28 16:32:02	abastro[m]	- bit in powershell*
2022-04-28 16:32:54	Sqaure	abastro[m], oh, i was just completing the question. I've never done haskell on windows so i have no clue about it =D
2022-04-28 16:33:06	Sqaure	sounds good enough for me.
2022-04-28 16:33:23	Sqaure	"WSL2" or whatever its called
2022-04-28 16:33:27	abastro[m]	Oh, sorry about it
2022-04-28 16:33:41	abastro[m]	I just found out you were correcting your question.
2022-04-28 16:33:52	Sqaure	np
2022-04-28 16:33:55	abastro[m]	I'd say, first try on native windows
2022-04-28 16:34:00	Sqaure	thanks for the info. Sounds good.
2022-04-28 16:34:06	abastro[m]	WSL is not worth it until you actually get into problems I think
2022-04-28 16:34:54	Sqaure	the ghcup page has the title "To install on Linux, macOS, FreeBSD or WSL2"
2022-04-28 16:35:04	Sqaure	is it possible to use it on native windows? 
2022-04-28 16:35:40	Sqaure	maybe it detects i use linux? 
2022-04-28 16:35:52	→	kraftwerk28 has joined #haskell
2022-04-28 16:36:11	→	tcard has joined #haskell
2022-04-28 16:36:11	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-28 16:36:13	abastro[m]	I guess it could detect that
2022-04-28 16:36:43	abastro[m]	There is small "show all platforms" button
2022-04-28 16:37:21	→	Vajb has joined #haskell
2022-04-28 16:37:49	→	jao has joined #haskell
2022-04-28 16:38:55	→	littlebobeep has joined #haskell
2022-04-28 16:39:23	→	xff0x_ has joined #haskell
2022-04-28 16:45:20	→	apache2 has joined #haskell
2022-04-28 16:48:34	apache2	hi! I'm a haskell beginner and I'm trying to write some patches for an existing project. It's using the packages Tasty, Hspec, Hedgehog for the test suite. While developing I'd like to inspect values at various points in the execution of the tests I'm writing. I've tried "Debug.Trace", but nothing appears on my terminal. I don't know if it's because one of those libraries slurp up stderr, or if I'm doing 
2022-04-28 16:48:35	apache2	something wrong. Is there a debugger that people use, or what's generally the best strategy to achieve what I want?
2022-04-28 16:49:01	apache2	I've been trying really hard to avoid wrapping things in the IO monad since the functions I'm modifying are otherwise pure.
2022-04-28 16:49:33	opqdonut	you probably need to put hedgehog in verbose mode to get output for testst that pass
2022-04-28 16:50:13	opqdonut	not sure how that's done, haven't used hedgehog
2022-04-28 16:50:37	→	kilolympus has joined #haskell
2022-04-28 16:51:13	apache2	oh, I had not considered that was an option. I'll check that out.
2022-04-28 16:51:13	opqdonut	tasty also has some flags like HideSuccesses
2022-04-28 16:51:15	opqdonut	and Quiet
2022-04-28 16:51:27	→	dhil has joined #haskell
2022-04-28 16:51:42	←	jakalx has left #haskell (Error from remote client)
2022-04-28 16:52:26	→	jakalx has joined #haskell
2022-04-28 16:53:26	opqdonut	as a last resort you could write your own trace function that appends to a file :)
2022-04-28 16:54:05	opqdonut	the source of `trace` is pretty simple: https://hackage.haskell.org/package/base-4.16.1.0/docs/src/Debug-Trace.html#trace
2022-04-28 16:54:17	opqdonut	the key parts are NOINLINE and unsafePerformIO
2022-04-28 16:55:07	apache2	good point
2022-04-28 16:57:45	→	zeenk has joined #haskell
2022-04-28 17:00:12	←	xaotuk has quit (Ping timeout: 240 seconds)
2022-04-28 17:04:25	jackdk	apache2: if you are running tests via `cabal test`, you may need `--test-show-details=streaming`
2022-04-28 17:05:21	jackdk	Sqaure: I was very impressed with the native windows version of GHCup last time I needed a haskell compiler on windows
2022-04-28 17:05:22	→	alex`` has joined #haskell
2022-04-28 17:06:28	Sqaure	jackdk, glad to hear!
2022-04-28 17:06:38	tomsmeding	(perhaps then haskell.org/ghcup needs to be updated that it supports native windows instead of only WSL2?)
2022-04-28 17:07:18	jackdk	tomsmeding: if you click "show all platforms" it gives you a powershell command to paste which installs a native windows version
2022-04-28 17:07:22	tomsmeding	oh wait it does lol yes
2022-04-28 17:07:26	⚡	tomsmeding is blind
2022-04-28 17:08:26	abastro[m]	Oh, it doesn't automatically adapt based on your OS?
2022-04-28 17:08:26	apache2	jackdk: I'm using "stack test" but I'll try cabal test
2022-04-28 17:08:30	abastro[m]	THAT needs to be fixed then
2022-04-28 17:08:39	tomsmeding	abastro[m]: probably, but I'm not on windows currently :p
2022-04-28 17:08:55	jackdk	abastro[m]: probably, but I'm not on windows currently :p
2022-04-28 17:09:11	⚡	tomsmeding hears an echo
2022-04-28 17:09:22	⚡	jackdk hears an echo
2022-04-28 17:09:24	jackdk	apache2: there may be a similar argument for `stack test`; I don't use stack so I don't know
2022-04-28 17:09:58	apache2	thanks for thesuggestions everyone, I'll report back when I get it working.
2022-04-28 17:10:19	apache2	I'm also trying to make an executable to use the library
2022-04-28 17:10:30	tomsmeding	fairly sure `stack test` shows all output
2022-04-28 17:10:38	apache2	so far I've been unable to find an incantation that 'stack' doesn't immediately delete from my .cabal file
2022-04-28 17:10:58	apache2	tomsmeding: it could be hedgehog or whatever hiding it
2022-04-28 17:11:11	tomsmeding	apache2: stack will overwrite your cabal file whatever you do if you have a package.yaml
2022-04-28 17:11:22	tomsmeding	so if there is a package.yaml and you're using stack, edit package.yaml instead
2022-04-28 17:11:30	apache2	OH, thanks tomsmeding 
2022-04-28 17:11:40	apache2	indeed I do, and it looks similar
2022-04-28 17:12:15	tomsmeding	similar content (to an extent...), different syntax
2022-04-28 17:13:00	abastro[m]	tomsmeding:  jackdk : I see. Btw the echo functionality is interesting
2022-04-28 17:15:24	apache2	tomsmeding: do you know if I can get stack/cabal/whichever to include the git commit as a Text binding at build time so I can have it appended to the version number?
2022-04-28 17:16:25	jackdk	apache2: I wouldn't be surprised if there is something on Hackage to do this as a TH splice
2022-04-28 17:17:15	jackdk	apache2: https://hackage.haskell.org/package/githash-0.1.6.2/docs/GitHash.html , for example
2022-04-28 17:19:05	→	mc47 has joined #haskell
2022-04-28 17:19:46	apache2	neat!
2022-04-28 17:23:58	→	cfricke has joined #haskell
2022-04-28 17:24:25	←	raehik has quit (Ping timeout: 272 seconds)
2022-04-28 17:27:00	abastro[m]	Why is it so hard to implement dijkstra in haskell
2022-04-28 17:29:16	apache2	I think it's available in fgl ?
2022-04-28 17:30:33	→	raehik has joined #haskell
2022-04-28 17:31:47	jackdk	https://hackage.haskell.org/package/search-algorithms-0.3.1/docs/Algorithm-Search.html#v:dijkstra I adore this interface
2022-04-28 17:35:03	abastro[m]	Hm, is it dijkstra or shortest_path_faster_algorithm
2022-04-28 17:35:31	→	pwug has joined #haskell
2022-04-28 17:39:35	→	zeenk2 has joined #haskell
2022-04-28 17:40:19	apache2	I'm trying to pull this in: https://hackage.haskell.org/package/diagnose-1.8.1/docs/Error-Diagnose.html  it says "This needs the flag diagnose:megaparsec-compat to be enabled." <-- what does that mean?
2022-04-28 17:42:09	←	zeenk has quit (Ping timeout: 256 seconds)
2022-04-28 17:42:31	geekosaur	you need to build the diagnose package with `--flags megaparsec-compat`
2022-04-28 17:42:50	geekosaur	they're actually using stack syntax there, cabal specifies flags for (sub)projects differently
2022-04-28 17:43:02	→	kappakappahappa has joined #haskell
2022-04-28 17:43:31	kappakappahappa	hi, for STM there is TQueue which is a first in first out queue. what should i do for a first in last out STM structure?
2022-04-28 17:46:48	apache2	geekosaur: this is a flag I'd add to .. stack.yaml ?
2022-04-28 17:47:48	geekosaur	not generally, you'd do it on the command line
2022-04-28 17:48:28	←	cosimone has quit (Remote host closed the connection)
2022-04-28 17:48:38	geekosaur	that package is actually breaking the rules, so there is no convenient way to do it
2022-04-28 17:49:27	geekosaur	so in the package that depends on diagnose you do `stack build --flags diagnose:megaparsec-compat`
2022-04-28 17:51:22	→	cosimone has joined #haskell
2022-04-28 17:52:35	←	xff0x_ has quit (Read error: Connection reset by peer)
2022-04-28 17:52:38	apache2	so the general way to that would be to use a Makefile ?
2022-04-28 17:53:01	abastro[m]	Hm actually I might be mistaken about dijkstra by one SO answer/comment
2022-04-28 17:53:30	abastro[m]	https://stackoverflow.com/questions/14012603/how-to-implement-dijkstra-algorithm-in-haskell   
2022-04-28 17:53:31	abastro[m]	See the second answer
2022-04-28 17:54:02	abastro[m]	So, how is that one a SPFA, not dijkstra?
2022-04-28 17:57:40	→	xff0x_ has joined #haskell
2022-04-28 17:58:03	apache2	geekosaur: I can't somehow specify in my import that I want that  to happen?
2022-04-28 17:58:57	←	zeenk2 has quit (Quit: Konversation terminated!)
2022-04-28 18:00:49	→	zeenk has joined #haskell
2022-04-28 18:01:47	geekosaur	no
2022-04-28 18:02:11	geekosaur	that's arguably how it *should* work but then they wouldn't be using flags, it'd be a separate package
2022-04-28 18:02:36	geekosaur	doing it with flags complicates a lot of things, which is why it's breaking the rules
2022-04-28 18:04:07	geekosaur	(in particular stack has to classify packages by what flags they were built with and use that in its solver plan, which makes it much slower when flags come into play like this)
2022-04-28 18:06:09	←	zeenk has quit (Quit: Konversation terminated!)
2022-04-28 18:08:07	←	mikoto-chan has quit (Ping timeout: 272 seconds)
2022-04-28 18:08:45	apache2	I see, so it's like the optional dependencies in ocaml/opam. :-/
2022-04-28 18:09:09	←	pretty_dumm_guy has quit (Ping timeout: 276 seconds)
2022-04-28 18:09:48	apache2	well I wish someone would have that argument with the author ; the screenshots do look really nice
2022-04-28 18:11:06	←	cfricke has quit (Ping timeout: 276 seconds)
2022-04-28 18:11:36	→	abastro has joined #haskell
2022-04-28 18:12:33	←	Pickchea has quit (Ping timeout: 272 seconds)
2022-04-28 18:15:25	abastro	Does anyone know about SPFA vs dijkstra to answer my question above?
2022-04-28 18:16:46	→	pretty_dumm_guy has joined #haskell
2022-04-28 18:18:04	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-28 18:18:46	←	lechner has quit (Quit: WeeChat 3.0)
2022-04-28 18:20:48	→	bitdex has joined #haskell
2022-04-28 18:21:03	→	acidjnk has joined #haskell
2022-04-28 18:22:42	→	alx741 has joined #haskell
2022-04-28 18:25:40	→	gaff has joined #haskell
2022-04-28 18:25:47	←	gaff has quit (Client Quit)
2022-04-28 18:25:50	→	[itchyjunk] has joined #haskell
2022-04-28 18:27:30	→	dschrempf has joined #haskell
2022-04-28 18:30:47	←	alx741 has quit (Ping timeout: 240 seconds)
2022-04-28 18:33:36	→	alx741 has joined #haskell
2022-04-28 18:35:08	←	bitdex has quit (Quit: = "")
2022-04-28 18:36:51	←	mjs2600 has quit (Ping timeout: 246 seconds)
2022-04-28 18:43:03	→	AlexNoo has joined #haskell
2022-04-28 18:43:21	←	alx741 has quit (Ping timeout: 256 seconds)
2022-04-28 18:44:36	→	Hiring has joined #haskell
2022-04-28 18:45:39	←	jao has quit (Ping timeout: 240 seconds)
2022-04-28 18:47:20	←	acidjnk has quit (Ping timeout: 260 seconds)
2022-04-28 18:47:28	→	zeenk has joined #haskell
2022-04-28 18:49:02	←	adanwan_ has quit (Remote host closed the connection)
2022-04-28 18:49:29	→	irfan has joined #haskell
2022-04-28 18:50:28	→	[_] has joined #haskell
2022-04-28 18:51:36	→	AlexZenon has joined #haskell
2022-04-28 18:52:34	←	kappakappahappa has quit (Quit: Leaving)
2022-04-28 18:52:54	→	skrio has joined #haskell
2022-04-28 18:53:24	←	[itchyjunk] has quit (Ping timeout: 260 seconds)
2022-04-28 18:53:41	→	mjs2600 has joined #haskell
2022-04-28 18:55:03	←	dschrempf has quit (Quit: WeeChat 3.4.1)
2022-04-28 18:56:56	→	wroathe has joined #haskell
2022-04-28 18:56:56	←	wroathe has quit (Changing host)
2022-04-28 18:56:56	→	wroathe has joined #haskell
2022-04-28 18:58:12	←	tdammers has quit (Ping timeout: 246 seconds)
2022-04-28 18:58:50	ℹ	[_] is now known as [itchyjunk]
2022-04-28 18:58:55	→	xaotuk has joined #haskell
2022-04-28 19:00:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-28 19:00:47	→	Alex_test has joined #haskell
2022-04-28 19:01:34	←	mjs2600 has quit (Read error: Connection reset by peer)
2022-04-28 19:01:52	→	mjs2600 has joined #haskell
2022-04-28 19:05:23	→	Sgeo has joined #haskell
2022-04-28 19:05:38	→	zebrag has joined #haskell
2022-04-28 19:06:13	→	__monty__ has joined #haskell
2022-04-28 19:06:21	←	deadmarshal_ has quit (Ping timeout: 276 seconds)
2022-04-28 19:08:31	→	adanwan has joined #haskell
2022-04-28 19:09:09	←	jonathanx has quit (Remote host closed the connection)
2022-04-28 19:09:31	←	abastro has quit (Ping timeout: 250 seconds)
2022-04-28 19:10:21	←	skrio has quit (Quit: Connection closed)
2022-04-28 19:12:06	→	tdammers has joined #haskell
2022-04-28 19:12:43	→	benin has joined #haskell
2022-04-28 19:20:00	←	wroathe has quit (Ping timeout: 276 seconds)
2022-04-28 19:22:32	→	alx741 has joined #haskell
2022-04-28 19:24:19	←	jespada has quit (Ping timeout: 240 seconds)
2022-04-28 19:25:50	→	jespada has joined #haskell
2022-04-28 19:26:25	→	o-90 has joined #haskell
2022-04-28 19:28:07	←	alx741 has quit (Ping timeout: 256 seconds)
2022-04-28 19:29:29	→	shriekingnoise has joined #haskell
2022-04-28 19:32:20	→	alx741 has joined #haskell
2022-04-28 19:32:33	←	AWizzArd has quit (Ping timeout: 248 seconds)
2022-04-28 19:34:10	→	AWizzArd has joined #haskell
2022-04-28 19:34:40	→	deadmarshal_ has joined #haskell
2022-04-28 19:37:39	←	zyklotomic has quit (Ping timeout: 240 seconds)
2022-04-28 19:38:03	←	alx741 has quit (Ping timeout: 272 seconds)
2022-04-28 19:38:31	←	o-90 has quit (Remote host closed the connection)
2022-04-28 19:39:19	←	deadmarshal_ has quit (Ping timeout: 272 seconds)
2022-04-28 19:39:58	→	zyklotomic has joined #haskell
2022-04-28 19:40:31	→	alx741 has joined #haskell
2022-04-28 19:41:43	←	pwug has quit (Quit: Leaving)
2022-04-28 19:45:22	→	lechner has joined #haskell
2022-04-28 19:46:00	←	alx741 has quit (Ping timeout: 276 seconds)
2022-04-28 19:46:16	←	Guest5 has quit (Quit: Client closed)
2022-04-28 19:47:04	→	deadmarshal_ has joined #haskell
2022-04-28 19:47:07	→	littlebobeep has joined #haskell
2022-04-28 19:47:24	←	frost has quit (Ping timeout: 252 seconds)
2022-04-28 19:47:35	→	alx741 has joined #haskell
2022-04-28 19:49:52	←	gurkenglas has quit (Ping timeout: 260 seconds)
2022-04-28 19:53:15	←	alx741 has quit (Ping timeout: 272 seconds)
2022-04-28 19:55:40	→	alx741 has joined #haskell
2022-04-28 19:56:49	←	lortabac has quit (Quit: WeeChat 2.8)
2022-04-28 20:01:24	←	sprout has quit (Ping timeout: 240 seconds)
2022-04-28 20:03:18	shapr	GOOD MORNING!
2022-04-28 20:04:08	→	Pickchea has joined #haskell
2022-04-28 20:04:20	←	alx741 has quit (Ping timeout: 260 seconds)
2022-04-28 20:04:46	geekosaur	o/
2022-04-28 20:04:46	→	yauhsien has joined #haskell
2022-04-28 20:05:07	→	steerio has joined #haskell
2022-04-28 20:06:01	→	alx741 has joined #haskell
2022-04-28 20:09:07	→	pwug has joined #haskell
2022-04-28 20:11:20	←	alx741 has quit (Ping timeout: 260 seconds)
2022-04-28 20:13:18	→	alx741 has joined #haskell
2022-04-28 20:17:00	←	FinnElija has quit (Remote host closed the connection)
2022-04-28 20:18:39	→	slaydr has joined #haskell
2022-04-28 20:19:13	←	alx741 has quit (Ping timeout: 272 seconds)
2022-04-28 20:19:14	steerio	hi everyone! I have a question about haskell-language-server. It seems that it builds my entire project under ~/.local/hie-bios, basically duplicating what I already have at ./dist-newstyle.
2022-04-28 20:19:22	steerio	Can I tell it to just use that?
2022-04-28 20:19:51	←	deadmarshal_ has quit (Ping timeout: 272 seconds)
2022-04-28 20:19:53	steerio	not .local but .cache, sry
2022-04-28 20:20:14	shapr	steerio: I think that happens once unless the files change
2022-04-28 20:20:22	shapr	steerio: which it would you want to use the cache?
2022-04-28 20:20:32	shapr	gutentag steerio 
2022-04-28 20:20:34	←	slaydr has quit (Quit: Leaving)
2022-04-28 20:20:39	shapr	there's also #haskell-language-server if you have more specific questions
2022-04-28 20:20:50	steerio	hello :)
2022-04-28 20:20:57	steerio	oh, didn't know about that
2022-04-28 20:21:25	steerio	thanks
2022-04-28 20:21:28	→	alx741 has joined #haskell
2022-04-28 20:22:25	steerio	shapr: I guess I'm averse to storing everything twice and leaving behind stuff that nothing will clean up, but otherwise that long first startup is my only concern, that's right.
2022-04-28 20:23:08	steerio	I've written a script that takes a list of paths to all your projects, and removes everything from ~/.cabal that's not needed by any :)
2022-04-28 20:23:42	←	vicfred has quit (Quit: Leaving)
2022-04-28 20:23:42	geekosaur	my understanding is that what it builds under there is not quite your project
2022-04-28 20:24:11	geekosaur	it's building .hie files (extended version of .hi files) with the information it needs to work
2022-04-28 20:25:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-28 20:25:56	steerio	looks the same to me: https://imgur.com/a/nmok0xR
2022-04-28 20:26:42	→	sprout has joined #haskell
2022-04-28 20:28:30	←	alx741 has quit (Ping timeout: 246 seconds)
2022-04-28 20:30:53	geekosaur	hm. I wonder if the .hi files have the same content
2022-04-28 20:31:01	←	ccntrq has quit (Ping timeout: 240 seconds)
2022-04-28 20:31:13	geekosaur	sadly that requires extra work to check because they're binary
2022-04-28 20:31:18	→	ccntrq has joined #haskell
2022-04-28 20:32:00	steerio	the md5sums are different
2022-04-28 20:32:26	steerio	but that doesn't necessarily tell much
2022-04-28 20:33:04	geekosaur	ghc --show-iface
2022-04-28 20:33:19	steerio	there are full paths in the binaries, so obviously hashes will differ :)
2022-04-28 20:34:52	steerio	geekosaur: ran that on .hi files from both paths and diffed the outputs; only paths and hashes differ
2022-04-28 20:35:06	geekosaur	hm
2022-04-28 20:35:30	dminuoso	I have some recursive code that generate lists in chunks, so I end up recursively ++'ing this list together.
2022-04-28 20:35:49	geekosaur	then I guess you have to ask the HLS folks why they need a separate build. I thought it was to generate extended interface files
2022-04-28 20:36:06	steerio	will do, thx
2022-04-28 20:36:08	dminuoso	Is there something more effective to construct a list from chunks?
2022-04-28 20:36:16	tomsmeding	dminuoso: difference lists?
2022-04-28 20:36:17	geekosaur	(and they're talking about fat interface files that combine that, information used by hoogle and haddock, etc. in a later ghc version)
2022-04-28 20:36:21	steerio	geekosaur: worst case I gain some knowledge
2022-04-28 20:36:34	dminuoso	tomsmeding: ahh yes.
2022-04-28 20:36:34	geekosaur	dminuoso, that sounds like a difflist to me, yeh
2022-04-28 20:36:43	tomsmeding	like, representing l by `\l' -> l ++ l'`
2022-04-28 20:37:05	→	pretty_d1 has joined #haskell
2022-04-28 20:37:17	←	pretty_d1 has quit (Client Quit)
2022-04-28 20:38:21	←	pretty_dumm_guy has quit (Ping timeout: 250 seconds)
2022-04-28 20:41:11	→	king_gs has joined #haskell
2022-04-28 20:42:47	←	raym has quit (Quit: kernel update, rebooting...)
2022-04-28 20:44:02	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-28 20:47:23	←	yauhsien has quit (Remote host closed the connection)
2022-04-28 20:50:24	→	FinnElija has joined #haskell
2022-04-28 20:50:58	→	notzmv has joined #haskell
2022-04-28 20:54:18	→	zer0bitz_ has joined #haskell
2022-04-28 20:55:40	←	notzmv has quit (Ping timeout: 250 seconds)
2022-04-28 20:55:44	←	zer0bitz has quit (Ping timeout: 248 seconds)
2022-04-28 20:57:31	→	yauhsien has joined #haskell
2022-04-28 21:01:44	←	king_gs has quit (Read error: Connection reset by peer)
2022-04-28 21:02:06	→	raym has joined #haskell
2022-04-28 21:02:08	←	yauhsien has quit (Ping timeout: 248 seconds)
2022-04-28 21:03:42	→	king_gs has joined #haskell
2022-04-28 21:07:58	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-28 21:08:19	←	efertone_ has quit (Ping timeout: 240 seconds)
2022-04-28 21:11:38	→	Vajb has joined #haskell
2022-04-28 21:12:29	→	efertone has joined #haskell
2022-04-28 21:16:27	←	alex`` has quit (Ping timeout: 246 seconds)
2022-04-28 21:19:11	←	dextaa4 has quit (Ping timeout: 256 seconds)
2022-04-28 21:23:41	←	king_gs has quit (Quit: king_gs)
2022-04-28 21:29:03	→	jao has joined #haskell
2022-04-28 21:30:11	←	nathansquan[m] has quit (Quit: You have been kicked for being idle)
2022-04-28 21:32:21	←	ubert1 has quit (Remote host closed the connection)
2022-04-28 21:32:21	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-28 21:32:54	→	Vajb has joined #haskell
2022-04-28 21:33:44	→	deadmarshal_ has joined #haskell
2022-04-28 21:34:19	←	jgeerds has quit (Ping timeout: 240 seconds)
2022-04-28 21:36:42	←	EvanR has quit (Quit: Leaving)
2022-04-28 21:38:09	←	deadmarshal_ has quit (Ping timeout: 246 seconds)
2022-04-28 21:38:09	←	Hiring has quit (Quit: Client closed)
2022-04-28 21:39:27	→	coot has joined #haskell
2022-04-28 21:40:10	→	vorpuni has joined #haskell
2022-04-28 21:41:02	→	stackdroid18 has joined #haskell
2022-04-28 21:42:59	←	jao has quit (Ping timeout: 256 seconds)
2022-04-28 21:44:53	→	EvanR has joined #haskell
2022-04-28 21:46:13	→	tromp has joined #haskell
2022-04-28 21:53:11	←	lechner has quit (Quit: WeeChat 3.5)
2022-04-28 21:54:04	→	vicfred has joined #haskell
2022-04-28 21:54:09	←	coot has quit (Quit: coot)
2022-04-28 21:55:35	←	vorpuni has quit (Remote host closed the connection)
2022-04-28 21:58:14	→	vorpuni has joined #haskell
2022-04-28 22:01:06	←	kuribas has quit (Remote host closed the connection)
2022-04-28 22:01:47	→	lechner has joined #haskell
2022-04-28 22:01:48	←	xff0x_ has quit (Ping timeout: 240 seconds)
2022-04-28 22:05:08	←	Macbethwin has quit (Remote host closed the connection)
2022-04-28 22:05:43	→	eggplantade has joined #haskell
2022-04-28 22:06:57	←	riatre has quit (Quit: http://quassel-irc.org)
2022-04-28 22:07:12	→	riatre has joined #haskell
2022-04-28 22:08:32	→	tzh has joined #haskell
2022-04-28 22:10:19	→	Macbethwin has joined #haskell
2022-04-28 22:12:49	→	kappakappahappa has joined #haskell
2022-04-28 22:12:54	←	Macbethwin has quit (Remote host closed the connection)
2022-04-28 22:13:49	kappakappahappa	hi, is there a function with this signature f :: (m a -> n a) -> ExceptT e m a -> ExceptT e n a ? I'm using MTL.
2022-04-28 22:15:16	kappakappahappa	I'm currently using this f g (ExceptT inner) = ExceptT (g inner) using the explicit constructor. This kind of seems awful.
2022-04-28 22:15:23	kappakappahappa	Is this an example of a natural transformation?
2022-04-28 22:15:27	tomsmeding	kappakappahappa: can that 'm a -> n a' function also be 'forall a. m a -> n a'
2022-04-28 22:15:35	tomsmeding	if no, then no; if yes, then what you wrote
2022-04-28 22:15:54	kappakappahappa	oh yes
2022-04-28 22:16:10	tomsmeding	kappakappahappa: in general, a natural transformation in haskell is anything of the form 'forall a. f a -> g a'; that's then a natural transformation from f to g
2022-04-28 22:16:22	tomsmeding	(bit hand-wavy)
2022-04-28 22:16:47	tomsmeding	(like, those things are natural transformations in a suitable sense, but there might be other things that can also be called natural transformations)
2022-04-28 22:16:48	←	benin has quit (Remote host closed the connection)
2022-04-28 22:17:10	kappakappahappa	though this pattern seems to apply to all the other monad transformers e.g. ReaderT r m a
2022-04-28 22:17:19	kappakappahappa	is there a function I can use in MTL that generalises?
2022-04-28 22:17:27	kappakappahappa	or related library*
2022-04-28 22:17:45	←	FinnElija has quit (Remote host closed the connection)
2022-04-28 22:18:06	tomsmeding	kappakappahappa: not possible for all monad transformers
2022-04-28 22:18:09	tomsmeding	e.g. https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-Cont.html#t:ContT
2022-04-28 22:18:16	tomsmeding	(standard counterexample)
2022-04-28 22:18:40	→	wroathe has joined #haskell
2022-04-28 22:18:40	←	wroathe has quit (Changing host)
2022-04-28 22:18:40	→	wroathe has joined #haskell
2022-04-28 22:18:43	→	FinnElija has joined #haskell
2022-04-28 22:18:58	tomsmeding	to transform 'ContT r m a' to 'ContT r n a' you need to write something of type: ((a -> m r) -> m r) -> (a -> n r) -> n r
2022-04-28 22:19:49	tomsmeding	you can do so if you have 'forall a. m a -> n a' _and_ 'forall a. n a -> m a', but not if you only have the former
2022-04-28 22:20:39	tomsmeding	(if you have both: make a 'a -> m r' by post-composing the 'a -> n r' with the 'forall a. m a -> n a', put it in the '(a -> m r) -> m r' to get an 'm r', then convert that to an 'n r' again)
2022-04-28 22:21:29	tomsmeding	"ContT is not a functor on the category of monads" -- this seems super relevant
2022-04-28 22:21:52	tomsmeding	right, that makes sense, you're kind of fmapping under the monad transformer
2022-04-28 22:22:45	shapr	@seen Heffalump
2022-04-28 22:22:45	lambdabot	I haven't seen Heffalump.
2022-04-28 22:22:46	shapr	aw
2022-04-28 22:22:57	⚡	shapr shrugs
2022-04-28 22:23:02	tomsmeding	so I guess one could define a class 'FunctorialMonadTrans t' with 'fmapMT :: (forall a. m a -> n a) -> t m a -> t n a' (names are probably really badly chosen)
2022-04-28 22:23:32	→	Macbethwin has joined #haskell
2022-04-28 22:24:45	←	Macbethwin has quit (Max SendQ exceeded)
2022-04-28 22:25:04	geekosaur	looks like they were last on via matrix in early February
2022-04-28 22:25:27	geekosaur	@seen Heffalump[m]
2022-04-28 22:25:28	lambdabot	I haven't seen Heffalump[m].
2022-04-28 22:25:59	kappakappahappa	Ahh thank you tomsmeding. I tried writing a natural transformation for ContT and had trouble.
2022-04-28 22:26:19	kappakappahappa	well when you mentioned it to see
2022-04-28 22:26:23	kappakappahappa	not that i actually needed that
2022-04-28 22:26:33	←	kilolympus has quit (Ping timeout: 276 seconds)
2022-04-28 22:26:40	kappakappahappa	i'm just using ExceptT, ReaderT and STM for now
2022-04-28 22:27:21	tomsmeding	(STM is not a monad transformer?)
2022-04-28 22:27:27	kappakappahappa	yeah
2022-04-28 22:27:28	kappakappahappa	i know
2022-04-28 22:27:34	tomsmeding	but yeah, should work perfectly for ExceptT and ReaderT :p
2022-04-28 22:27:53	→	_ht has joined #haskell
2022-04-28 22:27:59	←	wroathe has quit (Ping timeout: 240 seconds)
2022-04-28 22:28:06	kappakappahappa	it does :), ironically i've only used polysemy before but not MTL
2022-04-28 22:28:08	c_wraith	ST, on the other hand, clearly should be the S transformer!
2022-04-28 22:28:15	kappakappahappa	just a case of which libraries are there
2022-04-28 22:28:33	→	Macbethwin has joined #haskell
2022-04-28 22:28:33	kappakappahappa	haha ST the sae transformer
2022-04-28 22:31:19	←	pavonia has quit (Quit: Bye!)
2022-04-28 22:32:54	→	kaph has joined #haskell
2022-04-28 22:37:40	→	econo has joined #haskell
2022-04-28 22:46:59	monochrom	Hrm no Haskell Weekly News today?
2022-04-28 22:49:19	←	redb has quit (Ping timeout: 240 seconds)
2022-04-28 22:49:56	→	redb has joined #haskell
2022-04-28 22:52:28	→	ec has joined #haskell
2022-04-28 22:53:59	←	redb has quit (Ping timeout: 240 seconds)
2022-04-28 23:01:08	←	noctux has quit (Read error: Connection reset by peer)
2022-04-28 23:01:27	←	kappakappahappa has quit (Read error: Connection reset by peer)
2022-04-28 23:02:06	→	redb has joined #haskell
2022-04-28 23:04:57	←	mbuf has quit (Quit: Leaving)
2022-04-28 23:07:03	←	redb has quit (Ping timeout: 272 seconds)
2022-04-28 23:08:50	→	redb has joined #haskell
2022-04-28 23:09:39	→	anomal has joined #haskell
2022-04-28 23:14:21	→	yauhsien has joined #haskell
2022-04-28 23:14:47	←	redb has quit (Ping timeout: 256 seconds)
2022-04-28 23:15:34	EvanR	they'll have to turn in their weapon and license to use Weekly in their name
2022-04-28 23:16:06	→	redb has joined #haskell
2022-04-28 23:19:09	→	noctux has joined #haskell
2022-04-28 23:20:48	→	cfricke has joined #haskell
2022-04-28 23:21:37	←	redb has quit (Ping timeout: 272 seconds)
2022-04-28 23:21:37	←	Pickchea has quit (Ping timeout: 272 seconds)
2022-04-28 23:22:34	→	redb has joined #haskell
2022-04-28 23:26:40	←	yauhsien has quit (Remote host closed the connection)
2022-04-28 23:30:50	→	littlebobeep has joined #haskell
2022-04-28 23:32:19	→	yauhsien has joined #haskell
2022-04-28 23:32:50	→	waleee has joined #haskell
2022-04-28 23:32:51	←	redb has quit (Ping timeout: 276 seconds)
2022-04-28 23:37:21	←	ccntrq has quit (Remote host closed the connection)
2022-04-28 23:37:24	←	yauhsien has quit (Ping timeout: 276 seconds)
2022-04-28 23:38:05	tomsmeding	the week is not yet over :)
2022-04-28 23:38:43	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-28 23:42:15	→	acidjnk has joined #haskell
2022-04-28 23:53:47	→	redb has joined #haskell
2022-04-28 23:55:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-28 23:56:55	→	jgeerds has joined #haskell
2022-04-28 23:58:21	←	redb has quit (Ping timeout: 272 seconds)
2022-04-28 23:58:23	→	grantmaki has joined #haskell
2022-04-29 00:01:51	←	grantmaki has quit (Quit: Lost terminal)
2022-04-29 00:03:17	→	redb has joined #haskell
2022-04-29 00:04:03	→	jonathanx has joined #haskell
2022-04-29 00:07:19	←	redb has quit (Ping timeout: 240 seconds)
2022-04-29 00:07:24	←	Ram-Z has quit (Ping timeout: 240 seconds)
2022-04-29 00:09:49	→	Entertainment has joined #haskell
2022-04-29 00:14:47	→	tromp has joined #haskell
2022-04-29 00:15:39	←	cfricke has quit (Ping timeout: 246 seconds)
2022-04-29 00:15:49	←	zeenk has quit (Quit: Konversation terminated!)
2022-04-29 00:16:55	→	lain9 has joined #haskell
2022-04-29 00:18:32	→	redb has joined #haskell
2022-04-29 00:22:13	←	Macbethwin has quit (Remote host closed the connection)
2022-04-29 00:22:36	←	redb has quit (Ping timeout: 240 seconds)
2022-04-29 00:22:50	→	littlebobeep has joined #haskell
2022-04-29 00:27:01	ℹ	irc: disconnected from server
2022-04-29 08:24:16	→	oxide has joined #haskell
2022-04-29 08:24:16	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-29 08:24:16	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-29 08:24:16	ℹ	Channel #haskell: 699 nicks (1 op, 0 voices, 698 normals)
2022-04-29 08:24:17	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-29 08:24:17	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-29 08:24:43	←	mmhat has quit (Quit: WeeChat 3.5)
2022-04-29 08:27:05	←	Techcable has quit (Remote host closed the connection)
2022-04-29 08:27:33	←	deadmarshal_ has quit (Ping timeout: 272 seconds)
2022-04-29 08:28:18	→	Techcable has joined #haskell
2022-04-29 08:29:20	→	Techcable_ has joined #haskell
2022-04-29 08:33:39	←	gpncarl has quit (Ping timeout: 240 seconds)
2022-04-29 08:36:22	←	leungbk has quit (Ping timeout: 250 seconds)
2022-04-29 08:36:57	→	gpncarl has joined #haskell
2022-04-29 08:42:26	←	mvk has quit (Ping timeout: 250 seconds)
2022-04-29 08:45:10	→	leungbk has joined #haskell
2022-04-29 08:45:17	←	abastro has quit (Ping timeout: 272 seconds)
2022-04-29 08:55:51	←	zebrag has quit (Quit: Konversation terminated!)
2022-04-29 08:56:06	←	jao has quit (Ping timeout: 246 seconds)
2022-04-29 09:12:00	←	gpncarl has quit (Ping timeout: 276 seconds)
2022-04-29 09:12:26	→	mebious404 has joined #haskell
2022-04-29 09:14:15	→	benin has joined #haskell
2022-04-29 09:19:20	←	mebious404 has quit (Quit: Leaving)
2022-04-29 09:20:14	←	Techcable has quit (Remote host closed the connection)
2022-04-29 09:20:14	←	Techcable_ has quit (Remote host closed the connection)
2022-04-29 09:21:37	←	Unicorn_Princess has quit (Remote host closed the connection)
2022-04-29 09:30:14	←	tommd has quit (Ping timeout: 272 seconds)
2022-04-29 09:30:34	←	littlebo1eep has quit (Ping timeout: 240 seconds)
2022-04-29 09:35:59	→	slaydr has joined #haskell
2022-04-29 09:36:33	←	slaydr has quit (Client Quit)
2022-04-29 09:40:12	←	Macbethwin has quit (Ping timeout: 246 seconds)
2022-04-29 09:43:13	→	notzmv has joined #haskell
2022-04-29 09:45:14	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-29 09:48:31	←	leungbk has quit (Read error: Connection reset by peer)
2022-04-29 09:49:32	→	leungbk has joined #haskell
2022-04-29 09:51:09	→	P1RATEZ has joined #haskell
2022-04-29 09:55:39	→	littlebobeep has joined #haskell
2022-04-29 09:55:42	←	tureba has quit (Ping timeout: 256 seconds)
2022-04-29 09:56:25	→	tureba has joined #haskell
2022-04-29 09:58:57	→	takuan has joined #haskell
2022-04-29 09:59:09	←	P1RATEZ has quit (Changing host)
2022-04-29 09:59:09	→	P1RATEZ has joined #haskell
2022-04-29 09:59:54	←	P1RATEZ has quit (Remote host closed the connection)
2022-04-29 10:03:37	←	zyklotomic has quit (Ping timeout: 256 seconds)
2022-04-29 10:05:01	←	jakalx has left #haskell
2022-04-29 10:05:40	→	zyklotomic has joined #haskell
2022-04-29 10:07:57	→	P1RATEZ has joined #haskell
2022-04-29 10:08:34	ℹ	jaamro is now known as ormaaj
2022-04-29 10:13:45	←	redb has quit (Ping timeout: 276 seconds)
2022-04-29 10:14:00	→	cynomys has joined #haskell
2022-04-29 10:23:55	←	xff0x_ has quit (Read error: Connection reset by peer)
2022-04-29 10:23:58	→	redb has joined #haskell
2022-04-29 10:26:05	→	Vajb has joined #haskell
2022-04-29 10:28:31	←	redb has quit (Ping timeout: 272 seconds)
2022-04-29 10:31:05	→	deadmarshal_ has joined #haskell
2022-04-29 10:33:22	←	kmein has quit (Quit: ciao kakao)
2022-04-29 10:35:26	→	kmein has joined #haskell
2022-04-29 10:37:45	→	vicfred has joined #haskell
2022-04-29 10:38:22	→	redb has joined #haskell
2022-04-29 10:40:11	→	xff0x_ has joined #haskell
2022-04-29 10:40:52	→	michalz has joined #haskell
2022-04-29 10:45:37	←	redb has quit (Ping timeout: 272 seconds)
2022-04-29 10:47:31	→	Techcable has joined #haskell
2022-04-29 10:50:36	→	jakalx has joined #haskell
2022-04-29 10:52:47	←	liz has quit (Quit: Lost terminal)
2022-04-29 10:53:34	→	redb has joined #haskell
2022-04-29 11:04:44	→	gpncarl has joined #haskell
2022-04-29 11:06:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-29 11:08:38	→	littlebobeep has joined #haskell
2022-04-29 11:08:58	←	jargon_ has quit (Quit: Nini. ZZzz...)
2022-04-29 11:22:32	dsal	abastro[m]: I'm too about to go to bed to read that, but I think it's just looking at the shortest path to the next node.  dijkstra looks at the shortest total path on every step.
2022-04-29 11:27:49	←	bliminse_ has quit (Quit: leaving)
2022-04-29 11:29:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-29 11:33:42	←	gpncarl has quit (Ping timeout: 276 seconds)
2022-04-29 11:33:44	←	deadmarshal_ has quit (Ping timeout: 272 seconds)
2022-04-29 11:34:06	→	bliminse has joined #haskell
2022-04-29 11:34:28	←	leungbk has quit (Ping timeout: 250 seconds)
2022-04-29 11:35:01	←	xff0x_ has quit (Ping timeout: 272 seconds)
2022-04-29 11:36:28	→	xff0x_ has joined #haskell
2022-04-29 11:37:14	→	searemind has joined #haskell
2022-04-29 11:38:01	←	searemind has quit (Client Quit)
2022-04-29 11:40:45	→	alp_ has joined #haskell
2022-04-29 11:41:18	int-e	abastro[m]: it's closer to Dijkstra than to SPFA, since it picks nodes in order of increasing distance... but the toBeVisited set can contain useless entries (the same node at different costs).
2022-04-29 11:47:10	←	P1RATEZ has quit (Remote host closed the connection)
2022-04-29 11:51:34	←	img has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-29 11:52:58	→	img has joined #haskell
2022-04-29 11:57:37	→	gpncarl has joined #haskell
2022-04-29 12:01:23	→	gpncarl_ has joined #haskell
2022-04-29 12:01:57	←	gpncarl has quit (Ping timeout: 246 seconds)
2022-04-29 12:02:22	→	tromp has joined #haskell
2022-04-29 12:02:32	←	Sgeo has quit (Read error: Connection reset by peer)
2022-04-29 12:04:06	→	CiaoSen has joined #haskell
2022-04-29 12:06:39	→	acidjnk has joined #haskell
2022-04-29 12:07:49	←	Vajb has quit (Read error: Connection reset by peer)
2022-04-29 12:08:01	→	Vajb has joined #haskell
2022-04-29 12:12:49	←	gpncarl_ has quit (Ping timeout: 256 seconds)
2022-04-29 12:15:52	→	gpncarl_ has joined #haskell
2022-04-29 12:20:34	←	briandaed has quit (Remote host closed the connection)
2022-04-29 12:21:33	→	littlebobeep has joined #haskell
2022-04-29 12:25:03	←	son0p has quit (Ping timeout: 246 seconds)
2022-04-29 12:28:58	→	lortabac has joined #haskell
2022-04-29 12:33:12	←	renzhi has quit (Ping timeout: 260 seconds)
2022-04-29 12:35:26	←	ircbrowse_tom has quit (Quit: ZNC 1.7.5+deb4 - https://znc.in)
2022-04-29 12:35:51	→	ircbrowse_tom has joined #haskell
2022-04-29 12:37:43	→	chele has joined #haskell
2022-04-29 12:38:00	←	[itchyjunk] has quit (Read error: Connection reset by peer)
2022-04-29 12:39:34	→	yauhsien has joined #haskell
2022-04-29 12:39:47	→	deadmarshal_ has joined #haskell
2022-04-29 12:44:24	←	deadmarshal_ has quit (Ping timeout: 260 seconds)
2022-04-29 12:49:46	→	renzhi has joined #haskell
2022-04-29 12:51:33	tomsmeding	jackdk: indeed lol
2022-04-29 12:54:16	→	MajorBiscuit has joined #haskell
2022-04-29 12:57:35	←	hiredman has quit (Ping timeout: 256 seconds)
2022-04-29 13:03:45	tomsmeding	monochrom: see: the haskell weekly news came
2022-04-29 13:08:11	→	Midjak has joined #haskell
2022-04-29 13:14:32	→	vpan has joined #haskell
2022-04-29 13:16:00	maerwald[m]	tomsmeding: has the playground been covered there?
2022-04-29 13:16:00	→	machinedgod has joined #haskell
2022-04-29 13:16:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-29 13:17:47	←	acidjnk has quit (Ping timeout: 240 seconds)
2022-04-29 13:18:42	tomsmeding	it hasn't
2022-04-29 13:18:56	tomsmeding	monochrom was just wondering why there wasn't a newsletter yesterday yet
2022-04-29 13:20:20	maerwald[m]	tomsmeding: and dis you ask haskell.org to host it?
2022-04-29 13:20:31	tomsmeding	I didn't yet
2022-04-29 13:20:38	tomsmeding	I guess I could
2022-04-29 13:20:47	tomsmeding	I wanted to do the horizontal scaling thing first maybe
2022-04-29 13:21:00	tomsmeding	started working on that and progressing nicely, should have more time this weekend
2022-04-29 13:21:23	maerwald[m]	It should be a microservice yeah 
2022-04-29 13:21:41	maerwald[m]	Literally the only use case for that abomination 
2022-04-29 13:21:51	tomsmeding	lol yes
2022-04-29 13:22:01	tomsmeding	the concept of a microservice is not _inherently_ bad
2022-04-29 13:22:11	tomsmeding	just like OOP has a bunch of legitimate usecases
2022-04-29 13:22:39	tomsmeding	it's just that there are also quite a lot of situations where it's maybe _not_ the most effective approach
2022-04-29 13:23:47	maerwald[m]	If you've ever worked at a Go shop, you'll have microservice PTSD for the rest of your life
2022-04-29 13:24:23	maerwald[m]	Make it cloudscale
2022-04-29 13:24:36	→	acidjnk has joined #haskell
2022-04-29 13:25:04	tomsmeding	not going to use mongodb, don't worry
2022-04-29 13:25:20	tomsmeding	there's not even anything to put in there lol
2022-04-29 13:25:53	tomsmeding	sqlite is looking at the pastebin traffic and saying "is this database usage?"
2022-04-29 13:26:16	maerwald[m]	How mucs GB?
2022-04-29 13:26:50	tomsmeding	maerwald[m]: https://tomsmeding.com/f/pastebin_plot/dbsize.png sorry for absence of data points, I messed up the monitoring when migrating to different server
2022-04-29 13:27:00	tomsmeding	x axis is days since unix epoch, because who doesn't love interesting units
2022-04-29 13:27:22	tomsmeding	like 0.005 gb
2022-04-29 13:27:52	tomsmeding	this in contrast to my conduit matrix server that I'm running for personal usage only, that puts about 1MiB per second in the syslog
2022-04-29 13:32:31	maerwald[m]	Why not AWS dynamoDB
2022-04-29 13:33:01	maerwald[m]	Or let's use smart contracts for pastebin
2022-04-29 13:33:14	abastro[m]	maerwald: Go shop O.o
2022-04-29 13:33:29	abastro[m]	Lmao smart contracts for pastebinn
2022-04-29 13:33:29	maerwald[m]	abastro: I was young and needed the money
2022-04-29 13:33:51	abastro[m]	I need to do that as well!
2022-04-29 13:34:06	abastro[m]	Wait. (Thankfully?) No go shops nearby
2022-04-29 13:34:17	abastro[m]	Should do Java instead, rather
2022-04-29 13:34:29	abastro[m]	And that admits less to microservices I think
2022-04-29 13:34:49	maerwald[m]	Java has everything 
2022-04-29 13:34:58	abastro[m]	Oh noh
2022-04-29 13:35:00	abastro[m]	Meh
2022-04-29 13:35:28	maerwald[m]	E.g. better event sourcing than Haskell
2022-04-29 13:35:57	maerwald[m]	Money solves your problems, not tech
2022-04-29 13:35:58	abastro[m]	Hmm
2022-04-29 13:36:04	abastro[m]	Event sourcing?
2022-04-29 13:36:42	abastro[m]	Yea, Java now has history of all the money invested stacked as great return
2022-04-29 13:36:45	maerwald[m]	abastro[m]: The next abomination right after microservices
2022-04-29 13:36:53	abastro[m]	Wait lmao
2022-04-29 13:37:21	→	zeenk has joined #haskell
2022-04-29 13:38:06	maerwald[m]	Yeah, my life flashes before my eyes
2022-04-29 13:39:16	abastro[m]	I thought you were talking about how it's rather workable
2022-04-29 13:39:45	abastro[m]	Anyway I guess that's the price to pay to earn money
2022-04-29 13:40:18	maerwald[m]	So what comes after microservices and event sourcing? Blockchain.
2022-04-29 13:41:00	maerwald[m]	Maybe we could even partially evaluate haskell code via plutus
2022-04-29 13:41:53	abastro[m]	Partially evaluate haskell code?
2022-04-29 13:42:05	maerwald[m]	Don't listen to me
2022-04-29 13:42:13	abastro[m]	Anyway I guess I could earn quick money through blockchain
2022-04-29 13:42:19	←	king_gs has quit (Ping timeout: 250 seconds)
2022-04-29 13:42:47	abastro[m]	To avoid direct guilt, just by getting hired by one such company
2022-04-29 13:43:18	maerwald[m]	Well, there are some cool people working on it
2022-04-29 13:43:23	abastro[m]	Bothersome and fruitless work for quick money
2022-04-29 13:43:35	abastro[m]	"Cool" eeh
2022-04-29 13:44:12	maerwald[m]	Who cares about the tech. I think it's more exciting to work with good engineers
2022-04-29 13:44:24	abastro[m]	Hmm
2022-04-29 13:44:35	abastro[m]	I mean quick money is more important
2022-04-29 13:45:08	maerwald[m]	There's nothing quick about it
2022-04-29 13:45:29	abastro[m]	True, but hm
2022-04-29 13:45:53	abastro[m]	I think it pays better than some shit part-time jobs
2022-04-29 13:45:57	abastro[m]	Like convenience store
2022-04-29 13:46:04	→	ahammer has joined #haskell
2022-04-29 13:46:05	→	deadmarshal_ has joined #haskell
2022-04-29 13:46:13	abastro[m]	And that is also referred to as quick money so
2022-04-29 13:47:36	→	ccntrq has joined #haskell
2022-04-29 13:48:42	←	asivitz has quit (Quit: Connection closed for inactivity)
2022-04-29 13:50:21	→	cfricke has joined #haskell
2022-04-29 13:50:40	←	deadmarshal_ has quit (Ping timeout: 248 seconds)
2022-04-29 13:50:44	abastro[m]	What kind of quick dirty job are there around
2022-04-29 13:50:51	lortabac	re. event-sourcing, I've had some very good experiences
2022-04-29 13:51:33	lortabac	and some bad experiences, especially when it was not the right use case
2022-04-29 13:51:47	abastro[m]	Wow
2022-04-29 13:52:01	maerwald[m]	lortabac: what is the right use case?
2022-04-29 13:53:41	lortabac	there are some domains that are naturally event-based
2022-04-29 13:54:23	abastro[m]	Is event-sourcing = event-driven
2022-04-29 13:54:31	lortabac	by using a mutable DB you lose information, and run into various problems
2022-04-29 13:54:39	←	ahammer has quit (Ping timeout: 246 seconds)
2022-04-29 13:54:39	lortabac	abastro[m]: no, it's not the same thing
2022-04-29 13:54:53	abastro[m]	Hm
2022-04-29 13:55:21	Hecate	and not the same thing as event-storming :D
2022-04-29 13:55:24	lortabac	event-sourcing refers to how you represent the data that you store, event-driven refers to the flow of messages in your system
2022-04-29 13:55:29	abastro[m]	XD
2022-04-29 13:55:44	maerwald[m]	lortabac: that's too vague to me
2022-04-29 13:55:55	abastro[m]	Ah, storing events
2022-04-29 13:56:04	maerwald[m]	I've used it in fintech and my opinion is that it's useless to most use cases even there
2022-04-29 13:56:05	abastro[m]	But yea, vague
2022-04-29 13:56:38	maerwald[m]	For it to be actually useful, you need to write a lot of tools from scratch
2022-04-29 13:56:50	maerwald[m]	Otherwise the advantage is only theoretical 
2022-04-29 13:57:05	maerwald[m]	And most of the time you won't have time to develop those tools
2022-04-29 13:57:08	lortabac	maerwald[m]: first of all you need to use a specialized database like EventStore
2022-04-29 13:57:27	lortabac	event-sourcing on top of Postgres is masochism IMHO
2022-04-29 13:57:38	abastro[m]	Money solves problem :tm:
2022-04-29 13:57:48	lortabac	then yes, you need to implement various tools
2022-04-29 13:59:13	maerwald[m]	lortabac: yeah and you'll solve all the problems SQL databases have solved from scratch
2022-04-29 13:59:13	abastro[m]	If you need the tools, pay someone who has the tools
2022-04-29 13:59:16	maerwald[m]	So 50% of your time is wasted on novelty tech
2022-04-29 13:59:16	←	eggplantade has quit (Remote host closed the connection)
2022-04-29 13:59:17	maerwald[m]	That has no business value in its own
2022-04-29 13:59:39	abastro[m]	With money, they would have already patched those problems as well
2022-04-29 14:01:12	abastro[m]	Like what would be problems of these EventSource DB compared to SQL, when they would have money to implement all the amenities
2022-04-29 14:01:19	lortabac	maerwald[m]: I don't disagree with you, I'm just saying that I've worked on projects where event-sourcing was highly beneficial
2022-04-29 14:01:58	lortabac	and we had the time and energy to build all the necessary tools
2022-04-29 14:02:30	abastro[m]	Uhm wait
2022-04-29 14:02:31	abastro[m]	You did not pay someone to build the tools?
2022-04-29 14:02:35	abastro[m]	That certainly sounds wasteful
2022-04-29 14:02:55	lortabac	abastro[m]: what's the difference between paying me or another person?
2022-04-29 14:02:59	maerwald[m]	lortabac: it's a little like blockchain: huge technical challenges, but no one rally knows what business problem you're solving xD
2022-04-29 14:03:03	abastro[m]	Unless employee pay is dirt cheap
2022-04-29 14:03:08	→	ahammer has joined #haskell
2022-04-29 14:03:34	←	ahammer has quit (Read error: Connection reset by peer)
2022-04-29 14:03:38	abastro[m]	lortabac: you might be able to offload the boring work to low cost shops
2022-04-29 14:03:48	abastro[m]	Outsourcing
2022-04-29 14:05:05	abastro[m]	maerwald: At least blockchain is useful for money laundry
2022-04-29 14:05:29	abastro[m]	And bypassing the govy
2022-04-29 14:05:30	abastro[m]	Govt*
2022-04-29 14:05:36	←	cfricke has quit (Ping timeout: 256 seconds)
2022-04-29 14:05:43	maerwald[m]	I remember one incident where event sourcing could have been useful, but the event log was so noisy and the tooling years behind that it didn't really help. And since it was one incident, the business decision was to not spend 1 year to improve the tooling, but work on features instead
2022-04-29 14:06:17	tomsmeding	abastro[m]: "unless employee pay is dirt cheap" I wouldn't want the code underlying the data store of my production application to be written by cheap workers somewhere that I don't know
2022-04-29 14:06:23	abastro[m]	Well to be serious.. why no one developed good tooling for event sourcing if money is on those?
2022-04-29 14:06:30	→	Pickchea has joined #haskell
2022-04-29 14:06:40	abastro[m]	tomsmeding: I mean yeah, you don't. Businesses want that
2022-04-29 14:06:45	→	deadmarshal_ has joined #haskell
2022-04-29 14:06:54	abastro[m]	Cost saving is half everything for businesses
2022-04-29 14:06:55	tomsmeding	right, and I usually don't think like one
2022-04-29 14:07:02	lortabac	abastro[m]: one problem is that it's hard to generalize
2022-04-29 14:07:10	abastro[m]	Oh.
2022-04-29 14:07:16	abastro[m]	Now that.. is meh
2022-04-29 14:07:41	lortabac	different projects may require different tools
2022-04-29 14:08:01	abastro[m]	Hm then, I don't see the benefits of event sourcing
2022-04-29 14:08:16	abastro[m]	Don't businesses want to reduce cost?
2022-04-29 14:09:00	abastro[m]	Then implementing machinaries which is available already if you use another platform
2022-04-29 14:09:08	lortabac	that said, there are databases like EventStore which provide lots of generic tools to categorize events, filter etc.
2022-04-29 14:09:11	abastro[m]	Would be very cost intensive
2022-04-29 14:09:32	abastro[m]	Yea I mean you still have to implement more tools to suit your needs
2022-04-29 14:09:59	abastro[m]	<del>Better to use sth like MongoDB because that is more egligible for cheap workers</del>
2022-04-29 14:11:13	maerwald[m]	Most CTOs don't pick tech based on real business needs. It's usually either 1. I wanns try this cool thing or 2. Google employees wrote a blog post that tech XY solved all their problems 
2022-04-29 14:11:29	maerwald[m]	So let's just do the same
2022-04-29 14:11:29	abastro[m]	Ewww
2022-04-29 14:11:36	lortabac	maerwald[m]: +1, that's the real issue
2022-04-29 14:12:10	abastro[m]	Why don't they put their knees down over capitalism
2022-04-29 14:12:18	abastro[m]	down to*
2022-04-29 14:13:14	→	dyeplexer has joined #haskell
2022-04-29 14:13:58	abastro[m]	maerwald: Google employees? Why do they get that much power
2022-04-29 14:19:58	abastro[m]	.. Sorry for being facetious
2022-04-29 14:20:02	Hecate	x)
2022-04-29 14:20:24	abastro[m]	Is it possible to delete my own messages?
2022-04-29 14:21:34	→	ahammer has joined #haskell
2022-04-29 14:24:32	[exa]	abastro[m]: no
2022-04-29 14:25:56	abastro[m]	Nooooo :/
2022-04-29 14:25:59	←	ahammer has quit (Ping timeout: 256 seconds)
2022-04-29 14:26:21	←	hughjfchen has quit (Quit: WeeChat 2.8)
2022-04-29 14:27:09	tomsmeding	#haskell-offtopic doesn't have logging ;p
2022-04-29 14:27:15	tomsmeding	s/logging/public logging/
2022-04-29 14:27:20	←	tzh has quit (Quit: zzz)
2022-04-29 14:29:23	[exa]	except for like, everyone logging it for private purposes
2022-04-29 14:29:47	[exa]	abastro[m]: but you're always welcome to write a blogpost where you refute yourself properly :D
2022-04-29 14:29:58	→	jgeerds has joined #haskell
2022-04-29 14:30:06	←	polykernel[m] has quit (Quit: You have been kicked for being idle)
2022-04-29 14:30:06	←	jaror[m] has quit (Quit: You have been kicked for being idle)
2022-04-29 14:30:19	←	desklamp[m] has quit (Quit: You have been kicked for being idle)
2022-04-29 14:30:32	abastro[m]	Oh
2022-04-29 14:31:14	abastro[m]	I mean writing rebuttal over my useless comments is by itself silly
2022-04-29 14:32:40	[exa]	I wouldn't bother, this is IRC, no one reads what people say here! :D (but still, capitalism-kneeling etc would be better in #-offtopic)
2022-04-29 14:34:19	→	son0p has joined #haskell
2022-04-29 14:35:20	←	shriekingnoise has quit (Quit: Quit)
2022-04-29 14:35:55	→	ubert1 has joined #haskell
2022-04-29 14:38:33	→	nut has joined #haskell
2022-04-29 14:39:04	nut	could anyone take a look at this ghc source compile error ? https://wtools.io/paste-code/bB3g
2022-04-29 14:39:24	nut	i use the default compile configs
2022-04-29 14:39:34	←	FinnElija has quit (Ping timeout: 240 seconds)
2022-04-29 14:39:42	nut	./boot  -> ./configure -> make -j16
2022-04-29 14:43:39	→	FinnElija has joined #haskell
2022-04-29 14:45:41	abastro[m]	<del>Yea I mean, that part is where I thought is the most reasonable among my ramblings</del>
2022-04-29 14:46:45	←	gpncarl_ has quit (Ping timeout: 276 seconds)
2022-04-29 14:47:26	[exa]	abastro[m]: what does the <del> around your post mean?
2022-04-29 14:49:04	[exa]	nut: might be helpful to know what's the source version
2022-04-29 14:49:28	[exa]	also isn't there any other error report earlier? this looks like an outcome of a command failure earlier in the process
2022-04-29 14:50:43	→	gpncarl_ has joined #haskell
2022-04-29 14:51:08	nut	it's the version i pulled directly
2022-04-29 14:51:26	nut	[exa]: i checked and no previous errors
2022-04-29 14:51:56	nut	[exa]: i'm building it without -j16 to see if it's related
2022-04-29 14:52:51	nut	[exa]: it's the master branch
2022-04-29 14:53:27	[exa]	removing -j16 should hopefully not fix anything
2022-04-29 14:53:51	[exa]	in either case I'd visit #ghc
2022-04-29 14:54:21	[exa]	btw check out if you are able to compile a tagged commit, master might just be broken or so
2022-04-29 14:55:12	←	ubert1 has quit (Ping timeout: 248 seconds)
2022-04-29 14:55:27	tomsmeding	[exa]: <del> is html, and thus ""markdown"", for strikethrough
2022-04-29 14:56:01	nut	-j16 gave similar results. i'm now on the 9.2 branch to test
2022-04-29 14:56:21	←	ccntrq has quit (Remote host closed the connection)
2022-04-29 14:57:19	←	MajorBiscuit has quit (Quit: WeeChat 3.4)
2022-04-29 14:57:40	[exa]	tomsmeding: yeah but like, what's the purpose of posting strikethrough text :D
2022-04-29 14:58:19	tomsmeding	[exa]: I assumed tongue-in-cheek
2022-04-29 14:59:06	tomsmeding	not sure what the difference in nuance is between that and /s
2022-04-29 14:59:21	→	hiredman has joined #haskell
2022-04-29 14:59:52	←	frost has quit (Quit: Client closed)
2022-04-29 14:59:53	→	eggplantade has joined #haskell
2022-04-29 15:00:26	[exa]	perhaps I'm bad at all this new IRC markup. :D
2022-04-29 15:00:46	→	ccntrq has joined #haskell
2022-04-29 15:02:07	←	dyeplexer has quit (Ping timeout: 272 seconds)
2022-04-29 15:02:37	tomsmeding	I think it renders as actual strikethrough in whatever matrix client they're using
2022-04-29 15:04:31	←	eggplantade has quit (Ping timeout: 256 seconds)
2022-04-29 15:05:37	→	raehik has joined #haskell
2022-04-29 15:07:59	→	dcoutts_ has joined #haskell
2022-04-29 15:08:20	→	mikoto-chan has joined #haskell
2022-04-29 15:10:06	→	xaotuk has joined #haskell
2022-04-29 15:10:49	abastro[m]	tomsmeding: I meant a bit different to /s
2022-04-29 15:10:57	→	MajorBiscuit has joined #haskell
2022-04-29 15:12:19	abastro[m]	That is, my useless comment
2022-04-29 15:13:19	←	notzmv has quit (Ping timeout: 240 seconds)
2022-04-29 15:13:20	←	mikoto-chan has quit (Ping timeout: 248 seconds)
2022-04-29 15:20:55	→	dyeplexer has joined #haskell
2022-04-29 15:21:37	←	dyeplexer has quit (Remote host closed the connection)
2022-04-29 15:27:27	←	econo has quit (Quit: Connection closed for inactivity)
2022-04-29 15:36:57	←	Pickchea has quit (Ping timeout: 272 seconds)
2022-04-29 15:37:34	←	CiaoSen has quit (Ping timeout: 250 seconds)
2022-04-29 15:39:32	→	pretty_dumm_guy has joined #haskell
2022-04-29 15:39:46	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-29 15:40:54	→	tromp has joined #haskell
2022-04-29 15:41:10	→	Hiring has joined #haskell
2022-04-29 15:43:31	→	mmhat has joined #haskell
2022-04-29 15:43:45	→	Tuplanolla has joined #haskell
2022-04-29 15:45:28	→	dhil has joined #haskell
2022-04-29 15:46:52	→	abastro has joined #haskell
2022-04-29 15:48:10	→	notzmv has joined #haskell
2022-04-29 15:51:01	←	abastro has quit (Remote host closed the connection)
2022-04-29 15:51:32	→	abastro has joined #haskell
2022-04-29 15:53:02	→	coot has joined #haskell
2022-04-29 15:57:04	←	MajorBiscuit has quit (Ping timeout: 248 seconds)
2022-04-29 15:58:09	→	MajorBiscuit has joined #haskell
2022-04-29 15:58:14	→	kilolympus has joined #haskell
2022-04-29 15:59:55	→	toms has joined #haskell
2022-04-29 16:01:59	←	yauhsien has quit (Remote host closed the connection)
2022-04-29 16:06:03	←	deadmarshal_ has quit (Ping timeout: 276 seconds)
2022-04-29 16:06:54	→	yauhsien has joined #haskell
2022-04-29 16:08:21	←	MajorBiscuit has quit (Ping timeout: 250 seconds)
2022-04-29 16:10:29	→	MajorBiscuit has joined #haskell
2022-04-29 16:12:33	←	Lord_of_Life has quit (Ping timeout: 276 seconds)
2022-04-29 16:13:06	→	Lord_of_Life has joined #haskell
2022-04-29 16:13:50	→	dextaa4 has joined #haskell
2022-04-29 16:18:05	int-e	tomsmeding: Is  https://ircbrowse.tomsmeding.com/browse/lchaskell?q=tomsmeding  supposed to do anything? I see no difference between that and the link without the q=...
2022-04-29 16:18:06	←	yauhsien has quit (Remote host closed the connection)
2022-04-29 16:18:34	int-e	(maybe it used to work but was too expensive? that's my speculation right now)
2022-04-29 16:18:52	→	yauhsien has joined #haskell
2022-04-29 16:23:49	←	yauhsien has quit (Ping timeout: 272 seconds)
2022-04-29 16:35:39	←	sprout has quit (Ping timeout: 250 seconds)
2022-04-29 16:39:01	←	MajorBiscuit has quit (Ping timeout: 272 seconds)
2022-04-29 16:40:56	←	dextaa4 has quit (Remote host closed the connection)
2022-04-29 16:41:18	→	CiaoSen has joined #haskell
2022-04-29 16:46:47	→	yauhsien has joined #haskell
2022-04-29 16:51:58	→	gpncarl has joined #haskell
2022-04-29 16:52:19	←	gpncarl_ has quit (Ping timeout: 272 seconds)
2022-04-29 16:55:47	→	MajorBiscuit has joined #haskell
2022-04-29 16:58:11	←	coot has quit (Quit: coot)
2022-04-29 17:02:05	→	eggplantade has joined #haskell
2022-04-29 17:06:55	←	eggplantade has quit (Ping timeout: 256 seconds)
2022-04-29 17:07:57	→	littlebobeep has joined #haskell
2022-04-29 17:10:05	tomsmeding	int-e: https://github.com/chrisdone/ircbrowse/commit/075232f70721837c01016d67393cf080e3fc822e
2022-04-29 17:10:29	tomsmeding	I've been meaning to set up some form of search again for a while, but other stuff has taken priority :p
2022-04-29 17:10:57	←	yauhsien has quit (Remote host closed the connection)
2022-04-29 17:11:08	maerwald[m]	Start hiring haskeller!
2022-04-29 17:11:36	int-e	tomsmeding: love the verbose commit message :-/
2022-04-29 17:11:38	tomsmeding	me hiring people?
2022-04-29 17:11:43	→	yauhsien has joined #haskell
2022-04-29 17:11:43	tomsmeding	int-e: right?
2022-04-29 17:11:55	tomsmeding	well, the commit summary is not inaccurate
2022-04-29 17:11:59	tomsmeding	it could have been worse
2022-04-29 17:12:29	tomsmeding	int-e: there's quite a bunch of stuff in ircbrowse that was just randomly disabled by the time I started looking at the code
2022-04-29 17:12:58	tomsmeding	there's a page that lists PDF links that just randomly didn't work because the sql query was wrong
2022-04-29 17:13:33	tomsmeding	it kind of felt like Chris had done a good job of setting up a nice codebase, then had no time to do stuff anymore and made a bunch of changes with the minimal possible effort
2022-04-29 17:13:43	tomsmeding	at least, that's my inference from looking at the code
2022-04-29 17:15:36	←	yauhsien has quit (Remote host closed the connection)
2022-04-29 17:16:18	int-e	Yeah, can't blame him. I was just wondering... looking at logs, he seems to have switched hosting providers for ircbrowse around that time.
2022-04-29 17:16:57	→	yauhsien has joined #haskell
2022-04-29 17:17:57	int-e	(Not 100% conclusive, but if that's right, maybe he didn't manage to set up the sphinx search engine thing again and postponed that?)
2022-04-29 17:18:40	←	xaotuk has quit (Ping timeout: 248 seconds)
2022-04-29 17:18:43	int-e	tomsmeding: Anyway, thanks for that link
2022-04-29 17:19:26	tomsmeding	int-e: ah! That would explain it, yes sounds likely
2022-04-29 17:20:03	Bulby[m]	Can I lift any value into type space? or only strings and ints?
2022-04-29 17:20:34	tomsmeding	Bulby[m]: https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/exts/data_kinds.html#extension-DataKinds
2022-04-29 17:20:59	←	kaph has quit (Read error: Connection reset by peer)
2022-04-29 17:21:16	→	kaph has joined #haskell
2022-04-29 17:21:39	←	yauhsien has quit (Ping timeout: 256 seconds)
2022-04-29 17:22:25	Bulby[m]	What I want is a "Default" type where you give a type and then an expression of that type. If there is no field provided then I will handle that in code by grabbing the default type and returning that
2022-04-29 17:26:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-29 17:27:00	→	sprout has joined #haskell
2022-04-29 17:27:35	lortabac	Bulby[m]: I don't understand your question, can you clarify a little bit or give an example?
2022-04-29 17:28:35	Bulby[m]	So I want to be able to say... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/f35cda520bfc9626ab14be8797ba57d128f1013b)
2022-04-29 17:30:10	lortabac	ok I think I understand
2022-04-29 17:30:26	lortabac	"hi" is the default string in your example, right?
2022-04-29 17:30:30	Bulby[m]	yes
2022-04-29 17:30:41	lortabac	and you want to generalize this behavior to all the types, not only strings
2022-04-29 17:30:55	Bulby[m]	I understand symbols
2022-04-29 17:31:15	lortabac	you need DataKinds, as someone suggested
2022-04-29 17:31:20	Bulby[m]	I don't know if that will be needed, but would be nice
2022-04-29 17:31:46	tomsmeding	symbols have the property that you can recover the value-level value from the reflected type
2022-04-29 17:31:52	lortabac	and you need some mechanism to go from a type to its corresponding value
2022-04-29 17:32:05	geekosaur	which is where it becomes a nightmare :)
2022-04-29 17:32:08	tomsmeding	like, reify :: forall (t :: Symbol). t -> String exists
2022-04-29 17:32:19	lortabac	geekosaur: haha, not necessarily
2022-04-29 17:32:23	Bulby[m]	ok, I'll do it as I go
2022-04-29 17:32:29	tomsmeding	that isn't predefined for every data type
2022-04-29 17:32:35	Bulby[m]	I don't think i'll need to do anything other than symbol
2022-04-29 17:32:43	lortabac	if it's just one-way (type -> value) a type-class should be enough
2022-04-29 17:33:50	tomsmeding	with singletons you have this https://hackage.haskell.org/package/singletons-3.0.1/docs/Data-Singletons.html#v:demote
2022-04-29 17:33:57	Bulby[m]	oh wait symbol won't work because I have to evaluate stuff 😭
2022-04-29 17:34:04	tomsmeding	but try to avoid getting singletons in here if you don't need it lol
2022-04-29 17:34:18	Bulby[m]	I am doing dbus stuff and want a default address
2022-04-29 17:34:32	geekosaur	you can't have a value expression at type level
2022-04-29 17:34:43	geekosaur	and type level expressions are things like type families
2022-04-29 17:37:00	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-29 17:37:00	→	xaotuk has joined #haskell
2022-04-29 17:37:36	lortabac	the idea is to have something like this: https://paste.tomsmeding.com/cE7X9kMr
2022-04-29 17:38:12	lortabac	however if you need more than this it becomes quickly a nightmare
2022-04-29 17:38:41	→	xkuru has joined #haskell
2022-04-29 17:38:59	←	bitdex has quit (Quit: = "")
2022-04-29 17:45:39	←	acidjnk has quit (Ping timeout: 240 seconds)
2022-04-29 17:45:39	→	Pickchea has joined #haskell
2022-04-29 17:48:06	←	xaotuk has quit (Ping timeout: 276 seconds)
2022-04-29 17:48:47	→	frost has joined #haskell
2022-04-29 17:49:34	←	Pickchea has quit (Client Quit)
2022-04-29 17:56:33	←	Ram-Z has quit (Ping timeout: 276 seconds)
2022-04-29 17:56:55	apache2	say I have data x = A | B | C
2022-04-29 17:57:09	apache2	does haskell have "refutation cases" ?
2022-04-29 17:57:18	apache2	ie I want to match something like
2022-04-29 17:57:27	apache2	say I have data x = A Int | B  Int | C
2022-04-29 17:57:55	apache2	f x = case x of
2022-04-29 17:58:09	apache2	f x y = case (x,y) of
2022-04-29 17:58:21	apache2	  (A 1, A 2) -> True
2022-04-29 17:58:37	apache2	  (B _  B _) -> True
2022-04-29 17:58:51	apache2	  (C , C) -> True
2022-04-29 17:58:54	apache2	  _ -> False
2022-04-29 17:59:37	←	zeenk has quit (Quit: Konversation terminated!)
2022-04-29 18:00:07	apache2	but I don't want _ -> False I want (A _, (B _ |C)) -> False and (B _ , (A _ |C)) -> False and (C, (A _ | B _)) -> False
2022-04-29 18:00:16	→	mikoto-chan has joined #haskell
2022-04-29 18:00:51	apache2	so before I write _ -> False I'd like to know that all pairs of A _ A _ and B _ B and C , C are covered; and if not I want a compile-time error/warning about non-exhaustiveness
2022-04-29 18:01:51	geekosaur	with -Wall (or the appropriate individual warning, I think -Wincomplete-patterns) it does exhaustiveness checking
2022-04-29 18:02:04	←	Hiring has quit (Quit: Client closed)
2022-04-29 18:02:04	geekosaur	you csn also -Werror=incomplete-patterns
2022-04-29 18:02:07	apache2	in Ocaml I'd write type x = A of int | B of int | C  let f x y = match x,y with A 1 , B 2 -> true | B _ , B_ -> true | C,C -> true | A _, A _ -> .  | B _ , B _ -> . | C,C -> . _ -> false for example
2022-04-29 18:02:41	apache2	and it will tell me that A _ , A _ -> . is not refuted because A 0, A 0 would match it
2022-04-29 18:02:55	apache2	geekosaur: right but then I can't use _ -> False at the end
2022-04-29 18:03:12	apache2	my data type has 20 constructors so enumeratin all combinations is going to suck
2022-04-29 18:03:46	geekosaur	sure you can, that would just satisfy the exaustiveness checker that you'd covered all other cases with the catch-all
2022-04-29 18:04:27	geekosaur	oh, I see
2022-04-29 18:04:28	apache2	geekosaur: I'd be OK with 20x (A _, (B|C))   (B _, (A|C))   (C, (A|B)) cases
2022-04-29 18:04:34	geekosaur	I think patterns don't extend that far
2022-04-29 18:04:40	apache2	but I can't get | inside pattern matching to work
2022-04-29 18:04:51	geekosaur	in particular there are no or-patterns
2022-04-29 18:04:59	apache2	hm that's a bummer
2022-04-29 18:05:13	apache2	can I compare the constructors maybe?
2022-04-29 18:05:40	apache2	like extract the constructor function A and B, regardless of arguments and compare on the constructor itself?
2022-04-29 18:05:44	geekosaur	not as a pattern. you can use guards (which is the syntax that prevents | from being "or")
2022-04-29 18:06:06	geekosaur	A {} matches A with anything (as would A _)
2022-04-29 18:06:15	apache2	(x, y) | toConstructor x = toConstructor y -> False
2022-04-29 18:07:03	geekosaur	you're getting close to Generics there but I think toConstr might work
2022-04-29 18:07:13	apache2	geekosaur: right but then I still need 20*19 cases to get exhaustiveness checking
2022-04-29 18:07:37	apache2	is the toConstr thing possible?
2022-04-29 18:08:06	apache2	(OCaml wouldn't allow that)
2022-04-29 18:08:42	←	lbseale has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2022-04-29 18:09:03	→	anomal has joined #haskell
2022-04-29 18:09:05	→	lbseale has joined #haskell
2022-04-29 18:09:25	geekosaur	requires a Data constraint (so you'd have to derive Data on your type) and I'm still not entirely clear on what you're doing tbh
2022-04-29 18:11:30	←	benin has quit (Ping timeout: 276 seconds)
2022-04-29 18:12:08	→	agrosant has joined #haskell
2022-04-29 18:12:48	←	jgeerds has quit (Ping timeout: 276 seconds)
2022-04-29 18:16:29	apache2	oh this works
2022-04-29 18:16:32	apache2	data X = A Int | B Int | C deriving (Show)
2022-04-29 18:16:32	apache2	:{
2022-04-29 18:16:32	apache2	k x =
2022-04-29 18:16:32	apache2	  case x of
2022-04-29 18:16:32	apache2	    A {} -> A
2022-04-29 18:16:32	apache2	:}
2022-04-29 18:16:41	apache2	g = (k (A 2)) 3
2022-04-29 18:18:24	apache2	then I can maybe do
2022-04-29 18:18:26	apache2	case (k (A 2)) of z | z == A -> True _ -> False
2022-04-29 18:18:31	→	Ram-Z has joined #haskell
2022-04-29 18:24:41	ℹ	AlexNoo_ is now known as AlexNoo
2022-04-29 18:25:51	Bulby[m]	https://paste.tomsmeding.com/HQasship is there a better way to do stuff like this for tuples
2022-04-29 18:28:13	→	jgeerds has joined #haskell
2022-04-29 18:30:21	←	kaph has quit (Ping timeout: 276 seconds)
2022-04-29 18:36:16	→	kaph has joined #haskell
2022-04-29 18:37:08	→	tromp has joined #haskell
2022-04-29 18:40:27	→	Unicorn_Princess has joined #haskell
2022-04-29 18:41:03	[exa]	Bulby[m]: what's diwrap and dioptional? (can't find these)
2022-04-29 18:43:51	[exa]	other than that I guess that general advice for avoiding long tuples would apply (why not make a small `data TheItem = ...` for this?)
2022-04-29 18:46:31	←	gpncarl has quit (Ping timeout: 260 seconds)
2022-04-29 18:48:03	→	__monty__ has joined #haskell
2022-04-29 18:48:18	[exa]	uh wait, the (.=) there is from Aeson and not from lens, right?
2022-04-29 18:52:19	←	CiaoSen has quit (Ping timeout: 240 seconds)
2022-04-29 18:55:24	→	huu has joined #haskell
2022-04-29 18:56:56	huu	hi, wondering how to define data type as datetime ISO8601 - something like this? `created :: !ISO8601`
2022-04-29 19:01:48	→	wroathe has joined #haskell
2022-04-29 19:01:48	←	wroathe has quit (Changing host)
2022-04-29 19:01:48	→	wroathe has joined #haskell
2022-04-29 19:06:06	←	nut has quit (Ping timeout: 276 seconds)
2022-04-29 19:07:02	geekosaur	ISO8601 is not a type, it's a typeclass for formatting a DateTime in ISO8601 format
2022-04-29 19:07:33	geekosaur	you do not normally *store* in that format (the formatted value is a String)
2022-04-29 19:08:39	Bulby[m]	it's from Tomland sorry
2022-04-29 19:10:06	→	benin has joined #haskell
2022-04-29 19:10:09	Bulby[m]	https://hackage.haskell.org/package/tomland-1.3.1.0/docs/Toml-Codec-Di.html#v:dimatch
2022-04-29 19:10:10	geekosaur	so your conversion from TOML would use https://downloads.haskell.org/ghc/8.10.7/docs/html/libraries/time-1.9.3/Data-Time-Format-ISO8601.html#v:iso8601ParseM to parse the ISO8601 into an appropriate DateTime type (there are several)
2022-04-29 19:10:32	geekosaur	oh wait, I think I've just confused two discussions
2022-04-29 19:10:33	Bulby[m]	you are mixing two people 😄
2022-04-29 19:11:07	←	jgeerds has quit (Ping timeout: 240 seconds)
2022-04-29 19:11:16	geekosaur	huu, anyway you don't store an ISO8601, you parse it into an appropriate type or you format the type into ISO8601
2022-04-29 19:11:25	geekosaur	just as we don't store numbers as Strings
2022-04-29 19:12:13	⚡	abastro oh no I need to hide my string-ified integers
2022-04-29 19:12:18	huu	geekosaur so for strings it's ok to define it as `created :: !Text` ?
2022-04-29 19:12:37	⚡	abastro hides "15", "42" and "960"
2022-04-29 19:12:46	geekosaur	if you only care about the formatted value and don't want to manipulate it, sure
2022-04-29 19:13:14	geekosaur	if you want to treat it as a DateTime, you want to use the function I pointed to to parse ISO8601 into a DateTime
2022-04-29 19:13:44	Bulby[m]	Oh I see the difference in the examples
2022-04-29 19:14:10	Bulby[m]	1 of them is a sum type the other is arbitrarily allowing two different types to be together
2022-04-29 19:14:44	Bulby[m]	well
2022-04-29 19:14:58	→	[itchyjunk] has joined #haskell
2022-04-29 19:15:42	→	gurkenglas has joined #haskell
2022-04-29 19:16:07	huu	geekosaur this here https://hackage.haskell.org/package/datetime-0.3.1/docs/Data-DateTime.html
2022-04-29 19:17:06	geekosaur	DateTime is just one of them, you'll notice in there conversions from/to UniversalTime and then there's LocalTime
2022-04-29 19:17:12	geekosaur	and ZonedTime
2022-04-29 19:17:24	geekosaur	it depends on what you are doing with it
2022-04-29 19:17:37	huu	ah ok ok thanks
2022-04-29 19:19:17	geekosaur	since an ISO8601 formatted timestamp includes a timezone, ZonedTime would actually be my first choice for representing it, although for most things I stick to UTCTime aka DateTime
2022-04-29 19:19:45	←	wroathe has quit (Ping timeout: 276 seconds)
2022-04-29 19:23:52	←	jonathanx has quit (Remote host closed the connection)
2022-04-29 19:26:06	→	gpncarl has joined #haskell
2022-04-29 19:30:44	←	vpan has quit (Quit: Leaving.)
2022-04-29 19:33:49	←	huu has quit (Quit: Client closed)
2022-04-29 19:34:27	→	hughjfchen has joined #haskell
2022-04-29 19:35:07	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-29 19:35:42	←	gpncarl has quit (Ping timeout: 272 seconds)
2022-04-29 19:36:02	→	nut has joined #haskell
2022-04-29 19:49:29	→	Hiring has joined #haskell
2022-04-29 19:52:26	→	tromp has joined #haskell
2022-04-29 19:54:37	→	geranim0 has joined #haskell
2022-04-29 19:55:12	janus	any aeson maintainers in here? i'd like to discuss my PR for 9.2 compat for the 1.x series
2022-04-29 19:58:16	→	Sgeo has joined #haskell
2022-04-29 19:58:21	←	anomal has quit (Remote host closed the connection)
2022-04-29 19:58:40	→	anomal has joined #haskell
2022-04-29 19:59:10	←	sammelweis has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2022-04-29 20:00:39	dminuoso	Is there some non-obvious way to insert a -v helper in optparse-applicative?
2022-04-29 20:02:55	→	sammelweis has joined #haskell
2022-04-29 20:04:07	janus	apache2: if you are using boolean guards, you are probably defeating exhaustiveness checking... so i think "z | z == A" doesn't make a lot of sense
2022-04-29 20:04:20	→	eggplantade has joined #haskell
2022-04-29 20:07:20	→	shriekingnoise has joined #haskell
2022-04-29 20:07:41	→	Guest|33 has joined #haskell
2022-04-29 20:07:48	←	chele has quit (Remote host closed the connection)
2022-04-29 20:07:59	←	Guest|33 has quit (Client Quit)
2022-04-29 20:08:27	←	eggplantade has quit (Ping timeout: 246 seconds)
2022-04-29 20:08:28	←	geekosaur has quit (Quit: Leaving)
2022-04-29 20:08:40	janus	apache2: did you consider a separate hierarchy with 'GroupA MyType | GroupB MyType'. then you get the exhaustiveness checking.
2022-04-29 20:09:54	→	geekosaur has joined #haskell
2022-04-29 20:10:33	←	kaph has quit (Ping timeout: 246 seconds)
2022-04-29 20:13:00	←	anomal has quit (Remote host closed the connection)
2022-04-29 20:13:19	→	anomal has joined #haskell
2022-04-29 20:14:31	←	albet70 has quit (Remote host closed the connection)
2022-04-29 20:15:35	→	kaph has joined #haskell
2022-04-29 20:20:39	→	albet70 has joined #haskell
2022-04-29 20:21:34	→	king_gs has joined #haskell
2022-04-29 20:25:49	→	eggplantade has joined #haskell
2022-04-29 20:25:56	→	justsomeguy has joined #haskell
2022-04-29 20:31:11	→	gpncarl has joined #haskell
2022-04-29 20:31:38	←	frost has quit (Quit: Client closed)
2022-04-29 20:33:43	←	anomal has quit (Remote host closed the connection)
2022-04-29 20:34:02	→	anomal has joined #haskell
2022-04-29 20:36:18	←	mjs2600 has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-29 20:36:54	←	lortabac has quit (Quit: WeeChat 2.8)
2022-04-29 20:37:22	←	ccntrq has quit (Remote host closed the connection)
2022-04-29 20:37:42	→	mjs2600 has joined #haskell
2022-04-29 20:37:50	←	eggplantade has quit (Remote host closed the connection)
2022-04-29 20:38:54	←	incertia has quit (Ping timeout: 246 seconds)
2022-04-29 20:38:57	→	ahammer has joined #haskell
2022-04-29 20:41:13	→	deadmarshal_ has joined #haskell
2022-04-29 20:43:19	Bulby[m]	` (showHex r "") ++ (showHex g "") ++ (showHex b "") ` how can I take advantage of ShowS here
2022-04-29 20:43:32	→	king_gs1 has joined #haskell
2022-04-29 20:43:41	→	incertia has joined #haskell
2022-04-29 20:43:53	Bulby[m]	`prepends the output String to an existing String. `
2022-04-29 20:44:08	←	king_gs has quit (Read error: Connection reset by peer)
2022-04-29 20:44:08	ℹ	king_gs1 is now known as king_gs
2022-04-29 20:46:12	←	deadmarshal_ has quit (Ping timeout: 276 seconds)
2022-04-29 20:48:07	→	gehmehgeh has joined #haskell
2022-04-29 20:50:37	geekosaur	> let r = 127; g = 63; b = 255 in showHex r . showHex g . showHex b $ ""
2022-04-29 20:50:39	lambdabot	 "7f3fff"
2022-04-29 20:50:43	→	frost has joined #haskell
2022-04-29 20:50:56	Bulby[m]	\o/
2022-04-29 20:51:12	Bulby[m]	wasn't sure if it would be in a sane order
2022-04-29 20:51:59	←	ahammer has quit (Ping timeout: 240 seconds)
2022-04-29 20:52:34	→	stackdroid18 has joined #haskell
2022-04-29 20:53:09	←	pooryorick has quit (Remote host closed the connection)
2022-04-29 20:55:38	→	coot has joined #haskell
2022-04-29 20:56:19	EvanR	think of showHex 127 as ("7f" ++)
2022-04-29 20:56:48	Bulby[m]	yeah I was unsure if it was going to be `(++ "7f")`
2022-04-29 20:56:56	EvanR	that's what I'm saying xD
2022-04-29 20:57:00	geekosaur	"try it and see"
2022-04-29 20:57:02	EvanR	big difference
2022-04-29 20:57:38	→	eggplantade has joined #haskell
2022-04-29 20:57:55	EvanR	("7f" ++) has a chance at being efficient
2022-04-29 20:58:06	→	pooryorick has joined #haskell
2022-04-29 20:58:06	EvanR	the other one not so much
2022-04-29 20:58:29	→	ahammer has joined #haskell
2022-04-29 20:58:34	dminuoso	Rather than ShowS, can we just have dlist in base please?
2022-04-29 20:59:04	→	ccntrq has joined #haskell
2022-04-29 20:59:12	←	jespada has quit (Ping timeout: 276 seconds)
2022-04-29 20:59:21	dminuoso	It's a bit strange to throw singly linked lists at us, and not give us the tools to work efficiently with them. :(
2022-04-29 20:59:41	dminuoso	(I mean yeah, you can do it all by hand, but a newtype wrapper and separate functions help a lot)
2022-04-29 20:59:56	EvanR	is it that there are too many dlist packages to choose from? xD
2022-04-29 21:00:02	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-29 21:00:13	←	x88x88x has quit (Quit: ZNC - https://znc.in)
2022-04-29 21:00:52	→	jespada has joined #haskell
2022-04-29 21:01:50	←	nut has quit (Ping timeout: 272 seconds)
2022-04-29 21:02:34	→	nut has joined #haskell
2022-04-29 21:03:06	←	ahammer has quit (Ping timeout: 272 seconds)
2022-04-29 21:03:43	→	ahammer has joined #haskell
2022-04-29 21:05:07	←	Hiring has quit (Quit: Client closed)
2022-04-29 21:05:49	←	anomal has quit (Remote host closed the connection)
2022-04-29 21:06:08	→	anomal has joined #haskell
2022-04-29 21:08:41	←	eggplantade has quit (Remote host closed the connection)
2022-04-29 21:09:19	c_wraith	dminuoso: what, is Endo [a] too annoying?
2022-04-29 21:09:58	c_wraith	(the answer is probably "yes)
2022-04-29 21:10:08	c_wraith	uh.  just ignore that syntax error, please. :)
2022-04-29 21:10:43	←	ahammer has quit (Ping timeout: 272 seconds)
2022-04-29 21:11:21	←	xff0x_ has quit (Read error: Connection reset by peer)
2022-04-29 21:12:05	Franciman	does ghc do the so called cons tail optimisation?
2022-04-29 21:12:19	←	abastro has quit (Ping timeout: 240 seconds)
2022-04-29 21:12:32	Franciman	or tail optimisation modulo cons
2022-04-29 21:13:43	c_wraith	I've never heard of that one, but...  the answer is probably one of "yes, but it's less helpful than you think" and "it's not even relevant", like most questions about tail calls in haskell
2022-04-29 21:14:12	←	frost has quit (Ping timeout: 252 seconds)
2022-04-29 21:14:52	c_wraith	ah. I looked it up. That's the latter case.
2022-04-29 21:14:58	→	zer0bitz has joined #haskell
2022-04-29 21:15:50	c_wraith	It's not even relevant, because of laziness
2022-04-29 21:16:59	Franciman	gorg
2022-04-29 21:17:02	Franciman	ty
2022-04-29 21:18:25	c_wraith	In particular, evaluation stops at a data constructor.
2022-04-29 21:18:28	→	eggplantade has joined #haskell
2022-04-29 21:19:27	Franciman	so i just build a long list of thunks in heap
2022-04-29 21:19:34	Franciman	not in the stack and no need of tail call optimise
2022-04-29 21:19:40	Franciman	just cry when it's slow, tho?
2022-04-29 21:20:33	c_wraith	so if you say   `map f (x:xs) = f x : map f xs'  (pretend there's a base case too) that function doesn't cause recursive evaluation
2022-04-29 21:21:04	c_wraith	It evaluates the first constructor of its input list, then generates a single constructor pointing to two thunks.
2022-04-29 21:21:12	→	ahammer has joined #haskell
2022-04-29 21:22:03	c_wraith	any recursive evaluation that might happen is going to come from whatever is consuming the output
2022-04-29 21:22:16	Franciman	makes sense
2022-04-29 21:22:56	Franciman	so in fact it does not build a long list of thunks either
2022-04-29 21:23:00	Franciman	just on demande
2022-04-29 21:23:02	Franciman	thank you!
2022-04-29 21:23:06	Franciman	demand*
2022-04-29 21:23:28	monochrom	Yeah lazy evaluation changes this. In this context, the eager instinct of "let me use an accumulator and later reverse" is actually bad.
2022-04-29 21:23:28	→	cosimone has joined #haskell
2022-04-29 21:23:48	←	mjs2600 has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-04-29 21:24:05	monochrom	Tons of "best practice" just go out of the window.
2022-04-29 21:24:08	→	mvk has joined #haskell
2022-04-29 21:24:21	→	k8yun has joined #haskell
2022-04-29 21:24:57	monochrom	> foldr (&&) undefined (False : repeat True)
2022-04-29 21:24:58	lambdabot	 False
2022-04-29 21:25:06	→	razetime has joined #haskell
2022-04-29 21:25:10	←	ccntrq has quit (Remote host closed the connection)
2022-04-29 21:25:11	monochrom	You actually want that.
2022-04-29 21:25:20	→	mjs2600 has joined #haskell
2022-04-29 21:25:25	monochrom	> foldl (&&) undefined (False : repeat True)
2022-04-29 21:25:34	lambdabot	 mueval.real: ExitFailure 1
2022-04-29 21:25:45	monochrom	And that's what's wrong with tail call and accumulator.
2022-04-29 21:26:38	Franciman	i analyse this from another point of view
2022-04-29 21:26:47	Franciman	haskell conflates sense and denotation
2022-04-29 21:26:49	Franciman	because of laziness
2022-04-29 21:26:52	Franciman	which is good
2022-04-29 21:26:59	Franciman	until you start going crazy
2022-04-29 21:27:31	Franciman	the fact that you can write a term to mention it, instead of fully evaluating it is gorgeous
2022-04-29 21:27:42	maerwald	anyone knows if there's a good way to detect whether I'm in china (from within bash)
2022-04-29 21:27:54	Franciman	lol
2022-04-29 21:27:54	Hecate	maerwald: curl myip.whatevs
2022-04-29 21:28:01	Hecate	can't remember the actual domain name
2022-04-29 21:28:05	Hecate	but there's one
2022-04-29 21:28:16	←	vicfred has quit (Quit: Leaving)
2022-04-29 21:28:22	geekosaur	just try to connect to something blocked by the great wall
2022-04-29 21:28:24	maerwald	Hecate: are you sure that domain works in china? xD
2022-04-29 21:28:29	monochrom	No, I think it's some people, not Haskell, who have that conflation. I don't, and I don't see Haskell doing it.
2022-04-29 21:28:40	maerwald	geekosaur: yeah, like downloads.haskell.org ;)
2022-04-29 21:28:41	Hecate	maerwald: for a chinese mirror? You can do like the linux & freebsd installers and ask the user if they want to specify their country's mirror
2022-04-29 21:28:44	Hecate	maerwald: hahaha
2022-04-29 21:28:52	Franciman	in haskell there is no distinction between evaluate to value and just do it whenever you feel like
2022-04-29 21:29:03	Franciman	you must leverage ghc extensions like Bang Patterns
2022-04-29 21:29:35	monochrom	I know some people intuit that [x | x <- [1..], x==0] = [] but I don't, not even on day 1.  It's clearly bottom.
2022-04-29 21:30:00	maerwald	the problem also seems to be that curl doesn't cleanly fail, so users get some corrupted empty files and then weird errors
2022-04-29 21:30:21	←	Vajb has quit (Ping timeout: 272 seconds)
2022-04-29 21:30:39	maerwald	well, you could say the file is not corrupted, because it's empty
2022-04-29 21:31:01	→	Vajb has joined #haskell
2022-04-29 21:31:20	Franciman	monochrom: so for you in haskell every term is just mentioned, right?
2022-04-29 21:31:21	maerwald	sort of a thunk
2022-04-29 21:31:23	Franciman	never used
2022-04-29 21:31:25	Franciman	until main
2022-04-29 21:31:36	maerwald	lazy haskell installation
2022-04-29 21:31:55	Franciman	then you have to go back and descend the tree to mark the nodes who are not just mentioned, but used!
2022-04-29 21:32:00	←	ahammer has quit (Ping timeout: 248 seconds)
2022-04-29 21:32:51	→	littlebobeep has joined #haskell
2022-04-29 21:33:22	←	maerwald has quit (Changing host)
2022-04-29 21:33:22	→	maerwald has joined #haskell
2022-04-29 21:33:37	→	ahammer has joined #haskell
2022-04-29 21:33:54	janus	maerwald: https://gadm.org/ has polygons for the countries
2022-04-29 21:34:43	janus	another option is to look at the time zone
2022-04-29 21:37:00	janus	while `date +%Z` could report "CDT", `timezonectl status` is more accurate and reports America/Chicago for me
2022-04-29 21:39:55	←	eggplantade has quit (Remote host closed the connection)
2022-04-29 21:40:17	EvanR	Franciman, you can think of a haskell program or value as being an expression, more often than not
2022-04-29 21:41:01	Franciman	i wonder if i could add modal operators to the type system to keep explicit track of lazy evaluated thinks
2022-04-29 21:41:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-29 21:41:53	janus	oh geoclue looks cool https://gitlab.freedesktop.org/geoclue/geoclue/-/wikis/home
2022-04-29 21:42:00	Franciman	unquote :: □a -> a
2022-04-29 21:42:00	→	tzh has joined #haskell
2022-04-29 21:42:01	EvanR	if it's evaluated, it's no longer lazy
2022-04-29 21:42:37	EvanR	but could hold unevaluated payloads
2022-04-29 21:42:43	Franciman	i would also have k :: □(a -> b) -> □a -> □b
2022-04-29 21:42:58	EvanR	I don't think quotation is the right way to think of haskell
2022-04-29 21:43:03	EvanR	it's not quoted
2022-04-29 21:43:17	EvanR	but there is template haskell
2022-04-29 21:43:27	Franciman	quotation is probably a misnomer
2022-04-29 21:43:36	Franciman	ok, can I use modal operators to keep track of thunks?
2022-04-29 21:43:55	maerwald	Franciman: are you building a blockchain?
2022-04-29 21:43:58	EvanR	thunks is an implementation detail, what are you really trying to do
2022-04-29 21:44:08	Franciman	I'm trying to make sense of haskell's evil
2022-04-29 21:44:10	Franciman	laziness
2022-04-29 21:44:21	EvanR	laziness is also an implementation detail xD
2022-04-29 21:44:22	Franciman	it evaluates things under my feet, and i'm too obtuse to understand what's going on
2022-04-29 21:44:24	maerwald	I run my thunks via smart contracts
2022-04-29 21:44:31	Franciman	lol maerwald 
2022-04-29 21:44:46	EvanR	evaluation is on demand, that's all
2022-04-29 21:45:02	Franciman	so it's non local
2022-04-29 21:45:07	Franciman	it makes local reasoning hard
2022-04-29 21:45:17	EvanR	since there are no side effects it's fine
2022-04-29 21:45:22	maerwald	Franciman: exactly!
2022-04-29 21:45:40	→	littlebobeep has joined #haskell
2022-04-29 21:45:44	EvanR	whatever you would have evaluated, it still evaluates just at a different time
2022-04-29 21:45:53	EvanR	(except for a difference regarding infinite loops)
2022-04-29 21:45:59	maerwald	Haskell breaks with the "local reasoning" concept via laziness. You could argue it's inherently non-functional then
2022-04-29 21:46:01	maerwald	hmm
2022-04-29 21:46:15	→	waleee has joined #haskell
2022-04-29 21:46:16	EvanR	the purity of haskell is what saves local reasoning
2022-04-29 21:46:20	Franciman	maerwald: the neat thing is that , as EvanR says, it can do it safely exactly because it's functional!
2022-04-29 21:46:23	Franciman	lol
2022-04-29 21:46:34	Franciman	EvanR: not local reasoning about performances!
2022-04-29 21:46:39	Franciman	or space consumption
2022-04-29 21:46:43	maerwald	Franciman: safely?
2022-04-29 21:46:44	Franciman	that's a neglected form of reasoning, maybe?
2022-04-29 21:46:48	EvanR	performance? nah nah nah I can't hear you
2022-04-29 21:46:53	Franciman	eh indeed
2022-04-29 21:46:55	Franciman	:')
2022-04-29 21:47:10	Franciman	not being able to assess what my program does is B-B-BADDO
2022-04-29 21:47:13	EvanR	laziness has a cost
2022-04-29 21:47:16	Franciman	for my use case i mean
2022-04-29 21:47:21	Franciman	that's ok for doing scripts
2022-04-29 21:47:28	Franciman	not for working on my language
2022-04-29 21:47:31	Franciman	interpreter
2022-04-29 21:47:32	EvanR	it might not be good to run haskell directly on arduinos
2022-04-29 21:47:42	→	CiaoSen has joined #haskell
2022-04-29 21:47:43	EvanR	but you could use haskell to make a language for arduinos
2022-04-29 21:47:51	Franciman	just a compiler
2022-04-29 21:47:53	Franciman	not an interpreter
2022-04-29 21:48:01	Franciman	i could use it to make a program that makes interpreters in C, tho
2022-04-29 21:48:02	Franciman	that's fair
2022-04-29 21:48:09	Franciman	and something i tried, but i am too dumb LOL
2022-04-29 21:48:17	EvanR	C's pretty bad for programming language development xD
2022-04-29 21:48:25	Franciman	not when used as assembly
2022-04-29 21:48:30	←	ahammer has quit (Remote host closed the connection)
2022-04-29 21:48:36	Franciman	you even get a lot of optimisations for free!
2022-04-29 21:48:56	EvanR	you also miss out on a lot of optimizations
2022-04-29 21:48:59	Franciman	true
2022-04-29 21:49:06	Franciman	but that's for the next step of the work, no?
2022-04-29 21:49:21	Franciman	it's a good first step
2022-04-29 21:49:28	←	justsomeguy has quit (Ping timeout: 260 seconds)
2022-04-29 21:49:36	EvanR	since no one using the language cares what you used to make the compiler, just skip to the last step and use haskell, or something better than C at least
2022-04-29 21:49:50	Franciman	ehm
2022-04-29 21:49:59	Franciman	i see
2022-04-29 21:50:08	Franciman	but haskell's laziness gets in the way and makes everything evil
2022-04-29 21:50:24	←	gpncarl has quit (Ping timeout: 260 seconds)
2022-04-29 21:50:28	EvanR	haven't noticed that
2022-04-29 21:50:38	EvanR	purity is by definition lack of evil
2022-04-29 21:51:49	→	gpncarl has joined #haskell
2022-04-29 21:52:55	Franciman	^^ true
2022-04-29 21:55:16	→	zeenk has joined #haskell
2022-04-29 21:56:29	←	gpncarl has quit (Ping timeout: 256 seconds)
2022-04-29 22:05:20	→	tromp has joined #haskell
2022-04-29 22:06:17	→	yauhsien has joined #haskell
2022-04-29 22:07:15	→	wroathe has joined #haskell
2022-04-29 22:07:15	←	wroathe has quit (Changing host)
2022-04-29 22:07:15	→	wroathe has joined #haskell
2022-04-29 22:08:16	janus	EvanR: what would be a better language to develop each of Python, Postgres and Lua in?
2022-04-29 22:09:19	EvanR	is this a time travel question or a brain transplant question
2022-04-29 22:09:28	janus	one answer for each :P
2022-04-29 22:09:51	janus	the time travel variant is the most interesting
2022-04-29 22:10:31	EvanR	haskell still had baby teeth back when those languages were being forged from pure chaos
2022-04-29 22:10:38	EvanR	so not haskell
2022-04-29 22:10:56	←	yauhsien has quit (Ping timeout: 248 seconds)
2022-04-29 22:12:20	janus	A big part of why Lua is popular is because it is written in a really portable variant of C. Even today, lots of users would be hosed if they rewrote it in Rust/Zig/Hare/Haskell
2022-04-29 22:12:59	janus	I think the argument also applies to Python to some degree?
2022-04-29 22:14:38	janus	But in Python, the experiment is being conducted since Pypy is written in RPython
2022-04-29 22:15:28	Hecate	python people don't care that much tbf
2022-04-29 22:15:39	Hecate	python doesn't advertise the same things as lua
2022-04-29 22:16:16	dolio	Isn't lua's selling point being embeddable into e.g. C programs as a scripting language?
2022-04-29 22:16:21	dolio	That's pretty cherry picked.
2022-04-29 22:16:22	Hecate	yes
2022-04-29 22:16:30	Hecate	well, that's called a purpose :p
2022-04-29 22:16:38	Hecate	low-overhead, low-resources
2022-04-29 22:17:40	geekosaur	same was true of Tcl until Lua came along and trumped it with sane syntax
2022-04-29 22:17:41	janus	ok, so that leaves postgres. we must convince them to switch to c++ like GCC, then we have proven once for all that C is bad
2022-04-29 22:19:23	dolio	Also, just because your specific niche forces you to use C to achieve some goal doesn't mean that C is actually good at that general domain, where not everything neecs to meet that specific goal.
2022-04-29 22:19:39	←	wroathe has quit (Ping timeout: 240 seconds)
2022-04-29 22:19:53	→	justsomeguy has joined #haskell
2022-04-29 22:20:24	dolio	It just means that your particular case forced you to use a bad tool.
2022-04-29 22:20:53	Hecate	that is true
2022-04-29 22:21:03	Hecate	but I don't know if that was anybody's point
2022-04-29 22:21:05	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-29 22:21:08	janus	but why is the existence of 20 years of codebase and experience in a specific language not something that makes the language 'good'?
2022-04-29 22:21:28	Hecate	janus: for the same reason tech debt doesn't turn into tech credit
2022-04-29 22:21:37	Hecate	even wine turns into vinegar
2022-04-29 22:22:07	geekosaur	C became popular because it was in the right place at the right time, not because it was good
2022-04-29 22:22:14	janus	so english is bad too, esperanto is good?
2022-04-29 22:22:20	→	asivitz has joined #haskell
2022-04-29 22:22:30	Hecate	janus: I don't know what you're trying to make me say
2022-04-29 22:22:35	→	tromp has joined #haskell
2022-04-29 22:22:41	Hecate	so huh, please stop? :D
2022-04-29 22:22:42	geekosaur	that doesn't prove C is bad, either, it just means you can't judge it solely by how popular it is
2022-04-29 22:23:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-29 22:23:45	Franciman	hey vinegar is useful too!
2022-04-29 22:24:50	Hecate	in french, it's caleld "vinaigre", which is the combination of "vin" (wine) and "aigre" (sour)
2022-04-29 22:24:57	Hecate	and yes vinegar useful
2022-04-29 22:25:06	Hecate	but not as a wine ;-D
2022-04-29 22:25:33	→	econo has joined #haskell
2022-04-29 22:25:46	Hecate	that being said, this whole discussion is leading to nothing
2022-04-29 22:26:07	Hecate	so let's talk about something that doesn't rely on everyone's mis-interpretation of the other person's words
2022-04-29 22:26:12	Franciman	i use it to avoid being bitten by mosquitoes
2022-04-29 22:26:18	Franciman	i use it on salad
2022-04-29 22:26:25	Hecate	I use it to be delicious when cannibals eat me
2022-04-29 22:26:29	Franciman	and in some nice dishes
2022-04-29 22:26:37	Franciman	yaaaaaaaaaaaaaaaaaaaaaaas
2022-04-29 22:27:21	←	king_gs has quit (Remote host closed the connection)
2022-04-29 22:28:11	Franciman	ok, what about this
2022-04-29 22:28:18	Franciman	do you think is there ever gonna be Haskellton?
2022-04-29 22:28:26	Franciman	an haskell compiler based on MLton's backend?
2022-04-29 22:28:40	→	king_gs has joined #haskell
2022-04-29 22:28:43	dolio	Probably not.
2022-04-29 22:29:33	geekosaur	Franciman, have you seen https://github.com/grin-compiler/grin ?
2022-04-29 22:29:36	→	dextaa4 has joined #haskell
2022-04-29 22:29:57	Franciman	yes, that one is coool
2022-04-29 22:30:20	→	eggplantade has joined #haskell
2022-04-29 22:33:52	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-29 22:34:37	←	jakalx has left #haskell (Error from remote client)
2022-04-29 22:35:24	←	irfan has quit (Quit: leaving)
2022-04-29 22:37:02	←	razetime has quit (Remote host closed the connection)
2022-04-29 22:38:05	→	jgeerds has joined #haskell
2022-04-29 22:38:17	→	acidjnk has joined #haskell
2022-04-29 22:38:26	←	anomal has quit (Remote host closed the connection)
2022-04-29 22:38:40	→	anomal has joined #haskell
2022-04-29 22:39:44	tomsmeding	Franciman: doesn't MLton implement a strict language
2022-04-29 22:42:52	→	jakalx has joined #haskell
2022-04-29 22:45:04	←	anomal has quit (Remote host closed the connection)
2022-04-29 22:45:23	→	anomal has joined #haskell
2022-04-29 22:46:27	←	elkcl has quit (Ping timeout: 276 seconds)
2022-04-29 22:47:44	←	stackdroid18 has quit (Quit: hasta la vista... tchau!)
2022-04-29 22:48:30	←	coot has quit (Quit: coot)
2022-04-29 22:56:26	→	littlebobeep has joined #haskell
2022-04-29 22:59:59	←	benin has quit (Quit: The Lounge - https://thelounge.chat)
2022-04-29 23:01:15	Franciman	tomsmeding: yes, but in some slides of presentation they wanted to also introduce haskellton
2022-04-29 23:03:17	←	pavonia has quit (Quit: Bye!)
2022-04-29 23:03:43	tomsmeding	I wonder how useful existing opimisations for a strict functional language are when you compile a lazy language to it
2022-04-29 23:03:54	tomsmeding	feel like it won't generate very natural ML code
2022-04-29 23:04:56	ℹ	chexum_ is now known as chexum
2022-04-29 23:05:05	Franciman	the important ideas are to convert an high order language to a first order monomorphic language
2022-04-29 23:05:17	Franciman	i think this part doesn't depend on lazy or strict semantics
2022-04-29 23:06:31	→	dcoutts__ has joined #haskell
2022-04-29 23:06:31	→	littlebo1eep has joined #haskell
2022-04-29 23:07:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-29 23:09:47	←	dcoutts_ has quit (Ping timeout: 272 seconds)
2022-04-29 23:09:48	←	raehik has quit (Ping timeout: 240 seconds)
2022-04-29 23:09:52	EvanR	janus, from a ivory tower perspective, language users don't care what the compiler is written in. After all they are using language X not the compiler's language. But your practical examples involve stories where the programmers assume C or C++ is god and anything else is secondary
2022-04-29 23:10:28	EvanR	there's no theoretical reason why that's the case
2022-04-29 23:10:50	EvanR	which is good because pandoc users might not want to learn haskell
2022-04-29 23:11:56	geekosaur	and in fact pandoc is widely used and nobody cares that it's in Haskell; they get it from their package manager and are none the wiser
2022-04-29 23:14:01	←	eggplantade has quit (Remote host closed the connection)
2022-04-29 23:16:01	→	dcoutts_ has joined #haskell
2022-04-29 23:16:15	exarkun	unfortunately a few people notice
2022-04-29 23:16:29	exarkun	and endlessly use its compilation time as an argument against haskell
2022-04-29 23:17:34	EvanR	haskell's compiler specifically, yeah, has some non theoretical delay xD
2022-04-29 23:17:36	←	k8yun has quit (Quit: Leaving)
2022-04-29 23:17:49	←	dextaa4 has quit (Read error: Connection reset by peer)
2022-04-29 23:18:53	EvanR	(also linking takes enough time so it basically can't be realtime)
2022-04-29 23:19:04	←	littlebo1eep has quit (Ping timeout: 240 seconds)
2022-04-29 23:19:17	←	dcoutts__ has quit (Ping timeout: 272 seconds)
2022-04-29 23:20:00	→	dextaa4 has joined #haskell
2022-04-29 23:20:19	←	king_gs has quit (Remote host closed the connection)
2022-04-29 23:22:38	→	king_gs has joined #haskell
2022-04-29 23:23:11	ℹ	Logio_ is now known as Logio
2022-04-29 23:23:37	Logio	Haskell packages on Gentoo can be a pain, if the deps update often
2022-04-29 23:24:17	apache2	janus: in this case I'd need a hierarchy for each of the contsructors and I'd end up with the same problem once removed
2022-04-29 23:24:21	Logio	I actually remember having to get rid of pandoc at some point since it was just too much, every .z release causing hours of rebuilds on an old machine
2022-04-29 23:24:36	←	mikoto-chan has quit (Read error: Connection reset by peer)
2022-04-29 23:26:23	←	dextaa4 has quit (Read error: Connection reset by peer)
2022-04-29 23:26:53	monochrom	My solution is to not use gentoo.
2022-04-29 23:26:55	→	eggplantade has joined #haskell
2022-04-29 23:27:25	monochrom	But I can see how it even needs to rebuild GHC every 2 months.
2022-04-29 23:28:28	→	dextaa4 has joined #haskell
2022-04-29 23:29:10	→	raehik has joined #haskell
2022-04-29 23:29:20	←	dextaa4 has quit (Read error: Connection reset by peer)
2022-04-29 23:30:36	→	mikoto-chan has joined #haskell
2022-04-29 23:30:42	←	MajorBiscuit has quit (Quit: WeeChat 3.4)
2022-04-29 23:31:02	→	dcoutts__ has joined #haskell
2022-04-29 23:31:24	→	dextaa4 has joined #haskell
2022-04-29 23:33:50	←	dcoutts_ has quit (Ping timeout: 272 seconds)
2022-04-29 23:37:20	←	sammelweis has quit (Remote host closed the connection)
2022-04-29 23:38:54	←	raehik has quit (Ping timeout: 272 seconds)
2022-04-29 23:39:59	←	xkuru has quit (Ping timeout: 240 seconds)
2022-04-29 23:40:28	→	sammelweis has joined #haskell
2022-04-29 23:42:05	←	king_gs has quit (Read error: Connection reset by peer)
2022-04-29 23:42:37	←	dcoutts__ has quit (Remote host closed the connection)
2022-04-29 23:42:43	←	anomal has quit (Remote host closed the connection)
2022-04-29 23:42:59	→	dcoutts__ has joined #haskell
2022-04-29 23:43:02	→	anomal has joined #haskell
2022-04-29 23:43:46	→	king_gs has joined #haskell
2022-04-29 23:46:04	→	littlebobeep has joined #haskell
2022-04-29 23:46:08	←	zeenk has quit (Quit: Konversation terminated!)
2022-04-29 23:46:19	→	xkuru has joined #haskell
2022-04-29 23:47:06	←	eggplantade has quit (Remote host closed the connection)
2022-04-29 23:48:03	←	king_gs has quit (Client Quit)
2022-04-29 23:48:19	→	king_gs has joined #haskell
2022-04-29 23:49:56	Franciman	how much does it take to compile ghc, Logio ?
2022-04-29 23:50:54	EvanR	give your answer in gigaflops
2022-04-29 23:51:19	Franciman	LOL
2022-04-29 23:52:20	→	littlebo1eep has joined #haskell
2022-04-29 23:52:40	→	tromp has joined #haskell
2022-04-29 23:52:46	→	yauhsien has joined #haskell
2022-04-29 23:53:07	←	jgeerds has quit (Ping timeout: 240 seconds)
2022-04-29 23:55:41	→	arjun has joined #haskell
2022-04-29 23:56:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-29 23:56:06	arjun	hi
2022-04-29 23:56:22	arjun	i seem to have 9 workspaces by default
2022-04-29 23:56:38	tomsmeding	arjun: #xmonad
2022-04-29 23:56:43	arjun	wrongChannelMyBad
2022-04-29 23:56:49	tomsmeding	:)
2022-04-29 23:56:59	arjun	:)
2022-04-29 23:57:23	tomsmeding	@botsnack
2022-04-29 23:57:23	lambdabot	:)
2022-04-29 23:57:57	←	yauhsien has quit (Ping timeout: 276 seconds)
2022-04-29 23:58:05	sm	I also got rid of all references to pandoc source in my projects (eg hakyll sites), now strictly using only prebuilt pandoc binaries
2022-04-29 23:59:58	monochrom	xmonad was written by a cat. It has 9 lives, so it wants 9 workspaces by default. :)
2022-04-30 00:00:16	→	deadmarshal_ has joined #haskell
2022-04-30 00:00:56	monochrom	@query lambdabot
2022-04-30 00:00:56	lambdabot	Unknown command, try @list
2022-04-30 00:01:20	←	sprout has quit (Ping timeout: 248 seconds)
2022-04-30 00:01:21	EvanR	xmonad runs on conway's life automaton
2022-04-30 00:01:35	EvanR	it's behavior is defined with 9 rules
2022-04-30 00:01:52	arjun	i just logged back into xmonad after a week of i3
2022-04-30 00:02:05	arjun	is it just me or does it just feel more comfortable
2022-04-30 00:02:20	EvanR	never used xmonad sorry
2022-04-30 00:02:24	tomsmeding	could it just be what you're used to
2022-04-30 00:02:32	arjun	also, font rendering seems a bit sharper in xmonad, it could just be placebo
2022-04-30 00:02:50	arjun	tomsmeding, i'm used to xfce :p
2022-04-30 00:03:04	EvanR	a good rule of thumb, if you think text rendering improved, it probably didn't
2022-04-30 00:03:24	monochrom	I never used i3.
2022-04-30 00:03:41	arjun	EvanR, since i moved to thinkpads, i've pretty much dropped my standards for sharpness
2022-04-30 00:03:50	arjun	i'll take anything on that matter
2022-04-30 00:03:51	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-30 00:03:53	→	dh97 has joined #haskell
2022-04-30 00:04:12	tomsmeding	I recently put i3 on my work laptop (had ubuntu WM) because between ubuntu's gnome derivative, pure gnome, and i3, i3 was the only one that didn't drop to 1FPS when connecting an external monitor
2022-04-30 00:04:20	tomsmeding	and no I have no idea what's going on there
2022-04-30 00:04:41	geekosaur	compositing?
2022-04-30 00:04:49	tomsmeding	🤔
2022-04-30 00:05:03	tomsmeding	embarassing if true
2022-04-30 00:06:16	geekosaur	compositing will always be slower, even if accelerated by e.g. opengl. that said, I wouldn't expect it to be *that* slow unless it's e.g. newer versions of picom that have lots of unnecessary calls in their hot path
2022-04-30 00:06:24	geekosaur	but gnome doesn't use picom
2022-04-30 00:06:35	tomsmeding	no it was really <1FPS, I'm not exaggerating
2022-04-30 00:06:49	tomsmeding	so if it's the compositor, there's still something _really_ wrong
2022-04-30 00:07:03	→	littlebo2eep has joined #haskell
2022-04-30 00:07:58	→	hexfive has joined #haskell
2022-04-30 00:07:58	←	king_gs has quit (Read error: Connection reset by peer)
2022-04-30 00:08:11	arjun	tomsmeding, were you running crysis in the background?
2022-04-30 00:08:22	tomsmeding	no, just ubuntu
2022-04-30 00:08:30	tomsmeding	dunno, maybe that's enough
2022-04-30 00:08:35	arjun	then it's weird 
2022-04-30 00:09:31	←	Flonk has quit (Quit: Ping timeout (120 seconds))
2022-04-30 00:09:39	tomsmeding	feels slightly slower in i3+picom than plain i3, but nowhere as bad as ubuntu wm
2022-04-30 00:09:52	→	Flonk has joined #haskell
2022-04-30 00:10:09	tomsmeding	in any case this is heavily offtopic lol
2022-04-30 00:10:22	→	king_gs has joined #haskell
2022-04-30 00:10:34	←	littlebo1eep has quit (Ping timeout: 240 seconds)
2022-04-30 00:10:34	←	redb has quit (Ping timeout: 272 seconds)
2022-04-30 00:11:41	→	redb has joined #haskell
2022-04-30 00:12:02	mrianbloom	Let's say I
2022-04-30 00:12:53	mrianbloom	I- I'm modeling an object oriented system. And there are objects called Entitys and parameters called properties.
2022-04-30 00:13:48	mrianbloom	I want to use the type system in Haskell to enforce that I can never add a certain property to an entity unless it's know to contain that property.
2022-04-30 00:13:54	mrianbloom	*known
2022-04-30 00:13:59	EvanR	I'm modeling a database system. And there are objects called Tables and parameters called columns xD
2022-04-30 00:14:07	mrianbloom	:)
2022-04-30 00:14:45	EvanR	(table would be a class of objects, instances would be rows)
2022-04-30 00:14:51	→	raehik has joined #haskell
2022-04-30 00:14:51	mrianbloom	Is the best way to enforce property ownership, to do it with multiparameter typeclasses?
2022-04-30 00:16:06	mrianbloom	For example if I have a function addProp :: SomeProperty -> SomeEntity -> SomeEntity
2022-04-30 00:16:17	←	redb has quit (Ping timeout: 272 seconds)
2022-04-30 00:17:09	mrianbloom	And each of those types is a GADT that describes which type of entity and which type of property.
2022-04-30 00:17:46	mrianbloom	Many properties are shared by various entities.
2022-04-30 00:17:51	monochrom	I don't know what means "entity", "property", "add property to entity", and worst of all "add property to entity but the entity must have that property in the first place" if I already know Haskell why would you add the property "knows Haskell" to me?
2022-04-30 00:18:31	monochrom	This is why people should either do denotational design or write down typing rules.
2022-04-30 00:18:52	mrianbloom	Good point. Lets say the function is modifyProperty :: (SomeProperty -> SomeProperty) -> SomeEntity -> SomeEntity
2022-04-30 00:19:16	tomsmeding	can different entities have the same property?
2022-04-30 00:19:23	mrianbloom	Yes
2022-04-30 00:19:36	tomsmeding	that's not like any OO system I know, but then maybe it's smalltalk, I don't know smalltalk
2022-04-30 00:19:53	→	redb has joined #haskell
2022-04-30 00:20:00	EvanR	the rule was "the operation is only well typed if the objects happens to already have that property"
2022-04-30 00:20:10	mrianbloom	I'm writing a haskell API for a OO system basically.
2022-04-30 00:20:13	EvanR	which is a dynamic circumstance and is not going to be easy to encode
2022-04-30 00:20:44	mrianbloom	Ownership of a property is static depending on the type of entity.
2022-04-30 00:20:51	monochrom	OK so, lens?
2022-04-30 00:20:53	EvanR	Like I was saying earlier I think it's easier if you decide ahead of time what has what properties
2022-04-30 00:20:55	geekosaur	you can encode that with a type level list, but that's going to be pretty hideous to work with
2022-04-30 00:21:19	mrianbloom	I see. I'll look into those.
2022-04-30 00:21:52	tomsmeding	mrianbloom: why is an entity not just a record with a bunch of properties as fields? Is it really essential that different entities have the _same_ property thing?
2022-04-30 00:22:06	EvanR	to share field names among different object types, that's AOL keyword "extensible records"
2022-04-30 00:22:35	EvanR	which can be implemented with heterolists but yeah tricky business (in haskell)
2022-04-30 00:23:29	EvanR	practically you may get more milage not sharing the concept of Property among different types
2022-04-30 00:23:46	EvanR	and may find it's doesn't really help anyway
2022-04-30 00:24:18	←	redb has quit (Ping timeout: 246 seconds)
2022-04-30 00:24:19	←	dh97 has quit (Ping timeout: 240 seconds)
2022-04-30 00:24:43	→	littlebo1eep has joined #haskell
2022-04-30 00:25:10	EvanR	it is still possible to name the fields of different types the same, using the module system and qualified names
2022-04-30 00:25:22	mrianbloom	tomsmeding: I'm actually encoding a series of operations that are fed to a server so the objects I'm manipulating are not in haskell, and I'm just hoping to determine if an operation is legal on the type level before I encode it.
2022-04-30 00:25:37	tomsmeding	I see
2022-04-30 00:26:03	tomsmeding	yeah then a multi-param type class might be an idea, like 'class HasProp entity property'
2022-04-30 00:26:20	tomsmeding	depending on how type-safe you want to make this, the class need not even have any methods
2022-04-30 00:26:34	←	littlebo2eep has quit (Ping timeout: 240 seconds)
2022-04-30 00:26:41	tomsmeding	an empty class is just a relation between types, where the (empty) instances are the axioms of the relation
2022-04-30 00:26:49	mrianbloom	Right. The multi-param type class just feels odd.
2022-04-30 00:27:06	tomsmeding	because it's empty, because it's multi-param, or because this feels like the wrong place to use a type class?
2022-04-30 00:27:09	→	redb has joined #haskell
2022-04-30 00:27:34	←	zaquest has quit (Remote host closed the connection)
2022-04-30 00:28:15	tomsmeding	I mean, another option would be to have a type family that maps an entity type to a type-level list of the properties that it contains, but I doubt whether that's actually more useful in practice than the type class approach
2022-04-30 00:28:15	mrianbloom	Well for example the user of my API will get an unineilligible error message.
2022-04-30 00:28:56	EvanR	such as, no instance HasProp MiddleName Employee
2022-04-30 00:28:57	mrianbloom	...with the multiparameter method.
2022-04-30 00:29:41	EvanR	I guess "Employee has no property MiddleName" is more humane
2022-04-30 00:29:54	→	littlebo3eep has joined #haskell
2022-04-30 00:30:04	←	littlebo1eep has quit (Ping timeout: 240 seconds)
2022-04-30 00:30:05	tomsmeding	mrianbloom: "No instance for (Has E2 P1) arising from a use of ‘foo’" -- seems an okay error message
2022-04-30 00:30:18	tomsmeding	https://play-haskell.tomsmeding.com/play/paste/NS25TEFY/1
2022-04-30 00:30:32	mrianbloom	Seems pretty good actually.
2022-04-30 00:30:44	mrianbloom	It is a constraint after all.
2022-04-30 00:31:37	EvanR	also, could customized type error messages be used 
2022-04-30 00:31:45	←	redb has quit (Ping timeout: 256 seconds)
2022-04-30 00:32:16	mrianbloom	That's possible. I was looking for how to write those, I've seen them before in the CLUtil api
2022-04-30 00:32:46	maerwald	finally, neovim fixed the Ctrl+i vs tab debacle and I can switch
2022-04-30 00:32:46	→	redb has joined #haskell
2022-04-30 00:33:08	tomsmeding	EvanR: mrianbloom: https://play-haskell.tomsmeding.com/play/paste/m4FbUm2A/1
2022-04-30 00:33:32	tomsmeding	it's nice, but requires a bunch of language extensions that would otherwise be unnecessary, and it's not even _that_ huge of an improvement IMO
2022-04-30 00:34:26	mrianbloom	That's pretty great though. I'll give it a shot and see how annoying the extensions are.
2022-04-30 00:34:34	←	jpds has quit (Ping timeout: 240 seconds)
2022-04-30 00:34:34	mrianbloom	Thank you.
2022-04-30 00:36:47	←	redb has quit (Ping timeout: 240 seconds)
2022-04-30 00:37:08	tomsmeding	maerwald: what was the debacle
2022-04-30 00:37:13	→	jpds has joined #haskell
2022-04-30 00:37:30	maerwald	tomsmeding: it wouldn't distinguish them and they debated on how to fix it for 5 years
2022-04-30 00:37:30	→	tromp has joined #haskell
2022-04-30 00:37:51	tomsmeding	how _do_ you distinguish them
2022-04-30 00:38:03	geekosaur	in a gui environment they're distinct
2022-04-30 00:38:04	maerwald	well, for GUIs it's pretty obvious... it couldn't even do that
2022-04-30 00:38:09	tomsmeding	ah I see
2022-04-30 00:38:18	⚡	tomsmeding was thinking about a terminal environment
2022-04-30 00:38:30	maerwald	now they use CSI u
2022-04-30 00:38:58	maerwald	so you have to teach your terminal now to send the CSI u keycode for Ctrl+i
2022-04-30 00:40:07	←	king_gs has quit (Ping timeout: 240 seconds)
2022-04-30 00:42:15	→	sprout has joined #haskell
2022-04-30 00:42:26	→	redb has joined #haskell
2022-04-30 00:45:15	←	arjun has quit (Remote host closed the connection)
2022-04-30 00:46:27	←	redb has quit (Ping timeout: 240 seconds)
2022-04-30 00:47:43	→	eggplantade has joined #haskell
2022-04-30 00:50:02	→	redb has joined #haskell
2022-04-30 00:51:57	←	eggplantade has quit (Ping timeout: 246 seconds)
2022-04-30 00:54:55	←	redb has quit (Ping timeout: 272 seconds)
2022-04-30 01:01:07	←	martin02_ has quit (Ping timeout: 240 seconds)
2022-04-30 01:02:18	←	deadmarshal_ has quit (Ping timeout: 276 seconds)
2022-04-30 01:04:25	→	deadmarshal_ has joined #haskell
2022-04-30 01:06:11	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-04-30 01:06:27	ℹ	irc: disconnected from server
2022-04-30 15:59:46	→	oxide has joined #haskell
2022-04-30 15:59:46	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-30 15:59:46	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-30 15:59:46	ℹ	Channel #haskell: 699 nicks (1 op, 0 voices, 698 normals)
2022-04-30 15:59:47	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-30 15:59:47	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-30 15:59:47	→	deadmarshal_ has joined #haskell
2022-04-30 16:04:29	→	machinedgod has joined #haskell
2022-04-30 16:07:55	→	eggplantade has joined #haskell
2022-04-30 16:09:42	←	nut has quit (Ping timeout: 276 seconds)
2022-04-30 16:12:57	←	eggplantade has quit (Ping timeout: 276 seconds)
2022-04-30 16:14:41	←	Lord_of_Life has quit (Ping timeout: 256 seconds)
2022-04-30 16:14:45	→	Lord_of_Life_ has joined #haskell
2022-04-30 16:17:30	ℹ	Lord_of_Life_ is now known as Lord_of_Life
2022-04-30 16:22:11	→	elkcl has joined #haskell
2022-04-30 16:30:25	→	__monty__ has joined #haskell
2022-04-30 16:33:52	→	coot has joined #haskell
2022-04-30 16:37:06	←	[Leary] has quit (Remote host closed the connection)
2022-04-30 16:38:29	→	Ether17 has joined #haskell
2022-04-30 16:38:46	←	Ether17 has quit (Client Quit)
2022-04-30 16:43:22	→	jgeerds has joined #haskell
2022-04-30 16:44:54	←	deadmarshal_ has quit (Ping timeout: 272 seconds)
2022-04-30 16:45:58	←	gehmehgeh has quit (Remote host closed the connection)
2022-04-30 16:46:42	→	gehmehgeh has joined #haskell
2022-04-30 16:54:52	←	dostoevsky has quit (Quit: Ping timeout (120 seconds))
2022-04-30 17:01:22	←	romesrf has quit (Ping timeout: 272 seconds)
2022-04-30 17:06:54	←	zyklotomic has quit (Ping timeout: 276 seconds)
2022-04-30 17:08:20	→	zyklotomic has joined #haskell
2022-04-30 17:15:54	ℹ	irc: disconnected from server
2022-04-30 17:17:52	→	oxide has joined #haskell
2022-04-30 17:17:52	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-30 17:17:52	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-30 17:17:52	ℹ	Channel #haskell: 702 nicks (1 op, 0 voices, 701 normals)
2022-04-30 17:17:52	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-30 17:17:52	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-30 17:28:15	←	acidjnk has quit (Ping timeout: 260 seconds)
2022-04-30 17:28:22	→	notzmv has joined #haskell
2022-04-30 17:28:36	→	deadmarshal_ has joined #haskell
2022-04-30 17:30:18	←	jgeerds has quit (Ping timeout: 276 seconds)
2022-04-30 17:31:28	→	alx741 has joined #haskell
2022-04-30 17:36:48	←	alx741 has quit (Ping timeout: 248 seconds)
2022-04-30 17:38:06	←	mikoto-chan has quit (Ping timeout: 276 seconds)
2022-04-30 17:39:12	→	abastro has joined #haskell
2022-04-30 17:39:38	→	alx741 has joined #haskell
2022-04-30 17:42:37	→	pretty_dumm_guy has joined #haskell
2022-04-30 17:42:37	←	abastro has quit (Remote host closed the connection)
2022-04-30 17:42:43	→	jgeerds has joined #haskell
2022-04-30 17:42:54	→	abastro has joined #haskell
2022-04-30 17:45:04	←	azimut has quit (Ping timeout: 240 seconds)
2022-04-30 17:45:47	→	azimut has joined #haskell
2022-04-30 17:46:20	→	CiaoSen has joined #haskell
2022-04-30 17:48:33	→	romesrf has joined #haskell
2022-04-30 17:51:12	←	alx741 has quit (Ping timeout: 248 seconds)
2022-04-30 17:53:54	←	razetime has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2022-04-30 17:54:21	←	deadmarshal_ has quit (Ping timeout: 276 seconds)
2022-04-30 17:55:48	→	alx741 has joined #haskell
2022-04-30 17:56:46	→	deadmarshal_ has joined #haskell
2022-04-30 18:01:12	→	smitop2 has joined #haskell
2022-04-30 18:01:30	→	raehik has joined #haskell
2022-04-30 18:01:53	←	jakalx has left #haskell
2022-04-30 18:02:40	→	jakalx has joined #haskell
2022-04-30 18:05:21	←	alx741 has quit (Ping timeout: 272 seconds)
2022-04-30 18:07:38	←	romesrf has quit (Quit: WeeChat 3.4.1)
2022-04-30 18:07:52	→	alx741 has joined #haskell
2022-04-30 18:09:56	→	Unicorn_Princess has joined #haskell
2022-04-30 18:17:40	ℹ	irc: disconnected from server
2022-04-30 18:20:26	→	oxide has joined #haskell
2022-04-30 18:20:26	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-04-30 18:20:26	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-04-30 18:20:26	ℹ	Channel #haskell: 708 nicks (1 op, 0 voices, 707 normals)
2022-04-30 18:20:27	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-04-30 18:20:27	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-04-30 18:21:32	→	mikoto-chan has joined #haskell
2022-04-30 18:23:19	→	gpncarl has joined #haskell
2022-04-30 18:25:37	←	jgeerds has quit (Ping timeout: 272 seconds)
2022-04-30 18:26:40	←	hsw has quit (Quit: Leaving)
2022-04-30 18:28:55	←	mikoto-chan has quit (Read error: No route to host)
2022-04-30 18:28:59	←	deadmarshal_ has quit (Ping timeout: 240 seconds)
2022-04-30 18:31:19	←	alp_ has quit (Ping timeout: 240 seconds)
2022-04-30 18:37:01	←	alx741 has quit (Ping timeout: 272 seconds)
2022-04-30 18:39:50	→	deadmarshal_ has joined #haskell
2022-04-30 18:45:47	→	Ether17 has joined #haskell
2022-04-30 18:47:02	←	Unicorn_Princess has quit (Remote host closed the connection)
2022-04-30 18:47:39	←	tomgus1 has quit (Ping timeout: 240 seconds)
2022-04-30 18:47:47	←	wootehfoot has quit (Read error: Connection reset by peer)
2022-04-30 18:49:16	→	alx741 has joined #haskell
2022-04-30 18:52:11	←	Ether17 has quit (Quit: Client closed)
2022-04-30 18:54:03	→	pretty_d1 has joined #haskell
2022-04-30 18:54:04	←	pretty_d1 has quit (Client Quit)
2022-04-30 18:54:19	→	pretty_d1 has joined #haskell
2022-04-30 18:55:54	←	pretty_dumm_guy has quit (Ping timeout: 246 seconds)
2022-04-30 18:56:06	←	alx741 has quit (Ping timeout: 276 seconds)
2022-04-30 18:56:14	→	Pickchea has joined #haskell
2022-04-30 18:57:55	→	kspalaiologos has joined #haskell
2022-04-30 18:57:56	←	Pickchea has quit (Client Quit)
2022-04-30 18:58:06	→	alx741 has joined #haskell
2022-04-30 18:58:51	→	Ether17 has joined #haskell
2022-04-30 19:03:37	←	alx741 has quit (Ping timeout: 272 seconds)
2022-04-30 19:06:07	→	alx741 has joined #haskell
2022-04-30 19:07:20	←	Ether17 has quit (Quit: Client closed)
2022-04-30 19:07:32	→	Ether17 has joined #haskell
2022-04-30 19:11:09	←	Ether17 has quit (Client Quit)
2022-04-30 19:11:42	→	Ether17 has joined #haskell
2022-04-30 19:15:50	→	wootehfoot has joined #haskell
2022-04-30 19:17:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-04-30 19:19:43	→	zebrag has joined #haskell
2022-04-30 19:22:45	→	malinoskj29064 has joined #haskell
2022-04-30 19:22:59	←	malinoskj2906 has quit (Read error: Connection reset by peer)
2022-04-30 19:24:13	→	tromp has joined #haskell
2022-04-30 19:25:29	←	alx741 has quit (Ping timeout: 250 seconds)
2022-04-30 19:27:44	→	alx741 has joined #haskell
2022-04-30 19:30:18	←	Ether17 has quit (Quit: Client closed)
2022-04-30 19:30:37	→	Ether17 has joined #haskell
2022-04-30 19:32:59	←	alx741 has quit (Ping timeout: 240 seconds)
2022-04-30 19:33:40	→	alx741 has joined #haskell
2022-04-30 19:36:42	→	Gilbert189 has joined #haskell
2022-04-30 19:37:45	←	abastro has quit (Remote host closed the connection)
2022-04-30 19:38:19	→	tomgus1 has joined #haskell
2022-04-30 19:38:30	→	abastro has joined #haskell
2022-04-30 19:39:07	→	PkmnQ has joined #haskell
2022-04-30 19:39:12	←	PkmnQ has left #haskell (Leaving)
2022-04-30 19:42:23	→	vicfred has joined #haskell
2022-04-30 19:44:26	→	[itchyjunk] has joined #haskell
2022-04-30 19:45:00	←	frost has quit (Ping timeout: 252 seconds)
2022-04-30 19:45:30	←	alx741 has quit (Ping timeout: 276 seconds)
2022-04-30 19:47:43	←	raehik has quit (Quit: WeeChat 3.5)
2022-04-30 19:48:02	Bulby[m]	Are there sum pattern matches? E.g... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/84f8334b2ae30748d565ca9dab612c48b0b2a6d0)
2022-04-30 19:49:04	←	bitdex has quit (Ping timeout: 240 seconds)
2022-04-30 19:49:48	→	alx741 has joined #haskell
2022-04-30 19:50:52	geekosaur	no
2022-04-30 19:52:53	→	bitdex has joined #haskell
2022-04-30 19:53:43	→	hololeap has joined #haskell
2022-04-30 19:55:16	⚡	maerwald[m] sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/f923a0d89eaa4505ec1d2c4eba6794abd581c1d6
2022-04-30 19:56:11	→	yauhsien has joined #haskell
2022-04-30 19:57:01	←	sammelweis_ has quit (Remote host closed the connection)
2022-04-30 19:57:46	→	king_gs has joined #haskell
2022-04-30 19:59:31	←	pretty_d1 has quit (Quit: WeeChat 3.5)
2022-04-30 19:59:48	←	alx741 has quit (Ping timeout: 276 seconds)
2022-04-30 20:01:38	→	alx741 has joined #haskell
2022-04-30 20:02:39	albet70	recently there's a term DAG show up on some programming articles, what's that?
2022-04-30 20:03:33	albet70	does haskell have that stuff?
2022-04-30 20:03:44	Noinia	hmm, I'm having some issues with haskell-interactive-mode in emacs and a cabal project that has multiple components. In particular, if I have some module that appears only as an 'other-modules' in the test-suite, haskell-interactive-mode doesn't seem to recognize the module when trying to load it using haskell-process-load-file. Does anyone know what the best way to solve that is? 
2022-04-30 20:04:22	Noinia	I'm guessing I have to specify somewhere that the file I'm trying to laod is part of the test component. But I'm not sure what the most convenient way to do that is
2022-04-30 20:04:51	Noinia	albet70: DAG usually means Directed Acyclic Graph 
2022-04-30 20:06:51	Bulby[m]	Haxe which has rich enums can do sum matches 😭
2022-04-30 20:08:41	maerwald[m]	Bulby: Haskell language isn't developed anymore, so unlikely 
2022-04-30 20:09:17	Bulby[m]	WHAT 😭
2022-04-30 20:09:17	←	alx741 has quit (Ping timeout: 256 seconds)
2022-04-30 20:09:23	abastro	XD
2022-04-30 20:09:53	Bulby[m]	I mean even "enumeration types" (flat enums) no sum matches? a bit silly
2022-04-30 20:09:59	Bulby[m]	going to have to write a helper function
2022-04-30 20:10:14	maerwald[m]	Your suggestion is too practical. Add some obscure type level features and you'll get our attention 
2022-04-30 20:10:29	Bulby[m]	is that the standard 🤣
2022-04-30 20:11:26	→	alx741 has joined #haskell
2022-04-30 20:11:32	←	king_gs has quit (Read error: Connection reset by peer)
2022-04-30 20:11:59	maerwald[m]	You can get there half way with pattern synonyms/viewpatterns
2022-04-30 20:12:14	Bulby[m]	pattern synonyms? how so?
2022-04-30 20:12:39	Bulby[m]	oh
2022-04-30 20:13:02	Bulby[m]	diff question, is there a different way to write string literals that contain `"`
2022-04-30 20:13:23	abastro	What is sum matches
2022-04-30 20:13:25	geekosaur	there are some quasiquoters on hackage
2022-04-30 20:13:29	Bulby[m]	`"\"color\":\"" <> showColor x <> "ff\""` awful
2022-04-30 20:13:40	Bulby[m]	> <@bulbyvr:matrix.org> Are there sum pattern matches? E.g... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/88956d2f8842e8a4185d6d8fff3dfd34b5770117)
2022-04-30 20:13:42	lambdabot	 <hint>:1:1: error: parse error on input ‘<@’
2022-04-30 20:13:44	geekosaur	abastro, otherwise known as or-patterns
2022-04-30 20:13:45	maerwald[m]	Bulby: https://github.com/hasufell/hsfm/blob/322c766ae534fb21e3427d2845011123ddb90952/src/HSFM/FileSystem/FileType.hs#L193
2022-04-30 20:14:14	abastro	Well, or patterns are kind of useless tho
2022-04-30 20:14:32	abastro	(Unless you mean anonymous sum types, which would be quite useful)
2022-04-30 20:15:07	←	neceve has quit (Ping timeout: 240 seconds)
2022-04-30 20:15:40	tomsmeding	maerwald[m]: why does fileLike not return 'Maybe (File FileInfo)'
2022-04-30 20:16:36	maerwald[m]	tomsmeding: it's old shitty code
2022-04-30 20:16:45	tomsmeding	maerwald[m]: that's a good reason :p
2022-04-30 20:16:51	abastro	XD
2022-04-30 20:17:26	abastro	Hm the program might like some design overhaul
2022-04-30 20:17:53	maerwald[m]	tomsmeding: also, you wouldn't be able to retrieve directory info then
2022-04-30 20:18:04	maerwald[m]	But not sure that's used anywhere else
2022-04-30 20:18:17	tomsmeding	maerwald[m]: right, I was wondering if something used it
2022-04-30 20:18:21	←	alx741 has quit (Ping timeout: 272 seconds)
2022-04-30 20:18:49	maerwald[m]	You're asking questions man :D
2022-04-30 20:19:00	tomsmeding	hard questions?
2022-04-30 20:19:25	maerwald[m]	6 years old codebase
2022-04-30 20:19:38	tomsmeding	I have older code and it's even shittier
2022-04-30 20:19:40	→	mikoto-chan has joined #haskell
2022-04-30 20:20:05	tomsmeding	in a grey past I programmed C and tried to use as few spaces between things as possible
2022-04-30 20:20:10	maerwald[m]	A lil sad it's abandoned 
2022-04-30 20:20:10	tomsmeding	now _that_ code was shitty
2022-04-30 20:20:45	maerwald[m]	I mean, do people still use filemanagers?
2022-04-30 20:20:53	tomsmeding	I use 'ranger' sometimes
2022-04-30 20:20:58	tomsmeding	usually 'ls' is enough
2022-04-30 20:21:27	maerwald[m]	Yeah, fish has so good completion that I don't bother most of the time 
2022-04-30 20:21:34	tomsmeding	that
2022-04-30 20:21:52	tomsmeding	yay another fish user
2022-04-30 20:22:05	maerwald[m]	CWD aware completion
2022-04-30 20:22:28	tomsmeding	why is the $PWD variable named PWD and not CWD
2022-04-30 20:22:49	abastro	"Who uses file managers"   windows user:
2022-04-30 20:22:59	tomsmeding	abastro: we were talking about linux
2022-04-30 20:23:50	maerwald[m]	Powershell has pretty good completion too
2022-04-30 20:24:26	tomsmeding	80 to 90% of the time I'm looking at terminals full screen (heck, even my irc client runs in the terminal); 9.9 to 19.9% of the time looking at browser; 0.1% remainder looking at some other random app
2022-04-30 20:24:50	→	dsrt^ has joined #haskell
2022-04-30 20:24:53	←	yauhsien has quit (Remote host closed the connection)
2022-04-30 20:25:40	→	yauhsien has joined #haskell
2022-04-30 20:25:42	abastro	Sorry that I use vscode
2022-04-30 20:26:06	maerwald[m]	abastro: did you upgrade the haskell extension? 
2022-04-30 20:26:11	abastro	Yes
2022-04-30 20:26:18	maerwald[m]	Does it work?
2022-04-30 20:26:23	abastro	It does
2022-04-30 20:26:34	maerwald[m]	That's a surprise xD
2022-04-30 20:26:41	tomsmeding	:')
2022-04-30 20:26:43	abastro	Well, it is a bit slower than before, but it at least works
2022-04-30 20:27:13	maerwald[m]	Yeah, runs more processes on start
2022-04-30 20:27:54	←	abastro has quit (Remote host closed the connection)
2022-04-30 20:29:15	→	abastro has joined #haskell
2022-04-30 20:29:45	abastro[m]	I wonder how looking at terminal works
2022-04-30 20:30:01	abastro[m]	Autocomplete never work well for me, as I always forget what exists
2022-04-30 20:30:11	tomsmeding	<tab><tab> gives listing :p
2022-04-30 20:30:19	←	yauhsien has quit (Ping timeout: 240 seconds)
2022-04-30 20:30:21	tomsmeding	also fish autocomplete is just so much nicer than bash autocomplete
2022-04-30 20:30:25	tomsmeding	I hear that zsh is nice too
2022-04-30 20:30:46	→	alx741 has joined #haskell
2022-04-30 20:30:52	abastro	I see, hmm
2022-04-30 20:30:58	abastro	For me that prints too many
2022-04-30 20:31:10	tomsmeding	also fish autofills (but doesn't commit yet) from history
2022-04-30 20:31:14	maerwald[m]	Maybe ghcup could use winery instead of parsing yaml every time
2022-04-30 20:31:18	maerwald[m]	https://hackage.haskell.org/package/winery
2022-04-30 20:31:38	tomsmeding	so if you've ran 'cd a/b/c' some time and you type 'cd a', it appends '/b/c' in grey font which you can commit with <rightarrow>
2022-04-30 20:32:07	abastro	I see, fish shell could be nice
2022-04-30 20:32:14	tomsmeding	and these autofills are CWD aware, so if the argument existed in the file system when you ran it in the history, fish remembers that and only autofills it if it now exists too
2022-04-30 20:32:16	←	wootehfoot has quit (Ping timeout: 272 seconds)
2022-04-30 20:32:23	tomsmeding	removes quite a few false positives
2022-04-30 20:32:43	←	coot has quit (Quit: coot)
2022-04-30 20:32:46	maerwald[m]	I actually don't like fish-the-shell-language 
2022-04-30 20:33:00	maerwald[m]	But the default config and completion is unbeatable 
2022-04-30 20:33:03	⚡	tomsmeding writes shell scripts in bash still
2022-04-30 20:33:04	maerwald[m]	Zsh is just a mess
2022-04-30 20:33:39	tomsmeding	despite the fact that fish is supposed to be a nicer language to write actual scripts in
2022-04-30 20:33:48	abastro	XD "nicer language"
2022-04-30 20:33:49	maerwald[m]	And given that I type dangerous stuff into a shell, I don't want it to be messy
2022-04-30 20:34:19	maerwald[m]	tomsmeding: many things you can do in a single bash line, you need several in fish 
2022-04-30 20:34:28	maerwald[m]	That breaks history
2022-04-30 20:34:36	abastro	Perhaps I have too many directories on $HOME
2022-04-30 20:34:37	→	Fairek94 has joined #haskell
2022-04-30 20:34:40	tomsmeding	I know fairly well how bash quoting and word splitting works, at least with the idioms that I use, and I _require_ knowing precisely how that stuff works when doing dangerous stuff :p
2022-04-30 20:35:09	tomsmeding	maerwald[m]: fish lacks <<< which is super annoying, especially for one-liners :p
2022-04-30 20:35:10	←	Fairek94 has quit (Client Quit)
2022-04-30 20:36:11	tomsmeding	bash <(sed 's/\.md$/.html/' <<<"$fname") is just a lot shorter than fish (echo "$fname" | sed 's/\.md$/.html/' | psub)
2022-04-30 20:36:42	←	alx741 has quit (Ping timeout: 272 seconds)
2022-04-30 20:36:57	abastro	Complex commands woh
2022-04-30 20:37:37	tomsmeding	this stuff is useful with loops :p
2022-04-30 20:38:58	→	alx741 has joined #haskell
2022-04-30 20:40:45	←	mikoto-chan has quit (Ping timeout: 276 seconds)
2022-04-30 20:40:49	maerwald[m]	So sad yi is dead
2022-04-30 20:42:51	→	yauhsien has joined #haskell
2022-04-30 20:43:41	→	mikoto-chan has joined #haskell
2022-04-30 20:44:03	←	alx741 has quit (Ping timeout: 246 seconds)
2022-04-30 20:47:54	←	mikoto-chan has quit (Ping timeout: 246 seconds)
2022-04-30 20:48:31	→	alx741 has joined #haskell
2022-04-30 20:49:04	→	hololeap_ has joined #haskell
2022-04-30 20:49:26	←	abastro has quit (Remote host closed the connection)
2022-04-30 20:50:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-04-30 20:50:36	→	abastro has joined #haskell
2022-04-30 20:50:38	←	machinedgod has quit (Ping timeout: 272 seconds)
2022-04-30 20:51:59	dmj`	maerwald[m]: emacs won't let you down
2022-04-30 20:52:19	←	justsomeguy has quit (Quit: WeeChat 3.4)
2022-04-30 20:54:20	maerwald[m]	dmj`: no thanks, already had RSI xD
2022-04-30 20:54:45	maerwald[m]	And I'm quite happy with linux as my main OS
2022-04-30 20:56:09	abastro	emacs and OS?
2022-04-30 20:56:39	←	alx741 has quit (Ping timeout: 240 seconds)
2022-04-30 20:56:50	→	wootehfoot has joined #haskell
2022-04-30 20:57:28	maerwald[m]	But I think an editor in the style of xmonad architecture would be cool. Without scripting nonsense 
2022-04-30 20:58:12	dmj`	maerwald[m]: heavier keys helped my RSI, shock absorbers.
2022-04-30 20:58:19	ℹ	hololeap_ is now known as hololeap
2022-04-30 20:59:39	→	alx741 has joined #haskell
2022-04-30 21:00:05	maerwald[m]	dmj`: For me the opposite was true. Using red cherry mx switches
2022-04-30 21:00:27	maerwald[m]	Even have gateron white
2022-04-30 21:00:35	←	smitop2 has quit (Quit: Connection closed for inactivity)
2022-04-30 21:00:46	maerwald[m]	They trigger if you sneeze
2022-04-30 21:02:10	→	malinoskj290645 has joined #haskell
2022-04-30 21:03:30	←	malinoskj29064 has quit (Ping timeout: 276 seconds)
2022-04-30 21:04:31	←	Ether17 has quit (Quit: Client closed)
2022-04-30 21:05:44	→	Ether17 has joined #haskell
2022-04-30 21:05:45	→	neceve has joined #haskell
2022-04-30 21:05:58	←	[itchyjunk] has quit (Read error: Connection reset by peer)
2022-04-30 21:06:18	→	[itchyjunk] has joined #haskell
2022-04-30 21:07:04	←	pavonia has quit (Quit: Bye!)
2022-04-30 21:07:24	→	worldhelloworld1 has joined #haskell
2022-04-30 21:08:16	←	sudden has quit (Quit: leaving)
2022-04-30 21:11:32	←	alx741 has quit (Ping timeout: 272 seconds)
2022-04-30 21:11:37	→	sudden has joined #haskell
2022-04-30 21:13:46	→	alx741 has joined #haskell
2022-04-30 21:14:09	←	vicfred has quit (Quit: Leaving)
2022-04-30 21:15:21	←	fryguybob has quit (Ping timeout: 272 seconds)
2022-04-30 21:16:57	monochrom	<A> qwertyuiopasdfghjkl  <B> Your cat?  <A> No, I sneezed
2022-04-30 21:18:05	→	eggplantade has joined #haskell
2022-04-30 21:20:15	maerwald	yeah, gateron white actuation force is 35gf
2022-04-30 21:20:24	←	alx741 has quit (Ping timeout: 276 seconds)
2022-04-30 21:20:37	maerwald	only flat laptop key switches have lower
2022-04-30 21:23:21	←	yauhsien has quit (Remote host closed the connection)
2022-04-30 21:24:24	→	yauhsien has joined #haskell
2022-04-30 21:24:42	→	alx741 has joined #haskell
2022-04-30 21:26:23	worldhelloworld1	https://www.irccloud.com/pastebin/womt9nSr/
2022-04-30 21:28:49	worldhelloworld1	the order of function application is basically reversed in the above solution with recursion - just wondering how to go about it with 3 (or more?)  functions 
2022-04-30 21:29:04	dmj`	worldhelloworld1: the altMap' definition doesn't actually apply f' to x
2022-04-30 21:30:00	worldhelloworld1	it does - the first function is applied - with the next iteration f' will be applied, no?
2022-04-30 21:31:49	worldhelloworld1	check the reversed order for function application , ie, `f x : altMap' f' f xs`
2022-04-30 21:32:04	→	king_gs has joined #haskell
2022-04-30 21:32:24	dmj`	oh I'm sorry, you're right, didn't see the flip there
2022-04-30 21:32:39	dmj`	cool
2022-04-30 21:33:19	←	abastro has quit (Ping timeout: 240 seconds)
2022-04-30 21:33:29	worldhelloworld1	np, just wondering if there is an elegant way to do the same with 3 functions alternating - but struggling to think about it in a recursive/elegant manner
2022-04-30 21:33:56	dsal	> let am fs = zipWith  ($) (cycle fs)   in    am [(*10), (*100), (*1000)] [1..10]
2022-04-30 21:33:57	lambdabot	 [10,200,3000,40,500,6000,70,800,9000,100]
2022-04-30 21:34:09	abastro[m]	Wdym order is reversed?
2022-04-30 21:34:17	←	dschrempf has quit (Quit: WeeChat 3.4.1)
2022-04-30 21:35:47	worldhelloworld1	abastro[m] - the order of function application in the second equation
2022-04-30 21:35:51	←	alx741 has quit (Ping timeout: 246 seconds)
2022-04-30 21:37:11	worldhelloworld1	dsal - yea could always use zipWith but trying to think recursion instead - looking for elegance, if any possible
2022-04-30 21:37:20	dsal	@src zipWith
2022-04-30 21:37:20	lambdabot	zipWith f (a:as) (b:bs) = f a b : zipWith f as bs
2022-04-30 21:37:20	lambdabot	zipWith _ _      _      = []
2022-04-30 21:38:07	→	alx741 has joined #haskell
2022-04-30 21:38:23	←	xff0x_ has quit (Read error: Connection reset by peer)
2022-04-30 21:39:39	→	sammelweis has joined #haskell
2022-04-30 21:39:42	worldhelloworld1	is it possible to achieve the same using a similar structure to the 2 functions described above? without reporting to builtin functions like zipWith 
2022-04-30 21:40:27	dsal	Your function above is very similar to zipWIth already.
2022-04-30 21:41:43	dsal	:t zipWith ($) (cycle [(*10), (*100), (*1000)])
2022-04-30 21:41:44	lambdabot	Num c => [c] -> [c]
2022-04-30 21:41:53	dsal	The only thing I did, was use zipWith to make the above.
2022-04-30 21:42:11	monochrom	threesome f g h (x:xs) = f x : threesome g h f xs ?
2022-04-30 21:42:18	worldhelloworld1	i would like to believe it's the usual recursion approach until exhaustion, ok let's say one doesn't want to use zipWith
2022-04-30 21:42:39	→	tzh has joined #haskell
2022-04-30 21:42:52	dsal	If you don't want to use zipWith, you could reinvent it trivially, as lambdabot showed you above.
2022-04-30 21:43:56	worldhelloworld1	monochrom - that looks incredibly simple! 
2022-04-30 21:44:21	dmj`	worldhelloworld1: what's wrong with cycling the [a -> b] ?
2022-04-30 21:45:07	←	alx741 has quit (Ping timeout: 240 seconds)
2022-04-30 21:45:24	monochrom	I guess it's becasue I learend group theory.
2022-04-30 21:45:31	dsal	haha
2022-04-30 21:46:00	dsal	worldhelloworld1: Since you know the first list will be cycled, you could do the cycling yourself manually and use the thing where you reinvented map.
2022-04-30 21:46:02	worldhelloworld1	lol ..... nothing wrong I think , just was looking for a particular approach
2022-04-30 21:46:19	monochrom	From "f g" to "g f" is a permutation of 2 elements, you could read it as "flip" but you could read it as "rotate". For 2 elements they coincide.
2022-04-30 21:46:21	dsal	map itself wouldn't work because you need to rotate the functions.
2022-04-30 21:46:40	monochrom	So now just come up with a 3-element permutation that represents "rotate".
2022-04-30 21:47:27	worldhelloworld1	yepp that is it - let me try in my ghci since I don't know how to use the bot here
2022-04-30 21:47:42	←	shapr has quit (Ping timeout: 276 seconds)
2022-04-30 21:47:45	→	alp_ has joined #haskell
2022-04-30 21:47:53	→	alx741 has joined #haskell
2022-04-30 21:53:18	→	gurkenglas has joined #haskell
2022-04-30 21:57:46	worldhelloworld1	thanks! worked - don't know how i couldn't think of it when it was so deceptively simple .... monochrom .... thanks dsal too for the other approach 
2022-04-30 21:58:07	←	alx741 has quit (Ping timeout: 240 seconds)
2022-04-30 21:59:23	→	littlebobeep has joined #haskell
2022-04-30 22:00:39	→	alx741 has joined #haskell
2022-04-30 22:00:42	←	Ether17 has quit (Quit: Client closed)
2022-04-30 22:03:29	←	malinoskj290645 has quit (Ping timeout: 272 seconds)
2022-04-30 22:05:22	→	Ether17 has joined #haskell
2022-04-30 22:05:35	→	x_kuru has joined #haskell
2022-04-30 22:06:38	←	alx741 has quit (Ping timeout: 272 seconds)
2022-04-30 22:08:51	→	alx741 has joined #haskell
2022-04-30 22:09:09	←	xkuru has quit (Ping timeout: 276 seconds)
2022-04-30 22:13:03	→	cyanide4dinner has joined #haskell
2022-04-30 22:13:04	←	wootehfoot has quit (Ping timeout: 248 seconds)
2022-04-30 22:14:06	→	coot has joined #haskell
2022-04-30 22:15:56	→	wootehfoot has joined #haskell
2022-04-30 22:18:49	←	CiaoSen has quit (Ping timeout: 250 seconds)
2022-04-30 22:19:18	←	|beowulf| has quit (Quit: = "")
2022-04-30 22:23:06	←	alx741 has quit (Ping timeout: 246 seconds)
2022-04-30 22:25:27	→	alx741 has joined #haskell
2022-04-30 22:27:49	←	FinnElija has quit (Remote host closed the connection)
2022-04-30 22:28:12	→	FinnElija has joined #haskell
2022-04-30 22:28:42	←	yauhsien has quit (Remote host closed the connection)
2022-04-30 22:29:35	←	fjmorazan has quit (Quit: fjmorazan)
2022-04-30 22:30:01	←	Gilbert189 has left #haskell (Leaving)
2022-04-30 22:30:11	→	fjmorazan has joined #haskell
2022-04-30 22:31:12	←	[itchyjunk] has quit (Read error: Connection reset by peer)
2022-04-30 22:31:32	→	[itchyjunk] has joined #haskell
2022-04-30 22:32:33	←	dcoutts_ has quit (Ping timeout: 276 seconds)
2022-04-30 22:34:27	→	fef has joined #haskell
2022-04-30 22:36:03	←	alx741 has quit (Ping timeout: 256 seconds)
2022-04-30 22:36:21	←	coot has quit (Quit: coot)
2022-04-30 22:38:38	→	alx741 has joined #haskell
2022-04-30 22:38:40	←	gpncarl has quit (Ping timeout: 248 seconds)
2022-04-30 22:40:10	→	gpncarl has joined #haskell
2022-04-30 22:43:45	←	alx741 has quit (Ping timeout: 246 seconds)
2022-04-30 22:44:33	←	gpncarl has quit (Ping timeout: 256 seconds)
2022-04-30 22:46:04	→	alx741 has joined #haskell
2022-04-30 22:47:09	→	gpncarl has joined #haskell
2022-04-30 22:47:13	←	wootehfoot has quit (Quit: Leaving)
2022-04-30 22:49:15	→	wootehfoot has joined #haskell
2022-04-30 22:49:34	←	king_gs has quit (Ping timeout: 250 seconds)
2022-04-30 22:52:16	→	yauhsien has joined #haskell
2022-04-30 22:52:19	←	alx741 has quit (Ping timeout: 240 seconds)
2022-04-30 22:54:29	→	titibandit has joined #haskell
2022-04-30 22:55:02	→	alx741 has joined #haskell
2022-04-30 22:55:18	←	gpncarl has quit (Ping timeout: 246 seconds)
2022-04-30 22:55:36	←	jakalx has left #haskell
2022-04-30 22:56:15	→	mvk has joined #haskell
2022-04-30 22:58:45	→	fryguybob has joined #haskell
2022-04-30 23:01:09	←	alx741 has quit (Ping timeout: 276 seconds)
2022-04-30 23:02:09	→	jakalx has joined #haskell
2022-04-30 23:02:53	←	titibandit has quit (Remote host closed the connection)
2022-04-30 23:03:06	→	titibandit has joined #haskell
2022-04-30 23:04:04	←	Ether17 has quit (Quit: Client closed)
2022-04-30 23:06:06	→	dcoutts_ has joined #haskell
2022-04-30 23:13:14	→	alx741 has joined #haskell
2022-04-30 23:13:54	→	o-90 has joined #haskell
2022-04-30 23:13:58	→	werneta has joined #haskell
2022-04-30 23:16:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-04-30 23:17:37	→	jmdaemon has joined #haskell
2022-04-30 23:18:39	←	alp_ has quit (Ping timeout: 240 seconds)
2022-04-30 23:19:24	←	o-90 has quit (Remote host closed the connection)
2022-04-30 23:20:00	←	alx741 has quit (Ping timeout: 276 seconds)
2022-04-30 23:20:33	→	econo has joined #haskell
2022-04-30 23:21:04	←	kspalaiologos has quit (Quit: Leaving)
2022-04-30 23:22:07	→	alx741 has joined #haskell
2022-04-30 23:23:19	→	pretty_dumm_guy has joined #haskell
2022-04-30 23:24:33	←	zyklotomic has quit (Ping timeout: 276 seconds)
2022-04-30 23:25:56	→	zyklotomic has joined #haskell
2022-04-30 23:27:16	←	alx741 has quit (Ping timeout: 250 seconds)
2022-04-30 23:29:23	→	alx741 has joined #haskell
2022-04-30 23:34:20	→	arjun has joined #haskell
2022-04-30 23:35:18	←	alx741 has quit (Ping timeout: 272 seconds)
2022-04-30 23:35:54	←	deadmarshal_ has quit (Ping timeout: 246 seconds)
2022-04-30 23:37:36	→	alx741 has joined #haskell
2022-04-30 23:38:17	→	mikoto-chan has joined #haskell
2022-04-30 23:38:30	←	jakalx has left #haskell
2022-04-30 23:41:09	←	dextaa4 has quit (Read error: Connection reset by peer)
2022-04-30 23:43:15	→	dextaa4 has joined #haskell
2022-04-30 23:43:41	→	jakalx has joined #haskell
2022-04-30 23:44:48	←	alx741 has quit (Ping timeout: 248 seconds)
2022-04-30 23:50:53	←	littlebobeep has quit (Remote host closed the connection)
2022-04-30 23:51:13	→	littlebobeep has joined #haskell
2022-04-30 23:53:24	→	Unicorn_Princess has joined #haskell
2022-04-30 23:57:50	→	alx741 has joined #haskell
2022-05-01 00:04:34	→	bontaq has joined #haskell
2022-05-01 00:04:59	←	alx741 has quit (Ping timeout: 240 seconds)
2022-05-01 00:05:47	→	alx741 has joined #haskell
2022-05-01 00:10:24	←	mikoto-chan has quit (Ping timeout: 248 seconds)
2022-05-01 00:10:59	←	alx741 has quit (Ping timeout: 240 seconds)
2022-05-01 00:13:46	→	alx741 has joined #haskell
2022-05-01 00:13:57	→	coot has joined #haskell
2022-05-01 00:14:05	←	dyeplexer has quit (Ping timeout: 256 seconds)
2022-05-01 00:20:09	←	cyanide4dinner has quit (Quit: cyanide4dinner)
2022-05-01 00:22:01	←	alx741 has quit (Ping timeout: 256 seconds)
2022-05-01 00:23:00	→	dhil has joined #haskell
2022-05-01 00:23:37	←	zebrag has quit (Quit: Konversation terminated!)
2022-05-01 00:24:26	→	alx741 has joined #haskell
2022-05-01 00:26:10	→	Sgeo has joined #haskell
2022-05-01 00:30:24	←	alx741 has quit (Ping timeout: 272 seconds)
2022-05-01 00:32:39	→	alx741 has joined #haskell
2022-05-01 00:35:46	→	kenran has joined #haskell
2022-05-01 00:37:51	←	alx741 has quit (Ping timeout: 246 seconds)
2022-05-01 00:40:09	→	alx741 has joined #haskell
2022-05-01 00:44:29	→	king_gs has joined #haskell
2022-05-01 00:45:48	←	alx741 has quit (Ping timeout: 276 seconds)
2022-05-01 00:48:06	→	alx741 has joined #haskell
2022-05-01 00:48:50	→	hololeap has joined #haskell
2022-05-01 00:49:44	hololeap	flag ghc-patched-unboxed-bytecode;      description: The GHC version we link against supports unboxed sums and tuples in bytecode
2022-05-01 00:49:53	hololeap	https://github.com/haskell/haskell-language-server/commit/03e833b3427237061a11661da3b71aea882703f8
2022-05-01 00:50:06	hololeap	anyone know what this is talking about?
2022-05-01 00:50:35	hololeap	like, which versions support this?
2022-05-01 00:51:49	→	machinedgod has joined #haskell
2022-05-01 00:52:08	→	stackdroid18 has joined #haskell
2022-05-01 00:52:59	hololeap	is it literally just referring to UnboxedTuples and UnboxedSums language extensions? so ghc >=8.2.1 ?
2022-05-01 00:53:20	tomsmeding	hololeap: this sounds relevant https://gitlab.haskell.org/ghc/ghc/-/issues/15617
2022-05-01 00:53:31	tomsmeding	hololeap: in particular this comment https://gitlab.haskell.org/ghc/ghc/-/issues/15617#note_286380
2022-05-01 00:54:15	←	alx741 has quit (Ping timeout: 276 seconds)
2022-05-01 00:54:27	hololeap	huh, ok
2022-05-01 00:54:41	tomsmeding	(found by searching on "unboxed sums bytecode" in the ghc issue tracker :p )
2022-05-01 00:56:00	→	alx741 has joined #haskell
2022-05-01 01:01:41	→	gustik has joined #haskell
2022-05-01 01:02:04	←	alx741 has quit (Ping timeout: 272 seconds)
2022-05-01 01:04:04	→	alx741 has joined #haskell
2022-05-01 01:04:13	←	king_gs has quit (Read error: Connection reset by peer)
2022-05-01 01:06:00	→	king_gs has joined #haskell
2022-05-01 01:13:54	→	alp_ has joined #haskell
2022-05-01 01:15:03	←	coot has quit (Quit: coot)
2022-05-01 01:15:36	→	coot has joined #haskell
2022-05-01 01:16:34	←	hololeap has quit (Ping timeout: 240 seconds)
2022-05-01 01:18:15	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-01 01:18:28	←	coot has quit (Client Quit)
2022-05-01 01:18:32	←	alx741 has quit (Ping timeout: 272 seconds)
2022-05-01 01:18:53	→	hololeap has joined #haskell
2022-05-01 01:18:53	→	segfaultfizzbuzz has joined #haskell
2022-05-01 01:19:25	segfaultfizzbuzz	i wasn't getting a quick response in #haskell-beginners so i am trying here, but feel free to tell me to get lost on this one. i'm making yet another attempt at learning haskell here and have defined a simple data structure:
2022-05-01 01:19:34	segfaultfizzbuzz	data V2 = { x :: Int, y :: Int }
2022-05-01 01:20:04	segfaultfizzbuzz	this is meant to be a vector over the integers. i've successfully defined a distance function and now i want to think about adding/subtracting etc these things
2022-05-01 01:20:20	segfaultfizzbuzz	i would, of course, define add and subtract functions but
2022-05-01 01:20:42	segfaultfizzbuzz	can i tell rust V2 is an abelian group or something like that ?
2022-05-01 01:20:49	→	alx741 has joined #haskell
2022-05-01 01:21:00	tomsmeding	s/rust/haskell/?
2022-05-01 01:21:24	segfaultfizzbuzz	yeah sorry :)
2022-05-01 01:21:35	hololeap	there are libraries that have more fine-tuned typeclasses for numbers, but in stock haskell, you are stuck with Num
2022-05-01 01:21:42	tomsmeding	haskell has no type class for "abelian group", but it does have Num https://hackage.haskell.org/package/base-4.15.0.0/docs/Prelude.html#t:Num
2022-05-01 01:22:28	→	dashkal has joined #haskell
2022-05-01 01:22:36	tomsmeding	segfaultfizzbuzz: do you know how to make a type an instance of a type class?
2022-05-01 01:23:02	hololeap	% :i Num
2022-05-01 01:23:10	tomsmeding	yahb is dead
2022-05-01 01:23:22	hololeap	:(
2022-05-01 01:23:25	tomsmeding	yeah
2022-05-01 01:23:59	segfaultfizzbuzz	tomsmeding: i mean i can look up the syntax, i understand that as being fairly equivalent to using generic types even if it isn't technically equivalent
2022-05-01 01:24:19	tomsmeding	segfaultfizzbuzz: given your typo earlier, I take it you're at least somewhat familiar with rust?
2022-05-01 01:24:23	tomsmeding	if so, type class ~= trait
2022-05-01 01:24:39	tomsmeding	much more so than being similar to generics in C++/Go/Java
2022-05-01 01:26:09	←	alx741 has quit (Ping timeout: 246 seconds)
2022-05-01 01:26:17	segfaultfizzbuzz	yeah i can make rust do things
2022-05-01 01:26:29	segfaultfizzbuzz	i am too dumb to program computers but i keep trying
2022-05-01 01:26:57	tomsmeding	segfaultfizzbuzz: here's an example of a Num instance, in this case for Ratio, a type for fractions https://hackage.haskell.org/package/base-4.15.0.0/docs/src/GHC-Real.html#line-495
2022-05-01 01:27:03	tomsmeding	ignore the SPECIALIZE
2022-05-01 01:27:11	←	neceve has quit (Ping timeout: 256 seconds)
2022-05-01 01:27:43	tomsmeding	the '(Integral a) =>' is a _superclass constraint_: that header says that 'Ratio a', for any type 'a', is an instance of Num (with the below implementation) _if_ 'a' is an instance of Integral
2022-05-01 01:27:57	tomsmeding	in your case, V2 doesn't have any type parameters, so it would just be 'instance Num V2 where'
2022-05-01 01:28:12	hololeap	a typeclass is similar to an interface from Java. it basically means "this type must implement these functions", so if you wanted to write a Num instance for V2, you would need to write definitions for (+), (-), (*), etc
2022-05-01 01:28:25	→	alx741 has joined #haskell
2022-05-01 01:28:37	tomsmeding	furthermore, the :% is actually the constructor of Ratio -- don't be fooled by the fact that it's written like an infix operator
2022-05-01 01:29:07	hololeap	but there is some hand waving. haskell can't enforce rules such as the commutativity of (+), so it's up to the programmer to do it correctly
2022-05-01 01:29:33	tomsmeding	(similarly to Rust, actually)
2022-05-01 01:29:56	hololeap	hence why quite a few typeclasses come with a set of rules that you are supposed to make sure are enforced in your instances
2022-05-01 01:30:23	segfaultfizzbuzz	can we rename "programmer" to "denial of service victim" ?
2022-05-01 01:30:37	tomsmeding	because there's too much to remember? :D
2022-05-01 01:30:45	segfaultfizzbuzz	yeah it's all just too much
2022-05-01 01:31:12	←	king_gs has quit (Ping timeout: 250 seconds)
2022-05-01 01:31:19	tomsmeding	suggestion: write an instance of Eq for your V2
2022-05-01 01:31:39	segfaultfizzbuzz	i was starting to try to define (+)
2022-05-01 01:31:52	segfaultfizzbuzz	and... i am fighting maybe with how haskell handles parens or something ?
2022-05-01 01:32:00	segfaultfizzbuzz	(+) :: V2 -> V2 -> V2
2022-05-01 01:32:13	segfaultfizzbuzz	(+) a b = V2 (x a + x b) (y a + y b)
2022-05-01 01:32:15	tomsmeding	what are you writing? Parens with infix operators can be somewhat confusing if you're a haskell beginner
2022-05-01 01:32:28	tomsmeding	hm that looks okay actually
2022-05-01 01:32:55	tomsmeding	_oh_
2022-05-01 01:33:06	segfaultfizzbuzz	haskell complains about the second + which is relaly confusing
2022-05-01 01:33:17	tomsmeding	you're writing this as a top-level function, not in a Num instance, so you're shadowing the standard library (+) here
2022-05-01 01:33:39	tomsmeding	so both +'es in your definition now refer to your own V2 +
2022-05-01 01:33:43	tomsmeding	which isn't going to type check :p
2022-05-01 01:33:54	segfaultfizzbuzz	yeah i was kinda trying to overload
2022-05-01 01:34:06	tomsmeding	haskell doesn't do ad-hoc overloading like C++
2022-05-01 01:34:19	geekosaur	you have to define it as part of the instance, not as an "overload"
2022-05-01 01:34:21	segfaultfizzbuzz	lol thank the floppy disk gods
2022-05-01 01:34:22	←	alx741 has quit (Ping timeout: 272 seconds)
2022-05-01 01:34:24	tomsmeding	in order to overload (+) for a type T, you need to make T an instance of the class that (+) comes from
2022-05-01 01:34:31	tomsmeding	i.e. you'll have to make V2 an instance of Num
2022-05-01 01:34:53	tomsmeding	instance Num V2 where \n (+) a b = ...
2022-05-01 01:35:10	geekosaur	remember indentation
2022-05-01 01:35:11	tomsmeding	(a line break and indentation instead of \n)
2022-05-01 01:35:15	tomsmeding	yes lol
2022-05-01 01:35:46	tomsmeding	minor readability hack: this is also allowed: instance Num V2 where a + b = ...
2022-05-01 01:35:47	→	yauhsien_ has joined #haskell
2022-05-01 01:36:15	geekosaur	and all the other methods of Num, granting you may not care about some of them so you might simply define them as `undefined`
2022-05-01 01:36:23	geekosaur	(thinking of (*) in particular)
2022-05-01 01:36:33	tomsmeding	well, you can also just omit them, and GHC will spawn lots of warnings
2022-05-01 01:36:34	segfaultfizzbuzz	so i am telling haskell that V2 is a Num
2022-05-01 01:36:35	→	alx741 has joined #haskell
2022-05-01 01:36:37	tomsmeding	yes
2022-05-01 01:36:45	tomsmeding	but warnings are not errors
2022-05-01 01:36:49	←	yauhsien has quit (Ping timeout: 256 seconds)
2022-05-01 01:36:51	→	CiaoSen has joined #haskell
2022-05-01 01:37:04	←	fef has quit (Ping timeout: 240 seconds)
2022-05-01 01:37:16	→	king_gs has joined #haskell
2022-05-01 01:37:19	tomsmeding	(though this does indicate that Num is probably too large a class -- as you already indicated, it would've been nicer if there was an "abelian group" class)
2022-05-01 01:37:56	segfaultfizzbuzz	as an outsider it seems like the concepts of group, magma etc are senseless to name
2022-05-01 01:38:07	geekosaur	Num is Ring + fromInteger + signum, arguably. (one could also argue abs, but could also argue abs follows from Ring)
2022-05-01 01:38:09	segfaultfizzbuzz	one should simply say commutative, has identity, etc at a particulate level
2022-05-01 01:38:20	hololeap	there is "numeric-prelude" although it's pretty arcane: https://hackage.haskell.org/package/numeric-prelude-0.4.3.3/docs/Algebra-Additive.html
2022-05-01 01:38:34	←	king_gs has quit (Client Quit)
2022-05-01 01:39:00	tomsmeding	segfaultfizzbuzz: right, though "commutative" is kinda odd to have as a type class, because it doesn't add any new _methods_/_members_; and haskell type classes cannot enforce laws actively
2022-05-01 01:39:37	→	pera has joined #haskell
2022-05-01 01:39:41	segfaultfizzbuzz	yeah but lack of law enforcement is a language flaw
2022-05-01 01:40:08	geekosaur	not really, unless your language has a metalanguage built in
2022-05-01 01:40:20	→	[Leary] has joined #haskell
2022-05-01 01:40:21	tomsmeding	it's not a flaw, it's a tradeoff
2022-05-01 01:40:39	geekosaur	but then your metalanguage needs a metametalanguage to prove things on the metalanguage level…
2022-05-01 01:40:43	segfaultfizzbuzz	if i ever understand how to program computers, my language will have infinitely recursive metalanguages
2022-05-01 01:40:52	hololeap	enforcing commutivity would require dependent types at the very least, I would think
2022-05-01 01:40:54	segfaultfizzbuzz	i will define the y languinator
2022-05-01 01:40:57	geekosaur	there's one already, Heard's Omega
2022-05-01 01:41:05	tomsmeding	if you care more about statically enforced correctness, not having it is a flaw; if you care more about implementability of the language or usability for programmers, _having_ it would be a flaw
2022-05-01 01:41:15	tomsmeding	there is a place for Agda and Idris, and there is a place for Haskell
2022-05-01 01:41:23	segfaultfizzbuzz	geekosaur: lol google doesn't know what this is
2022-05-01 01:41:23	tomsmeding	there is also a place for Go
2022-05-01 01:41:38	geekosaur	sorry I meant Sheard
2022-05-01 01:41:44	tomsmeding	segfaultfizzbuzz: "infinitely recursive metalanguages" that sounds suspiciously like a dependently-typed language
2022-05-01 01:41:55	←	alx741 has quit (Ping timeout: 256 seconds)
2022-05-01 01:42:14	geekosaur	https://en.wikipedia.org/wiki/%CE%A9mega
2022-05-01 01:42:16	hololeap	yeah Idris actually does do this, but it sacrifices performance
2022-05-01 01:42:32	hololeap	if I understand correctly
2022-05-01 01:43:02	geekosaur	yes. everything comes at a price
2022-05-01 01:43:13	geekosaur	the question is whether you're willing to pay the price
2022-05-01 01:43:37	geekosaur	there are still arguments going on over dependent haskell because many haskellers are not convinced the price is worth it
2022-05-01 01:43:51	hololeap	haskell has good performance and a good track record, and gives you reasonable guarantees with its type system
2022-05-01 01:43:54	geekosaur	whereas its developer thinks it can be written while minimizing the price
2022-05-01 01:44:15	geekosaur	(but forgets that, once it's out there it will be used, anbd then everyone will be forced to pay the price)
2022-05-01 01:44:37	→	tromp has joined #haskell
2022-05-01 01:44:52	segfaultfizzbuzz	anyway so i will work out the instance syntax momentarily, but it looks like the major answer here is that
2022-05-01 01:45:19	segfaultfizzbuzz	even if i told haskell that V2 was an abelian group, it wouldn't get me anything at compile time as compared to just defining an add function, a subtraction function, etc
2022-05-01 01:45:28	tomsmeding	that's right
2022-05-01 01:45:40	←	_ht has quit (Remote host closed the connection)
2022-05-01 01:45:58	tomsmeding	GHC will not complain if you write this: instance Eq V2 where _ == _ = True ; _ /= _ = True
2022-05-01 01:46:02	hololeap	it would, however, inform you and anyone looking at your code of what it's supposed to do. there are also test suites that can check this kind of thing
2022-05-01 01:46:05	tomsmeding	which is obvious nonsense, and violates the laws
2022-05-01 01:46:15	segfaultfizzbuzz	hololeap: yeah it's effectively a comment
2022-05-01 01:46:23	→	alx741 has joined #haskell
2022-05-01 01:47:03	tomsmeding	indeed, there are generic property tests written for quite a few of the standard classes: https://hackage.haskell.org/package/checkers-0.6.0/docs/Test-QuickCheck-Classes.html
2022-05-01 01:47:13	tomsmeding	(not for Num because the Num laws are kind of badly specified anyway)
2022-05-01 01:47:34	hololeap	it has more function than a comment
2022-05-01 01:48:11	segfaultfizzbuzz	so you can heuristically check
2022-05-01 01:48:51	segfaultfizzbuzz	wow neither google scholar nor google know what heard's omega is
2022-05-01 01:48:59	→	mikoto-chan has joined #haskell
2022-05-01 01:49:13	→	pavonia has joined #haskell
2022-05-01 01:49:21	geekosaur	I told you earlier, I meant sheard. and sent https://en.wikipedia.org/wiki/%CE%A9mega
2022-05-01 01:49:54	→	king_gs has joined #haskell
2022-05-01 01:50:05	segfaultfizzbuzz	geekosaur: my bad i missed that, scrollback issue on my part
2022-05-01 01:50:42	segfaultfizzbuzz	i like the idea of a type function, that's interesting
2022-05-01 01:51:09	tomsmeding	@let type family F where F Int = Bool ; F Bool = Int
2022-05-01 01:51:11	lambdabot	 /sandbox/tmp/.L.hs:156:9: error:
2022-05-01 01:51:11	lambdabot	     • Number of parameters must match family declaration; expected 0
2022-05-01 01:51:11	lambdabot	     • In the type family declaration for ‘F’
2022-05-01 01:51:18	tomsmeding	@let type family F a where F Int = Bool ; F Bool = Int
2022-05-01 01:51:19	lambdabot	 Defined.
2022-05-01 01:51:26	tomsmeding	> True :: F Int
2022-05-01 01:51:27	lambdabot	 True
2022-05-01 01:51:31	tomsmeding	that's a type function in Haskell :p
2022-05-01 01:52:21	geekosaur	we don't have generalized type functions though, just what amounts ot lookup tables
2022-05-01 01:52:27	maerwald	tomsmeding: playground is down?
2022-05-01 01:52:37	tomsmeding	rip?
2022-05-01 01:52:54	hololeap	but honestly, we can just look at the code and see if (+) is commutative or not and move on. this shouldn't be something to get hung up on
2022-05-01 01:52:59	maerwald	502
2022-05-01 01:53:33	tomsmeding	"Apr 30 14:31:35 play-haskell systemd[1]: tom-pastebin-haskell.service: Deactivated successfully." O.o
2022-05-01 01:54:27	ℹ	irc: disconnected from server
2022-05-01 11:09:01	→	oxide has joined #haskell
2022-05-01 11:09:01	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-05-01 11:09:01	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-05-01 11:09:01	ℹ	Channel #haskell: 700 nicks (1 op, 0 voices, 699 normals)
2022-05-01 11:09:01	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-05-01 11:09:01	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-05-01 11:11:01	←	king_gs has quit (Ping timeout: 250 seconds)
2022-05-01 11:13:06	→	gpncarl has joined #haskell
2022-05-01 11:17:20	→	sprout has joined #haskell
2022-05-01 11:18:36	←	sprout_ has quit (Ping timeout: 240 seconds)
2022-05-01 11:24:05	←	img has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-05-01 11:24:09	→	Ether17 has joined #haskell
2022-05-01 11:24:33	←	Ether17 has quit (Client Quit)
2022-05-01 11:34:27	→	img has joined #haskell
2022-05-01 11:45:13	←	coot has quit (Quit: coot)
2022-05-01 11:55:03	←	elkcl has quit (Ping timeout: 272 seconds)
2022-05-01 11:55:19	→	elkcl has joined #haskell
2022-05-01 11:56:48	→	[itchyjunk] has joined #haskell
2022-05-01 11:58:35	←	albet70 has quit (Remote host closed the connection)
2022-05-01 12:04:43	→	albet70 has joined #haskell
2022-05-01 12:05:10	←	elkcl has quit (Ping timeout: 272 seconds)
2022-05-01 12:05:53	→	elkcl has joined #haskell
2022-05-01 12:13:40	→	zeenk has joined #haskell
2022-05-01 12:18:51	←	razetime has quit (Ping timeout: 256 seconds)
2022-05-01 12:19:11	→	tromp has joined #haskell
2022-05-01 12:24:56	→	Midjak has joined #haskell
2022-05-01 12:28:12	←	worldhelloworld1 has quit (Quit: Connection closed for inactivity)
2022-05-01 12:29:10	←	yauhsien has quit (Remote host closed the connection)
2022-05-01 12:30:28	→	neceve has joined #haskell
2022-05-01 12:34:22	→	yauhsien has joined #haskell
2022-05-01 12:38:35	→	worldhelloworld1 has joined #haskell
2022-05-01 12:50:10	→	gehmehgeh has joined #haskell
2022-05-01 12:50:59	←	yauhsien has quit (Remote host closed the connection)
2022-05-01 12:52:49	→	razetime has joined #haskell
2022-05-01 12:54:12	←	jmdaemon has quit (Ping timeout: 240 seconds)
2022-05-01 12:59:28	→	acidjnk has joined #haskell
2022-05-01 13:04:31	→	xkuru has joined #haskell
2022-05-01 13:12:49	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-01 13:15:47	→	yauhsien has joined #haskell
2022-05-01 13:19:34	←	azimut has quit (Ping timeout: 240 seconds)
2022-05-01 13:21:03	→	hughjfchen[m] has joined #haskell
2022-05-01 13:21:38	→	azimut has joined #haskell
2022-05-01 13:22:24	←	mvk has quit (Ping timeout: 248 seconds)
2022-05-01 13:29:22	←	dknite has quit (Quit: Client closed)
2022-05-01 13:29:48	→	dust_ has joined #haskell
2022-05-01 13:30:31	→	king_gs has joined #haskell
2022-05-01 13:31:32	←	Sgeo has quit (Read error: Connection reset by peer)
2022-05-01 13:34:47	←	king_gs has quit (Ping timeout: 256 seconds)
2022-05-01 13:34:56	→	deadmarshal_ has joined #haskell
2022-05-01 13:36:05	←	dust_ has quit (Quit: Konversation terminated!)
2022-05-01 13:39:24	←	deadmarshal_ has quit (Ping timeout: 246 seconds)
2022-05-01 13:41:01	←	Hiring has left #haskell
2022-05-01 13:42:05	←	tzh has quit (Quit: zzz)
2022-05-01 13:45:38	→	DNH has joined #haskell
2022-05-01 13:45:40	→	waleee has joined #haskell
2022-05-01 13:45:50	←	[itchyjunk] has quit (Remote host closed the connection)
2022-05-01 13:45:56	←	jargon has quit (Quit: Restarting.)
2022-05-01 13:47:54	→	coot has joined #haskell
2022-05-01 13:49:55	←	DNH has quit (Client Quit)
2022-05-01 13:55:06	→	_ht has joined #haskell
2022-05-01 14:01:05	←	eggplantade has quit (Remote host closed the connection)
2022-05-01 14:02:16	←	steerio has quit (Remote host closed the connection)
2022-05-01 14:06:15	→	deadmarshal_ has joined #haskell
2022-05-01 14:12:00	→	epolanski has joined #haskell
2022-05-01 14:15:22	→	zer0bitz has joined #haskell
2022-05-01 14:21:46	→	nicbk has joined #haskell
2022-05-01 14:28:34	←	bitdex has quit (Ping timeout: 240 seconds)
2022-05-01 14:30:14	←	amesgen[m] has quit (Quit: You have been kicked for being idle)
2022-05-01 14:31:01	→	bitdex has joined #haskell
2022-05-01 14:31:01	←	fef has quit (Remote host closed the connection)
2022-05-01 14:36:16	→	tromp has joined #haskell
2022-05-01 14:46:03	→	jargon has joined #haskell
2022-05-01 14:47:34	←	bitdex has quit (Ping timeout: 240 seconds)
2022-05-01 14:50:47	→	bitdex has joined #haskell
2022-05-01 14:53:46	→	deadmars- has joined #haskell
2022-05-01 14:54:31	←	anomal has quit (Remote host closed the connection)
2022-05-01 14:54:39	←	deadmarshal_ has quit (Ping timeout: 246 seconds)
2022-05-01 14:57:01	→	nut has joined #haskell
2022-05-01 14:57:49	←	yauhsien has quit (Remote host closed the connection)
2022-05-01 14:59:00	→	king_gs has joined #haskell
2022-05-01 15:00:32	←	deadmars- has quit (Ping timeout: 248 seconds)
2022-05-01 15:01:26	→	deadmarshal_ has joined #haskell
2022-05-01 15:01:46	→	eggplantade has joined #haskell
2022-05-01 15:02:40	→	yauhsien has joined #haskell
2022-05-01 15:03:07	←	king_gs has quit (Ping timeout: 240 seconds)
2022-05-01 15:06:24	←	eggplantade has quit (Ping timeout: 276 seconds)
2022-05-01 15:06:47	←	yauhsien has quit (Ping timeout: 240 seconds)
2022-05-01 15:08:43	→	deadmars- has joined #haskell
2022-05-01 15:09:17	←	ts3 has quit (Quit: WeeChat 3.0.1)
2022-05-01 15:10:07	←	deadmarshal_ has quit (Ping timeout: 240 seconds)
2022-05-01 15:10:21	←	econo has quit (Quit: Connection closed for inactivity)
2022-05-01 15:14:04	←	nicbk has quit (Ping timeout: 240 seconds)
2022-05-01 15:14:28	→	nicbk has joined #haskell
2022-05-01 15:14:33	←	werneta has quit (Ping timeout: 272 seconds)
2022-05-01 15:15:00	→	schmolt has joined #haskell
2022-05-01 15:17:57	←	schmolt has quit (Client Quit)
2022-05-01 15:19:20	→	gurkenglas has joined #haskell
2022-05-01 15:21:31	←	zyklotomic has quit (Ping timeout: 272 seconds)
2022-05-01 15:21:55	←	notzmv has quit (Ping timeout: 250 seconds)
2022-05-01 15:22:50	→	zyklotomic has joined #haskell
2022-05-01 15:22:54	→	romesrf has joined #haskell
2022-05-01 15:24:08	→	abastro has joined #haskell
2022-05-01 15:25:13	→	yauhsien has joined #haskell
2022-05-01 15:27:16	→	xaotuk has joined #haskell
2022-05-01 15:28:02	←	ehamberg has quit ()
2022-05-01 15:39:00	←	renzhi has quit (Ping timeout: 240 seconds)
2022-05-01 15:51:04	→	renzhi has joined #haskell
2022-05-01 15:56:34	←	nicbk has quit (Ping timeout: 240 seconds)
2022-05-01 15:59:56	←	qwedfg has quit (Read error: Connection reset by peer)
2022-05-01 16:04:26	→	qwedfg has joined #haskell
2022-05-01 16:12:20	←	ubert has quit (Ping timeout: 260 seconds)
2022-05-01 16:12:44	→	ubert has joined #haskell
2022-05-01 16:13:45	→	Lord_of_Life_ has joined #haskell
2022-05-01 16:15:18	←	Lord_of_Life has quit (Ping timeout: 276 seconds)
2022-05-01 16:15:18	ℹ	Lord_of_Life_ is now known as Lord_of_Life
2022-05-01 16:16:23	→	pretty_dumm_guy has joined #haskell
2022-05-01 16:32:09	←	gurkenglas has quit (Ping timeout: 256 seconds)
2022-05-01 16:33:10	←	coot has quit (Quit: coot)
2022-05-01 16:36:41	→	coot has joined #haskell
2022-05-01 16:38:15	→	__monty__ has joined #haskell
2022-05-01 16:43:53	←	zeenk has quit (Quit: Konversation terminated!)
2022-05-01 16:44:05	←	dextaa4 has quit (Remote host closed the connection)
2022-05-01 16:44:44	→	takuan has joined #haskell
2022-05-01 16:48:10	←	abastro has quit (Remote host closed the connection)
2022-05-01 16:49:11	→	gurkenglas has joined #haskell
2022-05-01 16:53:21	←	razetime has quit (Ping timeout: 272 seconds)
2022-05-01 16:58:44	→	dextaa4 has joined #haskell
2022-05-01 17:00:16	←	sprout has quit (Ping timeout: 250 seconds)
2022-05-01 17:02:09	←	coot has quit (Quit: coot)
2022-05-01 17:05:01	←	td_ has quit (Ping timeout: 256 seconds)
2022-05-01 17:06:31	→	td_ has joined #haskell
2022-05-01 17:09:40	→	Unicorn_Princess has joined #haskell
2022-05-01 17:11:33	→	dhil has joined #haskell
2022-05-01 17:13:50	←	jakalx has left #haskell
2022-05-01 17:14:01	→	machinedgod has joined #haskell
2022-05-01 17:16:24	→	jao has joined #haskell
2022-05-01 17:26:38	→	coot has joined #haskell
2022-05-01 17:28:12	←	worldhelloworld1 has quit (Quit: Connection closed for inactivity)
2022-05-01 17:29:28	→	frost has joined #haskell
2022-05-01 17:29:47	→	sprout has joined #haskell
2022-05-01 17:32:31	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-01 17:35:40	←	pavonia has quit (Quit: Bye!)
2022-05-01 17:35:42	←	dka has quit (Quit: My Ex-Girlfriend once told me: I'm not a slut, I'm just popular)
2022-05-01 17:36:43	→	dka has joined #haskell
2022-05-01 17:36:56	→	notzmv has joined #haskell
2022-05-01 17:38:37	→	razetime has joined #haskell
2022-05-01 17:42:17	→	CiaoSen has joined #haskell
2022-05-01 17:48:38	→	jakalx has joined #haskell
2022-05-01 17:57:04	→	mmhat has joined #haskell
2022-05-01 18:02:23	←	dhil has quit (Ping timeout: 272 seconds)
2022-05-01 18:03:46	→	ccntrq has joined #haskell
2022-05-01 18:05:09	→	tromp has joined #haskell
2022-05-01 18:13:14	→	raehik has joined #haskell
2022-05-01 18:15:19	←	acidjnk has quit (Ping timeout: 240 seconds)
2022-05-01 18:15:24	→	Andy[m]12 has joined #haskell
2022-05-01 18:25:37	ℹ	irc: disconnected from server
2022-05-01 18:26:04	→	oxide has joined #haskell
2022-05-01 18:26:04	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-05-01 18:26:04	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-05-01 18:26:04	ℹ	Channel #haskell: 708 nicks (1 op, 0 voices, 707 normals)
2022-05-01 18:26:05	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-05-01 18:26:05	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-05-01 18:30:37	→	dequbed has joined #haskell
2022-05-01 18:32:50	←	coot has quit (Quit: coot)
2022-05-01 18:35:07	→	Pickchea has joined #haskell
2022-05-01 18:35:44	←	phma has quit (Read error: Connection reset by peer)
2022-05-01 18:36:33	→	phma has joined #haskell
2022-05-01 18:38:56	←	yaroot has quit (Remote host closed the connection)
2022-05-01 18:42:24	←	jao has quit (Ping timeout: 248 seconds)
2022-05-01 18:52:41	←	Pickchea has quit (Ping timeout: 256 seconds)
2022-05-01 18:53:23	→	alx741 has joined #haskell
2022-05-01 18:57:48	←	machinedgod has quit (Ping timeout: 276 seconds)
2022-05-01 19:03:00	→	barak has joined #haskell
2022-05-01 19:03:27	←	barak has quit (Client Quit)
2022-05-01 19:09:19	→	DNH has joined #haskell
2022-05-01 19:10:48	←	gpncarl has quit (Ping timeout: 276 seconds)
2022-05-01 19:11:23	→	gpncarl has joined #haskell
2022-05-01 19:11:25	←	alx741 has quit (Ping timeout: 272 seconds)
2022-05-01 19:11:25	←	qwedfg has quit (Quit: ZNC - https://znc.in)
2022-05-01 19:13:38	→	alx741 has joined #haskell
2022-05-01 19:13:50	→	qwedfg has joined #haskell
2022-05-01 19:13:51	←	DNH has quit (Ping timeout: 260 seconds)
2022-05-01 19:15:55	←	gpncarl has quit (Ping timeout: 256 seconds)
2022-05-01 19:18:34	←	bitdex has quit (Ping timeout: 240 seconds)
2022-05-01 19:21:01	←	alx741 has quit (Ping timeout: 256 seconds)
2022-05-01 19:21:20	→	bitdex has joined #haskell
2022-05-01 19:23:25	→	alx741 has joined #haskell
2022-05-01 19:29:00	←	alx741 has quit (Ping timeout: 276 seconds)
2022-05-01 19:31:22	→	alx741 has joined #haskell
2022-05-01 19:32:31	→	qwedfg_ has joined #haskell
2022-05-01 19:32:57	←	qwedfg has quit (Ping timeout: 272 seconds)
2022-05-01 19:34:12	←	yauhsien has quit (Remote host closed the connection)
2022-05-01 19:36:06	←	mjs2600 has quit (Ping timeout: 272 seconds)
2022-05-01 19:36:09	→	mjs2600_ has joined #haskell
2022-05-01 19:36:18	→	jespada has joined #haskell
2022-05-01 19:36:19	←	alx741 has quit (Ping timeout: 240 seconds)
2022-05-01 19:37:02	→	Pickchea has joined #haskell
2022-05-01 19:37:12	→	alx741 has joined #haskell
2022-05-01 19:37:22	→	jespada_ has joined #haskell
2022-05-01 19:38:00	←	jespada_ has quit (Client Quit)
2022-05-01 19:40:35	→	yauhsien has joined #haskell
2022-05-01 19:41:11	←	jespada has quit (Ping timeout: 272 seconds)
2022-05-01 19:41:26	→	[itchyjunk] has joined #haskell
2022-05-01 19:42:19	←	alx741 has quit (Ping timeout: 240 seconds)
2022-05-01 19:42:24	→	dcoutts_ has joined #haskell
2022-05-01 19:43:07	→	alx741 has joined #haskell
2022-05-01 19:45:15	→	dknite has joined #haskell
2022-05-01 19:45:57	←	yauhsien has quit (Ping timeout: 256 seconds)
2022-05-01 19:46:05	→	coot has joined #haskell
2022-05-01 19:48:09	←	raehik has quit (Ping timeout: 272 seconds)
2022-05-01 19:48:18	→	fef has joined #haskell
2022-05-01 19:52:19	←	alx741 has quit (Ping timeout: 240 seconds)
2022-05-01 19:52:52	→	raehik has joined #haskell
2022-05-01 20:00:41	←	notzmv has quit (Ping timeout: 256 seconds)
2022-05-01 20:01:04	→	jespada has joined #haskell
2022-05-01 20:03:38	→	jonathanx has joined #haskell
2022-05-01 20:05:04	raehik	is there a way for me to get the length of a type-level symbol, as a type-level nat?
2022-05-01 20:05:17	→	alx741 has joined #haskell
2022-05-01 20:05:37	hpc	like (length String) = 6, (length Int) = 3?
2022-05-01 20:05:56	raehik	No, like `Length "bla" = 3`
2022-05-01 20:07:29	raehik	initial googling has pointed me to the generic-lens author's work -- but no Length function https://blog.csongor.co.uk/symbol-parsing-haskell/
2022-05-01 20:07:59	→	cfricke has joined #haskell
2022-05-01 20:07:59	←	mmhat has quit (Quit: WeeChat 3.5)
2022-05-01 20:09:05	raehik	I will gladly ignore any Unicode pitfalls etc because it's intended for ASCII only
2022-05-01 20:09:20	raehik	so Char = 1
2022-05-01 20:10:00	raehik	there is UnconsSymbol but I don't understand how to "pattern match" on it
2022-05-01 20:12:33	←	sprout has quit (Ping timeout: 248 seconds)
2022-05-01 20:13:00	abastro[m]	One could make type family for that I think
2022-05-01 20:13:12	←	alx741 has quit (Ping timeout: 276 seconds)
2022-05-01 20:14:49	raehik	abastro[m]: That's what I'm trying. Can't figure out how to write this on type level: https://paste.tomsmeding.com/TP9JdYKH
2022-05-01 20:14:56	→	wroathe has joined #haskell
2022-05-01 20:14:56	←	wroathe has quit (Changing host)
2022-05-01 20:14:56	→	wroathe has joined #haskell
2022-05-01 20:15:18	→	alx741 has joined #haskell
2022-05-01 20:16:54	abastro[m]	You need to make type family for each case statement
2022-05-01 20:17:12	abastro[m]	It's going to be ugly, yea
2022-05-01 20:17:12	→	notzmv has joined #haskell
2022-05-01 20:17:33	←	coot has quit (Quit: coot)
2022-05-01 20:17:41	←	dextaa4 has quit (Remote host closed the connection)
2022-05-01 20:18:17	raehik	oooh I think I get it
2022-05-01 20:18:38	←	frost has quit (Ping timeout: 252 seconds)
2022-05-01 20:20:36	←	alx741 has quit (Ping timeout: 260 seconds)
2022-05-01 20:22:06	→	yauhsien has joined #haskell
2022-05-01 20:22:34	→	alx741 has joined #haskell
2022-05-01 20:23:04	→	c209e6dc-4d76-47 has joined #haskell
2022-05-01 20:23:07	raehik	this feels like it should work, but I'm getting "Type instead of (some kind)" errors https://paste.tomsmeding.com/t2SC6gQU
2022-05-01 20:24:53	abastro[m]	Typelevel plus might be different operator
2022-05-01 20:25:08	abastro[m]	Oh it is same operator
2022-05-01 20:26:03	abastro[m]	Hmm, could you post entire error
2022-05-01 20:26:19	raehik	Is Maybe not polykinded?
2022-05-01 20:26:22	tomsmeding	what's the definition of UnconsSymbol
2022-05-01 20:26:30	raehik	Yes to both, one sec
2022-05-01 20:27:00	tomsmeding	raehik: interesting, Maybe seems not polykinded
2022-05-01 20:27:54	raehik	https://paste.tomsmeding.com/lGwPqmPP
2022-05-01 20:27:55	tomsmeding	in any case, `:k Maybe` yields `* -> *` whereas e.g. `:k Proxy` yields `k -> *`
2022-05-01 20:28:16	tomsmeding	yeah Maybe is not kind-polymorphic here
2022-05-01 20:28:31	raehik	that's weird, how does UnconsSymbol work there?
2022-05-01 20:28:43	tomsmeding	what's the definition of UnconsSymbol
2022-05-01 20:29:01	raehik	type family UnconsSymbol (a :: Symbol) :: Maybe (Char, Symbol)
2022-05-01 20:29:11	tomsmeding	the _definition_, not its declaration :p
2022-05-01 20:29:12	raehik	:k UnconsSymbol
2022-05-01 20:29:13	lambdabot	error:
2022-05-01 20:29:14	lambdabot	    Not in scope: type constructor or class ‘UnconsSymbol’
2022-05-01 20:29:27	tomsmeding	put @let before the type family
2022-05-01 20:30:03	raehik	sorry, what do you mean? `@let UnconsSymbol` in ghci doesn't work
2022-05-01 20:30:09	←	alx741 has quit (Ping timeout: 256 seconds)
2022-05-01 20:30:18	tomsmeding	oh I thought you intended to do it here in lambdabot
2022-05-01 20:30:33	raehik	ah yes please, but I dunno how to import either xd
2022-05-01 20:30:34	tomsmeding	oh wait, UnconsSymbol is not a closed type family?
2022-05-01 20:30:54	raehik	uhhh I *think* it's internal, I can't see the def in GHC.TypeLits
2022-05-01 20:31:07	tomsmeding	OH ITS IN BASE
2022-05-01 20:31:15	tomsmeding	lol sorry
2022-05-01 20:31:38	tomsmeding	that's super dumb
2022-05-01 20:32:09	raehik	is it really polykind Maybe for that func, but the exported Maybe isn't polykind?
2022-05-01 20:32:22	→	alx741 has joined #haskell
2022-05-01 20:32:39	tomsmeding	nah it imports Maybe from Data.Maybe
2022-05-01 20:32:53	abastro[m]	Ugh
2022-05-01 20:33:14	raehik	:k 'Just
2022-05-01 20:33:15	abastro[m]	Why is `(_, s) :: *`
2022-05-01 20:33:15	lambdabot	a -> Maybe a
2022-05-01 20:33:24	raehik	yeah, that's where I'm confused
2022-05-01 20:33:34	tomsmeding	it needs to be `'(_, s)`
2022-05-01 20:33:48	tomsmeding	try making it `type family SymbolLength' (a :: Maybe '( Char, Symbol)) :: Natural where`
2022-05-01 20:33:55	tomsmeding	still errors, but the error is somewhat more expected
2022-05-01 20:34:01	raehik	Oh my god
2022-05-01 20:34:08	abastro[m]	Oh wait. tuple lol
2022-05-01 20:34:09	raehik	Type-level tuple needs '()
2022-05-01 20:34:10	raehik	LOL
2022-05-01 20:34:50	dknite	Are there any Haskell programming live streams available? Like current or perhaps old archived ones?
2022-05-01 20:34:59	←	Pickchea has quit (Ping timeout: 240 seconds)
2022-05-01 20:35:04	abastro[m]	Haskell messed up by having separate namespace for types and values
2022-05-01 20:35:04	abastro[m]	And now they are trying to merge
2022-05-01 20:35:22	tomsmeding	"messed up" is subjective
2022-05-01 20:35:57	←	wroathe has quit (Ping timeout: 276 seconds)
2022-05-01 20:36:29	raehik	thank you very much for the help abastro[m]  tomsmeding !
2022-05-01 20:36:30	←	EvanR has quit (Quit: Leaving)
2022-05-01 20:36:38	hpc	as much as studying computer history makes it look like all the good ideas are old and constantly reinvented, dependent types are in fact very new
2022-05-01 20:37:08	hpc	so back when haskell itself was still new, nobody really knew this was going to be where language design was headed
2022-05-01 20:37:49	tomsmeding	here's an opinion about DH that disagrees with abastro[m] :p https://ircbrowse.tomsmeding.com/day/lchaskell/2022/04/30?id=534502#trid534502
2022-05-01 20:38:11	←	alx741 has quit (Ping timeout: 272 seconds)
2022-05-01 20:40:19	←	razetime has quit (Ping timeout: 240 seconds)
2022-05-01 20:40:33	→	alx741 has joined #haskell
2022-05-01 20:41:09	←	raehik has quit (Ping timeout: 246 seconds)
2022-05-01 20:42:57	→	dhil has joined #haskell
2022-05-01 20:45:15	→	raehik has joined #haskell
2022-05-01 20:46:02	←	alx741 has quit (Ping timeout: 250 seconds)
2022-05-01 20:46:53	abastro[m]	tomsmeding: wdym? I do not mean DH would be great
2022-05-01 20:46:57	abastro[m]	I personally dislike DH
2022-05-01 20:47:19	abastro[m]	But having common namespace for both types and values is incredibly confusing for beginners
2022-05-01 20:47:27	tomsmeding	abastro[m]: ah I interpreted your dislike of the separate namespaces as dislike of the DH proposal
2022-05-01 20:47:44	tomsmeding	s/common/separate/?
2022-05-01 20:47:49	→	alx741 has joined #haskell
2022-05-01 20:49:23	abastro[m]	Ohhhhhhhh
2022-05-01 20:49:28	abastro[m]	My brain lol
2022-05-01 20:49:54	abastro[m]	Yea, haskell having separate namespace for types and values
2022-05-01 20:50:00	abastro[m]	Which confuses beginners
2022-05-01 20:50:15	tomsmeding	the [Int] != [17] thing
2022-05-01 20:50:16	tomsmeding	yeah
2022-05-01 20:51:29	abastro[m]	[Int] and [17], indeed
2022-05-01 20:52:03	abastro[m]	But also extends to e.g. () :: ()
2022-05-01 20:52:18	abastro[m]	Would look very cryptic to beginners
2022-05-01 20:52:39	tomsmeding	nah, just alien face
2022-05-01 20:52:48	abastro[m]	I guess `(1, 3) :: (Int, Double)` is quite common among languages so that one is more forgivable
2022-05-01 20:52:57	abastro[m]	Xd
2022-05-01 20:52:58	←	alx741 has quit (Ping timeout: 250 seconds)
2022-05-01 20:54:19	abastro[m]	I have legit done `type List = []` couple of times
2022-05-01 20:54:43	tomsmeding	I guess it helps with DataKinds quoting messes
2022-05-01 20:55:01	→	alx741 has joined #haskell
2022-05-01 20:55:38	→	razetime has joined #haskell
2022-05-01 20:56:02	abastro[m]	Indeed
2022-05-01 20:58:02	←	c209e6dc-4d76-47 has quit (Quit: Konversation terminated!)
2022-05-01 20:59:18	→	eggplantade has joined #haskell
2022-05-01 20:59:49	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-01 21:02:19	←	CiaoSen has quit (Ping timeout: 240 seconds)
2022-05-01 21:03:00	→	dextaa4 has joined #haskell
2022-05-01 21:05:15	→	hrdl has joined #haskell
2022-05-01 21:08:07	←	alx741 has quit (Ping timeout: 256 seconds)
2022-05-01 21:10:36	→	alx741 has joined #haskell
2022-05-01 21:12:51	←	xaotuk has quit (Ping timeout: 260 seconds)
2022-05-01 21:13:01	raehik	You can't define a Map type family without doing defunctionalization "stuff", right?
2022-05-01 21:13:27	raehik	you have to write lots of concrete type families instead
2022-05-01 21:17:11	tomsmeding	no type-level lambdas
2022-05-01 21:17:43	abastro[m]	No lifting to typelevel as well right
2022-05-01 21:17:51	tomsmeding	of lambdas?
2022-05-01 21:17:58	tomsmeding	DataKinds lifting is of data types, not expressions ;)
2022-05-01 21:18:05	←	alx741 has quit (Ping timeout: 272 seconds)
2022-05-01 21:18:08	abastro[m]	I wanted to lift arbitrary function to typelevel.. oh wait there is no way such thing would work
2022-05-01 21:18:25	raehik	that's fine thought so, singletons all the more impressive
2022-05-01 21:18:38	abastro[m]	Wish reification was easier, in that case I could go opposite
2022-05-01 21:18:42	→	alx741 has joined #haskell
2022-05-01 21:19:53	→	mvk has joined #haskell
2022-05-01 21:20:35	→	king_gs has joined #haskell
2022-05-01 21:21:55	←	mbuf has quit (Quit: Leaving)
2022-05-01 21:23:51	←	alx741 has quit (Ping timeout: 246 seconds)
2022-05-01 21:23:57	←	ubert has quit (Quit: ubert)
2022-05-01 21:26:07	→	dschrempf has joined #haskell
2022-05-01 21:26:17	→	alx741 has joined #haskell
2022-05-01 21:26:30	←	vicfred has quit (Quit: Leaving)
2022-05-01 21:30:14	←	alx741 has quit (Client Quit)
2022-05-01 21:31:15	←	dhil has quit (Quit: Leaving)
2022-05-01 21:36:00	←	xff0x_ has quit (Read error: Connection reset by peer)
2022-05-01 21:40:37	→	econo has joined #haskell
2022-05-01 21:44:03	←	cfricke has quit (Ping timeout: 272 seconds)
2022-05-01 21:49:44	→	segfaultfizzbuzz has joined #haskell
2022-05-01 21:50:07	segfaultfizzbuzz	quick question: i have this:    data Game = Game [Move] deriving (Show, Eq)
2022-05-01 21:50:26	segfaultfizzbuzz	and then     play :: Move -> Game -> Game         play m (Game g) = g ++ [m]
2022-05-01 21:50:57	int-e	segfaultfizzbuzz: that's missing a Game constructor
2022-05-01 21:51:34	segfaultfizzbuzz	ah thaks
2022-05-01 21:51:44	int-e	(and I'd consider reversing that list... m : g is constant time while g ++ [m] has to traverse all of g
2022-05-01 21:51:47	int-e	)
2022-05-01 21:52:20	segfaultfizzbuzz	are : and ++ equivalent ?
2022-05-01 21:52:33	int-e	[m] ++ g = m : g
2022-05-01 21:52:44	segfaultfizzbuzz	and, as a rule of thumb, it's best to grow lists from the end to the beginning...?
2022-05-01 21:52:48	int-e	so as I said, the list would be reversed.
2022-05-01 21:53:18	int-e	it's usually better to prepend than to append to lists
2022-05-01 21:53:28	segfaultfizzbuzz	i see
2022-05-01 21:53:34	segfaultfizzbuzz	ok thanks
2022-05-01 21:53:41	segfaultfizzbuzz	bye
2022-05-01 21:53:50	←	segfaultfizzbuzz has quit (Client Quit)
2022-05-01 21:55:42	←	pretty_dumm_guy has quit (Ping timeout: 246 seconds)
2022-05-01 21:57:05	→	Sgeo has joined #haskell
2022-05-01 21:57:16	←	FinnElija has quit (Remote host closed the connection)
2022-05-01 21:57:19	→	tzh has joined #haskell
2022-05-01 21:57:38	→	FinnElija has joined #haskell
2022-05-01 21:57:59	←	perrierjouet has quit (Ping timeout: 272 seconds)
2022-05-01 22:02:32	→	vicfred has joined #haskell
2022-05-01 22:03:37	←	mjs2600_ has quit (Read error: Connection reset by peer)
2022-05-01 22:03:46	→	coot has joined #haskell
2022-05-01 22:04:11	→	mjs2600 has joined #haskell
2022-05-01 22:05:46	→	tromp has joined #haskell
2022-05-01 22:13:52	←	king_gs has quit (Read error: Connection reset by peer)
2022-05-01 22:15:36	→	king_gs has joined #haskell
2022-05-01 22:19:31	←	mjs2600 has quit (Read error: Connection reset by peer)
2022-05-01 22:19:44	→	gpncarl has joined #haskell
2022-05-01 22:20:01	→	pretty_dumm_guy has joined #haskell
2022-05-01 22:20:10	→	mjs2600 has joined #haskell
2022-05-01 22:22:30	→	danso has joined #haskell
2022-05-01 22:28:03	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-01 22:33:32	raehik	I've got a void datatype I'm using for Stuff and a typeclass instance for it that takes a value of it (and only uses the type info). Is there any way I can be really explicit that there's no value to bind, other than writing _ ?
2022-05-01 22:33:54	raehik	I ask because I was kinda surprised I could bind it to a name in the first place
2022-05-01 22:35:47	monochrom	The Proxy type.
2022-05-01 22:36:12	←	king_gs has quit (Ping timeout: 276 seconds)
2022-05-01 22:36:54	←	razetime has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2022-05-01 22:37:25	monochrom	For example Storable's "size :: a -> Int" is "a -> Int" for historical reason (back when people hadn't thought of Proxy).  If redesigned today, it might be "size :: p a -> Int" such that the user can say "size ([] :: [Foo])" or "size (Proxy :: Proxy Foo)".
2022-05-01 22:38:03	raehik	yeah, I get that. this typeclass is for term-level stuff, but this special case sees no need to store a value
2022-05-01 22:38:12	monochrom	The Proxy type can be found in Data.Proxy
2022-05-01 22:38:13	raehik	I was thinking something along the lines of EmptyCase, or however Void works
2022-05-01 22:38:41	raehik	to be clear, the function needs to take an `a`. but I'm making an (safe) instance for a type which has no values
2022-05-01 22:39:46	raehik	I can do `classFunc _ = ...`. but I'm new to this part of Haskell and wasn't sure if there was some extra explicit syntax for empty datatypes
2022-05-01 22:41:30	→	yaroot has joined #haskell
2022-05-01 22:46:09	←	gpncarl has quit (Ping timeout: 248 seconds)
2022-05-01 22:48:39	→	bontaq has joined #haskell
2022-05-01 22:49:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-05-01 22:50:36	→	lainon has joined #haskell
2022-05-01 22:51:16	←	vicfred has quit (Quit: Leaving)
2022-05-01 22:51:19	→	wroathe has joined #haskell
2022-05-01 22:51:19	←	wroathe has quit (Changing host)
2022-05-01 22:51:19	→	wroathe has joined #haskell
2022-05-01 22:54:13	←	yauhsien has quit (Remote host closed the connection)
2022-05-01 22:55:04	→	yauhsien has joined #haskell
2022-05-01 23:01:04	←	yaroot has quit (Ping timeout: 248 seconds)
2022-05-01 23:03:39	←	lainon has quit (Ping timeout: 240 seconds)
2022-05-01 23:03:45	→	Guest4981 has joined #haskell
2022-05-01 23:03:56	→	yaroot has joined #haskell
2022-05-01 23:04:30	←	yauhsien has quit (Remote host closed the connection)
2022-05-01 23:04:38	←	coot has quit (Quit: coot)
2022-05-01 23:05:06	→	yauhsien has joined #haskell
2022-05-01 23:06:36	→	dcoutts__ has joined #haskell
2022-05-01 23:09:09	→	alp_ has joined #haskell
2022-05-01 23:09:28	←	raehik has quit (Ping timeout: 250 seconds)
2022-05-01 23:10:11	←	dcoutts_ has quit (Ping timeout: 272 seconds)
2022-05-01 23:11:28	←	dcoutts__ has quit (Ping timeout: 260 seconds)
2022-05-01 23:11:29	→	vicfred has joined #haskell
2022-05-01 23:12:48	Guest4981	question - working through "haskell programming from first principles", I came across this in the currying chapter
2022-05-01 23:12:49	Guest4981	Prelude> let curry f a b = f (a, b)
2022-05-01 23:12:49	Guest4981	Prelude> :t curry
2022-05-01 23:12:50	Guest4981	curry :: ((t1, t2) -> t) -> t1 -> t2 -> t
2022-05-01 23:12:50	Guest4981	Prelude> :t fst
2022-05-01 23:12:51	Guest4981	fst :: (a, b) -> a
2022-05-01 23:12:51	Guest4981	Prelude> :t curry fst
2022-05-01 23:12:52	Guest4981	curry fst :: t -> b -> t
2022-05-01 23:12:52	Guest4981	Prelude> fst (1, 2)
2022-05-01 23:12:53	Guest4981	1
2022-05-01 23:12:53	Guest4981	Prelude> curry fst 1 2
2022-05-01 23:12:54	Guest4981	1
2022-05-01 23:12:54	Guest4981	How does ghci know that the first argument of the curry function is of type ((t1,t2)->t)? Is it through pattern matching?
2022-05-01 23:13:27	←	deadmars- has quit (Ping timeout: 240 seconds)
2022-05-01 23:14:08	→	tromp has joined #haskell
2022-05-01 23:15:31	[exa]	Guest4981: the types get "compared" and completely matched before any code is executed, so that it's clear that the types of everyting are okay
2022-05-01 23:15:33	davean	ts through inference, the type system has rules, theres one one way that those rules could be followed with that code
2022-05-01 23:15:38	monochrom	Type inference notices that "f (a,b)" means f has to be a function, and it must accept a tuple argument.
2022-05-01 23:16:06	davean	well thats 3 of us saying the same thing in different ways, can we get a fourth?
2022-05-01 23:16:32	monochrom	Yes. http://www.vex.net/~trebla/haskell/type-inference.html  :)
2022-05-01 23:16:46	→	gpncarl has joined #haskell
2022-05-01 23:16:52	→	stomper_ has joined #haskell
2022-05-01 23:17:03	davean	Thats just someone not getting to the point
2022-05-01 23:17:08	Guest4981	haha ok so it is pattern matching - very cool
2022-05-01 23:17:19	davean	pattern matching is a specific thing
2022-05-01 23:17:22	Guest4981	oh
2022-05-01 23:17:27	Guest4981	so this falls under type inference?
2022-05-01 23:17:34	davean	yes
2022-05-01 23:17:43	Guest4981	whats the difference between this and pattern matching
2022-05-01 23:18:18	davean	pattern matching deconstructs data at runtime and dispatches on the deconstruction.
2022-05-01 23:18:39	→	king_gs has joined #haskell
2022-05-01 23:18:42	Guest4981	so it needs data constructors to be pattern matching?
2022-05-01 23:18:56	Guest4981	or rather concrete values
2022-05-01 23:19:05	davean	basicly.
2022-05-01 23:19:18	←	wroathe has quit (Quit: Lost terminal)
2022-05-01 23:19:23	Guest4981	aha cool thanks
2022-05-01 23:19:42	→	perrierjouet has joined #haskell
2022-05-01 23:20:52	←	jakalx has left #haskell (Error from remote client)
2022-05-01 23:21:33	←	jlamothe has quit (Remote host closed the connection)
2022-05-01 23:21:40	→	Pickchea has joined #haskell
2022-05-01 23:21:50	←	Guest4981 has quit (Quit: Client closed)
2022-05-01 23:22:07	←	notzmv has quit (Ping timeout: 260 seconds)
2022-05-01 23:23:07	→	jakalx has joined #haskell
2022-05-01 23:23:26	←	yauhsien has quit (Remote host closed the connection)
2022-05-01 23:24:14	→	yauhsien has joined #haskell
2022-05-01 23:24:34	→	mmhat has joined #haskell
2022-05-01 23:26:44	→	deadmarshal_ has joined #haskell
2022-05-01 23:28:18	→	raehik has joined #haskell
2022-05-01 23:30:50	←	alp_ has quit (Remote host closed the connection)
2022-05-01 23:31:14	→	alp_ has joined #haskell
2022-05-01 23:32:01	→	werneta has joined #haskell
2022-05-01 23:34:30	←	eggplantade has quit (Remote host closed the connection)
2022-05-01 23:34:58	→	anomal has joined #haskell
2022-05-01 23:35:35	→	mikoto-chan has joined #haskell
2022-05-01 23:36:47	←	deadmarshal_ has quit (Ping timeout: 272 seconds)
2022-05-01 23:36:48	→	jlamothe has joined #haskell
2022-05-01 23:37:57	←	perrierjouet has quit (Quit: WeeChat 3.5)
2022-05-01 23:37:58	←	king_gs has quit (Read error: Connection reset by peer)
2022-05-01 23:39:06	→	king_gs has joined #haskell
2022-05-01 23:41:12	←	gpncarl has quit (Ping timeout: 276 seconds)
2022-05-01 23:41:51	←	raehik has quit (Ping timeout: 272 seconds)
2022-05-01 23:45:00	→	eggplantade has joined #haskell
2022-05-01 23:45:02	→	perrierjouet has joined #haskell
2022-05-01 23:53:28	←	stomper_ has quit (Quit: Ping timeout (120 seconds))
2022-05-01 23:54:42	←	dyeplexer has quit (Remote host closed the connection)
2022-05-01 23:56:05	←	Pickchea has quit (Quit: Leaving)
2022-05-01 23:56:41	←	turlando has quit (Quit: turlando)
2022-05-01 23:57:28	←	yauhsien has quit (Remote host closed the connection)
2022-05-01 23:57:54	→	turlando has joined #haskell
2022-05-01 23:57:54	←	turlando has quit (Changing host)
2022-05-01 23:57:54	→	turlando has joined #haskell
2022-05-01 23:58:59	→	yauhsien has joined #haskell
2022-05-02 00:00:34	→	jmdaemon has joined #haskell
2022-05-02 00:01:30	→	xaotuk has joined #haskell
2022-05-02 00:02:24	←	dolio has quit (Ping timeout: 246 seconds)
2022-05-02 00:04:36	←	yauhsien has quit (Ping timeout: 276 seconds)
2022-05-02 00:13:45	→	zeenk has joined #haskell
2022-05-02 00:19:22	→	sprout has joined #haskell
2022-05-02 00:21:21	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-02 00:21:54	→	benin has joined #haskell
2022-05-02 00:22:25	→	coot has joined #haskell
2022-05-02 00:22:28	→	tromp has joined #haskell
2022-05-02 00:24:16	←	sprout has quit (Ping timeout: 248 seconds)
2022-05-02 00:25:56	←	cheater has quit (Read error: Connection reset by peer)
2022-05-02 00:26:40	→	yauhsien has joined #haskell
2022-05-02 00:26:40	→	cheater has joined #haskell
2022-05-02 00:27:53	←	kimjetwav has quit (Read error: Connection reset by peer)
2022-05-02 00:30:19	→	raehik has joined #haskell
2022-05-02 00:30:37	→	dolio has joined #haskell
2022-05-02 00:31:18	→	kimjetwav has joined #haskell
2022-05-02 00:34:35	←	dknite has quit (Quit: Client closed)
2022-05-02 00:36:25	→	machinedgod has joined #haskell
2022-05-02 00:42:07	→	CiaoSen has joined #haskell
2022-05-02 00:45:55	→	jao has joined #haskell
2022-05-02 00:48:10	←	yauhsien has quit (Remote host closed the connection)
2022-05-02 00:52:12	→	sprout has joined #haskell
2022-05-02 00:54:51	→	yauhsien has joined #haskell
2022-05-02 00:55:18	←	dextaa4 has quit (Remote host closed the connection)
2022-05-02 00:57:21	←	sprout has quit (Ping timeout: 248 seconds)
2022-05-02 00:58:36	→	thyriaen has joined #haskell
2022-05-02 00:59:45	←	benin has quit (Quit: The Lounge - https://thelounge.chat)
2022-05-02 00:59:48	←	yauhsien has quit (Ping timeout: 246 seconds)
2022-05-02 01:03:46	←	kimjetwav has quit (Remote host closed the connection)
2022-05-02 01:04:04	→	kimjetwav has joined #haskell
2022-05-02 01:08:40	→	sprout has joined #haskell
2022-05-02 01:11:46	→	shapr has joined #haskell
2022-05-02 01:11:46	←	Vajb has quit (Read error: Connection reset by peer)
2022-05-02 01:12:18	→	Vajb has joined #haskell
2022-05-02 01:14:16	→	acidjnk has joined #haskell
2022-05-02 01:15:02	←	coot has quit (Quit: coot)
2022-05-02 01:23:28	→	Pickchea has joined #haskell
2022-05-02 01:28:53	←	jonathanx has quit (Ping timeout: 272 seconds)
2022-05-02 01:29:06	←	ccntrq has quit (Remote host closed the connection)
2022-05-02 01:30:27	←	king_gs has quit (Quit: king_gs)
2022-05-02 01:31:52	→	king_gs has joined #haskell
2022-05-02 01:34:27	←	zyklotomic has quit (Ping timeout: 256 seconds)
2022-05-02 01:35:01	←	_ht has quit (Remote host closed the connection)
2022-05-02 01:36:26	→	zyklotomic has joined #haskell
2022-05-02 01:38:47	→	EvanR has joined #haskell
2022-05-02 01:38:49	←	thyriaen has quit (Quit: Leaving)
2022-05-02 01:41:52	→	notzmv has joined #haskell
2022-05-02 01:43:24	←	dsrt^ has quit (Ping timeout: 276 seconds)
2022-05-02 01:44:26	→	dsrt^ has joined #haskell
2022-05-02 01:44:35	←	dschrempf has quit (Quit: WeeChat 3.4.1)
2022-05-02 01:45:38	ℹ	irc: disconnected from server
2022-05-02 17:56:50	→	oxide has joined #haskell
2022-05-02 17:56:50	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-05-02 17:56:50	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-05-02 17:56:50	ℹ	Channel #haskell: 711 nicks (1 op, 0 voices, 710 normals)
2022-05-02 17:56:51	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-05-02 17:56:51	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-05-02 17:57:01	←	lbseale has quit (Ping timeout: 250 seconds)
2022-05-02 17:58:40	→	gpncarl_ has joined #haskell
2022-05-02 17:59:24	←	gpncarl has quit (Ping timeout: 248 seconds)
2022-05-02 18:01:24	ℹ	AlexNoo_ is now known as AlexNoo
2022-05-02 18:05:55	→	lbseale has joined #haskell
2022-05-02 18:06:56	←	abastro has quit (Remote host closed the connection)
2022-05-02 18:07:28	→	frost has joined #haskell
2022-05-02 18:07:42	→	abastro has joined #haskell
2022-05-02 18:11:09	→	tromp has joined #haskell
2022-05-02 18:12:13	→	eggplantade has joined #haskell
2022-05-02 18:12:39	←	arjun has quit (Remote host closed the connection)
2022-05-02 18:15:11	←	abastro has quit (Remote host closed the connection)
2022-05-02 18:15:47	→	abastro has joined #haskell
2022-05-02 18:17:05	←	eggplantade has quit (Ping timeout: 260 seconds)
2022-05-02 18:17:14	→	zebrag has joined #haskell
2022-05-02 18:19:00	←	coot has quit (Quit: coot)
2022-05-02 18:19:32	→	coot has joined #haskell
2022-05-02 18:20:30	←	perrierjouet has quit (Ping timeout: 276 seconds)
2022-05-02 18:33:34	←	mbuf has quit (Quit: Leaving)
2022-05-02 18:34:00	←	frost has quit (Quit: Ping timeout (120 seconds))
2022-05-02 18:35:42	←	abastro has quit (Remote host closed the connection)
2022-05-02 18:43:44	→	gpncarl has joined #haskell
2022-05-02 18:44:09	←	gpncarl_ has quit (Ping timeout: 246 seconds)
2022-05-02 18:48:18	←	epolanski has quit (Quit: Connection closed for inactivity)
2022-05-02 18:48:20	←	acidjnk has quit (Ping timeout: 260 seconds)
2022-05-02 18:49:45	←	Pickchea has quit (Ping timeout: 256 seconds)
2022-05-02 18:52:07	→	vicfred has joined #haskell
2022-05-02 18:54:50	→	jgeerds has joined #haskell
2022-05-02 18:56:24	←	vicfred has quit (Ping timeout: 246 seconds)
2022-05-02 18:57:40	←	lbseale has quit (Ping timeout: 260 seconds)
2022-05-02 18:59:40	←	raehik has quit (Ping timeout: 260 seconds)
2022-05-02 19:04:58	→	Zemyla has joined #haskell
2022-05-02 19:05:14	→	lbseale has joined #haskell
2022-05-02 19:11:09	→	bogart has joined #haskell
2022-05-02 19:12:08	→	[itchyjunk] has joined #haskell
2022-05-02 19:14:15	←	gpncarl has quit (Ping timeout: 260 seconds)
2022-05-02 19:14:16	→	waleee has joined #haskell
2022-05-02 19:15:40	←	bogart has quit (Ping timeout: 248 seconds)
2022-05-02 19:16:08	→	gpncarl has joined #haskell
2022-05-02 19:17:45	←	dschrempf has quit (Ping timeout: 260 seconds)
2022-05-02 19:17:54	←	mjs2600 has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-05-02 19:18:24	→	wroathe has joined #haskell
2022-05-02 19:18:24	←	wroathe has quit (Changing host)
2022-05-02 19:18:24	→	wroathe has joined #haskell
2022-05-02 19:18:55	←	lbseale has quit (Ping timeout: 260 seconds)
2022-05-02 19:19:22	→	mjs2600 has joined #haskell
2022-05-02 19:19:30	←	alp_ has quit (Ping timeout: 260 seconds)
2022-05-02 19:21:12	→	raehik has joined #haskell
2022-05-02 19:21:41	→	Guest38 has joined #haskell
2022-05-02 19:22:37	←	Guest38 has quit (Client Quit)
2022-05-02 19:25:22	→	lbseale has joined #haskell
2022-05-02 19:27:31	→	pretty_dumm_guy has joined #haskell
2022-05-02 19:28:28	→	bontaq has joined #haskell
2022-05-02 19:28:47	→	abastro has joined #haskell
2022-05-02 19:30:42	←	wroathe has quit (Ping timeout: 246 seconds)
2022-05-02 19:31:08	←	lbseale has quit (Ping timeout: 248 seconds)
2022-05-02 19:31:48	→	dschrempf has joined #haskell
2022-05-02 19:32:48	←	jpds has quit (Remote host closed the connection)
2022-05-02 19:32:50	←	odnes has quit (Quit: Leaving)
2022-05-02 19:33:22	→	jpds has joined #haskell
2022-05-02 19:35:02	←	zer0bitz has quit (Read error: Connection reset by peer)
2022-05-02 19:41:23	→	lbseale has joined #haskell
2022-05-02 19:43:38	←	julian has quit (Killed (NickServ (GHOST command used by tos9_!~tos9@python/site-packages/Julian)))
2022-05-02 19:47:35	→	Sgeo has joined #haskell
2022-05-02 19:50:09	→	stevenxl has joined #haskell
2022-05-02 19:51:27	→	xff0x_ has joined #haskell
2022-05-02 19:54:05	→	KingoftheHomeles has joined #haskell
2022-05-02 19:56:14	←	sander has quit (Remote host closed the connection)
2022-05-02 19:58:33	→	sander has joined #haskell
2022-05-02 19:59:00	→	shriekingnoise has joined #haskell
2022-05-02 20:00:54	KingoftheHomeles	I'm having woes involving type families and equality constraints, some regression introduced in GHC 9.2: it's essentially the question of being able to deduce `R ~ e ': some_tail` from the constraint `(R ~ e ': F R)` where R, F are type families. The inability to do this has caused a library of mine to break:
2022-05-02 20:00:55	KingoftheHomeles	https://github.com/KingoftheHomeless/in-other-words/issues/18 . The funny thing is that introducing the seemingly redundant constraint `r ~ R` allows deduction! I don't want to use that workaround though because introducing a type variable in the contexts my library is working in would require changing the API. My main question is: does anyone
2022-05-02 20:00:55	KingoftheHomeles	recognize this bug?
2022-05-02 20:00:56	→	romesrf has joined #haskell
2022-05-02 20:02:19	KingoftheHomeles	Minimal reproducer:
2022-05-02 20:02:19	KingoftheHomeles	```
2022-05-02 20:02:20	KingoftheHomeles	data Dict (c :: Constraint) where
2022-05-02 20:02:20	KingoftheHomeles	  Dict :: c => Dict c
2022-05-02 20:02:21	KingoftheHomeles	class Foo (e :: Type) (r :: [Type])
2022-05-02 20:02:22	KingoftheHomeles	instance Foo e (e ': r)
2022-05-02 20:02:22	KingoftheHomeles	type family R :: [Type]
2022-05-02 20:02:22	KingoftheHomeles	type family F (a :: [Type]) :: [Type]
2022-05-02 20:02:23	KingoftheHomeles	compiles :: (R ~ Int ': F R, r ~ R)
2022-05-02 20:02:23	KingoftheHomeles	         => Dict (Foo Int R)
2022-05-02 20:02:24	KingoftheHomeles	compiles = Dict
2022-05-02 20:02:25	KingoftheHomeles	errors :: (R ~ Int ': F R)
2022-05-02 20:02:25	KingoftheHomeles	       => Dict (Foo Int R)
2022-05-02 20:02:26	KingoftheHomeles	errors = Dict
2022-05-02 20:02:26	KingoftheHomeles	```
2022-05-02 20:02:28	KingoftheHomeles	Oh, no code blocks. Oh well.
2022-05-02 20:02:33	←	raehik has quit (Ping timeout: 246 seconds)
2022-05-02 20:03:17	[exa]	KingoftheHomeles: can you pastebin pls? (IRC really doesn't work well for anything more than ~3 lines, and people get frowny)
2022-05-02 20:03:29	←	ec has quit (Quit: ec)
2022-05-02 20:03:41	[exa]	btw if I get it right, it worked before 9.2?
2022-05-02 20:04:15	KingoftheHomeles	Sure thing: https://pastebin.com/48BtadYw
2022-05-02 20:04:20	KingoftheHomeles	Yes, it works with 9.0.2
2022-05-02 20:04:25	←	Vajb has quit (Read error: Connection reset by peer)
2022-05-02 20:04:37	KingoftheHomeles	_wow_ pastebin has garbage haskell highlighting
2022-05-02 20:05:02	merijn	Use the one from topic :p
2022-05-02 20:05:04	[exa]	it's not very happy about the ' magicks, yes
2022-05-02 20:05:23	→	raehik has joined #haskell
2022-05-02 20:05:23	→	Vajb has joined #haskell
2022-05-02 20:05:35	[exa]	KingoftheHomeles: btw you sure that r~R doesn't place any additional constraints on R?
2022-05-02 20:05:47	KingoftheHomeles	I haven't tested the reproducer on 9.0.2 admittedly, it just exhibits the same kind of behavior as the constraints in my library.
2022-05-02 20:06:06	KingoftheHomeles	Nnno, it shouldn't.
2022-05-02 20:06:26	KingoftheHomeles	Notably, there is no PolyKinds involved, which I know the type checker can get tripped up on.
2022-05-02 20:13:22	[exa]	ok wow
2022-05-02 20:13:55	→	Pickchea has joined #haskell
2022-05-02 20:15:18	→	cosimone has joined #haskell
2022-05-02 20:16:28	←	abastro has quit (Ping timeout: 248 seconds)
2022-05-02 20:17:34	abastro[m]	...
2022-05-02 20:18:05	KingoftheHomeles	Can confirm the reproducer works on GHC 9.0.2
2022-05-02 20:18:05	abastro[m]	Meh matrix bug.. :/
2022-05-02 20:20:35	janus	KingoftheHomeles: default language is GHC2021 now, this means PolyKinds is enabled when you think it isn't
2022-05-02 20:20:42	[exa]	KingoftheHomeles: maybe the out-of-scope note here would match the problem? https://downloads.haskell.org/ghc/latest/docs/html/users_guide/9.2.1-notes.html#language
2022-05-02 20:21:11	KingoftheHomeles	janus PolyKinds being enabled or not doesn't matter in this case. All kinds involved are monomorphic.
2022-05-02 20:21:13	←	coot has quit (Quit: coot)
2022-05-02 20:21:23	→	abiss27 has joined #haskell
2022-05-02 20:21:32	KingoftheHomeles	Which is why I say it isn't involved.
2022-05-02 20:21:44	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-02 20:24:28	→	stackdroid18 has joined #haskell
2022-05-02 20:24:32	KingoftheHomeles	Remade the reproducer with complete imports and extensions on that better pastebin: https://paste.tomsmeding.com/Zcpe15sL
2022-05-02 20:24:34	janus	ooh ok, i understand
2022-05-02 20:24:56	janus	i thought you referred to PolyKinds as in the extension
2022-05-02 20:26:12	KingoftheHomeles	Unless they addressed the type issues the type checker had with PolyKinds by the way I'm surprised it became enabled by default in GHC2021
2022-05-02 20:27:24	abastro[m]	discharging to `r` hmm
2022-05-02 20:29:16	←	CiaoSen has quit (Ping timeout: 248 seconds)
2022-05-02 20:30:44	KingoftheHomeles	[exa] I don't see how it would apply.
2022-05-02 20:31:49	janus	KingoftheHomeles: i was not aware of those issues, do you know where i can read more?
2022-05-02 20:32:28	→	worldhelloworld1 has joined #haskell
2022-05-02 20:33:44	←	abiss27 has quit (Quit: hasta la vista... tchau!)
2022-05-02 20:33:53	←	TheCoffeMaker has quit (Ping timeout: 250 seconds)
2022-05-02 20:34:12	janus	KingoftheHomeles: it seems stupid, but have you tried giving kind signatures? because this resolved an issue in swagger2: https://github.com/GetShopTV/swagger2/pull/232/files
2022-05-02 20:34:16	KingoftheHomeles	The PolyKinds issue? It's more something I've experience of encountering . You can get fun stuff like "couldn't deduce 'A b' from the context 'A b'" from it. Let me see if I can cook up an example real quick.
2022-05-02 20:34:47	KingoftheHomeles	janus The reproducer uses kind signatures liberally, or are you talking about polykinds again?
2022-05-02 20:35:30	janus	well i am just still worried about whether PolyKinds includes something that isn't actually strictly for poly-kinds
2022-05-02 20:35:47	janus	but i guess since the Reproducer fails even with -XNoPolyKinds, that shouldn't be the case
2022-05-02 20:36:40	janus	i am way outta my dept :O looking forward to reading the ghc bug report though :)
2022-05-02 20:37:11	KingoftheHomeles	The PolyKinds issues I've had are indeed solved through kind signatures. My issue with it is that it gives rise to extremely weird error messages that give you no direction what to do, like  "couldn't deduce 'A b' from the context 'A b'". But yeah, those are not related to *this* issue.
2022-05-02 20:37:58	janus	right, ok
2022-05-02 20:38:15	←	merijn has quit (Ping timeout: 246 seconds)
2022-05-02 20:39:46	→	epolanski has joined #haskell
2022-05-02 20:42:05	→	TheCoffeMaker has joined #haskell
2022-05-02 20:44:12	←	neceve has quit (Ping timeout: 246 seconds)
2022-05-02 20:45:15	←	gpncarl has quit (Ping timeout: 260 seconds)
2022-05-02 20:45:33	←	Patternmaster has quit (Changing host)
2022-05-02 20:45:33	→	Patternmaster has joined #haskell
2022-05-02 20:45:40	→	gpncarl has joined #haskell
2022-05-02 20:46:46	→	xkuru has joined #haskell
2022-05-02 20:47:45	←	xkuru has quit (Remote host closed the connection)
2022-05-02 20:48:09	→	xkuru has joined #haskell
2022-05-02 20:50:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-05-02 20:52:59	→	hololeap has joined #haskell
2022-05-02 20:54:03	←	pooryorick has quit (Quit: Lost terminal)
2022-05-02 20:54:21	←	TheCoffeMaker has quit (Ping timeout: 246 seconds)
2022-05-02 20:55:34	abastro[m]	Instead of monadic effect handling, there could have been categorical effect handling right?
2022-05-02 20:56:33	→	TheCoffeMaker has joined #haskell
2022-05-02 20:56:50	dolio	What does that mean?
2022-05-02 20:56:58	←	lortabac has quit (Quit: WeeChat 2.8)
2022-05-02 20:56:59	→	coot has joined #haskell
2022-05-02 20:58:44	abastro[m]	Using Kleisli category instead of Monad
2022-05-02 21:00:03	→	alp_ has joined #haskell
2022-05-02 21:01:39	ℹ	Square is now known as Sqaure
2022-05-02 21:02:19	dolio	That doesn't seem like it significantly changes anything.
2022-05-02 21:02:34	c_wraith	it doesn't change anything, because we have <=<
2022-05-02 21:03:40	abastro[m]	Well, by using general categories one could generalize it for many stuffs
2022-05-02 21:04:11	abastro[m]	Alike arrows without `arr`
2022-05-02 21:05:23	→	merijn has joined #haskell
2022-05-02 21:06:00	→	yauhsien has joined #haskell
2022-05-02 21:07:13	abastro[m]	`{ from :: a -> IO b, to :: b -> IO a }` could be one such category
2022-05-02 21:08:14	c_wraith	If you make categories the primary interface, you do have the issue that you're basically requiring everything to be done point-free
2022-05-02 21:08:27	→	Guest38 has joined #haskell
2022-05-02 21:09:05	←	Guest38 has left #haskell
2022-05-02 21:11:06	→	ec has joined #haskell
2022-05-02 21:11:12	abastro[m]	I think one might introduce points as syntax sugar/convenience feature
2022-05-02 21:11:30	←	Pickchea has quit (Ping timeout: 246 seconds)
2022-05-02 21:11:47	→	eggplantade has joined #haskell
2022-05-02 21:12:00	←	anomal has quit (Remote host closed the connection)
2022-05-02 21:12:17	c_wraith	depending on how you do that, you're either inventing something like proc notation, or restricting your interface to be only Kleisli categories
2022-05-02 21:12:30	c_wraith	and proc notation is a nightmare
2022-05-02 21:12:59	←	cdman has quit (Quit: Leaving)
2022-05-02 21:13:27	dolio	There's no point in introducing such syntax for arbitrary categories, because they have almost no structure.
2022-05-02 21:13:42	dolio	All there is is composition of arrows.
2022-05-02 21:13:53	→	dvdrw has joined #haskell
2022-05-02 21:14:15	c_wraith	like, at least Kleisli arrows guarantee you've got a function of some sort
2022-05-02 21:14:16	abastro[m]	Oh, arbitrary category might indeed be too simple
2022-05-02 21:14:43	→	_ht has joined #haskell
2022-05-02 21:14:54	abastro[m]	I think e.g. Choice arrow and Product arrow exists for reason
2022-05-02 21:15:17	KingoftheHomeles	Created the GHC issue: https://gitlab.haskell.org/ghc/ghc/-/issues/21473
2022-05-02 21:15:17	c_wraith	it really does seem like you're trying to reinvent Arrow and proc notation, and there's a reason that those are nearly unused
2022-05-02 21:15:21	→	econo has joined #haskell
2022-05-02 21:15:49	abastro[m]	Arrow notation is nightmare, isn't it
2022-05-02 21:16:06	abastro[m]	I think one could do state bookkeeping tho
2022-05-02 21:16:07	geekosaur	the notation is fine, arr is the nightmare
2022-05-02 21:16:29	abastro[m]	Oh, is the notation fine? 
2022-05-02 21:17:08	geekosaur	some people want cdhanges to it, but my understanding is that's mostly generalizing it
2022-05-02 21:17:13	geekosaur	(talk to Cale)
2022-05-02 21:17:39	→	geranim0 has joined #haskell
2022-05-02 21:17:46	geekosaur	but having arr as a "backdoor" kills its usefulness
2022-05-02 21:18:02	→	Unicorn_Princess has joined #haskell
2022-05-02 21:19:30	abastro[m]	Indeed, I can not think of good arrow usage with `arr`
2022-05-02 21:19:46	abastro[m]	If you have `arr`, it would already be too powerful
2022-05-02 21:19:59	←	benin has quit (Quit: The Lounge - https://thelounge.chat)
2022-05-02 21:20:18	geekosaur	actually arr weakens it. arr is most uesful when you can inspect an arrow, but arr injects black boxes
2022-05-02 21:20:31	←	jakalx has left #haskell (Error from remote client)
2022-05-02 21:21:02	←	chele has quit (Remote host closed the connection)
2022-05-02 21:21:13	abastro[m]	Right, I mean it depends on perspective
2022-05-02 21:21:57	abastro[m]	Too powerful for users, too weak for implementors (hard to implement)
2022-05-02 21:22:15	←	cosimone has quit (Remote host closed the connection)
2022-05-02 21:22:44	←	KingoftheHomeles has quit (Quit: Client closed)
2022-05-02 21:23:44	←	xff0x_ has quit (Read error: Connection reset by peer)
2022-05-02 21:25:52	←	mikoto-chan has quit (Read error: Connection reset by peer)
2022-05-02 21:26:22	→	mikoto-chan has joined #haskell
2022-05-02 21:27:01	albet70	what's an "arrow"?
2022-05-02 21:28:22	geekosaur	which part of that conversation do you mean? Arrows in the Haskell sense are defined by Control.Arrow
2022-05-02 21:28:38	←	coot has quit (Quit: coot)
2022-05-02 21:28:50	geekosaur	there was also a mention of categorical arrows, which… being categorical, are somewhat difficult to characterize :)
2022-05-02 21:29:27	→	jakalx has joined #haskell
2022-05-02 21:29:32	albet70	Control.Arrow
2022-05-02 21:29:53	albet70	what's its purpose?
2022-05-02 21:30:18	geekosaur	you could say it's an abstraction looking for a purpose :)
2022-05-02 21:30:49	geekosaur	but as designed… like c_wraith said above, there's a reason it's nearly unused
2022-05-02 21:31:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-05-02 21:31:06	Rembane	It has been looking for a very long time now, and every time there seems to be a good fit something else that actually works well shows up.
2022-05-02 21:33:22	Cale	abastro[m], geekosaur: It's not so much the existence of arr, but the reliance on it in order to route results around between computations which makes it so bad. If you add in some other bits, then arr can *mostly* be avoided (except when you really do want to do some arbitrary computation), and that tends to be good enough.
2022-05-02 21:34:20	Cale	Though, it really does belong in its own class. The rest of the stuff in Arrow is basically the setup for a symmetric monoidal category (with (,) as the product on objects).
2022-05-02 21:34:31	geekosaur	^ albet70 here's who you really want to talk to if you want to know about Arrows
2022-05-02 21:34:35	→	littlebobeep has joined #haskell
2022-05-02 21:34:50	Cale	There are better realizations of that idea on Hackage now, though the proc/do syntax never got updated to work with any of them.
2022-05-02 21:36:21	→	Sinbad has joined #haskell
2022-05-02 21:36:27	→	tromp has joined #haskell
2022-05-02 21:39:02	→	CiaoSen has joined #haskell
2022-05-02 21:40:06	abastro[m]	Is bookkeeping intermediate "state" an option
2022-05-02 21:40:12	←	raym has quit (Ping timeout: 248 seconds)
2022-05-02 21:41:09	Cale	You mean in the same sense as the State monad?
2022-05-02 21:41:16	Cale	(then yes)
2022-05-02 21:41:26	→	mvk has joined #haskell
2022-05-02 21:41:43	abastro[m]	Similar as State monad, yea
2022-05-02 21:42:00	abastro[m]	But instead it is categorical
2022-05-02 21:42:01	Cale	Though, I would want Arrow to have laws which would forbid that instance :)
2022-05-02 21:42:19	Cale	(but it explicitly doesn't)
2022-05-02 21:42:53	abastro[m]	Like composing... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/8ede47d8f4f464ddccbcac3cea6c141e0fe0d8c5)
2022-05-02 21:42:57	Cale	Specifically, it's fairly essential for being able to reason about what's going on in an Arrow computation that (f >>> g) *** (h >>> k) = (f *** h) >>> (g *** k)
2022-05-02 21:43:04	abastro[m]	Each `si` serves as an intermediate state
2022-05-02 21:43:33	Cale	newtype StateA s a b = StateA { runStateA :: (s,a) -> (s,b) }
2022-05-02 21:43:48	abastro[m]	Oh I do not mean StateA
2022-05-02 21:44:12	abastro[m]	(Tho I guess it is sad how StateA is unlawful)
2022-05-02 21:45:39	abastro[m]	I was thinking of how to use categories more ergonomically
2022-05-02 21:45:49	←	TheCoffeMaker has quit (Ping timeout: 250 seconds)
2022-05-02 21:47:32	→	arjun has joined #haskell
2022-05-02 21:48:32	Cale	Oh, yeah... the best experiment I've seen in that direction is Conal's "concat"
2022-05-02 21:48:57	Cale	https://github.com/conal/concat
2022-05-02 21:49:18	←	nschoe has quit (Ping timeout: 246 seconds)
2022-05-02 21:49:49	←	nut has quit (Quit: WeeChat 3.5)
2022-05-02 21:50:21	Cale	Where you can basically write Haskell code (lambdas, etc.) and have it translated into code that works in an arbitrary category that satisfies a bunch of constraints that depend on what features you used.
2022-05-02 21:50:32	→	TheCoffeMaker has joined #haskell
2022-05-02 21:53:54	abastro[m]	Hmm, sounds quite ambitious
2022-05-02 21:54:24	abastro[m]	I wonder if it would work well
2022-05-02 21:54:43	←	CiaoSen has quit (Ping timeout: 260 seconds)
2022-05-02 21:55:02	Cale	Yeah, I wouldn't be comfortable trying to put it into production yet, but the idea seems quite solid.
2022-05-02 21:55:19	→	wootehfoot has joined #haskell
2022-05-02 21:55:54	EvanR	you got your code, which is simply a sentence in a language. Then you got your interpretation. In programming you don't immediately learn that they are different xD
2022-05-02 21:56:09	EvanR	and can even be mixed and matched
2022-05-02 21:57:10	→	eternalforms has joined #haskell
2022-05-02 21:57:47	←	jgeerds has quit (Ping timeout: 240 seconds)
2022-05-02 21:58:41	←	TheCoffeMaker has quit (Ping timeout: 248 seconds)
2022-05-02 22:00:50	→	raym has joined #haskell
2022-05-02 22:01:10	←	MajorBiscuit has quit (Quit: WeeChat 3.4)
2022-05-02 22:02:24	→	tzh has joined #haskell
2022-05-02 22:02:25	←	Sinbad has quit (Ping timeout: 256 seconds)
2022-05-02 22:04:45	→	coot has joined #haskell
2022-05-02 22:08:45	→	neceve has joined #haskell
2022-05-02 22:09:25	→	x_kuru has joined #haskell
2022-05-02 22:12:45	←	xkuru has quit (Ping timeout: 260 seconds)
2022-05-02 22:13:12	←	alp_ has quit (Ping timeout: 260 seconds)
2022-05-02 22:17:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-05-02 22:17:26	→	Sinbad has joined #haskell
2022-05-02 22:17:35	→	TheCoffeMaker has joined #haskell
2022-05-02 22:21:47	←	x_kuru has quit (Ping timeout: 240 seconds)
2022-05-02 22:22:51	→	Tuplanolla has joined #haskell
2022-05-02 22:26:16	Bulby[m]	how do you debug where an app crashed
2022-05-02 22:26:52	→	jao has joined #haskell
2022-05-02 22:28:36	←	TheCoffeMaker has quit (Ping timeout: 260 seconds)
2022-05-02 22:30:18	←	mvk has quit (Ping timeout: 260 seconds)
2022-05-02 22:32:04	Bulby[m]	i see the people on discord use "dumpcore"
2022-05-02 22:35:34	→	werneta has joined #haskell
2022-05-02 22:35:46	→	littlebobeep has joined #haskell
2022-05-02 22:38:26	EvanR	in its purest form, you read the message printed out during the crash
2022-05-02 22:38:34	EvanR	if any
2022-05-02 22:38:45	Bulby[m]	there is no message
2022-05-02 22:38:59	EvanR	my sympathies
2022-05-02 22:42:33	EvanR	as a pessimistic programmer I'm hyper paranoid about stuff like that, so any place I intentionally cause a crash, I put a message.
2022-05-02 22:42:59	Bulby[m]	right
2022-05-02 22:43:00	⚡	Bulby[m] sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/90a36f3a354783143c8487b37d9d7207778c8a7b
2022-05-02 22:43:19	EvanR	for code I didn't write, a review what kind of exceptions it can throw, or even check for flagrant non totalities
2022-05-02 22:43:20	Bulby[m]	i should use pactl, not pamixer
2022-05-02 22:47:58	Bulby[m]	are there regexs for haskell
2022-05-02 22:48:10	Bulby[m]	output of pactl is not nice
2022-05-02 22:48:29	→	wroathe has joined #haskell
2022-05-02 22:48:29	←	wroathe has quit (Changing host)
2022-05-02 22:48:29	→	wroathe has joined #haskell
2022-05-02 22:48:38	Rembane	Bulby[m]: There are regexen for Haskell, but we prefer parser combinators 
2022-05-02 22:49:00	Bulby[m]	that's what I figured
2022-05-02 22:49:11	dminuoso	If you're curious, the least offending regexp library I have found so far is pcre-heavy
2022-05-02 22:49:48	dminuoso	While parser combinators are certainly far more robust and feature rich, sometimes its convenient to just have a one-liner do "the morally right thing"
2022-05-02 22:49:51	Bulby[m]	well i already know how to write parser combinator stuff
2022-05-02 22:50:08	Bulby[m]	the morally right thing?
2022-05-02 22:50:46	gabriel_sevecek	Hey, I'm experimenting with twain and I'm wondering what do you haskellers use for auto rebuild of the dev server?
2022-05-02 22:51:12	dminuoso	Well, it's certainly convenient to quickly cook up a regular expression. It takes a few seconds to write, might have some rare-or-will-never-trigger edge case, will probably perform not as nicely, backtracking introduces certain DoS angles - but honestly most of the time these are just philosophical issues.
2022-05-02 22:51:21	←	x88x88x has quit (Remote host closed the connection)
2022-05-02 22:51:41	dminuoso	gabriel_sevecek: You can trivially use ghcid to that effect.
2022-05-02 22:51:44	←	coot has quit (Quit: coot)
2022-05-02 22:52:02	dminuoso	Note, you will have to go a bit further than the default (which just compiles it with ghci)
2022-05-02 22:52:59	dminuoso	I think this is one of the things that prevents adoption of Haskell - the lack of general tools to do simple and common tasks easily.
2022-05-02 22:53:10	gabriel_sevecek	I tried 'ghcid --command "cabal run thething"', that did not work
2022-05-02 22:53:22	gabriel_sevecek	But I will investigate more
2022-05-02 22:53:25	gabriel_sevecek	Thanks dminuoso 
2022-05-02 22:53:30	dminuoso	gabriel_sevecek:  https://binarin.ru/post/auto-reload-threepenny-gui/
2022-05-02 22:53:34	dminuoso	Might give you some helpful pointers
2022-05-02 22:54:23	gabriel_sevecek	Cool
2022-05-02 22:55:52	dminuoso	In Python, you are exposed to simple tools to just do data crunching. Cooking up a program to take some text encoded data, and extract/process it, takes way less effort than in Haskell. I mean yes, to some degree it's not scalable and more brittle
2022-05-02 22:55:58	dminuoso	But sometimes that's perfectly fine
2022-05-02 22:57:38	→	x88x88x has joined #haskell
2022-05-02 23:02:24	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-02 23:05:15	Bulby[m]	solution to that issue: don't change code, just install pamixer 😄
2022-05-02 23:05:50	←	waleee has quit (Ping timeout: 260 seconds)
2022-05-02 23:06:06	Bulby[m]	wait my wireless isn't down
2022-05-02 23:06:11	←	ccntrq has quit (Remote host closed the connection)
2022-05-02 23:06:45	→	pgib has joined #haskell
2022-05-02 23:09:06	gabriel_sevecek	dminuoso: Was pretty easy with the link you've posted, thanks again
2022-05-02 23:15:36	←	dschrempf has quit (Ping timeout: 276 seconds)
2022-05-02 23:19:36	ℹ	Frinasa[m] is now known as Frikraaa[m]
2022-05-02 23:19:38	→	TheCoffeMaker has joined #haskell
2022-05-02 23:21:38	←	worldhelloworld1 has quit (Quit: Connection closed for inactivity)
2022-05-02 23:21:39	→	acidjnk has joined #haskell
2022-05-02 23:23:11	←	FinnElija has quit (Remote host closed the connection)
2022-05-02 23:23:32	→	FinnElija has joined #haskell
2022-05-02 23:25:34	←	hololeap has quit (Ping timeout: 240 seconds)
2022-05-02 23:28:00	←	irfan has quit (Quit: leaving)
2022-05-02 23:28:21	→	hololeap has joined #haskell
2022-05-02 23:29:48	danso	is there a conventional way to get a 3-bit integer, like a data type (an enum) with 8 constructors? 
2022-05-02 23:30:42	dminuoso	You can use just that, a data type with 8 constructors.
2022-05-02 23:31:12	dminuoso	And that's the idiomatic way as well.
2022-05-02 23:31:30	dminuoso	Or a newtype hidden Word8 with smart constructors
2022-05-02 23:31:38	dminuoso	Depends a bit on what you want to do with it
2022-05-02 23:32:37	←	eggplantade has quit (Remote host closed the connection)
2022-05-02 23:34:47	←	TheCoffeMaker has quit (Ping timeout: 256 seconds)
2022-05-02 23:37:10	→	TheCoffeMaker has joined #haskell
2022-05-02 23:37:28	→	coot has joined #haskell
2022-05-02 23:37:51	→	waleee has joined #haskell
2022-05-02 23:38:17	←	Sinbad has quit (Quit: WeeChat 3.5)
2022-05-02 23:43:20	→	jgeerds has joined #haskell
2022-05-02 23:47:05	→	eggplantade has joined #haskell
2022-05-02 23:48:07	EvanR	also, Three Bool xD
2022-05-02 23:48:21	→	alp_ has joined #haskell
2022-05-02 23:49:38	→	Pickchea has joined #haskell
2022-05-02 23:49:46	EvanR	also Maybe (Maybe (Maybe (Maybe (Maybe (Maybe (Maybe ()))))))
2022-05-02 23:50:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-05-02 23:50:08	monochrom	Unfortunately, for now 3 bools take up 8*3 bytes.
2022-05-02 23:50:37	exarkun	at least it's not 28*3 bytes
2022-05-02 23:50:38	EvanR	that's an improvement
2022-05-02 23:51:08	EvanR	GHC 10 will make 3 bools = 3 bits
2022-05-02 23:51:14	EvanR	GHC 11 will make 3 bools = 2 bits
2022-05-02 23:51:29	exarkun	Can't wait for GHC 12 then
2022-05-02 23:51:34	←	ChaiTRex has quit (Ping timeout: 240 seconds)
2022-05-02 23:51:43	monochrom	onoes
2022-05-02 23:52:08	monochrom	GHC 12 will do quantum computing by the holographic principle, I guess.
2022-05-02 23:52:28	monochrom	And GHC 13 will prove P=NP.
2022-05-02 23:52:29	EvanR	compression tech can't go beyond 2 bits, sorry
2022-05-02 23:52:39	←	wroathe has quit (Ping timeout: 276 seconds)
2022-05-02 23:52:39	exarkun	_Current_ compression tech, EvanR 
2022-05-02 23:52:58	monochrom	Yeah understood, it stops at the holographic principle >:)
2022-05-02 23:53:19	EvanR	GHC 13 runs on a black hole
2022-05-02 23:53:37	→	ChaiTRex has joined #haskell
2022-05-02 23:54:51	→	hololeap has joined #haskell
2022-05-02 23:55:55	monochrom	3bools1bit --- like 3blue1brown but computer science >:)
2022-05-02 23:57:15	monochrom	"here is a visual analogy of the curry-howard isomorphism"
2022-05-03 00:00:42	Bulby[m]	3 bool?
2022-05-03 00:00:53	Bulby[m]	Three Bool
2022-05-03 00:01:36	←	raehik has quit (Ping timeout: 246 seconds)
2022-05-03 00:03:14	→	mvk has joined #haskell
2022-05-03 00:10:50	←	eggplantade has quit (Remote host closed the connection)
2022-05-03 00:15:30	←	arjun has quit (Remote host closed the connection)
2022-05-03 00:22:22	→	tromp has joined #haskell
2022-05-03 00:28:20	→	seydar has joined #haskell
2022-05-03 00:28:50	→	dschrempf has joined #haskell
2022-05-03 00:30:17	←	neceve has quit (Remote host closed the connection)
2022-05-03 00:32:16	←	jakalx has left #haskell
2022-05-03 00:33:56	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-03 00:34:36	→	jakalx has joined #haskell
2022-05-03 00:41:34	←	hololeap has quit (Ping timeout: 240 seconds)
2022-05-03 00:44:23	→	hololeap has joined #haskell
2022-05-03 00:44:51	←	[itchyjunk] has quit (Remote host closed the connection)
2022-05-03 00:47:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-05-03 00:48:51	→	littlebobeep has joined #haskell
2022-05-03 00:49:28	→	julian has joined #haskell
2022-05-03 00:49:55	seydar	decoding images seems... kinda tough
2022-05-03 00:52:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-05-03 00:52:53	seydar	i'm gonna use the juicy pixels library -- is that the crowd favorite?
2022-05-03 00:55:00	EvanR	juicy pixels is great
2022-05-03 00:55:08	←	gpncarl has quit (Ping timeout: 260 seconds)
2022-05-03 00:55:37	→	hololeap has joined #haskell
2022-05-03 00:55:53	→	gpncarl has joined #haskell
2022-05-03 00:56:32	EvanR	it hits a sweet spot where the type system is guiding you without being over the top 
2022-05-03 00:57:36	Bulby[m]	I LOVE THE TYPE SYSTEM
2022-05-03 00:58:35	←	janus has left #haskell
2022-05-03 01:00:21	←	gpncarl has quit (Ping timeout: 256 seconds)
2022-05-03 01:04:16	←	mjs2600 has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-05-03 01:04:37	seydar	i suppose i shouldn't be shocked at how complex it is to read an image
2022-05-03 01:04:45	seydar	these formats are not for the faint of heart
2022-05-03 01:05:03	dolio	bmp is probably easy, right?
2022-05-03 01:10:20	dolio	Oh no, ppm is the easy one.
2022-05-03 01:11:24	→	ss4 has joined #haskell
2022-05-03 01:11:25	→	eggplantade has joined #haskell
2022-05-03 01:12:13	→	tromp has joined #haskell
2022-05-03 01:12:14	ℹ	irc: disconnected from server
2022-05-03 17:54:39	→	oxide has joined #haskell
2022-05-03 17:54:39	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-05-03 17:54:39	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-05-03 17:54:39	ℹ	Channel #haskell: 702 nicks (1 op, 0 voices, 701 normals)
2022-05-03 17:54:39	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-05-03 17:54:39	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-05-03 17:55:54	→	sagax has joined #haskell
2022-05-03 18:00:28	→	razetime has joined #haskell
2022-05-03 18:00:47	→	Unicorn_Princess has joined #haskell
2022-05-03 18:02:55	←	ccntrq has quit (Remote host closed the connection)
2022-05-03 18:03:30	→	acidjnk has joined #haskell
2022-05-03 18:06:38	→	arjun has joined #haskell
2022-05-03 18:10:29	→	mikoto-chan has joined #haskell
2022-05-03 18:14:29	←	hp77 has quit (Quit: Client closed)
2022-05-03 18:14:30	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-03 18:14:46	→	lbseale has joined #haskell
2022-05-03 18:19:42	→	abrantesasf has joined #haskell
2022-05-03 18:21:28	→	Polo has joined #haskell
2022-05-03 18:26:08	←	arjun has quit (Quit: Leaving)
2022-05-03 18:26:09	→	Topsi has joined #haskell
2022-05-03 18:27:31	←	brettgilio has quit (Quit: The Lounge - https://thelounge.chat)
2022-05-03 18:27:41	→	xff0x_ has joined #haskell
2022-05-03 18:28:08	→	brettgilio has joined #haskell
2022-05-03 18:31:19	←	acidjnk has quit (Ping timeout: 240 seconds)
2022-05-03 18:35:31	→	Pickchea has joined #haskell
2022-05-03 18:36:24	→	srk- has joined #haskell
2022-05-03 18:36:25	→	bontaq has joined #haskell
2022-05-03 18:37:37	→	alx741 has joined #haskell
2022-05-03 18:39:09	←	MajorBiscuit has quit (Ping timeout: 246 seconds)
2022-05-03 18:39:45	←	srk has quit (Ping timeout: 276 seconds)
2022-05-03 18:39:45	ℹ	srk- is now known as srk
2022-05-03 18:42:35	→	srk- has joined #haskell
2022-05-03 18:43:09	→	srk| has joined #haskell
2022-05-03 18:46:10	→	nut has joined #haskell
2022-05-03 18:46:15	→	srk^ has joined #haskell
2022-05-03 18:46:20	←	srk has quit (Ping timeout: 248 seconds)
2022-05-03 18:47:33	←	srk- has quit (Ping timeout: 276 seconds)
2022-05-03 18:48:12	←	srk| has quit (Ping timeout: 276 seconds)
2022-05-03 18:49:12	ℹ	srk^ is now known as srk
2022-05-03 18:49:18	←	frost has quit (Quit: Client closed)
2022-05-03 18:50:04	←	alx741 has quit (Ping timeout: 248 seconds)
2022-05-03 18:51:12	→	MajorBiscuit has joined #haskell
2022-05-03 18:51:54	→	mbuf has joined #haskell
2022-05-03 18:52:34	→	alx741 has joined #haskell
2022-05-03 18:53:44	→	szkl has joined #haskell
2022-05-03 18:58:07	→	bahamas has joined #haskell
2022-05-03 18:58:45	←	kaph has quit (Ping timeout: 260 seconds)
2022-05-03 18:59:15	←	alx741 has quit (Ping timeout: 276 seconds)
2022-05-03 19:01:26	→	alx741 has joined #haskell
2022-05-03 19:02:36	→	wroathe has joined #haskell
2022-05-03 19:02:37	←	wroathe has quit (Changing host)
2022-05-03 19:02:37	→	wroathe has joined #haskell
2022-05-03 19:04:23	←	Polo has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2022-05-03 19:04:42	←	littlebobeep has quit (Remote host closed the connection)
2022-05-03 19:05:08	→	littlebobeep has joined #haskell
2022-05-03 19:06:55	←	alx741 has quit (Ping timeout: 260 seconds)
2022-05-03 19:09:25	→	alx741 has joined #haskell
2022-05-03 19:15:05	←	alx741 has quit (Ping timeout: 260 seconds)
2022-05-03 19:25:25	→	adeldude_13 has joined #haskell
2022-05-03 19:27:37	→	alx741 has joined #haskell
2022-05-03 19:27:40	←	adeldude13 has quit (Ping timeout: 260 seconds)
2022-05-03 19:28:30	←	wroathe has quit (Ping timeout: 260 seconds)
2022-05-03 19:28:31	→	vicfred has joined #haskell
2022-05-03 19:30:55	←	alx741 has quit (Client Quit)
2022-05-03 19:32:49	←	chexum has quit (Remote host closed the connection)
2022-05-03 19:33:04	→	chexum has joined #haskell
2022-05-03 19:33:33	→	tromp has joined #haskell
2022-05-03 19:35:15	←	inversed_ has quit (Ping timeout: 272 seconds)
2022-05-03 19:35:15	→	[itchyjunk] has joined #haskell
2022-05-03 19:36:01	→	seydar has joined #haskell
2022-05-03 19:36:44	seydar	I'm trying to combine 8-bit R, G, and B values into a single 24-bit RGB. Is there a better way to do this besides Data.Bits and bitshifting?
2022-05-03 19:49:30	←	bahamas has quit (Ping timeout: 246 seconds)
2022-05-03 19:49:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-05-03 19:49:40	←	dsrt^ has quit (Remote host closed the connection)
2022-05-03 19:53:24	→	metabulation has joined #haskell
2022-05-03 19:55:54	←	Topsi has quit (Quit: Leaving.)
2022-05-03 19:56:35	→	Topsi has joined #haskell
2022-05-03 19:59:33	←	hololeap has quit (Remote host closed the connection)
2022-05-03 19:59:42	←	metabulation has quit (Ping timeout: 276 seconds)
2022-05-03 20:03:02	→	eggplantade has joined #haskell
2022-05-03 20:04:57	→	hololeap has joined #haskell
2022-05-03 20:04:59	anomal	How does lazy eval work when there's a branch
2022-05-03 20:05:50	←	seydar has quit (Quit: leaving)
2022-05-03 20:06:03	anomal	How can an expression take a branch when it didn't eval
2022-05-03 20:06:03	int-e	. o O ( there are no branches, there's only pattern matching )
2022-05-03 20:06:12	anomal	Same for patterns
2022-05-03 20:06:18	anomal	It's branching :P
2022-05-03 20:06:26	geekosaur	patterns are the main way of forcing evaluation
2022-05-03 20:06:30	anomal	Sure
2022-05-03 20:06:38	anomal	So how do we match something that hasn't evaluated
2022-05-03 20:06:47	int-e	you evaluate it first
2022-05-03 20:06:48	geekosaur	that's the point: it gets evaluated there
2022-05-03 20:06:53	anomal	There?
2022-05-03 20:07:06	anomal	So we roll all branches into the thunk during the lazy part?
2022-05-03 20:07:13	geekosaur	if the language were completely lazy, nothing would ever happen. instead. patterns force evaluation
2022-05-03 20:07:21	anomal	Oh wait, they do?
2022-05-03 20:07:31	anomal	Wait, do they literally do?
2022-05-03 20:07:41	geekosaur	yes
2022-05-03 20:07:45	anomal	Huh
2022-05-03 20:07:58	anomal	Why was...
2022-05-03 20:08:02	anomal	I unaware of this
2022-05-03 20:08:09	←	eggplantade has quit (Ping timeout: 276 seconds)
2022-05-03 20:08:22	geekosaur	specifically they force enough evaluation to match the pattern, which usually doesn't mean full evaluation but evaluation to the first constructor (weak head normal form)
2022-05-03 20:10:10	→	takuan has joined #haskell
2022-05-03 20:10:11	→	shriekingnoise has joined #haskell
2022-05-03 20:11:32	←	MajorBiscuit has quit (Ping timeout: 260 seconds)
2022-05-03 20:12:11	geekosaur	sometimes you need part of a pattern to be lazy, though, so there's a pattern metacharacter that makes a pattern or subpattern lazy: precede it with ~
2022-05-03 20:12:37	→	inversed has joined #haskell
2022-05-03 20:12:46	geekosaur	you won't see this happen much though
2022-05-03 20:14:28	anomal	geekosaur: so patterns can be lazy too, but I suppose it produces complex thunks
2022-05-03 20:14:36	anomal	geekosaur: so you reduce there to pick a branch
2022-05-03 20:14:38	→	seydar has joined #haskell
2022-05-03 20:15:00	seydar	How do I convert a Double to a Word8? I'd like to ultimately do some bitshifting on them.
2022-05-03 20:15:03	geekosaur	the Report provides the exact translation, it just expands to a lambda that will do the match when the lambda's value is required
2022-05-03 20:15:23	int-e	anomal: yes, it produces thunks.  case xs of ~(a:b) -> ... gets desugared into something more like   let a = head xs; b = tail xs in ...
2022-05-03 20:15:50	anomal	geekosaur: if every operation returns a "result" type of record, you know maybe with error/result, does that mean each such call is a branch and we eval there
2022-05-03 20:16:10	int-e	(where head and tail are readable names for (\(a:b) -> a) and (\(a:b) -> b))
2022-05-03 20:16:46	→	sabry has joined #haskell
2022-05-03 20:17:29	geekosaur	anomal, I'm not sure I understand the question. the call itself is not a pattern match usually, but doing a case on the result would be
2022-05-03 20:17:42	int-e	anomal: in GHC's core language (a kind of minimal Haskell), the distinction is pretty clearn: `let` creates thunks; `case` forces evaluation of the first constructor and matches that.
2022-05-03 20:18:30	int-e	In Haskell, patterns are more flexible, so the split isn't as clean.
2022-05-03 20:20:35	anomal	int-e: this clarifies a lot
2022-05-03 20:23:49	→	Sgeo has joined #haskell
2022-05-03 20:25:38	seydar	I'm having trouble doing numeric conversions. I'm dealing with compiler errors. Here's my repro: https://paste.tomsmeding.com/X7gatcqd. Does anyone have any advice for moving between Double and Word8?
2022-05-03 20:25:51	→	MajorBiscuit has joined #haskell
2022-05-03 20:26:17	int-e	:t round
2022-05-03 20:26:18	lambdabot	(RealFrac a, Integral b) => a -> b
2022-05-03 20:27:32	seydar	int-e: wow, that made everything work perfectly (i put it in lines 7-9)
2022-05-03 20:27:40	int-e	round, floor, and ceiling are the usual functions for converting floating point numbers to integers
2022-05-03 20:29:22	int-e	seydar: Beware of 256; it's often necessary to do some clamping to esnure everything stays in range [0..255]
2022-05-03 20:30:51	←	anomal has quit (Remote host closed the connection)
2022-05-03 20:31:10	→	anomal has joined #haskell
2022-05-03 20:31:32	←	anomal has quit (Remote host closed the connection)
2022-05-03 20:32:13	←	xff0x_ has quit (Ping timeout: 256 seconds)
2022-05-03 20:35:00	←	dibblego has quit (Ping timeout: 246 seconds)
2022-05-03 20:37:07	→	dibblego has joined #haskell
2022-05-03 20:37:07	←	dibblego has quit (Changing host)
2022-05-03 20:37:07	→	dibblego has joined #haskell
2022-05-03 20:38:11	←	nut has quit (Ping timeout: 250 seconds)
2022-05-03 20:39:59	→	nut has joined #haskell
2022-05-03 20:40:50	←	cdman has quit (Quit: Leaving)
2022-05-03 20:41:07	←	sabry has quit (Quit: Client closed)
2022-05-03 20:43:17	→	kuribas has joined #haskell
2022-05-03 20:47:26	←	ec has quit (Quit: ec)
2022-05-03 20:47:26	←	Vajb has quit (Read error: Connection reset by peer)
2022-05-03 20:47:44	→	ec has joined #haskell
2022-05-03 20:48:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-05-03 20:48:36	→	Vajb has joined #haskell
2022-05-03 20:52:40	→	hololeap has joined #haskell
2022-05-03 20:54:37	←	alp_ has quit (Ping timeout: 240 seconds)
2022-05-03 20:55:44	←	seydar has quit (Quit: leaving)
2022-05-03 20:58:54	→	dcoutts__ has joined #haskell
2022-05-03 20:59:27	←	vicfred has quit (Quit: Leaving)
2022-05-03 20:59:50	←	lortabac has quit (Quit: WeeChat 2.8)
2022-05-03 21:01:25	→	_ht has joined #haskell
2022-05-03 21:06:38	←	justsomeguy has quit (Quit: WeeChat 3.4)
2022-05-03 21:09:40	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-03 21:11:53	←	Pickchea has quit (Ping timeout: 256 seconds)
2022-05-03 21:12:20	→	coot has joined #haskell
2022-05-03 21:12:25	←	CiaoSen has quit (Ping timeout: 250 seconds)
2022-05-03 21:15:14	→	jgeerds has joined #haskell
2022-05-03 21:15:56	←	ec has quit (Remote host closed the connection)
2022-05-03 21:16:17	→	ec has joined #haskell
2022-05-03 21:17:04	→	xff0x has joined #haskell
2022-05-03 21:19:16	ℹ	EvanR_ is now known as EvanR
2022-05-03 21:20:27	←	adeldude_13 has quit (Remote host closed the connection)
2022-05-03 21:20:47	→	adeldude_13 has joined #haskell
2022-05-03 21:21:28	→	eggplantade has joined #haskell
2022-05-03 21:23:13	←	szkl has quit (Quit: Connection closed for inactivity)
2022-05-03 21:23:17	←	coot has quit (Remote host closed the connection)
2022-05-03 21:25:26	→	econo has joined #haskell
2022-05-03 21:25:33	→	coot has joined #haskell
2022-05-03 21:27:24	←	odnes has quit (Ping timeout: 248 seconds)
2022-05-03 21:28:45	←	coot has quit (Remote host closed the connection)
2022-05-03 21:28:51	→	bahamas has joined #haskell
2022-05-03 21:30:47	→	coot has joined #haskell
2022-05-03 21:32:08	tomgus1	I was wondering if this was a good place to ask about a problem I'm trying to solve with showing the next prime values of an input integer. I'm very new to Haskell and hitting a wall. 
2022-05-03 21:33:16	←	bahamas has quit (Ping timeout: 248 seconds)
2022-05-03 21:33:31	tomgus1	E.g. `eitherSide 64 = [61, 67]`
2022-05-03 21:34:48	←	coot has quit (Remote host closed the connection)
2022-05-03 21:35:05	→	bahamas has joined #haskell
2022-05-03 21:35:59	→	coot has joined #haskell
2022-05-03 21:36:06	→	zebrag has joined #haskell
2022-05-03 21:37:22	←	xff0x has quit (Read error: Connection reset by peer)
2022-05-03 21:37:44	←	coot has quit (Client Quit)
2022-05-03 21:38:04	←	mikoto-chan has quit (Ping timeout: 248 seconds)
2022-05-03 21:39:10	←	teo has quit (Ping timeout: 260 seconds)
2022-05-03 21:39:39	←	eggplantade has quit (Remote host closed the connection)
2022-05-03 21:39:45	←	bahamas has quit (Ping timeout: 246 seconds)
2022-05-03 21:43:08	EvanR	what method are you trying to use
2022-05-03 21:46:02	→	mikoto-chan has joined #haskell
2022-05-03 21:46:18	←	hololeap has quit (Read error: Connection reset by peer)
2022-05-03 21:48:09	←	MajorBiscuit has quit (Ping timeout: 256 seconds)
2022-05-03 21:50:12	→	tromp has joined #haskell
2022-05-03 21:50:27	tomgus1	My given method was https://pastebin.mozilla.org/iouc6nab
2022-05-03 21:50:49	→	hololeap has joined #haskell
2022-05-03 21:51:02	Andrew	 Does anyone know some examples of using pipe-async?
2022-05-03 21:53:38	←	yauhsien has quit (Remote host closed the connection)
2022-05-03 21:54:30	EvanR	hmm 99 seems kind of magical
2022-05-03 21:54:34	→	eggplantade has joined #haskell
2022-05-03 21:54:50	→	yauhsien has joined #haskell
2022-05-03 21:54:53	EvanR	but there's not much of a plan as of yet, it seems
2022-05-03 21:55:03	←	mikoto-chan has quit (Read error: Connection reset by peer)
2022-05-03 21:55:16	EvanR	maybe try to do a basic search and a basic prime test
2022-05-03 21:55:27	→	mikoto-chan has joined #haskell
2022-05-03 21:55:56	←	ec has quit (Quit: ec)
2022-05-03 21:56:46	tomgus1	I have been trying this to get my next prime which will work 
2022-05-03 21:56:46	tomgus1	nextPrimes :: Int -> [Int]
2022-05-03 21:56:46	tomgus1	nextPrimes n = let sq = fromIntegral . ceiling . sqrt $ fromIntegral n
2022-05-03 21:56:46	tomgus1	                   pri k = (k,and [ k`mod`x/=0 | x <- [2..sq]])
2022-05-03 21:56:46	tomgus1	               in  take 1 . map fst . filter snd $ map pri [n..]
2022-05-03 21:56:59	tomgus1	My bad
2022-05-03 21:57:04	→	ec has joined #haskell
2022-05-03 21:57:29	tomgus1	 https://pastebin.mozilla.org/JJJxvV10
2022-05-03 21:57:29	EvanR	try starting by writing a prime test
2022-05-03 21:57:51	tomgus1	I'll do that
2022-05-03 21:59:24	←	yauhsien has quit (Ping timeout: 248 seconds)
2022-05-03 22:02:30	←	Stotteren has quit (Ping timeout: 246 seconds)
2022-05-03 22:03:07	←	ubert has quit (Remote host closed the connection)
2022-05-03 22:10:55	→	werneta has joined #haskell
2022-05-03 22:15:51	→	yauhsien has joined #haskell
2022-05-03 22:19:20	→	yauhsien_ has joined #haskell
2022-05-03 22:20:20	←	yauhsien has quit (Ping timeout: 260 seconds)
2022-05-03 22:24:36	→	king_gs has joined #haskell
2022-05-03 22:26:17	→	tzh has joined #haskell
2022-05-03 22:30:10	→	justsomeguy has joined #haskell
2022-05-03 22:32:34	←	ec has quit (Ping timeout: 240 seconds)
2022-05-03 22:33:26	←	mjs2600 has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-05-03 22:34:58	←	razetime has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2022-05-03 22:35:24	→	coot has joined #haskell
2022-05-03 22:35:25	→	ec has joined #haskell
2022-05-03 22:39:39	→	alp_ has joined #haskell
2022-05-03 22:41:13	→	CiaoSen has joined #haskell
2022-05-03 22:41:54	→	mjs2600 has joined #haskell
2022-05-03 22:45:07	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-03 22:46:24	→	wroathe has joined #haskell
2022-05-03 22:46:25	←	wroathe has quit (Changing host)
2022-05-03 22:46:25	→	wroathe has joined #haskell
2022-05-03 22:50:06	←	mjs2600 has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-05-03 22:50:58	←	julian has quit (Killed (NickServ (GHOST command used by tos9_!~tos9@python/site-packages/Julian)))
2022-05-03 22:53:51	→	jao has joined #haskell
2022-05-03 22:59:30	→	phma_ has joined #haskell
2022-05-03 23:01:26	←	mbuf has quit (Quit: Leaving)
2022-05-03 23:01:36	←	phma has quit (Ping timeout: 248 seconds)
2022-05-03 23:02:03	←	Feuermagier has quit (Remote host closed the connection)
2022-05-03 23:02:20	→	Feuermagier has joined #haskell
2022-05-03 23:03:03	←	wroathe has quit (Ping timeout: 246 seconds)
2022-05-03 23:05:43	←	Athas has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-05-03 23:06:24	←	jao has quit (Remote host closed the connection)
2022-05-03 23:07:17	→	jao has joined #haskell
2022-05-03 23:10:26	→	merijn has joined #haskell
2022-05-03 23:10:48	→	Athas has joined #haskell
2022-05-03 23:11:25	←	justsomeguy has quit (Ping timeout: 240 seconds)
2022-05-03 23:13:04	ℹ	phma_ is now known as phma
2022-05-03 23:14:39	→	mjs2600 has joined #haskell
2022-05-03 23:15:08	←	merijn has quit (Ping timeout: 248 seconds)
2022-05-03 23:16:14	→	justsomeguy has joined #haskell
2022-05-03 23:21:43	→	acidjnk has joined #haskell
2022-05-03 23:22:48	←	bitmapper has quit (Quit: Connection closed for inactivity)
2022-05-03 23:23:20	←	chele has quit (Remote host closed the connection)
2022-05-03 23:26:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-05-03 23:28:27	→	tromp has joined #haskell
2022-05-03 23:28:49	→	hololeap has joined #haskell
2022-05-03 23:32:36	→	stackdroid18 has joined #haskell
2022-05-03 23:36:51	→	geranim0 has joined #haskell
2022-05-03 23:38:24	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-03 23:40:52	→	tromp has joined #haskell
2022-05-03 23:42:09	←	alp_ has quit (Ping timeout: 248 seconds)
2022-05-03 23:42:57	→	littlebobeep has joined #haskell
2022-05-03 23:44:51	←	king_gs has quit (Remote host closed the connection)
2022-05-03 23:45:09	→	king_gs has joined #haskell
2022-05-03 23:46:07	→	adeldude13 has joined #haskell
2022-05-03 23:46:25	←	CiaoSen has quit (Ping timeout: 248 seconds)
2022-05-03 23:47:49	←	Vajb has quit (Read error: Connection reset by peer)
2022-05-03 23:48:25	←	adeldude_13 has quit (Ping timeout: 250 seconds)
2022-05-03 23:49:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-05-03 23:50:49	→	szkl has joined #haskell
2022-05-03 23:53:51	←	ChaiTRex has quit (Remote host closed the connection)
2022-05-03 23:54:14	→	ChaiTRex has joined #haskell
2022-05-03 23:58:49	←	myme has quit (Ping timeout: 250 seconds)
2022-05-03 23:59:32	←	hgolden has quit (Remote host closed the connection)
2022-05-03 23:59:41	→	myme has joined #haskell
2022-05-03 23:59:56	→	Vajb has joined #haskell
2022-05-03 23:59:57	→	hgolden has joined #haskell
2022-05-04 00:01:03	→	hololeap has joined #haskell
2022-05-04 00:01:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-05-04 00:01:18	→	julian has joined #haskell
2022-05-04 00:02:58	←	stackdroid18 has quit (Quit: Lost terminal)
2022-05-04 00:07:44	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-04 00:07:59	→	gpncarl has joined #haskell
2022-05-04 00:08:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-05-04 00:10:23	→	littlebobeep has joined #haskell
2022-05-04 00:10:50	→	hololeap has joined #haskell
2022-05-04 00:17:14	→	stackdroid18 has joined #haskell
2022-05-04 00:17:55	←	Topsi has quit (Read error: Connection reset by peer)
2022-05-04 00:19:45	→	littlebo1eep has joined #haskell
2022-05-04 00:19:54	→	wootehfoot has joined #haskell
2022-05-04 00:20:45	←	gpncarl has quit (Ping timeout: 260 seconds)
2022-05-04 00:22:24	←	yauhsien_ has quit (Remote host closed the connection)
2022-05-04 00:22:36	←	justsomeguy has quit (Quit: WeeChat 3.4)
2022-05-04 00:23:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-05-04 00:23:37	→	yauhsien has joined #haskell
2022-05-04 00:27:34	←	littlebo1eep has quit (Ping timeout: 240 seconds)
2022-05-04 00:28:49	←	kimjetwav has quit (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
2022-05-04 00:28:55	←	yauhsien has quit (Ping timeout: 260 seconds)
2022-05-04 00:32:11	→	littlebobeep has joined #haskell
2022-05-04 00:34:52	→	anomal has joined #haskell
2022-05-04 00:36:48	→	sweater has joined #haskell
2022-05-04 00:37:22	←	king_gs has quit (Remote host closed the connection)
2022-05-04 00:38:10	←	sweater2 has quit (Read error: Connection reset by peer)
2022-05-04 00:38:41	→	king_gs has joined #haskell
2022-05-04 00:39:16	←	abrantesasf has quit (Remote host closed the connection)
2022-05-04 00:39:26	←	azimut has quit (Remote host closed the connection)
2022-05-04 00:39:53	→	azimut has joined #haskell
2022-05-04 00:39:53	→	Tuplanolla has joined #haskell
2022-05-04 00:44:33	←	eggplantade has quit (Remote host closed the connection)
2022-05-04 00:44:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-05-04 00:45:29	→	littlebobeep has joined #haskell
2022-05-04 00:45:46	→	kaph has joined #haskell
2022-05-04 00:48:50	→	tromp has joined #haskell
2022-05-04 00:50:39	←	kilolympus has quit (Ping timeout: 272 seconds)
2022-05-04 00:52:33	→	Guest27 has joined #haskell
2022-05-04 00:53:56	→	vicfred has joined #haskell
2022-05-04 00:54:25	→	eggplantade has joined #haskell
2022-05-04 00:54:35	→	CiaoSen has joined #haskell
2022-05-04 00:55:46	→	michalz has joined #haskell
2022-05-04 00:57:32	←	mikoto-chan has quit (Ping timeout: 248 seconds)
2022-05-04 00:59:15	←	king_gs has quit (Ping timeout: 260 seconds)
2022-05-04 00:59:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-05-04 00:59:41	→	mikoto-chan has joined #haskell
2022-05-04 00:59:50	←	dcoutts__ has quit (Ping timeout: 260 seconds)
2022-05-04 01:01:05	→	bitmapper has joined #haskell
2022-05-04 01:01:34	←	hololeap has quit (Ping timeout: 240 seconds)
2022-05-04 01:01:58	→	king_gs has joined #haskell
2022-05-04 01:02:02	→	jmdaemon has joined #haskell
2022-05-04 01:03:27	→	littlebobeep has joined #haskell
2022-05-04 01:05:50	→	hololeap has joined #haskell
2022-05-04 01:06:00	←	eggplantade has quit (Remote host closed the connection)
2022-05-04 01:06:08	→	bahamas has joined #haskell
2022-05-04 01:06:26	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-04 01:09:17	→	vorpuni has joined #haskell
2022-05-04 01:11:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-05-04 01:12:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-05-04 01:15:07	→	hololeap has joined #haskell
2022-05-04 01:15:57	←	vicfred has quit (Quit: Leaving)
2022-05-04 01:17:22	→	tromp has joined #haskell
2022-05-04 01:20:04	←	ec has quit (Ping timeout: 240 seconds)
2022-05-04 01:21:33	←	king_gs has quit (Read error: Connection reset by peer)
2022-05-04 01:23:20	→	ec has joined #haskell
2022-05-04 01:23:35	→	x_kuru has joined #haskell
2022-05-04 01:24:23	→	king_gs has joined #haskell
2022-05-04 01:24:48	←	king_gs has quit (Client Quit)
2022-05-04 01:26:00	←	xkuru has quit (Ping timeout: 276 seconds)
2022-05-04 01:26:57	→	littlebobeep has joined #haskell
2022-05-04 01:29:47	←	asm has quit (Changing host)
2022-05-04 01:29:47	→	asm has joined #haskell
2022-05-04 01:30:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-05-04 01:32:13	→	eggplantade has joined #haskell
2022-05-04 01:33:30	→	hololeap has joined #haskell
2022-05-04 01:35:41	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-04 01:37:00	←	bahamas has quit (Ping timeout: 248 seconds)
2022-05-04 01:37:32	←	_ht has quit (Remote host closed the connection)
2022-05-04 01:38:18	→	cigsender has joined #haskell
2022-05-04 01:39:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-05-04 01:42:06	→	littlebobeep has joined #haskell
2022-05-04 01:43:08	→	tromp has joined #haskell
2022-05-04 01:55:05	→	tiferrei has joined #haskell
2022-05-04 01:55:43	←	tiferrei has left #haskell
2022-05-04 01:57:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-05-04 01:59:01	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-04 01:59:12	←	takuan has quit (Remote host closed the connection)
2022-05-04 01:59:54	→	hololeap has joined #haskell
2022-05-04 02:02:46	→	Guest9776 has joined #haskell
2022-05-04 02:03:32	ℹ	Guest9776 is now known as Polo
2022-05-04 02:07:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-05-04 02:10:12	→	hololeap has joined #haskell
2022-05-04 02:12:31	→	tromp has joined #haskell
2022-05-04 02:15:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-05-04 02:18:24	→	hololeap has joined #haskell
2022-05-04 02:18:31	→	odnes has joined #haskell
2022-05-04 02:21:49	←	tomgus1 has quit (Remote host closed the connection)
2022-05-04 02:22:53	→	tomgus1 has joined #haskell
2022-05-04 02:22:57	→	alp_ has joined #haskell
2022-05-04 02:23:18	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-04 02:29:58	←	odnes has quit (Quit: Leaving)
2022-05-04 02:33:24	←	mikoto-chan has quit (Ping timeout: 246 seconds)
2022-05-04 02:33:39	←	nut has quit (Ping timeout: 240 seconds)
2022-05-04 02:36:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-05-04 02:38:59	→	hololeap has joined #haskell
2022-05-04 02:40:09	←	wootehfoot has quit (Quit: pillow time)
2022-05-04 02:40:19	←	szkl has quit (Quit: Connection closed for inactivity)
2022-05-04 02:40:31	←	michalz has quit (Remote host closed the connection)
2022-05-04 02:41:30	←	eggplantade has quit (Remote host closed the connection)
2022-05-04 02:42:37	←	jakalx has left #haskell
2022-05-04 02:51:26	→	nut has joined #haskell
2022-05-04 02:52:57	→	jakalx has joined #haskell
2022-05-04 02:54:32	←	vorpuni has quit (Remote host closed the connection)
2022-05-04 02:59:20	→	dcoutts__ has joined #haskell
2022-05-04 02:59:48	←	adeldude13 has quit (Remote host closed the connection)
2022-05-04 03:02:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-05-04 03:02:53	→	yauhsien has joined #haskell
2022-05-04 03:03:44	→	eggplantade has joined #haskell
2022-05-04 03:06:01	→	hololeap has joined #haskell
2022-05-04 03:07:00	←	yauhsien has quit (Ping timeout: 246 seconds)
2022-05-04 03:13:00	←	CiaoSen has quit (Ping timeout: 248 seconds)
2022-05-04 03:14:29	→	odnes has joined #haskell
2022-05-04 03:18:41	ℹ	irc: disconnected from server
2022-05-06 22:11:49	→	oxide has joined #haskell
2022-05-06 22:11:49	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-05-06 22:11:49	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-05-06 22:11:49	ℹ	Channel #haskell: 702 nicks (1 op, 0 voices, 701 normals)
2022-05-06 22:11:49	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-05-06 22:11:50	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-05-06 22:17:53	←	geekosaur has quit (Quit: Leaving)
2022-05-06 22:18:08	dolio	One plan I'd heard of for this is that lens could contain many sublibraries that could be depended on individually, rather than getting everything or nothing, but could they could all live in the same package.
2022-05-06 22:19:11	→	geekosaur has joined #haskell
2022-05-06 22:19:35	←	waleee has quit (Ping timeout: 260 seconds)
2022-05-06 22:21:30	c_wraith	I suppose if you partition it into things that exist solely to support lenses for types in extra packages, that would be of some use.
2022-05-06 22:21:45	→	waleee has joined #haskell
2022-05-06 22:22:58	c_wraith	You could look at it as a way to address orphan instances.  sublibraries that don't have the orphan instances if you don't want to pull in the dependencies, then one additional sublibrary for each dependency you want to add instances for.
2022-05-06 22:23:14	c_wraith	They're kind of orphan, but kind of not.
2022-05-06 22:24:08	←	phma has quit (Read error: Connection reset by peer)
2022-05-06 22:24:49	c_wraith	though you wouldn't want an extra import when you do want the extra instances, so that might be a giant pain.
2022-05-06 22:25:08	→	phma has joined #haskell
2022-05-06 22:28:01	←	alp_ has quit (Ping timeout: 248 seconds)
2022-05-06 22:29:04	←	stackdroid18 has quit (Quit: hasta la vista... tchau!)
2022-05-06 22:30:48	→	caef^ has joined #haskell
2022-05-06 22:31:05	→	eggplantade has joined #haskell
2022-05-06 22:33:52	→	inversed has joined #haskell
2022-05-06 22:34:12	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-06 22:36:59	←	inversed_ has quit (Ping timeout: 272 seconds)
2022-05-06 22:38:41	←	raym has quit (Ping timeout: 248 seconds)
2022-05-06 22:41:34	→	moonsheep has joined #haskell
2022-05-06 22:42:27	←	cyphase has quit (Ping timeout: 250 seconds)
2022-05-06 22:43:01	→	cyphase has joined #haskell
2022-05-06 22:44:19	←	odnes has quit (Ping timeout: 240 seconds)
2022-05-06 22:47:07	maerwald	automatic partial builds... and cabal drops all the dependencies it doesn't need :p
2022-05-06 22:47:19	→	odnes has joined #haskell
2022-05-06 22:47:56	→	Polo has joined #haskell
2022-05-06 22:50:34	dolio	c_wraith: I think part of the point was that there was already some partitioning in hackage, like `lens-X` such that if you depended on all of them,  you'd get approximately all of lens. But it was a bunch of duplicated effort.
2022-05-06 22:51:13	dolio	And instead of two dozen (or whatever) lens-X packages, it could be lens:X.
2022-05-06 22:51:43	Franciman	when you escape haskell's ivory tower, writing interpreters becomes a breeze
2022-05-06 22:52:29	Franciman	it all becomes so clear
2022-05-06 22:53:35	←	waleee has quit (Ping timeout: 256 seconds)
2022-05-06 22:56:49	geekosaur	Franciman, do you have anything cogent to say or are you just randomly popping up to piss on Haskell in a Haskell channel?
2022-05-06 22:57:23	Franciman	uh yes. Once you start thinking about the memory layout and management of the interpreter
2022-05-06 22:57:27	←	moonsheep has quit (Quit: ERC 5.4 (IRC client for GNU Emacs 28.1))
2022-05-06 22:57:29	Franciman	every piece starts fitting correctly
2022-05-06 22:57:36	Franciman	sorry i was distracted on soccer
2022-05-06 22:57:52	Franciman	so basically your interpreter becomes much more inspectable
2022-05-06 22:58:03	Franciman	and you can provide very fine grained statistics and debugging things
2022-05-06 22:58:07	Franciman	in haskell it proved REALLY HARD
2022-05-06 22:58:09	Franciman	same in sml, really
2022-05-06 22:58:11	geekosaur	again, is this cogent or is it just random pissing?
2022-05-06 22:58:19	hololeap	haskell is like the fire hydrant on a dog's morning walk
2022-05-06 22:58:45	Franciman	geekosaur: it is cogent for me. 
2022-05-06 22:58:53	Franciman	getting predictable performances is IMPORTANT
2022-05-06 22:58:55	Franciman	for me
2022-05-06 22:59:03	geekosaur	I mean, you keep doing this. saying the same things. randomly popping up apparently because nobody's talking about your world-saving interpreter
2022-05-06 22:59:12	Franciman	nono sir
2022-05-06 22:59:15	Franciman	i'm not saving anybody
2022-05-06 22:59:21	Franciman	haskell is the best functional programming language around
2022-05-06 22:59:31	Franciman	i'm just saying my experience with it writing an interpreter
2022-05-06 22:59:37	Franciman	my language is not gonna be better than haskell, NEVER
2022-05-06 22:59:39	Franciman	so please
2022-05-06 22:59:48	Polo	Ay im pretty chill just sayin
2022-05-06 23:00:44	←	odnes has quit (Ping timeout: 248 seconds)
2022-05-06 23:01:18	Franciman	my takeaway so far was that ghc produces much better code when you don't question too much how things are evaluated, in what order etc
2022-05-06 23:01:40	Franciman	an this is great. Getting the best performances when you don't think about how to get them, but just work declaratively is RAD
2022-05-06 23:02:05	→	azimut has joined #haskell
2022-05-06 23:02:06	→	odnes has joined #haskell
2022-05-06 23:02:37	Franciman	now the question is: is it harder to write an interpreter in C from scratch or to learn to productively tweak with stg-machine?
2022-05-06 23:03:04	Franciman	o far my takeaway was: better with C, it took less
2022-05-06 23:03:43	→	dagit has joined #haskell
2022-05-06 23:04:05	→	econo has joined #haskell
2022-05-06 23:04:19	Franciman	apparently what laziness shines at is forcing you to think declaratively, equationally
2022-05-06 23:04:30	Franciman	and avoiding shitty hacks
2022-05-06 23:04:39	Franciman	it just says: don't worry, i'mma take care of it
2022-05-06 23:05:04	Franciman	something else which really shines at is forcing the separation of side effects, if you start using unsafePerformIO
2022-05-06 23:05:15	Franciman	that doesn't respect referential trasparency, you get unpredictable stuff out
2022-05-06 23:05:27	Franciman	while with eager evaluation it's much easier to sneak side effects in
2022-05-06 23:06:05	Franciman	would i use haskell for an interpreter? Nope
2022-05-06 23:06:29	Franciman	i found myself too in need of tweaking even the lowest bits of the evaluation process
2022-05-06 23:07:19	Franciman	because i found that i needed to make things work in a very specific way, to get good introspection and performances together
2022-05-06 23:07:38	Franciman	and ghc's runtime just want to naturally work in a different way
2022-05-06 23:08:48	Franciman	you want a cogent example you said. I at first used an environment based interpreter
2022-05-06 23:08:59	Franciman	but i wanted to convert it to a stack based one, with a manually managed stack
2022-05-06 23:09:16	Franciman	the output was both horrendous and slow
2022-05-06 23:09:23	Franciman	i haven't yet succeeded at doing it
2022-05-06 23:09:26	monochrom	geekosaur: Self-assessments of "do you understand this?" "is this relevant to the rest of us?" "is your writing clear and easy to follow?" "are you correct?" are clearly all doomed, of course everyone thinks they're right.
2022-05-06 23:10:02	Franciman	how would you specify the code for your lambda calculus with call by value in Haskell?
2022-05-06 23:10:07	Franciman	what strategy would you use?
2022-05-06 23:11:13	monochrom	At school there is always a minority of 1st-year students who request for re-grade by starting with "my code works but it failed your test cases"
2022-05-06 23:11:19	sclv	personally i would google and read decades of prior relevant research
2022-05-06 23:11:37	Franciman	thanks sclv 
2022-05-06 23:11:40	Franciman	i didn't think about it
2022-05-06 23:14:09	Franciman	lols honestly
2022-05-06 23:14:20	Franciman	i think you have a bit of a preconception with what i say
2022-05-06 23:15:26	Franciman	if i just wanted to talk shit about haskell, i would just say Clojure > Haskell
2022-05-06 23:15:39	Franciman	and things like that. I'm trying to get in good relationship with laziness
2022-05-06 23:15:56	Franciman	sorry if i seem too assertive, maybe that's it
2022-05-06 23:17:32	monochrom	You have found a way to implement an efficiency interpreter. Now you just need to also find a way to efficiently say it.
2022-05-06 23:17:40	→	alp_ has joined #haskell
2022-05-06 23:18:24	Franciman	but i'd like to write it in haskell :(
2022-05-06 23:18:27	Franciman	but i can't
2022-05-06 23:18:34	→	tfeb has joined #haskell
2022-05-06 23:18:42	monochrom	It takes only two sentences. Using an ADT in a high-level language for stack is inefficient. Using a low-level language to access memory more directly to build the stack is more efficient. THE END.
2022-05-06 23:18:56	Franciman	most of the research i found was about doing kind of optimisations that require low level tweaks
2022-05-06 23:18:57	←	caef^ has quit (Remote host closed the connection)
2022-05-06 23:19:11	Franciman	like manually managing a stack where you intersperse activtion records
2022-05-06 23:19:18	Franciman	and arguments to functions
2022-05-06 23:20:52	→	tromp has joined #haskell
2022-05-06 23:21:46	Franciman	uhm monochrom but an unboxed representation wouldn't work?
2022-05-06 23:22:47	monochrom	I am showing you how to use just two sentences to replace your I don't know 100 sentences?
2022-05-06 23:23:04	←	mbuf has quit (Quit: Leaving)
2022-05-06 23:23:09	monochrom	"Now you just need to also find a way to efficiently say it."
2022-05-06 23:23:21	Franciman	ah ok thank you
2022-05-06 23:23:28	←	Natch has quit (Read error: Connection reset by peer)
2022-05-06 23:23:33	monochrom	If it is still not clear: Efficient communication with other people.
2022-05-06 23:23:45	Franciman	yes, i will pay more attention
2022-05-06 23:23:49	Franciman	sorry thanks
2022-05-06 23:24:25	←	Polo has quit (Quit: Textual IRC Client: www.textualapp.com)
2022-05-06 23:28:30	→	raym has joined #haskell
2022-05-06 23:28:44	→	bahamas has joined #haskell
2022-05-06 23:28:52	←	pie_ has quit ()
2022-05-06 23:29:29	→	Natch has joined #haskell
2022-05-06 23:29:30	→	pie_ has joined #haskell
2022-05-06 23:29:50	→	stackdroid18 has joined #haskell
2022-05-06 23:29:51	←	raehik has quit (Ping timeout: 256 seconds)
2022-05-06 23:30:13	←	nurupo has quit (Quit: nurupo.ga)
2022-05-06 23:30:27	→	nurupo has joined #haskell
2022-05-06 23:30:42	←	tfeb has quit (Remote host closed the connection)
2022-05-06 23:32:44	←	notzmv has quit (Ping timeout: 248 seconds)
2022-05-06 23:33:05	←	alp_ has quit (Ping timeout: 248 seconds)
2022-05-06 23:33:19	sm	Franciman, I can relate to refreshment you feel when switching from one language/paradigm to another after some time.. you really enjoy the things that are easier in the the other
2022-05-06 23:33:24	sm	there's a bit of a honeymoon I find
2022-05-06 23:35:07	→	kenran has joined #haskell
2022-05-06 23:35:15	←	kenran has quit (Client Quit)
2022-05-06 23:35:25	sm	there's also often a big effect from having just the done same thing elsewhere.. everything is much clearer in your mind
2022-05-06 23:35:55	sm	but I like those experience reports/comparisons of the same task across in multiple languages/paradigms
2022-05-06 23:35:59	←	gawen has quit (Ping timeout: 240 seconds)
2022-05-06 23:36:01	maerwald	yeah, working on vscode-haskell gave me a refresher why javascript is a nightmare :D
2022-05-06 23:36:11	sm	heh
2022-05-06 23:36:16	→	kenran has joined #haskell
2022-05-06 23:36:48	→	werneta has joined #haskell
2022-05-06 23:36:57	sm	I really enjoyed doing some scripting python lately. So much less ceremony! Delightful! It did get a bit tedious making it robust, fairly soon
2022-05-06 23:37:06	geekosaur	still, there is that and there is whining about escaping the ivory tower
2022-05-06 23:37:43	monochrom	The lesson holds for all high-level languages.
2022-05-06 23:38:01	monochrom	All the way from Java to Clojure. Not just Haskell. Not just lazy evalution.
2022-05-06 23:38:04	←	odnes has quit (Ping timeout: 248 seconds)
2022-05-06 23:38:46	→	echoone has joined #haskell
2022-05-06 23:38:56	monochrom	But I guess this is just another facet of what sclv said about prior work.
2022-05-06 23:39:39	monochrom	If you never look at prior work, you both don't know known lessons and don't know that it is not just Haskell and it is not just ivory tower.
2022-05-06 23:41:25	echoone	https://sodocumentation.net/haskell/topic/4525/data-aeson---json-in-haskell <-- I was trying this aeson tutorial, but when I decode I get Nothing instead of Just. I'm not sure what I am doing wrong here.
2022-05-06 23:41:45	monochrom	Show actual code?
2022-05-06 23:42:16	monochrom	@where paste
2022-05-06 23:42:16	lambdabot	Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
2022-05-06 23:42:21	carbolymer	echoone: you might probably need a type annotation to let decode know that you're decoding into  `Maybe Person`
2022-05-06 23:42:39	maerwald	echoone: try `eitherDecode`
2022-05-06 23:43:14	monochrom	Or another blog that posts untested code?
2022-05-06 23:43:31	echoone	Ah, the type annotation helped.
2022-05-06 23:43:52	⚡	carbolymer scores
2022-05-06 23:44:08	carbolymer	we should have leaderboard in helping ;-]
2022-05-06 23:44:12	→	tfeb has joined #haskell
2022-05-06 23:44:23	maerwald	please no... even more DMs
2022-05-06 23:44:57	carbolymer	;]
2022-05-06 23:45:07	monochrom	Oh Haha "SO Documentation" "Based on the documentation made by Stack Overflow contributors"
2022-05-06 23:45:19	carbolymer	lol
2022-05-06 23:45:23	Hecate	hey folks
2022-05-06 23:45:26	carbolymer	also why this looks like ripcode
2022-05-06 23:45:28	carbolymer	but blue
2022-05-06 23:45:30	monochrom	So yes, taken out of context.
2022-05-06 23:45:32	Hecate	except Markdown support, what's your Haddock christmas list?
2022-05-06 23:45:43	carbolymer	Asciidoc support
2022-05-06 23:45:45	→	dsrt^ has joined #haskell
2022-05-06 23:45:46	maerwald	Hecate: this one thing there with CPP
2022-05-06 23:45:49	maerwald	what was it
2022-05-06 23:45:56	Hecate	maerwald: oh yes I stumbled across your ticket recently
2022-05-06 23:45:57	maerwald	https://github.com/haskell/haddock/issues/1440
2022-05-06 23:46:22	Hecate	maerwald: wouldn't this be fixed by Haddock reading the documentation from .hi files directly?
2022-05-06 23:46:27	Hecate	instead of parsing the fix?
2022-05-06 23:46:28	Hecate	*file
2022-05-06 23:46:29	Hecate	damnit
2022-05-06 23:46:30	→	jmdaemon has joined #haskell
2022-05-06 23:47:28	maerwald	not sure
2022-05-06 23:47:45	←	Techcable has quit (Ping timeout: 276 seconds)
2022-05-06 23:48:05	maerwald	there was a workaround which somewhat works
2022-05-06 23:48:07	maerwald	I forgot
2022-05-06 23:48:25	→	gawen has joined #haskell
2022-05-06 23:48:46	maerwald	I think covid broke my memory, so yeah
2022-05-06 23:48:49	monochrom	No worries, you wrote down the workarounds in that ticket too :)
2022-05-06 23:49:02	maerwald	I think there was another one with a haddock flag
2022-05-06 23:49:07	echoone	Here's another example aeson code that isn't working for me: https://paste.tomsmeding.com/uSWnLLi7
2022-05-06 23:49:08	monochrom	Ah
2022-05-06 23:49:16	echoone	testDecode gives me Nothing
2022-05-06 23:49:23	carbolymer	maerwald: quite probable, I've read somewhere that someone lost their sense of humour after covid vaccine...
2022-05-06 23:49:36	maerwald	something along the lines of NO_HOME something
2022-05-06 23:49:55	maerwald	I'm being overly specific
2022-05-06 23:50:04	monochrom	I wonder if you should change _code to code or change code to _code
2022-05-06 23:50:25	dmj`	echoone: ^ 
2022-05-06 23:50:37	echoone	Ah, it's the underscore. Crap. I didn't notice that for some reason.
2022-05-06 23:50:40	dmj`	the underscore is causing the failure
2022-05-06 23:50:48	echoone	Isn't there an option to ignore the underscore?
2022-05-06 23:51:12	dmj`	genericParseJSON defaultOptions { fieldLabelModifier = drop 1 }
2022-05-06 23:51:41	echoone	Yeah, let me try that.
2022-05-06 23:53:19	maerwald	{-# OPTIONS_HADDOCK not-home #-}
2022-05-06 23:53:58	dmj`	*suspense*
2022-05-06 23:54:02	←	jakalx has left #haskell (Error from remote client)
2022-05-06 23:54:46	→	jakalx has joined #haskell
2022-05-06 23:56:13	maerwald	hm no, that does nothing for me in the CPP case
2022-05-06 23:56:50	echoone	It worked. Thanks dmj`
2022-05-07 00:00:34	←	hololeap has quit (Ping timeout: 240 seconds)
2022-05-07 00:04:39	←	tfeb has quit (Ping timeout: 276 seconds)
2022-05-07 00:04:52	→	hololeap has joined #haskell
2022-05-07 00:05:03	dmj`	echoone: nice
2022-05-07 00:06:53	←	eggplantade has quit (Remote host closed the connection)
2022-05-07 00:11:12	→	king_gs has joined #haskell
2022-05-07 00:11:28	←	echoone has quit (Quit: Client closed)
2022-05-07 00:12:31	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-07 00:12:45	←	Kaiepi has quit (Ping timeout: 260 seconds)
2022-05-07 00:14:15	→	Kaiepi has joined #haskell
2022-05-07 00:14:44	→	Techcable has joined #haskell
2022-05-07 00:18:38	←	mjrosenb has quit (Ping timeout: 260 seconds)
2022-05-07 00:20:17	→	tromp has joined #haskell
2022-05-07 00:24:55	→	mjrosenb has joined #haskell
2022-05-07 00:25:39	→	waleee has joined #haskell
2022-05-07 00:26:14	→	Henson has joined #haskell
2022-05-07 00:27:37	Henson	if I deepseq something more than once, does it stop traversing the tree of thunks when it encounters one that has already been evaluated?  For example, if I have a data structure that is expensive to deepseq and I call deepseq on it more than once, do I only pay the evaluation cost once?
2022-05-07 00:28:59	maerwald	I think it would at least traverse the spine twice https://hackage.haskell.org/package/deepseq-1.4.7.0/docs/src/Control.DeepSeq.html#line-541
2022-05-07 00:29:28	Henson	I have a complex algorithm that is having a memory leak because large data is being associated with some of the data that is being put in.  For some reason that I can't unravel, this data is not being garbage collected due to unevaluated thunks prevent garbage collection.  Deepseqing the data structure makes it work, but I can't figure out where the problem is occurring and don't know if I...
2022-05-07 00:29:33	→	alp_ has joined #haskell
2022-05-07 00:29:42	maerwald	also remember reading that in Simon Marlow's concurrency book
2022-05-07 00:29:52	Henson	should give up an be satisfied with having a deepseq in my algorithm.  Somebody told me a couple months ago that you shouldn't use deepseq in production code.
2022-05-07 00:30:02	maerwald	huh? why not
2022-05-07 00:30:28	maerwald	I know a production use case for it. Without it, the backend wouldn't be able to correctly boot.
2022-05-07 00:30:40	→	malinoskj290645 has joined #haskell
2022-05-07 00:30:50	→	Guest6593 has joined #haskell
2022-05-07 00:31:13	geekosaur	unevaluated thunks /per se/ shouldn't prevent gc
2022-05-07 00:31:29	Henson	maerwald: so, it'll traverse the spine of any lists, but won't descend into the items on the list if they're already evaluated?
2022-05-07 00:32:00	geekosaur	unless those thunks are themselves holding within them references perhaps, but I'd think then they wouldn't be thunks
2022-05-07 00:32:08	monochrom	I am a different somebody and I tell you that all sentences of the form "___ in production code" are sus.
2022-05-07 00:32:24	Henson	well, something is going on that is preventing things from being garbage collected, and despite putting bangs and seqs and maps of seqs all over the place, I can't figure out where the problem is.
2022-05-07 00:33:11	monochrom	Aliasing blocks GC. Same as in Java.
2022-05-07 00:33:12	geekosaur	also it is possible to have something whose outer constructor has been evaluated but an inner one hasn't, so deepsequ seems like it would be useless if it didn't descend into those
2022-05-07 00:34:24	Henson	geekosaur: right, that's true.  The algorithm is iterative, with only a little of the data structure changing each time.  So if I deepseq on every iteration, then it has to traverse the whole data structure every time.
2022-05-07 00:34:38	monochrom	Example.  "main = let xs=[0..n] in print xs" is O(1) space.  "main = let xs=[0..n] in print xs >> print (length xs)" is Ω(n) space.
2022-05-07 00:35:20	monochrom	The latter has nothing to do with laziness. It holds in SML too.
2022-05-07 00:35:35	geekosaur	right
2022-05-07 00:35:44	monochrom	The former though is helped, not hurt, by laziness. The former is Ω(n) space in SML.
2022-05-07 00:35:53	Henson	I tried using various heap profiling options to try to figure out where the problem is, but they're not very helpful.  The problem is that the memory is being allocated and freed in C++, so the memory profiling doesn't clearly indicate who the culprit is, as Haskell only knows about the foreign pointers (which are small) and not the data they point to (which is large)
2022-05-07 00:35:58	ℹ	Guest6593 is now known as Polo
2022-05-07 00:36:22	monochrom	There are also examples doing the opposite, laziness causing more space than eagerness.
2022-05-07 00:36:40	monochrom	The conclusion is that both sentences "laziness blocks GC" and "eagerness blocks GC" are sus.
2022-05-07 00:36:57	monochrom	The meta-conclusion is that all Internet hearsays are sus.
2022-05-07 00:37:12	⚡	Henson chuckles
2022-05-07 00:37:17	monochrom	The Internet is full of dimwit false dichotomies.
2022-05-07 00:37:59	monochrom	As a final example just look at how they say "big-O is worst case, big-Omega is best case, big-Theta is average case".
2022-05-07 00:38:29	Henson	does anybody have any suggestions on tracking down thunk chains?  I imagine I just need to put a bang on one or two lines, but which line is the question.
2022-05-07 00:38:45	→	eggplantade has joined #haskell
2022-05-07 00:40:16	→	moonsheep has joined #haskell
2022-05-07 00:41:32	Henson	I'm just progressively disabling the things that are being deepseq'd, to see if I can pinpoint which part of the thunk tree is causing the problem
2022-05-07 00:41:37	←	mc47 has quit (Remote host closed the connection)
2022-05-07 00:43:45	←	ec has quit (Quit: ec)
2022-05-07 00:45:04	←	hololeap has quit (Ping timeout: 240 seconds)
2022-05-07 00:48:06	←	eggplantade has quit (Remote host closed the connection)
2022-05-07 00:49:40	→	hololeap has joined #haskell
2022-05-07 00:50:03	←	hololeap has quit (Client Quit)
2022-05-07 00:51:21	←	alp_ has quit (Ping timeout: 256 seconds)
2022-05-07 00:52:45	Henson	is there a function I can use to evaluate only the spine of a list?
2022-05-07 00:53:17	monochrom	length :)
2022-05-07 00:55:28	Henson	monochrom: but in pure core that length needs to be used somewhere for it to actually occur, right?  Or can I use seq to cause the length to be evaluated without actually using it?  Like l = length foo; l `seq` real_calculation
2022-05-07 00:55:55	Henson	or maybe for the second part data = l `seq` real_calculation
2022-05-07 00:56:26	⚡	Henson plays with :sprint
2022-05-07 00:57:06	→	odnes has joined #haskell
2022-05-07 00:58:17	monochrom	You are under too much influence from Internet false dichotomies. Either that, or you also wish they were true because they are so simple and comforting (until refuted by actual code).
2022-05-07 00:58:50	monochrom	Premature evaluating of an ADT spine causes more space, not less. At least in most cases.
2022-05-07 00:59:49	←	king_gs has quit (Ping timeout: 250 seconds)
2022-05-07 00:59:58	Henson	monochrom: I'm just trying different ideas to track down what it is that will cause my algorithm to stop bloating
2022-05-07 01:00:02	monochrom	Here is the usual scenerio of laziness causing more space. An ADT must not be involved. Instead, a small footprint type such as Int has to be involved. You try to compute 1+2+3+...+n but you write a lazy foldl.
2022-05-07 01:01:02	energizer	i've got a monoid with the property that for some f, f (f x) = x. is there a type class for that?
2022-05-07 01:01:23	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-07 01:02:01	monochrom	No. But it's commonly known as an involution, provided f ≠ id. Also, not just for monoids.
2022-05-07 01:02:36	monochrom	Every non-id self-inverse function is called an involution. No other constraint.
2022-05-07 01:03:22	energizer	why isn't there a type class Involution?
2022-05-07 01:03:35	monochrom	Not enough interest?
2022-05-07 01:03:44	tdammers	no practical use?
2022-05-07 01:04:02	tdammers	this would be a typeclass with no methods, only laws
2022-05-07 01:04:21	→	king_gs has joined #haskell
2022-05-07 01:04:33	monochrom	There is no drive in giving all involutions of the world the same name.
2022-05-07 01:05:13	monochrom	Plus the harsh reality that there can be a million distinct involutions for the same type.
2022-05-07 01:05:36	→	bliminse has joined #haskell
2022-05-07 01:05:38	monochrom	Every mathematical definition, no matter how useful, does not need a class.
2022-05-07 01:05:39	energizer	the same is true of + isnt it?
2022-05-07 01:05:59	energizer	or *
2022-05-07 01:06:10	maerwald	Henson: https://play-haskell.tomsmeding.com/play/paste/UL3wRxWd/1)
2022-05-07 01:06:19	monochrom	Is it? Ring axioms are much more constraining.
2022-05-07 01:06:53	energizer	i guess this is why idris has "named instances"
2022-05-07 01:07:14	monochrom	For each type there are usually fairly few ways to make a ring, and by the time you discard the trolling ones, there is usually just 0 or 1 way.
2022-05-07 01:07:34	monochrom	But there can still be a ton of actually useful involutions.
2022-05-07 01:07:35	→	notzmv has joined #haskell
2022-05-07 01:08:43	ℹ	irc: disconnected from server
2022-05-07 21:02:54	→	oxide has joined #haskell
2022-05-07 21:02:54	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-05-07 21:02:54	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-05-07 21:02:54	ℹ	Channel #haskell: 703 nicks (1 op, 0 voices, 702 normals)
2022-05-07 21:02:54	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-05-07 21:02:54	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-05-07 21:03:55	→	justsomeguy has joined #haskell
2022-05-07 21:04:28	→	d3adb5 has joined #haskell
2022-05-07 21:06:48	→	nate1 has joined #haskell
2022-05-07 21:08:09	→	yauhsien has joined #haskell
2022-05-07 21:10:35	→	coot has joined #haskell
2022-05-07 21:14:52	←	yauhsien has quit (Remote host closed the connection)
2022-05-07 21:15:52	→	ccntrq has joined #haskell
2022-05-07 21:16:16	→	yauhsien has joined #haskell
2022-05-07 21:20:26	→	bontaq has joined #haskell
2022-05-07 21:21:36	←	yauhsien has quit (Ping timeout: 260 seconds)
2022-05-07 21:22:04	←	jgeerds has quit (Ping timeout: 248 seconds)
2022-05-07 21:23:18	→	eggplantade has joined #haskell
2022-05-07 21:24:32	→	agumonke` has joined #haskell
2022-05-07 21:25:24	←	agumonkey has quit (Ping timeout: 240 seconds)
2022-05-07 21:30:06	←	hsiktas[m] has quit (Quit: You have been kicked for being idle)
2022-05-07 21:35:29	←	Null_A has quit ()
2022-05-07 21:36:54	→	Kaiepi has joined #haskell
2022-05-07 21:37:35	→	vicfred has joined #haskell
2022-05-07 21:38:25	←	justsomeguy has quit (Ping timeout: 260 seconds)
2022-05-07 21:42:38	→	jollygood2 has joined #haskell
2022-05-07 21:46:04	→	justsomeguy has joined #haskell
2022-05-07 21:50:25	→	wroathe has joined #haskell
2022-05-07 21:50:25	←	wroathe has quit (Changing host)
2022-05-07 21:50:25	→	wroathe has joined #haskell
2022-05-07 21:50:52	←	ubert has quit (Ping timeout: 248 seconds)
2022-05-07 21:50:52	ℹ	ub is now known as ubert
2022-05-07 21:53:41	→	Guest47 has joined #haskell
2022-05-07 21:54:49	←	Guest47 has quit (Client Quit)
2022-05-07 22:02:06	←	xff0x has quit (Read error: Connection reset by peer)
2022-05-07 22:11:49	←	dolio has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-05-07 22:14:14	→	raehik has joined #haskell
2022-05-07 22:15:20	→	econo has joined #haskell
2022-05-07 22:17:11	→	dolio has joined #haskell
2022-05-07 22:29:24	→	shriekingnoise has joined #haskell
2022-05-07 22:29:50	←	notzmv has quit (Ping timeout: 250 seconds)
2022-05-07 22:30:34	→	bahamas has joined #haskell
2022-05-07 22:33:32	←	raehik has quit (Ping timeout: 248 seconds)
2022-05-07 22:36:06	→	raehik has joined #haskell
2022-05-07 22:38:07	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-07 22:42:26	→	mbuf has joined #haskell
2022-05-07 22:46:47	→	nctcf^ has joined #haskell
2022-05-07 22:47:28	←	nate1 has quit (Ping timeout: 260 seconds)
2022-05-07 22:47:59	←	MironZ has quit (Read error: Connection reset by peer)
2022-05-07 22:48:37	→	MironZ has joined #haskell
2022-05-07 22:49:04	→	tzh has joined #haskell
2022-05-07 22:49:40	→	melas has joined #haskell
2022-05-07 22:53:24	←	raym has quit (Read error: Connection reset by peer)
2022-05-07 22:54:07	→	raym has joined #haskell
2022-05-07 22:55:45	→	chomwitt has joined #haskell
2022-05-07 22:56:03	←	nctcf^ has quit (Ping timeout: 260 seconds)
2022-05-07 22:56:32	←	ccntrq has quit (Quit: ccntrq)
2022-05-07 23:03:50	→	yauhsien has joined #haskell
2022-05-07 23:04:28	←	mbuf has quit (Quit: Leaving)
2022-05-07 23:09:09	←	yauhsien has quit (Ping timeout: 276 seconds)
2022-05-07 23:14:21	←	raehik has quit (Ping timeout: 276 seconds)
2022-05-07 23:14:31	→	stevenxl has joined #haskell
2022-05-07 23:18:14	maerwald	mixing .hsc files with `#include "Foo.hs"` seems to not work
2022-05-07 23:18:41	Bulby[m]	having fun with ffi as well?
2022-05-07 23:19:23	←	mixfix41 has quit (Ping timeout: 260 seconds)
2022-05-07 23:19:55	←	wroathe has quit (Ping timeout: 260 seconds)
2022-05-07 23:24:29	c_wraith	that's interesting.  .hsc is weird enough that I guess it just wasn't intended for that to work.
2022-05-07 23:25:08	c_wraith	... seriously, the compilation model for .hsc files makes me boggle. They're translated to C programs that write haskell source?  what?
2022-05-07 23:26:06	←	irfan has quit (Quit: leaving)
2022-05-07 23:26:43	c_wraith	I guess #include in a .hsc file includes stuff into the generated C source
2022-05-07 23:26:53	→	raehik has joined #haskell
2022-05-07 23:26:56	←	Kaiepi has quit (Remote host closed the connection)
2022-05-07 23:26:57	c_wraith	which is why you can't do it with haskell source
2022-05-07 23:27:27	maerwald	I'll add that to the list of things I don't want to understand (right after simplified subsumption)
2022-05-07 23:27:34	→	Kaiepi has joined #haskell
2022-05-07 23:28:42	c_wraith	I think the person in that whole thread making the most sense is the one who says the problem is all the type aliases with foralls in them.
2022-05-07 23:28:47	←	justsomeguy has quit (Ping timeout: 240 seconds)
2022-05-07 23:28:53	c_wraith	I've never liked them.
2022-05-07 23:29:08	c_wraith	and simplified subsumption makes them really fiddly and tedious, too
2022-05-07 23:31:07	→	tromp has joined #haskell
2022-05-07 23:32:55	←	kaph has quit (Read error: Connection reset by peer)
2022-05-07 23:33:20	←	mikoto-chan has quit (Quit: mikoto-chan)
2022-05-07 23:33:23	maerwald	also... it's funny that cpp seems to throw up if you have `foo' :: CPP_VAR -> Bool`
2022-05-07 23:33:31	maerwald	you'll have to add a newline before CPP_VAR
2022-05-07 23:33:33	c_wraith	I'm amused that lens has a bunch of type aliases with foralls in them - and then does a bunch of tricks to never ever use them in a negative position, things like ALens and Optic that don't hide type variables) That avoids the worst issues.
2022-05-07 23:33:35	→	mikoto-chan has joined #haskell
2022-05-07 23:33:57	albet70	could someone tell me how to write a simple DAG?
2022-05-07 23:34:07	←	bahamas has quit (Ping timeout: 260 seconds)
2022-05-07 23:34:09	c_wraith	that's a CPP thing, yes.  it is intended to work on C code, where ' is only valid in strings or for writing char literals
2022-05-07 23:34:37	c_wraith	CPP actually breaks if your source doesn't look like C in certain ways.  that's one of them.
2022-05-07 23:35:31	monochrom	:(
2022-05-07 23:35:49	monochrom	Err, missed a pun opportunity!
2022-05-07 23:35:51	monochrom	:'(
2022-05-07 23:35:57	monochrom	Better. :)
2022-05-07 23:36:23	c_wraith	albet70: like.. in what sense? do you mean what is an appropriate datatype?
2022-05-07 23:36:39	maerwald	bro, use pointers
2022-05-07 23:37:28	albet70	"🟢 c_wraith :albet70: like.. in what sense? do you mean what is an appropriate datatype?", more like in an action workflow
2022-05-07 23:37:50	→	Guest47 has joined #haskell
2022-05-07 23:37:57	c_wraith	that doesn't sound simple at all
2022-05-07 23:38:00	→	littlebobeep has joined #haskell
2022-05-07 23:38:06	←	raehik has quit (Ping timeout: 252 seconds)
2022-05-07 23:38:14	albet70	in datatype, it's jut a Tree type, right
2022-05-07 23:38:47	c_wraith	Typically, though that might change depending on what you want to do with it.
2022-05-07 23:38:52	monochrom	I would just use any of the graph libraries. GHC comes with a simple one.
2022-05-07 23:39:04	c_wraith	like, using a tree as a DAG has real flaws if you want to modify it
2022-05-07 23:39:44	c_wraith	On the other hand, if you've got a one-shot construction and then only read from it, a tree can work fine
2022-05-07 23:39:47	albet70	"c_wraith :like, using a tree as a DAG has real flaws if you want to modify it", then what's the common way
2022-05-07 23:40:01	c_wraith	as monochrom said, any of the graph libraries.
2022-05-07 23:40:19	c_wraith	Data.Graph isn't actually bad as a starting point
2022-05-07 23:41:10	→	pavonia has joined #haskell
2022-05-07 23:41:36	[exa]	albet70: what's the purpose for the dag btw? do you need any annotations on the structure?
2022-05-07 23:41:57	→	jao has joined #haskell
2022-05-07 23:42:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-05-07 23:43:17	jollygood2	'
2022-05-07 23:43:19	→	littlebobeep has joined #haskell
2022-05-07 23:43:46	albet70	"🟢 [exa] :albet70: what's the purpose for the dag btw? do you need any annotations on the structure?", for example, there's a script A, when A is done, then run script B, if B failed, then run script D, otherwise run script C
2022-05-07 23:43:52	albet70	etc...
2022-05-07 23:43:58	←	Guest47 has quit (Quit: Textual IRC Client: www.textualapp.com)
2022-05-07 23:44:50	albet70	but this seems like a bash issue...
2022-05-07 23:45:19	→	seydar has joined #haskell
2022-05-07 23:46:20	albet70	or I misunderstood the concept of DAG
2022-05-07 23:48:00	→	abiss27 has joined #haskell
2022-05-07 23:48:39	←	Kaiepi has quit (Read error: Connection reset by peer)
2022-05-07 23:49:12	→	Kaiepi has joined #haskell
2022-05-07 23:50:57	c_wraith	nah, you definitely are creating a DAG.  And then you want a topological sort of the graph
2022-05-07 23:51:27	c_wraith	Data.Graph (in containers) can do exactly this
2022-05-07 23:52:17	c_wraith	(it's a bit more work if you want to run tasks concurrently, but leave that complication for later)
2022-05-07 23:56:56	albet70	I worked at a robot company, they provide a graphic program tool, I suddenly thought that a DAG
2022-05-07 23:57:34	albet70	aldebaran, a robot lab, NAO and Pepper
2022-05-07 23:59:49	albet70	they make a graphic module which can be linked each other, every module is class, which has init, start, stop, input, output those methods, combine those module and run it by sequence
2022-05-08 00:01:33	←	stackdroid18 has quit (Quit: hasta la vista... tchau!)
2022-05-08 00:02:19	→	stackdroid18 has joined #haskell
2022-05-08 00:02:19	←	stackdroid18 has quit (Client Quit)
2022-05-08 00:07:23	→	f-a has joined #haskell
2022-05-08 00:08:03	f-a	I suspect the answer is “no” but: is there a way to suppress a single “Orphan instance” warning (something like {-# SkipThisWarning #-}?
2022-05-08 00:09:38	c_wraith	I don't think you can suppress it at a level narrower than the module.
2022-05-08 00:09:46	c_wraith	But if it's orphan, you can put it in its own module
2022-05-08 00:10:27	⚡	tomsmeding has wanted this as well, like {-# ORPHAN_I_KNOW_SHUTUP #-}
2022-05-08 00:11:12	monochrom	{-# Oliver-Twist-And-Zombies #-}
2022-05-08 00:11:15	f-a	it is a bit of a pain because the instance is ToMarkup (blaze-html) and I would have to import all kind of modules where I define the datatype which is a bit annoying. Oh well.
2022-05-08 00:12:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-05-08 00:16:05	→	srz has joined #haskell
2022-05-08 00:17:43	←	vicfred has quit (Quit: Leaving)
2022-05-08 00:19:23	→	Sgeo has joined #haskell
2022-05-08 00:19:52	←	Sgeo has quit (Remote host closed the connection)
2022-05-08 00:20:17	→	Sgeo has joined #haskell
2022-05-08 00:20:34	→	littlebobeep has joined #haskell
2022-05-08 00:22:18	apache2	c_wraith: do you have any thoughts on Data.Graph vs fgl ?
2022-05-08 00:23:44	c_wraith	apache2: I wouldn't use either for something that needs to be high performance. I'd use fgl for just about anything where I want more sophistication than Data.Graph but performance still isn't especially important.
2022-05-08 00:26:43	Bulby[m]	wait... does FFI allow `Void` to become real 😱
2022-05-08 00:28:29	apache2	c_wraith: makes sense, is there a ready-made library you'd use for performance-critical stuff, or would you roll your own tailored for the usecase?
2022-05-08 00:28:47	c_wraith	I'm not sure.  I haven't had to look into it
2022-05-08 00:28:54	albet70	is that Promise in javascript a DAG?
2022-05-08 00:30:31	apache2	c_wraith: fair enough, I was just curious
2022-05-08 00:31:32	albet70	Promise in js is >>= in Haskell?
2022-05-08 00:32:49	←	hgolden has quit (Quit: Konversation terminated!)
2022-05-08 00:33:00	←	Topsi has quit (Ping timeout: 276 seconds)
2022-05-08 00:39:49	→	notzmv has joined #haskell
2022-05-08 00:40:35	→	causal has joined #haskell
2022-05-08 00:40:46	seydar	I've got a list of Maybe Int, and I'd like to sum them together
2022-05-08 00:40:55	seydar	I got the maybes from `elemIndex`
2022-05-08 00:41:48	jollygood2	> (sum . catMaybes) [Nothing, Just 10, Just 20]
2022-05-08 00:41:51	lambdabot	 30
2022-05-08 00:42:21	seydar	i got distracted and didn't finish asking my question but yes that is exactly what I was looking for, thank you
2022-05-08 00:42:22	hpc	https://hoogle.haskell.org/?hoogle=%5BMaybe+a%5D+-%3E+%5Ba%5D&scope=set%3Astackage
2022-05-08 00:43:01	seydar	and i guess it works becuase it's all still in *some* monad? Now it's in the list monad?
2022-05-08 00:43:25	geekosaur	no monad involved
2022-05-08 00:43:40	geekosaur	> catMaybes [Nothing, Just 10, Just 20]
2022-05-08 00:43:41	lambdabot	 [10,20]
2022-05-08 00:44:15	c_wraith	:t catMaybes
2022-05-08 00:44:16	lambdabot	[Maybe a] -> [a]
2022-05-08 00:44:32	c_wraith	It literally is defined in terms of [] and Maybe.
2022-05-08 00:44:40	c_wraith	Nothing else to worry about
2022-05-08 00:45:16	seydar	yeah but the [] monad
2022-05-08 00:45:30	geekosaur	no monad involved
2022-05-08 00:45:43	geekosaur	yes, [] is a monad, but that doesn't matter here
2022-05-08 00:46:09	seydar	okay i see, i'm def making this more complicated than it is
2022-05-08 00:46:39	c_wraith	@src catMaybes
2022-05-08 00:46:39	lambdabot	catMaybes ls = [x | Just x <- ls]
2022-05-08 00:46:53	c_wraith	Like...  Ok, that might be more clever than necessary
2022-05-08 00:47:10	seydar	c_wraith: again with the mind reading! i was just typing out if there's a way to one-line catMaybes
2022-05-08 00:47:11	c_wraith	But it's definitely just a list comprehension
2022-05-08 00:47:31	seydar	I was thinking like `map (\Just x -> x) [..]`
2022-05-08 00:47:36	seydar	but that's clearly wrong
2022-05-08 00:47:43	seydar	your list comprehension is excellent, thank you
2022-05-08 00:47:49	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-08 00:48:12	jollygood2	we can use monads if you insist.. :)
2022-05-08 00:48:14	→	b4d6a4 has joined #haskell
2022-05-08 00:48:24	jollygood2	> (pure . sum =<< catMaybes) [Nothing, Just 10, Just 20]
2022-05-08 00:48:27	lambdabot	 30
2022-05-08 00:48:41	c_wraith	...  that's the worst monad to involve. :P
2022-05-08 00:50:24	c_wraith	man, that's a long walk to reimplement (.)
2022-05-08 00:51:47	→	tromp has joined #haskell
2022-05-08 00:52:22	jollygood2	could have been much longer, it is still using .
2022-05-08 00:53:29	seydar	is it possible to use `where` too much? i feel like i'm using it in every function
2022-05-08 00:53:38	seydar	is that a code smell?
2022-05-08 00:54:23	geekosaur	I only name stuff if I'm using it multiple times or to break up long or complex computations
2022-05-08 00:57:49	←	agumonke` has quit (Ping timeout: 246 seconds)
2022-05-08 00:58:12	seydar	is this too much `where`? https://paste.tomsmeding.com/ElLdaMKb
2022-05-08 00:59:04	sm	I tend to end up using it maximally (limiting every binding to the minimum required scope), because makes the code clearest and easiest to extract into functions
2022-05-08 01:00:06	sm	oh, not at all. I'll use
2022-05-08 01:00:06	sm	where ...
2022-05-08 01:00:06	sm	  where ...
2022-05-08 01:00:06	sm	    where ... 
2022-05-08 01:00:10	→	kaph has joined #haskell
2022-05-08 01:00:26	sm	indentation fail, never mind
2022-05-08 01:01:30	seydar	any other comments on that code?
2022-05-08 01:01:36	seydar	code smells? weird phrasings?
2022-05-08 01:01:57	sm	run hlint on it and you'll get a bunch of suggestions
2022-05-08 01:04:02	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-08 01:05:44	seydar	general computing question: do people still install things from source like the amish do, or is everyone using package managers for everything?
2022-05-08 01:06:31	→	jmdaemon has joined #haskell
2022-05-08 01:06:48	seydar	i chose to install something this morning from source instead of via package manager but i don't know if i'm setting myself up for maintainability issues
2022-05-08 01:07:13	seydar	i figured i would get the source from the git repo and install by hand, the way my father before me and his father before him
2022-05-08 01:08:30	→	tromp has joined #haskell
2022-05-08 01:16:35	→	werneta has joined #haskell
2022-05-08 01:18:21	←	b4d6a4 has quit (Quit: It was him, not me.)
2022-05-08 01:18:27	monochrom	Oh Haskellers do the best of both worlds. Use a package manager and still build from source. >:)
2022-05-08 01:19:29	←	d3adb5 has quit (Quit: It wasn't me, I swear.)
2022-05-08 01:19:43	c_wraith	eh, I don't compile cabal-install from source anymore!
2022-05-08 01:19:53	→	dcompoze has joined #haskell
2022-05-08 01:20:05	←	tomgus1 has quit (Ping timeout: 260 seconds)
2022-05-08 01:20:30	←	dcompoze has quit (Client Quit)
2022-05-08 01:20:37	c_wraith	(mostly thanks to maerwald)
2022-05-08 01:21:31	monochrom	Yeah but we all build aeson from source over and over again. :)
2022-05-08 01:21:32	→	tomgus1 has joined #haskell
2022-05-08 01:22:14	maerwald	that will never be solved, because of ABI instability
2022-05-08 01:23:00	→	dunj3 has joined #haskell
2022-05-08 01:23:04	→	jinsun__ has joined #haskell
2022-05-08 01:24:27	seydar	numeric casting is the bane of my existance: https://paste.tomsmeding.com/bFtQr13S
2022-05-08 01:24:35	seydar	no one will ever love me if i keep writing code like that ^^^
2022-05-08 01:24:40	seydar	any suggestions?
2022-05-08 01:26:36	←	jinsun has quit (Ping timeout: 240 seconds)
2022-05-08 01:28:25	c_wraith	I am deeply suspicious of code that does that much type conversion, because it suggests a semantic breakdown somewhere
2022-05-08 01:29:37	c_wraith	it doesn't guarantee it, but it does make me wonder if the types are right in the first place
2022-05-08 01:30:24	←	_ht has quit (Remote host closed the connection)
2022-05-08 01:30:31	seydar	that is a great point
2022-05-08 01:31:33	seydar	but then it means I need to make those all Doubles at an earlier point
2022-05-08 01:31:44	seydar	but that's dodging your point: there's a semantic breakdown somewhere
2022-05-08 01:32:07	seydar	it's part of the blurhash algorithm that i've been implementing/translating this week
2022-05-08 01:32:15	seydar	so I'm doing hash -> color conversions
2022-05-08 01:33:11	sm	a certain amount of this noise is inevitable it seems, but yes try to pick the right types in the right places to minimise it while still meeting your other goals
2022-05-08 01:33:53	c_wraith	ok, treating color spaces sanely and also doing integral operations on projections of it... that is going to always be a lot of conversions.
2022-05-08 01:37:18	seydar	I could convert those values to doubles upon their initial extaction/creation, but then it feels like I'm just hiding the problem
2022-05-08 01:37:33	seydar	sRGB values should be Int since that's what they are (Pixel8, technically)
2022-05-08 01:40:33	←	alp_ has quit (Ping timeout: 248 seconds)
2022-05-08 01:42:07	→	king_gs has joined #haskell
2022-05-08 01:45:44	→	bkcutk has joined #haskell
2022-05-08 01:46:14	bkcutk	@pl f xs n = fst $ foldr (\x (xs, i) -> (if mod i n == 0 then xs else x:xs, i - 1)) ([], length xs) xs
2022-05-08 01:46:15	lambdabot	f = (fst .) . (flip =<< flip (foldr . flip flip snd . (ap .) . flip flip fst . ((.) .) . flip flip (subtract 1) . ((flip . (liftM2 (,) .)) .) . (. (:)) . ap . (flip .) . flip . (if' .) . flip flip 0
2022-05-08 01:46:16	lambdabot	. ((==) .) . flip mod) . (,) [] . length)
2022-05-08 01:46:45	bkcutk	@pl f xs n = <bkcutk> @pl f xs n = fst $ foldr (\x (xs, i) -> (if mod i n == 0 then xs else
2022-05-08 01:46:45	bkcutk	         x:xs, i - 1)) ([], length xs) xs
2022-05-08 01:46:45	bkcutk	<lambdabot> f = (fst .) . (flip =<< flip (foldr . flip flip snd . (ap .)
2022-05-08 01:46:45	bkcutk	            . flip flip fst . ((.) .) . flip flip (subtract 1) . ((flip
2022-05-08 01:46:45	lambdabot	(line 1, column 9):
2022-05-08 01:46:45	lambdabot	unexpected " "
2022-05-08 01:46:45	lambdabot	expecting operator
2022-05-08 01:46:48	bkcutk	            . (liftM2 (,) .)) .) . (. (:)) . ap . (flip .) . flip . (if' .)
2022-05-08 01:46:51	bkcutk	            . flip flip 0
2022-05-08 01:46:54	bkcutk	<lambdabot> . ((==) .) . flip mod) . (,) [] . length)
2022-05-08 01:46:57	bkcutk	ERC> @pl f xs n = fst $ foldr (\x (xs, i) -> (if mod i n == 0 then xs else x:xs, i - 1)) ([], length xs) xs<bkcutk> @pl f xs n = fst $ foldr (\x (xs, i) -> (if mod i n == 0 then xs else
2022-05-08 01:47:01	bkcutk	         x:xs, i - 1)) ([], length xs) xs
2022-05-08 01:47:04	bkcutk	<lambdabot> f = (fst .) . (flip =<< flip (foldr . flip flip snd . (ap .)
2022-05-08 01:47:07	bkcutk	            . flip flip fst . ((.) .) . flip flip (subtract 1) . ((flip
2022-05-08 01:47:10	bkcutk	            . (liftM2 (,) .)) .) . (. (:)) . ap . (flip .) . flip . (if' .)
2022-05-08 01:47:12	bkcutk	            . flip flip 0
2022-05-08 01:47:15	bkcutk	<lambdabot> . ((==) .) . flip mod) . (,) [] . length)
2022-05-08 01:47:18	bkcutk	ERC> @pl f xs n = fst $ foldr (\x (xs, i) -> (if mod i n == 0 then xs else x:xs, i - 1)) ([], length xs) xs<bkcutk> @pl f xs n = fst $ foldr (\x (xs, i) -> (if mod i n == 0 then xs else
2022-05-08 01:47:22	bkcutk	         x:xs, i - 1)) ([], length xs) xs
2022-05-08 01:47:25	bkcutk	<lambdabot> f = (fst .) . (flip =<< flip (foldr . flip flip snd . (ap .)
2022-05-08 01:47:28	bkcutk	            . flip flip fst . ((.) .) . flip flip (subtract 1) . ((flip
2022-05-08 01:47:32	bkcutk	            . (liftM2 (,) .)) .) . (. (:)) . ap . (flip .) . flip . (if' .)
2022-05-08 01:47:35	bkcutk	            . flip flip 0
2022-05-08 01:47:38	bkcutk	<lambdabot> . ((==) .) . flip mod) . (,) [] . length)
2022-05-08 01:47:41	bkcutk	ERC> @pl f xs n = fst $ foldr (\x (xs, i) -> (if mod i n == 0 then xs else x:xs, i - 1)) ([], length xs) xs
2022-05-08 01:47:45	bkcutk	@pl f xs n = <bkcutk> @pl f xs n = fst $ foldr (\x (xs, i) -> (if mod i n == 0 then xs else
2022-05-08 01:47:46	lambdabot	(line 1, column 9):
2022-05-08 01:47:46	lambdabot	unexpected " "
2022-05-08 01:47:46	lambdabot	expecting operator
2022-05-08 01:47:48	bkcutk	         x:xs, i - 1)) ([], length xs) xs
2022-05-08 01:47:52	bkcutk	<lambdabot> f = (fst .) . (flip =<< flip (foldr . flip flip snd . (ap .)
2022-05-08 01:47:52	geekosaur	could you play in pm please?
2022-05-08 01:47:55	bkcutk	            . flip flip fst . ((.) .) . flip flip (subtract 1) . ((flip
2022-05-08 01:47:58	bkcutk	            . (liftM2 (,) .)) .) . (. (:)) . ap . (flip .) . flip . (if' .)
2022-05-08 01:48:01	bkcutk	            . flip flip 0
2022-05-08 01:48:04	bkcutk	<lambdabot> . ((==) .) . flip mod) . (,) [] . length)
2022-05-08 01:48:08	bkcutk	ERC> @pl f xs n = fst $ foldr (\x (xs, i) -> (if mod i n == 0 then xs else x:xs, i - 1)) ([], length xs) xs<bkcutk> @pl f xs n = fst $ foldr (\x (xs, i) -> (if mod i n == 0 then xs else
2022-05-08 01:48:08	bkcutk	         x:xs, i - 1)) ([], length xs) xs
2022-05-08 01:48:11	bkcutk	<lambdabot> f = (fst .) . (flip =<< flip (foldr . flip flip snd . (ap .)
2022-05-08 01:48:11	ℹ	Mode #haskell [+o geekosaur] by ChanServ
2022-05-08 01:48:15	bkcutk	            . flip flip fst . ((.) .) . flip flip (subtract 1) . ((flip
2022-05-08 01:48:18	bkcutk	            . (liftM2 (,) .)) .) . (. (:)) . ap . (flip .) . flip . (if' .)
2022-05-08 01:48:20	←	geekosaur has kicked bkcutk (bkcutk)
2022-05-08 01:48:53	ℹ	Mode #haskell [-o geekosaur] by geekosaur
2022-05-08 01:48:57	→	ktehan has joined #haskell
2022-05-08 01:48:59	←	ktehan has left #haskell
2022-05-08 01:52:16	→	nut has joined #haskell
2022-05-08 01:55:16	ℹ	shachaf_ is now known as shachaf
2022-05-08 01:55:40	←	shachaf has quit (Changing host)
2022-05-08 01:55:40	→	shachaf has joined #haskell
2022-05-08 01:57:29	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-08 01:57:55	→	raehik has joined #haskell
2022-05-08 02:03:06	→	jgeerds has joined #haskell
2022-05-08 02:03:23	←	jakalx has left #haskell (Error from remote client)
2022-05-08 02:03:32	ℹ	irc: disconnected from server
2022-05-08 16:01:08	→	oxide has joined #haskell
2022-05-08 16:01:08	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-05-08 16:01:08	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-05-08 16:01:08	ℹ	Channel #haskell: 693 nicks (1 op, 0 voices, 692 normals)
2022-05-08 16:01:08	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-05-08 16:01:08	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-05-08 16:01:59	←	yauhsien has quit (Ping timeout: 256 seconds)
2022-05-08 16:05:25	maerwald	AndreasK: it works sometimes
2022-05-08 16:06:15	←	whatsupdoc has quit (Quit: Connection closed for inactivity)
2022-05-08 16:07:00	AndreasK	As far as I can tell it should work with 8.10 but on this box my oldest GHC is 9.0.1
2022-05-08 16:08:54	→	xff0x has joined #haskell
2022-05-08 16:09:56	→	littlebobeep has joined #haskell
2022-05-08 16:11:14	←	zeenk has quit (Quit: Konversation terminated!)
2022-05-08 16:12:02	←	Guest61 has quit (Quit: Client closed)
2022-05-08 16:13:41	→	melas has joined #haskell
2022-05-08 16:14:06	→	gurkenglas has joined #haskell
2022-05-08 16:15:52	→	frost has joined #haskell
2022-05-08 16:18:36	←	cyphase has quit (Ping timeout: 248 seconds)
2022-05-08 16:20:07	→	Lord_of_Life_ has joined #haskell
2022-05-08 16:20:28	→	cyphase has joined #haskell
2022-05-08 16:20:35	←	Lord_of_Life has quit (Ping timeout: 256 seconds)
2022-05-08 16:20:59	maerwald	AndreasK: can you install 8.10?
2022-05-08 16:22:19	AndreasK	Yes. But I think I will just download a 3.6 binary instead.
2022-05-08 16:22:51	ℹ	Lord_of_Life_ is now known as Lord_of_Life
2022-05-08 16:23:53	←	MoC has quit (Quit: Konversation terminated!)
2022-05-08 16:30:12	→	MajorBiscuit has joined #haskell
2022-05-08 16:35:47	→	kaph has joined #haskell
2022-05-08 16:35:55	←	jakalx has left #haskell (Disconnected: Replaced by new connection)
2022-05-08 16:35:56	→	jakalx has joined #haskell
2022-05-08 16:38:47	←	eggplantade has quit (Remote host closed the connection)
2022-05-08 16:48:16	→	pretty_dumm_guy has joined #haskell
2022-05-08 16:57:07	←	fendor_ has quit (Remote host closed the connection)
2022-05-08 16:58:30	←	asivitz has quit (Quit: Connection closed for inactivity)
2022-05-08 16:58:39	→	ubert1 has joined #haskell
2022-05-08 17:12:03	ℹ	irc: disconnected from server
2022-05-08 17:17:28	→	oxide has joined #haskell
2022-05-08 17:17:28	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-05-08 17:17:28	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-05-08 17:17:28	ℹ	Channel #haskell: 695 nicks (1 op, 0 voices, 694 normals)
2022-05-08 17:17:29	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-05-08 17:17:29	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-05-08 17:19:40	dminuoso	[exa]: Mmm ah yes, I think thats what I was looking for. Not convinced this is better.
2022-05-08 17:20:43	[exa]	:t getAp . fold . fmap Ap
2022-05-08 17:20:44	lambdabot	forall k (t :: * -> *) (f :: k -> *) (a :: k). (Foldable t, Monoid (Ap f a), Functor t) => t (f a) -> f a
2022-05-08 17:21:20	[exa]	would get competitive if there'd be some kind of `foldVia Ap` :D
2022-05-08 17:21:33	dminuoso	Well that'
2022-05-08 17:21:37	dminuoso	Well that's `ala` territory.
2022-05-08 17:21:53	dminuoso	:t ala
2022-05-08 17:21:55	lambdabot	(Functor f, Rewrapped s t, Rewrapped t s) => (Unwrapped s -> s) -> ((Unwrapped t -> t) -> f s) -> f (Unwrapped s)
2022-05-08 17:21:57	[exa]	true
2022-05-08 17:22:22	[exa]	is there a rewrapper?
2022-05-08 17:22:39	dminuoso	rewrapper?
2022-05-08 17:23:29	dminuoso	:t overF
2022-05-08 17:23:30	lambdabot	error:
2022-05-08 17:23:30	lambdabot	    • Variable not in scope: overF
2022-05-08 17:23:30	lambdabot	    • Perhaps you meant one of these:
2022-05-08 17:25:39	[exa]	:t al Ap foldMap
2022-05-08 17:25:40	lambdabot	error:
2022-05-08 17:25:40	lambdabot	    • Variable not in scope:
2022-05-08 17:25:41	lambdabot	        al :: (f0 a0 -> Ap f0 a0) -> ((a1 -> m0) -> t0 a1 -> m0) -> t
2022-05-08 17:25:45	[exa]	too much `a`
2022-05-08 17:26:00	[exa]	:t ala Ap foldMap
2022-05-08 17:26:01	lambdabot	forall k1 (t :: * -> *) (g :: k1 -> *) (b :: k1). (Foldable t, Monoid (Ap g b)) => t (g b) -> g b
2022-05-08 17:26:28	[exa]	still I like the sequence one better :]
2022-05-08 17:26:31	dminuoso	> ala Ap foldMap [pure [1,2] :: IO [Int], pure [3,4]]
2022-05-08 17:26:33	lambdabot	 <IO [Int]>
2022-05-08 17:26:47	dminuoso	You use this if you have your coworkers.
2022-05-08 17:26:51	dminuoso	s/have/hate/
2022-05-08 17:27:08	dminuoso	And ideally you use not `newtypes` but `lens` for it.
2022-05-08 17:27:22	dminuoso	(definitely not coercible-utils)
2022-05-08 17:28:01	[exa]	:]
2022-05-08 17:28:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-05-08 17:30:04	←	melas has quit (Ping timeout: 246 seconds)
2022-05-08 17:31:23	[Leary]	dminuoso: Isn't it just "fold"? We have Monoid a => Monoid (IO a).
2022-05-08 17:34:42	ℹ	juri__ is now known as juri_
2022-05-08 17:38:36	←	ubert1 has quit (Ping timeout: 248 seconds)
2022-05-08 17:39:30	→	eggplantade has joined #haskell
2022-05-08 17:42:48	[exa]	[Leary]: something needs to tell it how to fold the applicatives
2022-05-08 17:43:22	[exa]	ah for IO that could work, yes
2022-05-08 17:43:36	[exa]	cool.
2022-05-08 17:44:16	←	eggplantade has quit (Ping timeout: 260 seconds)
2022-05-08 17:44:49	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-08 17:45:53	→	littlebobeep has joined #haskell
2022-05-08 17:50:06	→	yauhsien has joined #haskell
2022-05-08 17:50:36	←	mikoto-chan has quit (Ping timeout: 240 seconds)
2022-05-08 17:51:24	→	tromp has joined #haskell
2022-05-08 17:52:45	→	mikoto-chan has joined #haskell
2022-05-08 18:00:04	←	coot has quit (Quit: coot)
2022-05-08 18:00:14	→	coot has joined #haskell
2022-05-08 18:09:16	←	gurkenglas has quit (Ping timeout: 246 seconds)
2022-05-08 18:10:49	→	xkuru has joined #haskell
2022-05-08 18:15:32	→	dextaa4 has joined #haskell
2022-05-08 18:26:43	→	machinedgod has joined #haskell
2022-05-08 18:29:31	→	Lycurgus has joined #haskell
2022-05-08 18:31:29	←	raym has quit (Ping timeout: 250 seconds)
2022-05-08 18:32:10	←	littlebobeep has quit (Remote host closed the connection)
2022-05-08 18:32:15	→	raym has joined #haskell
2022-05-08 18:32:35	→	littlebobeep has joined #haskell
2022-05-08 18:34:07	←	xff0x has quit (Ping timeout: 246 seconds)
2022-05-08 18:35:55	→	waleee has joined #haskell
2022-05-08 18:36:14	←	AlexZenon has quit (Ping timeout: 250 seconds)
2022-05-08 18:37:22	→	xff0x has joined #haskell
2022-05-08 18:40:30	→	AlexZenon has joined #haskell
2022-05-08 18:57:36	→	MoC has joined #haskell
2022-05-08 18:59:07	←	waleee has quit (Ping timeout: 240 seconds)
2022-05-08 18:59:35	→	bahamas has joined #haskell
2022-05-08 19:03:54	→	shapr has joined #haskell
2022-05-08 19:09:29	→	tochicool has joined #haskell
2022-05-08 19:10:13	→	Simon98 has joined #haskell
2022-05-08 19:10:30	Simon98	Hello there! Is there a list of adjustments that I can make with :set in GHCI?
2022-05-08 19:11:12	Simon98	Also im looking for a :set action that was called something with ...morpho... or so and I think it would specify the :t outputs and not always just say "Num". Do you know how it is called?
2022-05-08 19:11:12	geekosaur	https://downloads.haskell.org/ghc/9.0.2/docs/html/users_guide/ghci.html#the-set-and-seti-commands
2022-05-08 19:11:38	Simon98	Ahh I think it was XNoMonomorphismRestriction
2022-05-08 19:11:42	Simon98	Thanks geekosaur
2022-05-08 19:12:08	geekosaur	you may be thinking of :set -XMonomorphismRestriction, but it won't affect :t directly like that
2022-05-08 19:12:26	geekosaur	types donb't get defaulted until applied
2022-05-08 19:12:59	Simon98	what do you mean by that last line?
2022-05-08 19:13:16	geekosaur	you need a fully applied expression for monomorphization to happen
2022-05-08 19:13:36	Simon98	And also the link: There are indeed some things that work with :set, but it doesn't look like a complete list or so. Or is there simply no complete list since there can be new :set specifications added or so?
2022-05-08 19:14:03	→	nut has joined #haskell
2022-05-08 19:14:24	geekosaur	:set also allows any ghc option at https://downloads.haskell.org/ghc/9.0.2/docs/html/users_guide/flags.html that is marked Dynamic
2022-05-08 19:15:08	geekosaur	and any extension selectable with -X, of which I don't think there's a single compact list
2022-05-08 19:15:10	Simon98	what does marked Dynamic mean?
2022-05-08 19:15:29	Simon98	I see, no -X list
2022-05-08 19:15:42	geekosaur	the link I gave you is a table of options, whether an option is dynamic or not is listed in the third column of the table
2022-05-08 19:16:47	geekosaur	you can get a full list of -X options with `ghc --supported-extensions`
2022-05-08 19:17:05	geekosaur	(sadly, with no documentation. but you can then search the manual)
2022-05-08 19:17:33	Simon98	Wow, there are a lot
2022-05-08 19:17:45	Simon98	I wonder what all of them do haha
2022-05-08 19:17:57	Simon98	Another question:
2022-05-08 19:20:25	Simon98	I'm new to Haskell and there just seem to be some huge differences to other, more common languages like Java or JavaScript. Not just regarding the programming paradigma but also with things like this :set and so on.
2022-05-08 19:20:25	Simon98	Do you know if there are big software branches or industries out there where Haskell is used a lot or where it might even be the standard or are most of the problems that occur in the major branches just solved more easily with other languages?
2022-05-08 19:21:00	Lycurgus	yes
2022-05-08 19:21:15	Simon98	Ok, great that you know it! What would it be?
2022-05-08 19:22:23	Lycurgus	it?
2022-05-08 19:22:48	Lycurgus	TIOBE might be what ur lookin for
2022-05-08 19:23:40	←	bahamas has quit (Ping timeout: 260 seconds)
2022-05-08 19:23:44	Simon98	Yeah so Haskell is pretty low there. But still, are there branches where it is de facto standard? Due to whatever reason?
2022-05-08 19:24:16	Lycurgus	No
2022-05-08 19:24:23	maerwald[m]	Most of industry doesn't solve problems, but needs just another iteration of the same thing
2022-05-08 19:24:35	maerwald[m]	Languages don't matter to them, but engineers do
2022-05-08 19:24:49	Lycurgus	although it's cachet in academe was very high, but peaked in the last decade imo
2022-05-08 19:24:56	Simon98	What do you mean by your first line mearwald?
2022-05-08 19:25:09	maerwald[m]	And engineers think everything is about programming languages 
2022-05-08 19:25:29	Lycurgus	this channel for example has about half its population of a decade ago
2022-05-08 19:26:01	hpc	that's not a very good measure, that entire population loss is explained by the freenode debacle
2022-05-08 19:26:02	Simon98	Why would you say is it popular in academia? (at least at my uni)
2022-05-08 19:26:22	Lycurgus	what maerwald[m] is referring to is a character of modern IT that is different from it's youth
2022-05-08 19:26:44	Lycurgus	which is that IT became competent but dull
2022-05-08 19:26:53	Lycurgus	real innovation dried up
2022-05-08 19:26:56	Simon98	But why another iteration of the same thing?
2022-05-08 19:27:15	maerwald[m]	To me, engineering would spend 60% of the time on specifications, then come up with the most constrained language (or DSL) possible that can be checked against the spec and doesn't require overly smart programmers.
2022-05-08 19:28:02	Lycurgus	mostly because IT became a multi trillion dollar industry
2022-05-08 19:28:03	Simon98	This is how you would like it to be or how you think it currently is?
2022-05-08 19:28:57	Lycurgus	Simon98, you should address individuals as such when using first person
2022-05-08 19:28:57	Simon98	Isn't IT one of the biggest innovators currently? Yet alone due to its size as Lycurgus says
2022-05-08 19:29:13	maerwald[m]	But currently everyone likes turing complete general purpose languages and is interested in more expressivity, not less.
2022-05-08 19:29:14	Lycurgus	i just said it wasn't
2022-05-08 19:30:26	←	causal has quit (Quit: WeeChat 3.5)
2022-05-08 19:30:31	Simon98	Yeah, you're right. Maybe I'm surprised that it's not
2022-05-08 19:30:40	ProofTechnique	Is there an established name for `f :: Functor f => f (a -> b, c -> d) -> f (a -> c -> (b, d)) = fmap (curry . uncurry bimap)`?
2022-05-08 19:32:39	ProofTechnique	IT is incredibly stagnant. It's just "here are all the business problems of decades ago, but now do it on someone else's infrastructure and bigger". All the "new" work is in crypto and that's literally worse than nothing.
2022-05-08 19:33:07	Simon98	Interesting, now I get it
2022-05-08 19:33:16	Simon98	But why is crypto a problem in your opinion?
2022-05-08 19:33:31	darkling	Yeah, I'm fed up of different ways to do RPC.
2022-05-08 19:33:59	maerwald[m]	Crypto is (technically) one of the biggest challenges. But no one knows what business problems it sovles
2022-05-08 19:34:08	ProofTechnique	Environmental impact, governance, lack of utility.
2022-05-08 19:34:26	maerwald[m]	ProofTechnique: environmental impact?
2022-05-08 19:34:34	ProofTechnique	It's just a very fancy way to create private currency, which has always been bad
2022-05-08 19:35:01	maerwald[m]	You're aware that proof of stake has basically no significant environmental impact?
2022-05-08 19:35:22	ProofTechnique	Cool, let me know when _anyone_ that matters is using PoS
2022-05-08 19:35:30	maerwald[m]	Cardano
2022-05-08 19:35:31	ProofTechnique	I'm sure ETH will do it any day now
2022-05-08 19:35:48	←	Lycurgus has quit (Quit: Exeunt)
2022-05-08 19:35:51	tochicool	any way to get GHC to deduce the right constraint without pattern matching on the constructor? https://paste.tomsmeding.com/hxyLAkke
2022-05-08 19:36:01	maerwald[m]	The biggest blockchain written in Haskell
2022-05-08 19:36:08	Simon98	Cardano?
2022-05-08 19:36:09	ProofTechnique	It's a fancy way to make private money, which is actively corrosive to democratic control of society
2022-05-08 19:36:10	maerwald[m]	Seems you're not informed 
2022-05-08 19:36:36	→	bahamas has joined #haskell
2022-05-08 19:36:40	ProofTechnique	I'm incredibly aware of Cardano
2022-05-08 19:36:44	maerwald[m]	I think that's as much BS as anything else about money and banks
2022-05-08 19:37:02	ProofTechnique	I'm so excited to see how the neocolonialism in Africa pans out
2022-05-08 19:37:10	ski	tochicool : i think, no
2022-05-08 19:37:25	tochicool	:( why not?
2022-05-08 19:38:05	maerwald[m]	ProofTechnique: I'm not into crypto, I just think most of the criticism is hypocritical 
2022-05-08 19:38:30	ski	i don't think there's any "you've exhausted all other cases, so it must correspond to the remaining case", while not matching on a GADT data constructor
2022-05-08 19:38:39	ProofTechnique	Crypto does not solve any problem except how to part fools from their money and how to make the already exploitative relations of capitalism _even less regulated_
2022-05-08 19:39:42	ProofTechnique	To be clear, I'm also against banks, but my preferred solution is to dismantle banks, not create dozens of hyper-exploitative bank-fiefs
2022-05-08 19:41:02	Simon98	ProofTechnique Can you think of at least one major usecase for crypto?
2022-05-08 19:41:05	maerwald[m]	Seems all very shallow critique to me, but you have some sympathies with https://github.com/sdiehl/popping-the-crypto-bubble
2022-05-08 19:41:07	ProofTechnique	There are none
2022-05-08 19:41:37	tochicool	ski: i see, thanks. i hoped it might be possible as ghc can do smarter things than that. would be really helpful if you had a lot of constructors with the same index.
2022-05-08 19:41:42	→	eggplantade has joined #haskell
2022-05-08 19:42:19	maerwald[m]	People also thought the radio or TV is going to end the world as we know it
2022-05-08 19:42:32	←	nut has quit (Ping timeout: 250 seconds)
2022-05-08 19:42:46	ProofTechnique	Radio didn't use the entire electrical output of the Netherlands
2022-05-08 19:43:35	tochicool	it's harder to see the benefits of bitcoin from the first world
2022-05-08 19:43:38	maerwald[m]	Neither does proof of stake 
2022-05-08 19:43:48	maerwald[m]	You're being deliberately imprecise 
2022-05-08 19:45:04	ski	tochicool : a somewhat similar example to this would be `Right x >>= k = k x; e >>= _ = e', where we'd like `e' to bound to have type `forall a. Either e a' (where `k :: a -> Either e b'), so that it can be used at type `Either e b'
2022-05-08 19:45:48	←	eggplantade has quit (Ping timeout: 240 seconds)
2022-05-08 19:46:10	ski	@src Either (>>=)
2022-05-08 19:46:11	lambdabot	Left  l >>= _ = Left l
2022-05-08 19:46:11	lambdabot	Right r >>= k = k r
2022-05-08 19:46:25	ski	(note the annoying code repetition)
2022-05-08 19:46:58	ProofTechnique	Then make an actual point instead of just complaining that I'm not sufficiently deferential to the claims of known con artists
2022-05-08 19:47:24	⚡	hpc . o O ( are lisp programmers... cons artists? )
2022-05-08 19:47:48	→	ccntrq has joined #haskell
2022-05-08 19:47:55	ProofTechnique	More of a used `car` salesperson
2022-05-08 19:48:28	hpc	never bring a lisp programmer to a party, they'll defun it
2022-05-08 19:49:41	tochicool	ski : yes that is annoying. are there any planned extensions the type system to help with this or is there some fundamental reason why this isn't supported?
2022-05-08 19:50:49	ski	neither, afai aware
2022-05-08 19:51:42	→	ccntrq1 has joined #haskell
2022-05-08 19:51:48	←	ccntrq has quit (Ping timeout: 240 seconds)
2022-05-08 19:51:49	ℹ	ccntrq1 is now known as ccntrq
2022-05-08 19:51:56	→	wroathe has joined #haskell
2022-05-08 19:51:56	←	wroathe has quit (Changing host)
2022-05-08 19:51:56	→	wroathe has joined #haskell
2022-05-08 19:52:49	ski	(i think the problem i sketched, at least, could probably be speced and implemented without *too* much trouble (although it might turn out to be more involved than expected, of course) .. but, in any case, it would be a complication, and so people would be asking whether it's worth it, compared to how much/often people would benefit from it)
2022-05-08 19:53:00	←	hiredman has quit (Ping timeout: 248 seconds)
2022-05-08 19:53:41	ski	(for the GADT one, it's not as clear to me how one'd want this to behave, systematically. but then i've not pondered this before, either)
2022-05-08 19:54:02	→	Unicorn_Princess has joined #haskell
2022-05-08 19:54:07	→	hiredman has joined #haskell
2022-05-08 19:57:16	→	Guest9113 has joined #haskell
2022-05-08 19:58:27	←	yauhsien has quit (Remote host closed the connection)
2022-05-08 19:58:45	Simon98	If I have a function like: allSame a b c = (a==b && a==c) && (c==b) with allSame :: Eq a => a -> a -> a -> Bool
2022-05-08 19:58:46	Simon98	Can someone explain to me what each arrow exactly stands for?
2022-05-08 19:59:03	Simon98	Ahhh
2022-05-08 19:59:28	Simon98	No
2022-05-08 19:59:34	Simon98	But the a stands for Bool
2022-05-08 19:59:52	ski	no
2022-05-08 20:00:01	Simon98	Crap
2022-05-08 20:00:03	Simon98	Right
2022-05-08 20:00:33	Simon98	A stands for the type that my a b c have. But if they have different types?
2022-05-08 20:00:40	Simon98	a*
2022-05-08 20:01:44	hpc	if they have different types, you can't use (==) with them
2022-05-08 20:01:48	geekosaur	they can't
2022-05-08 20:01:49	ski	  allSame :: Eq a => a -> a -> a -> Bool
2022-05-08 20:01:51	ski	  -- params&result  ^ a  ^ b  ^ c  ^ result
2022-05-08 20:01:59	hpc	> "five" == 5 -- not valid
2022-05-08 20:02:00	lambdabot	 error:
2022-05-08 20:02:00	lambdabot	     • No instance for (Num [Char]) arising from the literal ‘5’
2022-05-08 20:02:00	lambdabot	     • In the second argument of ‘(==)’, namely ‘5’
2022-05-08 20:02:33	ski	also, `(==)' ought to be symmetric and transitive, so you should be able to remove one of the equality checks
2022-05-08 20:02:49	→	yauhsien has joined #haskell
2022-05-08 20:03:20	ski	`a' is the type of the three values that are being compared for equality. the `->'s come after each parameter/argument type. the result type comes last
2022-05-08 20:04:25	←	bontaq has quit (Ping timeout: 256 seconds)
2022-05-08 20:04:30	→	nut has joined #haskell
2022-05-08 20:04:41	Simon98	So e. g. allSame 1 2 3
2022-05-08 20:04:41	Simon98	is basically
2022-05-08 20:04:42	Simon98	Eq a => 1 -> 2 -> 3 -> false
2022-05-08 20:04:42	Simon98	?
2022-05-08 20:04:52	ski	the `=>' arrow separates the constraint context (to the left) from the usual (parameter and result types) signature. `Eq a' is a constraint that says that you can only use this operation (`allSame'), in case the argument type `a' is an instance of the type class `Eq', which is the case if it supports equality (checking) (`(==)' and `(/=)')
2022-05-08 20:04:57	ski	no
2022-05-08 20:05:15	ski	if `1',`2',`3' there have type `Integer', then, for this call to `allSame', `a' becomes `Integer'
2022-05-08 20:05:18	ski	iow
2022-05-08 20:05:20	Simon98	What do i use for the first a? And where does the "Eq" come from? Is it like "Eq a => a -> a -> a -> Bool" is the description for each "==" comparison?
2022-05-08 20:05:21	ski	  allSame :: Eq a => a -> a -> a -> Bool
2022-05-08 20:05:22	ski	becomes
2022-05-08 20:05:33	ski	  allSame :: Eq Integer => Integer -> Integer -> Integer -> Bool
2022-05-08 20:05:47	ski	but since `Eq Integer' holds, it's a known fact, this simplifies to just
2022-05-08 20:05:52	ski	  allSame :: Integer -> Integer -> Integer -> Bool
2022-05-08 20:06:21	ski	(which then gives the actual type used for this call to `allSame')
2022-05-08 20:06:52	ski	the `Eq a' constraint comes because you're calling `(==)', which has type `Eq a => a -> a -> Bool'
2022-05-08 20:07:24	ski	you can only do equality checking on values of a type that supports equality checking (a type that is an instance of `Eq')
2022-05-08 20:08:03	Simon98	very interesting
2022-05-08 20:08:10	Simon98	but wait
2022-05-08 20:08:10	tomsmeding	Read `Eq a => a -> a -> Bool` like "if `Eq a` holds, then this has type `a -> a -> Bool`"
2022-05-08 20:08:31	tomsmeding	Or, well, that's one way to read it, at least
2022-05-08 20:08:47	ski	so, for that to work, either (a) you need to use some particular type (that is known to be an instance of `Eq'), like `Integer', or `[(String,Bool)]' or something; or (b) you can delegate the responsibility for ensuring that `a' is in `Eq', which is what your current `allSame' does (because it has `Eq a' as a constraint in *its* type signature)
2022-05-08 20:09:03	←	bahamas has quit (Ping timeout: 256 seconds)
2022-05-08 20:09:13	Simon98	But what do you mean with "if `Eq a` holds"? Holds what?
2022-05-08 20:09:26	geekosaur	different usage of "holds"
2022-05-08 20:09:37	geekosaur	try "if a is a type that has an Eq instance"
2022-05-08 20:09:45	ski	"`Eq a' holds" is a brief way to say "`a' is an instance of `Eq'" or "there is an `Eq a' instance"
2022-05-08 20:10:23	ski	`Eq Integer' holds, because, somewhere in the base library, there is a declaration
2022-05-08 20:10:29	ski	  instance Eq Integer
2022-05-08 20:10:29	ski	    where
2022-05-08 20:10:36	ski	    ... == ... = ...
2022-05-08 20:10:39	ski	    ... /= ... = ...
2022-05-08 20:10:39	geekosaur	importantly, only *types* are typeclass instances, not values
2022-05-08 20:10:52	Simon98	Instead of "is an instance of" could also be said: "a is an object of something that inherits from the class Eq" or so?
2022-05-08 20:11:15	ski	that declaration gives the actual implementation (the code) that will be run, when calling `(==)' and `(/=)' on `Integer's
2022-05-08 20:11:22	geekosaur	typeclasses are not OOP
2022-05-08 20:11:29	←	yauhsien has quit (Ping timeout: 248 seconds)
2022-05-08 20:11:32	Simon98	Ah right
2022-05-08 20:11:39	ski	Simon98 : no, `a' is not an object (objects are values). `a' is a type
2022-05-08 20:11:48	←	wroathe has quit (Ping timeout: 260 seconds)
2022-05-08 20:11:50	ski	`a' doesn't exist at run-time
2022-05-08 20:12:02	ski	(instances do, though)
2022-05-08 20:12:56	Simon98	Ohhh, but ´a` (lets say, it's Integer in our example) is not just in instance of Eq but also of many other classes (?) like Num, right?
2022-05-08 20:13:03	Simon98	or maybe not "many" but still
2022-05-08 20:13:05	[exa]	Simon98: the intuition from OOP "traits" is kinda useful, but there are significant differences from the common OOP use. Most notably, typeclasses aren't objects but actual predicates, a bit more like c++ concepts
2022-05-08 20:13:08	tomsmeding	Simon98: don't get confused by the _type_ `a` being called the same as the first _argument_ to the function, also called `a`
2022-05-08 20:13:15	tomsmeding	They're completely different things
2022-05-08 20:13:21	ski	Simon98 : sure, yes
2022-05-08 20:14:11	ski	(it might be helpful to rename the parameters to say `x',`y',`z', to avoid confusing them with the type variables in the type signature)
2022-05-08 20:14:44	Simon98	tomsmeding Ohhh, right
2022-05-08 20:15:01	Simon98	ski Ohh, I'll try that
2022-05-08 20:15:09	Simon98	So helpful all of you guys, thanks a lot !
2022-05-08 20:15:17	Simon98	So:
2022-05-08 20:15:23	ski	(eventually, you get used to the distinction, and then the name-punning can be useful)
2022-05-08 20:15:59	⚡	ski still doesn't like punning a type constructor with a data constructor, though
2022-05-08 20:16:00	←	nut has quit (Ping timeout: 276 seconds)
2022-05-08 20:16:19	ski	(i guess, partially, because the scope of those are not local)
2022-05-08 20:17:22	Simon98	If I understand correctly now, "allSame :: Eq a => a -> a -> a -> Bool" is not an description of what the function "allSame" actually does (you could just guess that it does comparation) but it is just an description (or a guideline?) of the Types used and part of that function?
2022-05-08 20:17:43	→	bitdex has joined #haskell
2022-05-08 20:19:34	Simon98	ski Hmm, the renaming didn't work as expected: Prelude> allSame x y z = (x==y && y==z)
2022-05-08 20:19:35	Simon98	allSame :: Eq a => a -> a -> a -> Bool
2022-05-08 20:20:14	[exa]	Simon98: yes, a "description of the admissible types" would work. If you know C++, in C++ it would be something like `template<typename a> bool allSame(a, a, a);`
2022-05-08 20:21:33	[exa]	Simon98: btw try removing the `&& y==z` part from the comparison and see what happens with the type.
2022-05-08 20:22:13	ski	Simon98 : why didn't you expect that ?
2022-05-08 20:22:27	←	ccntrq has quit (Remote host closed the connection)
2022-05-08 20:22:29	ski	(it looks like the result you got would be what i would expect ..)
2022-05-08 20:22:48	ski	the parameter (values) are `x',`y',`z'. their common type is `a'
2022-05-08 20:23:00	[exa]	Simon98: for comparison again, c++ version for your unexpected result is: `template<typename a> allSame(a x, a y, a z) {...}`
2022-05-08 20:23:20	⚡	ski idly wonders whether Simon98 even has seen C++
2022-05-08 20:23:33	[exa]	ah.
2022-05-08 20:24:04	←	bitdex has quit (Ping timeout: 240 seconds)
2022-05-08 20:24:25	ski	(asking, not insinuating)
2022-05-08 20:25:05	[exa]	as usual, I didn't really read much of scrollback. :]
2022-05-08 20:25:51	→	nate1 has joined #haskell
2022-05-08 20:29:41	⚡	ski . o O (: hindsight, what's that ? :)
2022-05-08 20:29:42	Simon98	[exa] I'm not familiar with C++ but your notation reminds me of Java Generics
2022-05-08 20:30:20	ski	yea, in Java, it'd be `<a> allSame(a x,a y,a z) { ... }', iirc
2022-05-08 20:30:21	Simon98	Why is there sometimes a * before your name ski and your Name is not before the time?
2022-05-08 20:30:24	Simon98	in the chat
2022-05-08 20:30:31	Simon98	Ohhhhhhhhhhhhh
2022-05-08 20:30:33	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-08 20:30:37	⚡	ski glances around nervously
2022-05-08 20:30:41	ski	it's called an ACTION
2022-05-08 20:30:45	Simon98	So it can somehow be compared to Java Generics?
2022-05-08 20:30:47	ski	try entering the following :
2022-05-08 20:30:52	←	nate1 has quit (Ping timeout: 260 seconds)
2022-05-08 20:30:57	ski	/me nods and smiles
2022-05-08 20:31:39	Simon98	ski it confused me because of what you said here "(it might be helpful to rename the parameters to say `x',`y',`z', to avoid confusing them with the type variables in the type signature)", but now I get it (was thinking in a wrong way
2022-05-08 20:31:43	Simon98	)
2022-05-08 20:31:53	⚡	Simon98 nods and smiles
2022-05-08 20:31:56	Simon98	hahahaha
2022-05-08 20:32:06	⚡	Simon98 finds that nice
2022-05-08 20:32:14	ski	it's typically used to describe something you're doing, or else describe some property of yourself (in *third* person, mind !) .. i also often use it for various associations i get and things i'm reminded of
2022-05-08 20:33:43	Simon98	[exa] I tried it and look what happened: allSameX :: Eq a => a -> a -> p -> Bool
2022-05-08 20:33:43	Simon98	So p can be z different type then x and y? But doesn't that disagree with the Eq restriction of only comparing same types?
2022-05-08 20:34:11	ski	anyway, using type variables (begins with lower case (or `_')) in a type signature, indicates parametric polymorphism (which is called "generics", in e.g. Java). the initial `<typename a>' / `<a>' part can (usually) be elided in Haskell, but you can also spell it out explicitly as `forall a. '
2022-05-08 20:34:21	ski	  allSame :: forall a. Eq a => a -> a -> a -> Bool
2022-05-08 20:35:56	ski	(you'll need to enable at least `ExplicitForAll' to be able to do that. there are a couple of more extensions that actually let you do *more* with `forall' than merely being explicit, rather than eliding a `forall' (letting the implementation implicitly insert it at the start, right after the `::'))
2022-05-08 20:37:22	ski	Simon98 : yes, the type of `x' is `a' and the type of `y' is also `a', in that signature. but the type of `z' is `p', which is a distinct type variable, because `z' is not compared (for equality) with `x' nor `y', and so there's no need to assume it needs to have the same type, and so the implementation inferred a distinct type variable as its type (and for some reason happened to call that `p')
2022-05-08 20:37:58	ski	"So p can be z different type then x and y?" -- right. "But doesn't that disagree with the Eq restriction of only comparing same types?" -- no, because you removed the comparision of `z' with one of `x' and `y'
2022-05-08 20:38:22	ski	(specifically `y', i see above)
2022-05-08 20:39:36	Simon98	I see, thank you!
2022-05-08 20:39:47	Simon98	Why do you think the letter "p" was used?
2022-05-08 20:39:52	ski	@type (==)
2022-05-08 20:39:53	lambdabot	Eq a => a -> a -> Bool
2022-05-08 20:39:57	ski	hm
2022-05-08 20:40:03	ski	dunno
2022-05-08 20:40:40	geekosaur	that has to do with the guts of the typechecker, which generally aren't introspectable
2022-05-08 20:41:01	geekosaur	it tends to pick "t" or "p" in recent versions
2022-05-08 20:41:20	ski	(sometimes it picks up a type variable name from a particular type variable name in an explicit type signature of an operation that is used, involving the type variable with it)
2022-05-08 20:42:25	←	random-jellyfish has quit (Quit: Client closed)
2022-05-08 20:42:39	→	bitdex has joined #haskell
2022-05-08 20:44:02	→	uam has joined #haskell
2022-05-08 20:44:50	[exa]	Simon98: a _p_arameter type, perhaps. The names of the variables don't really matter.
2022-05-08 20:45:12	→	Pickchea has joined #haskell
2022-05-08 20:45:20	Simon98	And another thing: Let's stay with " allSameX :: Eq a => a -> a -> p -> Bool"
2022-05-08 20:45:21	Simon98	Are the arrows also actually meaning "flow" or something? Because that would not make sense.
2022-05-08 20:45:21	Simon98	With the "allSame :: Eq a(0) => a(1) -> a(2) -> a(3) -> Bool" [I added the numbers] I could have imagined that we do one comparison and then the a(1) yet again will be type a(2) and with the next comparison it will stlil be a(3).
2022-05-08 20:45:22	Simon98	But actually not even that makes sense since after one comparison they would already be Booleans instead of Integers
2022-05-08 20:45:51	Simon98	[exa] how do you do the underlining?
2022-05-08 20:46:09	[exa]	put underscores around, many clients will render it right
2022-05-08 20:46:14	[exa]	(mine does not tbh... :D )
2022-05-08 20:46:17	Simon98	I don't know why the name linking does not work sometimes. I typed "[e" then pressed tab and then enter or so
2022-05-08 20:46:32	Simon98	_p_
2022-05-08 20:46:44	[exa]	also the [ in my nick is not very popular with client software. I should get rid of it. :D
2022-05-08 20:47:02	Simon98	Ahh. In my case it looks like doubleUnderline then p underlined then another double underline
2022-05-08 20:47:06	→	agumonkey has joined #haskell
2022-05-08 20:47:20	[exa]	anyway, regarding the "flow" -- (->) is the actual type of a haskell function, and we technically only have 1-parameter functions
2022-05-08 20:47:41	[exa]	so if you'd really print the allSame type as-is, you'd get something like:
2022-05-08 20:47:59	[exa]	`a -> (a -> (a -> Bool))`
2022-05-08 20:48:10	[exa]	(I omitted the Eq)
2022-05-08 20:48:15	yushyin	with decent clients you can write ex<tab> and it will become [exa]
2022-05-08 20:49:11	[exa]	Simon98: the logic behind the parenthesization is that basically you feed the function parameters, and it becomes to something simpler and simpler, until it eventually becomes the Bool (which is not a function type, so you can't feed it parameters)
2022-05-08 20:49:35	Simon98	So in practice it could be `Integer -> (Integer -> (Integer -> Bool))`
2022-05-08 20:49:37	[exa]	yes
2022-05-08 20:49:47	Simon98	waaaaaaait
2022-05-08 20:50:02	Simon98	could you please also formulate it as math functions? with f(a) ?
2022-05-08 20:50:02	[exa]	Illustration:
2022-05-08 20:50:30	hpc	in that notation it'd be like saying f(a)(b)(c)
2022-05-08 20:50:39	[exa]	ah yes, in the usual prefix notation, you'd write a single-parameter function not as `a->b` but as `(->) a b`
2022-05-08 20:51:09	[exa]	(compare with `1+2` vs `(+) 1 2`  vs `plus(1,2)` from other languages)
2022-05-08 20:51:20	hpc	and in fact it's that exact notation in a lot of other languages where you can attempt such things
2022-05-08 20:51:52	hpc	although then it's really tedious, you have to write stuff like f = function(a){return function(b){return function(c){...}}}
2022-05-08 20:52:53	hpc	^ is javascript, if you want to pop into an f12 console and try it out
2022-05-08 20:52:55	[exa]	:t let allSame a b c = a==b && b==c in (allSame, allSame 1, allSame 1 2, allSame 1 2 3)
2022-05-08 20:52:56	lambdabot	(Eq a1, Eq a2, Eq a3, Num a2, Num a3) => (a1 -> a1 -> a1 -> Bool, a2 -> a2 -> Bool, a3 -> Bool, Bool)
2022-05-08 20:53:36	Simon98	what is the prefix notation again in "allSame a b c = a==b && b==c"?
2022-05-08 20:53:51	←	agumonkey has quit (Remote host closed the connection)
2022-05-08 20:53:52	Simon98	and hpc
2022-05-08 20:54:18	Simon98	and hpc why would you put a type class (=a) in a function and not the actual value? (f(a)(b)(c))
2022-05-08 20:55:16	→	hgolden has joined #haskell
2022-05-08 20:55:20	←	frost has quit (Ping timeout: 252 seconds)
2022-05-08 20:56:23	[exa]	Simon98: where's the typeclass?
2022-05-08 20:56:24	geekosaur	> let allSame a b c = a == b && b == c in allSame "foo" "foo" "foo" -- works for any type with an Eq instance, not just Integer
2022-05-08 20:56:26	lambdabot	 True
2022-05-08 20:56:44	hpc	those were the values
2022-05-08 20:56:48	←	pavonia has quit (Quit: Bye!)
2022-05-08 20:56:49	hpc	pretend i wrote f(x)(y)(z) :P
2022-05-08 20:57:34	Simon98	can this _function_ *in* _function applications_ be paraphrased to *use* _function_ *with* _function applications_ for me to better understand it?
2022-05-08 21:00:12	Simon98	I get the latter parenthesis (good example!) but why are there 5 elements in the first parenthesis?
2022-05-08 21:00:12	Simon98	(Eq a1, Eq a2, Eq a3, Num a2, Num a3) => (a1 -> a1 -> a1 -> Bool, a2 -> a2 -> Bool, a3 -> Bool, Bool)
2022-05-08 21:00:47	←	coot has quit (Quit: coot)
2022-05-08 21:00:54	geekosaur	because each call is considered separately
2022-05-08 21:00:55	[exa]	Simon98: it actually needs to describe a lot of constraints in the returned types, so there they are:
2022-05-08 21:00:55	→	haskell_apprenti has joined #haskell
2022-05-08 21:02:00	[exa]	in order, `Eq a1` ensures that the types of the parameters of the first `allSame` are comparable, similarly for `Eq a2` and `Eq a3`. Fully applied `allSame 1 2 3` doesn't need any constraint because it just returns Bool, no matter what.
2022-05-08 21:02:11	Simon98	hpc but what should " f(x)(y)(z) " mean?
2022-05-08 21:02:11	Simon98	Like f(x,y,z) or h(g(f(x))) with f(x) = y and g(y) = z would make sense for me but your notation not
2022-05-08 21:02:46	→	eggplantade has joined #haskell
2022-05-08 21:02:55	[exa]	Then `Num a2` is there because I already put `1` into `allSame 1`, and `1` can stand as any numeric type. So it tells you an extra information that you must put in other arguments as numeric too -- for example you couldn't do `allSame 1 "whatevs"`
2022-05-08 21:03:06	[exa]	(similar for Num a3)
2022-05-08 21:03:36	Simon98	ahh, thanks [exa]
2022-05-08 21:03:52	Simon98	and how would you paraphrase the "=>" here?
2022-05-08 21:03:58	→	tromp has joined #haskell
2022-05-08 21:04:08	[exa]	haha, tricky
2022-05-08 21:05:14	Simon98	:)
2022-05-08 21:05:38	haskell_apprenti	question: I'm going through Haskell programming from first principles, in the book they say a function with the signature blahFunc :: b -> String totally throws away its first argument and is effectively a constant value of type String. Can't we define a toString method that works for every type? I find it hard to reason about saying a function has
2022-05-08 21:05:39	haskell_apprenti	to be a particular function due to its type signature
2022-05-08 21:05:45	[exa]	it's an actual implication, given you have an `a` that satisfies the `Eq`, you can assume that your type is a->a->...
2022-05-08 21:06:35	geekosaur	haskell_apprenti, what would toString be for a function?
2022-05-08 21:06:42	Simon98	wow
2022-05-08 21:06:59	Simon98	Is the "=>" in Haskell syntax always an actual implication?
2022-05-08 21:07:00	geekosaur	remember, Haskell is compiled, it does not have the source code available, especially for a typeclass method like (+)
2022-05-08 21:07:02	[exa]	haskell_apprenti: "for every type" is hard. Do you know what custom-defined type am I going to send you in 5 minutes from now?
2022-05-08 21:07:47	haskell_apprenti	doesn't all data need some kind of text representation to be viewed on a screen though?
2022-05-08 21:08:16	[exa]	haskell_apprenti: that implies that you already know something about the type. That would be `blahFunc :: HasBitRepresentation b => b->String`
2022-05-08 21:09:04	haskell_apprenti	don't all types need a data declaration though? so theoretically you can print that, since that's common to all types. just for the sake of argument
2022-05-08 21:09:20	Simon98	And is one implication here sufficient ((Eq a1, Eq a2, Eq a3, Num a2, Num a3) => (a1 -> a1 -> a1 -> Bool, a2 -> a2 -> Bool, a3 -> Bool, Bool)) because you put the function applications all in one parenthesis ((allSame, allSame 1, allSame 1 2, allSame 1 2 3)) and therefore to make it work everything has to meet the requirements at a time?
2022-05-08 21:09:42	[exa]	haskell_apprenti: yes, there's actually a typeclass for that too (Generic). But still if you use it, you have to declare it.
2022-05-08 21:10:25	[exa]	Simon98: yes, it's 1 big type with 1 big sets of "conditions", so only a single => is required in between
2022-05-08 21:10:30	←	Guest9113 has quit (Quit: Client closed)
2022-05-08 21:10:40	⚡	ski . o O ( no underscores )
2022-05-08 21:11:01	ski	haskell_apprenti : types that are primitive doesn't need `data' or `newtype' declarations
2022-05-08 21:11:20	[exa]	Simon98: you can definitely try for isolated (partial) calls of allSame in your ghci, with different argument types. It should become quite intuitive once you play with it for some time
2022-05-08 21:11:58	ski	e.g. `(->)' .. or, an implementation could have `Char',`Int',`Integer',`Float',`Double',`Array',`IO',`IORef' all be primitive, as well
2022-05-08 21:13:56	ski	@type let foo x = (typeOf x,cast x :: Maybe String) in foo
2022-05-08 21:13:57	lambdabot	Typeable a => a -> (TypeRep, Maybe String)
2022-05-08 21:13:59	ski	> let foo x = (typeOf x,cast x :: Maybe String) in foo False
2022-05-08 21:14:01	lambdabot	 (Bool,Nothing)
2022-05-08 21:14:06	ski	> let foo x = (typeOf x,cast x :: Maybe String) in foo "True"
2022-05-08 21:14:08	lambdabot	 ([Char],Just "True")
2022-05-08 21:14:52	haskell_apprenti	[exa] geekosaur I think I understand thinking about it more, thanks
2022-05-08 21:15:24	geekosaur	now, we do have a typeclass for what you've been talking about: Show
2022-05-08 21:15:30	←	Simon98 has quit (Quit: Client closed)
2022-05-08 21:15:31	geekosaur	and your toString is show
2022-05-08 21:15:51	[exa]	haskell_apprenti: btw the "some kind of representation exists" doesn't really hold in haskell programs. Stuff may be easily erased before it reaches runtime, and there are actual definition-less types (`data Void`)
2022-05-08 21:15:53	geekosaur	but again you must declare that you're using it
2022-05-08 21:16:42	ski	haskell_apprenti : you can use `Typeable', if you want to do type casting stuff. `Generic' to actually do introspect stuff on how the type was declared
2022-05-08 21:17:03	←	xff0x has quit (Ping timeout: 256 seconds)
2022-05-08 21:17:35	ski	(well, i'd rather say that `Void' has a collection of data constructors .. it just happens to be the empty collection)
2022-05-08 21:19:03	←	pretty_dumm_guy has quit (Ping timeout: 276 seconds)
2022-05-08 21:19:04	←	Vajb has quit (Read error: Connection reset by peer)
2022-05-08 21:19:14	→	Vajb has joined #haskell
2022-05-08 21:19:35	ski	haskell_apprenti : anyway .. what you might see as an annoyance here is actually a boon, in the sense that it allows one to reason about, infer stronger properties (things an operation definitely *can't* do), solely by inspecting its type signature. this is called "parametricity". parametric polymorphism in Haskell enjoys this. parametric polymorphism (called "generics") in e.g. Jave doesn't, because of 
2022-05-08 21:19:41	ski	`instanceof' and up-casting (and methods on `Object')
2022-05-08 21:21:01	haskell_apprenti	I don't find it annoying, I'm just interested in the theory of why its definitely true that a particular type signature must have a certain type implentation
2022-05-08 21:21:26	haskell_apprenti	like id be interested if there are proofs about it written somewhere if anyone could point me to that
2022-05-08 21:21:37	ski	e.g. if you see `foo :: (a -> Maybe b) -> [a] -> [b]', you *know* that `foo' can't itself inspect the `a' elements of the list, but can only pass them on to the callback, which is also the only place where the `b' elements in the output could possibly come from (apart from using `undefined' & `error' & `Control.Exception.throw', or infinite loops)
2022-05-08 21:21:46	haskell_apprenti	sorry not type implementation, concrete function implemenetation
2022-05-08 21:22:18	ski	@free bar :: Int -> [a] -> [a]
2022-05-08 21:22:18	lambdabot	$map f . bar x = bar x . $map f
2022-05-08 21:22:54	ski	this is a "free theorem", that says that it doesn't matter if you map some function `f' to the elements of the list, before or after you call `bar', since `bar' definitely won't look at, or change, the elements
2022-05-08 21:23:21	ski	(and this relies on parametricity)
2022-05-08 21:23:31	ski	@help free
2022-05-08 21:23:31	lambdabot	free <ident>. Generate theorems for free
2022-05-08 21:24:02	ski	@free transpose
2022-05-08 21:24:03	lambdabot	$map ($map f) . transpose = transpose . $map ($map f)
2022-05-08 21:24:12	ski	@free concat :: [[a]] -> [a]
2022-05-08 21:24:12	lambdabot	$map f . concat = concat . $map ($map f)
2022-05-08 21:25:49	haskell_apprenti	ski don't understand the @ free thing
2022-05-08 21:26:30	ski	@free reverse
2022-05-08 21:26:31	lambdabot	$map f . reverse = reverse . $map f
2022-05-08 21:26:34	haskell_apprenti	I feel like what you're saying though is since its parametrically polymorphic, the only thing we could do that will work with all types is pass it through eg identity
2022-05-08 21:26:54	haskell_apprenti	and the extension of that eg with list of types, pass through list of types
2022-05-08 21:27:14	ski	it says `$map' instead of `map', since it's assuming a generic mapping. but they should be the same. so read that as claiming
2022-05-08 21:27:24	ski	  map f . reverse = reverse . map f
2022-05-08 21:27:39	ski	is a true law/equality/equation (for every function `f')
2022-05-08 21:27:57	ski	or, expanding (putting in an explicit argument), this says that
2022-05-08 21:28:06	ski	  (map f . reverse) xs = (reverse . map f) xs
2022-05-08 21:28:11	ski	(for every `f' and every list `xs')
2022-05-08 21:28:29	ski	which is the same (by the definition of function composition, `(.)')
2022-05-08 21:28:40	ski	  map f (reverse xs) = reverse (map f xs)
2022-05-08 21:28:49	[exa]	haskell_apprenti: that's true, the only non-crashing function with type `a->a` is id. The only other thing you can do in haskell is to crash it with `undefined`.
2022-05-08 21:28:58	haskell_apprenti	ski  think i need the ELI5 version
2022-05-08 21:29:22	ski	and now this is explicitly saying that if you reverse `xs', and then `map' `f' on every element of the reversed list, then that's the same as first mapping `f' on `xs', and then reversing the mapped list
2022-05-08 21:29:27	haskell_apprenti	[exa] is that proven formally somewhere
2022-05-08 21:29:53	[exa]	yes
2022-05-08 21:30:10	ski	haskell_apprenti : do you understand the last version of the equation, above ?
2022-05-08 21:30:21	ski	(with my attempted elucidation of it)
2022-05-08 21:30:46	ski	btw, you could perhaps try checking "Theorems for free!" by Philip Wadler in 1989-09 at <https://homepages.inf.ed.ac.uk/wadler/topics/parametricity.html#free>
2022-05-08 21:31:23	haskell_apprenti	[exa] can you point me to where that is proven
2022-05-08 21:31:35	haskell_apprenti	ski yes I think I understand that last version thanks
2022-05-08 21:31:41	[exa]	yes, trying to find it written somewhere
2022-05-08 21:32:01	[exa]	(likely the Wadler's paper above will contain the intuition too)
2022-05-08 21:32:03	haskell_apprenti	ski I understand the statement of the theorem, but how do we know its true
2022-05-08 21:32:29	ski	the previous versions are merely fancy (so-called, "pointless") ways to express the same thing (using composition / function pipeline, instead)
2022-05-08 21:33:51	haskell_apprenti	ahh ok that wadler "theorems for free" looks like what I want to look at
2022-05-08 21:33:55	haskell_apprenti	looks dense thuogh
2022-05-08 21:34:00	haskell_apprenti	thanks for the help!
2022-05-08 21:36:34	ski	haskell_apprenti : we know it holds for an idealized calculus (second-order polymorphic lambda calculus (F2), in the papers mentioning Reynolds in the abstract, at the link i gave you), because of the abstraction theorem. the "theorems for free" is about deriving an immediate result/law, from a `forall'-type (a universal type), using that theorem
2022-05-08 21:38:39	ski	i'm not sure if someone has attempted to prove the corresponding thing, for a system that looks more like Haskell (including various stuff like partiality, nontermination, and possibly a bunch of fancy type system features making it more powerful than F2) .. but we're basically treating it like it behaves similarly
2022-05-08 21:38:58	[exa]	haskell_apprenti: btw it's useful to read about curry-howard correspondence; by dragging in logic it paints a much cleaner image of stuff that can't be done. E.g. here: https://en.wikibooks.org/wiki/Haskell/The_Curry%E2%80%93Howard_isomorphism#Intuitionistic_vs_classical_logic
2022-05-08 21:39:20	ski	(don't worry, the "full abstraction" stuff by Reynolds is denser)
2022-05-08 21:41:05	ski	for Curry-Howard, it can also be neat if one knows a little about basic set theory (cardinality, cartesian product, disjoint union, exponential set (function set))
2022-05-08 21:43:19	ski	haskell_apprenti : "but how do we know its true" -- from an appeal to intuition standpoint, there is no way that `reverse' could inspect or interact with the elements (apart from forcing them, and the worst that may do is give nontermination or partiality). .. so, the only thing it can do is return some of the input elements, as output elements (possibly reordering, and possibly duplicating (and dropping 
2022-05-08 21:43:25	ski	others))
2022-05-08 21:43:49	ski	but its behaviour can't depend on the innards of the elements, it can only depend on the length of the input list
2022-05-08 21:44:22	→	Simon91 has joined #haskell
2022-05-08 21:44:26	Simon91	Hello again
2022-05-08 21:44:52	ski	(the only way to depend on the innards would be to either pass off an element to a callback (but there's no such, in this case), or to use a typeclass-overloaded operation on them (but there's no class constraints in the type signature, so that's not going to happen, either))
2022-05-08 21:45:35	Simon91	GHCI coming up with "funktionB :: Integral a => [a] -> [a]" for "funktionB x = [ if (y `mod` 2 /= 0) then (2 * y) else y | y <- x]" is due to GHCI being smart and knowing that you need Integers for the operations in brackets?
2022-05-08 21:46:33	c_wraith	It's inference from the way the elements are used.
2022-05-08 21:46:34	ski	if you do `foo :: Eq a => Int -> [a] -> [a]', then `foo' can pass off elements to `(==)' and `(/=)' (and other operations with an `Eq' constraint, like e.g. `allDistinct :: Eq a => [a] -> Bool')
2022-05-08 21:46:53	c_wraith	You're using (/=), (*), and mod.  
2022-05-08 21:47:03	ski	@type mod
2022-05-08 21:47:04	lambdabot	Integral a => a -> a -> a
2022-05-08 21:47:15	ski	@type (*)
2022-05-08 21:47:17	lambdabot	Num a => a -> a -> a
2022-05-08 21:47:19	ski	@type (/=)
2022-05-08 21:47:20	lambdabot	Eq a => a -> a -> Bool
2022-05-08 21:47:29	ski	`Num' and `Eq' are superclasses of `Integral'
2022-05-08 21:47:31	c_wraith	from that, it derives Eq, Num, and Integral - but it turns out Integral requires Eq and Num, so it reduces the display set
2022-05-08 21:48:02	ski	Simon91 : also, your (round) brackets there are redundant
2022-05-08 21:50:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-05-08 21:50:28	c_wraith	Oh, there's one other thing contributing to inference there - the 0 literal. It also implies a Num constraint. It's redundant in this case, but worth knowing
2022-05-08 21:50:47	c_wraith	Err.  the 0 and 2 literals.
2022-05-08 21:50:49	Simon91	c_wraith and it chooses Integral because it always chooses the most sub subclass from all classes involved?
2022-05-08 21:50:53	→	raehik has joined #haskell
2022-05-08 21:51:13	c_wraith	Simon91: no, doesn't show Eq or Num because they're implied by Integral
2022-05-08 21:51:36	ski	haskell_apprenti : so, anyway. the only way to do type introspection stuff, and being able to look "inside" an input whose type is a type variable (apart from passing it off to a callback that accepts it, but then the callback comes from the caller, not the callee/implementor of the operation) is to explicitly opt-in to it, by using a `Typable' or `Generic' constraint, or so, on the type variable
2022-05-08 21:51:59	ski	(well, there's also GADTs ..)
2022-05-08 21:52:05	Simon91	ski yeah I thought so, but it felt weird and error-prone not putting them (even though it's probably the other way round)
2022-05-08 21:52:06	c_wraith	Simon91: that may sound like the same thing, but classes aren't all in a single hierarchy
2022-05-08 21:52:44	c_wraith	Simon91: so there's no guarantee there is such a thing as a single most-sub subclass.
2022-05-08 21:52:45	Simon91	c_wraith I see. Very interesting.
2022-05-08 21:52:54	ski	Simon91 : pointing out redundant brackets (when it's likely they weren't put in consciously for an explicit reason), is a pet peeve of mine ;)
2022-05-08 21:53:17	←	Pickchea has quit (Quit: Leaving)
2022-05-08 21:53:19	Simon91	hahah
2022-05-08 21:53:42	c_wraith	ski: parse error, unmatched closing ')' at end of input
2022-05-08 21:54:22	ski	example of a consciously inserted pair of brackets :
2022-05-08 21:54:29	ski	  map :: ( a  ->  b )
2022-05-08 21:54:31	ski	      -> ([a] -> [b])
2022-05-08 21:54:37	ski	(the second pair of round brackets)
2022-05-08 21:54:51	ski	@type map . map . map
2022-05-08 21:54:53	lambdabot	(a -> b) -> [[[a]]] -> [[[b]]]
2022-05-08 21:55:01	←	machinedgod has quit (Ping timeout: 256 seconds)
2022-05-08 21:55:12	ski	@type zipWith . zipWith
2022-05-08 21:55:14	lambdabot	(a -> b -> c) -> [[a]] -> [[b]] -> [[c]]
2022-05-08 21:55:59	c_wraith	that doesn't look useful! :P
2022-05-08 21:56:32	c_wraith	(I'm sure it's come up once or twice in history)
2022-05-08 21:57:06	ski	@let foldL :: (s -> a -> s) -> (s -> [a] -> s); foldL = foldl
2022-05-08 21:57:07	lambdabot	 Defined.
2022-05-08 21:57:13	ski	@type foldL . foldL
2022-05-08 21:57:14	lambdabot	(s -> a -> s) -> s -> [[a]] -> s
2022-05-08 21:58:54	ski	(the types of the fold right function in OCaml also allows this. but, alas, the signature of the Haskell one prevents this, without interleaving a `flip')
2022-05-08 21:59:45	ski	Simon91 : anyway, you'll get used to it (hopefully)
2022-05-08 22:01:25	ski	(for some reason, it seems that many people who've been using Haskell for years still don't know that the brackets in `(Foo ...) == ... = ...' and in `case ... of (x:xs) -> ...; ...' or `... where (x:xs) = ...' are redundant ..)
2022-05-08 22:02:05	ski	(hm, and there's also `foo :: (Eq a) => ..a..')
2022-05-08 22:04:13	geekosaur	I know it but I generally go for consistency
2022-05-08 22:04:51	ski	yea, i figure some do (and several don't know)
2022-05-08 22:05:16	→	tzh has joined #haskell
2022-05-08 22:06:34	→	romesrf has joined #haskell
2022-05-08 22:14:07	haskell_apprenti	ski will check out the wiki books thing you sent
2022-05-08 22:15:02	haskell_apprenti	also nice intuition thanks
2022-05-08 22:15:56	←	raehik has quit (Ping timeout: 248 seconds)
2022-05-08 22:16:48	elmyr	@type (.)
2022-05-08 22:16:50	lambdabot	(b -> c) -> (a -> b) -> a -> c
2022-05-08 22:17:02	elmyr	ski: doesn't look like Caleskell there either
2022-05-08 22:19:36	→	__monty__ has joined #haskell
2022-05-08 22:24:38	→	alp_ has joined #haskell
2022-05-08 22:25:47	→	gurkenglas has joined #haskell
2022-05-08 22:25:50	dminuoso	[Leary]: Oh wow, thanks. Yes!
2022-05-08 22:28:11	←	haskell_apprenti has quit (Quit: Client closed)
2022-05-08 22:30:25	⚡	ski nods to elmyr
2022-05-08 22:30:28	→	nate1 has joined #haskell
2022-05-08 22:35:38	→	econo has joined #haskell
2022-05-08 22:38:40	←	Simon91 has quit (Quit: Client closed)
2022-05-08 22:40:59	→	bahamas has joined #haskell
2022-05-08 22:41:32	←	nate1 has quit (Ping timeout: 248 seconds)
2022-05-08 22:50:22	←	xaotuk has quit (Read error: Connection reset by peer)
2022-05-08 22:50:44	←	mbuf has quit (Quit: Leaving)
2022-05-08 22:53:08	←	jlamothe has quit (Quit: leaving)
2022-05-08 22:55:37	→	xaotuk has joined #haskell
2022-05-08 22:56:07	←	jakalx has left #haskell
2022-05-08 22:58:13	→	jakalx has joined #haskell
2022-05-08 23:02:32	→	haskell_apprenti has joined #haskell
2022-05-08 23:02:42	←	haskell_apprenti has quit (Client Quit)
2022-05-08 23:06:36	←	xaotuk has quit (Ping timeout: 240 seconds)
2022-05-08 23:10:34	←	bitdex has quit (Ping timeout: 240 seconds)
2022-05-08 23:11:39	→	raehik has joined #haskell
2022-05-08 23:13:41	←	lambdap2 has quit (Quit: lambdap2)
2022-05-08 23:14:13	→	lambdap2 has joined #haskell
2022-05-08 23:14:45	→	bitdex has joined #haskell
2022-05-08 23:15:36	→	zeenk has joined #haskell
2022-05-08 23:19:34	→	dcompoze has joined #haskell
2022-05-08 23:19:52	←	dcompoze has quit (Client Quit)
2022-05-08 23:22:50	←	mikoto-chan has quit (Read error: Connection reset by peer)
2022-05-08 23:28:23	→	mikoto-chan has joined #haskell
2022-05-08 23:29:32	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-08 23:42:10	←	notzmv has quit (Ping timeout: 250 seconds)
2022-05-08 23:46:23	←	jakalx has left #haskell
2022-05-08 23:46:28	→	melas has joined #haskell
2022-05-08 23:48:30	→	jakalx has joined #haskell
2022-05-08 23:50:50	→	notzmv has joined #haskell
2022-05-08 23:51:35	ℹ	irc: disconnected from server
2022-05-09 15:05:13	→	oxide has joined #haskell
2022-05-09 15:05:13	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-05-09 15:05:13	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-05-09 15:05:13	ℹ	Channel #haskell: 707 nicks (1 op, 0 voices, 706 normals)
2022-05-09 15:05:15	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-05-09 15:05:15	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-05-09 15:05:27	sm	(well in my mind it implied that anyway)
2022-05-09 15:05:45	merijn	I mean, you could insert "Groups adjacent elements. That is, <insert old specification>"
2022-05-09 15:06:11	merijn	And by "you" I mean "anyone but me" :D
2022-05-09 15:07:10	dminuoso	I think this is miscommunication. sm expects it to do A), documentation says it does B), though you can do A via B if you sort the input list first.
2022-05-09 15:07:46	dminuoso	The names "group" and "groupBy" are certainly poorly chosen, since their name itself implies what sm wants.
2022-05-09 15:07:52	merijn	well
2022-05-09 15:08:01	merijn	It also implies what it actually does
2022-05-09 15:08:14	merijn	it's just there's 2 different things than can reasonably be described the same way
2022-05-09 15:08:35	dminuoso	If "groupBy" behaves slightly different from what similarly named functions in other programming languages do, it doesnt help. :)
2022-05-09 15:08:37	←	gurkenglas has quit (Ping timeout: 256 seconds)
2022-05-09 15:08:39	dminuoso	Right
2022-05-09 15:09:15	merijn	I think the name is fine, it think the specification is fine (in the sense of complete and accurate), I just think it's lacking a 4 word summary for the impatient
2022-05-09 15:09:22	dminuoso	sm: For what its worth, this actually caused a bug in our compiler that was quite tricky to find. :)
2022-05-09 15:09:34	sm	I can see "group" meaning either behaviour. But I think the one I wanted is the one people most often want, and the name or at least doc of the function could probably be make a little more proof against folks like me
2022-05-09 15:09:51	dminuoso	If you feel the documentation can be improved, feel free to make a pull request.
2022-05-09 15:09:57	sm	dminuoso: thanks, now I feel better! :)
2022-05-09 15:10:21	merijn	sm: Personally whenever I end up wanting to group things your way I tend towards a fold building a Map
2022-05-09 15:10:35	merijn	Which is why we should change the Semigroup instance of Map >.<
2022-05-09 15:10:42	merijn	Join my crusade!
2022-05-09 15:10:49	merijn	Excise the evil stupid instance
2022-05-09 15:10:49	dminuoso	What semigroup instance do you want?
2022-05-09 15:10:59	sm	personally I add a sort. 
2022-05-09 15:11:10	merijn	dminuoso: "(Ord k, Semigroup v) => Semigroup (Map k v)"
2022-05-09 15:11:27	dminuoso	This unions them together, right?
2022-05-09 15:11:32	merijn	dminuoso: Yes
2022-05-09 15:11:41	dminuoso	Ah, I see what you want
2022-05-09 15:11:42	merijn	The current version is a left-biased union
2022-05-09 15:11:44	merijn	Which sucks
2022-05-09 15:12:07	merijn	I wanna just do "foldMap (\k -> M.singleton k (Sum 1))" to count stuff
2022-05-09 15:12:15	dminuoso	I fear your crusade is a hopeless one, you will be riding on Dapple.
2022-05-09 15:12:17	merijn	So many useful tricks!
2022-05-09 15:12:31	dminuoso	The kind of breackage that would insue could be hard to measure
2022-05-09 15:12:39	merijn	left-biased union is such a shitty instance :(
2022-05-09 15:12:45	merijn	and I have to reimplement mine every time
2022-05-09 15:12:53	dminuoso	Yeah, but getting rid of that one seems impossible now.
2022-05-09 15:13:08	dminuoso	Well, getting rid of is easy. Replacing it with the one you suggested..
2022-05-09 15:13:36	dminuoso	Can you tie depretation warnings into typeclass instances?
2022-05-09 15:13:57	merijn	not yet
2022-05-09 15:14:51	dminuoso	I think this this is mandatory for your crusade
2022-05-09 15:15:14	←	mmhat has quit (Quit: WeeChat 3.5)
2022-05-09 15:15:59	dminuoso	For me, what I really sorely miss, is a builtin interface for insert that fails on conflict.
2022-05-09 15:16:08	merijn	Ah, yes
2022-05-09 15:16:13	dminuoso	Everywhere I use maps, I re-roll the same thing with alterF
2022-05-09 15:16:18	merijn	dminuoso: Same
2022-05-09 15:16:33	merijn	but never quite exactly the same :\
2022-05-09 15:16:42	dminuoso	Yup!
2022-05-09 15:16:57	dminuoso	So I guess the answer to that is: alterF is exactly right.
2022-05-09 15:17:04	dminuoso	Just uncomfortable to use.
2022-05-09 15:20:34	←	fef has quit (Ping timeout: 240 seconds)
2022-05-09 15:22:41	Franciman	 lol
2022-05-09 15:25:30	←	nut has quit (Ping timeout: 240 seconds)
2022-05-09 15:27:26	dminuoso	How do you reset lambdabot?
2022-05-09 15:28:17	←	lortabac has quit (Read error: Connection reset by peer)
2022-05-09 15:28:36	←	CiaoSen has quit (Ping timeout: 240 seconds)
2022-05-09 15:28:48	dminuoso	merijn:  maybe this helper might be the gap?
2022-05-09 15:28:50	dminuoso	:t insertF
2022-05-09 15:28:52	lambdabot	(Applicative f, Ord k) => (k -> t -> t -> f (Maybe t)) -> k -> t -> M.Map k t -> f (M.Map k t)
2022-05-09 15:29:04	→	eggplantade has joined #haskell
2022-05-09 15:29:08	dminuoso	Defined as: insertF f k a = M.alterF go k where go Nothing   = pure (Just a);  go (Just a') = f k a a'
2022-05-09 15:29:19	tdammers	jeez, for a second there I thought I was reading a political debate: "left-biased union is such a shitty instance"...
2022-05-09 15:29:56	merijn	tdammers: Naah, my political discourse is more: I'm not saying cannibalism is great, but maybe we should bring back eating prime ministers that disappoint...
2022-05-09 15:30:18	merijn	dminuoso: What's the second 't' in that first function?
2022-05-09 15:30:38	merijn	hmm
2022-05-09 15:30:50	merijn	this definition is to confusing for me on one line :p
2022-05-09 15:31:17	→	searemind has joined #haskell
2022-05-09 15:31:26	dminuoso	merijn:  Ah that's just the two values, the one existing in the map and the new one
2022-05-09 15:31:38	dminuoso	We can drop the key or the value-to-be-inserted
2022-05-09 15:32:00	dminuoso	The point really is to just let you cover the conflict case
2022-05-09 15:32:54	dminuoso	The choices I usually have is either replace but collect a warning, or dont replace but collect a warning or throw some exception
2022-05-09 15:33:25	←	eggplantade has quit (Ping timeout: 246 seconds)
2022-05-09 15:35:31	←	bahamas has quit (Ping timeout: 246 seconds)
2022-05-09 15:36:28	←	jmdaemon has quit (Ping timeout: 248 seconds)
2022-05-09 15:37:25	←	searemind has quit (Remote host closed the connection)
2022-05-09 15:44:57	←	mikoto-chan has quit (Ping timeout: 252 seconds)
2022-05-09 15:45:24	→	nut has joined #haskell
2022-05-09 15:47:10	←	xff0x has quit (Ping timeout: 260 seconds)
2022-05-09 15:47:58	←	pretty_dumm_guy has quit (Quit: WeeChat 3.5)
2022-05-09 15:48:32	→	lortabac has joined #haskell
2022-05-09 15:48:33	→	pretty_dumm_guy has joined #haskell
2022-05-09 15:48:40	→	kuribas` has joined #haskell
2022-05-09 15:50:09	←	kuribas has quit (Ping timeout: 248 seconds)
2022-05-09 15:50:25	→	xaotuk has joined #haskell
2022-05-09 15:51:57	jmcarthur	jackdk: This looks great! Thank you!
2022-05-09 15:53:58	→	Pickchea has joined #haskell
2022-05-09 15:57:10	→	dhil has joined #haskell
2022-05-09 15:58:45	→	CiaoSen has joined #haskell
2022-05-09 16:02:06	kuribas`	I was attempting to put type variables in a record, but sadly haskell doesn't accept this syntax...
2022-05-09 16:02:54	kuribas`	data Foo :: (FooVars * -> *) where Foo :: { aFoo :: foo foovars , aBar :: bar foovars} -> Foo ('FooVars{ foo = aFoo, bar = aBar})
2022-05-09 16:08:59	tdammers	merijn: any political stance that starts with "I'm not saying cannibalism is great, but..." is at least interesting in my book
2022-05-09 16:09:28	maerwald	xD
2022-05-09 16:09:52	maerwald	"...but it does taste like chicken"
2022-05-09 16:10:00	kuribas`	This works: data Foo :: (FooVars * -> *) where Foo :: { aFoo :: foo foovars , aBar :: bar foovars} -> Foo ('FooVars aFoo aBar)
2022-05-09 16:10:07	int-e	. o O ( Soylent Green )
2022-05-09 16:10:32	kuribas`	But it's not better than data Foo foo bar = ...
2022-05-09 16:10:51	kuribas`	I am doing to much idris probably...
2022-05-09 16:14:36	←	merijn has quit (Ping timeout: 276 seconds)
2022-05-09 16:16:45	→	jgeerds has joined #haskell
2022-05-09 16:19:12	kuribas`	I am experimenting with a REST framework using higher kinded records.
2022-05-09 16:19:13	kuribas`	It doesn't like anyone attempted this before?
2022-05-09 16:19:14	←	jespada has quit (Quit: Textual IRC Client: www.textualapp.com)
2022-05-09 16:19:15	kuribas`	Basically the specification would be in an instance of a HKD record.
2022-05-09 16:19:16	kuribas`	For each endpoint you make a record of captures, a record of parameters, etc...
2022-05-09 16:21:38	←	Lord_of_Life has quit (Ping timeout: 260 seconds)
2022-05-09 16:22:22	→	kuribas`` has joined #haskell
2022-05-09 16:22:49	→	Lord_of_Life has joined #haskell
2022-05-09 16:24:00	←	kuribas` has quit (Ping timeout: 252 seconds)
2022-05-09 16:24:11	→	jespada has joined #haskell
2022-05-09 16:34:48	←	jmcarthur has quit (Read error: Connection reset by peer)
2022-05-09 16:35:02	→	jmcarthur has joined #haskell
2022-05-09 16:37:28	→	dostoevsky5 has joined #haskell
2022-05-09 16:38:38	←	dostoevsky has quit (Read error: Connection reset by peer)
2022-05-09 16:38:38	ℹ	dostoevsky5 is now known as dostoevsky
2022-05-09 16:40:57	→	merijn has joined #haskell
2022-05-09 16:41:17	←	yauhsien has quit (Remote host closed the connection)
2022-05-09 16:44:51	→	yauhsien has joined #haskell
2022-05-09 16:49:22	←	yauhsien has quit (Ping timeout: 246 seconds)
2022-05-09 16:53:24	→	mmhat has joined #haskell
2022-05-09 16:55:56	←	jgeerds has quit (Ping timeout: 248 seconds)
2022-05-09 16:58:38	→	gurkenglas has joined #haskell
2022-05-09 16:59:21	→	mrd has joined #haskell
2022-05-09 17:03:25	merijn	int-e: I was more referring to: https://en.wikipedia.org/wiki/Johan_de_Witt#Disaster_year_and_De_Witt's_Death :p
2022-05-09 17:04:28	→	xff0x has joined #haskell
2022-05-09 17:06:27	←	raehik has quit (Quit: WeeChat 3.5)
2022-05-09 17:11:06	→	raehik has joined #haskell
2022-05-09 17:11:08	geekosaur	dminuoso, did you want @undefine ?
2022-05-09 17:11:19	dminuoso	Ahh yes, thats the one.
2022-05-09 17:11:34	dminuoso	lambdabot is mysterious to me, I cant even figure out how have it tell me how to use it.
2022-05-09 17:11:50	←	odnes has quit (Ping timeout: 240 seconds)
2022-05-09 17:12:01	maerwald	dminuoso: you have to start a relationship
2022-05-09 17:12:46	←	Pickchea has quit (Quit: Leaving)
2022-05-09 17:14:50	→	bontaq has joined #haskell
2022-05-09 17:15:36	←	geekosaur has quit (Quit: Leaving)
2022-05-09 17:16:42	←	foul_owl has quit (Ping timeout: 256 seconds)
2022-05-09 17:17:04	←	littlebo1eep has quit (Ping timeout: 240 seconds)
2022-05-09 17:17:26	→	geekosaur has joined #haskell
2022-05-09 17:17:30	int-e	@list eval
2022-05-09 17:17:30	lambdabot	eval provides: run let define undefine
2022-05-09 17:18:33	int-e	@help eval
2022-05-09 17:18:33	lambdabot	eval. Do nothing (perversely)
2022-05-09 17:19:53	int-e	(I don't know the story behind that one... maybe some other bot that had an @eval command?)
2022-05-09 17:21:10	←	jespada has quit (Ping timeout: 240 seconds)
2022-05-09 17:22:06	→	gensyst has joined #haskell
2022-05-09 17:22:10	merijn	@eval foo
2022-05-09 17:22:23	merijn	hmm
2022-05-09 17:22:49	jmcarthur	> "maybe it's just a name for this?"
2022-05-09 17:22:50	lambdabot	 "maybe it's just a name for this?"
2022-05-09 17:22:58	geekosaur	that's @run
2022-05-09 17:23:02	jmcarthur	Ah
2022-05-09 17:23:27	jmcarthur	Oh, then eval must just be the name of the plugin, not a command 
2022-05-09 17:23:27	merijn	There was one command that just got auto-corrected to echo, was just trying to remember if it was eval or something else :p
2022-05-09 17:23:34	gensyst	I want to create the concept of a "quality", where each instance obviously knows what it's own quality type is. This doesn't work: https://dpaste.com/62UEWPCLP   Can you help lead me in the right direction?
2022-05-09 17:23:46	jmcarthur	@help blah
2022-05-09 17:23:46	lambdabot	help <command>. Ask for help for <command>. Try 'list' for all commands
2022-05-09 17:23:49	jmcarthur	Hmm
2022-05-09 17:23:56	geekosaur	I really do need to finish my lb help documentation
2022-05-09 17:24:07	merijn	gensyst: Well that first example looks 100% wrong
2022-05-09 17:24:14	→	jespada has joined #haskell
2022-05-09 17:24:16	merijn	gensyst: You've define a class "Foo -> a"
2022-05-09 17:24:23	merijn	Pretty sure that has no sensible instances
2022-05-09 17:24:34	merijn	qual could only return undefined
2022-05-09 17:24:46	dminuoso	Gahh. I've done a huge mistake. I decided that I wanted my server to interact with dbus.
2022-05-09 17:24:47	merijn	eh, quality could only return undefined
2022-05-09 17:24:51	dminuoso	Horrible horrible mistake.
2022-05-09 17:24:52	gensyst	Elsewhere, I have some generic code that has (HasQuality q) =>    and then I should be able to query the quality - whatever type that may be. (For Dog that happens to be Double)
2022-05-09 17:24:55	merijn	dminuoso: That sounds dumb, yes
2022-05-09 17:25:07	merijn	gensyst: That's not what you wrote, though :)
2022-05-09 17:25:17	merijn	gensyst: And using typeclasses for that sounds like a mistake
2022-05-09 17:25:37	→	kosmikus has joined #haskell
2022-05-09 17:25:58	geekosaur	had a feeling that "object" meant trying to use typeclasses for OOP
2022-05-09 17:26:07	merijn	gensyst: "quality :: a -> qual" is exactly the same as "quality :: a -> b", can you see how that's...rather useless?
2022-05-09 17:26:18	gensyst	yeah i do now lol
2022-05-09 17:26:48	→	littlebobeep has joined #haskell
2022-05-09 17:26:51	dminuoso	gensyst: The best you can do is this:
2022-05-09 17:27:10	dminuoso	class HasQuality t a | t -> a where quality :: proxy t -> a
2022-05-09 17:27:13	Hecate	hmm.
2022-05-09 17:27:20	Hecate	I'm still very unclear about non-determinism
2022-05-09 17:27:21	merijn	dminuoso: Disagree :p
2022-05-09 17:27:35	Hecate	how does the list monad manages it? I thought it was the prerogative of IO?
2022-05-09 17:27:42	merijn	dminuoso: That certainly does what he intended to write, but I'd argue the best way to do it is to "not" do it :)
2022-05-09 17:27:50	dminuoso	merijn:  *shrugs*
2022-05-09 17:27:58	dminuoso	Im just offering insights.
2022-05-09 17:27:58	gensyst	Here was my second attempt, https://dpaste.com/CMZFWUCFS  but now suddenly Dog can't become an instance since it's already knows its own quality is Double
2022-05-09 17:28:00	merijn	Hecate: It's a matter of viewpoint, it doesn't do actual non-determinism
2022-05-09 17:28:11	merijn	Hecate: It explores *all* possible paths
2022-05-09 17:28:25	merijn	Which you can see as modelling a stochastic process (i.e. non-determinism)
2022-05-09 17:28:34	→	yauhsien has joined #haskell
2022-05-09 17:28:36	dminuoso	Hecate: Consider bind on [] as inspecting a "random/non-deterministic" choice and producing a non-deterministic path from that.
2022-05-09 17:29:05	gensyst	merijn, so what would you do instead?
2022-05-09 17:29:17	Hecate	so, like a breadth-first search where all possibilities are explored?
2022-05-09 17:29:24	dminuoso	gensyst: zoom out and look at what the problem is you're trying to solve.
2022-05-09 17:29:27	merijn	Hecate: Yes
2022-05-09 17:29:36	Hecate	hmm.
2022-05-09 17:29:45	dminuoso	Hecate: well its even more, because you can generate more possibilities.
2022-05-09 17:30:00	Hecate	is my intution correct by trying to link this to list comprehensions? 
2022-05-09 17:30:03	Hecate	ah.
2022-05-09 17:30:06	Hecate	damnit dminuoso :D
2022-05-09 17:30:16	Hecate	my beautiful baby intuition, all shatered!
2022-05-09 17:30:17	merijn	dminuoso: I mean, whether those possibilities are generated or you are exploring "pre-existing" possibilities is a matter of perspective
2022-05-09 17:30:26	merijn	Hecate: Naah, your intuition works
2022-05-09 17:30:27	gensyst	dminuoso, do you mean I should simply use... functions? someTypeToWhateverQuality  as the need arises?
2022-05-09 17:30:44	dminuoso	That sounds reasonable.
2022-05-09 17:31:11	merijn	Hecate: "you can generate more possibilities" (via >>= of "a -> [b]"), but you could consider those (latent) possibilities as "always existing and getting explored/discovered via BFS"
2022-05-09 17:31:19	←	nut has quit (Remote host closed the connection)
2022-05-09 17:31:23	→	eggplantade has joined #haskell
2022-05-09 17:31:23	merijn	Hecate: I.e. big step vs small step view ;)
2022-05-09 17:31:24	Hecate	ah okay so it's still coming from the domain
2022-05-09 17:31:31	dminuoso	Over the years, I've slowly come to the point where typeclasses are almost never a good answer. I only resort to them for highly lawful things, or when fiddling a dictionary through manually is a PITA.
2022-05-09 17:31:46	merijn	gensyst: Pretty much
2022-05-09 17:31:55	Hecate	what dminuoso said
2022-05-09 17:32:13	Hecate	(maybe with 2 exceptions for my very specific case but we all have our sins.)
2022-05-09 17:32:15	merijn	I like them for tagless-final style stuff
2022-05-09 17:33:07	←	yauhsien has quit (Ping timeout: 256 seconds)
2022-05-09 17:33:31	merijn	Hecate: I assumed that dminuoso was referring to the right-hand of bind introducing "new" possibilities, but of course it's equally valid to just consider those "new" possibilities as "always having been there, but unexplored", since it's all pure anyway
2022-05-09 17:33:38	dminuoso	Hecate: I found ReadS to be a great sourth of intuition about how list represents non-determinism.
2022-05-09 17:33:48	dminuoso	*source even
2022-05-09 17:34:32	Hecate	I see
2022-05-09 17:34:57	Hecate	I think I'm going not to focus too much on the "non-det" terminology here because I'm trying to think in a matter of outside effects, etc
2022-05-09 17:35:24	←	eggplantade has quit (Ping timeout: 240 seconds)
2022-05-09 17:36:28	lortabac	non-deterministic in Prolog means "it can have multiple solutions"
2022-05-09 17:36:53	lortabac	if you translate it to Haskell, it's a way to emulate that kind of behavior
2022-05-09 17:37:14	lortabac	ie. a function that can have multiple results
2022-05-09 17:37:19	dminuoso	I guess that perspective maps very nicely to ReadS
2022-05-09 17:37:59	Hecate	that is true
2022-05-09 17:38:04	Hecate	https://koka-lang.github.io/koka/doc/book.html#why-effects <- I found this a nice read
2022-05-09 17:38:14	lortabac	the monad instance allows you to compose functions that can have multiple results, by giving you all the possible combinations
2022-05-09 17:38:40	merijn	Which is equivalent to having a BFS of possibilities you're exploring :p
2022-05-09 17:38:57	lortabac	yes
2022-05-09 17:39:03	←	geekosaur has quit (Read error: Connection reset by peer)
2022-05-09 17:39:08	→	allbery_b has joined #haskell
2022-05-09 17:39:11	ℹ	allbery_b is now known as geekosaur
2022-05-09 17:39:12	lortabac	somehow it only made sense to me after I learned Prolog
2022-05-09 17:39:16	Franciman	or calling the continution multiple times ^^
2022-05-09 17:39:30	←	jmcarthur has quit (Ping timeout: 240 seconds)
2022-05-09 17:39:45	lortabac	before learning Prolog the Monad instance for lists seemed completely arbitrary
2022-05-09 17:41:43	←	pavonia has quit (Quit: Bye!)
2022-05-09 17:41:50	Hecate	personally I use it for list comprehensions :P
2022-05-09 17:41:58	Hecate	that's the usecase that makes the most sense for me
2022-05-09 17:42:09	Hecate	it's just the "non-det" terminology that messed w/ my intuition
2022-05-09 17:42:16	Hecate	thank you, you three :)
2022-05-09 17:45:01	←	raym has quit (Ping timeout: 256 seconds)
2022-05-09 17:45:52	→	raym has joined #haskell
2022-05-09 17:47:49	Franciman	i can't seem to find ghciu system requirements
2022-05-09 17:47:53	Franciman	ghci*
2022-05-09 17:47:56	Franciman	in the last user manual
2022-05-09 17:48:04	Franciman	can i run it on a mcu?
2022-05-09 17:48:29	Franciman	if not, is there another haskell interpreter working on minimal devices, possibly without host?
2022-05-09 17:48:40	geekosaur	hugs?
2022-05-09 17:48:49	→	yauhsien has joined #haskell
2022-05-09 17:48:52	geekosaur	ghci is far from minimal; it's literally ghc --interactive
2022-05-09 17:48:54	Franciman	oh it's still active?
2022-05-09 17:48:57	Franciman	nice
2022-05-09 17:49:19	geekosaur	it's not being actively maintained aside from someone keeping it building on modern systems
2022-05-09 17:49:39	←	bitdex has quit (Quit: = "")
2022-05-09 17:50:55	gensyst	merijn, dminuoso thanks guys. turned out such a simple solution worked. haskell... lots of hammers to choose from.
2022-05-09 17:51:10	gensyst	or double-edged daggers i should say
2022-05-09 17:51:22	merijn	gensyst: Overenthusiastic overapplication of typeclasses is a classic beginner trap :)
2022-05-09 17:51:52	Franciman	ty very much geekosaur 
2022-05-09 17:52:03	Franciman	last release is 2006, i'd love to dig into the code now ^^
2022-05-09 17:52:09	merijn	"I don't understand typeclasses" -> "typeclasses are amazing I should use them everywhere" -> "I should probably almost never implement my own typeclasses except for some niche cases" is the usual development :p
2022-05-09 17:52:35	geekosaur	I skipped the middle step thouhg :)
2022-05-09 17:52:58	gensyst	:o
2022-05-09 17:53:01	merijn	I didn't, it makes diagnosing it in others easier :p
2022-05-09 17:53:02	maerwald	merijn: or just pass your own dictionary
2022-05-09 17:53:13	merijn	maerwald: Right, that's usually the right solution
2022-05-09 17:53:14	geekosaur	Franciman, many people believe ghc should have skipped all the weird record stuff it's come up with over the years and adopted hugs' Trex
2022-05-09 17:53:32	Franciman	Trex?
2022-05-09 17:53:49	merijn	geekosaur: Should skipped all the overloadedlabels/record fields stuff and just enabled NamedFieldPuns and NoFieldSelectors by default
2022-05-09 17:54:25	merijn	overloaded labels and record dot syntax are huge mistakes, which will hurt Haskell for decades to come, don't @ me :p
2022-05-09 17:55:03	exarkun	Speaking of typeclasses, why do both Exception and SomeException exist?
2022-05-09 17:55:32	geekosaur	SomeException isn't a typeclass, it's an existential wrapper for an exception
2022-05-09 17:55:33	dminuoso	exarkun: Great question https://simonmar.github.io/bib/papers/ext-exceptions.pdf
2022-05-09 17:55:44	dminuoso	exarkun:  This is one of the best and yet underused features in Haskell.
2022-05-09 17:56:00	dminuoso	We get proper exception hierarchies like you have in Java, with the same "catch a higher base class type of exceptions" semantics.
2022-05-09 17:56:08	Franciman	wow, hugs supports .NET
2022-05-09 17:56:17	merijn	Nobody uses it, because the documentation is only in that paper :p
2022-05-09 17:56:23	dminuoso	Heh.
2022-05-09 17:56:26	geekosaur	Franciman, https://www.haskell.org/hugs/pages/hugsman/exts.html#sect7.2
2022-05-09 17:56:35	merijn	90% of the uses of extensible exceptions that I know are people cribbing from my phd codebase after linking that here :p
2022-05-09 17:56:46	dminuoso	I belong to the other 10%
2022-05-09 17:56:49	Franciman	oh thanks geekosaur 
2022-05-09 17:56:54	Franciman	reminds me of sml's records
2022-05-09 17:57:16	→	acidjnk has joined #haskell
2022-05-09 17:57:25	maerwald	merijn: "documentation is only in that paper" is a common thing in haskell
2022-05-09 17:57:30	exarkun	Thanks for the link.  On my reading list now. :)
2022-05-09 17:58:28	Franciman	Hugs is written in C :O
2022-05-09 17:58:54	Franciman	maybe it's just the bootstarp
2022-05-09 17:58:59	geekosaur	nope
2022-05-09 17:59:13	geekosaur	iiirc it's actually written in c++
2022-05-09 17:59:33	geekosaur	downside is it's only an interpreter, not a compiler
2022-05-09 18:00:38	geekosaur	…and practically nothing written in the past 15 years works in it because nobody ever ported e.g. text to hugs' extensions system
2022-05-09 18:00:54	dminuoso	I honestly thing a lot of hackage would be way better off, if there was less "who can write the purest code" competitions with competing stacks of language extensions enabled. Just give me IO, and just give me dynamic exception hierarchies.
2022-05-09 18:01:12	merijn	dminuoso: Just give me checked exceptions :(
2022-05-09 18:01:23	dminuoso	merijn: Not trying my luck here.
2022-05-09 18:01:36	merijn	Anyone who mentions Either is getting thwapped with the thwapping stick
2022-05-09 18:01:47	dminuoso	That checked exceptions kickstarts another battle of "best effect system" with dependent typing and at least 20 extensions enabled.
2022-05-09 18:01:50	merijn	dminuoso: I'm irrational :p
2022-05-09 18:02:08	int-e	merijn: Let me bring up Control.Monad.Error then
2022-05-09 18:02:12	merijn	Naah, I am fundamentally convinced most effect systems are a mistake
2022-05-09 18:02:26	dminuoso	I think they are fine as explorations of ideas
2022-05-09 18:03:02	Franciman	thanks geekosaur this is a true pearl
2022-05-09 18:03:03	merijn	I want "functional" types checking the computation done by code. And I want "non-functional" types (wrt things like GC, performance/laziness, exceptions)
2022-05-09 18:03:09	merijn	And *most importantly*
2022-05-09 18:03:21	merijn	I don't want those separate things making each other less readable
2022-05-09 18:03:37	merijn	Which is what Control.Monad.Error and all the effect systems end up doing
2022-05-09 18:03:51	merijn	And basically all other attempts to encode non-functional constraint in Haskell's type system
2022-05-09 18:04:02	maerwald	stop making sense
2022-05-09 18:04:05	merijn	I just want multiple, independent, but collaborating type systems for these different things
2022-05-09 18:04:16	int-e	...
2022-05-09 18:04:38	merijn	I want statically checked exceptions of which I can guarantee the absence *without* changing division from "Fractional a => a -> a -> a" to encode that in the result
2022-05-09 18:04:48	int-e	I'm not sure this makes any sense. I mean, it's a nice dream to have, but how is that supposed to look like in practice... while maintaining readability?
2022-05-09 18:04:51	dminuoso	maerwald: Since we see eye-to-eye on TLS in Haskell, any preferred library for quickly interacting with HTTPS secured JSON APIs?
2022-05-09 18:05:09	dminuoso	Im seriously debating whether to just put a local nginx reverse proxy to handle TLS...
2022-05-09 18:05:11	merijn	int-e: I've started on prototypes a few times to figure that out/convince people
2022-05-09 18:05:22	dminuoso	So I dont have to rely on cryptonite or others
2022-05-09 18:05:24	merijn	int-e: But then I inevitably run out of motivation to do that in my spare time :p
2022-05-09 18:05:40	merijn	And no one wanted to let me do a PHD on that (at least not in a location I was willing to live)
2022-05-09 18:05:48	merijn	So, we'll probably never know :p
2022-05-09 18:06:36	int-e	GHC does have way too many extensions though... and because they're there, people use them :P
2022-05-09 18:07:11	int-e	(Not all people use all of them, of course. It's like C++ where everyone has their favorite subset. Not a redeeming quality of C++, btw.)
2022-05-09 18:07:38	dminuoso	Maybe we should do an IPO for GHC. By then, stockholders will install a new board that will monetarize GHC. Each use of a Language pragma costs an EUR per download on hackage.
2022-05-09 18:07:48	dminuoso	Problem solved?
2022-05-09 18:09:15	int-e	. o O ( cabal: Warning: This package enables the following extensions: [...]. Do you know what they do? )
2022-05-09 18:09:56	dminuoso	Unrelatedly, Im thinking about a program that just installs a few callbacks via FFI but has nothing else to do. How can I reliably block the main thread?
2022-05-09 18:15:10	ℹ	irc: disconnected from server
2022-05-09 18:17:55	→	oxide has joined #haskell
2022-05-09 18:17:55	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-05-09 18:17:55	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-05-09 18:17:55	ℹ	Channel #haskell: 704 nicks (1 op, 0 voices, 703 normals)
2022-05-09 18:17:56	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-05-09 18:17:56	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-05-09 18:17:58	dminuoso	Ah!
2022-05-09 18:18:00	dminuoso	Where?
2022-05-09 18:18:11	merijn	dminuoso: Except it's in a GHC issues and I can't find it, because you can't search for issues you commented on on gitlab...
2022-05-09 18:18:24	merijn	Only ones you created
2022-05-09 18:18:25	merijn	RIP
2022-05-09 18:18:25	dminuoso	Haha, sounds like gitlab alright.
2022-05-09 18:18:37	→	gehmehgeh has joined #haskell
2022-05-09 18:18:38	merijn	So "somewhere" :)
2022-05-09 18:19:42	merijn	dminuoso: Ah! God is with you
2022-05-09 18:19:47	merijn	dminuoso: There's a discussion here: https://gitlab.haskell.org/ghc/ghc/-/issues/20031
2022-05-09 18:21:30	merijn	dminuoso: The problem boils down to "signal handling in a multi-threaded process is lunacy, because they weren't designed for that" and since the RTS essentially always uses threads you are *always* a multi-threaded program
2022-05-09 18:22:23	maerwald	dminuoso: https://hackage.haskell.org/package/http-client-openssl
2022-05-09 18:23:03	←	gensyst has quit (Quit: Leaving)
2022-05-09 18:23:28	maerwald	or https://hackage.haskell.org/package/http-io-streams
2022-05-09 18:23:46	dminuoso	That dependencies list hurts my eyes already. :(
2022-05-09 18:24:00	maerwald	and hvr is listed as maintainer, which gives you bad odds
2022-05-09 18:26:25	→	shriekingnoise has joined #haskell
2022-05-09 18:26:49	dminuoso	I really dont understand why we have a wealth of complicated http libraries with these large dependency footprints. :(
2022-05-09 18:27:14	maerwald	http-client-openssl isn't that bloated
2022-05-09 18:27:45	dminuoso	Mmm I guess http-client is okayish
2022-05-09 18:28:11	dminuoso	And re hvr, that's a snoyman package. Not sure whether thats better given the current situation! :po
2022-05-09 18:28:27	dminuoso	But that aside, I guess http-client is the way to go.
2022-05-09 18:28:43	dminuoso	Guess together with `json` this might work nicely
2022-05-09 18:30:03	dminuoso	Sometimes I really do envy other languages that give you a simple `import http; http.json("/foo/bar", {a: 1})` type of interface
2022-05-09 18:31:16	maerwald	Well, if one of snoymans packages doesn't work, there's still a chance you can pay fpco to fix it.
2022-05-09 18:32:43	→	bahamas has joined #haskell
2022-05-09 18:36:21	→	odnes has joined #haskell
2022-05-09 18:39:56	←	acidjnk has quit (Ping timeout: 248 seconds)
2022-05-09 18:44:20	→	zebrag has joined #haskell
2022-05-09 18:48:09	→	jmcarthur has joined #haskell
2022-05-09 18:48:47	jmcarthur	jackdk: The plugin readme on GitHub also led me to the overloaded package, which has a desugaring of (a subset of) proc notation that doesn't require arr
2022-05-09 18:49:13	jmcarthur	Sorry if that was a dup, my client was disconnected and I don't know if it tried to send the original after I reconnected 
2022-05-09 18:49:39	Axman6	when using cabal test, how to I pass arguments to the test executable itself? 
2022-05-09 18:49:53	maerwald	Axman6: use `cabal run` instead... works better anyway
2022-05-09 18:50:03	Axman6	hmm, how do I do that?
2022-05-09 18:50:13	Axman6	cabal run test:testname-from-cabal-file?
2022-05-09 18:50:31	maerwald	something like that
2022-05-09 18:50:46	maerwald	those : identifiers are hella confusing, so not sure if that particular one works
2022-05-09 18:50:49	geekosaur	cabal run test:testname -- parameters
2022-05-09 18:51:41	Axman6	got it, thank y'all
2022-05-09 18:53:05	maerwald	I think it's <project>:<test|exe>:<name> or so?
2022-05-09 18:53:08	→	Lycurgus has joined #haskell
2022-05-09 18:53:59	maerwald	or rather [<project>:][<test|exe>:]<name>
2022-05-09 18:57:24	←	shapr has quit (Remote host closed the connection)
2022-05-09 18:58:26	dminuoso	maerwald: There's a horrid logic behind this.
2022-05-09 18:59:23	dminuoso	In principle its [package:][ctype:]component
2022-05-09 18:59:50	dminuoso	But if memory serves right, you can name files or module names in there as well
2022-05-09 19:01:19	dminuoso	And the exact behavior differs between commands
2022-05-09 19:01:35	dminuoso	Each command calls resolveTargets with different package and component selectors
2022-05-09 19:01:36	Axman6	anyone know if there's a way to get cabal tab completion in zsh?
2022-05-09 19:02:16	←	dschrempf has quit (Quit: WeeChat 3.5)
2022-05-09 19:03:14	maerwald	https://github.com/haskell/cabal/blob/master/cabal-install/bash-completion/cabal
2022-05-09 19:03:26	maerwald	zsh supports bash completions afair
2022-05-09 19:03:42	Lycurgus	Axman6, you mean besides making a plugin for it?
2022-05-09 19:04:08	Lycurgus	i think he mans command parm completion
2022-05-09 19:04:19	maerwald	but I'm not sure they will be particularly useful, e.g. if you check --help, it's a dumpster of cli switches that may or may not be relevant
2022-05-09 19:04:20	Lycurgus	*means
2022-05-09 19:06:57	Axman6	hmm, not sure how to use that complletion script
2022-05-09 19:07:09	Axman6	I feel like I've tried this before but failed
2022-05-09 19:07:31	→	geranim0 has joined #haskell
2022-05-09 19:07:43	maerwald	https://stackoverflow.com/a/8492043
2022-05-09 19:07:46	Axman6	I did find https://github.com/coot/zsh-haskell which is easy enough to install for oh-my-zsh, but it doesn't seem to be able to complete the names of build targets
2022-05-09 19:08:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-05-09 19:09:58	→	littlebobeep has joined #haskell
2022-05-09 19:11:10	←	gurkenglas has quit (Ping timeout: 240 seconds)
2022-05-09 19:14:30	→	Unicorn_Princess has joined #haskell
2022-05-09 19:16:37	→	wroathe has joined #haskell
2022-05-09 19:16:37	←	wroathe has quit (Changing host)
2022-05-09 19:16:37	→	wroathe has joined #haskell
2022-05-09 19:17:37	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-05-09 19:18:51	→	Sgeo has joined #haskell
2022-05-09 19:20:29	dminuoso	Ah yes, you can also specify `[package:][ctype:]filepath`, like `cabal build exe:src/Main.hs`
2022-05-09 19:20:56	dminuoso	My memory still says you can also specifiy Haskell module names, but I dont see how
2022-05-09 19:24:21	→	[itchyjunk] has joined #haskell
2022-05-09 19:26:37	→	ph88 has joined #haskell
2022-05-09 19:27:12	→	Simon62 has joined #haskell
2022-05-09 19:27:40	Simon62	Hola
2022-05-09 19:28:09	Simon62	Given that code:
2022-05-09 19:28:10	Simon62	f a k : : I n t e g e r −> I n t e g e r
2022-05-09 19:28:10	Simon62	f a k x | t r a c e (” c a l l : f a k ” ++ show x ) F a l s e = x
2022-05-09 19:28:11	Simon62	f a k 0 = 1
2022-05-09 19:28:11	Simon62	f a k n = n ∗ f a k ( n−1)
2022-05-09 19:28:24	Simon62	What does the FALSE mean in that syntax?
2022-05-09 19:28:39	Simon62	In general I'm not 100% sure about the second line
2022-05-09 19:29:06	dminuoso	Simon62: That's an older and no longer needed trick to silence pattern match exhaustiveness warnings.
2022-05-09 19:29:09	Simon62	I think that it just prints each step
2022-05-09 19:29:15	dminuoso	Oh wait
2022-05-09 19:29:28	geekosaur	that's a trick to trace a call. with the guard, it means that leg will never be called, but the trace will still be evaluated
2022-05-09 19:29:28	dminuoso	Yeah, so this is an interesting trick
2022-05-09 19:29:35	geekosaur	so you know when the function was called
2022-05-09 19:29:51	dminuoso	Keep in mind, you have no guarantee this will ever print, or that this will print only once. :)
2022-05-09 19:30:02	Simon62	why?
2022-05-09 19:30:21	Simon62	But what is the "False" there fore?
2022-05-09 19:30:22	Simon62	for*
2022-05-09 19:30:28	Simon62	False = x
2022-05-09 19:30:28	dminuoso	`trace` is a primitive that prints out one string when its second argument is evaluated, if ever.
2022-05-09 19:30:34	geekosaur	to make the guard evaluate to false ("don't execute"")
2022-05-09 19:30:51	geekosaur	the guard is the "|"
2022-05-09 19:31:16	Simon62	Is it perhaps possible that you could paraphrase line 2 for me?
2022-05-09 19:31:33	dminuoso	Drop the trace for a moment.
2022-05-09 19:31:56	Simon62	In my slides it also says there are "two arguments" between | and =
2022-05-09 19:32:18	geekosaur	you copy-pasted that from a pdf, didn't you? it's a mess
2022-05-09 19:32:26	dminuoso	Simon62:  between | = is just a single bool expression
2022-05-09 19:32:27	Simon62	yes, sorry
2022-05-09 19:32:36	dminuoso	@let import Debug.Trace
2022-05-09 19:32:37	lambdabot	 /sandbox/tmp/.L.hs:132:1: error:
2022-05-09 19:32:37	lambdabot	     Debug.Trace: Can't be safely imported!
2022-05-09 19:32:37	lambdabot	     The module itself isn't safe.
2022-05-09 19:32:40	dminuoso	Gah.
2022-05-09 19:32:46	dminuoso	trace :: String -> a -> a
2022-05-09 19:32:51	Simon62	Wait a second
2022-05-09 19:32:52	dminuoso	You can see it takes two arguments.
2022-05-09 19:32:54	Simon62	I have the code
2022-05-09 19:33:05	→	eggplantade has joined #haskell
2022-05-09 19:33:10	←	wroathe has quit (Ping timeout: 246 seconds)
2022-05-09 19:33:25	Simon62	import Debug.Trace
2022-05-09 19:33:25	Simon62	fak :: Integer -> Integer
2022-05-09 19:33:26	Simon62	fak x | trace ("call: fak " ++ show x) False = x
2022-05-09 19:33:26	Simon62	fak 0 = 1
2022-05-09 19:33:26	Simon62	fak n = n * fak (n-1)
2022-05-09 19:33:54	dminuoso	Imagine that second line read: `fak x | False = x` for a second
2022-05-09 19:33:58	←	Lycurgus has quit (Quit: Exeunt)
2022-05-09 19:34:03	dminuoso	Do you see how this is essentially a dead, useless, definition?
2022-05-09 19:34:22	dminuoso	If you ever call `fak`, it would always try out the first definition, evaluate the guard, determine its `False`, and then skip to the next definition.
2022-05-09 19:35:29	Simon62	Why is it "=" and not "=="?
2022-05-09 19:35:34	dminuoso	It's a definition.
2022-05-09 19:35:52	dminuoso	Think along these lines `f x | x > 10 = x * 2`
2022-05-09 19:35:59	dminuoso	See how between | and = there is a Bool expression?
2022-05-09 19:36:07	dminuoso	x > 10 :: Bool
2022-05-09 19:36:22	Simon62	yes
2022-05-09 19:36:27	dminuoso	:t False
2022-05-09 19:36:28	lambdabot	Bool
2022-05-09 19:36:31	dminuoso	This too is a Bool expression
2022-05-09 19:36:38	geekosaur	it might help if you read "|" as "where"
2022-05-09 19:36:55	geekosaur	or as "when" to avoid collision with the "where" keyword
2022-05-09 19:37:12	geekosaur	"fak x, when False, is x"
2022-05-09 19:37:25	dminuoso	Simon62: So `f x | True = x * 7` is a definition, whose guard will always evaluate to True (because True evaluates to.. True..)
2022-05-09 19:37:36	dminuoso	Interesting bit, somewhere in base someone defined `otherwise = True`
2022-05-09 19:37:47	←	eggplantade has quit (Ping timeout: 256 seconds)
2022-05-09 19:38:32	dminuoso	Which is why you might have written `| otherwise = ...` - it's just a guard that is always true. When that guard is tried, it will always succeed and use that definition that follows
2022-05-09 19:39:01	dminuoso	`| False = ...`  is the opposite, its a guard that always evaluates to false, so the definition is never used. You can think of this as some `if false { ... }` perhaps
2022-05-09 19:39:05	Simon62	"fak x, when False, is x"
2022-05-09 19:39:06	Simon62	Thanks!
2022-05-09 19:39:06	Simon62	The "is" here just lets me think of "==", but I'm about to get it.
2022-05-09 19:39:07	Simon62	So bascially we are definiting "True" as x (and x is whatever the user says x to be, but it is a number) and that does not make sense as you say and therefore it's always True
2022-05-09 19:39:39	geekosaur	no
2022-05-09 19:39:42	Simon62	So the guard (everything after "|") just has to be true so that something happens
2022-05-09 19:39:56	geekosaur	the "= x" never happens because the guard is False
2022-05-09 19:39:58	Simon62	Ah wait, and what is the "trace" needed for then?
2022-05-09 19:40:07	geekosaur	so this is a useless definition
2022-05-09 19:40:08	dminuoso	Simon62:  *when the guard is true, the following definition will be used.
2022-05-09 19:40:15	geekosaur	until you drop the "trace" in
2022-05-09 19:40:20	dminuoso	*when the guard is false, its definition will not be used, and the next definition will be tried.
2022-05-09 19:40:44	dminuoso	So a definition with a guard that is statically false will *always* be skipped.
2022-05-09 19:40:58	dminuoso	But to know to skip this definition, GHC has to first evaluate what goes between `|` and `=`
2022-05-09 19:41:41	geekosaur	with the trace, when it evaluates the guard, it prints that it's calling "fak" and its parameter. then, because the second parameter to "trace" is False, the guard evaluates False and it falls through to the next definition
2022-05-09 19:41:53	geekosaur	so this is a cheaty way to get a call trace
2022-05-09 19:43:08	Simon62	interesting
2022-05-09 19:43:58	dminuoso	Simon62: and the reason I said you dont get any guarantees about printing, is because in general the compiler is free to evaluate things once, multiple times, or not at all.
2022-05-09 19:43:59	Simon62	What in Java would you compare these Guards with?
2022-05-09 19:44:18	dminuoso	There's no good equivalent in Java
2022-05-09 19:44:28	Simon62	dminuoso But the compiler has no free will, how can he decide?
2022-05-09 19:44:33	dminuoso	They very broadly encode the idea of "early return"
2022-05-09 19:44:38	dminuoso	But its not a 1:1 mapping
2022-05-09 19:44:53	←	jakalx has left #haskell (Error from remote client)
2022-05-09 19:45:08	dminuoso	Simon62: It has a huge pile of heuristics to transform code that not a single person understands well. :p
2022-05-09 19:45:15	dminuoso	In simple terms:
2022-05-09 19:45:30	dminuoso	The compiler can simply inline a definition, consider the difference between:
2022-05-09 19:45:50	dminuoso	let x = trace "hello world" 10 in (x, x)
2022-05-09 19:45:55	dminuoso	or if we inline the definition of x
2022-05-09 19:46:11	dminuoso	(trace "hello world" 10, trace "hello world" 10)
2022-05-09 19:46:13	geekosaur	the compiler is free to pick an evaluation strategy as long as it produces the same result as doing things naïvely. purity ensures that there are transformations and evaluation strategies that are safe to use because they will produce the same result
2022-05-09 19:46:51	dminuoso	Simon62:  GHC is free to do the above transformation, because it has no idea that `trace` causes a visible side effect - the order of *evaluation* is unspecified.
2022-05-09 19:46:55	Simon62	how do you do the dots at "naïvely"?
2022-05-09 19:47:18	dminuoso	in this sense, `trace` is a dark and evil primitive, whose existence is soley for debugging
2022-05-09 19:47:46	Hecate	It's a diacritic
2022-05-09 19:47:49	Simon62	absolute x
2022-05-09 19:47:50	Simon62	 | x<0 = -x
2022-05-09 19:47:50	Simon62	 | otherwise = x
2022-05-09 19:47:51	Simon62	So this is, how the guards are supposed to be used?
2022-05-09 19:47:51	Simon62	And in my example there isn't even a second option, or, the fak 0 = 1 is the second option, hmm
2022-05-09 19:47:56	geekosaur	I have XCompose set up on right Alt, so it's <right alt> i "
2022-05-09 19:48:10	dminuoso	Simon62:  sure!
2022-05-09 19:48:18	dminuoso	Simon62:  note that `otherwise` is defined as `True` somewhere
2022-05-09 19:48:24	Simon62	"in this sense, `trace` is a dark and evil primitive, whose existence is soley for debugging" interesting
2022-05-09 19:48:24	dminuoso	That is, in base there is a line that reads `otherwise = True`
2022-05-09 19:48:39	geekosaur	on windows there's a different way to do it, unless you install wincompose and then you can do it the same way
2022-05-09 19:48:53	geekosaur	but wincompose is mostly for when we unix folk have to use windows :)
2022-05-09 19:49:23	dminuoso	Simon62: So in haskell we separate *execution* (which causes visible side-effects) from *evaluation* (which is just substituting variables for their definitions, over and over again)
2022-05-09 19:49:36	dminuoso	and `trace` is evil because it lets you do visible-side effects during evaluation.
2022-05-09 19:50:08	dminuoso	It lets you "observe" during evaluation, but with the quirks that you dont necessarily know the order, and what actually is evaluated
2022-05-09 19:50:22	dminuoso	which is why you cant rely on this at all for production use
2022-05-09 19:50:46	geekosaur	as to your second option, you have three. the first is the trace, the second is the base case, the third the recursive case
2022-05-09 19:50:54	Simon62	:t trace("test")
2022-05-09 19:50:55	lambdabot	error:
2022-05-09 19:50:55	lambdabot	    Variable not in scope: trace :: [Char] -> t
2022-05-09 19:51:06	Simon62	:t trace("test") False
2022-05-09 19:51:07	dminuoso	Simon62: lambdabot doesnt expose trace, sadly
2022-05-09 19:51:08	lambdabot	error:
2022-05-09 19:51:08	lambdabot	    Variable not in scope: trace :: [Char] -> Bool -> t
2022-05-09 19:51:14	geekosaur	:t Debug.Trace.trace "test"
2022-05-09 19:51:15	lambdabot	a -> a
2022-05-09 19:51:22	dminuoso	Oh, it does?
2022-05-09 19:51:24	←	xaotuk has quit (Ping timeout: 240 seconds)
2022-05-09 19:51:34	geekosaur	only for :t because it can't evaluate it
2022-05-09 19:51:37	dminuoso	Ah
2022-05-09 19:51:47	dminuoso	Simon62: Feel free to `import Debug.Trace` in ghci and play around with it.
2022-05-09 19:51:51	Simon62	:t Trace.trace "test" False
2022-05-09 19:51:53	lambdabot	error:
2022-05-09 19:51:53	lambdabot	    Not in scope: ‘Trace.trace’
2022-05-09 19:51:53	lambdabot	    No module named ‘Trace’ is imported.
2022-05-09 19:52:03	Simon62	:t Debug,Trace.trace "test" False
2022-05-09 19:52:04	lambdabot	error: parse error on input ‘,’
2022-05-09 19:52:07	Simon62	:t Debug.Trace.trace "test" False
2022-05-09 19:52:08	lambdabot	Bool
2022-05-09 19:52:12	Simon62	hehe
2022-05-09 19:52:17	Simon62	Nice
2022-05-09 19:52:18	Simon62	I get it
2022-05-09 19:52:20	Simon62	Thanks guys
2022-05-09 19:53:08	Simon62	:t Debug.Trace.trace
2022-05-09 19:53:09	lambdabot	String -> a -> a
2022-05-09 19:54:02	int-e	:t Debug.Trace.traceShow
2022-05-09 19:54:03	lambdabot	Show a => a -> b -> b
2022-05-09 19:54:22	dminuoso	:t Debug.Trace.traceShowId
2022-05-09 19:54:23	lambdabot	Show a => a -> a
2022-05-09 19:54:25	dminuoso	My favourite of the bunch
2022-05-09 19:54:39	⚡	int-e likes this pattern for quick-and-dirty tracing of function calls:   foo a b | traceShow ("foo", a, b) False = undefined
2022-05-09 19:54:46	dminuoso	You can drop this into any place with little to no modification :)
2022-05-09 19:54:51	geekosaur	that's what we've been explaining
2022-05-09 19:55:04	dminuoso	Yeah its a cool trick
2022-05-09 19:55:14	Simon62	so basically trace is like print but that it also executes it's second argument afterwards?
2022-05-09 19:55:28	Simon62	Like "print . _some function_"
2022-05-09 19:55:34	dminuoso	Simon62:  not quite
2022-05-09 19:55:34	Simon62	notice the "."
2022-05-09 19:55:40	int-e	Ah, missing context as usual :/
2022-05-09 19:55:43	dminuoso	the phrase "execution" is a bit misplaced here.
2022-05-09 19:55:52	dminuoso	Simon62: think of it rather as a "hook" in the evaluator.
2022-05-09 19:56:04	dminuoso	that is, you can hook into the moment when an arbitrary expression gets evaluated.
2022-05-09 19:56:46	dminuoso	(so you see why this might print none, once or multiple times, the actual printing depends on how often that expression really gets evaluated)
2022-05-09 19:56:58	→	waleee has joined #haskell
2022-05-09 19:57:12	Simon62	I see
2022-05-09 19:57:26	Simon62	I wish our prof would have said that trace requiered two arguments earlier haha
2022-05-09 19:57:39	dminuoso	In fact we have an even more dangerous dark primitive to execute *arbitrary* IO things, which is what trace is build around with.
2022-05-09 19:58:27	dminuoso	so `trace` can be thought to install a printing hook 
2022-05-09 19:59:02	Simon62	very interesting, thanks
2022-05-09 19:59:07	dminuoso	but we can do other hooks as well, but this is notoriously difficult to use right. but, turns out if all you care is just printing some debug information, it doesnt really matter if you cant reason about the order or frequency
2022-05-09 19:59:42	Simon62	couldn't you also hook a simple print to it somehow?
2022-05-09 19:59:56	dminuoso	Yes, that's trace.
2022-05-09 20:00:07	dminuoso	That's exactly what it is
2022-05-09 20:00:13	Simon62	Alright
2022-05-09 20:03:27	Simon62	dminuoso please excuse that question, but why couldn't I just write "fak x | print ("call: fak " ++ show x) False = x"?
2022-05-09 20:03:34	Simon62	gives me an error
2022-05-09 20:03:43	Simon62	Ah I know
2022-05-09 20:03:48	Simon62	Because print only takes one argument
2022-05-09 20:03:59	Simon62	But doesn't it still work because it's part of the guard
2022-05-09 20:04:10	Simon62	Oh, or the guard can only have one argument at a time right?
2022-05-09 20:05:04	dminuoso	The fundamental first problem is, a guard takes an expression of type Bool
2022-05-09 20:05:09	dminuoso	Secondly
2022-05-09 20:05:11	dminuoso	:t print
2022-05-09 20:05:12	lambdabot	Show a => a -> IO ()
2022-05-09 20:05:19	dminuoso	You're trying to apply `print` to two arguments.
2022-05-09 20:05:19	Simon62	Is it bad coding style if I just always use "True" instead of "otherwise"?
2022-05-09 20:05:46	dminuoso	Simon62: For learning? Does not really matter.
2022-05-09 20:05:52	k`	Simon62: No but it's nonstandard.
2022-05-09 20:06:05	k`	Rather, unconventional.
2022-05-09 20:06:06	Simon62	k` What do you mean by nonstandard?
2022-05-09 20:06:14	dminuoso	Everyone else would use `otherwise`
2022-05-09 20:06:21	Simon62	unconventional: True or otherwise?
2022-05-09 20:06:28	Simon62	I see
2022-05-09 20:06:28	dminuoso	But if you want to use True, especially to learn that guards take bool expressions, go for it?
2022-05-09 20:06:56	Simon62	so otherwise is "de facto" standard? (is that what nonstandard means?)
2022-05-09 20:07:07	Simon62	:t Trace.trace
2022-05-09 20:07:08	lambdabot	error:
2022-05-09 20:07:08	lambdabot	    Not in scope: ‘Trace.trace’
2022-05-09 20:07:08	lambdabot	    No module named ‘Trace’ is imported.
2022-05-09 20:07:14	Simon62	:t Debug.Trace.trace
2022-05-09 20:07:14	int-e	I'd call `otherwise` idiomatic
2022-05-09 20:07:16	lambdabot	String -> a -> a
2022-05-09 20:07:36	dminuoso	There's also a competion version that uses a separate definition rather than `| otherwise = ...`
2022-05-09 20:07:39	dminuoso	that is, rather than writing:
2022-05-09 20:07:48	dminuoso	f x | x > 10 = ....
2022-05-09 20:07:53	Simon62	Can you give me an example where trace returns an Integer?
2022-05-09 20:07:55	dminuoso	    | otherwise  = ....
2022-05-09 20:07:57	dminuoso	You might write:
2022-05-09 20:08:02	dminuoso	f x | x > 10 = ...
2022-05-09 20:08:06	dminuoso	f x = ...
2022-05-09 20:08:14	int-e	Simon62: trace "" 0
2022-05-09 20:08:16	dminuoso	Lately I tend to favour the second style
2022-05-09 20:08:28	Simon62	print trace "" 0
2022-05-09 20:08:32	int-e	Simon62: it returns the second argument; if that's an integer...
2022-05-09 20:08:36	int-e	print (trace "" 0)
2022-05-09 20:09:12	int-e	(((print trace) "") 0) makes little sense; it'll complain about a missing Show instance, most likely
2022-05-09 20:09:43	k`	Simon62: Re otherwise -- It's convention, not standard. hlint will complain, and some folks may internally rage, but the meaning is totally obvious.
2022-05-09 20:10:01	⚡	Simon62 laughes
2022-05-09 20:10:47	int-e	f x | x > 10 = ... | () <- () = ... -- if you *want* to make people rage, try this trick!
2022-05-09 20:12:04	k`	Yeah, please don't do that.
2022-05-09 20:12:21	Simon62	I get a parse error
2022-05-09 20:12:25	int-e	can you be a good programmer without knowing what bad code looks like?
2022-05-09 20:13:04	int-e	> let f x | x > 10 = x-1 | () <- () = x+1 in (f 10, f 11)
2022-05-09 20:13:06	lambdabot	 (11,10)
2022-05-09 20:13:53	k`	One advantage is `| True = ...` and `| _ <- () = ...` work without Prelude.
2022-05-09 20:14:09	→	xaotuk has joined #haskell
2022-05-09 20:14:52	dminuoso	Gah, what was that new primitive for impossible guards that dont trigger the ghc exhaustiveness checker diagnostics since Lower Your Guards?
2022-05-09 20:14:55	int-e	k`: `True` will not be in scope then
2022-05-09 20:15:01	k`	If you ever find yourself writing `import Prelude (otherwise)`. I don't think `otherwise` is exported by `Data.Bool`.
2022-05-09 20:15:12	→	Pickchea has joined #haskell
2022-05-09 20:15:55	k`	Oops, well, I'm wrong. Must have been importing `Data.Bool (Bool (..))`.
2022-05-09 20:16:20	dminuoso	does hoogle allow me to search for all values of type Bool in the base package?
2022-05-09 20:16:22	k`	In the future I'll just import all of Data.Bool and use `otherwise`.
2022-05-09 20:16:48	→	moonsheep has joined #haskell
2022-05-09 20:16:51	opqdonut	contrariwise = unsafePerformIO (modifyIORef global not >> readIORef global)
2022-05-09 20:17:30	k`	dminuoso: No, I don't think so.
2022-05-09 20:17:42	←	Kaipei has quit (Ping timeout: 276 seconds)
2022-05-09 20:18:02	dminuoso	Ahh wait, I have it
2022-05-09 20:18:05	dminuoso	https://hackage.haskell.org/package/base-4.16.1.0/docs/GHC-Exts.html#v:considerAccessible
2022-05-09 20:18:26	dminuoso	This is a truly magical version of otherwise.
2022-05-09 20:18:36	←	xaotuk has quit (Ping timeout: 248 seconds)
2022-05-09 20:19:11	dminuoso	It's a bit scary that this is not some built-in, Id be curious as to how GHC will differentiate this from `let considerAccessible = True in ...`
2022-05-09 20:19:54	←	gnyeki has quit (Quit: leaving)
2022-05-09 20:20:10	←	Simon62 has quit (Quit: Client closed)
2022-05-09 20:20:34	→	xaotuk has joined #haskell
2022-05-09 20:20:47	k`	That is some sorcery.
2022-05-09 20:23:22	→	gnyeki has joined #haskell
2022-05-09 20:27:54	→	yoggurt[m] has joined #haskell
2022-05-09 20:28:08	→	hgolden has joined #haskell
2022-05-09 20:28:47	→	motherfsck has joined #haskell
2022-05-09 20:29:35	int-e	dminuoso: it's fully qualified: considerAccessibleName = varQual gHC_EXTS (fsLit "considerAccessible") considerAccessibleIdKey
2022-05-09 20:30:03	→	jakalx has joined #haskell
2022-05-09 20:31:09	→	Kaipei has joined #haskell
2022-05-09 20:32:10	←	merijn has quit (Ping timeout: 240 seconds)
2022-05-09 20:33:08	→	odnes_ has joined #haskell
2022-05-09 20:35:35	←	odnes has quit (Ping timeout: 256 seconds)
2022-05-09 20:38:19	←	moonsheep has left #haskell (ERC 5.4 (IRC client for GNU Emacs 28.1))
2022-05-09 20:43:08	←	frost has quit (Ping timeout: 252 seconds)
2022-05-09 20:43:21	→	littlebobeep has joined #haskell
2022-05-09 20:48:06	→	xkuru has joined #haskell
2022-05-09 20:48:13	←	odnes_ has quit (Quit: Leaving)
2022-05-09 20:50:12	←	CiaoSen has quit (Ping timeout: 252 seconds)
2022-05-09 20:54:45	←	xaotuk has quit (Ping timeout: 276 seconds)
2022-05-09 20:57:00	←	xff0x has quit (Read error: Connection reset by peer)
2022-05-09 20:57:21	←	waleee has quit (Ping timeout: 248 seconds)
2022-05-09 20:59:21	→	merijn has joined #haskell
2022-05-09 21:00:20	←	yauhsien has quit (Remote host closed the connection)
2022-05-09 21:01:47	←	lortabac has quit (Quit: WeeChat 2.8)
2022-05-09 21:03:30	→	yauhsien has joined #haskell
2022-05-09 21:06:06	←	troydm has quit (Quit: What is Hope? That all of your wishes and all of your dreams come true? To turn back time because things were not supposed to happen like that (C) Rau Le Creuset)
2022-05-09 21:08:01	←	yauhsien has quit (Ping timeout: 246 seconds)
2022-05-09 21:09:06	→	troydm has joined #haskell
2022-05-09 21:09:43	←	inversed has quit (Quit: Connection error?!)
2022-05-09 21:15:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-05-09 21:15:55	→	eggplantade has joined #haskell
2022-05-09 21:16:40	→	inversed has joined #haskell
2022-05-09 21:19:01	→	azimut has joined #haskell
2022-05-09 21:19:14	→	tzh has joined #haskell
2022-05-09 21:20:28	→	yauhsien has joined #haskell
2022-05-09 21:21:49	→	tromp has joined #haskell
2022-05-09 21:31:50	←	cfricke has quit (Ping timeout: 240 seconds)
2022-05-09 21:39:45	→	slack1256 has joined #haskell
2022-05-09 21:41:06	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-09 21:41:21	slack1256	http://conal.net/talks/compiling-to-categories.pdf reading this, I fail to see how this won't be a optimization blocker if it is used as a serious backend.
2022-05-09 21:41:29	slack1256	Has anyone played with this seriously?
2022-05-09 21:42:12	←	tomboy64 has quit (Ping timeout: 240 seconds)
2022-05-09 21:42:40	←	ccntrq has quit (Quit: ccntrq)
2022-05-09 21:43:24	←	pottsy has quit (Ping timeout: 265 seconds)
2022-05-09 21:44:32	→	tomboy64 has joined #haskell
2022-05-09 21:46:00	→	tromp has joined #haskell
2022-05-09 21:47:55	→	vicfred has joined #haskell
2022-05-09 21:47:57	jmcarthur	slack1256: I don't necessarily disagree, but does something jump out at you as especially blocking optimizations?
2022-05-09 21:48:16	jmcarthur	I am recently interested in giving it a shot 
2022-05-09 21:48:44	←	Pickchea has quit (Ping timeout: 248 seconds)
2022-05-09 21:49:51	←	yauhsien has quit (Remote host closed the connection)
2022-05-09 21:53:58	→	shapr has joined #haskell
2022-05-09 21:54:40	←	mmhat has quit (Ping timeout: 250 seconds)
2022-05-09 21:54:55	←	jmcarthur has quit (Ping timeout: 256 seconds)
2022-05-09 22:04:30	←	bahamas has quit (Ping timeout: 240 seconds)
2022-05-09 22:05:16	←	kuribas`` has quit (Quit: ERC (IRC client for Emacs 26.3))
2022-05-09 22:07:22	→	waleee has joined #haskell
2022-05-09 22:09:03	→	mmhat has joined #haskell
2022-05-09 22:20:32	→	yauhsien has joined #haskell
2022-05-09 22:21:04	←	eggplantade has quit (Remote host closed the connection)
2022-05-09 22:21:45	→	gabriel_sevecek has joined #haskell
2022-05-09 22:24:59	←	yauhsien has quit (Ping timeout: 240 seconds)
2022-05-09 22:28:12	←	alp_ has quit (Ping timeout: 248 seconds)
2022-05-09 22:28:55	←	Kaipei has quit (Remote host closed the connection)
2022-05-09 22:29:12	→	eggplantade has joined #haskell
2022-05-09 22:29:20	→	Kaipei has joined #haskell
2022-05-09 22:29:22	→	kenran has joined #haskell
2022-05-09 22:30:58	←	hgolden has quit (Quit: Konversation terminated!)
2022-05-09 22:37:03	←	Vajb has quit (Read error: Connection reset by peer)
2022-05-09 22:37:13	→	Vajb has joined #haskell
2022-05-09 22:37:20	→	werneta has joined #haskell
2022-05-09 22:37:23	→	hgolden has joined #haskell
2022-05-09 22:40:10	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-09 22:40:42	→	bahamas has joined #haskell
2022-05-09 22:45:37	→	stackdroid18 has joined #haskell
2022-05-09 22:45:53	→	econo has joined #haskell
2022-05-09 22:45:54	←	bahamas has quit (Ping timeout: 276 seconds)
2022-05-09 22:46:27	→	slac77610 has joined #haskell
2022-05-09 22:48:15	→	tromp has joined #haskell
2022-05-09 22:48:45	←	slack1256 has quit (Ping timeout: 256 seconds)
2022-05-09 22:49:03	←	qwedfg_ has quit (Quit: ZNC - https://znc.in)
2022-05-09 22:50:30	→	qwedfg has joined #haskell
2022-05-09 22:51:55	←	dsrt^ has quit (Remote host closed the connection)
2022-05-09 22:56:06	→	x_kuru has joined #haskell
2022-05-09 22:57:23	→	bahamas has joined #haskell
2022-05-09 22:58:50	←	xkuru has quit (Ping timeout: 240 seconds)
2022-05-09 23:00:50	→	galio has joined #haskell
2022-05-09 23:01:46	←	bahamas has quit (Ping timeout: 246 seconds)
2022-05-09 23:02:04	→	x_kuru_ has joined #haskell
2022-05-09 23:03:05	→	bahamas has joined #haskell
2022-05-09 23:04:50	←	x_kuru has quit (Ping timeout: 240 seconds)
2022-05-09 23:07:29	←	bahamas has quit (Ping timeout: 248 seconds)
2022-05-09 23:08:35	←	stackdroid18 has quit (Quit: hasta la vista... tchau!)
2022-05-09 23:09:10	→	bahamas has joined #haskell
2022-05-09 23:09:38	→	stackdroid18 has joined #haskell
2022-05-09 23:13:03	→	x_kuru has joined #haskell
2022-05-09 23:13:41	←	bahamas has quit (Ping timeout: 256 seconds)
2022-05-09 23:15:37	→	bahamas has joined #haskell
2022-05-09 23:15:50	←	x_kuru_ has quit (Ping timeout: 240 seconds)
2022-05-09 23:19:50	←	bahamas has quit (Ping timeout: 240 seconds)
2022-05-09 23:20:39	→	bahamas has joined #haskell
2022-05-09 23:22:04	←	coot has quit (Ping timeout: 248 seconds)
2022-05-09 23:23:00	→	eraziel has joined #haskell
2022-05-09 23:25:23	→	alp_ has joined #haskell
2022-05-09 23:27:53	←	qwedfg has quit (Quit: ZNC - https://znc.in)
2022-05-09 23:30:00	←	bliminse has quit (Quit: leaving)
2022-05-09 23:30:07	←	gabriel_sevecek has quit (Ping timeout: 240 seconds)
2022-05-09 23:31:17	→	qwedfg has joined #haskell
2022-05-09 23:32:03	←	cross has quit (Quit: leaving)
2022-05-09 23:33:32	→	cross has joined #haskell
2022-05-09 23:34:08	←	cross has quit (Client Quit)
2022-05-09 23:34:39	←	bahamas has quit (Ping timeout: 252 seconds)
2022-05-09 23:34:42	→	cross has joined #haskell
2022-05-09 23:34:42	←	cross has quit (Client Quit)
2022-05-09 23:34:59	←	eraziel has quit (Quit: Client closed)
2022-05-09 23:35:07	→	texasmynsted has joined #haskell
2022-05-09 23:35:40	→	cross has joined #haskell
2022-05-09 23:38:55	→	bliminse has joined #haskell
2022-05-09 23:44:53	→	dschrempf has joined #haskell
2022-05-09 23:45:14	←	dschrempf has quit (Client Quit)
2022-05-09 23:46:13	→	bahamas has joined #haskell
2022-05-09 23:50:54	←	raehik has quit (Ping timeout: 276 seconds)
2022-05-09 23:51:18	→	raehik has joined #haskell
2022-05-09 23:53:41	→	acidjnk has joined #haskell
2022-05-09 23:55:49	←	jakalx has left #haskell
2022-05-09 23:57:08	→	slack1256 has joined #haskell
2022-05-09 23:59:10	←	slac77610 has quit (Ping timeout: 240 seconds)
2022-05-09 23:59:26	→	f-a has joined #haskell
2022-05-09 23:59:47	←	mbuf has quit (Quit: Leaving)
2022-05-10 00:01:26	→	jakalx has joined #haskell
2022-05-10 00:02:05	→	gurkenglas has joined #haskell
2022-05-10 00:03:31	ℹ	Kaipei is now known as Kaiepi
2022-05-10 00:05:42	→	jmcarthur has joined #haskell
2022-05-10 00:05:43	←	stackdroid18 has quit (Quit: hasta la vista... tchau!)
2022-05-10 00:08:35	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-10 00:14:49	←	galio has quit (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
2022-05-10 00:18:02	←	eggplantade has quit (Remote host closed the connection)
2022-05-10 00:22:54	→	mvk has joined #haskell
2022-05-10 00:23:21	←	ec has quit (Quit: ec)
2022-05-10 00:29:49	→	slac94526 has joined #haskell
2022-05-10 00:31:23	→	tromp has joined #haskell
2022-05-10 00:31:51	←	slack1256 has quit (Ping timeout: 252 seconds)
2022-05-10 00:33:56	→	eggplantade has joined #haskell
2022-05-10 00:39:33	←	raehik has quit (Ping timeout: 252 seconds)
2022-05-10 00:43:28	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-10 00:44:32	→	x_kuru_ has joined #haskell
2022-05-10 00:47:30	←	bahamas has quit (Ping timeout: 240 seconds)
2022-05-10 00:47:30	←	x_kuru has quit (Ping timeout: 240 seconds)
2022-05-10 00:47:37	→	vshender has joined #haskell
2022-05-10 00:47:41	→	tromp has joined #haskell
2022-05-10 00:48:11	←	vshender has left #haskell
2022-05-10 00:52:09	ℹ	irc: disconnected from server
2022-05-31 00:22:58	→	oxide has joined #haskell
2022-05-31 00:22:58	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-05-31 00:22:58	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-05-31 00:22:58	ℹ	Channel #haskell: 726 nicks (1 op, 0 voices, 725 normals)
2022-05-31 00:22:58	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-05-31 00:22:58	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-05-31 00:23:30	→	eggplantade has joined #haskell
2022-05-31 00:26:36	←	dschrempf has quit (Ping timeout: 276 seconds)
2022-05-31 00:28:05	←	eggplantade has quit (Ping timeout: 260 seconds)
2022-05-31 00:34:43	→	adium has joined #haskell
2022-05-31 00:36:50	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-31 00:42:08	←	vglfr has quit (Read error: Connection reset by peer)
2022-05-31 00:42:19	→	vglfr has joined #haskell
2022-05-31 00:43:09	→	chddr has joined #haskell
2022-05-31 00:43:43	→	boxscape has joined #haskell
2022-05-31 00:43:54	Bulby[m]	can state recursively remember as well in polysemy
2022-05-31 00:44:57	→	stackdroid18 has joined #haskell
2022-05-31 00:46:00	chddr	Hi guys, I'm a little confused with what data type to use as a replacement for [a]. I want something with usual imperative array complexity. There's array library, but also vector, and there are boxed/unboxed and mutable/immutable ones, is there a good resource to read about the topic?
2022-05-31 00:48:31	→	dschrempf has joined #haskell
2022-05-31 00:48:38	←	dschrempf has quit (Client Quit)
2022-05-31 00:49:22	slack1256	chddr: Most of the modules on the `vector` package explain usage and difference to the other representation. For example https://hackage.haskell.org/package/vector-0.12.3.1/docs/Data-Vector-Mutable.html gives a good idea how to use it.
2022-05-31 00:49:48	chddr	So vector would be a good default to use?
2022-05-31 00:50:10	slack1256	Yeah, I would start with `Data.Vector` from the `vector package.
2022-05-31 00:50:20	slack1256	Only if you know what you are doing, then you can see the other modules.
2022-05-31 00:50:33	chddr	Thanks!
2022-05-31 00:53:41	←	obabo has quit (Quit: WeeChat 3.5)
2022-05-31 00:55:15	→	Entertainment has joined #haskell
2022-05-31 00:56:47	←	slack1256 has quit (Remote host closed the connection)
2022-05-31 00:58:58	→	slack1256 has joined #haskell
2022-05-31 00:59:34	→	cfricke has joined #haskell
2022-05-31 01:00:26	←	Entertainment has quit ()
2022-05-31 01:00:39	←	vglfr has quit (Read error: Connection reset by peer)
2022-05-31 01:00:48	→	vglfr has joined #haskell
2022-05-31 01:02:53	←	vglfr has quit (Read error: Connection reset by peer)
2022-05-31 01:03:07	→	vglfr has joined #haskell
2022-05-31 01:04:18	→	tromp has joined #haskell
2022-05-31 01:05:39	→	eggplantade has joined #haskell
2022-05-31 01:05:49	→	jgeerds has joined #haskell
2022-05-31 01:05:52	→	coot has joined #haskell
2022-05-31 01:07:32	←	zincy has quit (Ping timeout: 260 seconds)
2022-05-31 01:07:49	←	vglfr has quit (Read error: Connection reset by peer)
2022-05-31 01:07:59	→	vglfr has joined #haskell
2022-05-31 01:10:21	→	jmdaemon has joined #haskell
2022-05-31 01:11:41	←	phma has quit (Read error: Connection reset by peer)
2022-05-31 01:11:49	→	titibandit has joined #haskell
2022-05-31 01:12:08	→	acidjnk has joined #haskell
2022-05-31 01:12:23	→	phma has joined #haskell
2022-05-31 01:13:41	[exa]	Bulby[m]: in this case it was the IO that "remembered" they contents of MVars and other stuff. I'd say for State it will be the same unless you explicitly break it somehow
2022-05-31 01:14:35	←	vglfr has quit (Read error: Connection reset by peer)
2022-05-31 01:15:17	→	vglfr has joined #haskell
2022-05-31 01:17:13	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-31 01:20:45	→	tromp has joined #haskell
2022-05-31 01:20:46	←	vglfr has quit (Read error: Connection reset by peer)
2022-05-31 01:20:57	→	jmcarthur has joined #haskell
2022-05-31 01:21:36	→	vglfr has joined #haskell
2022-05-31 01:24:43	→	wroathe has joined #haskell
2022-05-31 01:24:43	←	wroathe has quit (Changing host)
2022-05-31 01:24:43	→	wroathe has joined #haskell
2022-05-31 01:29:56	→	littlebobeep has joined #haskell
2022-05-31 01:29:56	←	vglfr has quit (Read error: Connection reset by peer)
2022-05-31 01:30:40	→	vglfr has joined #haskell
2022-05-31 01:31:21	←	kuribas has quit (Quit: ERC (IRC client for Emacs 26.3))
2022-05-31 01:32:58	Bulby[m]	how would I add a recurse effect to my Haskeline thing
2022-05-31 01:33:20	→	jgeerds_ has joined #haskell
2022-05-31 01:33:21	←	jgeerds has quit (Read error: Connection reset by peer)
2022-05-31 01:36:07	→	zincy has joined #haskell
2022-05-31 01:38:23	←	emad has quit (Quit: Leaving)
2022-05-31 01:38:41	→	emad has joined #haskell
2022-05-31 01:39:09	←	emad has quit (Remote host closed the connection)
2022-05-31 01:40:24	←	_ht has quit (Remote host closed the connection)
2022-05-31 01:42:13	Bulby[m]	https://hackage.haskell.org/package/polysemy-readline 😠
2022-05-31 01:44:28	Bulby[m]	at least my code basically looks the same 🙂
2022-05-31 01:44:34	Cale	Any particular reason you're going with Polysemy?
2022-05-31 01:44:43	Bulby[m]	no 🙂
2022-05-31 01:45:02	Bulby[m]	i go with it because we like to have fun here
2022-05-31 01:48:09	Bulby[m]	https://hackage.haskell.org/package/polysemy-readline-0.2.0.0/docs/src/Polysemy.Readline.html#interpretReadlineAsInputT
2022-05-31 01:48:10	←	slack1256 has quit (Read error: Connection reset by peer)
2022-05-31 01:48:13	Bulby[m]	basically what my interpreter looks like
2022-05-31 01:48:21	←	chomwitt has quit (Quit: Leaving)
2022-05-31 01:48:27	Bulby[m]	except it uses the IO stuff not InputT
2022-05-31 01:48:39	→	slack1256 has joined #haskell
2022-05-31 01:48:42	→	chomwitt has joined #haskell
2022-05-31 01:49:02	Cale	If you're having fun with it, then by all means, go ahead. :)  I remember seeing that it had some strange issues with semantics early on that I'm not sure if they got sorted out or not, and personally I tend to just define my monads in a straightforward way with transformers, and then define application-specific classes rather than using the MTL ones, and that's always worked fairly well. There are cases where if 
2022-05-31 01:49:03	Cale	transformers pile up, and certain compiler optimisations don't fire, you can have issues, but it's rare, and possible to sidestep in a bunch of ways.
2022-05-31 01:50:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-05-31 01:50:38	Bulby[m]	kinda angry I didn't see that library but I'm happy my code looks basically the same
2022-05-31 01:52:05	Bulby[m]	not sure how I feel about the remembering wizardry tho
2022-05-31 01:54:08	←	pretty_dumm_guy has quit (Ping timeout: 272 seconds)
2022-05-31 01:55:57	monochrom	I don't know polysemy, but I know how "State s a = s -> (a, s)" "remembers". (It doesn't have to. It just has to take a parameter and return the same thing or a new thing.)
2022-05-31 01:55:58	←	vglfr has quit (Read error: Connection reset by peer)
2022-05-31 01:56:00	←	Kaiepi has quit (Remote host closed the connection)
2022-05-31 01:56:14	→	vglfr has joined #haskell
2022-05-31 01:56:23	c_wraith	I mean...  functions in general remember by closing over values
2022-05-31 01:56:34	→	Kaiepi has joined #haskell
2022-05-31 01:57:54	←	jmcarthur has quit (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
2022-05-31 01:59:32	monochrom	I was very relieved and in awe when I learned that mutable state can be mathematically modelled by state transition functions.
2022-05-31 01:59:43	→	jmcarthur has joined #haskell
2022-05-31 02:00:50	monochrom	To be sure you could ask thorny efficiency issues such as "but it says that to update one element of a huge array you speak of cloning the whole array". But the mathematcial model is only obliged to predict answers, not costs.
2022-05-31 02:02:10	monochrom	The real semantically thorny issue though is sharable heap-allocated things. Then that's still an open question. People are working on it using separation logics.
2022-05-31 02:03:38	←	martin02 has quit (Ping timeout: 272 seconds)
2022-05-31 02:04:36	monochrom	The relief and awe is "oh so imperative programming is pointfree functional programming!" >:)
2022-05-31 02:04:50	←	Midjak has quit (Quit: This computer has gone to sleep)
2022-05-31 02:05:15	tomsmeding	with completely different syntax :p
2022-05-31 02:05:23	monochrom	Yeah!
2022-05-31 02:05:50	tomsmeding	which makes all the difference for the programmer, but maybe less so for the theoretical computer scientist ;)
2022-05-31 02:05:59	→	littlebobeep has joined #haskell
2022-05-31 02:07:56	monochrom	To some extent Backus gets to say "I told you so". He advocated "even if you want state, think and write in terms of state transition functions and composing them".
2022-05-31 02:08:29	monochrom	I think he almost invented the State monad.
2022-05-31 02:08:55	←	coot has quit (Quit: coot)
2022-05-31 02:08:56	monochrom	(In his "can programming be liberated from the von Neumann model" talk and paper.)
2022-05-31 02:09:56	monochrom	His explanation got really close to either (x,s)->(y, s) or s->(y,s)
2022-05-31 02:10:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-05-31 02:11:16	→	littlebobeep has joined #haskell
2022-05-31 02:13:11	monochrom	I am a theoretical person. I keep underestimating the ergonomics of syntax and how much it affects other people, yeah.
2022-05-31 02:13:56	→	zebrag has joined #haskell
2022-05-31 02:14:12	←	cfricke has quit (Quit: WeeChat 3.5)
2022-05-31 02:14:44	tomsmeding	I am a partially theoretical person (in cases like this), but I am acutely aware of how syntax matters when programming
2022-05-31 02:15:39	→	martin02 has joined #haskell
2022-05-31 02:15:39	←	vglfr has quit (Read error: Connection reset by peer)
2022-05-31 02:15:56	tomsmeding	I like writing and reading `data Tree a = Leaf | Node (Tree a) a (Tree a)` a lot more than `type 'a tree = | Leaf | Node oif 'a tree * 'a * 'a tree;;`
2022-05-31 02:16:05	tomsmeding	oops, s/oif/of/
2022-05-31 02:16:26	→	vglfr has joined #haskell
2022-05-31 02:16:31	tomsmeding	also C++ template syntax
2022-05-31 02:17:16	tomsmeding	also: I like writing an inherently imperative algorithm in C++ much more than writing it in ST
2022-05-31 02:17:42	←	vglfr has quit (Read error: Connection reset by peer)
2022-05-31 02:17:56	tomsmeding	those people saying that "haskell is the best imperative programming language" be damned, writing an imperative, mutating algorithm in ST is just plain verbose and annoying :p
2022-05-31 02:18:15	→	vglfr has joined #haskell
2022-05-31 02:18:30	monochrom	I had a classmate (in the aforementioned course using C++ and LLVM API) who said "C++ syntax is toxic".  I think maybe that's an exaggeration, but I see the point.  (I personally have little qualm, but only because I learned a simpler version of C++ a long time ago, got used to it and bit the bullet.)
2022-05-31 02:19:57	tomsmeding	there's a lot in C++ syntax that's not nice, but for writing an imperative, mutating algorithm you don't need template metaprogramming, class inheritance, constexpr, the *. syntax, or any of the other stuff that I'm forgetting
2022-05-31 02:20:03	monochrom	Yeah I tried using ST to write the standard random shuffling algorithm. It's a bit too verbose and COBOLy.
2022-05-31 02:20:36	tomsmeding	the thing is that you start wanting to reach for neat monadic combinators to reduce the verbosity, but that _severly_ impacts readability
2022-05-31 02:21:17	→	henninb has joined #haskell
2022-05-31 02:24:48	→	pretty_dumm_guy has joined #haskell
2022-05-31 02:24:51	←	takuan has quit (Remote host closed the connection)
2022-05-31 02:24:52	←	mmhat has quit (Quit: WeeChat 3.5)
2022-05-31 02:25:01	monochrom	There are some proponents of a syntax so that inside special brackets (e.g., applicative brackets but I need monadic here)  {| writeArray a i (readArray a i + 1) |} is desugared to "fmap (+ 1) (readArray a i) >>= writeArray a i", and at least it restores the syntactic convenience of "a[i] = a[i] + 1".
2022-05-31 02:25:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-05-31 02:26:05	←	jmdaemon has quit (Ping timeout: 258 seconds)
2022-05-31 02:27:24	boxscape	I like Idris' !-notation to take care of that verbosity. Writing a GHC plugin to have it in Haskell atm
2022-05-31 02:27:32	tomsmeding	that certainly improves things; the fmap-desugaring that you gave (though I know that you didn't write it as being good haskell code, just as being the desugaring) is precisely such an example of overuse of monadic combinators in this setting I think
2022-05-31 02:27:47	tomsmeding	boxscape: example?
2022-05-31 02:28:04	boxscape	tomsmeding: main = putStrLn !getLine
2022-05-31 02:28:07	←	werneta has quit (Ping timeout: 240 seconds)
2022-05-31 02:28:25	→	littlebobeep has joined #haskell
2022-05-31 02:28:50	tomsmeding	boxscape: where `f !a ... !z` ~> `a >>= \a' -> ... z >>= \z' -> f a' ... z'`?
2022-05-31 02:29:05	boxscape	pretty much yes
2022-05-31 02:29:21	boxscape	actually what I'm spending most time on with the plugin is to have it support more than the idris, so that you can get intuitive behavior inside case and if and such
2022-05-31 02:29:28	boxscape	s/idris/idris version
2022-05-31 02:30:04	monochrom	That is going to be pretty tedious engineering.
2022-05-31 02:30:15	monochrom	I mean, thanks for all the hard work! :)
2022-05-31 02:30:16	→	werneta has joined #haskell
2022-05-31 02:30:29	boxscape	I have a concrete solution in mind but yeah there's quite a lot of AST wrangling
2022-05-31 02:31:08	tomsmeding	yes that's pretty cool; I'm not sure whether I'd use it much in practice because I'm kind of hesitant to use ghc plugins in general, but this really sounds super nice
2022-05-31 02:31:27	boxscape	yeah I also tend to use plugins very little if I'm being honest
2022-05-31 02:31:51	monochrom	There is a chance if a specific ghc plugin becomes very popular, it gets absorbed into ghc out-of-the-box.
2022-05-31 02:32:21	monochrom	I mean, even {-# language Arrow #-} started out as a preprocessor haha.
2022-05-31 02:32:48	monochrom	Surely this plugin is actually more popular than arrows.
2022-05-31 02:32:57	boxscape	yeah it seems like a sensible pathway for extensions to take
2022-05-31 02:33:55	←	cosimone has quit (Read error: Connection reset by peer)
2022-05-31 02:35:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-05-31 02:35:35	←	wroathe has quit (Ping timeout: 255 seconds)
2022-05-31 02:36:46	←	titibandit has quit (Remote host closed the connection)
2022-05-31 02:41:05	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-05-31 02:41:07	←	zincy has quit (Ping timeout: 240 seconds)
2022-05-31 02:41:53	ℹ	irc: disconnected from server
2022-06-12 08:49:58	→	oxide has joined #haskell
2022-06-12 08:49:58	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-06-12 08:49:58	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-06-12 08:49:58	ℹ	Channel #haskell: 716 nicks (1 op, 0 voices, 715 normals)
2022-06-12 08:49:58	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-06-12 08:49:59	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-06-12 08:50:37	→	gurkenglas has joined #haskell
2022-06-12 08:53:46	→	littlebobeep has joined #haskell
2022-06-12 08:55:46	←	king_gs has quit (Quit: king_gs)
2022-06-12 09:00:25	←	littlebobeep has quit (Remote host closed the connection)
2022-06-12 09:00:52	→	littlebobeep has joined #haskell
2022-06-12 09:01:12	→	vicfred has joined #haskell
2022-06-12 09:07:29	←	kawen has quit (Ping timeout: 248 seconds)
2022-06-12 09:10:57	→	kawen has joined #haskell
2022-06-12 09:13:03	→	littlebo1eep has joined #haskell
2022-06-12 09:14:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-06-12 09:25:40	cdsmith	Huh.  I'm learning that GHC has a limit on "simplifier ticks" that you might have to increase if you do too much with types...  Very interesting.
2022-06-12 09:27:23	c_wraith	it was quite common to need to increase the number of ticks to install vector-algorithms for a while
2022-06-12 09:27:36	c_wraith	as vector-algorithms used recursive macros to generate exponential-size code
2022-06-12 09:30:55	←	slack1256 has quit (Remote host closed the connection)
2022-06-12 09:32:05	cdsmith	Makes sense.  I'm also doing some weird things; the challenge I'm working on is to design a system where you write a graph database schema in a type, and get a Haskell API to maintain data with that schema.  So I'm definitely not doing anything reasonably here.
2022-06-12 09:38:41	→	nevermore has joined #haskell
2022-06-12 09:39:36	→	nevermor_ has joined #haskell
2022-06-12 09:40:30	←	nevermor_ has quit (Remote host closed the connection)
2022-06-12 09:40:58	→	nevermor_ has joined #haskell
2022-06-12 09:43:27	←	nevermore has quit (Ping timeout: 265 seconds)
2022-06-12 09:45:38	→	_ht has joined #haskell
2022-06-12 09:48:29	←	machinedgod has quit (Ping timeout: 255 seconds)
2022-06-12 17:25:50	ℹ	irc: disconnected from server
2022-06-12 17:26:16	→	oxide has joined #haskell
2022-06-12 17:26:16	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-06-12 17:26:16	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-06-12 17:26:16	ℹ	Channel #haskell: 712 nicks (1 op, 0 voices, 711 normals)
2022-06-12 17:26:16	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-06-12 17:26:16	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-06-12 17:29:31	→	jafarlihi has joined #haskell
2022-06-12 17:30:28	→	coot has joined #haskell
2022-06-12 17:30:56	←	Pickchea has quit (Ping timeout: 248 seconds)
2022-06-12 17:33:45	→	gio123 has joined #haskell
2022-06-12 17:35:26	←	mon_aaraj has quit (Ping timeout: 246 seconds)
2022-06-12 17:36:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-06-12 17:37:39	→	mon_aaraj has joined #haskell
2022-06-12 17:40:31	→	eggplantade has joined #haskell
2022-06-12 17:42:45	←	xff0x has quit (Ping timeout: 256 seconds)
2022-06-12 17:44:33	→	littlebobeep has joined #haskell
2022-06-12 17:45:52	←	mon_aaraj has quit (Ping timeout: 248 seconds)
2022-06-12 17:46:04	←	eggplantade has quit (Ping timeout: 248 seconds)
2022-06-12 17:48:01	→	mon_aaraj has joined #haskell
2022-06-12 17:53:04	→	waleee has joined #haskell
2022-06-12 18:04:00	←	coot has quit (Ping timeout: 248 seconds)
2022-06-12 18:04:16	←	stefan-_ has quit (Ping timeout: 272 seconds)
2022-06-12 18:04:48	→	xff0x has joined #haskell
2022-06-12 18:07:34	→	stefan-_ has joined #haskell
2022-06-12 18:09:57	←	xff0x has quit (Ping timeout: 250 seconds)
2022-06-12 18:11:59	→	xff0x has joined #haskell
2022-06-12 18:16:00	←	frost has quit (Ping timeout: 252 seconds)
2022-06-12 18:17:16	→	frost has joined #haskell
2022-06-12 18:17:44	lyxia	Benzi-Junior: did you have a question about it
2022-06-12 18:23:11	←	jafarlihi has quit (Quit: WeeChat 3.5)
2022-06-12 18:23:20	→	Haskelytic has joined #haskell
2022-06-12 18:23:26	←	dextaa has quit (Read error: Connection reset by peer)
2022-06-12 18:23:36	→	coot has joined #haskell
2022-06-12 18:25:43	→	dextaa has joined #haskell
2022-06-12 18:32:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-06-12 18:36:17	←	Haskelytic has quit (Quit: Ping timeout (120 seconds))
2022-06-12 18:40:20	→	Haskelytic has joined #haskell
2022-06-12 18:40:58	→	littlebobeep has joined #haskell
2022-06-12 18:49:05	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-06-12 18:49:42	←	Haskelytic has quit (Quit: Ping timeout (120 seconds))
2022-06-12 18:50:46	←	waleee has quit (Ping timeout: 258 seconds)
2022-06-12 18:54:37	→	Midjak has joined #haskell
2022-06-12 18:57:06	→	Everything has joined #haskell
2022-06-12 19:11:06	←	caubert has quit (Quit: WeeChat 3.5)
2022-06-12 19:11:20	→	caubert has joined #haskell
2022-06-12 19:16:11	←	caubert has quit (Quit: WeeChat 3.5)
2022-06-12 19:16:26	→	caubert has joined #haskell
2022-06-12 19:16:35	←	cheater has quit (Ping timeout: 246 seconds)
2022-06-12 19:25:47	←	dextaa has quit (Read error: Connection reset by peer)
2022-06-12 19:26:18	→	nate4 has joined #haskell
2022-06-12 19:27:56	→	dextaa has joined #haskell
2022-06-12 19:28:15	←	dextaa has quit (Read error: Connection reset by peer)
2022-06-12 19:30:30	→	dextaa has joined #haskell
2022-06-12 19:30:46	←	dextaa has quit (Read error: Connection reset by peer)
2022-06-12 19:33:03	→	dextaa has joined #haskell
2022-06-12 19:33:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-06-12 19:33:41	←	dextaa has quit (Read error: Connection reset by peer)
2022-06-12 19:33:51	←	zeenk has quit (Quit: Konversation terminated!)
2022-06-12 19:33:55	→	tromp has joined #haskell
2022-06-12 19:34:46	←	bitdex has quit (Quit: = "")
2022-06-12 19:35:33	→	Pickchea has joined #haskell
2022-06-12 19:35:41	→	littlebobeep has joined #haskell
2022-06-12 19:35:51	→	dextaa has joined #haskell
2022-06-12 19:36:04	→	zincy has joined #haskell
2022-06-12 19:36:04	←	dextaa has quit (Read error: Connection reset by peer)
2022-06-12 19:36:19	←	dibblego has quit (Ping timeout: 240 seconds)
2022-06-12 19:36:45	←	coot has quit (Quit: coot)
2022-06-12 19:37:38	→	dibblego has joined #haskell
2022-06-12 19:37:38	←	dibblego has quit (Changing host)
2022-06-12 19:37:38	→	dibblego has joined #haskell
2022-06-12 19:38:18	→	dextaa has joined #haskell
2022-06-12 19:39:02	←	dextaa has quit (Read error: Connection reset by peer)
2022-06-12 19:39:56	→	jao has joined #haskell
2022-06-12 19:40:50	→	dextaa has joined #haskell
2022-06-12 19:41:36	←	dextaa has quit (Read error: Connection reset by peer)
2022-06-12 19:43:47	→	dextaa has joined #haskell
2022-06-12 19:44:15	←	Feuermagier has quit (Remote host closed the connection)
2022-06-12 19:44:32	→	Feuermagier has joined #haskell
2022-06-12 19:45:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-06-12 19:45:50	←	nate4 has quit (Ping timeout: 244 seconds)
2022-06-12 19:49:04	←	stiell_ has quit (Ping timeout: 240 seconds)
2022-06-12 19:49:56	→	stiell_ has joined #haskell
2022-06-12 19:50:21	←	jao has quit (Ping timeout: 276 seconds)
2022-06-12 19:50:35	←	pretty_dumm_guy has quit (Ping timeout: 255 seconds)
2022-06-12 19:56:10	←	dextaa has quit (Read error: Connection reset by peer)
2022-06-12 19:58:14	→	dextaa has joined #haskell
2022-06-12 19:58:53	→	littlebobeep has joined #haskell
2022-06-12 19:59:05	←	dextaa has quit (Read error: Connection reset by peer)
2022-06-12 20:01:21	→	dextaa has joined #haskell
2022-06-12 20:01:58	←	frost has quit (Ping timeout: 252 seconds)
2022-06-12 20:06:51	→	zebrag has joined #haskell
2022-06-12 20:10:15	←	russruss has quit (Quit: The Lounge - https://thelounge.chat)
2022-06-12 20:11:43	→	russruss has joined #haskell
2022-06-12 20:16:48	←	Pickchea has quit (Ping timeout: 248 seconds)
2022-06-12 20:18:32	←	chreekat2 has quit (Ping timeout: 272 seconds)
2022-06-12 20:21:05	←	aeka has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-06-12 20:21:27	→	aeka has joined #haskell
2022-06-12 20:21:57	→	nckx has joined #haskell
2022-06-12 20:23:30	←	nevermore has quit (Remote host closed the connection)
2022-06-12 20:27:03	→	cheater has joined #haskell
2022-06-12 20:30:16	←	jlamothe has quit (Quit: leaving)
2022-06-12 20:30:45	→	mvk has joined #haskell
2022-06-12 20:32:04	←	gio123 has quit (Quit: Client closed)
2022-06-12 20:33:56	→	alp has joined #haskell
2022-06-12 20:35:20	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-06-12 20:39:41	←	califax has quit (Remote host closed the connection)
2022-06-12 20:40:00	→	califax has joined #haskell
2022-06-12 20:43:56	→	eggplantade has joined #haskell
2022-06-12 20:48:38	←	eggplantade has quit (Ping timeout: 255 seconds)
2022-06-12 20:49:11	←	shriekingnoise has quit (Ping timeout: 256 seconds)
2022-06-12 20:49:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-06-12 20:51:27	←	cheater has quit (Ping timeout: 244 seconds)
2022-06-12 20:51:52	→	cheater has joined #haskell
2022-06-12 20:55:02	→	bontaq has joined #haskell
2022-06-12 20:55:59	←	justsomeguy has quit (Ping timeout: 256 seconds)
2022-06-12 20:56:43	→	littlebobeep has joined #haskell
2022-06-12 21:01:50	←	raym has quit (Ping timeout: 240 seconds)
2022-06-12 21:02:45	→	nate4 has joined #haskell
2022-06-12 21:02:55	→	raym has joined #haskell
2022-06-12 21:03:43	→	tromp has joined #haskell
2022-06-12 21:03:54	←	yrlnry has quit (Remote host closed the connection)
2022-06-12 21:04:42	←	dextaa has quit (Read error: Connection reset by peer)
2022-06-12 21:05:14	→	coot has joined #haskell
2022-06-12 21:07:00	→	dextaa has joined #haskell
2022-06-12 21:12:02	←	shapr has quit (Ping timeout: 255 seconds)
2022-06-12 21:13:39	→	nevermore has joined #haskell
2022-06-12 21:16:53	→	jmcarthur has joined #haskell
2022-06-12 21:18:00	←	nevermore has quit (Ping timeout: 265 seconds)
2022-06-12 21:21:32	→	tzh has joined #haskell
2022-06-12 21:25:03	←	Vajb has quit (Read error: Connection reset by peer)
2022-06-12 21:26:34	→	Vajb has joined #haskell
2022-06-12 21:29:09	→	jakalx has joined #haskell
2022-06-12 21:33:02	→	__monty__ has joined #haskell
2022-06-12 21:50:11	→	eggplantade has joined #haskell
2022-06-12 22:00:47	→	econo has joined #haskell
2022-06-12 22:02:32	←	zincy has quit (Remote host closed the connection)
2022-06-12 22:12:47	←	notzmv has quit (Ping timeout: 240 seconds)
2022-06-12 22:13:16	→	zeenk has joined #haskell
2022-06-12 22:16:42	←	lbseale has quit (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
2022-06-12 22:22:08	→	justsomeguy has joined #haskell
2022-06-12 22:23:01	→	lbseale has joined #haskell
2022-06-12 22:23:11	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-06-12 22:24:36	←	lbseale has quit (Client Quit)
2022-06-12 22:25:32	→	lbseale has joined #haskell
2022-06-12 22:26:34	→	tromp has joined #haskell
2022-06-12 22:33:00	→	pretty_dumm_guy has joined #haskell
2022-06-12 22:33:20	←	mon_aaraj has quit (Ping timeout: 248 seconds)
2022-06-12 22:33:42	←	califax has quit (Remote host closed the connection)
2022-06-12 22:36:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-06-12 22:36:12	→	califax has joined #haskell
2022-06-12 22:36:26	←	pavonia has quit (Quit: Bye!)
2022-06-12 22:36:50	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-06-12 22:39:41	→	tromp has joined #haskell
2022-06-12 22:40:32	→	gio123 has joined #haskell
2022-06-12 22:40:36	→	mon_aaraj has joined #haskell
2022-06-12 22:43:16	→	littlebobeep has joined #haskell
2022-06-12 22:45:04	→	pleo has joined #haskell
2022-06-12 22:45:36	←	mon_aaraj has quit (Ping timeout: 248 seconds)
2022-06-12 22:46:58	→	mon_aaraj has joined #haskell
2022-06-12 22:48:13	→	lainon has joined #haskell
2022-06-12 22:52:56	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-06-12 23:01:27	→	sebastiandb has joined #haskell
2022-06-12 23:04:27	→	yrlnry has joined #haskell
2022-06-12 23:04:32	←	yrlnry has quit (Read error: Connection reset by peer)
2022-06-12 23:07:27	→	tromp has joined #haskell
2022-06-12 23:07:50	→	Sgeo has joined #haskell
2022-06-12 23:09:01	→	nevermore has joined #haskell
2022-06-12 23:09:32	←	califax has quit (Remote host closed the connection)
2022-06-12 23:10:37	→	califax has joined #haskell
2022-06-12 23:11:44	←	raym has quit (Ping timeout: 248 seconds)
2022-06-12 23:12:13	←	sebastiandb has quit (Quit: Leaving)
2022-06-12 23:13:31	←	nevermore has quit (Ping timeout: 265 seconds)
2022-06-12 23:16:37	→	notzmv has joined #haskell
2022-06-12 23:22:06	←	zeenk has quit (Quit: Konversation terminated!)
2022-06-12 23:28:24	←	jmcarthur has quit (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
2022-06-12 23:36:30	→	hnOsmium0001 has joined #haskell
2022-06-12 23:39:27	←	pleo has quit (Ping timeout: 240 seconds)
2022-06-12 23:51:56	→	chreekat2 has joined #haskell
2022-06-12 23:53:56	→	raym has joined #haskell
2022-06-12 23:55:09	←	Teacup has quit (Quit: No Ping reply in 180 seconds.)
2022-06-12 23:56:40	←	mon_aaraj has quit (Ping timeout: 258 seconds)
2022-06-12 23:56:45	→	Teacup has joined #haskell
2022-06-12 23:58:13	→	gmg has joined #haskell
2022-06-12 23:58:40	←	TonyStone has quit (Ping timeout: 248 seconds)
2022-06-12 23:58:42	→	mon_aaraj has joined #haskell
2022-06-12 23:58:59	→	jlamothe has joined #haskell
2022-06-13 00:01:10	←	adanwan has quit (Remote host closed the connection)
2022-06-13 00:01:35	→	adanwan has joined #haskell
2022-06-13 00:03:03	→	Haskelytic has joined #haskell
2022-06-13 00:05:16	→	acidjnk has joined #haskell
2022-06-13 00:05:54	←	chreekat2 has quit (Ping timeout: 272 seconds)
2022-06-13 00:10:51	→	joo-_ has joined #haskell
2022-06-13 00:10:52	←	joo-_ has quit (Changing host)
2022-06-13 00:10:52	→	joo-_ has joined #haskell
2022-06-13 00:12:02	←	mon_aaraj has quit (Ping timeout: 255 seconds)
2022-06-13 00:12:03	→	TonyStone has joined #haskell
2022-06-13 00:12:32	→	tose has joined #haskell
2022-06-13 00:14:07	←	dtman34 has quit (Quit: ZNC 1.7.2+deb3 - https://znc.in)
2022-06-13 00:14:10	→	mon_aaraj has joined #haskell
2022-06-13 00:16:22	hololeap	Benzi-Junior: it kind of "just works"
2022-06-13 00:19:25	←	machinedgod has quit (Ping timeout: 256 seconds)
2022-06-13 00:21:16	→	dtman34 has joined #haskell
2022-06-13 00:23:48	→	pleo has joined #haskell
2022-06-13 00:26:34	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-06-13 00:29:19	Haskelytic	I was reading about the -XDatatypeContexts extension and it says that this is a "misfeature"
2022-06-13 00:29:24	Haskelytic	How so?
2022-06-13 00:30:10	geekosaur	it checks the context while building values, but you can't get the context back when using/consuming such a value
2022-06-13 00:30:11	c_wraith	It doesn't do anything useful
2022-06-13 00:30:15	geekosaur	which makes it useless
2022-06-13 00:30:28	geekosaur	it was one of the stupider parts of Haskell98
2022-06-13 00:30:49	→	zeenk has joined #haskell
2022-06-13 00:30:55	c_wraith	IIRC, it was added when seq was part of a class. it made some sense then.
2022-06-13 00:30:58	Haskelytic	I see. That was a simpler explanation than I expected lol
2022-06-13 00:31:09	c_wraith	But it wasn't removed when seq was made magical
2022-06-13 00:35:15	←	Everything has quit (Quit: leaving)
2022-06-13 00:38:14	←	nate4 has quit (Ping timeout: 246 seconds)
2022-06-13 00:38:24	←	Haskelytic has quit (Quit: Ping timeout (120 seconds))
2022-06-13 00:38:43	→	littlebobeep has joined #haskell
2022-06-13 00:39:53	Bulby[m]	with polysemy, how would you hoist things like Binary.Put into an effect?
2022-06-13 00:40:24	→	abiss27 has joined #haskell
2022-06-13 00:42:30	ℹ	irc: disconnected from server
2022-06-14 05:16:17	→	oxide has joined #haskell
2022-06-14 05:16:17	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-06-14 05:16:17	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-06-14 05:16:17	ℹ	Channel #haskell: 696 nicks (1 op, 0 voices, 695 normals)
2022-06-14 05:16:18	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-06-14 05:16:18	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-06-14 05:16:30	→	winny has joined #haskell
2022-06-14 05:16:57	→	nurupo has joined #haskell
2022-06-14 05:17:03	→	RMSBach has joined #haskell
2022-06-14 05:17:07	→	dragestil has joined #haskell
2022-06-14 05:17:08	→	thaumavorio has joined #haskell
2022-06-14 05:17:50	→	DigitalKiwi has joined #haskell
2022-06-14 05:18:08	←	xff0x has quit (Ping timeout: 246 seconds)
2022-06-14 05:18:23	mon_aaraj	jackdk: Thank you very much! I've realized a lot of that code seemed familiar to me and it turns out most of it can be seen in his blog, though I didn't know about that talk. 
2022-06-14 05:19:39	→	drewolson has joined #haskell
2022-06-14 05:20:02	→	mvk has joined #haskell
2022-06-14 05:20:08	→	Haskelytic has joined #haskell
2022-06-14 05:20:32	Axman6	jackdk always gives good advice
2022-06-14 05:20:53	jackdk	Axman6: and yet you still haven't started using Nix for literally everything
2022-06-14 05:20:56	jackdk	:P
2022-06-14 05:21:20	→	ario has joined #haskell
2022-06-14 05:21:23	Axman6	you still haven't managed to pull of a "hey, look at this cool thing I did in Nix" without it failing :P
2022-06-14 05:21:33	mon_aaraj	haha, guess it's very common for us haskellers to be using nix as a solution for package management
2022-06-14 05:21:51	→	blades has joined #haskell
2022-06-14 05:22:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-06-14 05:22:24	mon_aaraj	unfortunately after updating NixOS it seems my touchpad stopped working so I had to go back to my imperative distro 
2022-06-14 05:22:59	→	relrod has joined #haskell
2022-06-14 05:23:09	→	davean has joined #haskell
2022-06-14 05:23:15	→	eldritch has joined #haskell
2022-06-14 05:23:26	→	stvc has joined #haskell
2022-06-14 05:23:52	Haskelytic	Why is everyone so excited about Nix
2022-06-14 05:24:44	hpc	it tries to solve packaging in ways that look a lot like how haskell solves programming
2022-06-14 05:25:00	Axman6	it has a lot of promise in providing a lot of extremely useful properties, like only ever compiling the same thing once, knowing exactly what is installed on a system and being able to reliably replicate it, and because of that, checking the integrity of a system is fairly trivial too
2022-06-14 05:25:05	hpc	and there's not a whole lot else like it, so it's interesting to learn
2022-06-14 05:25:49	Haskelytic	so basically it tries to extend functional programming to system administration?
2022-06-14 05:25:53	→	apache2 has joined #haskell
2022-06-14 05:25:57	Axman6	having a single way to configure all the different services etc. on your system is pretty handy
2022-06-14 05:26:07	mon_aaraj	Well, not really functional programming 
2022-06-14 05:26:13	Axman6	in a way, but I'm not sure that's the main take away
2022-06-14 05:26:51	Haskelytic	that seems like an awfully ambitious project IMO
2022-06-14 05:26:55	→	littlebobeep has joined #haskell
2022-06-14 05:26:57	Haskelytic	maybe in 5 years I'll try it :)
2022-06-14 05:27:42	→	cocreature has joined #haskell
2022-06-14 05:28:32	geekosaur	in 5 years something else will be the go-to :)
2022-06-14 05:29:14	→	eternalforms has joined #haskell
2022-06-14 05:29:16	Haskelytic	ye olde package management never gets old :)
2022-06-14 05:29:52	hpc	sometimes it seems it never gets old because it's born old
2022-06-14 05:30:14	Haskelytic	 not sure I get what you mean :/
2022-06-14 05:30:23	←	mon_aaraj has quit (Ping timeout: 246 seconds)
2022-06-14 05:30:27	→	zero has joined #haskell
2022-06-14 05:30:28	→	glider has joined #haskell
2022-06-14 05:30:40	→	xff0x has joined #haskell
2022-06-14 05:30:59	→	nate4 has joined #haskell
2022-06-14 05:30:59	hpc	aside from nix, all the new stuff feels like writing init scripts with slightly different pre-defined macros
2022-06-14 05:31:31	→	mon_aaraj has joined #haskell
2022-06-14 05:31:42	hpc	but that's a topic for -offtopic
2022-06-14 05:31:43	←	califax has quit (Remote host closed the connection)
2022-06-14 05:32:16	Haskelytic	Ahhh....I can definitely agree to that
2022-06-14 05:32:16	Axman6	package managers have always felt like hacks to me, Nix is the only one that seemms to try to actually do things right
2022-06-14 05:32:35	→	anderson has joined #haskell
2022-06-14 05:32:43	Haskelytic	Been around enough to see many variants of config managment, package management etc..
2022-06-14 05:32:48	→	mht-wtf has joined #haskell
2022-06-14 05:33:00	Haskelytic	Honestly feels tiring to have to learn what are essentially 50 tools for the same problem
2022-06-14 05:33:01	hpc	nix still feels like a hack to me, but in the same way that lisp and fortran both feel like different hacks
2022-06-14 05:33:22	→	califax has joined #haskell
2022-06-14 05:33:35	hpc	probably because of the lack of types, and how hard it is to find the specification for a derivation
2022-06-14 05:33:49	hpc	like "a derivation is a hash value with fields x, y, and z"
2022-06-14 05:35:00	geekosaur	problem with that being all package management is trying to force a bunch of things into one framework when every single one of them is a one-off, even if they start out following mostly common rules (e.g. autoconf)
2022-06-14 05:35:59	mon_aaraj	err, did people see my last 2 messages about "declarativity and preproducibility"? It seems the logs don't see it 
2022-06-14 05:36:21	←	nate4 has quit (Ping timeout: 252 seconds)
2022-06-14 05:36:31	geekosaur	[14 00:00:23] * mon_aaraj has quit (Ping timeout: 246 seconds)
2022-06-14 05:36:38	ℹ	Kaipei is now known as Kaiepi
2022-06-14 05:36:45	mon_aaraj	ah, yeah. I suppose they didn't send 
2022-06-14 05:36:53	→	slac46955 has joined #haskell
2022-06-14 05:37:35	geekosaur	declarativity and reproducibility are nice when they work
2022-06-14 05:37:41	Axman6	One thing I've liked about using OpenVSd over the years is them occasionally having the bright idea to replace some wonky service with a new more secure one, with a consistent config file format
2022-06-14 05:37:45	→	ringo__ has joined #haskell
2022-06-14 05:37:57	mon_aaraj	here's what i was going to send: nix tries to extend declarativity & reproducibility into package/system management. as far as i can see, there isn't like any exact inherent FP in Nix, other than the language being slightly inspired syntax-wise
2022-06-14 05:37:59	mon_aaraj	by FP languages, but does right about everything else badly                                           
2022-06-14 05:38:01	Axman6	OpenBSD*
2022-06-14 05:38:54	←	slack1256 has quit (Ping timeout: 250 seconds)
2022-06-14 05:40:50	→	dsrt^ has joined #haskell
2022-06-14 05:42:23	→	davl has joined #haskell
2022-06-14 05:44:03	←	mon_aaraj has quit (Ping timeout: 252 seconds)
2022-06-14 05:44:03	←	slac46955 has quit (Read error: Connection reset by peer)
2022-06-14 05:45:32	→	slack1256 has joined #haskell
2022-06-14 05:45:53	→	mon_aaraj has joined #haskell
2022-06-14 05:46:50	→	sweater has joined #haskell
2022-06-14 05:48:21	←	dsrt^ has quit (Remote host closed the connection)
2022-06-14 05:48:42	→	dsrt^ has joined #haskell
2022-06-14 05:49:55	→	causal has joined #haskell
2022-06-14 05:52:31	←	hpc has quit (Ping timeout: 256 seconds)
2022-06-14 05:54:29	→	hpc has joined #haskell
2022-06-14 05:57:19	DigitalKiwi	18:52 mon_aaraj: unfortunately after updating NixOS it seems my touchpad stopped working so I had to go back to my imperative distro
2022-06-14 05:57:30	DigitalKiwi	dude you literally just rollback
2022-06-14 05:58:02	DigitalKiwi	nioxs-rebuild switch --rollback
2022-06-14 05:59:09	←	king_gs has quit (Ping timeout: 276 seconds)
2022-06-14 06:00:16	DigitalKiwi	it even works between nixos versions
2022-06-14 06:00:28	DigitalKiwi	take that debian which can't even upgrade lol
2022-06-14 06:00:37	DigitalKiwi	or arch that can't even downgrade
2022-06-14 06:01:11	Clint	DigitalKiwi: pfft
2022-06-14 06:01:13	Clint	can't upgrade
2022-06-14 06:02:12	DigitalKiwi	skip a version see how it goes ;D
2022-06-14 06:02:44	Clint	well, that's not supported
2022-06-14 06:03:09	DigitalKiwi	exactly
2022-06-14 06:03:29	DigitalKiwi	on nixos you can skip versions up and down ;p
2022-06-14 06:03:39	DigitalKiwi	it's great
2022-06-14 06:04:18	DigitalKiwi	i had a server with an uptime of like 2 years on the latest nixos beta lol
2022-06-14 06:04:41	DigitalKiwi	 00:33:01  up 78 days  4:39,  1 user,  load average: 0.86, 0.97, 0.99
2022-06-14 06:05:08	DigitalKiwi	i didn't need to reboot it but i did :(
2022-06-14 06:05:26	DigitalKiwi	digitalocean had new hardware lol
2022-06-14 06:05:36	DigitalKiwi	so now it's new and improved!
2022-06-14 06:06:11	DigitalKiwi	22.11pre383837.033bd4fa9a8 (Raccoon)
2022-06-14 06:14:17	←	xff0x has quit (Ping timeout: 252 seconds)
2022-06-14 06:17:17	←	tangy has quit ()
2022-06-14 06:20:02	←	sammelweis has quit (Read error: Connection reset by peer)
2022-06-14 06:20:05	→	sammelweis_ has joined #haskell
2022-06-14 06:21:04	←	Lord_of_Life has quit (Ping timeout: 248 seconds)
2022-06-14 06:22:49	jackdk	mon_aaraj: Nix-the-language is a pure functional programming language with exactly one side-effecting primitive: `derivation`, which roughly means "run a command and capture its outputs under `/nix/store`"
2022-06-14 06:23:06	mon_aaraj	ah, okay
2022-06-14 06:23:11	mon_aaraj	thank you for the correction 
2022-06-14 06:23:42	→	Lord_of_Life has joined #haskell
2022-06-14 06:23:44	jackdk	No worries mate
2022-06-14 06:25:25	→	king_gs has joined #haskell
2022-06-14 06:26:46	←	dsrt^ has quit (Remote host closed the connection)
2022-06-14 06:27:04	←	littlebobeep has quit (Ping timeout: 240 seconds)
2022-06-14 06:27:07	→	dsrt^ has joined #haskell
2022-06-14 06:27:45	←	Cupcakus has quit (Ping timeout: 276 seconds)
2022-06-14 06:28:03	←	relrod has quit (Ping timeout: 252 seconds)
2022-06-14 06:28:59	←	thaumavorio has quit (Ping timeout: 258 seconds)
2022-06-14 06:29:03	←	dragestil has quit (Ping timeout: 276 seconds)
2022-06-14 06:29:22	←	nurupo has quit (Ping timeout: 258 seconds)
2022-06-14 06:29:42	←	anderson has quit (Ping timeout: 252 seconds)
2022-06-14 06:29:42	←	glider has quit (Ping timeout: 252 seconds)
2022-06-14 06:29:42	←	stvc has quit (Ping timeout: 252 seconds)
2022-06-14 06:29:42	←	eldritch has quit (Ping timeout: 252 seconds)
2022-06-14 06:29:42	←	davean has quit (Ping timeout: 252 seconds)
2022-06-14 06:29:42	←	RMSBach has quit (Ping timeout: 276 seconds)
2022-06-14 06:29:45	←	DigitalKiwi has quit (Ping timeout: 258 seconds)
2022-06-14 06:30:15	←	blades has quit (Ping timeout: 252 seconds)
2022-06-14 06:30:15	←	ario has quit (Ping timeout: 252 seconds)
2022-06-14 06:30:15	←	drewolson has quit (Ping timeout: 252 seconds)
2022-06-14 06:34:30	jackdk	(There is a _lot_ built on top of that primitive)
2022-06-14 06:35:06	→	relrod has joined #haskell
2022-06-14 06:36:27	→	jmcarthur has joined #haskell
2022-06-14 06:37:57	→	thaumavorio has joined #haskell
2022-06-14 06:38:00	←	jmcarthur has quit (Client Quit)
2022-06-14 06:38:01	→	nurupo has joined #haskell
2022-06-14 06:38:09	→	littlebobeep has joined #haskell
2022-06-14 06:38:32	→	DigitalKiwi has joined #haskell
2022-06-14 06:38:52	→	RMSBach has joined #haskell
2022-06-14 06:38:53	→	dragestil has joined #haskell
2022-06-14 06:39:31	→	drewolson has joined #haskell
2022-06-14 06:40:40	←	albet70 has quit (Remote host closed the connection)
2022-06-14 06:41:27	mon_aaraj	yep, and aren't derivations just "sets" (as they called it in the language) too?
2022-06-14 06:41:34	DigitalKiwi	https://mostlyabsurd.com/files/2022-06-08-212240_1454x1373_scrot.png
2022-06-14 06:41:49	→	ario_ has joined #haskell
2022-06-14 06:41:55	DigitalKiwi	anyone want one or several? :D
2022-06-14 06:42:18	DigitalKiwi	the logo is on the other side too
2022-06-14 06:42:25	→	blades has joined #haskell
2022-06-14 06:42:27	DigitalKiwi	https://mostlyabsurd.com/files/2022-06-08-212549_2313x1745_scrot.png
2022-06-14 06:43:13	→	davean has joined #haskell
2022-06-14 06:43:31	→	stvc has joined #haskell
2022-06-14 06:44:37	→	eldritch has joined #haskell
2022-06-14 06:45:52	←	machinedgod has quit (Ping timeout: 260 seconds)
2022-06-14 06:46:09	→	glider has joined #haskell
2022-06-14 06:46:47	→	albet70 has joined #haskell
2022-06-14 06:48:13	→	anderson has joined #haskell
2022-06-14 06:48:33	→	pointblank has joined #haskell
2022-06-14 06:49:48	←	p3n has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-06-14 06:50:40	→	p3n has joined #haskell
2022-06-14 06:50:45	exarkun	mon_aaraj: nix-the-language has a set type which is more often called an "attrset" because it's more like Map String a than a set
2022-06-14 06:51:00	exarkun	mon_aaraj: and derivations are values of that type that follow a certain set of rules
2022-06-14 06:51:19	exarkun	mon_aaraj: and can the argument to `derivation` to perform the side-effecting
2022-06-14 06:51:28	exarkun	s/can the/can be the/
2022-06-14 06:53:41	ℹ	irc: disconnected from server
2022-06-18 14:17:23	→	oxide has joined #haskell
2022-06-18 14:17:23	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-06-18 14:17:23	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-06-18 14:17:24	ℹ	Channel #haskell: 710 nicks (1 op, 0 voices, 709 normals)
2022-06-18 14:17:28	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-06-18 14:17:28	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-06-18 14:19:25	←	tzh has quit (Quit: zzz)
2022-06-18 14:20:58	→	namkeleser has joined #haskell
2022-06-18 14:21:33	←	namkeleser has quit (Client Quit)
2022-06-18 14:22:44	←	MajorBiscuit has quit (Quit: WeeChat 3.5)
2022-06-18 14:22:47	→	alexhandy has joined #haskell
2022-06-18 14:22:51	←	alexhandy has quit (Read error: Connection reset by peer)
2022-06-18 14:23:32	→	perdent has joined #haskell
2022-06-18 14:24:01	→	yrlnry has joined #haskell
2022-06-18 14:24:32	←	Sgeo has quit (Read error: Connection reset by peer)
2022-06-18 14:24:42	←	notzmv has quit (Ping timeout: 244 seconds)
2022-06-18 14:30:19	ℹ	irc: disconnected from server
2022-06-18 14:30:40	→	oxide has joined #haskell
2022-06-18 14:30:40	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-06-18 14:30:40	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-06-18 14:30:40	ℹ	Channel #haskell: 708 nicks (1 op, 0 voices, 707 normals)
2022-06-18 14:30:41	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-06-18 14:30:41	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-06-18 14:30:44	kuribas	for example: https://github.com/kuribas/hasqlator-mysql/blob/main/src/Database/MySQL/Hasqlator/Typed.hs#L94
2022-06-18 14:30:58	tomsmeding	still, if MyStack implements all the relevant mtl classes, I'd expect that you usually don't end up rewrapping the stack many times for helper functions, except for intrinsic operations of the monads
2022-06-18 14:31:01	→	alexhandy has joined #haskell
2022-06-18 14:31:36	tomsmeding	oh you actually use QueryInner in multiple newtypes
2022-06-18 14:31:53	tomsmeding	right then it makes sense
2022-06-18 14:32:37	kuribas	I just found that happend in most of my code.  Could be a coincidence.
2022-06-18 14:35:01	→	gurkenglas has joined #haskell
2022-06-18 14:35:30	←	alexhandy has quit (Read error: Connection reset by peer)
2022-06-18 14:36:30	←	Vajb has quit (Read error: Connection reset by peer)
2022-06-18 14:39:25	maerwald[m]	Transformer salad?
2022-06-18 14:39:41	→	Vajb has joined #haskell
2022-06-18 14:39:42	←	benin0 has quit (Quit: The Lounge - https://thelounge.chat)
2022-06-18 14:40:17	kuribas	no, having to write the inner monad many times.
2022-06-18 14:40:45	→	alexhandy has joined #haskell
2022-06-18 14:41:17	maerwald[m]	Reminds me of when I wanted to use the Handler transformer in servant in an unusual place. Ended up with MonadBaseControl, MonadUnliftIO, obscure type errors and the conclusion that it's not possible. 
2022-06-18 14:42:00	maerwald[m]	Not an invention to be proud of. We just lack better alternatives.
2022-06-18 14:44:23	←	alexhandy has quit (Read error: Connection reset by peer)
2022-06-18 14:44:23	kuribas	It worked well enough for my uses.
2022-06-18 14:44:44	kuribas	And you can always go back to (Env -> IO a) if you want.
2022-06-18 14:45:37	←	mon_aaraj has quit (Ping timeout: 248 seconds)
2022-06-18 14:47:31	maerwald[m]	Not sure what that means
2022-06-18 14:47:49	→	mon_aaraj has joined #haskell
2022-06-18 14:48:58	maerwald[m]	For except it's not even clear what a sound MonadUnliftIO instance is. Sure, you can not use transformers at all in the first place. That doesn't seem to be a compelling argument for them.
2022-06-18 14:49:38	kuribas	you don't need MonadUnliftIO with (Env -> IO a).
2022-06-18 14:50:02	maerwald[m]	Yes it's not a transformer lol
2022-06-18 14:50:48	maerwald[m]	https://github.com/fpco/unliftio/issues/68
2022-06-18 14:52:15	kuribas	"Not an invention to be proud of. We just lack better alternatives." <= meh, it's a technique.  Sometimes useful, sometimes not.  Pride has nothing to do with it.
2022-06-18 14:52:38	kuribas	It's just a disfunctional way of looking at these things.
2022-06-18 14:52:46	kuribas	As if they should be always working or never.
2022-06-18 14:53:28	kuribas	Same with clojure folks ignoring "all" type theory, because "types sometimes get in the way", or "types cannot prove anything".
2022-06-18 14:53:46	kuribas	I don't care, as long as they give me "some" value.
2022-06-18 14:54:19	kuribas	Something doesn't have to "always work" to be useful.
2022-06-18 14:54:51	kuribas	Just use the right technique at the right time, not apply anything religiously.
2022-06-18 14:55:15	maerwald[m]	https://www.snoyman.com/blog/2018/02/conduitpocalypse/
2022-06-18 14:55:37	→	alexhandy has joined #haskell
2022-06-18 14:55:42	maerwald[m]	Yes exactly, cleanup handlers can have suprising effects with monadbasecontrol
2022-06-18 14:56:03	maerwald[m]	But why care. Haskell is not about correctness, is it? ;)
2022-06-18 14:56:04	←	FinnElija has quit (Ping timeout: 240 seconds)
2022-06-18 14:56:33	maerwald[m]	"Works most of the time"  :p
2022-06-18 14:57:11	←	bilegeek has quit (Quit: Leaving)
2022-06-18 14:57:14	→	leeb has joined #haskell
2022-06-18 14:57:15	←	meinside has quit (Quit: Connection closed for inactivity)
2022-06-18 14:58:28	←	yauhsien has quit (Remote host closed the connection)
2022-06-18 14:59:04	→	yauhsien has joined #haskell
2022-06-18 14:59:23	←	alexhandy has quit (Read error: Connection reset by peer)
2022-06-18 14:59:53	kuribas	Frankly, I don't think haskell is about "correctness", even though many people claim it.
2022-06-18 15:00:04	kuribas	It is about consistency and expressivity.
2022-06-18 15:00:28	kuribas	You're program can be consistent and expressive, but still express the "wrong" thing.
2022-06-18 15:00:31	tomsmeding	though the type system helps with writing less bugs
2022-06-18 15:00:43	tomsmeding	dumb bugs, that is
2022-06-18 15:00:56	tomsmeding	which I guess is what you're saying with "consistency"
2022-06-18 15:01:18	kuribas	I mean you'll get the wrong thing consistently.
2022-06-18 15:01:27	kuribas	Not one time this, another time something else.
2022-06-18 15:01:43	→	FinnElija has joined #haskell
2022-06-18 15:01:47	←	jakalx has left #haskell (Error from remote client)
2022-06-18 15:02:15	kuribas	and you get less bugs because you can express the intent more clearly, rather than getting lost in low level details.
2022-06-18 15:02:41	maerwald[m]	Also a good read: https://github.com/lexi-lambda/eff/blob/8c4df4bf54faf22456354be18095b14825be5e85/notes/semantics-zoo.md
2022-06-18 15:03:30	←	yauhsien has quit (Ping timeout: 256 seconds)
2022-06-18 15:06:10	sm	also relevant - long but good!
2022-06-18 15:06:11	sm	https://overcast.fm/+ng708J6ic
2022-06-18 15:06:41	→	jakalx has joined #haskell
2022-06-18 15:06:57	→	alexhandy has joined #haskell
2022-06-18 15:07:00	←	alexhandy has quit (Client Quit)
2022-06-18 15:07:16	maerwald[m]	3 hours, lol
2022-06-18 15:07:36	maerwald[m]	On my next flight to the moon maybe
2022-06-18 15:08:32	sm	hmm, better link ? https://podcasts.apple.com/us/podcast/17-the-lost-elegance-of-computation-conal-elliott
2022-06-18 15:08:42	→	juri_ has joined #haskell
2022-06-18 15:08:43	Franciman	oh
2022-06-18 15:08:46	Franciman	an apple podcast?
2022-06-18 15:08:51	Franciman	nifty
2022-06-18 15:09:06	sm	just a podcast, I can't find a neutral link
2022-06-18 15:09:11	Franciman	kuribas: so it is the same as scheme?
2022-06-18 15:09:18	Franciman	being about consistency and expressivity
2022-06-18 15:09:24	Franciman	sm: lol
2022-06-18 15:09:25	Franciman	np
2022-06-18 15:09:29	Franciman	thanks, I'm happy
2022-06-18 15:09:32	Franciman	for the contents
2022-06-18 15:09:39	sm	yes extremely long but in this case I would say well worth a listen!
2022-06-18 15:09:56	kuribas	Franciman: no, scheme doesn't ensure consistency of my program.
2022-06-18 15:10:15	Franciman	oh ok, sorry i misinterpreted as in: syntactic consistency somehow
2022-06-18 15:10:26	Franciman	but isn't consistency tightly related to correctness?
2022-06-18 15:10:56	tomsmeding	consistency is a term for a particular family of properties about your program, that the type system proves
2022-06-18 15:11:19	tomsmeding	if those properties are true of the intended behaviour of the program, then it's partial correctness
2022-06-18 15:13:54	←	econo has quit (Quit: Connection closed for inactivity)
2022-06-18 15:14:01	maerwald	consistently wrong
2022-06-18 15:14:48	maerwald	except transformers don't give you consistency there
2022-06-18 15:15:00	maerwald	"works most of the time" is exactly inconsistent
2022-06-18 15:15:19	kuribas	Franciman: well, you cannot be correct if you are not consistent.
2022-06-18 15:16:11	kuribas	Franciman: for example, you have a REST API with swagger spec, but your program implements it differently.
2022-06-18 15:16:44	kuribas	Franciman: or you write queries for a database that don't match the schema of the database.
2022-06-18 15:17:31	←	Teacup has quit (Quit: No Ping reply in 180 seconds.)
2022-06-18 15:17:57	→	eggplantade has joined #haskell
2022-06-18 15:18:56	→	Teacup has joined #haskell
2022-06-18 15:19:18	→	nate4 has joined #haskell
2022-06-18 15:22:11	←	eggplantade has quit (Ping timeout: 246 seconds)
2022-06-18 15:23:56	←	nate4 has quit (Ping timeout: 246 seconds)
2022-06-18 15:25:23	maerwald	kuribas: I think you can be correct without being consistent. The correctness property is just unlikely to remain once you change the code.
2022-06-18 15:25:48	→	zer0bitz has joined #haskell
2022-06-18 15:26:08	maerwald	it's like those short windows of soberness that we sometimes experience 
2022-06-18 15:27:36	kuribas	how would you observe correctness if the code is not consistent?
2022-06-18 15:28:24	→	__monty__ has joined #haskell
2022-06-18 15:31:45	→	yauhsien has joined #haskell
2022-06-18 15:32:27	←	zeenk has quit (Quit: Konversation terminated!)
2022-06-18 15:34:52	maerwald	kuribas: not sure I understand the question. You can e.g. test a binary against a specification
2022-06-18 15:35:17	maerwald	but a single line of code change would throw over all of your confidence
2022-06-18 15:36:21	maerwald	so everything is a blackbox all the time
2022-06-18 15:40:01	←	yauhsien has quit (Ping timeout: 248 seconds)
2022-06-18 15:42:15	←	jakalx has left #haskell (Error from remote client)
2022-06-18 15:47:21	→	jakalx has joined #haskell
2022-06-18 16:05:05	←	__monty__ has quit (Ping timeout: 248 seconds)
2022-06-18 16:05:22	→	__monty__ has joined #haskell
2022-06-18 16:06:13	←	pavonia has quit (Quit: Bye!)
2022-06-18 16:06:51	←	mon_aaraj has quit (Ping timeout: 240 seconds)
2022-06-18 16:09:11	→	mon_aaraj has joined #haskell
2022-06-18 16:09:52	→	rendar has joined #haskell
2022-06-18 16:12:04	←	__monty__ has quit (Ping timeout: 256 seconds)
2022-06-18 16:13:49	→	yauhsien has joined #haskell
2022-06-18 16:20:40	ℹ	irc: disconnected from server
2022-06-18 16:21:08	→	oxide has joined #haskell
2022-06-18 16:21:08	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-06-18 16:21:08	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-06-18 16:21:08	ℹ	Channel #haskell: 704 nicks (1 op, 0 voices, 703 normals)
2022-06-18 16:21:09	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-06-18 16:21:09	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-06-18 16:31:26	→	gmg has joined #haskell
2022-06-18 16:33:06	←	mon_aaraj has quit (Read error: Connection reset by peer)
2022-06-18 16:35:34	→	mon_aaraj has joined #haskell
2022-06-18 16:36:24	→	notzmv has joined #haskell
2022-06-18 16:53:58	→	pretty_dumm_guy has joined #haskell
2022-06-18 17:02:19	→	perdent has joined #haskell
2022-06-18 17:03:12	→	fserucas has joined #haskell
2022-06-18 17:03:53	←	fserucas has quit (Client Quit)
2022-06-18 17:09:29	←	frost has quit (Quit: Client closed)
2022-06-18 17:10:31	→	[_] has joined #haskell
2022-06-18 17:11:17	→	Midjak has joined #haskell
2022-06-18 17:12:50	←	[itchyjunk] has quit (Ping timeout: 240 seconds)
2022-06-18 17:14:48	→	Unicorn_Princess has joined #haskell
2022-06-18 17:19:47	→	eggplantade has joined #haskell
2022-06-18 17:22:39	←	FinnElija has quit (Remote host closed the connection)
2022-06-18 17:23:17	→	FinnElija has joined #haskell
2022-06-18 17:24:20	←	eggplantade has quit (Ping timeout: 255 seconds)
2022-06-18 17:28:32	→	agumonkey has joined #haskell
2022-06-18 17:36:56	←	mon_aaraj has quit (Ping timeout: 246 seconds)
2022-06-18 17:39:15	→	mon_aaraj has joined #haskell
2022-06-18 17:42:02	→	jmcarthur has joined #haskell
2022-06-18 17:44:42	←	jmcarthur has quit (Client Quit)
2022-06-18 17:44:51	→	AlexZenon has joined #haskell
2022-06-18 17:45:16	→	AlexNoo has joined #haskell
2022-06-18 17:45:19	←	FinnElija has quit (Remote host closed the connection)
2022-06-18 17:45:34	→	Alex_test has joined #haskell
2022-06-18 17:45:48	→	jmcarthur has joined #haskell
2022-06-18 17:45:53	→	FinnElija has joined #haskell
2022-06-18 17:51:29	←	juri_ has quit (Read error: Connection reset by peer)
2022-06-18 17:52:05	→	juri_ has joined #haskell
2022-06-18 17:58:40	←	cheater has quit (Ping timeout: 248 seconds)
2022-06-18 17:59:54	→	frost has joined #haskell
2022-06-18 18:01:24	←	raym has quit (Remote host closed the connection)
2022-06-18 18:01:49	→	kenaryn has joined #haskell
2022-06-18 18:02:03	→	cheater has joined #haskell
2022-06-18 18:14:26	→	pleo has joined #haskell
2022-06-18 18:22:09	←	mon_aaraj has quit (Ping timeout: 248 seconds)
2022-06-18 18:23:58	→	mon_aaraj has joined #haskell
2022-06-18 18:26:31	←	bitdex has quit (Write error: Connection reset by peer)
2022-06-18 18:26:31	←	winny has quit (Write error: Broken pipe)
2022-06-18 18:26:31	←	noteness has quit (Remote host closed the connection)
2022-06-18 18:26:31	←	HotblackDesiato has quit (Remote host closed the connection)
2022-06-18 18:26:31	←	adanwan has quit (Write error: Connection reset by peer)
2022-06-18 18:26:31	←	ec has quit (Write error: Connection reset by peer)
2022-06-18 18:26:31	←	califax has quit (Write error: Connection reset by peer)
2022-06-18 18:26:31	←	FinnElija has quit (Write error: Connection reset by peer)
2022-06-18 18:26:32	←	gmg has quit (Write error: Connection reset by peer)
2022-06-18 18:26:32	←	ChaiTRex has quit (Write error: Connection reset by peer)
2022-06-18 18:26:32	←	stiell has quit (Read error: Connection reset by peer)
2022-06-18 18:26:32	←	chexum has quit (Read error: Connection reset by peer)
2022-06-18 18:27:23	→	FinnElija has joined #haskell
2022-06-18 18:27:32	→	chexum has joined #haskell
2022-06-18 18:27:46	→	califax has joined #haskell
2022-06-18 18:27:50	→	ec has joined #haskell
2022-06-18 18:28:00	→	adanwan has joined #haskell
2022-06-18 18:28:01	→	stiell has joined #haskell
2022-06-18 18:28:28	→	ChaiTRex has joined #haskell
2022-06-18 18:28:31	→	HotblackDesiato has joined #haskell
2022-06-18 18:28:34	→	noteness has joined #haskell
2022-06-18 18:29:07	→	winny has joined #haskell
2022-06-18 18:29:09	→	bitdex has joined #haskell
2022-06-18 18:29:35	→	gmg has joined #haskell
2022-06-18 18:30:07	←	jmdaemon has quit (Ping timeout: 244 seconds)
2022-06-18 18:30:45	←	jmcarthur has quit (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
2022-06-18 18:31:38	→	jmcarthur has joined #haskell
2022-06-18 18:34:58	→	[Leary] has joined #haskell
2022-06-18 18:36:47	←	kuribas has quit (Quit: ERC (IRC client for Emacs 26.3))
2022-06-18 18:40:04	←	bitdex has quit (Ping timeout: 240 seconds)
2022-06-18 18:43:59	→	bitdex has joined #haskell
2022-06-18 18:49:53	←	rodental has quit (Remote host closed the connection)
2022-06-18 18:50:08	→	rodental has joined #haskell
2022-06-18 18:51:12	←	Teacup has quit (Quit: No Ping reply in 180 seconds.)
2022-06-18 18:52:36	→	Teacup has joined #haskell
2022-06-18 18:54:39	←	jmcarthur has quit (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
2022-06-18 19:00:23	←	FinnElija has quit (Remote host closed the connection)
2022-06-18 19:02:22	←	jakalx has left #haskell
2022-06-18 19:04:15	→	FinnElija has joined #haskell
2022-06-18 19:05:10	→	machinedgod has joined #haskell
2022-06-18 19:07:44	→	jakalx has joined #haskell
2022-06-18 19:09:00	→	odnes has joined #haskell
2022-06-18 19:09:05	←	pretty_dumm_guy has quit (Ping timeout: 248 seconds)
2022-06-18 19:09:52	←	rodental has quit (Remote host closed the connection)
2022-06-18 19:10:05	→	rodental has joined #haskell
2022-06-18 19:13:05	←	winny has quit (Remote host closed the connection)
2022-06-18 19:16:37	→	winny has joined #haskell
2022-06-18 19:16:47	←	bontaq has quit (Ping timeout: 256 seconds)
2022-06-18 19:18:22	→	yauhsien has joined #haskell
2022-06-18 19:20:49	→	nate4 has joined #haskell
2022-06-18 19:21:32	→	eggplantade has joined #haskell
2022-06-18 19:22:17	←	Alex_test has quit (Ping timeout: 246 seconds)
2022-06-18 19:22:59	←	yauhsien has quit (Ping timeout: 246 seconds)
2022-06-18 19:23:41	←	AlexZenon has quit (Ping timeout: 246 seconds)
2022-06-18 19:24:09	←	AlexNoo has quit (Ping timeout: 256 seconds)
2022-06-18 19:25:21	→	coot has joined #haskell
2022-06-18 19:25:26	←	nate4 has quit (Ping timeout: 246 seconds)
2022-06-18 19:26:08	←	eggplantade has quit (Ping timeout: 248 seconds)
2022-06-18 19:26:29	→	waleee has joined #haskell
2022-06-18 19:29:06	←	frost has quit (Ping timeout: 252 seconds)
2022-06-18 19:31:03	→	tromp has joined #haskell
2022-06-18 19:36:24	→	MajorBiscuit has joined #haskell
2022-06-18 19:36:36	←	MajorBiscuit has quit (Client Quit)
2022-06-18 19:42:39	←	coot has quit (Quit: coot)
2022-06-18 19:43:39	→	MajorBiscuit has joined #haskell
2022-06-18 19:45:09	→	azimut has joined #haskell
2022-06-18 19:48:42	→	ec_ has joined #haskell
2022-06-18 19:49:28	←	ec has quit (Remote host closed the connection)
2022-06-18 19:51:12	→	DarQ has joined #haskell
2022-06-18 19:52:30	DarQ	hello
2022-06-18 19:52:31	DarQ	I'm currently checking out real world haskell and came across a command which I couldn't execute in the powershell
2022-06-18 19:53:07	DarQ	this is said command "runghc WC < quux.txt" (sry, I don't know how to format messages)
2022-06-18 19:53:38	DarQ	the problem is with the < sign which I assume only works on unix or smth
2022-06-18 19:54:32	DarQ	how should I fix that?
2022-06-18 19:56:04	←	ec_ has quit (Ping timeout: 240 seconds)
2022-06-18 19:56:33	→	jmcarthur has joined #haskell
2022-06-18 19:57:00	[exa]	DarQ: I guess powershell _should_ have some way to pipe stuff into programs' standard input
2022-06-18 19:57:18	[exa]	(no guarantees tho, it's from redmond)
2022-06-18 19:57:54	→	ec_ has joined #haskell
2022-06-18 19:58:08	←	jmcarthur has quit (Client Quit)
2022-06-18 19:58:14	→	joo-_ has joined #haskell
2022-06-18 19:58:15	←	joo-_ has quit (Changing host)
2022-06-18 19:58:15	→	joo-_ has joined #haskell
2022-06-18 19:58:57	[exa]	oh whoops, maybe not
2022-06-18 20:00:00	geekosaur	cmd.exe can handle that, rwh predates powershell
2022-06-18 20:00:12	→	jmcarthur has joined #haskell
2022-06-18 20:01:39	DarQ	hmm
2022-06-18 20:01:49	DarQ	I haven't used cmd in so long
2022-06-18 20:01:51	DarQ	let's see
2022-06-18 20:03:17	geekosaur	yeh, looks like powershell only supports output redirection
2022-06-18 20:03:26	geekosaur	https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_redirection?view=powershell-7.2
2022-06-18 20:04:53	→	zeenk has joined #haskell
2022-06-18 20:09:02	←	MajorBiscuit has quit (Ping timeout: 255 seconds)
2022-06-18 20:10:55	DarQ	was there some update to the cmd or smth?
2022-06-18 20:11:04	DarQ	why does it look like my powershell?
2022-06-18 20:11:17	DarQ	and why can't cd to "G:\"?
2022-06-18 20:11:39	DarQ	can't I*
2022-06-18 20:11:44	tomsmeding	DarQ: you might also try `Get-Content quux.txt | runghc WC` in powershell -- no guarantees, not a windows user, just looked at some docs
2022-06-18 20:12:09	tomsmeding	oh apparently Get-Content -Path quux.txt
2022-06-18 20:12:32	tomsmeding	perhaps with -Raw (why is powershell so complicated)
2022-06-18 20:13:21	tomsmeding	alternatively `type quux.txt | runghc WC`
2022-06-18 20:13:50	DarQ	uh
2022-06-18 20:13:53	DarQ	this did work
2022-06-18 20:13:59	DarQ	thx
2022-06-18 20:14:04	tomsmeding	which one?
2022-06-18 20:14:09	DarQ	type quux.txt | runghc WC
2022-06-18 20:14:11	tomsmeding	ah
2022-06-18 20:14:30	tomsmeding	old-skool `type` :)
2022-06-18 20:14:39	geekosaur	in cmd you'd have to separately `g:` and `cd \`
2022-06-18 20:15:06	geekosaur	currenbt directory is per drive and `cd` doesn't switch the current drive, just the current directory on that drive
2022-06-18 20:15:21	DarQ	ooo
2022-06-18 20:15:30	DarQ	that makes sense
2022-06-18 20:15:43	DarQ	thanks
2022-06-18 20:15:44	←	pleo has quit (Ping timeout: 248 seconds)
2022-06-18 20:18:39	→	jao has joined #haskell
2022-06-18 20:21:26	←	shriekingnoise has quit (Ping timeout: 246 seconds)
2022-06-18 20:26:39	→	pleo has joined #haskell
2022-06-18 20:33:04	←	Axman6 has quit (Remote host closed the connection)
2022-06-18 20:33:52	→	Axman6 has joined #haskell
2022-06-18 20:34:12	→	alp__ has joined #haskell
2022-06-18 20:34:47	→	zebrag has joined #haskell
2022-06-18 20:35:31	←	jmcarthur has quit (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
2022-06-18 20:36:48	←	winny has quit (Remote host closed the connection)
2022-06-18 20:40:11	→	winny has joined #haskell
2022-06-18 20:40:12	←	mon_aaraj has quit (Ping timeout: 276 seconds)
2022-06-18 20:41:30	→	mon_aaraj has joined #haskell
2022-06-18 20:42:44	→	shriekingnoise has joined #haskell
2022-06-18 20:45:20	→	yauhsien has joined #haskell
2022-06-18 20:46:12	→	justsomeguy has joined #haskell
2022-06-18 20:46:53	justsomeguy	When should I use foldl?
2022-06-18 20:47:21	justsomeguy	I get the impression that it's very rarely used, since it causes thunk buildup for long lists.
2022-06-18 20:47:41	maerwald	I think only foldl' is interesting if you want a strict accumulator
2022-06-18 20:49:30	←	yauhsien has quit (Ping timeout: 240 seconds)
2022-06-18 20:49:35	justsomeguy	That makes sense. I wonder, though, is there anything that foldl can do that foldr and/or foldl' can't?
2022-06-18 20:50:27	→	coot has joined #haskell
2022-06-18 20:51:49	→	MajorBiscuit has joined #haskell
2022-06-18 20:53:35	geekosaur	I think foldl is there only because foldr is, but foldl is only interesting in a strict by default language
2022-06-18 20:54:50	←	odnes has quit (Read error: Connection reset by peer)
2022-06-18 20:54:57	→	odnes has joined #haskell
2022-06-18 20:55:17	→	slaydr has joined #haskell
2022-06-18 20:58:18	←	DarQ has quit (Quit: Client closed)
2022-06-18 21:00:11	→	Player-205[m] has joined #haskell
2022-06-18 21:02:27	→	AlexNoo has joined #haskell
2022-06-18 21:02:55	exarkun	> However, if the combining function is lazy in its first argument, foldl may happily return a result where foldl' hits an exception
2022-06-18 21:02:58	lambdabot	 <hint>:1:8: error: parse error on input ‘,’
2022-06-18 21:02:58	exarkun	from https://wiki.haskell.org/Foldr_Foldl_Foldl'
2022-06-18 21:03:03	exarkun	sorry lambdabot not for you
2022-06-18 21:03:19	←	odnes has quit (Ping timeout: 256 seconds)
2022-06-18 21:03:25	→	Alex_test has joined #haskell
2022-06-18 21:03:45	→	AlexZenon has joined #haskell
2022-06-18 21:04:36	→	gurkenglas has joined #haskell
2022-06-18 21:07:53	→	econo has joined #haskell
2022-06-18 21:09:47	←	tromp has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2022-06-18 21:13:36	←	Player-205[m] has quit (Quit: issued !quit command)
2022-06-18 21:14:06	←	agumonkey has quit (Ping timeout: 256 seconds)
2022-06-18 21:15:52	←	dolio has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-06-18 21:18:09	←	MajorBiscuit has quit (Ping timeout: 248 seconds)
2022-06-18 21:18:53	→	dolio has joined #haskell
2022-06-18 21:18:55	→	DarQ has joined #haskell
2022-06-18 21:19:19	DarQ	btw, is "real world haskell" still recommended?
2022-06-18 21:19:21	←	dolio has quit (Client Quit)
2022-06-18 21:19:26	DarQ	or are there better options rn
2022-06-18 21:20:03	geekosaur	it's somewhat dated but at least parts are still recommended
2022-06-18 21:20:10	→	dolio has joined #haskell
2022-06-18 21:20:11	→	chexum_ has joined #haskell
2022-06-18 21:20:15	geekosaur	it fills a space in the haskell ecosystems that not much else does
2022-06-18 21:20:32	←	slaydr has quit (Remote host closed the connection)
2022-06-18 21:20:58	DarQ	which parts might those be?
2022-06-18 21:21:32	DarQ	is there a specific chapter where I should go looking for better resources?
2022-06-18 21:22:04	←	chexum has quit (Ping timeout: 240 seconds)
2022-06-18 21:22:31	geekosaur	the early stuff is basically a primer on haskell. later ones are good for learning how to use it effectively, and (as the title suggests) how to use it in the real world
2022-06-18 21:22:59	→	eggplantade has joined #haskell
2022-06-18 21:23:02	geekosaur	although with the growth of web stuff we probably need to see either additional chapters or a book on using eg. servant
2022-06-18 21:24:16	→	tromp has joined #haskell
2022-06-18 21:24:26	ℹ	chexum_ is now known as chexum
2022-06-18 21:27:20	←	eggplantade has quit (Ping timeout: 255 seconds)
2022-06-18 21:27:42	→	tzh has joined #haskell
2022-06-18 21:28:21	←	justsomeguy has quit (Quit: WeeChat 3.5)
2022-06-18 21:32:25	→	MajorBiscuit has joined #haskell
2022-06-18 21:33:31	←	MajorBiscuit has quit (Client Quit)
2022-06-18 21:33:32	→	Volt_ has joined #haskell
2022-06-18 21:39:09	→	Player-205[m] has joined #haskell
2022-06-18 21:40:01	→	justsomeguy has joined #haskell
2022-06-18 21:40:51	←	Player-205[m] has left #haskell
2022-06-18 21:41:11	→	slaydr has joined #haskell
2022-06-18 21:41:23	→	Player-205[m] has joined #haskell
2022-06-18 21:42:29	dsal	I found "Real World Haskell" to be more of a book that demonstrates you can do things than anything I could personally learn from.  It was inspirational in the sort of things you could learn, but I don't think I could generalize the examples that well.  i.e., it didn't suit my learning style well.
2022-06-18 21:44:23	monochrom	Real World Haskell skips every step in the middle between a preview of basic Haskell and a complicated project that has too many distracting moving parts.
2022-06-18 21:45:59	Bulby[m]	better than what I did - skim Learn you a haskell and write a complex project
2022-06-18 21:46:07	←	kritzefitz has quit (Ping timeout: 240 seconds)
2022-06-18 21:46:10	monochrom	True to its name sake "real world", if you understand the derogatory sense of "real world".
2022-06-18 21:46:26	→	kritzefitz has joined #haskell
2022-06-18 21:47:53	monochrom	For example the chapter on a regex library is 20% the regex library and 80% digressions.
2022-06-18 21:48:34	→	Feuermagier has joined #haskell
2022-06-18 21:48:49	Bulby[m]	i suggest not learning anything and writing a random project. worked for me
2022-06-18 21:49:15	Bulby[m]	(rust is a similar story)
2022-06-18 21:49:29	monochrom	Judging from everything you've said in the past, no it didn't work.
2022-06-18 21:49:35	Bulby[m]	hahaha
2022-06-18 21:49:57	dsal	I did a hybrid approach.  Wrote software, then read a bunch of stuff to learn how my software worked.  Then realized all the dumb stuff I was doing.  Repeat.  My stuff gets slightly less dumb as I go.
2022-06-18 21:50:04	dsal	It's not optimal, but it's satisfying.
2022-06-18 21:50:05	Bulby[m]	i knew someone would say something like that 😉
2022-06-18 21:50:24	Bulby[m]	rust is easy to do that with because the compiler tells you exactly what you messed up
2022-06-18 21:50:25	geekosaur	it's the story of programming
2022-06-18 21:50:46	monochrom	Instead of finishing an interpreter, all I saw was "why is Haskell so hard when I use it in unidiomatic ways".
2022-06-18 21:51:02	Bulby[m]	are you talking about me
2022-06-18 21:51:06	monochrom	YES
2022-06-18 21:51:14	Bulby[m]	figures
2022-06-18 21:51:31	Bulby[m]	yeah, now i'm writing the VM in rust
2022-06-18 21:51:39	Bulby[m]	so you are spared for a while
2022-06-18 21:52:03	→	thatcher has joined #haskell
2022-06-18 21:52:44	Bulby[m]	haskell isn't hard anymore (even tho I still use it in unidiomatic ways)
2022-06-18 21:52:57	monochrom	This is why dive-in projects must fail in Haskell. You dive-in, you don't know how Haskell is supposed to be used, you just think up your own way, which is unidiomatic, now everything breaks.
2022-06-18 21:53:06	Bulby[m]	hahahah
2022-06-18 21:53:41	Bulby[m]	my solution to appending to lists taking too long was prepending, and reversing at the end
2022-06-18 21:54:48	Bulby[m]	now I use right associative operators
2022-06-18 21:58:35	→	quarkyalice has joined #haskell
2022-06-18 21:59:23	exarkun	monochrom: how is Haskell unique in this regard
2022-06-18 22:00:32	monochrom	Because in the context of having used an imperative language and then you learn either another imperative language or a functional language, "your own way" simply means imperative ways.
2022-06-18 22:00:56	→	eggplantade has joined #haskell
2022-06-18 22:01:02	monochrom	Because self-selection bias implies that people who want to learn programming are control freaks.
2022-06-18 22:03:13	exarkun	I suppose that if you took someone who had only ever learned functional programming languages and dropped them into Python, you would have equally poor outcomes.
2022-06-18 22:03:36	monochrom	We don't have a lot of that in the real world.
2022-06-18 22:04:02	exarkun	So maybe this is more a commentary on the state of the world than on Haskell
2022-06-18 22:04:25	monochrom	Alternatively, I can weasel out and say "I didn't say whether dive-in would fail in python" :)
2022-06-18 22:05:08	exarkun	:)
2022-06-18 22:05:27	ℹ	irc: disconnected from server
2022-06-21 10:44:52	→	oxide has joined #haskell
2022-06-21 10:44:52	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-06-21 10:44:52	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-06-21 10:44:52	ℹ	Channel #haskell: 715 nicks (1 op, 0 voices, 714 normals)
2022-06-21 10:44:53	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-06-21 10:44:53	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-06-21 10:46:37	←	arjun has quit (Quit: tip toe-ing my way outta here)
2022-06-21 10:50:24	→	coot has joined #haskell
2022-06-21 10:50:54	→	takuan has joined #haskell
2022-06-21 10:51:01	←	mikoto-chan has quit (Ping timeout: 256 seconds)
2022-06-21 10:52:47	←	leah2 has quit (Ping timeout: 240 seconds)
2022-06-21 10:54:02	→	leah2 has joined #haskell
2022-06-21 10:55:02	→	michalz has joined #haskell
2022-06-21 10:58:10	←	z0k has quit (Ping timeout: 240 seconds)
2022-06-21 11:00:24	→	z0k has joined #haskell
2022-06-21 11:02:33	→	zmt01 has joined #haskell
2022-06-21 11:04:15	→	mikoto-chan has joined #haskell
2022-06-21 11:04:46	←	king_gs has quit (Quit: king_gs)
2022-06-21 11:05:41	←	leeb has quit (Ping timeout: 246 seconds)
2022-06-21 11:06:20	←	zmt00 has quit (Ping timeout: 255 seconds)
2022-06-21 11:07:49	→	leeb has joined #haskell
2022-06-21 11:13:06	→	mbuf has joined #haskell
2022-06-21 11:14:04	←	acetakwas has quit (Ping timeout: 240 seconds)
2022-06-21 11:19:13	ℹ	irc: disconnected from server
2022-08-30 03:36:32	→	oxide has joined #haskell
2022-08-30 03:36:32	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-08-30 03:36:32	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-08-30 03:36:32	ℹ	Channel #haskell: 697 nicks (1 op, 0 voices, 696 normals)
2022-08-30 03:36:32	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-08-30 03:36:32	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-08-30 03:37:18	hpc	heh, that reminds me of one time, a coworker was installing pandoc and he had never used haskell
2022-08-30 03:37:29	qrpnxz	i mean, there really is not much of a point in trying to draw a line between container and not-container wrt Traversable. It just is what it is. As it is, it's really useful. If you need something else, that's not Traversables problem
2022-08-30 03:37:30	hpc	so he saw it was installing containers and he asked me why a document converter needed docker
2022-08-30 03:37:50	qrpnxz	lmao
2022-08-30 03:37:53	monochrom	hahahha
2022-08-30 03:38:41	←	merijn has quit (Ping timeout: 252 seconds)
2022-08-30 03:38:48	qrpnxz	i ask that myself every day except for flatpak
2022-08-30 03:39:37	←	cheater has quit (Ping timeout: 268 seconds)
2022-08-30 03:39:52	←	eggplantade has quit (Remote host closed the connection)
2022-08-30 03:40:04	→	rockymarine has joined #haskell
2022-08-30 03:41:07	⚡	geekosaur really doesn't see what the problem is. instead of being a structure, it preserves whatever structure it is given
2022-08-30 03:41:19	geekosaur	surely we can generalize like that?
2022-08-30 03:42:41	→	cheater has joined #haskell
2022-08-30 03:43:10	monochrom	Oh, today's smbc applies. "Why does everything have to be a noun with you?" >:)
2022-08-30 03:43:12	hpc	it's just nixos without any package sharing :P
2022-08-30 03:44:24	qrpnxz	monochrom: lol seriously. Good comic!
2022-08-30 03:44:34	←	euandreh has quit (Ping timeout: 252 seconds)
2022-08-30 03:44:36	geekosaur	everything has to be a verb with me 😈
2022-08-30 03:44:48	qrpnxz	verb centrism actually based
2022-08-30 03:44:58	monochrom	Hehe right? Consider "God, do containers exist? Are they real?"
2022-08-30 03:45:24	monochrom	And generalize that to all of OOP aka noun-driven programming.
2022-08-30 03:46:20	hpc	i am going to make an adverb-based language and call it "hemingway"
2022-08-30 03:46:24	ℹ	zero is now known as zzz
2022-08-30 03:46:40	monochrom	haha
2022-08-30 03:46:41	→	euandreh has joined #haskell
2022-08-30 03:46:51	qrpnxz	"Does the RealWorld exist?" "idk, IO is an implicit effect for me"
2022-08-30 03:46:57	monochrom	You can start with STM's "atomically" :)
2022-08-30 03:47:07	ℹ	irc: disconnected from server
2022-08-30 05:30:03	→	oxide has joined #haskell
2022-08-30 05:30:03	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-08-30 05:30:03	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-08-30 05:30:03	ℹ	Channel #haskell: 693 nicks (1 op, 0 voices, 692 normals)
2022-08-30 05:30:04	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-08-30 05:30:04	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-08-30 05:30:20	qrpnxz	apache2: that sounds like the opposite of church encoding.
2022-08-30 05:30:27	→	nate4 has joined #haskell
2022-08-30 05:32:41	apache2	qrpnxz: indeed, it should have been operations -> products and sums -> church encoding
2022-08-30 05:34:59	→	merijn has joined #haskell
2022-08-30 05:38:31	←	[itchyjunk] has quit (Ping timeout: 260 seconds)
2022-08-30 05:42:56	←	talismanick has quit (Ping timeout: 268 seconds)
2022-08-30 05:45:06	←	pavonia has quit (Read error: Connection reset by peer)
2022-08-30 05:45:30	→	Polo has joined #haskell
2022-08-30 05:50:23	→	pavonia has joined #haskell
2022-08-30 05:50:28	ℹ	shapr` is now known as shapr
2022-08-30 05:53:42	←	matthewmosior has quit (Ping timeout: 260 seconds)
2022-08-30 05:55:27	←	machinedgod has quit (Ping timeout: 252 seconds)
2022-08-30 05:59:14	→	nattiestnate has joined #haskell
2022-08-30 06:06:57	→	eggplantade has joined #haskell
2022-08-30 06:07:14	→	ddellacosta has joined #haskell
2022-08-30 06:07:38	→	matthewmosior has joined #haskell
2022-08-30 06:09:29	←	merijn has quit (Ping timeout: 268 seconds)
2022-08-30 06:11:55	←	eggplantade has quit (Ping timeout: 268 seconds)
2022-08-30 06:12:20	ℹ	Polo is now known as Guest5011
2022-08-30 06:13:32	←	nattiestnate has quit (Quit: WeeChat 3.6)
2022-08-30 06:16:50	←	ph88 has quit (Quit: Leaving)
2022-08-30 06:18:18	→	td_ has joined #haskell
2022-08-30 06:18:22	→	eggplantade has joined #haskell
2022-08-30 06:20:01	←	segfaultfizzbuzz has quit (Ping timeout: 252 seconds)
2022-08-30 06:20:02	→	talismanick has joined #haskell
2022-08-30 06:30:01	←	Guest5011 has quit (Quit: out)
2022-08-30 06:33:19	→	segfaultfizzbuzz has joined #haskell
2022-08-30 06:33:56	←	gurkenglas has quit (Ping timeout: 260 seconds)
2022-08-30 06:34:09	←	azimut has quit (Remote host closed the connection)
2022-08-30 06:34:09	←	nate4 has quit (Ping timeout: 268 seconds)
2022-08-30 06:34:26	→	azimut has joined #haskell
2022-08-30 06:36:03	→	slack1963 has joined #haskell
2022-08-30 06:37:37	←	xff0x has quit (Ping timeout: 252 seconds)
2022-08-30 06:38:26	←	slack1256 has quit (Ping timeout: 268 seconds)
2022-08-30 06:41:10	←	ChaiTRex has quit (Ping timeout: 258 seconds)
2022-08-30 06:42:35	→	ChaiTRex has joined #haskell
2022-08-30 06:47:06	ℹ	irc: disconnected from server
2022-08-30 19:34:39	→	oxide has joined #haskell
2022-08-30 19:34:39	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-08-30 19:34:39	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-08-30 19:34:39	ℹ	Channel #haskell: 702 nicks (1 op, 0 voices, 701 normals)
2022-08-30 19:34:39	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-08-30 19:34:40	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-08-30 19:46:37	ℹ	irc: disconnected from server
2022-08-30 19:59:48	→	oxide has joined #haskell
2022-08-30 19:59:48	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-08-30 19:59:48	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-08-30 19:59:48	ℹ	Channel #haskell: 702 nicks (1 op, 0 voices, 701 normals)
2022-08-30 19:59:48	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-08-30 19:59:48	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-08-30 20:00:05	→	coot has joined #haskell
2022-08-30 20:03:17	←	zmt01 has quit (Ping timeout: 255 seconds)
2022-08-30 20:04:31	→	jonathanx has joined #haskell
2022-08-30 20:05:10	←	Luj has quit (Quit: The Lounge - https://thelounge.chat)
2022-08-30 20:05:10	→	gurkenglas has joined #haskell
2022-08-30 20:06:04	→	Luj has joined #haskell
2022-08-30 20:07:17	←	merijn has quit (Read error: Connection reset by peer)
2022-08-30 20:08:42	←	Luj has quit (Client Quit)
2022-08-30 20:09:47	←	rockymarine has quit (Ping timeout: 252 seconds)
2022-08-30 20:11:41	←	jonathanx has quit (Remote host closed the connection)
2022-08-30 20:11:53	→	Luj has joined #haskell
2022-08-30 20:12:35	→	dsrt^ has joined #haskell
2022-08-30 20:19:25	ℹ	irc: disconnected from server
2022-08-30 20:20:15	→	oxide has joined #haskell
2022-08-30 20:20:15	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-08-30 20:20:15	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-08-30 20:20:15	ℹ	Channel #haskell: 702 nicks (1 op, 0 voices, 701 normals)
2022-08-30 20:20:16	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-08-30 20:20:16	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-08-30 20:20:16	→	jinsun__ has joined #haskell
2022-08-30 20:20:16	ℹ	jinsun is now known as Guest2851
2022-08-30 20:20:16	←	Guest2851 has quit (Killed (molybdenum.libera.chat (Nickname regained by services)))
2022-08-30 20:20:16	ℹ	jinsun__ is now known as jinsun
2022-08-30 20:20:37	Franciman	unfortunately it seems it is not a binary tree in the base / containers library
2022-08-30 20:20:50	f-a	yup, hence my question
2022-08-30 20:22:05	→	eggplantade has joined #haskell
2022-08-30 20:23:34	→	nate4 has joined #haskell
2022-08-30 20:24:19	Franciman	probably the haskell foundation thinks you don't need it, be smarter!
2022-08-30 20:24:38	Franciman	maybe you don't need it
2022-08-30 20:24:57	f-a	:P it is easy enough to write by hand, in all fairness
2022-08-30 20:25:37	Franciman	and you can also have the Traversable Foldable etc instances directly automagically
2022-08-30 20:27:54	→	rockymarine has joined #haskell
2022-08-30 20:28:16	←	nate4 has quit (Ping timeout: 244 seconds)
2022-08-30 20:32:53	←	rockymarine has quit (Ping timeout: 252 seconds)
2022-08-30 20:34:18	ℹ	irc: disconnected from server
2022-08-31 04:31:28	→	oxide has joined #haskell
2022-08-31 04:31:28	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-08-31 04:31:28	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-08-31 04:31:28	ℹ	Channel #haskell: 695 nicks (1 op, 0 voices, 694 normals)
2022-08-31 04:31:28	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-08-31 04:31:28	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-08-31 04:31:41	←	nate4 has quit (Ping timeout: 255 seconds)
2022-08-31 04:33:26	←	Tuplanolla has quit (Quit: Leaving.)
2022-08-31 04:34:33	←	MoC has quit (Quit: Konversation terminated!)
2022-08-31 04:37:53	→	talismanick has joined #haskell
2022-08-31 04:46:20	←	matthewmosior has quit (Ping timeout: 244 seconds)
2022-08-31 04:49:07	←	fserucas has quit (Remote host closed the connection)
2022-08-31 04:56:03	←	machinedgod has quit (Ping timeout: 268 seconds)
2022-08-31 04:57:56	←	kannon has quit (Ping timeout: 260 seconds)
2022-08-31 04:59:42	←	jargon has quit (Ping timeout: 268 seconds)
2022-08-31 05:00:32	→	luffy has joined #haskell
2022-08-31 05:00:47	←	phma has quit (Remote host closed the connection)
2022-08-31 05:01:12	→	phma has joined #haskell
2022-08-31 05:01:34	→	matthewmosior has joined #haskell
2022-08-31 05:07:21	→	dsrt^ has joined #haskell
2022-08-31 05:07:56	→	machinedgod has joined #haskell
2022-08-31 05:07:59	→	segfaultfizzbuzz has joined #haskell
2022-08-31 05:08:55	segfaultfizzbuzz	how does a real programmer (read: not yours truly) compare CPUs?
2022-08-31 05:14:04	Axman6	> compare "CPU A" "CPU B"
2022-08-31 05:14:06	lambdabot	 LT
2022-08-31 05:15:01	monochrom	I thought only PC gamers compare CPUs. :)
2022-08-31 05:16:08	hpc	there's some truth in that
2022-08-31 05:16:31	hpc	i mostly only think about memory use, disk IO patterns, and network bandwidth
2022-08-31 05:16:39	segfaultfizzbuzz	like i look at powerPC and they say the CPU has something special about cache sharing
2022-08-31 05:16:58	qrpnxz	i thought powerpc was dead lol
2022-08-31 05:17:01	segfaultfizzbuzz	and then i look at some other CPU and it has DHAIJ-4i890889q
2022-08-31 05:17:02	hpc	leave that sort of thing to kernel developers
2022-08-31 05:17:15	qrpnxz	tf is DHAndyq2302
2022-08-31 05:17:25	→	jmorris has joined #haskell
2022-08-31 05:17:38	hpc	by the time it matters how good your cpu is, you have enough millions to just by one of each and benchmark
2022-08-31 05:17:53	Axman6	if you own a car you probably own half a dozen PowerPC chips
2022-08-31 05:18:01	segfaultfizzbuzz	and like do i need ITJHo0-509039 or EIJHAEIJKqqq or does not having it get in the way of turing completeness or something
2022-08-31 05:18:19	qrpnxz	i have a 5950x and i wish it was faster. 😩 New gen ryzen coming out tho :)
2022-08-31 05:18:59	waleee	having someting that's x86_64_v3 compatible is nice as the very minimum
2022-08-31 05:19:28	segfaultfizzbuzz	hpc: so it's an OS-level thing? at the application level this stuff just doesn't show up?
2022-08-31 05:19:42	qrpnxz	i've wanted high-tier ARM for a while. Apple did it which blew my mind, but i don't compute on fruits
2022-08-31 05:20:18	hpc	i mean, you'll notice the performance
2022-08-31 05:20:22	Axman6	keep paying that x86_64 power bill then
2022-08-31 05:20:36	qrpnxz	xd, i don't even know any consumer desktop arm cpu
2022-08-31 05:20:37	hpc	but there's probably not a lot you can do in your own code to exploit it
2022-08-31 05:20:46	qrpnxz	never mind high-end ones
2022-08-31 05:21:02	hpc	without writing super weird cpu-specific code that probably needs special privileges anyway
2022-08-31 05:21:09	qrpnxz	RISC-V would be even better, but if ARM is not happening, then RISC-V even less
2022-08-31 05:21:13	Axman6	the performace per watt for M1, M2 is just nuts. having 400GB/s of memory bandwidth is pretty insane too - imagine being able to garbage collect your whole system's memory several times a second
2022-08-31 05:21:45	qrpnxz	the perfect python machine 😭
2022-08-31 05:21:46	segfaultfizzbuzz	i think (?) i understand that bigger cache is better but then i saw somewhere that 1 Gb (or GB?) cache will be shipping very soon so
2022-08-31 05:22:03	qrpnxz	1GB?!
2022-08-31 05:22:09	segfaultfizzbuzz	yeah i understand memory bandwidth
2022-08-31 05:22:12	waleee	Axman6: M1 et al isn't exactly cheap to buy up front
2022-08-31 05:22:32	Axman6	not yet, no
2022-08-31 05:22:50	Axman6	I reckon the M1 airs will come down in price over time
2022-08-31 05:22:51	qrpnxz	what is having 1GB cache i dont' believe it
2022-08-31 05:22:58	waleee	also not for the macos-allergic person
2022-08-31 05:23:07	qrpnxz	a crazy server chip?
2022-08-31 05:23:23	Axman6	it's just Unix 
2022-08-31 05:23:34	qrpnxz	my mom getting a brand spanking new M1 pro soon.
2022-08-31 05:23:49	segfaultfizzbuzz	yeah i can understand memory bandwidth as something a chip does
2022-08-31 05:23:51	waleee	I prefer my unix looking more like dwm than og windows 11
2022-08-31 05:23:51	qrpnxz	after over a decade having her other mac
2022-08-31 05:24:39	geekosaur	actually I like the UI. the whole SIP/codesign/make-it-so-only-apple-approved-developers-can-write-software thing can go away though
2022-08-31 05:25:01	Axman6	that's not really a thing
2022-08-31 05:25:08	qrpnxz	my work laptop is mac, i vastly prefer gnome personally
2022-08-31 05:25:18	←	luffy has quit (Ping timeout: 252 seconds)
2022-08-31 05:25:29	qrpnxz	more practical
2022-08-31 05:26:29	segfaultfizzbuzz	https://www.servethehome.com/server-cpus-transitioning-to-the-gb-onboard-era/ ... EPYC 72F3 has 256MB of L3 cache right now
2022-08-31 05:26:57	Axman6	RIP your power bill if you run a server CPU for you every day machine
2022-08-31 05:27:30	→	kannon has joined #haskell
2022-08-31 05:27:47	→	nilradical has joined #haskell
2022-08-31 05:27:59	segfaultfizzbuzz	https://www.club386.com/amd-unleashes-epyc-7003-series-with-3d-v-cache/ 768MB L3 in EPYC 7003
2022-08-31 05:29:25	→	braf has joined #haskell
2022-08-31 05:29:39	segfaultfizzbuzz	chiplets/stacking means cache size will go to infinity very soon i guess
2022-08-31 05:29:42	→	luffy has joined #haskell
2022-08-31 05:32:33	segfaultfizzbuzz	https://images.anandtech.com/doci/16924/TElumsystems.jpg here is IBM talking about a 32GB cache shared across 32 chips (!)
2022-08-31 05:32:38	←	eikke has quit (Ping timeout: 252 seconds)
2022-08-31 05:33:15	segfaultfizzbuzz	but that is "L4 cache" (lol wat)
2022-08-31 05:33:49	←	califax has quit (Remote host closed the connection)
2022-08-31 05:34:14	→	califax has joined #haskell
2022-08-31 05:34:15	geekosaur	you can have as many levels as you're willing to pay for. whether they're worth it may be another question
2022-08-31 05:35:20	←	perrierjouet has quit (Quit: WeeChat 3.6)
2022-08-31 05:37:53	qrpnxz	i think if your main memory is in the terabytes as these cpu can go, L4 have a place
2022-08-31 05:37:55	←	gurkenglas has quit (Ping timeout: 268 seconds)
2022-08-31 05:40:04	→	Midjak has joined #haskell
2022-08-31 05:49:30	←	rockystone has quit (Ping timeout: 252 seconds)
2022-08-31 05:52:09	←	emad has quit (Quit: Leaving)
2022-08-31 05:55:44	←	segfaultfizzbuzz has quit (Ping timeout: 252 seconds)
2022-08-31 05:57:05	←	nilradical has quit ()
2022-08-31 05:58:06	→	motherfsck has joined #haskell
2022-08-31 05:58:45	→	rockystone has joined #haskell
2022-08-31 06:01:41	←	dsrt^ has quit (Ping timeout: 255 seconds)
2022-08-31 06:05:02	←	matthewmosior has quit (Ping timeout: 260 seconds)
2022-08-31 06:05:10	→	segfaultfizzbuzz has joined #haskell
2022-08-31 06:13:37	←	PiDelport has quit (Quit: Connection closed for inactivity)
2022-08-31 06:16:10	←	luffy has quit (Ping timeout: 268 seconds)
2022-08-31 06:17:27	→	matthewmosior has joined #haskell
2022-08-31 06:17:47	←	Midjak has quit (Quit: This computer has gone to sleep)
2022-08-31 06:26:32	←	foul_owl has quit (Ping timeout: 252 seconds)
2022-08-31 06:29:09	←	azimut_ has quit (Quit: ZNC - https://znc.in)
2022-08-31 06:29:37	→	azimut has joined #haskell
2022-08-31 06:31:52	←	kannon has quit (Ping timeout: 260 seconds)
2022-08-31 06:32:20	←	L29Ah has quit (Read error: Connection reset by peer)
2022-08-31 06:32:49	←	inversed has quit (Ping timeout: 268 seconds)
2022-08-31 06:34:01	→	coady has joined #haskell
2022-08-31 06:35:48	→	dsrt^ has joined #haskell
2022-08-31 06:40:23	→	foul_owl has joined #haskell
2022-08-31 06:40:48	←	albet70 has quit (Remote host closed the connection)
2022-08-31 06:42:03	←	xff0x has quit (Ping timeout: 248 seconds)
2022-08-31 06:44:11	←	coady has quit (Quit: WeeChat 3.0)
2022-08-31 06:46:55	→	albet70 has joined #haskell
2022-08-31 06:50:17	←	rockystone has quit (Ping timeout: 255 seconds)
2022-08-31 06:53:10	←	dsrt^ has quit (Ping timeout: 268 seconds)
2022-08-31 06:53:25	←	biberu has quit (Read error: Connection reset by peer)
2022-08-31 06:53:43	→	biberu has joined #haskell
2022-08-31 06:54:15	→	dsrt^ has joined #haskell
2022-08-31 06:54:28	←	talismanick has quit (Ping timeout: 244 seconds)
2022-08-31 06:56:38	→	finsternis has joined #haskell
2022-08-31 06:57:19	←	alexd has quit (Ping timeout: 252 seconds)
2022-08-31 07:00:41	→	jargon has joined #haskell
2022-08-31 07:06:44	←	dsrt^ has quit (Ping timeout: 268 seconds)
2022-08-31 07:07:46	→	dsrt^ has joined #haskell
2022-08-31 07:13:04	←	waleee has quit (Ping timeout: 244 seconds)
2022-08-31 07:26:10	→	Alex_test_ has joined #haskell
2022-08-31 07:26:25	→	frost has joined #haskell
2022-08-31 07:27:45	←	Alex_test has quit (Ping timeout: 252 seconds)
2022-08-31 07:28:25	→	xff0x has joined #haskell
2022-08-31 07:28:56	←	machinedgod has quit (Ping timeout: 268 seconds)
2022-08-31 07:30:28	→	nate4 has joined #haskell
2022-08-31 07:37:20	←	chexum has quit (Ping timeout: 258 seconds)
2022-08-31 07:40:28	→	bontaq` has joined #haskell
2022-08-31 07:48:50	→	inversed has joined #haskell
2022-08-31 07:57:31	→	kannon has joined #haskell
2022-08-31 07:57:31	→	eggplantade has joined #haskell
2022-08-31 08:01:23	←	eggplantade has quit (Ping timeout: 255 seconds)
2022-08-31 08:01:23	←	kannon has quit (Ping timeout: 255 seconds)
2022-08-31 08:03:34	→	luffy has joined #haskell
2022-08-31 08:03:44	→	chexum has joined #haskell
2022-08-31 08:04:11	→	eggplantade has joined #haskell
2022-08-31 08:05:15	←	kimjetwav has quit (Ping timeout: 244 seconds)
2022-08-31 08:11:58	→	merijn has joined #haskell
2022-08-31 08:13:24	←	mtjm has quit (Remote host closed the connection)
2022-08-31 08:14:03	←	vglfr has quit (Ping timeout: 252 seconds)
2022-08-31 08:14:03	→	kannon has joined #haskell
2022-08-31 08:14:36	→	mtjm has joined #haskell
2022-08-31 08:17:15	←	td_ has quit (Ping timeout: 252 seconds)
2022-08-31 08:17:39	←	merijn has quit (Ping timeout: 268 seconds)
2022-08-31 08:18:36	←	kannon has quit (Ping timeout: 260 seconds)
2022-08-31 08:19:07	→	td_ has joined #haskell
2022-08-31 08:19:24	→	kannon has joined #haskell
2022-08-31 08:19:57	→	vglfr has joined #haskell
2022-08-31 08:22:52	→	merijn has joined #haskell
2022-08-31 08:23:26	←	jao has quit (Ping timeout: 255 seconds)
2022-08-31 08:23:51	←	kannon has quit (Ping timeout: 244 seconds)
2022-08-31 08:28:34	→	kannon has joined #haskell
2022-08-31 08:28:34	←	FinnElija has quit (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
2022-08-31 08:28:34	→	finn_elija has joined #haskell
2022-08-31 08:28:34	ℹ	finn_elija is now known as FinnElija
2022-08-31 08:28:34	←	merijn has quit (Ping timeout: 255 seconds)
2022-08-31 08:28:34	→	king_gs has joined #haskell
2022-08-31 08:28:42	→	mikoto-chan has joined #haskell
2022-08-31 08:29:41	←	kannon has quit (Ping timeout: 260 seconds)
2022-08-31 08:34:11	←	jero98772 has quit (Remote host closed the connection)
2022-08-31 08:47:15	←	poscat has quit (Quit: Bye)
2022-08-31 08:48:56	qrpnxz	i can use `effectful` effects to track object lifetimes lol. This is epic honestly.
2022-08-31 08:49:29	→	poscat has joined #haskell
2022-08-31 08:51:05	→	rockystone has joined #haskell
2022-08-31 08:53:25	←	nate4 has quit (Ping timeout: 268 seconds)
2022-08-31 08:54:05	→	kannon has joined #haskell
2022-08-31 08:56:40	→	Sgeo_ has joined #haskell
2022-08-31 08:57:07	←	Sgeo has quit (Ping timeout: 268 seconds)
2022-08-31 09:00:23	←	Kaiepi has quit (Read error: Connection reset by peer)
2022-08-31 09:01:40	→	Kaiepi has joined #haskell
2022-08-31 09:04:21	←	matthewmosior has quit (Remote host closed the connection)
2022-08-31 09:04:27	→	matthewmosior has joined #haskell
2022-08-31 09:05:28	→	Ailrk has joined #haskell
2022-08-31 09:05:37	→	bitdex has joined #haskell
2022-08-31 09:10:01	←	matthewmosior has quit (Remote host closed the connection)
2022-08-31 09:10:36	→	matthewmosior has joined #haskell
2022-08-31 09:11:12	→	sp0ok has joined #haskell
2022-08-31 09:11:20	←	segfaultfizzbuzz has quit (Ping timeout: 268 seconds)
2022-08-31 09:14:20	Clinton[m]	Is there anyway to have constraints in a `cabal.project` file which are only triggered upon passing a flag? I basically have a project which has about a dozen packages and I want to pass a `cabal build all --flag dev` (or something of that effect) which turns off a bunch of warnings/stops "typed holes" from giving an error in "development mode", whilst the build itself it still fairly strict. 
2022-08-31 09:14:29	←	king_gs has quit (Ping timeout: 244 seconds)
2022-08-31 09:15:11	←	matthewmosior has quit (Ping timeout: 255 seconds)
2022-08-31 09:16:13	glguy	Clinton[m]: you can have multiple project files and then specify which one to use with the --project-file flag
2022-08-31 09:17:42	Clinton[m]	glguy: Ah, I was hoping to avoid the copy pasta
2022-08-31 09:18:21	→	matthewmosior has joined #haskell
2022-08-31 09:18:29	→	nate4 has joined #haskell
2022-08-31 09:19:11	←	ix has quit (Quit: WeeChat 3.5)
2022-08-31 09:21:57	→	ix has joined #haskell
2022-08-31 09:22:18	→	segfaultfizzbuzz has joined #haskell
2022-08-31 09:22:46	←	matthewmosior has quit (Ping timeout: 260 seconds)
2022-08-31 09:22:54	→	causal has joined #haskell
2022-08-31 09:22:56	qrpnxz	yes you can do flags one sec
2022-08-31 09:24:02	glguy	https://cabal.readthedocs.io/en/stable/cabal-project.html#conditionals-and-imports -- As of cabal-install version 3.8, cabal supports conditional logic and imports in cabal.project files. Conditions in cabal may case on operating system, architecture, and compiler (i.e. there is no support for a notion of custom flags in project files).
2022-08-31 09:24:06	qrpnxz	Clinton[m]: example https://paste.tomsmeding.com/F8t2qwI9
2022-08-31 09:24:18	glguy	qrpnxz: that's something else
2022-08-31 09:24:29	qrpnxz	it's functionally exactly what he needs far i can tell
2022-08-31 09:24:37	qrpnxz	syntax is a minor detail
2022-08-31 09:24:43	←	nate4 has quit (Ping timeout: 252 seconds)
2022-08-31 09:24:47	sclv	Clinton[m]: you can avoid copypasta with includes
2022-08-31 09:28:50	glguy	qrpnxz: it's not a syntax thing, it's a level of abstraction thing, one works at the project workspace and the other is per package
2022-08-31 09:29:46	qrpnxz	i didn't see anything about doing per package in the question
2022-08-31 09:29:49	qrpnxz	but sure
2022-08-31 09:35:41	→	matthewmosior has joined #haskell
2022-08-31 09:36:41	Clinton[m]	sclv: are you saying I can avoid copypastaering the list of warnings I'm turning off in each package library/test/executable in each `.cabal` file?
2022-08-31 09:36:44	←	jakalx has left #haskell (Error from remote client)
2022-08-31 09:37:11	→	nate4 has joined #haskell
2022-08-31 09:37:56	Clinton[m]	sclv: like this? https://cabal.readthedocs.io/en/3.4/cabal-package.html#autogenerated-modules-and-includes
2022-08-31 09:38:28	sclv	You can turn them off in the project file. Im suggesting you can have a shared common project file and turn off them in a special file that first imports the shared one
2022-08-31 09:42:08	←	nate4 has quit (Ping timeout: 268 seconds)
2022-08-31 09:42:11	Clinton[m]	sclv: I'm not following sorry. Let's keep it simple. I've got `cabal.project` and `mypackage1.cabal`, `mypackage2.cabal`, ... , `mypackage9.cabal`. I want to add `-O0` and `-Wno-unused-imports` to my dev build. I want the "packages" built by my "dev" build to be ignored by my "proper" build. That is I don't want packages compiled with `-O0` to be mixed with those compiled with `-O0`. What should I be doing here?
2022-08-31 09:42:35	Clinton[m]	* to my "dev, * dev" build.
2022-08-31 09:42:44	Clinton[m]	 * I'm not following sorry. Let's keep it simple. I've got `cabal.project` and `mypackage1.cabal`, `mypackage2.cabal`, ... , `mypackage9.cabal`. I want to add `-O0` and `-Wno-unused-imports` to my "dev" build. I want the "packages" built by my "dev" build to be ignored by my "proper" build. That is I don't want packages compiled with `-O0` to be mixed with those compiled with `-O1`. What should I be doing here?
2022-08-31 09:43:06	Clinton[m]	 * I'm not following sorry. Let's keep it simple. I've got `cabal.project` and `mypackage1.cabal`, `mypackage2.cabal`, ... , `mypackage9.cabal`. I want to add `-O0` and `-Wno-unused-imports` to my "dev" build. I want the "packages" built by my "dev" build to be ignored by my "proper" build. That is I don't want packages compiled with `-O0` without warnings/errors to be mixed with those compiled with `-O1` with the full warning/error set.
2022-08-31 09:43:06	Clinton[m]	What should I be doing here?
2022-08-31 09:43:34	sclv	Create a second project file. Import the first and for each package add the ghc flags. Now you can use the first project file or the second,
2022-08-31 09:44:05	sclv	cabal won’t let the two build products mix.
2022-08-31 09:44:21	→	jakalx has joined #haskell
2022-08-31 09:44:25	Clinton[m]	sclv: ah, gotcha. So I need to copypasta `-O0 -Wno-unused-imports` under a flag in EVERY `.cabal` file? 
2022-08-31 09:44:40	sclv	No. Put them in the project file!
2022-08-31 09:45:04	sclv	Project files let you set ghc options for packages
2022-08-31 09:45:58	Clinton[m]	sclv: as in just put a `ghc-options` clause at the top level of the `cabal.project` file?
2022-08-31 09:46:03	→	Sgeo__ has joined #haskell
2022-08-31 09:46:56	sclv	I think. You might need to put it under a clause for each package. Don’t recall the semantics offhand, they’ve been goofy and fixed recently.
2022-08-31 09:47:46	Clinton[m]	sclv: `Unrecognized field 'ghc-options'`
2022-08-31 09:49:31	glguy	https://cabal.readthedocs.io/en/stable/cabal-project.html#package-configuration-options
2022-08-31 09:49:31	Clinton[m]	sclv: my packages are listed like in my `cabal.project` file:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/b59e29c28ca9d85f4244de3b853968b8ec4bf416)
2022-08-31 09:49:50	←	Sgeo_ has quit (Ping timeout: 255 seconds)
2022-08-31 09:50:24	sclv	right, let me find you an example
2022-08-31 09:50:48	sclv	https://github.com/haskell/cabal/blob/master/cabal.project
2022-08-31 09:51:06	sclv	so for each local package you have a stanza and then you put the options under it
2022-08-31 09:51:22	sclv	You mgiht be able to say "package *" for all local packages, but i don't recall.
2022-08-31 09:51:36	Clinton[m]	sclv: so there is a copypasta but at least it's all in one file. 
2022-08-31 09:51:45	sclv	and if you say "package *" then there's no copypasta
2022-08-31 09:52:02	sclv	just "package * \n\t ghc-options: etc"
2022-08-31 09:52:35	sclv	that's the goofy semantics bit -- the current documentation should explain. it at times meant "all packages, not just local ones" but that might have been fixed
2022-08-31 09:52:43	←	matthewmosior has quit (Ping timeout: 244 seconds)
2022-08-31 09:52:45	Clinton[m]	sclv: I think `package *` applies to external packages though (according to glguy 's link) which I don't _think_ I want, although perhaps it doesn't matter much
2022-08-31 09:53:07	sclv	right, so then you need to list them all, but yeah, its all in one place and you don't need extra flags and stuff
2022-08-31 09:54:43	sclv	i'm sort of surprised you can't just say "ghc-options: " at the top level, since that's what the docs suggest should work, and then apply to all local packages only
2022-08-31 09:54:53	Clinton[m]	hang on, the documentation glguy  has linked to https://cabal.readthedocs.io/en/stable/cabal-project.html#package-configuration-options suggests that I should be able to just put `ghc-options` at the top level of my `cabal.project` file (outside of any package stanza) and have that apply to all *local* packages
2022-08-31 09:55:00	sclv	right
2022-08-31 09:55:15	Clinton[m]	 * sclv:  hang on, the documentation glguy  has linked to https://cabal.readthedocs.io/en/stable/cabal-project.html#package-configuration-options suggests that I should be able to just put `ghc-options` at the top level of my `cabal.project` file (outside of any package stanza) and have that apply to all _local_ packages
2022-08-31 09:55:23	Clinton[m]	sclv: we had the same thought at the same time
2022-08-31 09:58:01	Clinton[m]	sclv: and how do I import the base `cabal.project` file? I presume I need something like `cabal_dev.project` which contains "import cabal.project" (shrugs)
2022-08-31 09:59:00	glguy	section 7.1
2022-08-31 10:00:34	→	steve[m]1 has joined #haskell
2022-08-31 10:01:47	→	sammelweis has joined #haskell
2022-08-31 10:02:15	Clinton[m]	glguy: I can't see anything in 7.1 about importing other `cabal.project` files. Sure it's not in a subsection of `7.1`, say `7.1.X` for some `X`? Or have I just missed it in `7.1`?
2022-08-31 10:03:16	Clinton[m]	glguy: you talking about here? https://cabal.readthedocs.io/en/3.6/cabal-package.html#creating-a-package
2022-08-31 10:03:34	glguy	Ah, you're on an old version of the docs
2022-08-31 10:04:51	Clinton[m]	glguy: ah, gotcha. Does only Cabal 3.8 support top level `ghc-options` as well? https://cabal.readthedocs.io/en/3.8/cabal-project.html#conditionals-and-imports
2022-08-31 10:05:35	→	gurkenglas has joined #haskell
2022-08-31 10:06:08	→	king_gs has joined #haskell
2022-08-31 10:07:27	glguy	I tried and it didn't seem to support top-level ghc-options, unfortunately
2022-08-31 10:07:32	glguy	but it's possible I tried wrong somehow
2022-08-31 10:11:50	←	kannon has quit (Ping timeout: 244 seconds)
2022-08-31 10:16:43	Clinton[m]	ah, to do the imports I need Cabal 3.8 which looks like it's pretty recently released
2022-08-31 10:17:01	Clinton[m]	* glguy:  ah, to
2022-08-31 10:17:09	←	luffy has quit (Ping timeout: 252 seconds)
2022-08-31 10:22:30	Clinton[m]	glguy: looks like this is what one needs to do: https://github.com/haskell/cabal/pull/7973
2022-08-31 10:23:07	→	matthewmosior has joined #haskell
2022-08-31 10:24:02	←	rockystone has quit (Ping timeout: 255 seconds)
2022-08-31 10:24:56	←	king_gs has quit (Read error: Connection reset by peer)
2022-08-31 10:26:18	←	sp0ok has quit (Ping timeout: 244 seconds)
2022-08-31 10:26:21	→	king_gs has joined #haskell
2022-08-31 10:27:38	←	matthewmosior has quit (Ping timeout: 255 seconds)
2022-08-31 10:30:07	→	mbuf has joined #haskell
2022-08-31 10:32:29	→	jonathanx has joined #haskell
2022-09-02 03:31:10	→	oxide has joined #haskell
2022-09-02 03:31:10	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-09-02 03:31:10	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-09-02 03:31:10	ℹ	Channel #haskell: 676 nicks (1 op, 0 voices, 675 normals)
2022-09-02 03:31:11	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-09-02 03:31:11	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-09-02 03:31:45	→	landonf has joined #haskell
2022-09-02 03:31:57	→	Square has joined #haskell
2022-09-02 03:32:19	→	x88x88x has joined #haskell
2022-09-02 03:32:31	←	inversed has quit (Ping timeout: 252 seconds)
2022-09-02 03:32:50	→	sm[i]_ has joined #haskell
2022-09-02 03:33:39	→	matthewmosior has joined #haskell
2022-09-02 03:33:49	←	AlexNoo has quit (Ping timeout: 268 seconds)
2022-09-02 03:34:00	→	inversed has joined #haskell
2022-09-02 03:35:29	→	arahael has joined #haskell
2022-09-02 03:35:57	←	PiDelport has quit (Quit: Connection closed for inactivity)
2022-09-02 03:38:55	→	Guest585 has joined #haskell
2022-09-02 03:38:58	→	zaquest has joined #haskell
2022-09-02 03:39:02	←	TonyStone has quit (Ping timeout: 255 seconds)
2022-09-02 03:39:13	→	davean has joined #haskell
2022-09-02 03:39:51	→	leah2 has joined #haskell
2022-09-02 03:39:52	→	lyxia has joined #haskell
2022-09-02 03:39:55	←	kilolympus has quit (Quit: See you later! :))
2022-09-02 03:40:05	→	rodental has joined #haskell
2022-09-02 03:40:09	→	CAT_S has joined #haskell
2022-09-02 03:40:22	→	tomboy64 has joined #haskell
2022-09-02 03:40:33	→	teddyc has joined #haskell
2022-09-02 03:40:43	→	Hafydd_ has joined #haskell
2022-09-02 03:41:52	→	ryantrinkle has joined #haskell
2022-09-02 03:43:38	←	arahael has quit (Ping timeout: 240 seconds)
2022-09-02 03:44:44	→	rockymarine has joined #haskell
2022-09-02 03:45:36	←	texasmynsted_ has quit (Quit: ZNC - http://znc.in)
2022-09-02 03:46:09	→	Guest4212 has joined #haskell
2022-09-02 03:48:34	→	texasmynsted has joined #haskell
2022-09-02 03:48:58	←	rockymarine has quit (Ping timeout: 240 seconds)
2022-09-02 03:49:43	←	Athas_ has quit (Quit: ZNC 1.8.2 - https://znc.in)
2022-09-02 03:49:52	→	Athas has joined #haskell
2022-09-02 03:50:57	→	tdbtwlt^^ has joined #haskell
2022-09-02 03:52:05	←	matthewmosior has quit (Ping timeout: 255 seconds)
2022-09-02 03:53:36	←	tdbtwlt^ has quit (Ping timeout: 268 seconds)
2022-09-02 03:53:42	→	TonyStone has joined #haskell
2022-09-02 03:55:14	→	fserucas has joined #haskell
2022-09-02 03:55:45	→	Sgeo has joined #haskell
2022-09-02 03:56:22	→	matthewmosior has joined #haskell
2022-09-02 03:56:30	←	acidjnk has quit (Ping timeout: 264 seconds)
2022-09-02 03:58:13	→	arahael has joined #haskell
2022-09-02 04:00:46	←	matthewmosior has quit (Ping timeout: 244 seconds)
2022-09-02 04:02:20	→	ifjo5x0qr360ud3k has joined #haskell
2022-09-02 04:11:43	←	Tuplanolla has quit (Quit: Leaving.)
2022-09-02 04:14:43	→	Volt_ has joined #haskell
2022-09-02 04:17:27	ℹ	meejah_ is now known as meejah
2022-09-02 04:18:05	←	ifjo5x0qr360ud3k has quit (Quit: Client closed)
2022-09-02 04:24:52	→	eggplantade has joined #haskell
2022-09-02 04:29:11	←	eggplantade has quit (Ping timeout: 244 seconds)
2022-09-02 04:30:49	←	tdbtwlt^^ has quit (Ping timeout: 252 seconds)
2022-09-02 04:31:37	→	matthewmosior has joined #haskell
2022-09-02 04:32:21	←	ix has quit (Quit: WeeChat 3.5)
2022-09-02 04:32:39	←	mncheck has quit (Ping timeout: 252 seconds)
2022-09-02 04:33:19	→	tdbtwlt^ has joined #haskell
2022-09-02 04:33:24	→	ix has joined #haskell
2022-09-02 04:33:54	←	jao has quit (Read error: Connection reset by peer)
2022-09-02 04:35:22	→	jao has joined #haskell
2022-09-02 04:37:00	→	bitmapper has joined #haskell
2022-09-02 04:38:09	→	ft has joined #haskell
2022-09-02 04:40:17	→	rockymarine has joined #haskell
2022-09-02 04:43:15	→	jero98772 has joined #haskell
2022-09-02 04:45:06	←	ix has quit (Ping timeout: 264 seconds)
2022-09-02 04:47:16	←	rockymarine has quit (Ping timeout: 244 seconds)
2022-09-02 04:48:24	→	pretty_dumm_guy has joined #haskell
2022-09-02 04:48:47	←	matthewmosior has quit (Ping timeout: 255 seconds)
2022-09-02 04:50:14	→	matthewmosior has joined #haskell
2022-09-02 04:51:04	→	rockymarine has joined #haskell
2022-09-02 04:53:01	→	pavonia has joined #haskell
2022-09-02 04:54:38	→	lisbeths has joined #haskell
2022-09-02 04:55:32	←	matthewmosior has quit (Ping timeout: 244 seconds)
2022-09-02 04:56:00	→	o-90 has joined #haskell
2022-09-02 04:56:24	←	o-90 has quit (Remote host closed the connection)
2022-09-02 05:05:53	←	adanwan has quit (Ping timeout: 258 seconds)
2022-09-02 05:10:46	→	adanwan has joined #haskell
2022-09-02 05:13:15	←	takuan has quit (Remote host closed the connection)
2022-09-02 05:15:34	←	pretty_dumm_guy has quit (Quit: WeeChat 3.5)
2022-09-02 05:17:24	←	jao has quit (Read error: Connection reset by peer)
2022-09-02 05:18:12	←	tdbtwlt^ has quit (Remote host closed the connection)
2022-09-02 05:18:55	→	mvk has joined #haskell
2022-09-02 05:24:50	→	matthewmosior has joined #haskell
2022-09-02 05:26:37	→	aaron[m]1234 has joined #haskell
2022-09-02 05:28:32	→	Guest8526 has joined #haskell
2022-09-02 05:29:17	←	matthewmosior has quit (Ping timeout: 255 seconds)
2022-09-02 05:32:49	←	bontaq has quit (Ping timeout: 268 seconds)
2022-09-02 05:33:43	→	jao has joined #haskell
2022-09-02 05:35:08	→	catern has joined #haskell
2022-09-02 05:38:22	←	raehik1 has quit (Ping timeout: 268 seconds)
2022-09-02 05:45:29	→	matthewmosior has joined #haskell
2022-09-02 05:46:34	→	nate4 has joined #haskell
2022-09-02 05:46:35	→	eggplantade has joined #haskell
2022-09-02 05:50:49	←	eggplantade has quit (Ping timeout: 244 seconds)
2022-09-02 05:56:57	→	ix has joined #haskell
2022-09-02 05:57:11	←	waleee has quit (Ping timeout: 255 seconds)
2022-09-02 06:00:38	←	matthewmosior has quit (Ping timeout: 244 seconds)
2022-09-02 06:06:09	←	beteigeuze has quit (Ping timeout: 252 seconds)
2022-09-02 06:08:58	→	Guest27 has joined #haskell
2022-09-02 06:10:47	←	wolfshappen has quit (Ping timeout: 260 seconds)
2022-09-02 06:11:48	segfaultfizzbuzz	so if i am trying to sample from a distribution (think: monte carlo), let's suppose that i have a batch of observations, such as one hundred observations with some kind of answer regarding whether these observations do or don't have the desired characteristic
2022-09-02 06:12:18	segfaultfizzbuzz	for instance i have my circle and i select uniformly at random (x, y) coordinates from a unit interval and then i get information on whether each point is inside the circle or not
2022-09-02 06:12:39	segfaultfizzbuzz	somehow i need to update my sampling method based on these observations
2022-09-02 06:12:58	segfaultfizzbuzz	but i can't think that there is any "rational" manner for doing this
2022-09-02 06:13:26	segfaultfizzbuzz	it seems like you always have to have some kind of model which learns how to update the sampling process from the examples
2022-09-02 06:16:15	←	mikoto-chan has quit (Read error: Connection reset by peer)
2022-09-02 06:17:30	←	TonyStone has quit (Ping timeout: 264 seconds)
2022-09-02 06:19:24	←	jao has quit (Remote host closed the connection)
2022-09-02 06:29:12	→	matthewmosior has joined #haskell
2022-09-02 06:29:22	→	jao has joined #haskell
2022-09-02 06:29:40	→	[itchyjunk] has joined #haskell
2022-09-02 06:33:03	→	master has joined #haskell
2022-09-02 06:34:14	←	master has left #haskell
2022-09-02 06:34:47	→	TonyStone has joined #haskell
2022-09-02 06:35:39	→	master has joined #haskell
2022-09-02 06:35:54	←	master has left #haskell
2022-09-02 06:36:35	←	Guest27 has quit (Quit: Client closed)
2022-09-02 06:40:51	←	albet70 has quit (Remote host closed the connection)
2022-09-02 06:42:55	←	Guest8526 has quit (Quit: Client closed)
2022-09-02 06:43:48	←	xff0x has quit (Ping timeout: 268 seconds)
2022-09-02 06:45:07	→	instantaphex has joined #haskell
2022-09-02 06:46:59	→	albet70 has joined #haskell
2022-09-02 06:47:35	←	matthewmosior has quit (Ping timeout: 255 seconds)
2022-09-02 06:48:56	→	wolfshappen has joined #haskell
2022-09-02 06:49:18	←	nate4 has quit (Ping timeout: 264 seconds)
2022-09-02 06:49:56	→	matthewmosior has joined #haskell
2022-09-02 06:54:20	←	matthewmosior has quit (Ping timeout: 255 seconds)
2022-09-02 06:56:31	←	khumba has quit ()
2022-09-02 07:00:43	ℹ	irc: disconnected from server
2022-09-06 18:53:29	→	oxide has joined #haskell
2022-09-06 18:53:29	ℹ	Topic for #haskell is "https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org | Paste code/errors: https://paste.tomsmeding.com | Logs: https://ircbrowse.tomsmeding.com/browse/lchaskell"
2022-09-06 18:53:29	ℹ	Topic set by glguy on Tue, 04 Jan 2022 09:11:22
2022-09-06 18:53:29	ℹ	Channel #haskell: 706 nicks (1 op, 0 voices, 705 normals)
2022-09-06 18:53:29	ℹ	PvNotice(ChanServ): Welcome to #haskell. Beginner questions are welcome here! Public logs and statistics for this channel are available at https://ircbrowse.tomsmeding.com/lchaskell
2022-09-06 18:53:30	ℹ	Channel created on Sun, 25 Apr 2021 01:04:39
2022-09-06 18:53:33	ℹ	irc: disconnected from server
